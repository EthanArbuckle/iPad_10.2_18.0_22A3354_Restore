void sub_191849420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191849588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918497CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191849890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191849A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cast_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "destination_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2);
    if (v20 < 0)
      operator delete(__p[0]);
    v5 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "mil_original_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2 + 1);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_35;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "destination_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "mil_original_compute_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
LABEL_35:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_191849D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191849E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191849FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184A090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184A278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19184A440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184A6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::lambda_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "network_filename");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 232))(v18, __p, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v5 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v17 < 0)
      operator delete(v16[0]);
    std::string::basic_string[abi:ne180100]<0>(v16, "gradient_network_filename");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 232))(v18, __p, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v8 = v19;
    if (v19)
    {
      v9 = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_31;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "network_filename");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    v11.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v18, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v12 = v19;
    if (v19)
    {
      v13 = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v17 < 0)
      operator delete(v16[0]);
    std::string::basic_string[abi:ne180100]<0>(v16, "gradient_network_filename");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v18, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v8 = v19;
    if (v19)
    {
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldaxr(v15);
      while (__stlxr(v10 - 1, v15));
LABEL_31:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_19184A920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19184AA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184AD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184ADD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184AFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::patch_extractor_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void *__p[2];
  char v76;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v40 = v74;
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "target_size_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v43 = v74;
    if (v74)
    {
      v44 = (unint64_t *)&v74->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "target_size_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v46 = v74;
    if (v74)
    {
      v47 = (unint64_t *)&v74->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v49 = v74;
    if (v74)
    {
      v50 = (unint64_t *)&v74->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_start_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v52 = v74;
    if (v74)
    {
      v53 = (unint64_t *)&v74->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_start_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v55 = v74;
    if (v74)
    {
      v56 = (unint64_t *)&v74->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v58 = v74;
    if (v74)
    {
      v59 = (unint64_t *)&v74->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v61 = v74;
    if (v74)
    {
      v62 = (unint64_t *)&v74->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v64 = v74;
    if (v74)
    {
      v65 = (unint64_t *)&v74->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v67 = v74;
    if (v74)
    {
      v68 = (unint64_t *)&v74->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "unnormalized_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_BYTE *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 88))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v37 = v74;
    if (!v74)
      goto LABEL_225;
    v70 = (unint64_t *)&v74->__shared_owners_;
    do
      v39 = __ldaxr(v70);
    while (__stlxr(v39 - 1, v70));
    goto LABEL_223;
  }
  std::string::basic_string[abi:ne180100]<0>(v71, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2);
  if (v76 < 0)
    operator delete(__p[0]);
  v5 = v74;
  if (v74)
  {
    v6 = (unint64_t *)&v74->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "target_size_w");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 4);
  if (v76 < 0)
    operator delete(__p[0]);
  v8 = v74;
  if (v74)
  {
    v9 = (unint64_t *)&v74->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "target_size_h");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 8);
  if (v76 < 0)
    operator delete(__p[0]);
  v11 = v74;
  if (v74)
  {
    v12 = (unint64_t *)&v74->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (*(_DWORD *)(a2 + 12) != 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 12);
    if (v76 < 0)
      operator delete(__p[0]);
    v14 = v74;
    if (v74)
    {
      v15 = (unint64_t *)&v74->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_start_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 16);
    if (v76 < 0)
      operator delete(__p[0]);
    v17 = v74;
    if (v74)
    {
      v18 = (unint64_t *)&v74->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_DWORD *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_start_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 20);
    if (v76 < 0)
      operator delete(__p[0]);
    v20 = v74;
    if (v74)
    {
      v21 = (unint64_t *)&v74->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 24);
    if (v76 < 0)
      operator delete(__p[0]);
    v23 = v74;
    if (v74)
    {
      v24 = (unint64_t *)&v74->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_DWORD *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 28);
    if (v76 < 0)
      operator delete(__p[0]);
    v26 = v74;
    if (v74)
    {
      v27 = (unint64_t *)&v74->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_DWORD *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 32);
    if (v76 < 0)
      operator delete(__p[0]);
    v29 = v74;
    if (v74)
    {
      v30 = (unint64_t *)&v74->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_DWORD *)(a2 + 36))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "dense_size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 36);
    if (v76 < 0)
      operator delete(__p[0]);
    v32 = v74;
    if (v74)
    {
      v33 = (unint64_t *)&v74->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  v36 = *(unsigned __int8 *)(a2 + 40);
  v35 = a2 + 40;
  if (v36)
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "unnormalized_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 208))(v73, __p, v35);
    if (v76 < 0)
      operator delete(__p[0]);
    v37 = v74;
    if (!v74)
      goto LABEL_225;
    v38 = (unint64_t *)&v74->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
LABEL_223:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
LABEL_225:
    if (v72 < 0)
      operator delete(v71[0]);
  }
}

void sub_19184BE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19184BFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184C20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184C2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184C4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::crop_and_resize_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  float v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  void *v71[2];
  char v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void *__p[2];
  char v76;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "target_size_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v40 = v74;
    if (v74)
    {
      p_shared_owners = (unint64_t *)&v74->__shared_owners_;
      do
        v42 = __ldaxr(p_shared_owners);
      while (__stlxr(v42 - 1, p_shared_owners));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "target_size_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v43 = v74;
    if (v74)
    {
      v44 = (unint64_t *)&v74->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v46 = v74;
    if (v74)
    {
      v47 = (unint64_t *)&v74->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "resized_dims");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v49 = v74;
    if (v74)
    {
      v50 = (unint64_t *)&v74->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "grid_sampling_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v52 = v74;
    if (v74)
    {
      v53 = (unint64_t *)&v74->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "crop_index_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v55 = v74;
    if (v74)
    {
      v56 = (unint64_t *)&v74->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "spatial_scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(float *)(a2 + 28) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v73 + 96))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v58 = v74;
    if (v74)
    {
      v59 = (unint64_t *)&v74->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "normalized_crop_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 88))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v61 = v74;
    if (v74)
    {
      v62 = (unint64_t *)&v74->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "position_sensitive");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_BYTE *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 88))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v64 = v74;
    if (v74)
    {
      v65 = (unint64_t *)&v74->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "sample_ratio");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v73 + 40))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v67 = v74;
    if (v74)
    {
      v68 = (unint64_t *)&v74->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
    std::string::basic_string[abi:ne180100]<0>(v71, "pad_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v73 + 24))(v73, __p))
      *(float *)(a2 + 40) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v73 + 96))(v73, __p);
    if (v76 < 0)
      operator delete(__p[0]);
    v37 = v74;
    if (!v74)
      goto LABEL_221;
    v70 = (unint64_t *)&v74->__shared_owners_;
    do
      v39 = __ldaxr(v70);
    while (__stlxr(v39 - 1, v70));
    goto LABEL_219;
  }
  std::string::basic_string[abi:ne180100]<0>(v71, "target_size_w");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 4);
  if (v76 < 0)
    operator delete(__p[0]);
  v5 = v74;
  if (v74)
  {
    v6 = (unint64_t *)&v74->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "target_size_h");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 8);
  if (v76 < 0)
    operator delete(__p[0]);
  v8 = v74;
  if (v74)
  {
    v9 = (unint64_t *)&v74->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2);
  if (v76 < 0)
    operator delete(__p[0]);
  v11 = v74;
  if (v74)
  {
    v12 = (unint64_t *)&v74->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "resized_dims");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 12);
  if (v76 < 0)
    operator delete(__p[0]);
  v14 = v74;
  if (v74)
  {
    v15 = (unint64_t *)&v74->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "grid_sampling_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 20);
  if (v76 < 0)
    operator delete(__p[0]);
  v17 = v74;
  if (v74)
  {
    v18 = (unint64_t *)&v74->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "crop_index_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 24);
  if (v76 < 0)
    operator delete(__p[0]);
  v20 = v74;
  if (v74)
  {
    v21 = (unint64_t *)&v74->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  std::string::basic_string[abi:ne180100]<0>(v71, "spatial_scale");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 216))(v73, __p, a2 + 28);
  if (v76 < 0)
    operator delete(__p[0]);
  v23 = v74;
  if (v74)
  {
    v24 = (unint64_t *)&v74->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v72 < 0)
    operator delete(v71[0]);
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "normalized_crop_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 208))(v73, __p, a2 + 16);
    if (v76 < 0)
      operator delete(__p[0]);
    v26 = v74;
    if (v74)
    {
      v27 = (unint64_t *)&v74->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_BYTE *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "position_sensitive");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 208))(v73, __p, a2 + 32);
    if (v76 < 0)
      operator delete(__p[0]);
    v29 = v74;
    if (v74)
    {
      v30 = (unint64_t *)&v74->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  if (*(_DWORD *)(a2 + 36) != 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "sample_ratio");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 160))(v73, __p, a2 + 36);
    if (v76 < 0)
      operator delete(__p[0]);
    v32 = v74;
    if (v74)
    {
      v33 = (unint64_t *)&v74->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v72 < 0)
      operator delete(v71[0]);
  }
  v36 = *(float *)(a2 + 40);
  v35 = a2 + 40;
  if (v36 != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v71, "pad_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v71, &v73);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v73 + 216))(v73, __p, v35);
    if (v76 < 0)
      operator delete(__p[0]);
    v37 = v74;
    if (!v74)
      goto LABEL_221;
    v38 = (unint64_t *)&v74->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
LABEL_219:
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
LABEL_221:
    if (v72 < 0)
      operator delete(v71[0]);
  }
}

void sub_19184D320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19184D4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184D6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184D7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184D994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::dynamic_quantize_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "dst_cp");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, a2);
    if (v22 < 0)
      operator delete(__p[0]);
    v5 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "dst_cp");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "simple_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_40;
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
    goto LABEL_38;
  }
  v9 = a2[1];
  v8 = a2 + 1;
  if (!v9)
    return;
  std::string::basic_string[abi:ne180100]<0>(v17, "simple_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, v8);
  if (v22 < 0)
    operator delete(__p[0]);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_38:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_40:
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_19184DC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19184DD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184DF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184DFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184E1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::quantized_gather_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "nRow");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 168))(v29, __p, a2 + 1);
    if (v32 < 0)
      operator delete(__p[0]);
    v5 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "nCol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 168))(v29, __p, a2);
    if (v32 < 0)
      operator delete(__p[0]);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 2);
    if (v32 < 0)
      operator delete(__p[0]);
    v11 = v30;
    if (v30)
    {
      v12 = (unint64_t *)&v30->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "n_bits");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 168))(v29, __p, a2 + 3);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_75;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "nRow");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "nCol");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "kernel_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "n_bits");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 48))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v26 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
LABEL_75:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_19184E6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19184E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184E9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184EC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cf_branch_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __n128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __n128 v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "target_layer_condition_true");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 232))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v5 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "target_layer_condition_false");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 232))(v25, __p, a2 + 24);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "cf_stack_depth");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2 + 48);
    if (v28 < 0)
      operator delete(__p[0]);
    v11 = v26;
    if (v26)
    {
      v12 = (unint64_t *)&v26->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_51;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "target_layer_condition_true");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    v14.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v25, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v15 = v26;
    if (v26)
    {
      v16 = (unint64_t *)&v26->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v15->__on_zero_shared)(v15, v14);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "target_layer_condition_false");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    v18.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v25, a2 + 24);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v19->__on_zero_shared)(v19, v18);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "cf_stack_depth");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v11 = v26;
    if (v26)
    {
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v13 = __ldaxr(v22);
      while (__stlxr(v13 - 1, v22));
LABEL_51:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v24 < 0)
    operator delete(v23[0]);
}

void sub_19184F000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19184F108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184F420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184F4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184F6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cf_jump_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "cf_stack_depth");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "cf_stack_depth");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_15:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19184F858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19184F940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184FAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19184FB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19184FD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::dynamic_dequantize_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  char v58;

  if (a3 && *(_DWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "dst_cp");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2);
    if (v58 < 0)
      operator delete(__p[0]);
    v5 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "dst_cp");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v31 = v56;
    if (v56)
    {
      v32 = (unint64_t *)&v56->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "has_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v34 = v56;
    if (v56)
    {
      v35 = (unint64_t *)&v56->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "has_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v37 = v56;
    if (v56)
    {
      v38 = (unint64_t *)&v56->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "has_prelu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v40 = v56;
    if (v56)
    {
      v41 = (unint64_t *)&v56->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(float *)(a2 + 12) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v55 + 96))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v43 = v56;
    if (v56)
    {
      v44 = (unint64_t *)&v56->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(float *)(a2 + 16) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v55 + 96))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v46 = v56;
    if (v56)
    {
      v47 = (unint64_t *)&v56->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "simple_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v49 = v56;
    if (v56)
    {
      v50 = (unint64_t *)&v56->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "w_quantization_scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(float *)(a2 + 28) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v55 + 96))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v28 = v56;
    if (!v56)
      goto LABEL_166;
    v52 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v52);
    while (__stlxr(v30 - 1, v52));
    goto LABEL_164;
  }
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "has_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 4);
    if (v58 < 0)
      operator delete(__p[0]);
    v8 = v56;
    if (v56)
    {
      v9 = (unint64_t *)&v56->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "has_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 8);
    if (v58 < 0)
      operator delete(__p[0]);
    v11 = v56;
    if (v56)
    {
      v12 = (unint64_t *)&v56->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_DWORD *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "has_prelu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 20);
    if (v58 < 0)
      operator delete(__p[0]);
    v14 = v56;
    if (v56)
    {
      v15 = (unint64_t *)&v56->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(float *)(a2 + 12) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 216))(v55, __p, a2 + 12);
    if (v58 < 0)
      operator delete(__p[0]);
    v17 = v56;
    if (v56)
    {
      v18 = (unint64_t *)&v56->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(float *)(a2 + 16) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 216))(v55, __p, a2 + 16);
    if (v58 < 0)
      operator delete(__p[0]);
    v20 = v56;
    if (v56)
    {
      v21 = (unint64_t *)&v56->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_DWORD *)(a2 + 24))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "simple_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 24);
    if (v58 < 0)
      operator delete(__p[0]);
    v23 = v56;
    if (v56)
    {
      v24 = (unint64_t *)&v56->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  v27 = *(float *)(a2 + 28);
  v26 = a2 + 28;
  if (v27 != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "w_quantization_scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 216))(v55, __p, v26);
    if (v58 < 0)
      operator delete(__p[0]);
    v28 = v56;
    if (!v56)
      goto LABEL_166;
    v29 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_164:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_166:
    if (v54 < 0)
      operator delete(v53[0]);
  }
}

void sub_191850854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1918509AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191850B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191850C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191850E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::spatial_transformer_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v22 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "target_size_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v25 = v38;
    if (v38)
    {
      v26 = (unint64_t *)&v38->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "target_size_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v28 = v38;
    if (v38)
    {
      v29 = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "unnormalized_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_BYTE *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 88))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v31 = v38;
    if (v38)
    {
      v32 = (unint64_t *)&v38->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "padding_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_99;
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v34);
    while (__stlxr(v21 - 1, v34));
    goto LABEL_97;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2);
  if (v40 < 0)
    operator delete(__p[0]);
  v5 = v38;
  if (v38)
  {
    v6 = (unint64_t *)&v38->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "target_size_w");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 4);
  if (v40 < 0)
    operator delete(__p[0]);
  v8 = v38;
  if (v38)
  {
    v9 = (unint64_t *)&v38->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "target_size_h");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 8);
  if (v40 < 0)
    operator delete(__p[0]);
  v11 = v38;
  if (v38)
  {
    v12 = (unint64_t *)&v38->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  if (*(_BYTE *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "unnormalized_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 208))(v37, __p, a2 + 16);
    if (v40 < 0)
      operator delete(__p[0]);
    v14 = v38;
    if (v38)
    {
      v15 = (unint64_t *)&v38->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  v18 = *(_DWORD *)(a2 + 20);
  v17 = a2 + 20;
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "padding_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, v17);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_99;
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
LABEL_97:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_99:
    if (v36 < 0)
      operator delete(v35[0]);
  }
}

void sub_1918514D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1918515F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918517E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918518A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191851A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cf_call_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "target_snetwork");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v11 + 232))(v11, &__p, a2);
    if (v14 < 0)
      operator delete(__p);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_13;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "target_snetwork");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, a2);
    if (v14 < 0)
      operator delete(__p);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_13:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191851BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191851CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191851FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19185207C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191852270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191852438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918524E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918526B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::get_shape_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2);
    if (v20 < 0)
      operator delete(__p[0]);
    v5 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2 + 1);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_35;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
LABEL_35:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_191852970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191852A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191852C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191852CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191852EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::topk_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  void *v41[2];
  char v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "num_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v25 = v44;
    if (v44)
    {
      p_shared_owners = (unint64_t *)&v44->__shared_owners_;
      do
        v27 = __ldaxr(p_shared_owners);
      while (__stlxr(v27 - 1, p_shared_owners));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v28 = v44;
    if (v44)
    {
      v29 = (unint64_t *)&v44->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "single_axis_topk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 5) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v31 = v44;
    if (v44)
    {
      v32 = (unint64_t *)&v44->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 40))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v34 = v44;
    if (v44)
    {
      v35 = (unint64_t *)&v44->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "do_bottomk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v37 = v44;
    if (v44)
    {
      v38 = (unint64_t *)&v44->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
    std::string::basic_string[abi:ne180100]<0>(v41, "return_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v43 + 24))(v43, __p))
      *(_BYTE *)(a2 + 14) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v43 + 88))(v43, __p);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_121;
    v40 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v40);
    while (__stlxr(v24 - 1, v40));
    goto LABEL_119;
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "num_k");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 160))(v43, __p, a2);
  if (v46 < 0)
    operator delete(__p[0]);
  v5 = v44;
  if (v44)
  {
    v6 = (unint64_t *)&v44->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  if (*(_BYTE *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, a2 + 4);
    if (v46 < 0)
      operator delete(__p[0]);
    v8 = v44;
    if (v44)
    {
      v9 = (unint64_t *)&v44->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  if (*(_BYTE *)(a2 + 5))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "single_axis_topk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, a2 + 5);
    if (v46 < 0)
      operator delete(__p[0]);
    v11 = v44;
    if (v44)
    {
      v12 = (unint64_t *)&v44->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v41, "axis");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 160))(v43, __p, a2 + 8);
  if (v46 < 0)
    operator delete(__p[0]);
  v14 = v44;
  if (v44)
  {
    v15 = (unint64_t *)&v44->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v42 < 0)
    operator delete(v41[0]);
  if (*(_BYTE *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "do_bottomk");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, a2 + 12);
    if (v46 < 0)
      operator delete(__p[0]);
    v17 = v44;
    if (v44)
    {
      v18 = (unint64_t *)&v44->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v42 < 0)
      operator delete(v41[0]);
  }
  v21 = *(unsigned __int8 *)(a2 + 14);
  v20 = a2 + 14;
  if (!v21)
  {
    std::string::basic_string[abi:ne180100]<0>(v41, "return_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v41, &v43);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v43 + 208))(v43, __p, v20);
    if (v46 < 0)
      operator delete(__p[0]);
    v22 = v44;
    if (!v44)
      goto LABEL_121;
    v23 = (unint64_t *)&v44->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
LABEL_119:
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
LABEL_121:
    if (v42 < 0)
      operator delete(v41[0]);
  }
}

void sub_1918536A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1918537E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918539AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191853A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191853C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::gather_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2);
    if (v38 < 0)
      operator delete(__p[0]);
    v5 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 1);
    if (v38 < 0)
      operator delete(__p[0]);
    v8 = v36;
    if (v36)
    {
      v9 = (unint64_t *)&v36->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 2);
    if (v38 < 0)
      operator delete(__p[0]);
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 3);
    if (v38 < 0)
      operator delete(__p[0]);
    v14 = v36;
    if (v36)
    {
      v15 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v18 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_95;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v20 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v23 = v36;
    if (v36)
    {
      v24 = (unint64_t *)&v36->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v26 = v36;
    if (v36)
    {
      v27 = (unint64_t *)&v36->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v32);
      while (__stlxr(v19 - 1, v32));
LABEL_95:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
}

void sub_1918542E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191854408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191854610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918546D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918548C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1918549B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191854B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191854C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191854DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::alloc_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *(_BYTE *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 88))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "nd_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 160))(v19, __p, a2);
  if (v22 < 0)
    operator delete(__p[0]);
  v5 = v20;
  if (v20)
  {
    v6 = (unint64_t *)&v20->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v18 < 0)
    operator delete(v17[0]);
  v9 = *(unsigned __int8 *)(a2 + 4);
  v8 = a2 + 4;
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 208))(v19, __p, v8);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_36:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_38:
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_1918550BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1918551B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191855350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191855414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918555FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::load_global_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __n128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  void *v58[2];
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  void *__p[2];
  char v63;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "global_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 232))(v60, __p, a2);
    if (v63 < 0)
      operator delete(__p[0]);
    v5 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    if (*(_BYTE *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "array_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 208))(v60, __p, a2 + 24);
      if (v63 < 0)
        operator delete(__p[0]);
      v8 = v61;
      if (v61)
      {
        v9 = (unint64_t *)&v61->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 28))
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "w");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 28);
      if (v63 < 0)
        operator delete(__p[0]);
      v11 = v61;
      if (v61)
      {
        v12 = (unint64_t *)&v61->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 32) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "h");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 32);
      if (v63 < 0)
        operator delete(__p[0]);
      v14 = v61;
      if (v61)
      {
        v15 = (unint64_t *)&v61->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 36) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "k");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 36);
      if (v63 < 0)
        operator delete(__p[0]);
      v17 = v61;
      if (v61)
      {
        v18 = (unint64_t *)&v61->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 40) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "n");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 40);
      if (v63 < 0)
        operator delete(__p[0]);
      v20 = v61;
      if (v61)
      {
        v21 = (unint64_t *)&v61->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 44) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "seq");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 44);
      if (v63 < 0)
        operator delete(__p[0]);
      v23 = v61;
      if (v61)
      {
        v24 = (unint64_t *)&v61->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 48) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "rank");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 48);
      if (v63 < 0)
        operator delete(__p[0]);
      v26 = v61;
      if (v61)
      {
        v27 = (unint64_t *)&v61->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v58, "array_op");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 52);
    if (v63 < 0)
      operator delete(__p[0]);
    v29 = v61;
    if (v61)
    {
      v30 = (unint64_t *)&v61->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      goto LABEL_180;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "global_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    v32.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v60, a2);
    if (v63 < 0)
      operator delete(__p[0]);
    v33 = v61;
    if (v61)
    {
      v34 = (unint64_t *)&v61->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "array_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 88))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v36 = v61;
    if (v61)
    {
      v37 = (unint64_t *)&v61->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v39 = v61;
    if (v61)
    {
      v40 = (unint64_t *)&v61->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v42 = v61;
    if (v61)
    {
      v43 = (unint64_t *)&v61->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v45 = v61;
    if (v61)
    {
      v46 = (unint64_t *)&v61->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v48 = v61;
    if (v61)
    {
      v49 = (unint64_t *)&v61->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v51 = v61;
    if (v61)
    {
      v52 = (unint64_t *)&v61->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v54 = v61;
    if (v61)
    {
      v55 = (unint64_t *)&v61->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "array_op");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v29 = v61;
    if (v61)
    {
      v57 = (unint64_t *)&v61->__shared_owners_;
      do
        v31 = __ldaxr(v57);
      while (__stlxr(v31 - 1, v57));
LABEL_180:
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (v59 < 0)
    operator delete(v58[0]);
}

void sub_1918561D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191856338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191856674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191856738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191856934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::store_global_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __n128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  void *v58[2];
  char v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  void *__p[2];
  char v63;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "global_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 232))(v60, __p, a2);
    if (v63 < 0)
      operator delete(__p[0]);
    v5 = v61;
    if (v61)
    {
      p_shared_owners = (unint64_t *)&v61->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    if (*(_BYTE *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "array_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 208))(v60, __p, a2 + 24);
      if (v63 < 0)
        operator delete(__p[0]);
      v8 = v61;
      if (v61)
      {
        v9 = (unint64_t *)&v61->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 28))
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "w");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 28);
      if (v63 < 0)
        operator delete(__p[0]);
      v11 = v61;
      if (v61)
      {
        v12 = (unint64_t *)&v61->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 32) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "h");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 32);
      if (v63 < 0)
        operator delete(__p[0]);
      v14 = v61;
      if (v61)
      {
        v15 = (unint64_t *)&v61->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 36) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "k");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 36);
      if (v63 < 0)
        operator delete(__p[0]);
      v17 = v61;
      if (v61)
      {
        v18 = (unint64_t *)&v61->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 40) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "n");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 40);
      if (v63 < 0)
        operator delete(__p[0]);
      v20 = v61;
      if (v61)
      {
        v21 = (unint64_t *)&v61->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 44) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "seq");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 44);
      if (v63 < 0)
        operator delete(__p[0]);
      v23 = v61;
      if (v61)
      {
        v24 = (unint64_t *)&v61->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    if (*(_DWORD *)(a2 + 48) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v58, "rank");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 48);
      if (v63 < 0)
        operator delete(__p[0]);
      v26 = v61;
      if (v61)
      {
        v27 = (unint64_t *)&v61->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v59 < 0)
        operator delete(v58[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v58, "array_op");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v60 + 160))(v60, __p, a2 + 52);
    if (v63 < 0)
      operator delete(__p[0]);
    v29 = v61;
    if (v61)
    {
      v30 = (unint64_t *)&v61->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      goto LABEL_180;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v58, "global_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    v32.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v60, a2);
    if (v63 < 0)
      operator delete(__p[0]);
    v33 = v61;
    if (v61)
    {
      v34 = (unint64_t *)&v61->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v33->__on_zero_shared)(v33, v32);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "array_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 88))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v36 = v61;
    if (v61)
    {
      v37 = (unint64_t *)&v61->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v39 = v61;
    if (v61)
    {
      v40 = (unint64_t *)&v61->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v42 = v61;
    if (v61)
    {
      v43 = (unint64_t *)&v61->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v45 = v61;
    if (v61)
    {
      v46 = (unint64_t *)&v61->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v48 = v61;
    if (v61)
    {
      v49 = (unint64_t *)&v61->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v51 = v61;
    if (v61)
    {
      v52 = (unint64_t *)&v61->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v54 = v61;
    if (v61)
    {
      v55 = (unint64_t *)&v61->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v59 < 0)
      operator delete(v58[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "array_op");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v58, &v60);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v60 + 24))(v60, __p))
      *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v60 + 40))(v60, __p);
    if (v63 < 0)
      operator delete(__p[0]);
    v29 = v61;
    if (v61)
    {
      v57 = (unint64_t *)&v61->__shared_owners_;
      do
        v31 = __ldaxr(v57);
      while (__stlxr(v31 - 1, v57));
LABEL_180:
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  if (v59 < 0)
    operator delete(v58[0]);
}

void sub_191857508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191857670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191857994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191857A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191857C54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191857E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191857EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191858098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cf_loop_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "max_iter");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (!v12)
      goto LABEL_19;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    goto LABEL_17;
  }
  if ((a3 & 1) != 0)
    return;
  std::string::basic_string[abi:ne180100]<0>(v9, "max_iter");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
    *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  v5 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
LABEL_17:
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_19:
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_191858228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191858310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191858560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191858748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cf_for_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "has_enumerate");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "slice_step");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "has_enumerate");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, a2);
  if (v22 < 0)
    operator delete(__p[0]);
  v5 = v20;
  if (v20)
  {
    v6 = (unint64_t *)&v20->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v18 < 0)
    operator delete(v17[0]);
  v9 = a2[1];
  v8 = a2 + 1;
  if (v9 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "slice_step");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, v8);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_36:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_38:
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_191858A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191858B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191858CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191858D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191858F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191859118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918591C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191859394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19185955C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191859604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918597D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1918598C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191859A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191859B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191859CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::scatter_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  char v58;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v31 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v34 = v56;
    if (v56)
    {
      v35 = (unint64_t *)&v56->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v37 = v56;
    if (v56)
    {
      v38 = (unint64_t *)&v56->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v40 = v56;
    if (v56)
    {
      v41 = (unint64_t *)&v56->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v43 = v56;
    if (v56)
    {
      v44 = (unint64_t *)&v56->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "accumulate");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_BYTE *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 88))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v46 = v56;
    if (v56)
    {
      v47 = (unint64_t *)&v56->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "simple_scatter");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_BYTE *)(a2 + 21) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 88))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v49 = v56;
    if (v56)
    {
      v50 = (unint64_t *)&v56->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
      *(_BYTE *)(a2 + 22) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 88))(v55, __p);
    if (v58 < 0)
      operator delete(__p[0]);
    v28 = v56;
    if (!v56)
      goto LABEL_160;
    v52 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v52);
    while (__stlxr(v30 - 1, v52));
    goto LABEL_158;
  }
  std::string::basic_string[abi:ne180100]<0>(v53, "x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2);
  if (v58 < 0)
    operator delete(__p[0]);
  v5 = v56;
  if (v56)
  {
    v6 = (unint64_t *)&v56->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v54 < 0)
    operator delete(v53[0]);
  std::string::basic_string[abi:ne180100]<0>(v53, "y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 4);
  if (v58 < 0)
    operator delete(__p[0]);
  v8 = v56;
  if (v56)
  {
    v9 = (unint64_t *)&v56->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v54 < 0)
    operator delete(v53[0]);
  std::string::basic_string[abi:ne180100]<0>(v53, "k");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 8);
  if (v58 < 0)
    operator delete(__p[0]);
  v11 = v56;
  if (v56)
  {
    v12 = (unint64_t *)&v56->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v54 < 0)
    operator delete(v53[0]);
  std::string::basic_string[abi:ne180100]<0>(v53, "n");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 12);
  if (v58 < 0)
    operator delete(__p[0]);
  v14 = v56;
  if (v56)
  {
    v15 = (unint64_t *)&v56->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v54 < 0)
    operator delete(v53[0]);
  std::string::basic_string[abi:ne180100]<0>(v53, "seq");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 16);
  if (v58 < 0)
    operator delete(__p[0]);
  v17 = v56;
  if (v56)
  {
    v18 = (unint64_t *)&v56->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v54 < 0)
    operator delete(v53[0]);
  if (*(_BYTE *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "accumulate");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 208))(v55, __p, a2 + 20);
    if (v58 < 0)
      operator delete(__p[0]);
    v20 = v56;
    if (v56)
    {
      v21 = (unint64_t *)&v56->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_BYTE *)(a2 + 21))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "simple_scatter");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 208))(v55, __p, a2 + 21);
    if (v58 < 0)
      operator delete(__p[0]);
    v23 = v56;
    if (v56)
    {
      v24 = (unint64_t *)&v56->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  v27 = *(unsigned __int8 *)(a2 + 22);
  v26 = a2 + 22;
  if (v27)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 208))(v55, __p, v26);
    if (v58 < 0)
      operator delete(__p[0]);
    v28 = v56;
    if (!v56)
      goto LABEL_160;
    v29 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_158:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_160:
    if (v54 < 0)
      operator delete(v53[0]);
  }
}

void sub_19185A76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19185A8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185AAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19185AB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185AD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::load_random_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  void *v83[2];
  char v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  void *__p[2];
  char v88;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "distribution");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v46 = v86;
    if (v86)
    {
      p_shared_owners = (unint64_t *)&v86->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v85 + 96))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v49 = v86;
    if (v86)
    {
      v50 = (unint64_t *)&v86->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v85 + 96))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v52 = v86;
    if (v86)
    {
      v53 = (unint64_t *)&v86->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "seed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v55 = v86;
    if (v86)
    {
      v56 = (unint64_t *)&v86->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "out_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v58 = v86;
    if (v86)
    {
      v59 = (unint64_t *)&v86->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "out_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v61 = v86;
    if (v86)
    {
      v62 = (unint64_t *)&v86->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "out_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v64 = v86;
    if (v86)
    {
      v65 = (unint64_t *)&v86->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "out_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v67 = v86;
    if (v86)
    {
      v68 = (unint64_t *)&v86->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "out_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v70 = v86;
    if (v86)
    {
      v71 = (unint64_t *)&v86->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "num_tops");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v73 = v86;
    if (v86)
    {
      v74 = (unint64_t *)&v86->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 40))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v76 = v86;
    if (v86)
    {
      v77 = (unint64_t *)&v86->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_BYTE *)(a2 + 44) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 88))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v79 = v86;
    if (v86)
    {
      v80 = (unint64_t *)&v86->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
    std::string::basic_string[abi:ne180100]<0>(v83, "reseed_each_launch");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v85 + 24))(v85, __p))
      *(_BYTE *)(a2 + 45) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v85 + 88))(v85, __p);
    if (v88 < 0)
      operator delete(__p[0]);
    v43 = v86;
    if (!v86)
      goto LABEL_267;
    v82 = (unint64_t *)&v86->__shared_owners_;
    do
      v45 = __ldaxr(v82);
    while (__stlxr(v45 - 1, v82));
    goto LABEL_265;
  }
  std::string::basic_string[abi:ne180100]<0>(v83, "distribution");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2);
  if (v88 < 0)
    operator delete(__p[0]);
  v5 = v86;
  if (v86)
  {
    v6 = (unint64_t *)&v86->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v84 < 0)
    operator delete(v83[0]);
  std::string::basic_string[abi:ne180100]<0>(v83, "alpha");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 216))(v85, __p, a2 + 4);
  if (v88 < 0)
    operator delete(__p[0]);
  v8 = v86;
  if (v86)
  {
    v9 = (unint64_t *)&v86->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v84 < 0)
    operator delete(v83[0]);
  std::string::basic_string[abi:ne180100]<0>(v83, "beta");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 216))(v85, __p, a2 + 8);
  if (v88 < 0)
    operator delete(__p[0]);
  v11 = v86;
  if (v86)
  {
    v12 = (unint64_t *)&v86->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v84 < 0)
    operator delete(v83[0]);
  if (*(_DWORD *)(a2 + 12) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "seed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 12);
    if (v88 < 0)
      operator delete(__p[0]);
    v14 = v86;
    if (v86)
    {
      v15 = (unint64_t *)&v86->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_DWORD *)(a2 + 16) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "out_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 16);
    if (v88 < 0)
      operator delete(__p[0]);
    v17 = v86;
    if (v86)
    {
      v18 = (unint64_t *)&v86->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_DWORD *)(a2 + 20) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "out_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 20);
    if (v88 < 0)
      operator delete(__p[0]);
    v20 = v86;
    if (v86)
    {
      v21 = (unint64_t *)&v86->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_DWORD *)(a2 + 24) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "out_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 24);
    if (v88 < 0)
      operator delete(__p[0]);
    v23 = v86;
    if (v86)
    {
      v24 = (unint64_t *)&v86->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_DWORD *)(a2 + 28) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "out_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 28);
    if (v88 < 0)
      operator delete(__p[0]);
    v26 = v86;
    if (v86)
    {
      v27 = (unint64_t *)&v86->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_DWORD *)(a2 + 32) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "out_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 32);
    if (v88 < 0)
      operator delete(__p[0]);
    v29 = v86;
    if (v86)
    {
      v30 = (unint64_t *)&v86->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_DWORD *)(a2 + 36) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "num_tops");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 36);
    if (v88 < 0)
      operator delete(__p[0]);
    v32 = v86;
    if (v86)
    {
      v33 = (unint64_t *)&v86->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_DWORD *)(a2 + 40) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 160))(v85, __p, a2 + 40);
    if (v88 < 0)
      operator delete(__p[0]);
    v35 = v86;
    if (v86)
    {
      v36 = (unint64_t *)&v86->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  if (*(_BYTE *)(a2 + 44))
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 208))(v85, __p, a2 + 44);
    if (v88 < 0)
      operator delete(__p[0]);
    v38 = v86;
    if (v86)
    {
      v39 = (unint64_t *)&v86->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v84 < 0)
      operator delete(v83[0]);
  }
  v42 = *(unsigned __int8 *)(a2 + 45);
  v41 = a2 + 45;
  if (v42)
  {
    std::string::basic_string[abi:ne180100]<0>(v83, "reseed_each_launch");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v83, &v85);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v85 + 208))(v85, __p, v41);
    if (v88 < 0)
      operator delete(__p[0]);
    v43 = v86;
    if (!v86)
      goto LABEL_267;
    v44 = (unint64_t *)&v86->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
LABEL_265:
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
LABEL_267:
    if (v84 < 0)
      operator delete(v83[0]);
  }
}

void sub_19185BEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19185C050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185C27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19185C340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185C534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::range_params_t>(uint64_t a1, float *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  float *v11;
  float v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "end");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "start");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      a2[1] = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "step");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      a2[2] = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_59;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_57;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "end");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
  (*(void (**)(uint64_t, void **, float *))(*(_QWORD *)v25 + 216))(v25, __p, a2);
  if (v28 < 0)
    operator delete(__p[0]);
  v5 = v26;
  if (v26)
  {
    v6 = (unint64_t *)&v26->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v24 < 0)
    operator delete(v23[0]);
  if (a2[1] != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "start");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, float *))(*(_QWORD *)v25 + 216))(v25, __p, a2 + 1);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = a2[2];
  v11 = a2 + 2;
  if (v12 != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "step");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, float *))(*(_QWORD *)v25 + 216))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_59;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_57:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_59:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_19185C954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(uint64_t a1, float *a2)
{
  Espresso::SerDes::params_io<Espresso::range_params_t>(a1, a2, 0);
}

void Espresso::SerDes::operator>>(_QWORD *a1, float *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::range_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19185CA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185CC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(uint64_t a1, float *a2)
{
  Espresso::SerDes::params_io<Espresso::range_params_t>(a1, a2, 1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, float *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::range_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19185CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, float **a2)
{
  float *v4;
  float *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::range_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_19185CF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::matrix_band_part_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "num_lower");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v22 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldaxr(p_shared_owners);
      while (__stlxr(v24 - 1, p_shared_owners));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "num_upper");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v25 = v38;
    if (v38)
    {
      v26 = (unint64_t *)&v38->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v28 = v38;
    if (v38)
    {
      v29 = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "invert");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_BYTE *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 88))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v31 = v38;
    if (v38)
    {
      v32 = (unint64_t *)&v38->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "offset");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_100;
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v34);
    while (__stlxr(v21 - 1, v34));
    goto LABEL_98;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "num_lower");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2);
  if (v40 < 0)
    operator delete(__p[0]);
  v5 = v38;
  if (v38)
  {
    v6 = (unint64_t *)&v38->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  std::string::basic_string[abi:ne180100]<0>(v35, "num_upper");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 4);
  if (v40 < 0)
    operator delete(__p[0]);
  v8 = v38;
  if (v38)
  {
    v9 = (unint64_t *)&v38->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  if (*(_DWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 8);
    if (v40 < 0)
      operator delete(__p[0]);
    v11 = v38;
    if (v38)
    {
      v12 = (unint64_t *)&v38->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  if (*(_BYTE *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "invert");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 208))(v37, __p, a2 + 12);
    if (v40 < 0)
      operator delete(__p[0]);
    v14 = v38;
    if (v38)
    {
      v15 = (unint64_t *)&v38->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  v18 = *(_DWORD *)(a2 + 16);
  v17 = a2 + 16;
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "offset");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, v17);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_100;
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
LABEL_98:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_100:
    if (v36 < 0)
      operator delete(v35[0]);
  }
}

void sub_19185D5AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19185D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185D8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19185D990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185DB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::fill_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  void *v59[2];
  char v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *__p[2];
  char v64;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v34 = v62;
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v37 = v62;
    if (v62)
    {
      v38 = (unint64_t *)&v62->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v40 = v62;
    if (v62)
    {
      v41 = (unint64_t *)&v62->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v43 = v62;
    if (v62)
    {
      v44 = (unint64_t *)&v62->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v46 = v62;
    if (v62)
    {
      v47 = (unint64_t *)&v62->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v49 = v62;
    if (v62)
    {
      v50 = (unint64_t *)&v62->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 40))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v52 = v62;
    if (v62)
    {
      v53 = (unint64_t *)&v62->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(float *)a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v61 + 96))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v55 = v62;
    if (v62)
    {
      v56 = (unint64_t *)&v62->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
    std::string::basic_string[abi:ne180100]<0>(v59, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v61 + 24))(v61, __p))
      *(_BYTE *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v61 + 88))(v61, __p);
    if (v64 < 0)
      operator delete(__p[0]);
    v31 = v62;
    if (!v62)
      goto LABEL_185;
    v58 = (unint64_t *)&v62->__shared_owners_;
    do
      v33 = __ldaxr(v58);
    while (__stlxr(v33 - 1, v58));
    goto LABEL_183;
  }
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 4);
    if (v64 < 0)
      operator delete(__p[0]);
    v5 = v62;
    if (v62)
    {
      v6 = (unint64_t *)&v62->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 8);
    if (v64 < 0)
      operator delete(__p[0]);
    v8 = v62;
    if (v62)
    {
      v9 = (unint64_t *)&v62->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 12);
    if (v64 < 0)
      operator delete(__p[0]);
    v11 = v62;
    if (v62)
    {
      v12 = (unint64_t *)&v62->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 16);
    if (v64 < 0)
      operator delete(__p[0]);
    v14 = v62;
    if (v62)
    {
      v15 = (unint64_t *)&v62->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 20) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 20);
    if (v64 < 0)
      operator delete(__p[0]);
    v17 = v62;
    if (v62)
    {
      v18 = (unint64_t *)&v62->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 24) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dst_nd_rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 24);
    if (v64 < 0)
      operator delete(__p[0]);
    v20 = v62;
    if (v62)
    {
      v21 = (unint64_t *)&v62->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  if (*(_DWORD *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 160))(v61, __p, a2 + 28);
    if (v64 < 0)
      operator delete(__p[0]);
    v23 = v62;
    if (v62)
    {
      v24 = (unint64_t *)&v62->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v60 < 0)
      operator delete(v59[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v59, "value");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 216))(v61, __p, a2);
  if (v64 < 0)
    operator delete(__p[0]);
  v26 = v62;
  if (v62)
  {
    v27 = (unint64_t *)&v62->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v60 < 0)
    operator delete(v59[0]);
  v30 = *(unsigned __int8 *)(a2 + 32);
  v29 = a2 + 32;
  if (!v30)
  {
    std::string::basic_string[abi:ne180100]<0>(v59, "dynamic_shape");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v59, &v61);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v61 + 208))(v61, __p, v29);
    if (v64 < 0)
      operator delete(__p[0]);
    v31 = v62;
    if (!v62)
      goto LABEL_185;
    v32 = (unint64_t *)&v62->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
LABEL_183:
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
LABEL_185:
    if (v60 < 0)
      operator delete(v59[0]);
  }
}

void sub_19185E78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19185E8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185EB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19185EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185EDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(uint64_t a1, _BYTE *a2)
{
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(a1, a2, 0);
}

{
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(a1, a2, 0);
}

void Espresso::SerDes::operator>>(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::cumsum_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19185EED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185F0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(uint64_t a1, _BYTE *a2)
{
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(a1, a2, 1);
}

{
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(a1, a2, 1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, _BYTE *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::batch_matmul_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::cumsum_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19185F174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185F364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::tensor_zero_pad_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  uint64_t i;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::string *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  std::string v29;
  std::string v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;

  if (a3 && *(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 208))(v31, __p, a2);
    if (v34 < 0)
      operator delete(__p[0]);
    v6 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(_BYTE *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 88))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v12 = v32;
    if (v32)
    {
      v13 = (unint64_t *)&v32->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v30, "value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v31 + 96))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v9 = v32;
    if (!v32)
      goto LABEL_39;
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v11 = __ldaxr(v15);
    while (__stlxr(v11 - 1, v15));
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "value");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 216))(v31, __p, a2 + 4);
  if (v34 < 0)
    operator delete(__p[0]);
  v9 = v32;
  if (!v32)
    goto LABEL_39;
  v10 = (unint64_t *)&v32->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
LABEL_37:
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_39:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  for (i = 0; i != 64; ++i)
  {
    while (a3)
    {
      std::to_string(&v29, i);
      v17 = std::string::insert(&v29, 0, "pads_");
      v30 = *v17;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 160))(v31, __p, a2 + 4 * i + 8);
      if (v34 < 0)
        operator delete(__p[0]);
      v18 = v32;
      if (v32)
      {
        v19 = (unint64_t *)&v32->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (++i == 64)
      {
        if (!*(_BYTE *)(a2 + 264))
          return;
        std::string::basic_string[abi:ne180100]<0>(&v30, "pad_to_given_size_mode");
        Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 208))(v31, __p, a2 + 264);
        if (v34 < 0)
          operator delete(__p[0]);
        v25 = v32;
        if (v32)
        {
          v28 = (unint64_t *)&v32->__shared_owners_;
          do
            v27 = __ldaxr(v28);
          while (__stlxr(v27 - 1, v28));
          goto LABEL_84;
        }
        goto LABEL_86;
      }
    }
    std::to_string(&v29, i);
    v21 = std::string::insert(&v29, 0, "pads_");
    v30 = *v21;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(_DWORD *)(a2 + 4 * i + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v22 = v32;
    if (v32)
    {
      v23 = (unint64_t *)&v32->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v30, "pad_to_given_size_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)&v30, &v31);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
    *(_BYTE *)(a2 + 264) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 88))(v31, __p);
  if (v34 < 0)
    operator delete(__p[0]);
  v25 = v32;
  if (v32)
  {
    v26 = (unint64_t *)&v32->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_84:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
LABEL_86:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_19185F948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19185FA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185FCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19185FDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19185FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191860084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918602C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191860384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191860580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191860668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191860930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191860B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::array_gather_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *__p[2];
  char v52;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v28 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v31 = v50;
    if (v50)
    {
      v32 = (unint64_t *)&v50->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v34 = v50;
    if (v50)
    {
      v35 = (unint64_t *)&v50->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v37 = v50;
    if (v50)
    {
      v38 = (unint64_t *)&v50->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v40 = v50;
    if (v50)
    {
      v41 = (unint64_t *)&v50->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "simple_gather");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 88))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v43 = v50;
    if (v50)
    {
      v44 = (unint64_t *)&v50->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
    std::string::basic_string[abi:ne180100]<0>(v47, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    if (v52 < 0)
      operator delete(__p[0]);
    v25 = v50;
    if (!v50)
      goto LABEL_138;
    v46 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v46);
    while (__stlxr(v27 - 1, v46));
    goto LABEL_136;
  }
  std::string::basic_string[abi:ne180100]<0>(v47, "x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2);
  if (v52 < 0)
    operator delete(__p[0]);
  v5 = v50;
  if (v50)
  {
    v6 = (unint64_t *)&v50->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 4);
  if (v52 < 0)
    operator delete(__p[0]);
  v8 = v50;
  if (v50)
  {
    v9 = (unint64_t *)&v50->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "k");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 8);
  if (v52 < 0)
    operator delete(__p[0]);
  v11 = v50;
  if (v50)
  {
    v12 = (unint64_t *)&v50->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "n");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 12);
  if (v52 < 0)
    operator delete(__p[0]);
  v14 = v50;
  if (v50)
  {
    v15 = (unint64_t *)&v50->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "seq");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 16);
  if (v52 < 0)
    operator delete(__p[0]);
  v17 = v50;
  if (v50)
  {
    v18 = (unint64_t *)&v50->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  std::string::basic_string[abi:ne180100]<0>(v47, "simple_gather");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 208))(v49, __p, a2 + 24);
  if (v52 < 0)
    operator delete(__p[0]);
  v20 = v50;
  if (v50)
  {
    v21 = (unint64_t *)&v50->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v48 < 0)
    operator delete(v47[0]);
  v24 = *(_DWORD *)(a2 + 20);
  v23 = a2 + 20;
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, v23);
    if (v52 < 0)
      operator delete(__p[0]);
    v25 = v50;
    if (!v50)
      goto LABEL_138;
    v26 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_136:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_138:
    if (v48 < 0)
      operator delete(v47[0]);
  }
}

void sub_19186143C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191861584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918617A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186186C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191861A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::multinomial_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (!a3 || *a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "num_samples");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
        *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
      if (v22 < 0)
        operator delete(__p[0]);
      v13 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v18 < 0)
        operator delete(v17[0]);
      std::string::basic_string[abi:ne180100]<0>(v17, "seed");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
        a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
      if (v22 < 0)
        operator delete(__p[0]);
      v10 = v20;
      if (!v20)
        goto LABEL_40;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v16);
      while (__stlxr(v12 - 1, v16));
      goto LABEL_38;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "num_samples");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, a2);
    if (v22 < 0)
      operator delete(__p[0]);
    v5 = v20;
    if (v20)
    {
      v6 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
  }
  v9 = a2[1];
  v8 = a2 + 1;
  if (v9 == -1)
    return;
  std::string::basic_string[abi:ne180100]<0>(v17, "seed");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, v8);
  if (v22 < 0)
    operator delete(__p[0]);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_38:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_40:
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_191861D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191861E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191861FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918620A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191862290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::instancenorm_1d_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;

  if (a3 && *(_DWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "tf_layernorm");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2);
    if (v40 < 0)
      operator delete(__p[0]);
    v5 = v38;
    if (v38)
    {
      p_shared_owners = (unint64_t *)&v38->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "tf_layernorm");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v22 = v38;
    if (v38)
    {
      v23 = (unint64_t *)&v38->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v37 + 96))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v25 = v38;
    if (v38)
    {
      v26 = (unint64_t *)&v38->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "biased_std");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v28 = v38;
    if (v38)
    {
      v29 = (unint64_t *)&v38->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "eps_in_square_root");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v31 = v38;
    if (v38)
    {
      v32 = (unint64_t *)&v38->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
    std::string::basic_string[abi:ne180100]<0>(v35, "tf_layernorm_transposed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v37 + 24))(v37, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v37 + 40))(v37, __p);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_102;
    v34 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v34);
    while (__stlxr(v21 - 1, v34));
    goto LABEL_100;
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "eps");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 216))(v37, __p, a2 + 4);
  if (v40 < 0)
    operator delete(__p[0]);
  v8 = v38;
  if (v38)
  {
    v9 = (unint64_t *)&v38->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v36 < 0)
    operator delete(v35[0]);
  if (*(_DWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "biased_std");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 8);
    if (v40 < 0)
      operator delete(__p[0]);
    v11 = v38;
    if (v38)
    {
      v12 = (unint64_t *)&v38->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "eps_in_square_root");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, a2 + 12);
    if (v40 < 0)
      operator delete(__p[0]);
    v14 = v38;
    if (v38)
    {
      v15 = (unint64_t *)&v38->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v36 < 0)
      operator delete(v35[0]);
  }
  v18 = *(_DWORD *)(a2 + 16);
  v17 = a2 + 16;
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v35, "tf_layernorm_transposed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v35, &v37);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v37 + 160))(v37, __p, v17);
    if (v40 < 0)
      operator delete(__p[0]);
    v19 = v38;
    if (!v38)
      goto LABEL_102;
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
LABEL_100:
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
LABEL_102:
    if (v36 < 0)
      operator delete(v35[0]);
  }
}

void sub_191862954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191862A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191862C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191862D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191862F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_1918630E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186318C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191863360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::gumbel_max_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  void *v65[2];
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  void *__p[2];
  char v70;

  if (!a3 || *(_DWORD *)a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v65, "num_samples");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 40))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v37 = v68;
      if (v68)
      {
        p_shared_owners = (unint64_t *)&v68->__shared_owners_;
        do
          v39 = __ldaxr(p_shared_owners);
        while (__stlxr(v39 - 1, p_shared_owners));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "seed");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 40))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v40 = v68;
      if (v68)
      {
        v41 = (unint64_t *)&v68->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "deterministic");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(_BYTE *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 88))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v43 = v68;
      if (v68)
      {
        v44 = (unint64_t *)&v68->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(float *)(a2 + 12) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v67 + 96))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v46 = v68;
      if (v68)
      {
        v47 = (unint64_t *)&v68->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "beta");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(float *)(a2 + 16) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v67 + 96))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v49 = v68;
      if (v68)
      {
        v50 = (unint64_t *)&v68->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "eps");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(float *)(a2 + 20) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v67 + 96))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v52 = v68;
      if (v68)
      {
        v53 = (unint64_t *)&v68->__shared_owners_;
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 - 1, v53));
        if (!v54)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "temperature");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(float *)(a2 + 24) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v67 + 96))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v55 = v68;
      if (v68)
      {
        v56 = (unint64_t *)&v68->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "nd_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(_BYTE *)(a2 + 9) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 88))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v58 = v68;
      if (v68)
      {
        v59 = (unint64_t *)&v68->__shared_owners_;
        do
          v60 = __ldaxr(v59);
        while (__stlxr(v60 - 1, v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "use_bnns");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(_BYTE *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 88))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v61 = v68;
      if (v68)
      {
        v62 = (unint64_t *)&v68->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      if (v66 < 0)
        operator delete(v65[0]);
      std::string::basic_string[abi:ne180100]<0>(v65, "bnns_buffer_size");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
        *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 40))(v67, __p);
      if (v70 < 0)
        operator delete(__p[0]);
      v34 = v68;
      if (!v68)
        goto LABEL_207;
      v64 = (unint64_t *)&v68->__shared_owners_;
      do
        v36 = __ldaxr(v64);
      while (__stlxr(v36 - 1, v64));
      goto LABEL_205;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "num_samples");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 160))(v67, __p, a2);
    if (v70 < 0)
      operator delete(__p[0]);
    v5 = v68;
    if (v68)
    {
      v6 = (unint64_t *)&v68->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  if (*(_DWORD *)(a2 + 4) != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "seed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 160))(v67, __p, a2 + 4);
    if (v70 < 0)
      operator delete(__p[0]);
    v8 = v68;
    if (v68)
    {
      v9 = (unint64_t *)&v68->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  if (*(_BYTE *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "deterministic");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 208))(v67, __p, a2 + 8);
    if (v70 < 0)
      operator delete(__p[0]);
    v11 = v68;
    if (v68)
    {
      v12 = (unint64_t *)&v68->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  if (*(float *)(a2 + 12) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 216))(v67, __p, a2 + 12);
    if (v70 < 0)
      operator delete(__p[0]);
    v14 = v68;
    if (v68)
    {
      v15 = (unint64_t *)&v68->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  if (*(float *)(a2 + 16) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 216))(v67, __p, a2 + 16);
    if (v70 < 0)
      operator delete(__p[0]);
    v17 = v68;
    if (v68)
    {
      v18 = (unint64_t *)&v68->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v65, "eps");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 216))(v67, __p, a2 + 20);
  if (v70 < 0)
    operator delete(__p[0]);
  v20 = v68;
  if (v68)
  {
    v21 = (unint64_t *)&v68->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  if (*(float *)(a2 + 24) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "temperature");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 216))(v67, __p, a2 + 24);
    if (v70 < 0)
      operator delete(__p[0]);
    v23 = v68;
    if (v68)
    {
      v24 = (unint64_t *)&v68->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  if (*(_BYTE *)(a2 + 9))
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 208))(v67, __p, a2 + 9);
    if (v70 < 0)
      operator delete(__p[0]);
    v26 = v68;
    if (v68)
    {
      v27 = (unint64_t *)&v68->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  if (*(_BYTE *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "use_bnns");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 208))(v67, __p, a2 + 28);
    if (v70 < 0)
      operator delete(__p[0]);
    v29 = v68;
    if (v68)
    {
      v30 = (unint64_t *)&v68->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  v33 = *(_DWORD *)(a2 + 32);
  v32 = a2 + 32;
  if (v33)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "bnns_buffer_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 160))(v67, __p, v32);
    if (v70 < 0)
      operator delete(__p[0]);
    v34 = v68;
    if (!v68)
      goto LABEL_207;
    v35 = (unint64_t *)&v68->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
LABEL_205:
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
LABEL_207:
    if (v66 < 0)
      operator delete(v65[0]);
  }
}

void sub_1918640D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191864248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918644AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191864570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::builtin_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __n128 v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __n128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  unint64_t *v87;
  void *v88[2];
  char v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  void *__p[2];
  char v93;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "builtin_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    v8.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v90, a2);
    if (v93 < 0)
      operator delete(__p[0]);
    v9 = v91;
    if (v91)
    {
      p_shared_owners = (unint64_t *)&v91->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "sarg0");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    v12.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v90, a2 + 24);
    if (v93 < 0)
      operator delete(__p[0]);
    v13 = v91;
    if (v91)
    {
      v14 = (unint64_t *)&v91->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "sarg1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    v16.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v90, a2 + 48);
    if (v93 < 0)
      operator delete(__p[0]);
    v17 = v91;
    if (v91)
    {
      v18 = (unint64_t *)&v91->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "sarg2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    v20.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v90, a2 + 72);
    if (v93 < 0)
      operator delete(__p[0]);
    v21 = v91;
    if (v91)
    {
      v22 = (unint64_t *)&v91->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v21->__on_zero_shared)(v21, v20);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "sarg3");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    v24.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v90, a2 + 96);
    if (v93 < 0)
      operator delete(__p[0]);
    v25 = v91;
    if (v91)
    {
      v26 = (unint64_t *)&v91->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v25->__on_zero_shared)(v25, v24);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg0");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(_DWORD *)(a2 + 120) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v90 + 40))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v28 = v91;
    if (v91)
    {
      v29 = (unint64_t *)&v91->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(_DWORD *)(a2 + 124) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v90 + 40))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v31 = v91;
    if (v91)
    {
      v32 = (unint64_t *)&v91->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(_DWORD *)(a2 + 128) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v90 + 40))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v34 = v91;
    if (v91)
    {
      v35 = (unint64_t *)&v91->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg3");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(_DWORD *)(a2 + 132) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v90 + 40))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v37 = v91;
    if (v91)
    {
      v38 = (unint64_t *)&v91->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "farg0");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(float *)(a2 + 136) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v90 + 96))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v40 = v91;
    if (v91)
    {
      v41 = (unint64_t *)&v91->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "farg1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(float *)(a2 + 140) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v90 + 96))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v43 = v91;
    if (v91)
    {
      v44 = (unint64_t *)&v91->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "farg2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(float *)(a2 + 144) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v90 + 96))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v46 = v91;
    if (v91)
    {
      v47 = (unint64_t *)&v91->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "farg3");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v90 + 24))(v90, __p))
      *(float *)(a2 + 148) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v90 + 96))(v90, __p);
    if (v93 < 0)
      operator delete(__p[0]);
    v49 = v91;
    if (!v91)
      goto LABEL_271;
    v50 = (unint64_t *)&v91->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    goto LABEL_269;
  }
  std::string::basic_string[abi:ne180100]<0>(v88, "builtin_name");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 232))(v90, __p, a2);
  if (v93 < 0)
    operator delete(__p[0]);
  v5 = v91;
  if (v91)
  {
    v6 = (unint64_t *)&v91->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v89 < 0)
    operator delete(v88[0]);
  if (*(char *)(a2 + 47) < 0)
  {
    if (!*(_QWORD *)(a2 + 32))
      goto LABEL_154;
  }
  else if (!*(_BYTE *)(a2 + 47))
  {
    goto LABEL_154;
  }
  std::string::basic_string[abi:ne180100]<0>(v88, "sarg0");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 232))(v90, __p, a2 + 24);
  if (v93 < 0)
    operator delete(__p[0]);
  v52 = v91;
  if (v91)
  {
    v53 = (unint64_t *)&v91->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  if (v89 < 0)
    operator delete(v88[0]);
LABEL_154:
  if (*(char *)(a2 + 71) < 0)
  {
    if (!*(_QWORD *)(a2 + 56))
      goto LABEL_167;
  }
  else if (!*(_BYTE *)(a2 + 71))
  {
    goto LABEL_167;
  }
  std::string::basic_string[abi:ne180100]<0>(v88, "sarg1");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 232))(v90, __p, a2 + 48);
  if (v93 < 0)
    operator delete(__p[0]);
  v55 = v91;
  if (v91)
  {
    v56 = (unint64_t *)&v91->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (v89 < 0)
    operator delete(v88[0]);
LABEL_167:
  if (*(char *)(a2 + 95) < 0)
  {
    if (!*(_QWORD *)(a2 + 80))
      goto LABEL_180;
  }
  else if (!*(_BYTE *)(a2 + 95))
  {
    goto LABEL_180;
  }
  std::string::basic_string[abi:ne180100]<0>(v88, "sarg2");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 232))(v90, __p, a2 + 72);
  if (v93 < 0)
    operator delete(__p[0]);
  v58 = v91;
  if (v91)
  {
    v59 = (unint64_t *)&v91->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  if (v89 < 0)
    operator delete(v88[0]);
LABEL_180:
  if (*(char *)(a2 + 119) < 0)
  {
    if (!*(_QWORD *)(a2 + 104))
      goto LABEL_193;
  }
  else if (!*(_BYTE *)(a2 + 119))
  {
    goto LABEL_193;
  }
  std::string::basic_string[abi:ne180100]<0>(v88, "sarg3");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 232))(v90, __p, a2 + 96);
  if (v93 < 0)
    operator delete(__p[0]);
  v61 = v91;
  if (v91)
  {
    v62 = (unint64_t *)&v91->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v89 < 0)
    operator delete(v88[0]);
LABEL_193:
  if (*(_DWORD *)(a2 + 120))
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg0");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 160))(v90, __p, a2 + 120);
    if (v93 < 0)
      operator delete(__p[0]);
    v64 = v91;
    if (v91)
    {
      v65 = (unint64_t *)&v91->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
  }
  if (*(_DWORD *)(a2 + 124))
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 160))(v90, __p, a2 + 124);
    if (v93 < 0)
      operator delete(__p[0]);
    v67 = v91;
    if (v91)
    {
      v68 = (unint64_t *)&v91->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
  }
  if (*(_DWORD *)(a2 + 128))
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 160))(v90, __p, a2 + 128);
    if (v93 < 0)
      operator delete(__p[0]);
    v70 = v91;
    if (v91)
    {
      v71 = (unint64_t *)&v91->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
  }
  if (*(_DWORD *)(a2 + 132))
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "iarg3");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 160))(v90, __p, a2 + 132);
    if (v93 < 0)
      operator delete(__p[0]);
    v73 = v91;
    if (v91)
    {
      v74 = (unint64_t *)&v91->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
  }
  if (*(float *)(a2 + 136) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "farg0");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 216))(v90, __p, a2 + 136);
    if (v93 < 0)
      operator delete(__p[0]);
    v76 = v91;
    if (v91)
    {
      v77 = (unint64_t *)&v91->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
  }
  if (*(float *)(a2 + 140) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "farg1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 216))(v90, __p, a2 + 140);
    if (v93 < 0)
      operator delete(__p[0]);
    v79 = v91;
    if (v91)
    {
      v80 = (unint64_t *)&v91->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
  }
  if (*(float *)(a2 + 144) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "farg2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 216))(v90, __p, a2 + 144);
    if (v93 < 0)
      operator delete(__p[0]);
    v82 = v91;
    if (v91)
    {
      v83 = (unint64_t *)&v91->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (v89 < 0)
      operator delete(v88[0]);
  }
  v86 = *(float *)(a2 + 148);
  v85 = a2 + 148;
  if (v86 != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v88, "farg3");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v88, &v90);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v90 + 216))(v90, __p, v85);
    if (v93 < 0)
      operator delete(__p[0]);
    v49 = v91;
    if (!v91)
      goto LABEL_271;
    v87 = (unint64_t *)&v91->__shared_owners_;
    do
      v51 = __ldaxr(v87);
    while (__stlxr(v51 - 1, v87));
LABEL_269:
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
LABEL_271:
    if (v89 < 0)
      operator delete(v88[0]);
  }
}

void sub_191865804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1918659AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191865D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191865DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191865FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::transplant_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, a2);
    if (v22 < 0)
      operator delete(__p[0]);
    v5 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_40;
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
    goto LABEL_38;
  }
  v9 = a2[1];
  v8 = a2 + 1;
  if (!v9)
    return;
  std::string::basic_string[abi:ne180100]<0>(v17, "mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, v8);
  if (v22 < 0)
    operator delete(__p[0]);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_38:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_40:
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_1918662D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1918663C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918665C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191866684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191866878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::general_slice_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  std::__shared_weak_count *v215;
  unint64_t *v216;
  unint64_t v217;
  unint64_t *v218;
  void *v219[2];
  char v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  void *__p[2];
  char v224;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2);
    if (v224 < 0)
      operator delete(__p[0]);
    v5 = v222;
    if (v222)
    {
      p_shared_owners = (unint64_t *)&v222->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 4);
    if (v224 < 0)
      operator delete(__p[0]);
    v8 = v222;
    if (v222)
    {
      v9 = (unint64_t *)&v222->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 8);
    if (v224 < 0)
      operator delete(__p[0]);
    v11 = v222;
    if (v222)
    {
      v12 = (unint64_t *)&v222->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 12);
    if (v224 < 0)
      operator delete(__p[0]);
    v14 = v222;
    if (v222)
    {
      v15 = (unint64_t *)&v222->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 16);
    if (v224 < 0)
      operator delete(__p[0]);
    v17 = v222;
    if (v222)
    {
      v18 = (unint64_t *)&v222->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 60);
    if (v224 < 0)
      operator delete(__p[0]);
    v20 = v222;
    if (v222)
    {
      v21 = (unint64_t *)&v222->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 61);
    if (v224 < 0)
      operator delete(__p[0]);
    v23 = v222;
    if (v222)
    {
      v24 = (unint64_t *)&v222->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 62);
    if (v224 < 0)
      operator delete(__p[0]);
    v26 = v222;
    if (v222)
    {
      v27 = (unint64_t *)&v222->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 63);
    if (v224 < 0)
      operator delete(__p[0]);
    v29 = v222;
    if (v222)
    {
      v30 = (unint64_t *)&v222->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 64);
    if (v224 < 0)
      operator delete(__p[0]);
    v32 = v222;
    if (v222)
    {
      v33 = (unint64_t *)&v222->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 20);
    if (v224 < 0)
      operator delete(__p[0]);
    v35 = v222;
    if (v222)
    {
      v36 = (unint64_t *)&v222->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 24);
    if (v224 < 0)
      operator delete(__p[0]);
    v38 = v222;
    if (v222)
    {
      v39 = (unint64_t *)&v222->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 28);
    if (v224 < 0)
      operator delete(__p[0]);
    v41 = v222;
    if (v222)
    {
      v42 = (unint64_t *)&v222->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 32);
    if (v224 < 0)
      operator delete(__p[0]);
    v44 = v222;
    if (v222)
    {
      v45 = (unint64_t *)&v222->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 36);
    if (v224 < 0)
      operator delete(__p[0]);
    v47 = v222;
    if (v222)
    {
      v48 = (unint64_t *)&v222->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 65);
    if (v224 < 0)
      operator delete(__p[0]);
    v50 = v222;
    if (v222)
    {
      v51 = (unint64_t *)&v222->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 66);
    if (v224 < 0)
      operator delete(__p[0]);
    v53 = v222;
    if (v222)
    {
      v54 = (unint64_t *)&v222->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 67);
    if (v224 < 0)
      operator delete(__p[0]);
    v56 = v222;
    if (v222)
    {
      v57 = (unint64_t *)&v222->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 68);
    if (v224 < 0)
      operator delete(__p[0]);
    v59 = v222;
    if (v222)
    {
      v60 = (unint64_t *)&v222->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 69);
    if (v224 < 0)
      operator delete(__p[0]);
    v62 = v222;
    if (v222)
    {
      v63 = (unint64_t *)&v222->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 40);
    if (v224 < 0)
      operator delete(__p[0]);
    v65 = v222;
    if (v222)
    {
      v66 = (unint64_t *)&v222->__shared_owners_;
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 - 1, v66));
      if (!v67)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 44);
    if (v224 < 0)
      operator delete(__p[0]);
    v68 = v222;
    if (v222)
    {
      v69 = (unint64_t *)&v222->__shared_owners_;
      do
        v70 = __ldaxr(v69);
      while (__stlxr(v70 - 1, v69));
      if (!v70)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 48);
    if (v224 < 0)
      operator delete(__p[0]);
    v71 = v222;
    if (v222)
    {
      v72 = (unint64_t *)&v222->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 52);
    if (v224 < 0)
      operator delete(__p[0]);
    v74 = v222;
    if (v222)
    {
      v75 = (unint64_t *)&v222->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 56);
    if (v224 < 0)
      operator delete(__p[0]);
    v77 = v222;
    if (v222)
    {
      v78 = (unint64_t *)&v222->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 70);
    if (v224 < 0)
      operator delete(__p[0]);
    v80 = v222;
    if (v222)
    {
      v81 = (unint64_t *)&v222->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 71);
    if (v224 < 0)
      operator delete(__p[0]);
    v83 = v222;
    if (v222)
    {
      v84 = (unint64_t *)&v222->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 72);
    if (v224 < 0)
      operator delete(__p[0]);
    v86 = v222;
    if (v222)
    {
      v87 = (unint64_t *)&v222->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 73);
    if (v224 < 0)
      operator delete(__p[0]);
    v89 = v222;
    if (v222)
    {
      v90 = (unint64_t *)&v222->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 74);
    if (v224 < 0)
      operator delete(__p[0]);
    v92 = v222;
    if (v222)
    {
      v93 = (unint64_t *)&v222->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "use_static_sizes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 208))(v221, __p, a2 + 75);
    if (v224 < 0)
      operator delete(__p[0]);
    v95 = v222;
    if (v222)
    {
      v96 = (unint64_t *)&v222->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 76);
    if (v224 < 0)
      operator delete(__p[0]);
    v98 = v222;
    if (v222)
    {
      v99 = (unint64_t *)&v222->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 80);
    if (v224 < 0)
      operator delete(__p[0]);
    v101 = v222;
    if (v222)
    {
      v102 = (unint64_t *)&v222->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 84);
    if (v224 < 0)
      operator delete(__p[0]);
    v104 = v222;
    if (v222)
    {
      v105 = (unint64_t *)&v222->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 88);
    if (v224 < 0)
      operator delete(__p[0]);
    v107 = v222;
    if (v222)
    {
      v108 = (unint64_t *)&v222->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v221 + 160))(v221, __p, a2 + 92);
    if (v224 < 0)
      operator delete(__p[0]);
    v110 = v222;
    if (v222)
    {
      v111 = (unint64_t *)&v222->__shared_owners_;
      do
        v112 = __ldaxr(v111);
      while (__stlxr(v112 - 1, v111));
      goto LABEL_715;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v113 = v222;
    if (v222)
    {
      v114 = (unint64_t *)&v222->__shared_owners_;
      do
        v115 = __ldaxr(v114);
      while (__stlxr(v115 - 1, v114));
      if (!v115)
      {
        ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
        std::__shared_weak_count::__release_weak(v113);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v116 = v222;
    if (v222)
    {
      v117 = (unint64_t *)&v222->__shared_owners_;
      do
        v118 = __ldaxr(v117);
      while (__stlxr(v118 - 1, v117));
      if (!v118)
      {
        ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
        std::__shared_weak_count::__release_weak(v116);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v119 = v222;
    if (v222)
    {
      v120 = (unint64_t *)&v222->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
        std::__shared_weak_count::__release_weak(v119);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v122 = v222;
    if (v222)
    {
      v123 = (unint64_t *)&v222->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v125 = v222;
    if (v222)
    {
      v126 = (unint64_t *)&v222->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 60) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v128 = v222;
    if (v222)
    {
      v129 = (unint64_t *)&v222->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
        std::__shared_weak_count::__release_weak(v128);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 61) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v131 = v222;
    if (v222)
    {
      v132 = (unint64_t *)&v222->__shared_owners_;
      do
        v133 = __ldaxr(v132);
      while (__stlxr(v133 - 1, v132));
      if (!v133)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 62) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v134 = v222;
    if (v222)
    {
      v135 = (unint64_t *)&v222->__shared_owners_;
      do
        v136 = __ldaxr(v135);
      while (__stlxr(v136 - 1, v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
        std::__shared_weak_count::__release_weak(v134);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 63) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v137 = v222;
    if (v222)
    {
      v138 = (unint64_t *)&v222->__shared_owners_;
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "begin_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 64) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v140 = v222;
    if (v222)
    {
      v141 = (unint64_t *)&v222->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v143 = v222;
    if (v222)
    {
      v144 = (unint64_t *)&v222->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v146 = v222;
    if (v222)
    {
      v147 = (unint64_t *)&v222->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v149 = v222;
    if (v222)
    {
      v150 = (unint64_t *)&v222->__shared_owners_;
      do
        v151 = __ldaxr(v150);
      while (__stlxr(v151 - 1, v150));
      if (!v151)
      {
        ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
        std::__shared_weak_count::__release_weak(v149);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v152 = v222;
    if (v222)
    {
      v153 = (unint64_t *)&v222->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
        std::__shared_weak_count::__release_weak(v152);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v155 = v222;
    if (v222)
    {
      v156 = (unint64_t *)&v222->__shared_owners_;
      do
        v157 = __ldaxr(v156);
      while (__stlxr(v157 - 1, v156));
      if (!v157)
      {
        ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
        std::__shared_weak_count::__release_weak(v155);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 65) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v158 = v222;
    if (v222)
    {
      v159 = (unint64_t *)&v222->__shared_owners_;
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 66) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v161 = v222;
    if (v222)
    {
      v162 = (unint64_t *)&v222->__shared_owners_;
      do
        v163 = __ldaxr(v162);
      while (__stlxr(v163 - 1, v162));
      if (!v163)
      {
        ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
        std::__shared_weak_count::__release_weak(v161);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 67) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v164 = v222;
    if (v222)
    {
      v165 = (unint64_t *)&v222->__shared_owners_;
      do
        v166 = __ldaxr(v165);
      while (__stlxr(v166 - 1, v165));
      if (!v166)
      {
        ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
        std::__shared_weak_count::__release_weak(v164);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 68) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v167 = v222;
    if (v222)
    {
      v168 = (unint64_t *)&v222->__shared_owners_;
      do
        v169 = __ldaxr(v168);
      while (__stlxr(v169 - 1, v168));
      if (!v169)
      {
        ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
        std::__shared_weak_count::__release_weak(v167);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "end_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 69) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v170 = v222;
    if (v222)
    {
      v171 = (unint64_t *)&v222->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 40) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v173 = v222;
    if (v222)
    {
      v174 = (unint64_t *)&v222->__shared_owners_;
      do
        v175 = __ldaxr(v174);
      while (__stlxr(v175 - 1, v174));
      if (!v175)
      {
        ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
        std::__shared_weak_count::__release_weak(v173);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 44) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v176 = v222;
    if (v222)
    {
      v177 = (unint64_t *)&v222->__shared_owners_;
      do
        v178 = __ldaxr(v177);
      while (__stlxr(v178 - 1, v177));
      if (!v178)
      {
        ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
        std::__shared_weak_count::__release_weak(v176);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v179 = v222;
    if (v222)
    {
      v180 = (unint64_t *)&v222->__shared_owners_;
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
      if (!v181)
      {
        ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
        std::__shared_weak_count::__release_weak(v179);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v182 = v222;
    if (v222)
    {
      v183 = (unint64_t *)&v222->__shared_owners_;
      do
        v184 = __ldaxr(v183);
      while (__stlxr(v184 - 1, v183));
      if (!v184)
      {
        ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
        std::__shared_weak_count::__release_weak(v182);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "stride_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v185 = v222;
    if (v222)
    {
      v186 = (unint64_t *)&v222->__shared_owners_;
      do
        v187 = __ldaxr(v186);
      while (__stlxr(v187 - 1, v186));
      if (!v187)
      {
        ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
        std::__shared_weak_count::__release_weak(v185);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 70) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v188 = v222;
    if (v222)
    {
      v189 = (unint64_t *)&v222->__shared_owners_;
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 71) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v191 = v222;
    if (v222)
    {
      v192 = (unint64_t *)&v222->__shared_owners_;
      do
        v193 = __ldaxr(v192);
      while (__stlxr(v193 - 1, v192));
      if (!v193)
      {
        ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
        std::__shared_weak_count::__release_weak(v191);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 72) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v194 = v222;
    if (v222)
    {
      v195 = (unint64_t *)&v222->__shared_owners_;
      do
        v196 = __ldaxr(v195);
      while (__stlxr(v196 - 1, v195));
      if (!v196)
      {
        ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
        std::__shared_weak_count::__release_weak(v194);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 73) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v197 = v222;
    if (v222)
    {
      v198 = (unint64_t *)&v222->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "squeeze_mask_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 74) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v200 = v222;
    if (v222)
    {
      v201 = (unint64_t *)&v222->__shared_owners_;
      do
        v202 = __ldaxr(v201);
      while (__stlxr(v202 - 1, v201));
      if (!v202)
      {
        ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
        std::__shared_weak_count::__release_weak(v200);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "use_static_sizes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_BYTE *)(a2 + 75) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 88))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v203 = v222;
    if (v222)
    {
      v204 = (unint64_t *)&v222->__shared_owners_;
      do
        v205 = __ldaxr(v204);
      while (__stlxr(v205 - 1, v204));
      if (!v205)
      {
        ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
        std::__shared_weak_count::__release_weak(v203);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 76) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v206 = v222;
    if (v222)
    {
      v207 = (unint64_t *)&v222->__shared_owners_;
      do
        v208 = __ldaxr(v207);
      while (__stlxr(v208 - 1, v207));
      if (!v208)
      {
        ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
        std::__shared_weak_count::__release_weak(v206);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 80) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v209 = v222;
    if (v222)
    {
      v210 = (unint64_t *)&v222->__shared_owners_;
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 - 1, v210));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 84) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v212 = v222;
    if (v222)
    {
      v213 = (unint64_t *)&v222->__shared_owners_;
      do
        v214 = __ldaxr(v213);
      while (__stlxr(v214 - 1, v213));
      if (!v214)
      {
        ((void (*)(std::__shared_weak_count *))v212->__on_zero_shared)(v212);
        std::__shared_weak_count::__release_weak(v212);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 88) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v215 = v222;
    if (v222)
    {
      v216 = (unint64_t *)&v222->__shared_owners_;
      do
        v217 = __ldaxr(v216);
      while (__stlxr(v217 - 1, v216));
      if (!v217)
      {
        ((void (*)(std::__shared_weak_count *))v215->__on_zero_shared)(v215);
        std::__shared_weak_count::__release_weak(v215);
      }
    }
    if (v220 < 0)
      operator delete(v219[0]);
    std::string::basic_string[abi:ne180100]<0>(v219, "static_sizes_seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v219, &v221);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v221 + 24))(v221, __p))
      *(_DWORD *)(a2 + 92) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v221 + 40))(v221, __p);
    if (v224 < 0)
      operator delete(__p[0]);
    v110 = v222;
    if (v222)
    {
      v218 = (unint64_t *)&v222->__shared_owners_;
      do
        v112 = __ldaxr(v218);
      while (__stlxr(v112 - 1, v218));
LABEL_715:
      if (!v112)
      {
        ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
        std::__shared_weak_count::__release_weak(v110);
      }
    }
  }
  if (v220 < 0)
    operator delete(v219[0]);
}

void sub_19186963C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191869954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191869BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191869C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191869E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::stack_nd_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "nd_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_15:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19186A000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19186A0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186A274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186A338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186A520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19186A608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186A8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186A9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186ABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19186AC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186AE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186AEE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186B0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::sliding_windows_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2);
    if (v26 < 0)
      operator delete(__p[0]);
    v5 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 1);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "step");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 2);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_55;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "step");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v20);
      while (__stlxr(v13 - 1, v20));
LABEL_55:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_19186B4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19186B5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186B7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186B888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186BA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::reverse_seq_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "batch_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2);
    if (v20 < 0)
      operator delete(__p[0]);
    v5 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "seq_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2 + 1);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_35;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "batch_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v11 = v18;
    if (v18)
    {
      v12 = (unint64_t *)&v18->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "seq_axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v14 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v14);
      while (__stlxr(v10 - 1, v14));
LABEL_35:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_19186BD38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19186BE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186BFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186C090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186C278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cross_entropy_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (a3 && *(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v5 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "reduce_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "reduce");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_59;
  }
  if (*(_DWORD *)(a2 + 4) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "reduce_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2 + 4);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = *(unsigned __int8 *)(a2 + 8);
  v11 = a2 + 8;
  if (!v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "reduce");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_59:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_61:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_19186C6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19186C7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186C99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186CA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186CC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::non_maximum_suppression_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  int v66;
  int v67;
  void *v68;
  void *v69[2];
  char v70;
  void *v71[2];
  void *__p[2];
  char v73;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v69, "max_boxes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 160))(v71[0], __p, a2);
    if (v73 < 0)
      operator delete(__p[0]);
    v5 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v6 = (unint64_t *)((char *)v71[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    if (*(float *)(a2 + 4) != 0.5)
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "iou_threshold");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 216))(v71[0], __p, a2 + 4);
      if (v73 < 0)
        operator delete(__p[0]);
      v8 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v9 = (unint64_t *)((char *)v71[1] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(float *)(a2 + 8) != 0.0)
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "score_threshold");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 216))(v71[0], __p, a2 + 8);
      if (v73 < 0)
        operator delete(__p[0]);
      v11 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v12 = (unint64_t *)((char *)v71[1] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_BYTE *)(a2 + 12))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "per_class_suppression");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 208))(v71[0], __p, a2 + 12);
      if (v73 < 0)
        operator delete(__p[0]);
      v14 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v15 = (unint64_t *)((char *)v71[1] + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_DWORD *)(a2 + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "num_boxes_pre_nms");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 160))(v71[0], __p, a2 + 16);
      if (v73 < 0)
        operator delete(__p[0]);
      v17 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v18 = (unint64_t *)((char *)v71[1] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_DWORD *)(a2 + 20) != 3)
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 160))(v71[0], __p, a2 + 20);
      if (v73 < 0)
        operator delete(__p[0]);
      v20 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v21 = (unint64_t *)((char *)v71[1] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_BYTE *)(a2 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "no_scores");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 208))(v71[0], __p, a2 + 24);
      if (v73 < 0)
        operator delete(__p[0]);
      v23 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v24 = (unint64_t *)((char *)v71[1] + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_BYTE *)(a2 + 25))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "no_count");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 208))(v71[0], __p, a2 + 25);
      if (v73 < 0)
        operator delete(__p[0]);
      v26 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v27 = (unint64_t *)((char *)v71[1] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_BYTE *)(a2 + 26))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "no_indices");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 208))(v71[0], __p, a2 + 26);
      if (v73 < 0)
        operator delete(__p[0]);
      v29 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v30 = (unint64_t *)((char *)v71[1] + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_BYTE *)(a2 + 27))
    {
      std::string::basic_string[abi:ne180100]<0>(v69, "ane_layout");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v71[0] + 208))(v71[0], __p, a2 + 27);
      if (v73 < 0)
        operator delete(__p[0]);
      v32 = (std::__shared_weak_count *)v71[1];
      if (v71[1])
      {
        v33 = (unint64_t *)((char *)v71[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v70 < 0)
        operator delete(v69[0]);
    }
    if (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 32))
    {
      std::string::basic_string[abi:ne180100]<0>(v71, "inline_gather_axes");
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 256))(a1, v71, a2 + 32);
      if ((SHIBYTE(__p[0]) & 0x80000000) == 0)
        return;
      v35 = v71[0];
      goto LABEL_222;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v69, "max_boxes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 40))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v36 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v37 = (unint64_t *)((char *)v71[1] + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "iou_threshold");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(float *)(a2 + 4) = (*(float (**)(void *, void **))(*(_QWORD *)v71[0] + 96))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v39 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v40 = (unint64_t *)((char *)v71[1] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "score_threshold");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(float *)(a2 + 8) = (*(float (**)(void *, void **))(*(_QWORD *)v71[0] + 96))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v42 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v43 = (unint64_t *)((char *)v71[1] + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "per_class_suppression");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_BYTE *)(a2 + 12) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 88))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v45 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v46 = (unint64_t *)((char *)v71[1] + 8);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "num_boxes_pre_nms");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 40))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v48 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v49 = (unint64_t *)((char *)v71[1] + 8);
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 40))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v51 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v52 = (unint64_t *)((char *)v71[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "no_scores");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 88))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v54 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v55 = (unint64_t *)((char *)v71[1] + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "no_count");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_BYTE *)(a2 + 25) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 88))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v57 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v58 = (unint64_t *)((char *)v71[1] + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "no_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_BYTE *)(a2 + 26) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 88))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v60 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v61 = (unint64_t *)((char *)v71[1] + 8);
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
    std::string::basic_string[abi:ne180100]<0>(v69, "ane_layout");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v69, v71);
    if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v71[0] + 24))(v71[0], __p))
      *(_BYTE *)(a2 + 27) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v71[0] + 88))(v71[0], __p);
    if (v73 < 0)
      operator delete(__p[0]);
    v63 = (std::__shared_weak_count *)v71[1];
    if (v71[1])
    {
      v64 = (unint64_t *)((char *)v71[1] + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (v70 < 0)
      operator delete(v69[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v71, "inline_gather_axes");
  v66 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, v71);
  v67 = v66;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v71[0]);
    if (!v67)
      return;
  }
  else if (!v66)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v69, "inline_gather_axes");
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 136))(v71, a1, v69);
  v68 = *(void **)(a2 + 32);
  if (v68)
  {
    *(_QWORD *)(a2 + 40) = v68;
    operator delete(v68);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v71;
  *(void **)(a2 + 48) = __p[0];
  v71[1] = 0;
  __p[0] = 0;
  v71[0] = 0;
  if (v70 < 0)
  {
    v35 = v69[0];
LABEL_222:
    operator delete(v35);
  }
}

void sub_19186DACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy((void **)&a16);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19186DC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186DFE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186E0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186E2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_19186E468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186E510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186E6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::sgd_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (a3 && *(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "has_momentum");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v5 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "has_momentum");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "momentum");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "num_variables");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_59;
  }
  if (*(float *)(a2 + 4) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "momentum");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 216))(v25, __p, a2 + 4);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = *(_DWORD *)(a2 + 8);
  v11 = a2 + 8;
  if (v12 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "num_variables");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_59:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_61:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_19186EB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19186EC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186EE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186EEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186F0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::gather_nd_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2);
    if (v38 < 0)
      operator delete(__p[0]);
    v5 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4);
    if (v38 < 0)
      operator delete(__p[0]);
    v8 = v36;
    if (v36)
    {
      v9 = (unint64_t *)&v36->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "batch_dims");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 8);
    if (v38 < 0)
      operator delete(__p[0]);
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "validate_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 208))(v35, __p, a2 + 12);
    if (v38 < 0)
      operator delete(__p[0]);
    v14 = v36;
    if (v36)
    {
      v15 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "allow_negative_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 208))(v35, __p, a2 + 13);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v18 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_95;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v20 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v23 = v36;
    if (v36)
    {
      v24 = (unint64_t *)&v36->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "batch_dims");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v26 = v36;
    if (v36)
    {
      v27 = (unint64_t *)&v36->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "validate_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_BYTE *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 88))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "allow_negative_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_BYTE *)(a2 + 13) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 88))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v32);
      while (__stlxr(v19 - 1, v32));
LABEL_95:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
}

void sub_19186F744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19186F86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186FA04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19186FAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19186FCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::adam_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "beta1");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(float *)a2 = (*(float (**)(uint64_t, void **))(*(_QWORD *)v31 + 96))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v19 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "beta2");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v31 + 96))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v22 = v32;
    if (v32)
    {
      v23 = (unint64_t *)&v32->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "eps");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v31 + 96))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "num_variables");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (!v32)
      goto LABEL_78;
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v18 = __ldaxr(v28);
    while (__stlxr(v18 - 1, v28));
    goto LABEL_76;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "beta1");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 216))(v31, __p, a2);
  if (v34 < 0)
    operator delete(__p[0]);
  v5 = v32;
  if (v32)
  {
    v6 = (unint64_t *)&v32->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v30 < 0)
    operator delete(v29[0]);
  std::string::basic_string[abi:ne180100]<0>(v29, "beta2");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 216))(v31, __p, a2 + 4);
  if (v34 < 0)
    operator delete(__p[0]);
  v8 = v32;
  if (v32)
  {
    v9 = (unint64_t *)&v32->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v30 < 0)
    operator delete(v29[0]);
  std::string::basic_string[abi:ne180100]<0>(v29, "eps");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 216))(v31, __p, a2 + 8);
  if (v34 < 0)
    operator delete(__p[0]);
  v11 = v32;
  if (v32)
  {
    v12 = (unint64_t *)&v32->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v30 < 0)
    operator delete(v29[0]);
  v15 = *(_DWORD *)(a2 + 12);
  v14 = a2 + 12;
  if (v15 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "num_variables");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 160))(v31, __p, v14);
    if (v34 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (!v32)
      goto LABEL_78;
    v17 = (unint64_t *)&v32->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
LABEL_76:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_78:
    if (v30 < 0)
      operator delete(v29[0]);
  }
}

void sub_191870200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191870318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918704D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191870594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::scatter_nd_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  void *v33[2];
  char v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  char v38;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2);
    if (v38 < 0)
      operator delete(__p[0]);
    v5 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 4);
    if (v38 < 0)
      operator delete(__p[0]);
    v8 = v36;
    if (v36)
    {
      v9 = (unint64_t *)&v36->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "accumulation_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 160))(v35, __p, a2 + 8);
    if (v38 < 0)
      operator delete(__p[0]);
    v11 = v36;
    if (v36)
    {
      v12 = (unint64_t *)&v36->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "validate_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 208))(v35, __p, a2 + 12);
    if (v38 < 0)
      operator delete(__p[0]);
    v14 = v36;
    if (v36)
    {
      v15 = (unint64_t *)&v36->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "allow_negative_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v35 + 208))(v35, __p, a2 + 13);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v18 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      goto LABEL_95;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v20 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v23 = v36;
    if (v36)
    {
      v24 = (unint64_t *)&v36->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "accumulation_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 40))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v26 = v36;
    if (v36)
    {
      v27 = (unint64_t *)&v36->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "validate_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_BYTE *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 88))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v34 < 0)
      operator delete(v33[0]);
    std::string::basic_string[abi:ne180100]<0>(v33, "allow_negative_indices");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v33, &v35);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v35 + 24))(v35, __p))
      *(_BYTE *)(a2 + 13) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v35 + 88))(v35, __p);
    if (v38 < 0)
      operator delete(__p[0]);
    v17 = v36;
    if (v36)
    {
      v32 = (unint64_t *)&v36->__shared_owners_;
      do
        v19 = __ldaxr(v32);
      while (__stlxr(v19 - 1, v32));
LABEL_95:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  if (v34 < 0)
    operator delete(v33[0]);
}

void sub_191870E04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191870F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918710C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191871188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191871370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void sub_191871538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918715E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918717B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::one_hot_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "depth");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v19 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "on_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v31 + 96))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v22 = v32;
    if (v32)
    {
      v23 = (unint64_t *)&v32->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "off_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v31 + 96))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (!v32)
      goto LABEL_80;
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v18 = __ldaxr(v28);
    while (__stlxr(v18 - 1, v28));
    goto LABEL_78;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "depth");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 160))(v31, __p, a2);
  if (v34 < 0)
    operator delete(__p[0]);
  v5 = v32;
  if (v32)
  {
    v6 = (unint64_t *)&v32->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v30 < 0)
    operator delete(v29[0]);
  if (*(float *)(a2 + 4) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "on_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 216))(v31, __p, a2 + 4);
    if (v34 < 0)
      operator delete(__p[0]);
    v8 = v32;
    if (v32)
    {
      v9 = (unint64_t *)&v32->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
  }
  if (*(float *)(a2 + 8) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "off_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 216))(v31, __p, a2 + 8);
    if (v34 < 0)
      operator delete(__p[0]);
    v11 = v32;
    if (v32)
    {
      v12 = (unint64_t *)&v32->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
  }
  v15 = *(_DWORD *)(a2 + 12);
  v14 = a2 + 12;
  if (v15 != -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v31 + 160))(v31, __p, v14);
    if (v34 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (!v32)
      goto LABEL_80;
    v17 = (unint64_t *)&v32->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
LABEL_78:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_80:
    if (v30 < 0)
      operator delete(v29[0]);
  }
}

void sub_191871D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191871E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191871FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918720B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187229C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::cumsum_params_t>(uint64_t a1, _BYTE *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "exclusive");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v19 + 208))(v19, __p, a2);
    if (v22 < 0)
      operator delete(__p[0]);
    v5 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "exclusive");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 88))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "reverse");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 88))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_40;
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
    goto LABEL_38;
  }
  v9 = a2[1];
  v8 = a2 + 1;
  if (!v9)
    return;
  std::string::basic_string[abi:ne180100]<0>(v17, "reverse");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v19 + 208))(v19, __p, v8);
  if (v22 < 0)
    operator delete(__p[0]);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_38:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_40:
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_19187257C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191872674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918727F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918728B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191872A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::dev_op_params_t>(Espresso::SerDes::generic_serdes_object &,Espresso::dev_op_params_t &,BOOL)::$_0::operator()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  char *v40;
  __int128 v41;
  int64x2_t v42;
  char *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v48[2];
  char v49;
  __int128 v50;
  int64x2_t v51;
  char *v52;
  void *__p;
  void *v54[2];
  char *v55;
  char **v56;

  v51 = 0uLL;
  v52 = 0;
  if (a3 != a4)
  {
    v5 = a3;
    do
    {
      v6 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
      std::string::basic_string[abi:ne180100]<0>(&__p, "json");
      Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v50, (uint64_t)v6, &__p);
      if (SHIBYTE(v54[1]) < 0)
        operator delete(__p);
      v7 = v50;
      std::string::basic_string[abi:ne180100]<0>(v48, "n");
      Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v48, &__p);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)__p + 160))(__p, &v54[1], v5 + 4);
      if (SHIBYTE(v56) < 0)
        operator delete(v54[1]);
      v8 = (std::__shared_weak_count *)v54[0];
      if (v54[0])
      {
        v9 = (unint64_t *)((char *)v54[0] + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      if (v49 < 0)
        operator delete(v48[0]);
      std::string::basic_string[abi:ne180100]<0>(v48, "k");
      Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v48, &__p);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)__p + 160))(__p, &v54[1], v5 + 8);
      if (SHIBYTE(v56) < 0)
        operator delete(v54[1]);
      v11 = (std::__shared_weak_count *)v54[0];
      if (v54[0])
      {
        v12 = (unint64_t *)((char *)v54[0] + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v49 < 0)
        operator delete(v48[0]);
      std::string::basic_string[abi:ne180100]<0>(v48, "h");
      Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v48, &__p);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)__p + 160))(__p, &v54[1], v5 + 12);
      if (SHIBYTE(v56) < 0)
        operator delete(v54[1]);
      v14 = (std::__shared_weak_count *)v54[0];
      if (v54[0])
      {
        v15 = (unint64_t *)((char *)v54[0] + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      if (v49 < 0)
        operator delete(v48[0]);
      std::string::basic_string[abi:ne180100]<0>(v48, "w");
      Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v48, &__p);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)__p + 160))(__p, &v54[1], v5 + 16);
      if (SHIBYTE(v56) < 0)
        operator delete(v54[1]);
      v17 = (std::__shared_weak_count *)v54[0];
      if (v54[0])
      {
        v18 = (unint64_t *)((char *)v54[0] + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (v49 < 0)
        operator delete(v48[0]);
      std::string::basic_string[abi:ne180100]<0>(v48, "_rank");
      Espresso::SerDes::generic_serdes_object::operator[](v7, (uint64_t)v48, &__p);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)__p + 160))(__p, &v54[1], v5 + 20);
      if (SHIBYTE(v56) < 0)
        operator delete(v54[1]);
      v20 = (std::__shared_weak_count *)v54[0];
      if (v54[0])
      {
        v21 = (unint64_t *)((char *)v54[0] + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      if (v49 < 0)
        operator delete(v48[0]);
      v23 = v51.i64[1];
      if (v51.i64[1] >= (unint64_t)v52)
      {
        v28 = (v51.i64[1] - v51.i64[0]) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v30 = (uint64_t)&v52[-v51.i64[0]];
        if ((uint64_t)&v52[-v51.i64[0]] >> 3 > v29)
          v29 = v30 >> 3;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
          v31 = 0xFFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        v56 = &v52;
        v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v31);
        v34 = &v32[16 * v28];
        v35 = *((_QWORD *)&v50 + 1);
        *(_OWORD *)v34 = v50;
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = (_QWORD *)v51.i64[1];
        v39 = (_QWORD *)v51.i64[0];
        if (v51.i64[1] == v51.i64[0])
        {
          v42 = vdupq_n_s64(v51.u64[1]);
          v40 = &v32[16 * v28];
        }
        else
        {
          v40 = &v32[16 * v28];
          do
          {
            v41 = *((_OWORD *)v38 - 1);
            v38 -= 2;
            *((_OWORD *)v40 - 1) = v41;
            v40 -= 16;
            *v38 = 0;
            v38[1] = 0;
          }
          while (v38 != v39);
          v42 = v51;
        }
        v27 = v34 + 16;
        v51.i64[0] = (uint64_t)v40;
        v51.i64[1] = (uint64_t)(v34 + 16);
        *(int64x2_t *)v54 = v42;
        v43 = v52;
        v52 = &v32[16 * v33];
        v55 = v43;
        __p = (void *)v42.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&__p);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
      }
      else
      {
        *(_QWORD *)v51.i64[1] = v50;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        *(_QWORD *)(v23 + 8) = *((_QWORD *)&v50 + 1);
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
        }
        v27 = (_OWORD *)(v23 + 16);
      }
      v51.i64[1] = (uint64_t)v27;
      if (v24)
      {
        v44 = (unint64_t *)&v24->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v5 += 24;
    }
    while (v5 != a4);
  }
  (*(void (**)(_QWORD, uint64_t, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a2, &v51);
  __p = &v51;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_191872FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __p = &a20;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator>>(void *a1, uint64_t a2)
{
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a1, a2, 0);
}

void sub_191873130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191873498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::allocator<Espresso::dev_op_params_t>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v4 = (void **)(a1 + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v4 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    operator delete(v3);
  }
}

void Espresso::SerDes::operator<<(void *a1, uint64_t a2)
{
  Espresso::SerDes::params_io<Espresso::dev_op_params_t>(a1, a2, 1);
}

void sub_1918735DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918737D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::sparse_inner_product_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "nB");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 168))(v23, __p, a2 + 1);
    if (v26 < 0)
      operator delete(__p[0]);
    v5 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "nC");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 168))(v23, __p, a2);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "nnz");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 168))(v23, __p, a2 + 2);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_55;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "nB");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "nC");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "nnz");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v20);
      while (__stlxr(v13 - 1, v20));
LABEL_55:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_191873BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191873CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191873EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191873F7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191874170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::wg_transform_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  void *v65[2];
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  void *__p[2];
  char v70;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "kernel_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 40))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v37 = v68;
    if (v68)
    {
      p_shared_owners = (unint64_t *)&v68->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "win_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 40))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v40 = v68;
    if (v68)
    {
      v41 = (unint64_t *)&v68->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "pad_l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_WORD *)(a2 + 30) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 56))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v43 = v68;
    if (v68)
    {
      v44 = (unint64_t *)&v68->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "pad_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_WORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 56))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v46 = v68;
    if (v68)
    {
      v47 = (unint64_t *)&v68->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "pad_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_WORD *)(a2 + 34) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 56))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v49 = v68;
    if (v68)
    {
      v50 = (unint64_t *)&v68->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "pad_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_WORD *)(a2 + 36) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 56))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v52 = v68;
    if (v68)
    {
      v53 = (unint64_t *)&v68->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "pad_fill_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_WORD *)(a2 + 38) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 64))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v55 = v68;
    if (v68)
    {
      v56 = (unint64_t *)&v68->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "fused_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_WORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 64))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v58 = v68;
    if (v68)
    {
      v59 = (unint64_t *)&v68->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "out_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 40))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v61 = v68;
    if (v68)
    {
      v62 = (unint64_t *)&v68->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
    std::string::basic_string[abi:ne180100]<0>(v65, "out_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v67 + 24))(v67, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v67 + 40))(v67, __p);
    if (v70 < 0)
      operator delete(__p[0]);
    v34 = v68;
    if (!v68)
      goto LABEL_199;
    v64 = (unint64_t *)&v68->__shared_owners_;
    do
      v36 = __ldaxr(v64);
    while (__stlxr(v36 - 1, v64));
    goto LABEL_197;
  }
  std::string::basic_string[abi:ne180100]<0>(v65, "kernel_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 160))(v67, __p, a2);
  if (v70 < 0)
    operator delete(__p[0]);
  v5 = v68;
  if (v68)
  {
    v6 = (unint64_t *)&v68->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  std::string::basic_string[abi:ne180100]<0>(v65, "win_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 160))(v67, __p, a2 + 4);
  if (v70 < 0)
    operator delete(__p[0]);
  v8 = v68;
  if (v68)
  {
    v9 = (unint64_t *)&v68->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  std::string::basic_string[abi:ne180100]<0>(v65, "pad_l");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 176))(v67, __p, a2 + 30);
  if (v70 < 0)
    operator delete(__p[0]);
  v11 = v68;
  if (v68)
  {
    v12 = (unint64_t *)&v68->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  std::string::basic_string[abi:ne180100]<0>(v65, "pad_r");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 176))(v67, __p, a2 + 32);
  if (v70 < 0)
    operator delete(__p[0]);
  v14 = v68;
  if (v68)
  {
    v15 = (unint64_t *)&v68->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  std::string::basic_string[abi:ne180100]<0>(v65, "pad_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 176))(v67, __p, a2 + 34);
  if (v70 < 0)
    operator delete(__p[0]);
  v17 = v68;
  if (v68)
  {
    v18 = (unint64_t *)&v68->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  std::string::basic_string[abi:ne180100]<0>(v65, "pad_b");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 176))(v67, __p, a2 + 36);
  if (v70 < 0)
    operator delete(__p[0]);
  v20 = v68;
  if (v68)
  {
    v21 = (unint64_t *)&v68->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  std::string::basic_string[abi:ne180100]<0>(v65, "pad_fill_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 184))(v67, __p, a2 + 38);
  if (v70 < 0)
    operator delete(__p[0]);
  v23 = v68;
  if (v68)
  {
    v24 = (unint64_t *)&v68->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  std::string::basic_string[abi:ne180100]<0>(v65, "fused_relu");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 184))(v67, __p, a2 + 28);
  if (v70 < 0)
    operator delete(__p[0]);
  v26 = v68;
  if (v68)
  {
    v27 = (unint64_t *)&v68->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v66 < 0)
    operator delete(v65[0]);
  if (*(_DWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "out_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 160))(v67, __p, a2 + 16);
    if (v70 < 0)
      operator delete(__p[0]);
    v29 = v68;
    if (v68)
    {
      v30 = (unint64_t *)&v68->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v66 < 0)
      operator delete(v65[0]);
  }
  v33 = *(_DWORD *)(a2 + 20);
  v32 = a2 + 20;
  if (v33)
  {
    std::string::basic_string[abi:ne180100]<0>(v65, "out_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v65, &v67);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v67 + 160))(v67, __p, v32);
    if (v70 < 0)
      operator delete(__p[0]);
    v34 = v68;
    if (!v68)
      goto LABEL_199;
    v35 = (unint64_t *)&v68->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
LABEL_197:
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
LABEL_199:
    if (v66 < 0)
      operator delete(v65[0]);
  }
}

void sub_191874E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191874FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918751D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191875298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187548C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::grid_sampling_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (a3 && *(_DWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v5 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "absolute_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "normalized_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)(a2 + 5) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_59;
  }
  if (*(_BYTE *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "absolute_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, a2 + 4);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = *(unsigned __int8 *)(a2 + 5);
  v11 = a2 + 5;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "normalized_coordinates");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_59:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_61:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_1918758BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1918759C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191875B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191875C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191875DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::resample_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  void *v47[2];
  char v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *__p[2];
  char v52;

  if (!a3 || *(_DWORD *)a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v47, "sampling_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
        *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
      if (v52 < 0)
        operator delete(__p[0]);
      v28 = v50;
      if (v50)
      {
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          v30 = __ldaxr(p_shared_owners);
        while (__stlxr(v30 - 1, p_shared_owners));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (v48 < 0)
        operator delete(v47[0]);
      std::string::basic_string[abi:ne180100]<0>(v47, "padding_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
        *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
      if (v52 < 0)
        operator delete(__p[0]);
      v31 = v50;
      if (v50)
      {
        v32 = (unint64_t *)&v50->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v48 < 0)
        operator delete(v47[0]);
      std::string::basic_string[abi:ne180100]<0>(v47, "padding_value");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
        *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v49 + 96))(v49, __p);
      if (v52 < 0)
        operator delete(__p[0]);
      v34 = v50;
      if (v50)
      {
        v35 = (unint64_t *)&v50->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v48 < 0)
        operator delete(v47[0]);
      std::string::basic_string[abi:ne180100]<0>(v47, "coordinates_mode");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
        *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
      if (v52 < 0)
        operator delete(__p[0]);
      v37 = v50;
      if (v50)
      {
        v38 = (unint64_t *)&v50->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (v48 < 0)
        operator delete(v47[0]);
      std::string::basic_string[abi:ne180100]<0>(v47, "coordinates_format");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
        *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
      if (v52 < 0)
        operator delete(__p[0]);
      v40 = v50;
      if (v50)
      {
        v41 = (unint64_t *)&v50->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v48 < 0)
        operator delete(v47[0]);
      std::string::basic_string[abi:ne180100]<0>(v47, "coordinates_type");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
        *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
      if (v52 < 0)
        operator delete(__p[0]);
      v43 = v50;
      if (v50)
      {
        v44 = (unint64_t *)&v50->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v48 < 0)
        operator delete(v47[0]);
      std::string::basic_string[abi:ne180100]<0>(v47, "align_corners");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v49 + 24))(v49, __p))
        *(_BYTE *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v49 + 88))(v49, __p);
      if (v52 < 0)
        operator delete(__p[0]);
      v25 = v50;
      if (!v50)
        goto LABEL_145;
      v46 = (unint64_t *)&v50->__shared_owners_;
      do
        v27 = __ldaxr(v46);
      while (__stlxr(v27 - 1, v46));
      goto LABEL_143;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "sampling_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2);
    if (v52 < 0)
      operator delete(__p[0]);
    v5 = v50;
    if (v50)
    {
      v6 = (unint64_t *)&v50->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "padding_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 4);
    if (v52 < 0)
      operator delete(__p[0]);
    v8 = v50;
    if (v50)
    {
      v9 = (unint64_t *)&v50->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  if (*(float *)(a2 + 8) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "padding_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 216))(v49, __p, a2 + 8);
    if (v52 < 0)
      operator delete(__p[0]);
    v11 = v50;
    if (v50)
    {
      v12 = (unint64_t *)&v50->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "coordinates_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 12);
    if (v52 < 0)
      operator delete(__p[0]);
    v14 = v50;
    if (v50)
    {
      v15 = (unint64_t *)&v50->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "coordinates_format");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 16);
    if (v52 < 0)
      operator delete(__p[0]);
    v17 = v50;
    if (v50)
    {
      v18 = (unint64_t *)&v50->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  if (*(_DWORD *)(a2 + 20))
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "coordinates_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 160))(v49, __p, a2 + 20);
    if (v52 < 0)
      operator delete(__p[0]);
    v20 = v50;
    if (v50)
    {
      v21 = (unint64_t *)&v50->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v48 < 0)
      operator delete(v47[0]);
  }
  v24 = *(unsigned __int8 *)(a2 + 24);
  v23 = a2 + 24;
  if (!v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v47, "align_corners");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v47, &v49);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v49 + 208))(v49, __p, v23);
    if (v52 < 0)
      operator delete(__p[0]);
    v25 = v50;
    if (!v50)
      goto LABEL_145;
    v26 = (unint64_t *)&v50->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
LABEL_143:
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
LABEL_145:
    if (v48 < 0)
      operator delete(v47[0]);
  }
}

void sub_191876774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1918768BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191876AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191876BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191876DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::local_correlation_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _DWORD *v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  char v34;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "window_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v19 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "window_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v22 = v32;
    if (v32)
    {
      v23 = (unint64_t *)&v32->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v25 = v32;
    if (v32)
    {
      v26 = (unint64_t *)&v32->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
    std::string::basic_string[abi:ne180100]<0>(v29, "stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v31 + 24))(v31, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v31 + 40))(v31, __p);
    if (v34 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (!v32)
      goto LABEL_79;
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v18 = __ldaxr(v28);
    while (__stlxr(v18 - 1, v28));
    goto LABEL_77;
  }
  std::string::basic_string[abi:ne180100]<0>(v29, "window_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v31 + 160))(v31, __p, a2);
  if (v34 < 0)
    operator delete(__p[0]);
  v5 = v32;
  if (v32)
  {
    v6 = (unint64_t *)&v32->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v30 < 0)
    operator delete(v29[0]);
  std::string::basic_string[abi:ne180100]<0>(v29, "window_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v31 + 160))(v31, __p, a2 + 1);
  if (v34 < 0)
    operator delete(__p[0]);
  v8 = v32;
  if (v32)
  {
    v9 = (unint64_t *)&v32->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v30 < 0)
    operator delete(v29[0]);
  if (a2[2] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v31 + 160))(v31, __p, a2 + 2);
    if (v34 < 0)
      operator delete(__p[0]);
    v11 = v32;
    if (v32)
    {
      v12 = (unint64_t *)&v32->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v30 < 0)
      operator delete(v29[0]);
  }
  v15 = a2[3];
  v14 = a2 + 3;
  if (v15 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v29, "stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v29, &v31);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v31 + 160))(v31, __p, v14);
    if (v34 < 0)
      operator delete(__p[0]);
    v16 = v32;
    if (!v32)
      goto LABEL_79;
    v17 = (unint64_t *)&v32->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
LABEL_77:
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
LABEL_79:
    if (v30 < 0)
      operator delete(v29[0]);
  }
}

void sub_191877300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191877418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918775B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191877678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191877860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::bahdanau_attention_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "encoder_hidden_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 168))(v23, __p, a2);
    if (v26 < 0)
      operator delete(__p[0]);
    v5 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "decoder_hidden_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 168))(v23, __p, a2 + 1);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "vdim");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 168))(v23, __p, a2 + 2);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_55;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "encoder_hidden_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "decoder_hidden_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "vdim");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 48))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v20);
      while (__stlxr(v13 - 1, v20));
LABEL_55:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_191877C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191877D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191877F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191878024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191878218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::self_attention_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "input_size");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 48))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v16 = v26;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(p_shared_owners);
      while (__stlxr(v18 - 1, p_shared_owners));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "num_attn_heads");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 48))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
    std::string::basic_string[abi:ne180100]<0>(v23, "masking");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
      *(_BYTE *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 88))(v25, __p);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_58;
    v22 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
    goto LABEL_56;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "input_size");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 168))(v25, __p, a2);
  if (v28 < 0)
    operator delete(__p[0]);
  v5 = v26;
  if (v26)
  {
    v6 = (unint64_t *)&v26->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v24 < 0)
    operator delete(v23[0]);
  std::string::basic_string[abi:ne180100]<0>(v23, "num_attn_heads");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 168))(v25, __p, a2 + 4);
  if (v28 < 0)
    operator delete(__p[0]);
  v8 = v26;
  if (v26)
  {
    v9 = (unint64_t *)&v26->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v24 < 0)
    operator delete(v23[0]);
  v12 = *(unsigned __int8 *)(a2 + 8);
  v11 = a2 + 8;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "masking");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 208))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_58;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_56:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_58:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_191878620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191878728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191878920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_1918789E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191878BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::loopkit_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __n128 v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  int v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  void *v36;
  void *v37[2];
  char v38;
  void *v39[2];
  void *__p[2];
  char v41;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v37, "func_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v39[0] + 232))(v39[0], __p, a2);
    if (v41 < 0)
      operator delete(__p[0]);
    v5 = (std::__shared_weak_count *)v39[1];
    if (v39[1])
    {
      v6 = (unint64_t *)((char *)v39[1] + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v38 < 0)
      operator delete(v37[0]);
    if (*(char *)(a2 + 71) < 0)
    {
      if (!*(_QWORD *)(a2 + 56))
        goto LABEL_69;
    }
    else if (!*(_BYTE *)(a2 + 71))
    {
      goto LABEL_69;
    }
    std::string::basic_string[abi:ne180100]<0>(v37, "custom_dylib_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v39[0] + 232))(v39[0], __p, a2 + 48);
    if (v41 < 0)
      operator delete(__p[0]);
    v26 = (std::__shared_weak_count *)v39[1];
    if (v39[1])
    {
      v27 = (unint64_t *)((char *)v39[1] + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v38 < 0)
      operator delete(v37[0]);
LABEL_69:
    if (*(char *)(a2 + 95) < 0)
    {
      if (!*(_QWORD *)(a2 + 80))
        goto LABEL_82;
    }
    else if (!*(_BYTE *)(a2 + 95))
    {
      goto LABEL_82;
    }
    std::string::basic_string[abi:ne180100]<0>(v37, "dylib_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
    (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v39[0] + 232))(v39[0], __p, a2 + 72);
    if (v41 < 0)
      operator delete(__p[0]);
    v29 = (std::__shared_weak_count *)v39[1];
    if (v39[1])
    {
      v30 = (unint64_t *)((char *)v39[1] + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (v38 < 0)
      operator delete(v37[0]);
LABEL_82:
    if (*(_DWORD *)(a2 + 120) != 1)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "num_outputs");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
      (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v39[0] + 160))(v39[0], __p, a2 + 120);
      if (v41 < 0)
        operator delete(__p[0]);
      v32 = (std::__shared_weak_count *)v39[1];
      if (v39[1])
      {
        v33 = (unint64_t *)((char *)v39[1] + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      if (v38 < 0)
        operator delete(v37[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v39, "input_args_idx");
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 256))(a1, v39, a2 + 24);
    if (SHIBYTE(__p[0]) < 0)
      operator delete(v39[0]);
    std::string::basic_string[abi:ne180100]<0>(v39, "top_nd_shapes");
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 256))(a1, v39, a2 + 96);
    if (SHIBYTE(__p[0]) < 0)
    {
      v35 = v39[0];
LABEL_101:
      operator delete(v35);
      return;
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "func_name");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
  v8.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v39, a2);
  if (v41 < 0)
    operator delete(__p[0]);
  v9 = (std::__shared_weak_count *)v39[1];
  if (v39[1])
  {
    v10 = (unint64_t *)((char *)v39[1] + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v9->__on_zero_shared)(v9, v8);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "custom_dylib_path");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
  v12.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v39, a2 + 48);
  if (v41 < 0)
    operator delete(__p[0]);
  v13 = (std::__shared_weak_count *)v39[1];
  if (v39[1])
  {
    v14 = (unint64_t *)((char *)v39[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "dylib_path");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
  v16.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(v39, a2 + 72);
  if (v41 < 0)
    operator delete(__p[0]);
  v17 = (std::__shared_weak_count *)v39[1];
  if (v39[1])
  {
    v18 = (unint64_t *)((char *)v39[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "num_outputs");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v37, v39);
  if ((*(unsigned int (**)(void *, void **))(*(_QWORD *)v39[0] + 24))(v39[0], __p))
    *(_DWORD *)(a2 + 120) = (*(uint64_t (**)(void *, void **))(*(_QWORD *)v39[0] + 40))(v39[0], __p);
  if (v41 < 0)
    operator delete(__p[0]);
  v20 = (std::__shared_weak_count *)v39[1];
  if (v39[1])
  {
    v21 = (unint64_t *)((char *)v39[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v37, "input_args_idx");
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 136))(v39, a1, v37);
  v23 = *(void **)(a2 + 24);
  if (v23)
  {
    *(_QWORD *)(a2 + 32) = v23;
    operator delete(v23);
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  *(_OWORD *)(a2 + 24) = *(_OWORD *)v39;
  *(void **)(a2 + 40) = __p[0];
  v39[1] = 0;
  __p[0] = 0;
  v39[0] = 0;
  if (v38 < 0)
    operator delete(v37[0]);
  std::string::basic_string[abi:ne180100]<0>(v39, "top_nd_shapes");
  v24 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 24))(a1, v39);
  v25 = v24;
  if (SHIBYTE(__p[0]) < 0)
  {
    operator delete(v39[0]);
    if (!v25)
      return;
  }
  else if (!v24)
  {
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "top_nd_shapes");
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)a1 + 136))(v39, a1, v37);
  v36 = *(void **)(a2 + 96);
  if (v36)
  {
    *(_QWORD *)(a2 + 104) = v36;
    operator delete(v36);
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
  }
  *(_OWORD *)(a2 + 96) = *(_OWORD *)v39;
  *(void **)(a2 + 112) = __p[0];
  v39[1] = 0;
  __p[0] = 0;
  v39[0] = 0;
  if (v38 < 0)
  {
    v35 = v37[0];
    goto LABEL_101;
  }
}

void sub_19187928C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1918793C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918796CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::allocator<Espresso::loopkit_params_t>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_191879804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918799EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::argsort_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v13 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "ascending");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
      *(_BYTE *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 88))(v19, __p);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v16 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v16);
    while (__stlxr(v12 - 1, v16));
    goto LABEL_36;
  }
  std::string::basic_string[abi:ne180100]<0>(v17, "axis");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 160))(v19, __p, a2);
  if (v22 < 0)
    operator delete(__p[0]);
  v5 = v20;
  if (v20)
  {
    v6 = (unint64_t *)&v20->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v18 < 0)
    operator delete(v17[0]);
  v9 = *(unsigned __int8 *)(a2 + 4);
  v8 = a2 + 4;
  if (!v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "ascending");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 208))(v19, __p, v8);
    if (v22 < 0)
      operator delete(__p[0]);
    v10 = v20;
    if (!v20)
      goto LABEL_38;
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_36:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
LABEL_38:
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_191879CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191879DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191879F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19187A008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::pool3d_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  _WORD *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *p_shared_owners;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t *v118;
  void *v119[2];
  char v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *__p[2];
  char v124;

  v5 = (_WORD *)(a2 + 36);
  v6 = *(unsigned __int16 *)(a2 + 36);
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v119, "pooling_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v64 = v122;
    if (v122)
    {
      p_shared_owners = (unint64_t *)&v122->__shared_owners_;
      do
        v66 = __ldaxr(p_shared_owners);
      while (__stlxr(v66 - 1, p_shared_owners));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v67 = v122;
    if (v122)
    {
      v68 = (unint64_t *)&v122->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v70 = v122;
    if (v122)
    {
      v71 = (unint64_t *)&v122->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "stride_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v73 = v122;
    if (v122)
    {
      v74 = (unint64_t *)&v122->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "size_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 4) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v76 = v122;
    if (v122)
    {
      v77 = (unint64_t *)&v122->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "size_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v79 = v122;
    if (v122)
    {
      v80 = (unint64_t *)&v122->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "size_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v82 = v122;
    if (v122)
    {
      v83 = (unint64_t *)&v122->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "average_count_exclude_padding");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v85 = v122;
    if (v122)
    {
      v86 = (unint64_t *)&v122->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "top_shape_style");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v88 = v122;
    if (v122)
    {
      v89 = (unint64_t *)&v122->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "is_global");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_DWORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 40))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v91 = v122;
    if (v122)
    {
      v92 = (unint64_t *)&v122->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_WORD *)(a2 + 44) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v94 = v122;
    if (v122)
    {
      v95 = (unint64_t *)&v122->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_WORD *)(a2 + 46) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v97 = v122;
    if (v122)
    {
      v98 = (unint64_t *)&v122->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_WORD *)(a2 + 48) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v100 = v122;
    if (v122)
    {
      v101 = (unint64_t *)&v122->__shared_owners_;
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_WORD *)(a2 + 50) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v103 = v122;
    if (v122)
    {
      v104 = (unint64_t *)&v122->__shared_owners_;
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_front");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_WORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v106 = v122;
    if (v122)
    {
      v107 = (unint64_t *)&v122->__shared_owners_;
      do
        v108 = __ldaxr(v107);
      while (__stlxr(v108 - 1, v107));
      if (!v108)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_back");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_WORD *)(a2 + 54) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v109 = v122;
    if (v122)
    {
      v110 = (unint64_t *)&v122->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(float *)(a2 + 40) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v121 + 96))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v112 = v122;
    if (v122)
    {
      v113 = (unint64_t *)&v122->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v115 = v122;
    if (v122)
    {
      v116 = (unint64_t *)&v122->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_fill_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v121 + 24))(v121, __p))
      *(_WORD *)(a2 + 38) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v121 + 56))(v121, __p);
    if (v124 < 0)
      operator delete(__p[0]);
    v61 = v122;
    if (!v122)
      goto LABEL_379;
    v118 = (unint64_t *)&v122->__shared_owners_;
    do
      v63 = __ldaxr(v118);
    while (__stlxr(v63 - 1, v118));
    goto LABEL_377;
  }
  std::string::basic_string[abi:ne180100]<0>(v119, "pooling_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2);
  if (v124 < 0)
    operator delete(__p[0]);
  v7 = v122;
  if (v122)
  {
    v8 = (unint64_t *)&v122->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "stride_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 16);
  if (v124 < 0)
    operator delete(__p[0]);
  v10 = v122;
  if (v122)
  {
    v11 = (unint64_t *)&v122->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "stride_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 20);
  if (v124 < 0)
    operator delete(__p[0]);
  v13 = v122;
  if (v122)
  {
    v14 = (unint64_t *)&v122->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "stride_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 24);
  if (v124 < 0)
    operator delete(__p[0]);
  v16 = v122;
  if (v122)
  {
    v17 = (unint64_t *)&v122->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "size_x");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 4);
  if (v124 < 0)
    operator delete(__p[0]);
  v19 = v122;
  if (v122)
  {
    v20 = (unint64_t *)&v122->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "size_y");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 8);
  if (v124 < 0)
    operator delete(__p[0]);
  v22 = v122;
  if (v122)
  {
    v23 = (unint64_t *)&v122->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "size_t");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 12);
  if (v124 < 0)
    operator delete(__p[0]);
  v25 = v122;
  if (v122)
  {
    v26 = (unint64_t *)&v122->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "average_count_exclude_padding");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 28);
  if (v124 < 0)
    operator delete(__p[0]);
  v28 = v122;
  if (v122)
  {
    v29 = (unint64_t *)&v122->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  std::string::basic_string[abi:ne180100]<0>(v119, "top_shape_style");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 32);
  if (v124 < 0)
    operator delete(__p[0]);
  v31 = v122;
  if (v122)
  {
    v32 = (unint64_t *)&v122->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v120 < 0)
    operator delete(v119[0]);
  if (*(_DWORD *)(a2 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(v119, "is_global");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 160))(v121, __p, a2 + 56);
    if (v124 < 0)
      operator delete(__p[0]);
    v34 = v122;
    if (v122)
    {
      v35 = (unint64_t *)&v122->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
  }
  if (v6 != 0xFFFF)
  {
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 176))(v121, __p, a2 + 44);
    if (v124 < 0)
      operator delete(__p[0]);
    v37 = v122;
    if (v122)
    {
      v38 = (unint64_t *)&v122->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 176))(v121, __p, a2 + 46);
    if (v124 < 0)
      operator delete(__p[0]);
    v40 = v122;
    if (v122)
    {
      v41 = (unint64_t *)&v122->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 176))(v121, __p, a2 + 48);
    if (v124 < 0)
      operator delete(__p[0]);
    v43 = v122;
    if (v122)
    {
      v44 = (unint64_t *)&v122->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 176))(v121, __p, a2 + 50);
    if (v124 < 0)
      operator delete(__p[0]);
    v46 = v122;
    if (v122)
    {
      v47 = (unint64_t *)&v122->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_front");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 176))(v121, __p, a2 + 52);
    if (v124 < 0)
      operator delete(__p[0]);
    v49 = v122;
    if (v122)
    {
      v50 = (unint64_t *)&v122->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_back");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 176))(v121, __p, a2 + 54);
    if (v124 < 0)
      operator delete(__p[0]);
    v52 = v122;
    if (v122)
    {
      v53 = (unint64_t *)&v122->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 216))(v121, __p, a2 + 40);
    if (v124 < 0)
      operator delete(__p[0]);
    v55 = v122;
    if (v122)
    {
      v56 = (unint64_t *)&v122->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, _WORD *))(*(_QWORD *)v121 + 176))(v121, __p, v5);
    if (v124 < 0)
      operator delete(__p[0]);
    v58 = v122;
    if (v122)
    {
      v59 = (unint64_t *)&v122->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v120 < 0)
      operator delete(v119[0]);
    std::string::basic_string[abi:ne180100]<0>(v119, "pad_fill_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v119, &v121);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v121 + 176))(v121, __p, a2 + 38);
    if (v124 < 0)
      operator delete(__p[0]);
    v61 = v122;
    if (!v122)
      goto LABEL_379;
    v62 = (unint64_t *)&v122->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
LABEL_377:
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
LABEL_379:
    if (v120 < 0)
      operator delete(v119[0]);
  }
}

void sub_19187BA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19187BC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187BE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19187BF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::conv3d_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  _WORD *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  int v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *p_shared_owners;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  unint64_t *v174;
  void *v175[2];
  char v176;
  uint64_t v177;
  std::__shared_weak_count *v178;
  void *__p[2];
  char v180;

  v5 = (_WORD *)(a2 + 44);
  v6 = *(unsigned __int16 *)(a2 + 44);
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "C");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 8) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v93 = v178;
    if (v178)
    {
      p_shared_owners = (unint64_t *)&v178->__shared_owners_;
      do
        v95 = __ldaxr(p_shared_owners);
      while (__stlxr(v95 - 1, p_shared_owners));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "K");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v96 = v178;
    if (v178)
    {
      v97 = (unint64_t *)&v178->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "Nx");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v99 = v178;
    if (v178)
    {
      v100 = (unint64_t *)&v178->__shared_owners_;
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "Ny");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 20) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v102 = v178;
    if (v178)
    {
      v103 = (unint64_t *)&v178->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "Nt");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 24) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v105 = v178;
    if (v178)
    {
      v106 = (unint64_t *)&v178->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "has_biases");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v108 = v178;
    if (v178)
    {
      v109 = (unint64_t *)&v178->__shared_owners_;
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 - 1, v109));
      if (!v110)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "has_8bit_weights");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 76) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v111 = v178;
    if (v178)
    {
      v112 = (unint64_t *)&v178->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "n_groups");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 80) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v114 = v178;
    if (v178)
    {
      v115 = (unint64_t *)&v178->__shared_owners_;
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
        std::__shared_weak_count::__release_weak(v114);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 64) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v117 = v178;
    if (v178)
    {
      v118 = (unint64_t *)&v178->__shared_owners_;
      do
        v119 = __ldaxr(v118);
      while (__stlxr(v119 - 1, v118));
      if (!v119)
      {
        ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
        std::__shared_weak_count::__release_weak(v117);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 66) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v120 = v178;
    if (v178)
    {
      v121 = (unint64_t *)&v178->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "stride_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 68) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v123 = v178;
    if (v178)
    {
      v124 = (unint64_t *)&v178->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 52) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v126 = v178;
    if (v178)
    {
      v127 = (unint64_t *)&v178->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 54) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v129 = v178;
    if (v178)
    {
      v130 = (unint64_t *)&v178->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 56) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v132 = v178;
    if (v178)
    {
      v133 = (unint64_t *)&v178->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 58) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v135 = v178;
    if (v178)
    {
      v136 = (unint64_t *)&v178->__shared_owners_;
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_front");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 60) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v138 = v178;
    if (v178)
    {
      v139 = (unint64_t *)&v178->__shared_owners_;
      do
        v140 = __ldaxr(v139);
      while (__stlxr(v140 - 1, v139));
      if (!v140)
      {
        ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
        std::__shared_weak_count::__release_weak(v138);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_back");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 62) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v141 = v178;
    if (v178)
    {
      v142 = (unint64_t *)&v178->__shared_owners_;
      do
        v143 = __ldaxr(v142);
      while (__stlxr(v143 - 1, v142));
      if (!v143)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(float *)(a2 + 48) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v177 + 96))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v144 = v178;
    if (v178)
    {
      v145 = (unint64_t *)&v178->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (!v146)
      {
        ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
        std::__shared_weak_count::__release_weak(v144);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *v5 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v147 = v178;
    if (v178)
    {
      v148 = (unint64_t *)&v178->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_fill_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 46) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v150 = v178;
    if (v178)
    {
      v151 = (unint64_t *)&v178->__shared_owners_;
      do
        v152 = __ldaxr(v151);
      while (__stlxr(v152 - 1, v151));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
        std::__shared_weak_count::__release_weak(v150);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "leaky_relu_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v177 + 96))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v153 = v178;
    if (v178)
    {
      v154 = (unint64_t *)&v178->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "deconv_out_width");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 84) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v156 = v178;
    if (v178)
    {
      v157 = (unint64_t *)&v178->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "deconv_out_height");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 88) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v159 = v178;
    if (v178)
    {
      v160 = (unint64_t *)&v178->__shared_owners_;
      do
        v161 = __ldaxr(v160);
      while (__stlxr(v161 - 1, v160));
      if (!v161)
      {
        ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
        std::__shared_weak_count::__release_weak(v159);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "deconv_out_depth");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 92) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v162 = v178;
    if (v178)
    {
      v163 = (unint64_t *)&v178->__shared_owners_;
      do
        v164 = __ldaxr(v163);
      while (__stlxr(v164 - 1, v163));
      if (!v164)
      {
        ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
        std::__shared_weak_count::__release_weak(v162);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "dilation_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 70) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v165 = v178;
    if (v178)
    {
      v166 = (unint64_t *)&v178->__shared_owners_;
      do
        v167 = __ldaxr(v166);
      while (__stlxr(v167 - 1, v166));
      if (!v167)
      {
        ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
        std::__shared_weak_count::__release_weak(v165);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "dilation_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 72) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v168 = v178;
    if (v178)
    {
      v169 = (unint64_t *)&v178->__shared_owners_;
      do
        v170 = __ldaxr(v169);
      while (__stlxr(v170 - 1, v169));
      if (!v170)
      {
        ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
        std::__shared_weak_count::__release_weak(v168);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "dilation_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_WORD *)(a2 + 74) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 56))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v171 = v178;
    if (v178)
    {
      v172 = (unint64_t *)&v178->__shared_owners_;
      do
        v173 = __ldaxr(v172);
      while (__stlxr(v173 - 1, v172));
      if (!v173)
      {
        ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
        std::__shared_weak_count::__release_weak(v171);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "low_precision_accumulation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v177 + 24))(v177, __p))
      *(_DWORD *)(a2 + 96) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v177 + 40))(v177, __p);
    if (v180 < 0)
      operator delete(__p[0]);
    v90 = v178;
    if (!v178)
      goto LABEL_570;
    v174 = (unint64_t *)&v178->__shared_owners_;
    do
      v92 = __ldaxr(v174);
    while (__stlxr(v92 - 1, v174));
    goto LABEL_568;
  }
  std::string::basic_string[abi:ne180100]<0>(v175, "C");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 8);
  if (v180 < 0)
    operator delete(__p[0]);
  v7 = v178;
  if (v178)
  {
    v8 = (unint64_t *)&v178->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v176 < 0)
    operator delete(v175[0]);
  std::string::basic_string[abi:ne180100]<0>(v175, "K");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 12);
  if (v180 < 0)
    operator delete(__p[0]);
  v10 = v178;
  if (v178)
  {
    v11 = (unint64_t *)&v178->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v176 < 0)
    operator delete(v175[0]);
  std::string::basic_string[abi:ne180100]<0>(v175, "Nx");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 16);
  if (v180 < 0)
    operator delete(__p[0]);
  v13 = v178;
  if (v178)
  {
    v14 = (unint64_t *)&v178->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v176 < 0)
    operator delete(v175[0]);
  std::string::basic_string[abi:ne180100]<0>(v175, "Ny");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 20);
  if (v180 < 0)
    operator delete(__p[0]);
  v16 = v178;
  if (v178)
  {
    v17 = (unint64_t *)&v178->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v176 < 0)
    operator delete(v175[0]);
  std::string::basic_string[abi:ne180100]<0>(v175, "Nt");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 24);
  if (v180 < 0)
    operator delete(__p[0]);
  v19 = v178;
  if (v178)
  {
    v20 = (unint64_t *)&v178->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v176 < 0)
    operator delete(v175[0]);
  std::string::basic_string[abi:ne180100]<0>(v175, "has_biases");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2);
  if (v180 < 0)
    operator delete(__p[0]);
  v22 = v178;
  if (v178)
  {
    v23 = (unint64_t *)&v178->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v176 < 0)
    operator delete(v175[0]);
  if (*(_DWORD *)(a2 + 76))
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "has_8bit_weights");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 76);
    if (v180 < 0)
      operator delete(__p[0]);
    v25 = v178;
    if (v178)
    {
      v26 = (unint64_t *)&v178->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v175, "n_groups");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 80);
  if (v180 < 0)
    operator delete(__p[0]);
  v28 = v178;
  if (v178)
  {
    v29 = (unint64_t *)&v178->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v176 < 0)
    operator delete(v175[0]);
  if (*(_WORD *)(a2 + 64) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "stride_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 64);
    if (v180 < 0)
      operator delete(__p[0]);
    v31 = v178;
    if (v178)
    {
      v32 = (unint64_t *)&v178->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(_WORD *)(a2 + 66) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "stride_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 66);
    if (v180 < 0)
      operator delete(__p[0]);
    v34 = v178;
    if (v178)
    {
      v35 = (unint64_t *)&v178->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(_WORD *)(a2 + 68) != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "stride_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 68);
    if (v180 < 0)
      operator delete(__p[0]);
    v37 = v178;
    if (v178)
    {
      v38 = (unint64_t *)&v178->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (v6 != 0xFFFF)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_l");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 52);
    if (v180 < 0)
      operator delete(__p[0]);
    v40 = v178;
    if (v178)
    {
      v41 = (unint64_t *)&v178->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_r");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 54);
    if (v180 < 0)
      operator delete(__p[0]);
    v43 = v178;
    if (v178)
    {
      v44 = (unint64_t *)&v178->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 56);
    if (v180 < 0)
      operator delete(__p[0]);
    v46 = v178;
    if (v178)
    {
      v47 = (unint64_t *)&v178->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_b");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 58);
    if (v180 < 0)
      operator delete(__p[0]);
    v49 = v178;
    if (v178)
    {
      v50 = (unint64_t *)&v178->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_front");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 60);
    if (v180 < 0)
      operator delete(__p[0]);
    v52 = v178;
    if (v178)
    {
      v53 = (unint64_t *)&v178->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_back");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 62);
    if (v180 < 0)
      operator delete(__p[0]);
    v55 = v178;
    if (v178)
    {
      v56 = (unint64_t *)&v178->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_value");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 216))(v177, __p, a2 + 48);
    if (v180 < 0)
      operator delete(__p[0]);
    v58 = v178;
    if (v178)
    {
      v59 = (unint64_t *)&v178->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, _WORD *))(*(_QWORD *)v177 + 176))(v177, __p, v5);
    if (v180 < 0)
      operator delete(__p[0]);
    v61 = v178;
    if (v178)
    {
      v62 = (unint64_t *)&v178->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
    std::string::basic_string[abi:ne180100]<0>(v175, "pad_fill_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 46);
    if (v180 < 0)
      operator delete(__p[0]);
    v64 = v178;
    if (v178)
    {
      v65 = (unint64_t *)&v178->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(_DWORD *)(a2 + 28) == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "leaky_relu_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 216))(v177, __p, a2 + 4);
    if (v180 < 0)
      operator delete(__p[0]);
    v67 = v178;
    if (v178)
    {
      v68 = (unint64_t *)&v178->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(_DWORD *)(a2 + 84))
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "deconv_out_width");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 84);
    if (v180 < 0)
      operator delete(__p[0]);
    v70 = v178;
    if (v178)
    {
      v71 = (unint64_t *)&v178->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(_DWORD *)(a2 + 88))
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "deconv_out_height");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 88);
    if (v180 < 0)
      operator delete(__p[0]);
    v73 = v178;
    if (v178)
    {
      v74 = (unint64_t *)&v178->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(_DWORD *)(a2 + 92))
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "deconv_out_depth");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, a2 + 92);
    if (v180 < 0)
      operator delete(__p[0]);
    v76 = v178;
    if (v178)
    {
      v77 = (unint64_t *)&v178->__shared_owners_;
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (!v78)
      {
        ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
        std::__shared_weak_count::__release_weak(v76);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(__int16 *)(a2 + 70) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "dilation_x");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 70);
    if (v180 < 0)
      operator delete(__p[0]);
    v79 = v178;
    if (v178)
    {
      v80 = (unint64_t *)&v178->__shared_owners_;
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
      if (!v81)
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(__int16 *)(a2 + 72) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "dilation_y");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 72);
    if (v180 < 0)
      operator delete(__p[0]);
    v82 = v178;
    if (v178)
    {
      v83 = (unint64_t *)&v178->__shared_owners_;
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  if (*(__int16 *)(a2 + 74) >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "dilation_t");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 176))(v177, __p, a2 + 74);
    if (v180 < 0)
      operator delete(__p[0]);
    v85 = v178;
    if (v178)
    {
      v86 = (unint64_t *)&v178->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    if (v176 < 0)
      operator delete(v175[0]);
  }
  v89 = *(_DWORD *)(a2 + 96);
  v88 = a2 + 96;
  if (v89)
  {
    std::string::basic_string[abi:ne180100]<0>(v175, "low_precision_accumulation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v175, &v177);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v177 + 160))(v177, __p, v88);
    if (v180 < 0)
      operator delete(__p[0]);
    v90 = v178;
    if (!v178)
      goto LABEL_570;
    v91 = (unint64_t *)&v178->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
LABEL_568:
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
LABEL_570:
    if (v176 < 0)
      operator delete(v175[0]);
  }
}

void sub_19187E5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19187E840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187EAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19187EBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187EDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::slice_update_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  _DWORD *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  char v17;

  Espresso::SerDes::params_io<Espresso::slice_params_t>(a1, a2, a3);
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "operation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v14 + 24))(v14, __p))
      a2[6] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 40))(v14, __p);
    if (v17 < 0)
      operator delete(__p[0]);
    v8 = v15;
    if (!v15)
      goto LABEL_18;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    goto LABEL_16;
  }
  v7 = a2[6];
  v6 = a2 + 6;
  if (!v7)
    return;
  std::string::basic_string[abi:ne180100]<0>(v12, "operation");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v14 + 160))(v14, __p, v6);
  if (v17 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
LABEL_16:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_18:
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_19187EF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19187F02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187F24C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19187F310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187F50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::static_quantize_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  void *v23[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;

  if (!a3 || *(_DWORD *)a2 == -1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "dst_cp");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v25 + 40))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v16 = v26;
      if (v26)
      {
        p_shared_owners = (unint64_t *)&v26->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::string::basic_string[abi:ne180100]<0>(v23, "scale");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v19 = v26;
      if (v26)
      {
        v20 = (unint64_t *)&v26->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (v24 < 0)
        operator delete(v23[0]);
      std::string::basic_string[abi:ne180100]<0>(v23, "bias");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v25 + 24))(v25, __p))
        *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v25 + 96))(v25, __p);
      if (v28 < 0)
        operator delete(__p[0]);
      v13 = v26;
      if (!v26)
        goto LABEL_61;
      v22 = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(v22);
      while (__stlxr(v15 - 1, v22));
      goto LABEL_59;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "dst_cp");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 160))(v25, __p, a2);
    if (v28 < 0)
      operator delete(__p[0]);
    v5 = v26;
    if (v26)
    {
      v6 = (unint64_t *)&v26->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  if (*(float *)(a2 + 4) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 216))(v25, __p, a2 + 4);
    if (v28 < 0)
      operator delete(__p[0]);
    v8 = v26;
    if (v26)
    {
      v9 = (unint64_t *)&v26->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v12 = *(float *)(a2 + 8);
  v11 = a2 + 8;
  if (v12 != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v23, &v25);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v25 + 216))(v25, __p, v11);
    if (v28 < 0)
      operator delete(__p[0]);
    v13 = v26;
    if (!v26)
      goto LABEL_61;
    v14 = (unint64_t *)&v26->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
LABEL_59:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
LABEL_61:
    if (v24 < 0)
      operator delete(v23[0]);
  }
}

void sub_19187F94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19187FA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187FC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19187FD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19187FEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::static_dequantize_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  char v58;

  if (!a3 || *(_DWORD *)a2 == -1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v53, "dst_cp");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v31 = v56;
      if (v56)
      {
        p_shared_owners = (unint64_t *)&v56->__shared_owners_;
        do
          v33 = __ldaxr(p_shared_owners);
        while (__stlxr(v33 - 1, p_shared_owners));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      if (v54 < 0)
        operator delete(v53[0]);
      std::string::basic_string[abi:ne180100]<0>(v53, "has_relu");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(_DWORD *)(a2 + 12) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v34 = v56;
      if (v56)
      {
        v35 = (unint64_t *)&v56->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      if (v54 < 0)
        operator delete(v53[0]);
      std::string::basic_string[abi:ne180100]<0>(v53, "has_tanh");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(_DWORD *)(a2 + 16) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v37 = v56;
      if (v56)
      {
        v38 = (unint64_t *)&v56->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      if (v54 < 0)
        operator delete(v53[0]);
      std::string::basic_string[abi:ne180100]<0>(v53, "has_prelu");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(_DWORD *)(a2 + 28) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v55 + 40))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v40 = v56;
      if (v56)
      {
        v41 = (unint64_t *)&v56->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (v54 < 0)
        operator delete(v53[0]);
      std::string::basic_string[abi:ne180100]<0>(v53, "tanh_alpha");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(float *)(a2 + 20) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v55 + 96))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v43 = v56;
      if (v56)
      {
        v44 = (unint64_t *)&v56->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (v54 < 0)
        operator delete(v53[0]);
      std::string::basic_string[abi:ne180100]<0>(v53, "tanh_beta");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(float *)(a2 + 24) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v55 + 96))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v46 = v56;
      if (v56)
      {
        v47 = (unint64_t *)&v56->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v54 < 0)
        operator delete(v53[0]);
      std::string::basic_string[abi:ne180100]<0>(v53, "scale");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(float *)(a2 + 4) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v55 + 96))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v49 = v56;
      if (v56)
      {
        v50 = (unint64_t *)&v56->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      if (v54 < 0)
        operator delete(v53[0]);
      std::string::basic_string[abi:ne180100]<0>(v53, "bias");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
        *(float *)(a2 + 8) = (*(float (**)(uint64_t, void **))(*(_QWORD *)v55 + 96))(v55, __p);
      if (v58 < 0)
        operator delete(__p[0]);
      v28 = v56;
      if (!v56)
        goto LABEL_166;
      v52 = (unint64_t *)&v56->__shared_owners_;
      do
        v30 = __ldaxr(v52);
      while (__stlxr(v30 - 1, v52));
      goto LABEL_164;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "dst_cp");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2);
    if (v58 < 0)
      operator delete(__p[0]);
    v5 = v56;
    if (v56)
    {
      v6 = (unint64_t *)&v56->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_DWORD *)(a2 + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "has_relu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 12);
    if (v58 < 0)
      operator delete(__p[0]);
    v8 = v56;
    if (v56)
    {
      v9 = (unint64_t *)&v56->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "has_tanh");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 16);
    if (v58 < 0)
      operator delete(__p[0]);
    v11 = v56;
    if (v56)
    {
      v12 = (unint64_t *)&v56->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_DWORD *)(a2 + 28))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "has_prelu");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 160))(v55, __p, a2 + 28);
    if (v58 < 0)
      operator delete(__p[0]);
    v14 = v56;
    if (v56)
    {
      v15 = (unint64_t *)&v56->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(float *)(a2 + 20) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "tanh_alpha");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 216))(v55, __p, a2 + 20);
    if (v58 < 0)
      operator delete(__p[0]);
    v17 = v56;
    if (v56)
    {
      v18 = (unint64_t *)&v56->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(float *)(a2 + 24) != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "tanh_beta");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 216))(v55, __p, a2 + 24);
    if (v58 < 0)
      operator delete(__p[0]);
    v20 = v56;
    if (v56)
    {
      v21 = (unint64_t *)&v56->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(float *)(a2 + 4) != 1.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "scale");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 216))(v55, __p, a2 + 4);
    if (v58 < 0)
      operator delete(__p[0]);
    v23 = v56;
    if (v56)
    {
      v24 = (unint64_t *)&v56->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  v27 = *(float *)(a2 + 8);
  v26 = a2 + 8;
  if (v27 != 0.0)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "bias");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v55 + 216))(v55, __p, v26);
    if (v58 < 0)
      operator delete(__p[0]);
    v28 = v56;
    if (!v56)
      goto LABEL_166;
    v29 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_164:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_166:
    if (v54 < 0)
      operator delete(v53[0]);
  }
}

void sub_1918809D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191880B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191880D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191880DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191880FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::fused_convolution_grad_params_t>(uint64_t a1, _BYTE *a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _BYTE *v15;
  int v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  void *__p[2];
  char v35;

  Espresso::SerDes::params_io<Espresso::convolution_uniforms>(a1, (uint64_t)a2, a3);
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "has_data_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v32 + 24))(v32, __p))
      a2[168] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v32 + 88))(v32, __p);
    if (v35 < 0)
      operator delete(__p[0]);
    v20 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v31 < 0)
      operator delete(v30[0]);
    std::string::basic_string[abi:ne180100]<0>(v30, "has_weights_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v32 + 24))(v32, __p))
      a2[169] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v32 + 88))(v32, __p);
    if (v35 < 0)
      operator delete(__p[0]);
    v23 = v33;
    if (v33)
    {
      v24 = (unint64_t *)&v33->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v31 < 0)
      operator delete(v30[0]);
    std::string::basic_string[abi:ne180100]<0>(v30, "has_bias_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v32 + 24))(v32, __p))
      a2[170] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v32 + 88))(v32, __p);
    if (v35 < 0)
      operator delete(__p[0]);
    v26 = v33;
    if (v33)
    {
      v27 = (unint64_t *)&v33->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v31 < 0)
      operator delete(v30[0]);
    std::string::basic_string[abi:ne180100]<0>(v30, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v32 + 24))(v32, __p))
      a2[171] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v32 + 88))(v32, __p);
    if (v35 < 0)
      operator delete(__p[0]);
    v17 = v33;
    if (!v33)
      goto LABEL_81;
    v29 = (unint64_t *)&v33->__shared_owners_;
    do
      v19 = __ldaxr(v29);
    while (__stlxr(v19 - 1, v29));
    goto LABEL_79;
  }
  if (!a2[168])
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "has_data_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v32 + 208))(v32, __p, a2 + 168);
    if (v35 < 0)
      operator delete(__p[0]);
    v6 = v33;
    if (v33)
    {
      v7 = (unint64_t *)&v33->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v31 < 0)
      operator delete(v30[0]);
  }
  if (!a2[169])
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "has_weights_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v32 + 208))(v32, __p, a2 + 169);
    if (v35 < 0)
      operator delete(__p[0]);
    v9 = v33;
    if (v33)
    {
      v10 = (unint64_t *)&v33->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v31 < 0)
      operator delete(v30[0]);
  }
  if (!a2[170])
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "has_bias_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v32 + 208))(v32, __p, a2 + 170);
    if (v35 < 0)
      operator delete(__p[0]);
    v12 = v33;
    if (v33)
    {
      v13 = (unint64_t *)&v33->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v31 < 0)
      operator delete(v30[0]);
  }
  v16 = a2[171];
  v15 = a2 + 171;
  if (v16)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "nd_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v30, &v32);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v32 + 208))(v32, __p, v15);
    if (v35 < 0)
      operator delete(__p[0]);
    v17 = v33;
    if (!v33)
      goto LABEL_81;
    v18 = (unint64_t *)&v33->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_79:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_81:
    if (v31 < 0)
      operator delete(v30[0]);
  }
}

void sub_191881534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19188164C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918818B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void sub_191881978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191881B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::fused_inner_product_grad_params_t>(uint64_t a1, _BYTE *a2, int a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  void *v24[2];
  char v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;

  Espresso::SerDes::params_io<Espresso::inner_product_uniforms>(a1, (uint64_t)a2, a3);
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "has_data_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v24, &v26);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v26 + 24))(v26, __p))
      a2[132] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v26 + 88))(v26, __p);
    if (v29 < 0)
      operator delete(__p[0]);
    v17 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v25 < 0)
      operator delete(v24[0]);
    std::string::basic_string[abi:ne180100]<0>(v24, "has_weights_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v24, &v26);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v26 + 24))(v26, __p))
      a2[133] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v26 + 88))(v26, __p);
    if (v29 < 0)
      operator delete(__p[0]);
    v20 = v27;
    if (v27)
    {
      v21 = (unint64_t *)&v27->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v25 < 0)
      operator delete(v24[0]);
    std::string::basic_string[abi:ne180100]<0>(v24, "has_bias_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v24, &v26);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v26 + 24))(v26, __p))
      a2[134] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v26 + 88))(v26, __p);
    if (v29 < 0)
      operator delete(__p[0]);
    v14 = v27;
    if (!v27)
      goto LABEL_60;
    v23 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v23);
    while (__stlxr(v16 - 1, v23));
    goto LABEL_58;
  }
  if (!a2[132])
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "has_data_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v24, &v26);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v26 + 208))(v26, __p, a2 + 132);
    if (v29 < 0)
      operator delete(__p[0]);
    v6 = v27;
    if (v27)
    {
      v7 = (unint64_t *)&v27->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v25 < 0)
      operator delete(v24[0]);
  }
  if (!a2[133])
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "has_weights_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v24, &v26);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v26 + 208))(v26, __p, a2 + 133);
    if (v29 < 0)
      operator delete(__p[0]);
    v9 = v27;
    if (v27)
    {
      v10 = (unint64_t *)&v27->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v25 < 0)
      operator delete(v24[0]);
  }
  v13 = a2[134];
  v12 = a2 + 134;
  if (!v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "has_bias_grad");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v24, &v26);
    (*(void (**)(uint64_t, void **, _BYTE *))(*(_QWORD *)v26 + 208))(v26, __p, v12);
    if (v29 < 0)
      operator delete(__p[0]);
    v14 = v27;
    if (!v27)
      goto LABEL_60;
    v15 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
LABEL_58:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_60:
    if (v25 < 0)
      operator delete(v24[0]);
  }
}

void sub_191881FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1918820B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191882368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188242C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191882620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::general_slice_update_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  void *v12[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *__p[2];
  char v17;

  Espresso::SerDes::params_io<Espresso::general_slice_params_t>(a1, a2, a3);
  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v12, "operation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v14 + 24))(v14, __p))
      *(_DWORD *)(a2 + 100) = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 40))(v14, __p);
    if (v17 < 0)
      operator delete(__p[0]);
    v8 = v15;
    if (!v15)
      goto LABEL_18;
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    goto LABEL_16;
  }
  v7 = *(_DWORD *)(a2 + 100);
  v6 = a2 + 100;
  if (!v7)
    return;
  std::string::basic_string[abi:ne180100]<0>(v12, "operation");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v12, &v14);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v14 + 160))(v14, __p, v6);
  if (v17 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
LABEL_16:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_18:
  if (v13 < 0)
    operator delete(v12[0]);
}

void sub_1918827B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19188289C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191882B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191882BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191882DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::resize_nearest_neighbor_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27[2];
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  char v32;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "target_size_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 1);
    if (v32 < 0)
      operator delete(__p[0]);
    v5 = v30;
    if (v30)
    {
      p_shared_owners = (unint64_t *)&v30->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "target_size_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 2);
    if (v32 < 0)
      operator delete(__p[0]);
    v8 = v30;
    if (v30)
    {
      v9 = (unint64_t *)&v30->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2);
    if (v32 < 0)
      operator delete(__p[0]);
    v11 = v30;
    if (v30)
    {
      v12 = (unint64_t *)&v30->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "resized_dims");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v29 + 160))(v29, __p, a2 + 3);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v15 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_75;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "target_size_w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v17 = v30;
    if (v30)
    {
      v18 = (unint64_t *)&v30->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "target_size_h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v20 = v30;
    if (v30)
    {
      v21 = (unint64_t *)&v30->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v23 = v30;
    if (v30)
    {
      v24 = (unint64_t *)&v30->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v28 < 0)
      operator delete(v27[0]);
    std::string::basic_string[abi:ne180100]<0>(v27, "resized_dims");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v27, &v29);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v29 + 24))(v29, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v29 + 40))(v29, __p);
    if (v32 < 0)
      operator delete(__p[0]);
    v14 = v30;
    if (v30)
    {
      v26 = (unint64_t *)&v30->__shared_owners_;
      do
        v16 = __ldaxr(v26);
      while (__stlxr(v16 - 1, v26));
LABEL_75:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

void sub_19188331C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_191883434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918835B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188367C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191883864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::einsum_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "equation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v11 + 232))(v11, &__p, a2);
    if (v14 < 0)
      operator delete(__p);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_13;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "equation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v11, a2);
    if (v14 < 0)
      operator delete(__p);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_13:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1918839B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191883A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191883DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::allocator<Espresso::einsum_params_t>::destroy[abi:ne180100](uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(_QWORD *)(a1 + 80) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(_QWORD *)(a1 + 56) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(_QWORD *)(a1 + 32) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_191883F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918840F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::tensor_shape_t>(uint64_t a1, _DWORD *a2, int a3)
{
  int *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  _DWORD *v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  void *__p[2];
  char v53;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "rank");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v50 + 24))(v50, __p))
      a2[5] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v50 + 40))(v50, __p);
    if (v53 < 0)
      operator delete(__p[0]);
    v32 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    std::string::basic_string[abi:ne180100]<0>(v48, "w");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v50 + 24))(v50, __p))
      a2[4] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v50 + 40))(v50, __p);
    if (v53 < 0)
      operator delete(__p[0]);
    v35 = v51;
    if (v51)
    {
      v36 = (unint64_t *)&v51->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    std::string::basic_string[abi:ne180100]<0>(v48, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v50 + 24))(v50, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v50 + 40))(v50, __p);
    if (v53 < 0)
      operator delete(__p[0]);
    v38 = v51;
    if (v51)
    {
      v39 = (unint64_t *)&v51->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    std::string::basic_string[abi:ne180100]<0>(v48, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v50 + 24))(v50, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v50 + 40))(v50, __p);
    if (v53 < 0)
      operator delete(__p[0]);
    v41 = v51;
    if (v51)
    {
      v42 = (unint64_t *)&v51->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    std::string::basic_string[abi:ne180100]<0>(v48, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v50 + 24))(v50, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v50 + 40))(v50, __p);
    if (v53 < 0)
      operator delete(__p[0]);
    v44 = v51;
    if (v51)
    {
      v45 = (unint64_t *)&v51->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    std::string::basic_string[abi:ne180100]<0>(v48, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v50 + 24))(v50, __p))
      a2[3] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v50 + 40))(v50, __p);
    if (v53 < 0)
      operator delete(__p[0]);
    v29 = v51;
    if (!v51)
      goto LABEL_134;
    v47 = (unint64_t *)&v51->__shared_owners_;
    do
      v31 = __ldaxr(v47);
    while (__stlxr(v31 - 1, v47));
    goto LABEL_132;
  }
  std::string::basic_string[abi:ne180100]<0>(v48, "rank");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
  v5 = a2 + 5;
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v50 + 160))(v50, __p, a2 + 5);
  if (v53 < 0)
    operator delete(__p[0]);
  v6 = v51;
  if (v51)
  {
    v7 = (unint64_t *)&v51->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v49 < 0)
    operator delete(v48[0]);
  std::string::basic_string[abi:ne180100]<0>(v48, "w");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v50 + 160))(v50, __p, a2 + 4);
  if (v53 < 0)
    operator delete(__p[0]);
  v9 = v51;
  if (v51)
  {
    v10 = (unint64_t *)&v51->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v49 < 0)
    operator delete(v48[0]);
  v12 = a2[5];
  v13 = v12 - 1;
  if ((v12 - 1) > 3 || *a2 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "seq");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v50 + 160))(v50, __p, a2);
    if (v53 < 0)
      operator delete(__p[0]);
    v15 = v51;
    if (v51)
    {
      v16 = (unint64_t *)&v51->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    v12 = *v5;
    v13 = *v5 - 1;
  }
  if (v13 > 2 || a2[1] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "n");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v50 + 160))(v50, __p, a2 + 1);
    if (v53 < 0)
      operator delete(__p[0]);
    v19 = v51;
    if (v51)
    {
      v20 = (unint64_t *)&v51->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    v12 = *v5;
    v13 = *v5 - 1;
  }
  if (v13 > 1 || a2[2] != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "k");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v50 + 160))(v50, __p, a2 + 2);
    if (v53 < 0)
      operator delete(__p[0]);
    v23 = v51;
    if (v51)
    {
      v24 = (unint64_t *)&v51->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v49 < 0)
      operator delete(v48[0]);
    v12 = *v5;
  }
  v28 = a2[3];
  v27 = a2 + 3;
  v26 = v28;
  if (v12 != 1 || v26 != 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v48, "h");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v48, &v50);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v50 + 160))(v50, __p, v27);
    if (v53 < 0)
      operator delete(__p[0]);
    v29 = v51;
    if (!v51)
      goto LABEL_134;
    v30 = (unint64_t *)&v51->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
LABEL_132:
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
LABEL_134:
    if (v49 < 0)
      operator delete(v48[0]);
  }
}

void sub_191884934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191884A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191884C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191884D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191884F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::foreign_network_storage_blob_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __n128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __n128 v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32[2];
  char v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p[2];
  char v37;

  if (a3 && *(_DWORD *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "blob_storage_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v34 + 160))(v34, __p, a2);
    if (v37 < 0)
      operator delete(__p[0]);
    v5 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v33 < 0)
      operator delete(v32[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "blob_storage_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v34 + 24))(v34, __p))
      *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v34 + 40))(v34, __p);
    if (v37 < 0)
      operator delete(__p[0]);
    v20 = v35;
    if (v35)
    {
      v21 = (unint64_t *)&v35->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v33 < 0)
      operator delete(v32[0]);
    std::string::basic_string[abi:ne180100]<0>(v32, "file_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    v23.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v34, a2 + 8);
    if (v37 < 0)
      operator delete(__p[0]);
    v24 = v35;
    if (v35)
    {
      v25 = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v24->__on_zero_shared)(v24, v23);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v33 < 0)
      operator delete(v32[0]);
    std::string::basic_string[abi:ne180100]<0>(v32, "file_contents");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    v27.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v34, a2 + 32);
    if (v37 < 0)
      operator delete(__p[0]);
    v28 = v35;
    if (v35)
    {
      v29 = (unint64_t *)&v35->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v28->__on_zero_shared)(v28, v27);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v33 < 0)
      operator delete(v32[0]);
    std::string::basic_string[abi:ne180100]<0>(v32, "blob_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v34, a2 + 56);
    if (v37 < 0)
      operator delete(__p[0]);
    v17 = v35;
    if (!v35)
      goto LABEL_82;
    v31 = (unint64_t *)&v35->__shared_owners_;
    do
      v19 = __ldaxr(v31);
    while (__stlxr(v19 - 1, v31));
    goto LABEL_80;
  }
  v8 = *(unsigned __int8 *)(a2 + 31);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "file_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v34 + 232))(v34, __p, a2 + 8);
    if (v37 < 0)
      operator delete(__p[0]);
    v9 = v35;
    if (v35)
    {
      v10 = (unint64_t *)&v35->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if (v33 < 0)
      operator delete(v32[0]);
  }
  v12 = *(unsigned __int8 *)(a2 + 55);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a2 + 40);
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "file_contents");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v34 + 232))(v34, __p, a2 + 32);
    if (v37 < 0)
      operator delete(__p[0]);
    v13 = v35;
    if (v35)
    {
      v14 = (unint64_t *)&v35->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v33 < 0)
      operator delete(v32[0]);
  }
  v16 = *(unsigned __int8 *)(a2 + 79);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a2 + 64);
  if (v16)
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "blob_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v32, &v34);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v34 + 232))(v34, __p, a2 + 56);
    if (v37 < 0)
      operator delete(__p[0]);
    v17 = v35;
    if (!v35)
      goto LABEL_82;
    v18 = (unint64_t *)&v35->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
LABEL_80:
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_82:
    if (v33 < 0)
      operator delete(v32[0]);
  }
}

void sub_191885454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19188556C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191885874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::allocator<Espresso::foreign_network_storage_blob_t>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void sub_19188598C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191885B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::foreign_network_rep_blob_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  void *v15[2];
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "blob_format_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v17 + 160))(v17, __p, a2);
    if (v20 < 0)
      operator delete(__p[0]);
    v5 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
LABEL_13:
    std::string::basic_string[abi:ne180100]<0>(v15, "storage");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    Espresso::SerDes::operator<<(&v17, (uint64_t)(a2 + 2));
    if (v20 < 0)
      operator delete(__p[0]);
    v8 = v18;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_35;
    }
    goto LABEL_37;
  }
  if ((a3 & 1) != 0)
    goto LABEL_13;
  std::string::basic_string[abi:ne180100]<0>(v15, "blob_format_type");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v17 + 24))(v17, __p))
    *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v17 + 40))(v17, __p);
  if (v20 < 0)
    operator delete(__p[0]);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16 < 0)
    operator delete(v15[0]);
  std::string::basic_string[abi:ne180100]<0>(v15, "storage");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
  Espresso::SerDes::operator>>(&v17, (uint64_t)(a2 + 2));
  if (v20 < 0)
    operator delete(__p[0]);
  v8 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v10 = __ldaxr(v14);
    while (__stlxr(v10 - 1, v14));
LABEL_35:
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_37:
  if (v16 < 0)
    operator delete(v15[0]);
}

void sub_191885E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191885F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191886264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::allocator<Espresso::foreign_network_rep_blob_t>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
}

void sub_19188637C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191886578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::foreign_network_weight_file_t>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p;
  char v22;

  if (a3)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "target_file_path");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
      (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v19 + 232))(v19, &__p, a2);
      if (v22 < 0)
        operator delete(__p);
      v6 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v18 < 0)
        operator delete(v17[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v17, "storage");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    Espresso::SerDes::operator<<(&v19, a2 + 24);
    if (v22 < 0)
      operator delete(__p);
    v9 = v20;
    if (v20)
    {
      v10 = (unint64_t *)&v20->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_34;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "target_file_path");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    v12.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v19, a2);
    if (v22 < 0)
      operator delete(__p);
    v13 = v20;
    if (v20)
    {
      v14 = (unint64_t *)&v20->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v13->__on_zero_shared)(v13, v12);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
    std::string::basic_string[abi:ne180100]<0>(v17, "storage");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    Espresso::SerDes::operator>>(&v19, a2 + 24);
    if (v22 < 0)
      operator delete(__p);
    v9 = v20;
    if (v20)
    {
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v11 = __ldaxr(v16);
      while (__stlxr(v11 - 1, v16));
LABEL_34:
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_1918867F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1918868E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191886C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191886CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191886EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::tunneled_ane_op_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  void *v57[2];
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  void *__p[2];
  char v62;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "bottom_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::operator>>(&v59, (char **)a2);
    if (v62 < 0)
      operator delete(__p[0]);
    v32 = v60;
    if (v60)
    {
      p_shared_owners = (unint64_t *)&v60->__shared_owners_;
      do
        v34 = __ldaxr(p_shared_owners);
      while (__stlxr(v34 - 1, p_shared_owners));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "top_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::operator>>(&v59, (char **)(a2 + 24));
    if (v62 < 0)
      operator delete(__p[0]);
    v35 = v60;
    if (v60)
    {
      v36 = (unint64_t *)&v60->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "program_net_source");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::operator>>(&v59, (_DWORD *)(a2 + 48));
    if (v62 < 0)
      operator delete(__p[0]);
    v38 = v60;
    if (v60)
    {
      v39 = (unint64_t *)&v60->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "bottom_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v59, (std::vector<std::string> *)(a2 + 136));
    if (v62 < 0)
      operator delete(__p[0]);
    v41 = v60;
    if (v60)
    {
      v42 = (unint64_t *)&v60->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "top_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v59, (std::vector<std::string> *)(a2 + 160));
    if (v62 < 0)
      operator delete(__p[0]);
    v44 = v60;
    if (v60)
    {
      v45 = (unint64_t *)&v60->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "network_plist_input_names");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v59, (std::vector<std::string> *)(a2 + 184));
    if (v62 < 0)
      operator delete(__p[0]);
    v47 = v60;
    if (v60)
    {
      v48 = (unint64_t *)&v60->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "network_plist_output_names");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v59, (std::vector<std::string> *)(a2 + 208));
    if (v62 < 0)
      operator delete(__p[0]);
    v50 = v60;
    if (v60)
    {
      v51 = (unint64_t *)&v60->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "weight_files");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::operator>>(&v59, (uint64_t *)(a2 + 232));
    if (v62 < 0)
      operator delete(__p[0]);
    v53 = v60;
    if (v60)
    {
      v54 = (unint64_t *)&v60->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
    std::string::basic_string[abi:ne180100]<0>(v57, "additional_compilation_options");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v59, (std::vector<std::string> *)(a2 + 256));
    if (v62 < 0)
      operator delete(__p[0]);
    v29 = v60;
    if (!v60)
      goto LABEL_167;
    v56 = (unint64_t *)&v60->__shared_owners_;
    do
      v31 = __ldaxr(v56);
    while (__stlxr(v31 - 1, v56));
    goto LABEL_165;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "bottom_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::operator<<(&v59, (_QWORD *)a2);
    if (v62 < 0)
      operator delete(__p[0]);
    v5 = v60;
    if (v60)
    {
      v6 = (unint64_t *)&v60->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
  }
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "top_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::operator<<(&v59, (_QWORD *)(a2 + 24));
    if (v62 < 0)
      operator delete(__p[0]);
    v8 = v60;
    if (v60)
    {
      v9 = (unint64_t *)&v60->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v57, "program_net_source");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
  Espresso::SerDes::operator<<(&v59, (_DWORD *)(a2 + 48));
  if (v62 < 0)
    operator delete(__p[0]);
  v11 = v60;
  if (v60)
  {
    v12 = (unint64_t *)&v60->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v58 < 0)
    operator delete(v57[0]);
  if (*(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 144))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "bottom_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v59 + 272))(v59, __p, a2 + 136);
    if (v62 < 0)
      operator delete(__p[0]);
    v14 = v60;
    if (v60)
    {
      v15 = (unint64_t *)&v60->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
  }
  if (*(_QWORD *)(a2 + 160) != *(_QWORD *)(a2 + 168))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "top_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v59 + 272))(v59, __p, a2 + 160);
    if (v62 < 0)
      operator delete(__p[0]);
    v17 = v60;
    if (v60)
    {
      v18 = (unint64_t *)&v60->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
  }
  if (*(_QWORD *)(a2 + 184) != *(_QWORD *)(a2 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "network_plist_input_names");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v59 + 272))(v59, __p, a2 + 184);
    if (v62 < 0)
      operator delete(__p[0]);
    v20 = v60;
    if (v60)
    {
      v21 = (unint64_t *)&v60->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
  }
  if (*(_QWORD *)(a2 + 208) != *(_QWORD *)(a2 + 216))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "network_plist_output_names");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v59 + 272))(v59, __p, a2 + 208);
    if (v62 < 0)
      operator delete(__p[0]);
    v23 = v60;
    if (v60)
    {
      v24 = (unint64_t *)&v60->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
  }
  if (*(_QWORD *)(a2 + 232) != *(_QWORD *)(a2 + 240))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "weight_files");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    Espresso::SerDes::operator<<(&v59, (uint64_t *)(a2 + 232));
    if (v62 < 0)
      operator delete(__p[0]);
    v26 = v60;
    if (v60)
    {
      v27 = (unint64_t *)&v60->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if (v58 < 0)
      operator delete(v57[0]);
  }
  if (*(_QWORD *)(a2 + 256) != *(_QWORD *)(a2 + 264))
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "additional_compilation_options");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v57, &v59);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v59 + 272))(v59, __p, a2 + 256);
    if (v62 < 0)
      operator delete(__p[0]);
    v29 = v60;
    if (!v60)
      goto LABEL_167;
    v30 = (unint64_t *)&v60->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
LABEL_165:
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
LABEL_167:
    if (v58 < 0)
      operator delete(v57[0]);
  }
}

void sub_191887940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191887AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191887F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191887FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918881C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::tunneled_unit_bottom_layout_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;

  if (a3 && *(_BYTE *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "inherit_layout_from_espresso");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 208))(v18, __p, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v5 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v17 < 0)
      operator delete(v16[0]);
  }
  else if ((a3 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "inherit_layout_from_espresso");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v18 + 24))(v18, __p))
      *(_BYTE *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v18 + 88))(v18, __p);
    if (v21 < 0)
      operator delete(__p[0]);
    v12 = v19;
    if (v19)
    {
      v13 = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v17 < 0)
      operator delete(v16[0]);
    std::string::basic_string[abi:ne180100]<0>(v16, "requested_layout");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v18, a2 + 8);
    if (v21 < 0)
      operator delete(__p[0]);
    v9 = v19;
    if (!v19)
      goto LABEL_40;
    v15 = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(v15);
    while (__stlxr(v11 - 1, v15));
    goto LABEL_38;
  }
  v8 = *(unsigned __int8 *)(a2 + 31);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "requested_layout");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 232))(v18, __p, a2 + 8);
    if (v21 < 0)
      operator delete(__p[0]);
    v9 = v19;
    if (!v19)
      goto LABEL_40;
    v10 = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
LABEL_38:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_40:
    if (v17 < 0)
      operator delete(v16[0]);
  }
}

void sub_19188848C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191888584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918887C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_191888884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191888A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::tunneled_unit_top_layout_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;

  if (!a3 || *(_DWORD *)a2 == -1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v16, "inherit_from_bottom_blob_index");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v18 + 24))(v18, __p))
        *(_DWORD *)a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v18 + 40))(v18, __p);
      if (v21 < 0)
        operator delete(__p[0]);
      v12 = v19;
      if (v19)
      {
        p_shared_owners = (unint64_t *)&v19->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      if (v17 < 0)
        operator delete(v16[0]);
      std::string::basic_string[abi:ne180100]<0>(v16, "produces_layout");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
      Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v18, a2 + 8);
      if (v21 < 0)
        operator delete(__p[0]);
      v9 = v19;
      if (!v19)
        goto LABEL_40;
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v11 = __ldaxr(v15);
      while (__stlxr(v11 - 1, v15));
      goto LABEL_38;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "inherit_from_bottom_blob_index");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 160))(v18, __p, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v5 = v19;
    if (v19)
    {
      v6 = (unint64_t *)&v19->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v17 < 0)
      operator delete(v16[0]);
  }
  v8 = *(unsigned __int8 *)(a2 + 31);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 16);
  if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "produces_layout");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 232))(v18, __p, a2 + 8);
    if (v21 < 0)
      operator delete(__p[0]);
    v9 = v19;
    if (!v19)
      goto LABEL_40;
    v10 = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
LABEL_38:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
LABEL_40:
    if (v17 < 0)
      operator delete(v16[0]);
  }
}

void sub_191888D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191888E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191889078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_191889324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::unit_template_t>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __n128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __n128 v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  void *v26[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "unit_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v26, &v28);
    v17.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v28, a2);
    if (v31 < 0)
      operator delete(__p[0]);
    v18 = v29;
    if (v29)
    {
      p_shared_owners = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v18->__on_zero_shared)(v18, v17);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (v27 < 0)
      operator delete(v26[0]);
    std::string::basic_string[abi:ne180100]<0>(v26, "unit_params");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v26, &v28);
    v21.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v28, a2 + 24);
    if (v31 < 0)
      operator delete(__p[0]);
    v22 = v29;
    if (v29)
    {
      v23 = (unint64_t *)&v29->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v22->__on_zero_shared)(v22, v21);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (v27 < 0)
      operator delete(v26[0]);
    std::string::basic_string[abi:ne180100]<0>(v26, "output_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v26, &v28);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v28, a2 + 48);
    if (v31 < 0)
      operator delete(__p[0]);
    v14 = v29;
    if (!v29)
      goto LABEL_60;
    v25 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v25);
    while (__stlxr(v16 - 1, v25));
    goto LABEL_58;
  }
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "unit_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v26, &v28);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v28 + 232))(v28, __p, a2);
    if (v31 < 0)
      operator delete(__p[0]);
    v6 = v29;
    if (v29)
    {
      v7 = (unint64_t *)&v29->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v27 < 0)
      operator delete(v26[0]);
  }
  v9 = *(unsigned __int8 *)(a2 + 47);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 32);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "unit_params");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v26, &v28);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v28 + 232))(v28, __p, a2 + 24);
    if (v31 < 0)
      operator delete(__p[0]);
    v10 = v29;
    if (v29)
    {
      v11 = (unint64_t *)&v29->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v27 < 0)
      operator delete(v26[0]);
  }
  v13 = *(unsigned __int8 *)(a2 + 71);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a2 + 56);
  if (v13)
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "output_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v26, &v28);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v28 + 232))(v28, __p, a2 + 48);
    if (v31 < 0)
      operator delete(__p[0]);
    v14 = v29;
    if (!v29)
      goto LABEL_60;
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
LABEL_58:
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
LABEL_60:
    if (v27 < 0)
      operator delete(v26[0]);
  }
}

void sub_1918896F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::tunneled_shape_propagation_rule>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "shape_propagation_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      goto LABEL_15;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "shape_propagation_type");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (v12)
    {
      v8 = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(v8);
      while (__stlxr(v7 - 1, v8));
LABEL_15:
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19188988C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::params_io<Espresso::tunneled_ane_unit_params_t>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *__p[2];
  char v58;
  uint64_t v59;
  std::__shared_weak_count *v60;

  if (!a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "bottom_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator>>(&v55, (char **)a2);
    if (v58 < 0)
      operator delete(__p[0]);
    v31 = v56;
    if (v56)
    {
      p_shared_owners = (unint64_t *)&v56->__shared_owners_;
      do
        v33 = __ldaxr(p_shared_owners);
      while (__stlxr(v33 - 1, p_shared_owners));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "top_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator>>(&v55, (char **)(a2 + 24));
    if (v58 < 0)
      operator delete(__p[0]);
    v34 = v56;
    if (v56)
    {
      v35 = (unint64_t *)&v56->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "expected_bottom_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator>>(&v55, (uint64_t *)(a2 + 48));
    if (v58 < 0)
      operator delete(__p[0]);
    v37 = v56;
    if (v56)
    {
      v38 = (unint64_t *)&v56->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "produced_top_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator>>(&v55, (uint64_t *)(a2 + 72));
    if (v58 < 0)
      operator delete(__p[0]);
    v40 = v56;
    if (v56)
    {
      v41 = (unint64_t *)&v56->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "unit_template");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v55 + 120))(&v59, v55, __p);
      Espresso::SerDes::params_io<Espresso::unit_template_t>(v59, a2 + 96, 0);
      v43 = v60;
      if (v60)
      {
        v44 = (unint64_t *)&v60->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
    }
    if (v58 < 0)
      operator delete(__p[0]);
    v46 = v56;
    if (v56)
    {
      v47 = (unint64_t *)&v56->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
    std::string::basic_string[abi:ne180100]<0>(v53, "shape_propagation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v55 + 24))(v55, __p))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v55 + 120))(&v59, v55, __p);
      Espresso::SerDes::params_io<Espresso::tunneled_shape_propagation_rule>(v59, (_DWORD *)(a2 + 168), 0);
      v49 = v60;
      if (v60)
      {
        v50 = (unint64_t *)&v60->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    if (v58 < 0)
      operator delete(__p[0]);
    v28 = v56;
    if (!v56)
      goto LABEL_132;
    v52 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v52);
    while (__stlxr(v30 - 1, v52));
    goto LABEL_130;
  }
  if (*(_QWORD *)a2 != *(_QWORD *)(a2 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "bottom_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator<<(&v55, (_QWORD *)a2);
    if (v58 < 0)
      operator delete(__p[0]);
    v5 = v56;
    if (v56)
    {
      v6 = (unint64_t *)&v56->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_QWORD *)(a2 + 24) != *(_QWORD *)(a2 + 32))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "top_shapes");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator<<(&v55, (_QWORD *)(a2 + 24));
    if (v58 < 0)
      operator delete(__p[0]);
    v8 = v56;
    if (v56)
    {
      v9 = (unint64_t *)&v56->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_QWORD *)(a2 + 48) != *(_QWORD *)(a2 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "expected_bottom_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator<<(&v55, (uint64_t *)(a2 + 48));
    if (v58 < 0)
      operator delete(__p[0]);
    v11 = v56;
    if (v56)
    {
      v12 = (unint64_t *)&v56->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  if (*(_QWORD *)(a2 + 72) != *(_QWORD *)(a2 + 80))
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "produced_top_buffer_layouts");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    Espresso::SerDes::operator<<(&v55, (uint64_t *)(a2 + 72));
    if (v58 < 0)
      operator delete(__p[0]);
    v14 = v56;
    if (v56)
    {
      v15 = (unint64_t *)&v56->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v54 < 0)
      operator delete(v53[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v53, "unit_template");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v55 + 16))(&v59);
  Espresso::SerDes::params_io<Espresso::unit_template_t>(v59, a2 + 96, 1);
  (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v55 + 240))(v55, __p, &v59);
  v17 = v60;
  if (v60)
  {
    v18 = (unint64_t *)&v60->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v58 < 0)
    operator delete(__p[0]);
  v20 = v56;
  if (v56)
  {
    v21 = (unint64_t *)&v56->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v54 < 0)
    operator delete(v53[0]);
  v24 = *(_DWORD *)(a2 + 168);
  v23 = (_DWORD *)(a2 + 168);
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(v53, "shape_propagation");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v53, &v55);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v55 + 16))(&v59);
    Espresso::SerDes::params_io<Espresso::tunneled_shape_propagation_rule>(v59, v23, 1);
    (*(void (**)(uint64_t, void **, uint64_t *))(*(_QWORD *)v55 + 240))(v55, __p, &v59);
    v25 = v60;
    if (v60)
    {
      v26 = (unint64_t *)&v60->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v58 < 0)
      operator delete(__p[0]);
    v28 = v56;
    if (!v56)
      goto LABEL_132;
    v29 = (unint64_t *)&v56->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
LABEL_130:
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
LABEL_132:
    if (v54 < 0)
      operator delete(v53[0]);
  }
}

void sub_19188A100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 48);
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19188A254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188A624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188A6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188A8E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(uint64_t a1, int *a2, int a3)
{
  __n128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  __n128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15[2];
  char v16;
  void *v17;
  std::__shared_weak_count *v18;
  void *__p;
  char v20;
  void *v21[2];
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    if (*a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v17, "input_four_cc");
      Espresso::convert_supported_4cc_uint_to_string((Espresso *)&v23, *a2);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v17, "output_four_cc");
      Espresso::convert_supported_4cc_uint_to_string((Espresso *)&v23, a2[1]);
    }
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)a1 + 232))(a1, &v17, &v23);
    if (SHIBYTE(v25) < 0)
      operator delete(v23);
    if (SHIBYTE(__p) < 0)
    {
      v14 = v17;
LABEL_36:
      operator delete(v14);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    std::string::basic_string[abi:ne180100]<0>(v15, "input_four_cc");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    v5.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v17, (uint64_t)&v23);
    if (v20 < 0)
      operator delete(__p);
    v6 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v5);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    std::string::basic_string[abi:ne180100]<0>(v15, "output_four_cc");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v15, &v17);
    v9.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v17, (uint64_t)v21);
    if (v20 < 0)
      operator delete(__p);
    v10 = v18;
    if (v18)
    {
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v10->__on_zero_shared)(v10, v9);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (v16 < 0)
      operator delete(v15[0]);
    v13 = HIBYTE(v25);
    if (v25 < 0)
      v13 = v24;
    if (v13)
      *a2 = Espresso::convert_supported_4cc_string_to_uint((uint64_t *)&v23);
    else
      a2[1] = Espresso::convert_supported_4cc_string_to_uint((uint64_t *)v21);
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    if (SHIBYTE(v25) < 0)
    {
      v14 = v23;
      goto LABEL_36;
    }
  }
}

void sub_19188AB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::operator>>(uint64_t a1, int *a2)
{
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(a1, a2, 0);
}

void Espresso::SerDes::operator>>(_QWORD *a1, int *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = a1 + 2;
  if ((*(unsigned int (**)(_QWORD, _QWORD *))(*(_QWORD *)*a1 + 24))(*a1, a1 + 2))
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD *))(*(_QWORD *)*a1 + 120))(&v8, *a1, v4);
    Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(v8, a2, 0);
    v5 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_19188AC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188AE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(uint64_t a1, int *a2)
{
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(a1, a2, 1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, int *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a1 + 16))(&v7);
  Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(v7, a2, 1);
  (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)*a1 + 240))(*a1, a1 + 2, &v7);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19188AEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::operator<<(_QWORD *a1, int **a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  _OWORD *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;
  int64x2_t v28;
  char *v29;
  char **v30;

  v25 = 0uLL;
  v26 = 0;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::reserve(&v25, ((char *)a2[1] - (char *)*a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a1 + 16))(&v24);
      Espresso::SerDes::params_io<Espresso::plane_rw_params_t>(v24, v4, 1);
      v6 = v25.i64[1];
      if (v25.i64[1] >= (unint64_t)v26)
      {
        v7 = (v25.i64[1] - v25.i64[0]) >> 4;
        v8 = v7 + 1;
        if ((unint64_t)(v7 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v9 = (uint64_t)&v26[-v25.i64[0]];
        if ((uint64_t)&v26[-v25.i64[0]] >> 3 > v8)
          v8 = v9 >> 3;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
          v10 = 0xFFFFFFFFFFFFFFFLL;
        else
          v10 = v8;
        v30 = &v26;
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10);
        v13 = &v11[16 * v7];
        *(_OWORD *)v13 = v24;
        v24 = 0uLL;
        v14 = (_QWORD *)v25.i64[1];
        v15 = (_QWORD *)v25.i64[0];
        if (v25.i64[1] == v25.i64[0])
        {
          v18 = vdupq_n_s64(v25.u64[1]);
          v16 = &v11[16 * v7];
        }
        else
        {
          v16 = &v11[16 * v7];
          do
          {
            v17 = *((_OWORD *)v14 - 1);
            v14 -= 2;
            *((_OWORD *)v16 - 1) = v17;
            v16 -= 16;
            *v14 = 0;
            v14[1] = 0;
          }
          while (v14 != v15);
          v18 = v25;
        }
        v19 = v13 + 16;
        v25.i64[0] = (uint64_t)v16;
        v25.i64[1] = (uint64_t)(v13 + 16);
        v28 = v18;
        v20 = v26;
        v26 = &v11[16 * v12];
        v29 = v20;
        v27 = (int64x2_t *)v18.i64[0];
        std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v27);
        v21 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        v25.i64[1] = (uint64_t)v19;
        if (*((_QWORD *)&v24 + 1))
        {
          v22 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
      else
      {
        *(_OWORD *)v25.i64[1] = v24;
        v25.i64[1] = v6 + 16;
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD, _QWORD *, int64x2_t *))(*(_QWORD *)*a1 + 248))(*a1, a1 + 2, &v25);
  v27 = &v25;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
}

void sub_19188B0E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::furthest_point_sampling_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  void *v21[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  char v26;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "num_centroids");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2);
    if (v26 < 0)
      operator delete(__p[0]);
    v5 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "distance_metric");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 1);
    if (v26 < 0)
      operator delete(__p[0]);
    v8 = v24;
    if (v24)
    {
      v9 = (unint64_t *)&v24->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "seed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v23 + 160))(v23, __p, a2 + 2);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v12 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      goto LABEL_55;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "num_centroids");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "distance_metric");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v22 < 0)
      operator delete(v21[0]);
    std::string::basic_string[abi:ne180100]<0>(v21, "seed");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v21, &v23);
    if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v23 + 24))(v23, __p))
      a2[2] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v23 + 40))(v23, __p);
    if (v26 < 0)
      operator delete(__p[0]);
    v11 = v24;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v13 = __ldaxr(v20);
      while (__stlxr(v13 - 1, v20));
LABEL_55:
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  if (v22 < 0)
    operator delete(v21[0]);
}

void sub_19188B4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19188B5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188B7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188B8A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188BA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::degamma_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (a3 && *a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "degamma_mode");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v11 + 160))(v11, __p, a2);
    if (v14 < 0)
      operator delete(__p[0]);
    v5 = v12;
    if (!v12)
      goto LABEL_19;
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    goto LABEL_17;
  }
  if ((a3 & 1) != 0)
    return;
  std::string::basic_string[abi:ne180100]<0>(v9, "degamma_mode");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v9, &v11);
  if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v11 + 24))(v11, __p))
    *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v11 + 40))(v11, __p);
  if (v14 < 0)
    operator delete(__p[0]);
  v5 = v12;
  if (v12)
  {
    v8 = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(v8);
    while (__stlxr(v7 - 1, v8));
LABEL_17:
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
LABEL_19:
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_19188BC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19188BD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188BE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188BF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188C144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::linear_quantize_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (!a3 || *a2 == -1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "axis");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
        *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
      if (v22 < 0)
        operator delete(__p[0]);
      v13 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v18 < 0)
        operator delete(v17[0]);
      std::string::basic_string[abi:ne180100]<0>(v17, "dst_compute_path");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
        a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
      if (v22 < 0)
        operator delete(__p[0]);
      v10 = v20;
      if (!v20)
        goto LABEL_40;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v16);
      while (__stlxr(v12 - 1, v16));
      goto LABEL_38;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, a2);
    if (v22 < 0)
      operator delete(__p[0]);
    v5 = v20;
    if (v20)
    {
      v6 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
  }
  v9 = a2[1];
  v8 = a2 + 1;
  if (v9 == -1)
    return;
  std::string::basic_string[abi:ne180100]<0>(v17, "dst_compute_path");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, v8);
  if (v22 < 0)
    operator delete(__p[0]);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_38:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_40:
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_19188C42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19188C524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188C6B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188C77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188C964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::linear_dequantize_params_t>(uint64_t a1, _DWORD *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  void *v17[2];
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;

  if (!a3 || *a2 == -1)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "axis");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
        *a2 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
      if (v22 < 0)
        operator delete(__p[0]);
      v13 = v20;
      if (v20)
      {
        p_shared_owners = (unint64_t *)&v20->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (v18 < 0)
        operator delete(v17[0]);
      std::string::basic_string[abi:ne180100]<0>(v17, "dst_compute_path");
      Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v19 + 24))(v19, __p))
        a2[1] = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 40))(v19, __p);
      if (v22 < 0)
        operator delete(__p[0]);
      v10 = v20;
      if (!v20)
        goto LABEL_40;
      v16 = (unint64_t *)&v20->__shared_owners_;
      do
        v12 = __ldaxr(v16);
      while (__stlxr(v12 - 1, v16));
      goto LABEL_38;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "axis");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
    (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, a2);
    if (v22 < 0)
      operator delete(__p[0]);
    v5 = v20;
    if (v20)
    {
      v6 = (unint64_t *)&v20->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v18 < 0)
      operator delete(v17[0]);
  }
  v9 = a2[1];
  v8 = a2 + 1;
  if (v9 == -1)
    return;
  std::string::basic_string[abi:ne180100]<0>(v17, "dst_compute_path");
  Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v17, &v19);
  (*(void (**)(uint64_t, void **, _DWORD *))(*(_QWORD *)v19 + 160))(v19, __p, v8);
  if (v22 < 0)
    operator delete(__p[0]);
  v10 = v20;
  if (v20)
  {
    v11 = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
LABEL_38:
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_40:
  if (v18 < 0)
    operator delete(v17[0]);
}

void sub_19188CC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_19188CD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188CED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void sub_19188CF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_19188D184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::context::~context(id *this)
{
  Espresso::context_metal::~context_metal(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::MetalLowmemEngine::engine::available_compute_paths@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v3;
  _QWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(8uLL);
  *a1 = v3;
  *v3 = 0x100000000;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

__n128 Espresso::MetalLowmemEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x100uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBACC8;
  result.n128_u64[0] = Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188D280(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::MetalLowmemEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 result;
  __int128 v11;

  v6 = operator new(0xF8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB390;
  Espresso::context_metal::context_metal((uint64_t)v6 + 24, a1, a2);
  *((_QWORD *)v6 + 3) = &off_1E2D814F8;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v11);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v6 + 48, &v11);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *((_DWORD *)v6 + 61) = 0;
  objc_msgSend(*((id *)v6 + 23), "setKernelPrefix:", CFSTR("T2D_"));
  if (*((_DWORD *)v6 + 61) == 1)
    objc_msgSend(*((id *)v6 + 23), "setKernelPrefix:", CFSTR("TARR_"));
  *((_BYTE *)v6 + 68) = 1;
  result.n128_u64[0] = (unint64_t)v6 + 24;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188D3A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  id *v2;
  void *v4;

  Espresso::context_metal::~context_metal(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::engine::~engine(Espresso::MetalLowmemEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAE50;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_QWORD *)a2 + 6);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D7EA08;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  v6[44] = v12;
  v6[45] = 0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188D4DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::axpby_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAE50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::axpby_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAE50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::axpby_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB208;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D809B0;
  v6[45] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188D5E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::elementwise_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::elementwise_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::elementwise_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB320;
  v15 = a2[6];
  v16 = a2[7];
  v17 = *((_DWORD *)a2 + 32);
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D810B8;
  *((_QWORD *)v6 + 58) = 0;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188D718(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_weights_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB240;
  v15 = a2[6];
  v16 = a2[7];
  v17 = *((_DWORD *)a2 + 32);
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D80B08;
  *((_QWORD *)v6 + 58) = 0;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188D848(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB198;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D80078;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188D964(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::batchnorm_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::batchnorm_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::batchnorm_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<D0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::bias_grad_kernel_metal,std::allocator<Espresso::MetalLowmemEngine::bias_grad_kernel_metal>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::bias_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::bias_grad_kernel_metal,std::allocator<Espresso::MetalLowmemEngine::bias_grad_kernel_metal>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::bias_params const&,void>(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAF30;
  v7 = *a3;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[38] = 0;
  v6[39] = 0;
  v6[40] = 0;
  v6[3] = &off_1E2D7F038;
  v6[42] = 0;
  *((_BYTE *)v6 + 344) = 1;
  *((_DWORD *)v6 + 82) = v7;
  *((_BYTE *)v6 + 332) = BYTE4(v7);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_19188DA84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::bias_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAF30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::bias_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAF30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::bias_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB0B8;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D7F9A0;
  *((_QWORD *)v6 + 46) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188DB8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB0B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB0B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::concat_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  int v11;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB080;
  v9 = *a2;
  v10 = a2[1];
  v11 = *((_DWORD *)a2 + 8);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D7F848;
  v6[43] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_DWORD *)v6 + 84) = v11;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188DC88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::nonlinearity_grad_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::nonlinearity_grad_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::nonlinearity_grad_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  int v11;

  v6 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB128;
  v9 = *a2;
  v10 = a2[1];
  v11 = *((_DWORD *)a2 + 8);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D7FD80;
  *((_OWORD *)v6 + 25) = 0u;
  *((_QWORD *)v6 + 52) = 0;
  *((_DWORD *)v6 + 90) = v11;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188DDA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::nonlinearity_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::nonlinearity_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::nonlinearity_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = operator new(0x1A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB010;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D7F468;
  v6[52] = 0;
  *((_OWORD *)v6 + 23) = v13;
  *((_OWORD *)v6 + 24) = v14;
  *((_OWORD *)v6 + 25) = v15;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188DEBC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::pool_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::pool_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::pool_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::bias_grad_kernel_metal,std::allocator<Espresso::MetalLowmemEngine::bias_grad_kernel_metal>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::bias_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x1F8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB2E8;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 3) = &off_1E2D80F58;
  *((_QWORD *)v6 + 62) = 0;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188E04C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_weights_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(const void **a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  _OWORD *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  __int16 v14;
  int v15;
  int32x2_t v16;
  int v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  int v21;
  __CFString **v22;
  __CFString *v23;
  void *v24;
  int v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  void *v32;
  const __CFString *v33;
  uint64_t v34;
  void *v35;
  const __CFString *v36;
  uint64_t v37;
  void *v38;
  id *v39;
  id *v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  int v44;
  _BOOL4 v45;
  _BOOL4 v46;
  BOOL v47;
  int v48;
  const __CFString *v49;
  __int16 v50;
  int v51;
  int v52;
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const __CFString *v58;
  uint64_t v59;
  void *v60;
  unint64_t *v61;
  int v62;
  unint64_t v63;
  __n128 result;
  _QWORD *v65;
  __int16 v66;
  int v67;
  __int16 v68;
  __int16 v69;
  const void **v72;
  unint64_t v73;
  __int16 v74;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int32x2_t v81;
  __int128 v82;
  _BYTE v83[32];
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  __int16 v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _BYTE v94[20];
  __int128 v95;

  v6 = operator new(0x3D0uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB1D0;
  v8 = v6 + 3;
  v91 = *a2;
  v92 = a2[1];
  v93 = *((_QWORD *)a2 + 4);
  v81 = *(int32x2_t *)((char *)a2 + 40);
  v77 = *((_QWORD *)a2 + 6);
  v9 = *((_DWORD *)a2 + 14);
  v89 = *(_QWORD *)((char *)a2 + 60);
  v90 = *((_DWORD *)a2 + 17);
  v10 = *((unsigned __int16 *)a2 + 36);
  v88 = *((_WORD *)a2 + 39);
  v11 = *((unsigned __int16 *)a2 + 40);
  v12 = *((unsigned __int16 *)a2 + 42);
  v78 = *((unsigned __int16 *)a2 + 41);
  v79 = *((unsigned __int16 *)a2 + 43);
  v86 = *((_DWORD *)a2 + 22);
  v87 = *(_DWORD *)((char *)a2 + 74);
  v13 = *((__int16 *)a2 + 46);
  v85 = *((_DWORD *)a2 + 26);
  v84 = *((_QWORD *)a2 + 12);
  v76 = *((_DWORD *)a2 + 28);
  v80 = *((_DWORD *)a2 + 29);
  *(_OWORD *)v83 = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)&v83[16] = *(__int128 *)((char *)a2 + 152);
  v82 = *(__int128 *)((char *)a2 + 120);
  v95 = *a2;
  v75 = *((_DWORD *)a2 + 27);
  *(_DWORD *)v94 = *(_DWORD *)&v83[12];
  *(_OWORD *)&v94[4] = *(_OWORD *)&v83[16];
  v69 = *((_WORD *)a2 + 47);
  if (v13 > 1)
    v14 = 1;
  else
    v14 = *((_WORD *)a2 + 47);
  v72 = a1;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v15 = v14;
  v16 = vrev64_s32(v81);
  v67 = v9;
  v68 = v13;
  if (v13 <= 1)
    v17 = v9;
  else
    v17 = (unsigned __int16)v13;
  if (v13 >= 1)
    LOWORD(v13) = 1;
  *(_QWORD *)(v7 + 320) = 0;
  *(_OWORD *)(v7 + 304) = 0u;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v8 + 19));
  v8[19] = v95;
  v8[20] = v92;
  *(_QWORD *)(v7 + 360) = v93;
  *(int32x2_t *)(v7 + 368) = v16;
  v18 = v77;
  *(_QWORD *)(v7 + 376) = v77;
  *(_DWORD *)(v7 + 384) = v17;
  *(_QWORD *)(v7 + 388) = v89;
  *(_DWORD *)(v7 + 396) = v90;
  *(_WORD *)(v7 + 400) = v10;
  *(_DWORD *)(v7 + 402) = v87;
  *(_WORD *)(v7 + 406) = v88;
  *(_WORD *)(v7 + 408) = v11;
  *(_WORD *)(v7 + 410) = v78;
  v74 = v12;
  *(_WORD *)(v7 + 412) = v12;
  *(_WORD *)(v7 + 414) = v79;
  *(_DWORD *)(v7 + 416) = v86;
  *(_WORD *)(v7 + 420) = v13;
  *(_WORD *)(v7 + 422) = v15;
  *(_QWORD *)(v7 + 424) = v84;
  *(_DWORD *)(v7 + 432) = v85;
  *(_DWORD *)(v7 + 436) = v75;
  *(_DWORD *)(v7 + 440) = v76;
  *(_DWORD *)(v7 + 444) = v80;
  *(_OWORD *)(v7 + 477) = *(_OWORD *)&v94[1];
  *(_OWORD *)(v7 + 448) = v82;
  *(_OWORD *)(v7 + 464) = *(_OWORD *)v83;
  *(_QWORD *)(v7 + 24) = &off_1E2D80848;
  *(_QWORD *)(v7 + 600) = 0;
  v8[30] = 0u;
  v8[31] = 0u;
  v8[32] = 0u;
  v8[33] = 0u;
  v8[34] = 0u;
  *(_QWORD *)(v7 + 608) = 0x200000002;
  v8[37] = 0u;
  *(_QWORD *)(v7 + 632) = 0x800000008;
  *(_OWORD *)(v7 + 640) = 0u;
  *(_QWORD *)(v7 + 656) = 1;
  *(_BYTE *)(v7 + 664) = 0;
  *(_QWORD *)(v7 + 668) = 1082130432;
  *(_BYTE *)(v7 + 696) = 0;
  v73 = (unint64_t)v8;
  v8[41] = 0u;
  *(_OWORD *)(v7 + 700) = xmmword_191A93980;
  *(_DWORD *)(v7 + 716) = 2;
  *(_OWORD *)(v7 + 720) = 0u;
  v65 = std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v7 + 736), "half");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v7 + 760), "none");
  *(_BYTE *)(v7 + 784) = 0;
  *(_DWORD *)(v7 + 496) = a3;
  v19 = v12;
  *(_DWORD *)(v7 + 592) = 1;
  if ((int)v77 <= SHIDWORD(v77))
    v18 = HIDWORD(v77);
  v66 = v10;
  v20 = v18 - 1;
  v21 = v81.i32[0];
  if ((v10 & 0xFFFE) == 2 || !(v10 | v11 | v78 | v12 | v79))
  {
    if (v20 >= 0xB || ((0x5DFu >> v20) & 1) == 0)
      goto LABEL_20;
    v22 = off_1E2DD5E38;
  }
  else
  {
    if (v20 >= 0xB || ((0x5DFu >> v20) & 1) == 0)
      goto LABEL_20;
    v22 = off_1E2DD5E90;
  }
  v23 = v22[v20];
  v24 = *(void **)(v7 + 568);
  *(_QWORD *)(v7 + 568) = v23;

  *(_QWORD *)(v7 + 584) = 0x200000002;
  v21 = v81.i32[0];
LABEL_20:
  v25 = v21;
  v26 = v80 != v21 || v21 <= 1;
  v27 = !v26;
  *(_BYTE *)(v7 + 784) = v27;
  if (v80 >= 2)
  {
    objc_msgSend(*(id *)(v7 + 568), "stringByAppendingString:", CFSTR("_groups"));
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = *(void **)(v7 + 568);
    *(_QWORD *)(v7 + 568) = v28;

  }
  *(_QWORD *)(v7 + 584) = 0x300000002;
  v30 = *(id *)(v7 + 568);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("cool_%@"), v30);
  v31 = objc_claimAutoreleasedReturnValue();
  v32 = *(void **)(v7 + 568);
  *(_QWORD *)(v7 + 568) = v31;

  if (v75)
    v33 = CFSTR("_ncc");
  else
    v33 = CFSTR("_");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t1x2%@xy_%@"), v33, v30);
  v34 = objc_claimAutoreleasedReturnValue();
  v35 = *(void **)(v7 + 568);
  *(_QWORD *)(v7 + 568) = v34;

  *(_DWORD *)(v7 + 592) = 2;
  *(_QWORD *)(v7 + 584) = 0x200000001;
  if (v18 >= 2)
  {
    if ((_DWORD)v77 == 1)
    {
      v36 = CFSTR("morechan_t1x2%@y_%@");
    }
    else
    {
      if (HIDWORD(v77) != 1)
        goto LABEL_37;
      v36 = CFSTR("morechan_t1x2%@x_%@");
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v36, v33, v30);
    v37 = objc_claimAutoreleasedReturnValue();
    v38 = *(void **)(v7 + 568);
    *(_QWORD *)(v7 + 568) = v37;

  }
LABEL_37:
  if (!*v72)
  {
    v50 = v11;
    v51 = v80;
    v52 = v76;
LABEL_71:
    v53 = v69;
    goto LABEL_72;
  }
  if (!v39)
  {
    v50 = v11;
    v51 = v80;
    v52 = v76;
    v53 = v69;
    v19 = v74;
LABEL_72:
    v62 = v67;
    goto LABEL_73;
  }
  v40 = v39;
  v41 = (std::__shared_weak_count *)v72[1];
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(p_shared_owners);
    while (__stxr(v43 + 1, p_shared_owners));
  }
  if (objc_msgSend(v39[18], "supportsFeatureSet:", 11))
  {
    v44 = v80;
    if (v80 <= 1)
      v44 = 1;
    v45 = v25 / v44 < 225;
    v46 = v15 < 2;
    v47 = !v45 || !v46;
    if (v45 && v46)
      v48 = 2;
    else
      v48 = 1;
    if (v47)
      v49 = CFSTR("morechan_t1x2");
    else
      v49 = CFSTR("morechan_t2x2");
    *(_DWORD *)(v7 + 584) = v48;
    *(_QWORD *)(v7 + 588) = 0x200000002;
  }
  else if (objc_msgSend(v40[18], "supportsFeatureSet:", 7))
  {
    *(_DWORD *)(v7 + 592) = 2;
    *(_QWORD *)(v7 + 584) = 0x200000001;
    v49 = CFSTR("morechan_t1x2");
  }
  else
  {
    *(_DWORD *)(v7 + 592) = 1;
    *(_QWORD *)(v7 + 584) = 0x200000002;
    objc_msgSend(CFSTR("fourchan_"), "stringByAppendingString:", v30);
    v54 = objc_claimAutoreleasedReturnValue();

    v49 = CFSTR("morechan_t2x2");
    v30 = (id)v54;
    if (*(_DWORD *)(v7 + 592) != 2)
      goto LABEL_59;
  }
  if ((v81.i8[4] & 7) != 0)
  {
    *(_DWORD *)(v7 + 592) = 1;
    objc_msgSend(CFSTR("fourchan_"), "stringByAppendingString:", v30);
    v55 = objc_claimAutoreleasedReturnValue();

    v30 = (id)v55;
  }
LABEL_59:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%@%@xy_%@"), v49, v33, v30, v7 + 760, v65);
  v56 = objc_claimAutoreleasedReturnValue();
  v57 = *(void **)(v7 + 568);
  *(_QWORD *)(v7 + 568) = v56;

  v26 = v18 < 2;
  v52 = v76;
  v19 = v74;
  if (v26)
    goto LABEL_65;
  if ((_DWORD)v77 == 1)
  {
    v58 = CFSTR("%@%@y_%@");
  }
  else
  {
    if (HIDWORD(v77) != 1)
      goto LABEL_65;
    v58 = CFSTR("%@%@x_%@");
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v58, v49, v33, v30);
  v59 = objc_claimAutoreleasedReturnValue();
  v60 = *(void **)(v7 + 568);
  *(_QWORD *)(v7 + 568) = v59;

  v52 = v76;
  v19 = v74;
LABEL_65:
  if (!v41)
  {
    v50 = v11;
    v51 = v80;
    goto LABEL_71;
  }
  v61 = (unint64_t *)&v41->__shared_owners_;
  v51 = v80;
  v53 = v69;
  v62 = v67;
  do
    v63 = __ldaxr(v61);
  while (__stlxr(v63 - 1, v61));
  v50 = v11;
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_73:

  *(_QWORD *)(v7 + 24) = &off_1E2D80458;
  *(_OWORD *)(v7 + 792) = 0u;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v7 + 808));
  *(_OWORD *)(v7 + 808) = v91;
  *(_OWORD *)(v7 + 824) = v92;
  *(_QWORD *)(v7 + 840) = v93;
  *(int32x2_t *)(v7 + 848) = v81;
  *(_QWORD *)(v7 + 856) = v77;
  *(_DWORD *)(v7 + 864) = v62;
  *(_QWORD *)(v7 + 868) = v89;
  *(_DWORD *)(v7 + 876) = v90;
  *(_WORD *)(v7 + 880) = v66;
  *(_DWORD *)(v7 + 882) = v87;
  *(_WORD *)(v7 + 886) = v88;
  *(_WORD *)(v7 + 888) = v50;
  *(_WORD *)(v7 + 890) = v78;
  *(_WORD *)(v7 + 892) = v19;
  *(_WORD *)(v7 + 894) = v79;
  *(_DWORD *)(v7 + 896) = v86;
  *(_WORD *)(v7 + 900) = v68;
  *(_WORD *)(v7 + 902) = v53;
  *(_DWORD *)(v7 + 912) = v85;
  *(_QWORD *)(v7 + 904) = v84;
  *(_DWORD *)(v7 + 916) = v75;
  *(_DWORD *)(v7 + 920) = v52;
  *(_DWORD *)(v7 + 924) = v51;
  *(_OWORD *)(v7 + 957) = *(_OWORD *)&v83[13];
  *(_OWORD *)(v7 + 928) = v82;
  *(_OWORD *)(v7 + 944) = *(_OWORD *)v83;
  result.n128_u64[0] = v73;
  result.n128_u64[1] = v7;
  *a4 = result;
  return result;
}

void sub_19188E914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,Espresso::base_kernel *a21)
{
  uint64_t v21;
  uint64_t v22;
  void *v24;

  if (*(char *)(v21 + 783) < 0)
    operator delete(*a12);
  if (*(char *)(v21 + 759) < 0)
    operator delete(*a13);

  *(_QWORD *)(v21 + 24) = off_1E2D9DD68;
  *(_QWORD *)(v22 - 112) = v21 + 304;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v22 - 112));
  Espresso::base_kernel::~base_kernel(a21);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v21);
  operator delete(v24);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB1D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_grad_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB1D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_grad_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x1C8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAE18;
  result.n128_u64[0] = Espresso::MetalLowmemEngine::transplant_kernel::transplant_kernel((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188EB04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::transplant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAE18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::transplant_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAE18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::transplant_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB160;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D7FF20;
  *((_QWORD *)v6 + 41) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *(_OWORD *)(v6 + 344) = xmmword_191A93680;
  v6[360] = 0;
  *((_DWORD *)v6 + 91) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 40) = *(_QWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188EC00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::spatial_transformer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::spatial_transformer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::spatial_transformer_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __int128 v9;
  __n128 result;
  __int128 v11[2];
  int v12;

  v8 = operator new(0x1D0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBADA8;
  v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  v12 = *(_DWORD *)(a2 + 32);
  result.n128_u64[0] = (unint64_t)Espresso::MetalLowmemEngine::activation_kernel::activation_kernel(v8 + 3, a1, a3, v11);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_19188ECF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x218uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB278;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  v6[3] = &off_1E2D80C68;
  v6[43] = 0;
  v6[44] = 0;
  v6[42] = v8;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 45));
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188ED9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB2B0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 47) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D80DC0;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v8;
  *((_QWORD *)v6 + 45) = *(_QWORD *)(a2 + 32);
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_QWORD *)v6 + 54) = 0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188EE50(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

double ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  double result;
  double v6[3];
  int v7;

  v7 = a3;
  std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::meta_convolution_kernel,std::allocator<Espresso::MetalLowmemEngine::meta_convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>((uint64_t *)v6, a1, &v7, a2);
  result = v6[0];
  *a4 = *(_OWORD *)v6;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::meta_convolution_kernel,std::allocator<Espresso::MetalLowmemEngine::meta_convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(uint64_t *a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _DWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  void *__p;
  void *v32;
  uint64_t v33;

  v8 = (char *)operator new(0x360uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBB048;
  v9 = (uint64_t)(v8 + 24);
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a2);
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v8 + 328));
  *((_QWORD *)v8 + 62) = 0;
  *((_QWORD *)v8 + 63) = 0;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  *((_OWORD *)v8 + 34) = 0u;
  *((_OWORD *)v8 + 35) = 0u;
  *((_QWORD *)v8 + 72) = 0;
  *((_QWORD *)v8 + 3) = &off_1E2D7F5C0;
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  *((_DWORD *)v8 + 154) = 0;
  *((_OWORD *)v8 + 39) = 0u;
  *((_OWORD *)v8 + 40) = 0u;
  *(_OWORD *)(v8 + 652) = 0u;
  *((_OWORD *)v8 + 42) = 0u;
  *((_OWORD *)v8 + 43) = 0u;
  *((_OWORD *)v8 + 44) = 0u;
  *((_OWORD *)v8 + 45) = 0u;
  *((_QWORD *)v8 + 92) = 0x400000004;
  *((_DWORD *)v8 + 186) = 4;
  *((_OWORD *)v8 + 47) = 0u;
  *((_OWORD *)v8 + 48) = 0u;
  *((_OWORD *)v8 + 49) = 0u;
  v8[800] = 0;
  *(_OWORD *)(v8 + 808) = 0u;
  *(_OWORD *)(v8 + 824) = 0u;
  *(_OWORD *)(v8 + 840) = 0u;
  *((_QWORD *)v8 + 107) = 0;
  *((_DWORD *)v8 + 167) = *a3;
  *(_QWORD *)(v10 + 157) = *(_QWORD *)(a4 + 157);
  v11 = *(_OWORD *)(a4 + 144);
  *(_OWORD *)(v8 + 456) = *(_OWORD *)(a4 + 128);
  *(_OWORD *)(v8 + 472) = v11;
  v12 = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v8 + 424) = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v8 + 440) = v12;
  v13 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v8 + 392) = *(_OWORD *)(a4 + 64);
  *(_OWORD *)(v8 + 408) = v13;
  v14 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v8 + 328) = *(_OWORD *)a4;
  *(_OWORD *)(v8 + 344) = v14;
  v15 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v8 + 360) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v8 + 376) = v15;
  v16 = (_DWORD *)*a2;
  if (*a2
  {
    v17 = (std::__shared_weak_count *)a2[1];
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(v8 + 596) = 0;
  v20 = *((_DWORD *)v8 + 93);
  v21 = *((_DWORD *)v8 + 111);
  if (v21 <= 1)
    v21 = 1;
  v22 = (v20 - 1) / v21 / 4 + 1;
  v23 = *((_DWORD *)v8 + 95) * *((_DWORD *)v8 + 94);
  v24 = v22 * v23;
  if (v23 >= 3)
    v25 = 100;
  else
    v25 = 50;
  if (v24 <= v25)
  {
    v26 = 0;
  }
  else
  {
    v26 = 0;
    v27 = v24 >> 1;
    if (v24 >> 1 >= 0x40)
      v27 = 64;
    v28 = 1;
    while (1)
    {
      if (!(v22 % v28))
      {
        v26 = v28;
        if (v24 / v28 < v25)
          break;
      }
      if (v27 == ++v28)
        goto LABEL_23;
    }
    v26 = v28;
LABEL_23:
    if (v26 >= 2 && v20 / v21 % (4 * v26))
      v26 = 1;
  }
  *((_DWORD *)v8 + 166) = v26;
  if (*(_DWORD *)(a4 + 104))
  {
    *((_DWORD *)v8 + 151) = 1;
    *((_DWORD *)v8 + 166) = 1;
  }
  if (*a3 == 4 || *a3 == 2)
  {
    *((_DWORD *)v8 + 152) = 1;
    *((_DWORD *)v8 + 166) = 1;
  }
  if (v16 && v16[55] == 1)
    *((_DWORD *)v8 + 153) = 1;
  __p = 0;
  v32 = 0;
  v33 = 0;
  Espresso::MetalLowmemEngine::meta_convolution_kernel::setup_for_tune(v9, (uint64_t)&__p);
  if (__p)
  {
    v32 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v29 = (unint64_t *)&v17->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *a1 = v9;
  a1[1] = (uint64_t)v8;
}

void sub_19188F1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void **v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  void *v23;
  void *v24;

  if (__p)
    operator delete(__p);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15);

  v22 = *(void **)(v11 + 776);
  if (v22)
  {
    *(_QWORD *)(v11 + 784) = v22;
    operator delete(v22);
  }
  v23 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v11 + 760) = v23;
    operator delete(v23);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 + 720);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 + 704);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v11 + 688);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v12);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v11);
  operator delete(v24);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::meta_convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::meta_convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::meta_convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBADE0;
  v8 = *a2;
  v7 = a2[1];
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D7E6E8;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *(_OWORD *)(v6 + 396) = 0u;
  *((_QWORD *)v6 + 38) = v8;
  *((_QWORD *)v6 + 39) = v7;
  *((_WORD *)v6 + 172) = -(__int16)v8;
  *((_WORD *)v6 + 173) = -WORD2(v8);
  *((_WORD *)v6 + 174) = -(__int16)v7;
  *((_WORD *)v6 + 175) = -WORD2(v7);
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188F3AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBADE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBADE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::crop_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAEC0;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 312) = 0;
  v6[41] = 0;
  v6[42] = 0;
  v6[40] = 0;
  v6[3] = &off_1E2D7ECC0;
  v6[38] = v7;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188F490(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::flatten_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::flatten_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::flatten_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBAFD8;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D7F310;
  *((_QWORD *)v6 + 48) = 0;
  *((_QWORD *)v6 + 49) = 0;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v12;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)&v12[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188F5D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBAD70;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  v6[424] = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D7E398;
  *((_QWORD *)v6 + 60) = 0;
  *((_QWORD *)v6 + 61) = 0;
  *((_QWORD *)v6 + 57) = 0;
  *((_QWORD *)v6 + 58) = 0;
  *((_QWORD *)v6 + 56) = 0;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188F6AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAD70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::batchnorm_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAD70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::batchnorm_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = (char *)operator new(0x390uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBAB78;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_DWORD *)v6 + 98) = 0;
  *((_OWORD *)v6 + 52) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  *((_OWORD *)v6 + 40) = 0u;
  *((_OWORD *)v6 + 41) = 0u;
  *((_OWORD *)v6 + 42) = 0u;
  *((_OWORD *)v6 + 43) = 0u;
  *((_OWORD *)v6 + 44) = 0u;
  *((_OWORD *)v6 + 45) = 0u;
  *((_OWORD *)v6 + 46) = 0u;
  *((_OWORD *)v6 + 47) = 0u;
  *((_OWORD *)v6 + 48) = 0u;
  *((_OWORD *)v6 + 49) = 0u;
  *((_OWORD *)v6 + 50) = 0u;
  *((_QWORD *)v6 + 102) = 0;
  *((_QWORD *)v6 + 103) = v6 + 832;
  *((_QWORD *)v6 + 106) = 0;
  *((_QWORD *)v6 + 108) = 0;
  *((_QWORD *)v6 + 107) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D7D8A0;
  *((_QWORD *)v6 + 113) = 0;
  *(_OWORD *)(v6 + 872) = 0u;
  *(_OWORD *)(v6 + 888) = 0u;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188F848(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::rnn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAB78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::rnn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAB78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::rnn_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;
  int v17;
  _QWORD v18[2];

  v6 = operator new(0x148uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE848;
  v8 = (unint64_t)(v6 + 3);
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v18[0] = v9;
  v18[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v16 = *a2;
  v17 = *((_DWORD *)a2 + 4);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), v18);
  *(_QWORD *)(v7 + 24) = &off_1E2D9F948;
  *(_OWORD *)(v7 + 304) = v16;
  *(_BYTE *)(v7 + 320) = v17;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_19188F9A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::universal_dropout_augment_join_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::universal_dropout_augment_join_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::universal_dropout_augment_join_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  __int128 v16;
  int v17;
  _QWORD v18[2];

  v6 = operator new(0x158uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE458;
  v8 = (unint64_t)(v6 + 3);
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v18[0] = v9;
  v18[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v16 = *a2;
  v17 = *((_DWORD *)a2 + 4);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), v18);
  *(_QWORD *)(v7 + 24) = &off_1E2D9D1B8;
  *(_QWORD *)(v7 + 328) = 0;
  *(_QWORD *)(v7 + 336) = 0;
  *(_OWORD *)(v7 + 304) = v16;
  *(_BYTE *)(v7 + 320) = v17;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_19188FB38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::universal_dropout_augment_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE458;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::universal_dropout_augment_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE458;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::universal_dropout_augment_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBABE8;
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 328) = 0;
  v6[43] = 0;
  v6[44] = 0;
  v6[42] = 0;
  v6[3] = &off_1E2D7DC00;
  *((_OWORD *)v6 + 19) = v9;
  v6[40] = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188FC70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBABE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::slice_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBABE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::slice_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x1A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAC20;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 360) = 0;
  v6[46] = 0;
  v6[47] = 0;
  v6[3] = &off_1E2D7DD58;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188FD88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v6 = operator new(0x180uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAD38;
  v11 = a2[2];
  v12 = a2[3];
  v13 = *((_QWORD *)a2 + 8);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D7E240;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  v6[46] = v13;
  v6[47] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188FE40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBAB40;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D7D748;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19188FEF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAB40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAB40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::lrn_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBAC58;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[368] = 0;
  *((_QWORD *)v6 + 47) = 0;
  *((_QWORD *)v6 + 48) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D7DEB0;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 49) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191890004(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x190uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBAE88;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 360) = 0;
  v6[46] = 0;
  v6[47] = 0;
  v6[3] = &off_1E2D7EB68;
  v6[48] = 0;
  v6[49] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918900C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAE88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::elementwise_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAE88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::elementwise_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBAD00;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_DWORD *)v6 + 83) = 0;
  v6[336] = 0;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D7E0E8;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 46) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918901D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAD00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::softmax_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAD00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::softmax_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  unint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v19;

  v8 = (char *)operator new(0x290uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBAEF8;
  v17 = a2[6];
  v18 = a2[7];
  v19 = *((_DWORD *)a2 + 32);
  v13 = a2[2];
  v14 = a2[3];
  v15 = a2[4];
  v16 = a2[5];
  v11 = *a2;
  v12 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 3) = &off_1E2D7EE18;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *((_QWORD *)v8 + 58) = 0;
  *((_QWORD *)v8 + 59) = 0;
  v8[480] = 0;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 568) = 0u;
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  *((_OWORD *)v8 + 39) = 0u;
  *((_OWORD *)v8 + 40) = 0u;
  *(_OWORD *)(v8 + 360) = v13;
  *(_OWORD *)(v8 + 376) = v14;
  *(_OWORD *)(v8 + 328) = v11;
  *(_OWORD *)(v8 + 344) = v12;
  *((_DWORD *)v8 + 114) = v19;
  *(_OWORD *)(v8 + 424) = v17;
  *(_OWORD *)(v8 + 440) = v18;
  *(_OWORD *)(v8 + 392) = v15;
  *(_OWORD *)(v8 + 408) = v16;
  *((_DWORD *)v8 + 155) = a3;
  *((_DWORD *)v8 + 154) = 20000;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_191890338(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAEF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBAEF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::inner_product_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBABB0;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 57) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D7DA68;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191890468(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBABB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBABB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso17MetalLowmemEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  _DWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  unsigned int v30;
  __CFString **v31;
  __CFString *v32;
  void *v33;
  BOOL v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  void *v40;
  const __CFString *v41;
  uint64_t v42;
  void *v43;
  const __CFString *v44;
  uint64_t v45;
  void *v46;
  id *v47;
  id *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  _BOOL4 v54;
  _BOOL4 v55;
  BOOL v56;
  int v57;
  const __CFString *v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const __CFString *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t *v68;
  char *v69;
  unint64_t v70;
  __int128 v71;
  char v72;
  _OWORD *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  int v80;
  int v81;
  int v82;
  __int128 v83;
  _BYTE v84[32];
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  __int16 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;

  v82 = a3;
  v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = v7[55];
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    if (v11 == 1)
      goto LABEL_9;
  }
  else if (v7[55] == 1)
  {
LABEL_9:
    std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::meta_convolution_kernel,std::allocator<Espresso::MetalLowmemEngine::meta_convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>((uint64_t *)&v83, (_QWORD *)a1, &v82, a2);
    *a4 = v83;
    return;
  }
  v73 = a4;
  v13 = (char *)operator new(0x390uLL);
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *(_QWORD *)v13 = &off_1E2DBB0F0;
  v14 = *(_OWORD *)(a2 + 16);
  v91 = *(_OWORD *)a2;
  v92 = v14;
  v93 = *(_QWORD *)(a2 + 32);
  v16 = *(_DWORD *)(a2 + 40);
  v15 = *(_DWORD *)(a2 + 44);
  v17 = *(_DWORD *)(a2 + 48);
  v18 = *(_DWORD *)(a2 + 52);
  v90 = *(_OWORD *)(a2 + 56);
  v19 = *(unsigned __int16 *)(a2 + 72);
  v20 = *(_DWORD *)(a2 + 74);
  v89 = *(_WORD *)(a2 + 78);
  v80 = *(unsigned __int16 *)(a2 + 82);
  v21 = *(unsigned __int16 *)(a2 + 84);
  v74 = *(unsigned __int16 *)(a2 + 86);
  v75 = *(unsigned __int16 *)(a2 + 80);
  v87 = *(_DWORD *)(a2 + 88);
  v88 = v20;
  v22 = *(__int16 *)(a2 + 92);
  v23 = *(__int16 *)(a2 + 94);
  v24 = *(_QWORD *)(a2 + 96);
  v86 = *(_DWORD *)(a2 + 104);
  v85 = v24;
  v78 = *(_QWORD *)(a2 + 108);
  v76 = *(_DWORD *)(a2 + 116);
  v77 = v23;
  v25 = *(_OWORD *)(a2 + 120);
  v26 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)v84 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)&v84[16] = v26;
  v83 = v25;
  Espresso::base_kernel::base_kernel((uint64_t)(v13 + 24), (_QWORD *)a1);
  *(_OWORD *)(v13 + 312) = 0u;
  *((_QWORD *)v13 + 38) = v13 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v13 + 328));
  *((_OWORD *)v13 + 31) = 0u;
  *((_OWORD *)v13 + 32) = 0u;
  *((_OWORD *)v13 + 33) = 0u;
  *((_OWORD *)v13 + 34) = 0u;
  *((_OWORD *)v13 + 35) = 0u;
  *((_QWORD *)v13 + 72) = 0;
  v27 = v92;
  *(_OWORD *)(v13 + 328) = v91;
  *(_OWORD *)(v13 + 344) = v27;
  *((_QWORD *)v13 + 45) = v93;
  v72 = v16;
  *((_DWORD *)v13 + 92) = v16;
  *((_DWORD *)v13 + 93) = v15;
  *((_DWORD *)v13 + 94) = v17;
  *((_DWORD *)v13 + 95) = v18;
  *((_OWORD *)v13 + 24) = v90;
  *((_WORD *)v13 + 200) = v19;
  *(_DWORD *)(v13 + 402) = v88;
  *((_WORD *)v13 + 203) = v89;
  *((_WORD *)v13 + 204) = v75;
  *((_WORD *)v13 + 205) = v80;
  *((_WORD *)v13 + 206) = v21;
  *((_WORD *)v13 + 207) = v74;
  *((_DWORD *)v13 + 104) = v87;
  *((_WORD *)v13 + 210) = v22;
  *((_WORD *)v13 + 211) = v77;
  *((_QWORD *)v13 + 53) = v85;
  *((_DWORD *)v13 + 108) = v86;
  *(_QWORD *)(v13 + 436) = v78;
  *((_DWORD *)v13 + 111) = v76;
  *(_OWORD *)(v13 + 477) = *(_OWORD *)&v84[13];
  v28 = *(_OWORD *)v84;
  *((_OWORD *)v13 + 28) = v83;
  *((_OWORD *)v13 + 29) = v28;
  *((_QWORD *)v13 + 3) = off_1E2D805C0;
  *((_QWORD *)v13 + 86) = 0;
  *((_OWORD *)v13 + 37) = 0u;
  *((_OWORD *)v13 + 38) = 0u;
  *((_OWORD *)v13 + 39) = 0u;
  *((_OWORD *)v13 + 40) = 0u;
  *((_OWORD *)v13 + 41) = 0u;
  *((_QWORD *)v13 + 87) = 0x200000002;
  *((_OWORD *)v13 + 44) = 0u;
  *((_QWORD *)v13 + 90) = 0x800000008;
  *(_OWORD *)(v13 + 728) = 0u;
  *((_QWORD *)v13 + 93) = 1;
  v13[752] = 0;
  *(_QWORD *)(v13 + 756) = 1082130432;
  v13[784] = 0;
  *((_OWORD *)v13 + 48) = 0u;
  *(_OWORD *)(v13 + 788) = xmmword_191A93980;
  *((_DWORD *)v13 + 201) = 2;
  *(_OWORD *)(v13 + 808) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v13 + 103, "half");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v13 + 106, "none");
  v13[872] = 0;
  *((_DWORD *)v13 + 146) = v82;
  *((_DWORD *)v13 + 170) = 1;
  if (v17 <= v18)
    v29 = v18;
  else
    v29 = v17;
  v30 = v29 - 1;
  if ((v19 & 0xFFFE) == 2 || !(v19 | v75 | v80 | v21 | v74))
  {
    if (v30 >= 0xB || ((0x5DFu >> v30) & 1) == 0)
      goto LABEL_23;
    v31 = off_1E2DD5E38;
  }
  else
  {
    if (v30 >= 0xB || ((0x5DFu >> v30) & 1) == 0)
      goto LABEL_23;
    v31 = off_1E2DD5E90;
  }
  v32 = v31[v30];
  v33 = (void *)*((_QWORD *)v13 + 82);
  *((_QWORD *)v13 + 82) = v32;

  *((_QWORD *)v13 + 84) = 0x200000002;
LABEL_23:
  v35 = v76 == v15 && v15 > 1;
  v13[872] = v35;
  if (v76 >= 2)
  {
    objc_msgSend(*((id *)v13 + 82), "stringByAppendingString:", CFSTR("_groups"));
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = (void *)*((_QWORD *)v13 + 82);
    *((_QWORD *)v13 + 82) = v36;

  }
  *((_QWORD *)v13 + 84) = 0x300000002;
  v38 = *((id *)v13 + 82);
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("cool_%@"), v38);
  v39 = objc_claimAutoreleasedReturnValue();
  v40 = (void *)*((_QWORD *)v13 + 82);
  *((_QWORD *)v13 + 82) = v39;

  if ((_DWORD)v78)
    v41 = CFSTR("_ncc");
  else
    v41 = CFSTR("_");
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("morechan_t1x2%@xy_%@"), v41, v38);
  v42 = objc_claimAutoreleasedReturnValue();
  v43 = (void *)*((_QWORD *)v13 + 82);
  *((_QWORD *)v13 + 82) = v42;

  *((_DWORD *)v13 + 170) = 2;
  *((_QWORD *)v13 + 84) = 0x200000001;
  if (v29 >= 2)
  {
    if (v17 == 1)
    {
      v44 = CFSTR("morechan_t1x2%@y_%@");
LABEL_39:
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v44, v41, v38);
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = (void *)*((_QWORD *)v13 + 82);
      *((_QWORD *)v13 + 82) = v45;

      goto LABEL_40;
    }
    if (v18 == 1)
    {
      v44 = CFSTR("morechan_t1x2%@x_%@");
      goto LABEL_39;
    }
  }
LABEL_40:
  if (!*(_QWORD *)a1)
    goto LABEL_80;
  v81 = v29;
  if (!v47)
    goto LABEL_80;
  v48 = v47;
  v49 = *(std::__shared_weak_count **)(a1 + 8);
  if (v49)
  {
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
  }
  v79 = v49;
  if (objc_msgSend(v47[18], "supportsFeatureSet:", 11))
  {
    if (v76 <= 1)
      v52 = 1;
    else
      v52 = v76;
    v54 = v15 / v52 < 225 && v22 < 2;
    v55 = v77 < 2;
    v56 = !v54 || !v55;
    if (v54 && v55)
      v57 = 2;
    else
      v57 = 1;
    if (v56)
      v58 = CFSTR("morechan_t1x2");
    else
      v58 = CFSTR("morechan_t2x2");
    *((_DWORD *)v13 + 168) = v57;
    *(_QWORD *)(v13 + 676) = 0x200000002;
  }
  else
  {
    if (!objc_msgSend(v48[18], "supportsFeatureSet:", 7))
    {
      *((_DWORD *)v13 + 170) = 1;
      *((_QWORD *)v13 + 84) = 0x200000002;
      objc_msgSend(CFSTR("fourchan_"), "stringByAppendingString:", v38);
      v65 = objc_claimAutoreleasedReturnValue();

      v58 = CFSTR("morechan_t2x2");
      v38 = (id)v65;
      v59 = v72;
      v60 = 0x1E0CB3000;
      if (*((_DWORD *)v13 + 170) != 2)
        goto LABEL_67;
      goto LABEL_65;
    }
    *((_DWORD *)v13 + 170) = 2;
    *((_QWORD *)v13 + 84) = 0x200000001;
    v58 = CFSTR("morechan_t1x2");
  }
  v59 = v72;
  v60 = 0x1E0CB3000;
LABEL_65:
  if ((v59 & 7) != 0)
  {
    *((_DWORD *)v13 + 170) = 1;
    objc_msgSend(CFSTR("fourchan_"), "stringByAppendingString:", v38);
    v61 = objc_claimAutoreleasedReturnValue();

    v38 = (id)v61;
    v60 = 0x1E0CB3000uLL;
  }
LABEL_67:
  objc_msgSend(*(id *)(v60 + 2368), "stringWithFormat:", CFSTR("%@%@xy_%@"), v58, v41, v38);
  v62 = objc_claimAutoreleasedReturnValue();
  v63 = (void *)*((_QWORD *)v13 + 82);
  *((_QWORD *)v13 + 82) = v62;

  if (v81 < 2)
    goto LABEL_75;
  if (v17 == 1)
  {
    v64 = CFSTR("%@%@y_%@");
  }
  else
  {
    if (v18 != 1)
      goto LABEL_75;
    v64 = CFSTR("%@%@x_%@");
  }
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", v64, v58, v41, v38);
  v66 = objc_claimAutoreleasedReturnValue();
  v67 = (void *)*((_QWORD *)v13 + 82);
  *((_QWORD *)v13 + 82) = v66;

LABEL_75:
  if (v79)
  {
    v68 = (unint64_t *)&v79->__shared_owners_;
    v69 = v13 + 24;
    do
      v70 = __ldaxr(v68);
    while (__stlxr(v70 - 1, v68));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
    goto LABEL_81;
  }
LABEL_80:
  v69 = v13 + 24;
LABEL_81:

  *((_OWORD *)v13 + 55) = 0u;
  *((_OWORD *)v13 + 56) = 0u;
  *((_QWORD *)v13 + 3) = &off_1E2D7FAF8;
  *(_QWORD *)&v71 = v69;
  *((_QWORD *)&v71 + 1) = v13;
  *v73 = v71;
}

void sub_191890C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  void *v25;

  if (*(char *)(v23 + 871) < 0)
    operator delete(*a13);
  if (*(char *)(v23 + 847) < 0)
    operator delete(*a14);

  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a19);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v23);
  operator delete(v25);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_kernel_metal>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MetalLowmemEngine::convolution_kernel_metal>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::MetalLowmemEngine::context::context(uint64_t a1, _QWORD *a2, void *a3, int a4)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_QWORD *)Espresso::context_metal::context_metal(a1, a2, a3) = &off_1E2D814F8;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v10);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 24, &v10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *(_DWORD *)(a1 + 220) = a4;
  objc_msgSend(*(id *)(a1 + 160), "setKernelPrefix:", CFSTR("T2D_"));
  if (*(_DWORD *)(a1 + 220) == 1)
    objc_msgSend(*(id *)(a1 + 160), "setKernelPrefix:", CFSTR("TARR_"));
  *(_BYTE *)(a1 + 44) = 1;
  return a1;
}

void sub_191890E84(_Unwind_Exception *a1)
{
  id *v1;

  Espresso::context_metal::~context_metal(v1);
  _Unwind_Resume(a1);
}

void Espresso::create_metal_context(uint64_t a1, void *a2, void *a3)
{
  NSDictionary *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  Espresso::context_metal *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  id v14;
  int v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  v14 = a2;
  v5 = a3;
  if (v14)
  {
    v15 = 20000;
    Espresso::abstract_engine_factory::shared(&v18);
    Espresso::abstract_engine_factory::engine_for_platform(v18, &v15, &v16);
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
    if (*((_QWORD *)&v18 + 1))
    {
      v7 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = operator new(0xF8uLL);
    v9[1] = 0;
    v9[2] = 0;
    *v9 = &off_1E2DBB390;
    v10 = (Espresso::context_metal *)Espresso::MetalLowmemEngine::context::context((uint64_t)(v9 + 3), &v16, v14, 0);
    *(_QWORD *)&v18 = v10;
    *((_QWORD *)&v18 + 1) = v9;
    if (v5)
      Espresso::context_metal::load_wisdom_from_nsdictionary(v10, v5);
    *(_OWORD *)a1 = v18;
    v11 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }

}

void sub_191890FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);

  _Unwind_Resume(a1);
}

void Espresso::context_metal::load_wisdom_from_nsdictionary(Espresso::context_metal *this, NSDictionary *a2)
{
  NSDictionary *v3;
  void *v4;
  void *v5;
  void **v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void **v11;
  void *v12;
  NSDictionary *v13;
  std::runtime_error *exception;
  _DWORD v15[2];
  __int128 v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v19;

  v3 = a2;
  *(_BYTE *)(*((_QWORD *)this + 3) + 152) = 1;
  -[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", CFSTR("optimal_parameters"));
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  if (v4)
  {
    Espresso::wisdom::load_dict((Espresso::wisdom *)(*((_QWORD *)this + 3) + 192), v3);
  }
  else
  {
    v16 = 0uLL;
    v17 = 0;
    v15[0] = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
    v15[1] = 1;
    (*(void (**)(void **__return_ptr, Espresso::context_metal *))(*(_QWORD *)this + 24))(__p, this);
    v16 = *(_OWORD *)__p;
    v17 = v19;
    v5 = (void *)MEMORY[0x1E0CB3940];
    Espresso::wisdom_device_key::to_string((Espresso::wisdom_device_key *)v15, __p);
    if (v19 >= 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    objc_msgSend(v5, "stringWithUTF8String:", v6);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();

    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    v9 = *((_QWORD *)this + 3);
    if (!v8)
    {
      *(_BYTE *)(v9 + 152) = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Device not found in wisdom file");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v10 = (void *)MEMORY[0x1E0CB3940];
    Espresso::wisdom_device_key::to_string((Espresso::wisdom_device_key *)v15, __p);
    if (v19 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    objc_msgSend(v10, "stringWithUTF8String:", v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    -[NSDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", v12);
    v13 = (NSDictionary *)objc_claimAutoreleasedReturnValue();
    Espresso::wisdom::load_dict((Espresso::wisdom *)(v9 + 192), v13);

    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17) < 0)
      operator delete((void *)v16);
  }

}

void sub_191891200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a16 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::io_error,char const*,char const*>(const char *a1, const char *a2)
{
  Espresso::throw_exception_with_format<Espresso::io_error>("Could not parse wisdom file (%s): %s", a1, a2);
}

uint64_t Espresso::BinSerializer::BinSerializer_fseek(FILE *__stream, __sFILE *a2, const char *a3)
{
  char p;
  unsigned __int8 *v5;
  uint64_t v6;
  int v7;
  uint64_t __ptr;
  unsigned __int16 v10;
  uint64_t v11;

  p = (char)a2->_p;
  if (LOBYTE(a2->_p))
  {
    v5 = (unsigned __int8 *)&a2->_p + 1;
    v6 = 5381;
    do
    {
      v6 = 33 * v6 + p;
      v7 = *v5++;
      p = v7;
    }
    while (v7);
  }
  else
  {
    v6 = 5381;
  }
  while (1)
  {
    if (!fread(&__ptr, 0x28uLL, 1uLL, __stream))
      return 4294967290;
    if (__ptr == v6)
    {
      fseek(__stream, -40, 1);
      return 0;
    }
    if (v10 - 1 > 8)
      break;
    fseek(__stream, qword_191AC9BD8[(unsigned __int16)(v10 - 1)] * v11, 1);
  }
  return 4294967291;
}

uint64_t Espresso::BinSerializer::BinSerializer_fwriteBytes(FILE *this, __sFILE *a2, const char *a3, const void *a4)
{
  uint64_t v4;
  char p;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t __ptr;
  unsigned __int16 v21;
  char v22[7];
  char v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  const void *v27;

  v4 = 4294967293;
  if (this && a2 && a3)
  {
    p = (char)a2->_p;
    if (LOBYTE(a2->_p))
    {
      v10 = (unsigned __int8 *)&a2->_p + 1;
      v11 = 5381;
      do
      {
        v11 = 33 * v11 + p;
        v12 = *v10++;
        p = v12;
      }
      while (v12);
    }
    else
    {
      v11 = 5381;
    }
    v13 = MEMORY[0x19401D21C](this);
    fseek(this, 0, 2);
    if (MEMORY[0x19401D21C](this) >= 41)
    {
      fseek(this, 0, 0);
      while (fread(&__ptr, 0x28uLL, 1uLL, this))
      {
        if (__ptr == v11)
        {
          fseek(this, v13, 0);
          v4 = 4294967287;
          syslog(3, "BinSerializer error %d:%s in %s @ %s:%d\n", -9, "the hash is already used in the file", "BinSerializer_status Espresso::BinSerializer::BinSerializer_fwrite(FILE *, const char *, BinSerializer_dataType, const void *, size_t)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/BinSerializer/Custom_BinSerializer_Core.cpp", 195);
          return v4;
        }
        if (v21 - 1 > 8)
        {
          fseek(this, v13, 0);
          return 4294967291;
        }
        fseek(this, qword_191AC9BD8[(unsigned __int16)(v21 - 1)] * (_QWORD)v27, 1);
      }
    }
    fseek(this, v13, 0);
    v14 = (char)a2->_p;
    if (LOBYTE(a2->_p))
    {
      v15 = (unsigned __int8 *)&a2->_p + 1;
      v16 = 5381;
      do
      {
        v16 = 33 * v16 + v14;
        v17 = *v15++;
        v14 = v17;
      }
      while (v17);
    }
    else
    {
      v16 = 5381;
    }
    __ptr = v16;
    v21 = 9;
    strcpy(v22, "KRYSIA");
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0x406FE00000000000;
    v27 = a4;
    fseek(this, 0, 2);
    if (fwrite(&__ptr, 0x28uLL, 1uLL, this) == 1)
    {
      if ((const void *)fwrite(a3, 1uLL, (size_t)a4, this) == a4)
        return 0;
      v18 = 222;
    }
    else
    {
      v18 = 216;
    }
    v4 = 4294967289;
    syslog(3, "BinSerializer error %d:%s in %s @ %s:%d\n", -7, "I/O error", "BinSerializer_status Espresso::BinSerializer::BinSerializer_fwrite(FILE *, const char *, BinSerializer_dataType, const void *, size_t)", "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Espresso/Source/BinSerializer/Custom_BinSerializer_Core.cpp", v18);
  }
  return v4;
}

void Espresso::pass_mps_buffers_textures_interop::~pass_mps_buffers_textures_interop(Espresso::pass_mps_buffers_textures_interop *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_mps_buffers_textures_interop::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_mps_buffers_textures_interop::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  const void *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  int v39;
  Espresso::net *v40;
  Espresso::net *v41;
  Espresso::net *v42;
  BOOL v43;
  _QWORD *i;
  uint64_t *v45;
  unint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  uint64_t *v64;
  uint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  const void *v73;
  _QWORD *v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  _QWORD *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t **v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t *v99;
  unint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  _QWORD *j;
  void *v132;
  uint64_t *v133;
  char *v135;
  char *v136;
  void *lpsrc;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  std::__shared_weak_count *v142;
  unint64_t v143;
  void *__p;
  std::__shared_weak_count *v145;
  void *v146;
  __int128 v147;
  __int128 v148;
  int v149;
  __int128 v150;
  __int128 v151;
  int v152;
  uint64_t **v153;
  uint64_t *v154;
  uint64_t v155;

  v154 = 0;
  v155 = 0;
  v153 = &v154;
  v150 = 0u;
  v151 = 0u;
  v152 = 1065353216;
  v147 = 0u;
  v148 = 0u;
  v149 = 1065353216;
  v5 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  if (v4 != v5)
  {
    v6 = 0;
    v135 = (char *)a1 + 96;
    v136 = (char *)a1 + 56;
    v7 = &std::piecewise_construct;
    do
    {
      v8 = (uint64_t *)(v5 + 16 * v6);
      if (*(_DWORD *)(*v8 + 8) == 50000)
      {
        v141 = (unint64_t *)v6;
        __p = &v141;
        v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v136, (unint64_t *)&v141, (uint64_t)v7, (uint64_t **)&__p);
        __p = &v141;
        v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v135, (unint64_t *)&v141, (uint64_t)v7, (uint64_t **)&__p);
        v11 = v7;
        if (v10[4] != v10[3])
        {
          v12 = 0;
          do
          {
            (*(void (**)(void **__return_ptr, _QWORD, uint64_t, unint64_t))(**(_QWORD **)(*v8 + 64)
                                                                                           + 24))(&__p, *(_QWORD *)(*v8 + 64), 1, v12);
            if (__p && *((_QWORD *)__p + 9))
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v150, v10[3] + 24 * v12, v10[3] + 24 * v12);
            v13 = v145;
            if (v145)
            {
              p_shared_owners = (unint64_t *)&v145->__shared_owners_;
              do
                v15 = __ldaxr(p_shared_owners);
              while (__stlxr(v15 - 1, p_shared_owners));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
            ++v12;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10[4] - v10[3]) >> 3) > v12);
        }
        if (v9[4] != v9[3])
        {
          v16 = 0;
          do
          {
            (*(void (**)(void **__return_ptr, _QWORD, _QWORD, unint64_t))(**(_QWORD **)(*v8 + 64)
                                                                                          + 24))(&__p, *(_QWORD *)(*v8 + 64), 0, v16);
            if (__p && *((_QWORD *)__p + 9))
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v150, v9[3] + 24 * v16, v9[3] + 24 * v16);
            v17 = v145;
            if (v145)
            {
              v18 = (unint64_t *)&v145->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
            ++v16;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3) > v16);
        }
        v20 = *v8;
        v21 = *(const void **)(*v8 + 64);
        if (v21
        {
          v22 = *(std::__shared_weak_count **)(v20 + 72);
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
            do
              v25 = __ldaxr(v23);
            while (__stlxr(v25 - 1, v23));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v26 = v10[3];
          v27 = v10[4];
          while (v26 != v27)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v150, v26, v26);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v147, v26, v26);
            v26 += 24;
          }
        }
        v28 = *v8;
        v29 = *(const void **)(*v8 + 64);
        if (v29
        {
          v30 = *(std::__shared_weak_count **)(v28 + 72);
          if (v30)
          {
            v31 = (unint64_t *)&v30->__shared_owners_;
            do
              v32 = __ldxr(v31);
            while (__stxr(v32 + 1, v31));
            do
              v33 = __ldaxr(v31);
            while (__stlxr(v33 - 1, v31));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
              std::__shared_weak_count::__release_weak(v30);
            }
          }
          v34 = v9[3];
          v35 = v9[4];
          while (v34 != v35)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v150, v34, v34);
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v147, v34, v34);
            v34 += 24;
          }
        }
        v5 = *((_QWORD *)a1 + 4);
        v4 = *((_QWORD *)a1 + 5);
        v7 = v11;
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 4);
  }
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults", &v154);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v36, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v37, "objectForKeyedSubscript:", CFSTR("espresso.mps.enable_bufftex"));
  v38 = (void *)objc_claimAutoreleasedReturnValue();
  v39 = objc_msgSend(v38, "BOOLValue");

  if (v39)
  {
    v40 = (Espresso::net *)*((_QWORD *)a1 + 23);
    if (v40 != (Espresso::net *)((char *)a1 + 192))
    {
      do
      {
        if (*((_DWORD *)v40 + 19) <= 3u)
        {
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v150, (uint64_t)v40 + 32, (uint64_t)v40 + 32);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v147, (uint64_t)v40 + 32, (uint64_t)v40 + 32);
        }
        v41 = (Espresso::net *)*((_QWORD *)v40 + 1);
        if (v41)
        {
          do
          {
            v42 = v41;
            v41 = *(Espresso::net **)v41;
          }
          while (v41);
        }
        else
        {
          do
          {
            v42 = (Espresso::net *)*((_QWORD *)v40 + 2);
            v43 = *(_QWORD *)v42 == (_QWORD)v40;
            v40 = v42;
          }
          while (!v43);
        }
        v40 = v42;
      }
      while (v42 != (Espresso::net *)((char *)a1 + 192));
    }
  }
  if (!*((_QWORD *)&v151 + 1))
  {
    *(_BYTE *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    goto LABEL_199;
  }
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)&__p);
  for (i = (_QWORD *)v148; i; i = (_QWORD *)*i)
  {
    v45 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&__p, (uint64_t)(i + 2));
    if (v45)
    {
      v46 = v45[5];
      if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v46) + 8) == 50000)
        std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v153, v46, v46);
    }
  }
  v143 = 0;
  if (*((_QWORD *)a1 + 5) == *((_QWORD *)a1 + 4))
    goto LABEL_194;
  v47 = &std::piecewise_construct;
  do
  {
    v141 = &v143;
    v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v143, (uint64_t)v47, (uint64_t **)&v141);
    v141 = &v143;
    v49 = v47;
    v50 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 96, &v143, (uint64_t)v47, (uint64_t **)&v141);
    v51 = v143;
    v52 = *((_QWORD *)a1 + 4) + 16 * v143;
    v53 = v48[3];
    if (v48[4] == v53)
    {
LABEL_74:
      v56 = v154;
      if (!v154)
        goto LABEL_193;
      v57 = v154;
      while (1)
      {
        v58 = v57[4];
        if (v51 >= v58)
        {
          if (v58 >= v51)
            goto LABEL_85;
          ++v57;
        }
        v57 = (uint64_t *)*v57;
        if (!v57)
          goto LABEL_80;
      }
    }
    v54 = 0;
    v55 = 0;
    while (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v150, v53 + v54)|| (*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(*(_QWORD *)v52 + 64) + 32))(*(_QWORD *)(*(_QWORD *)v52 + 64), v55))
    {
      ++v55;
      v53 = v48[3];
      v54 += 24;
      if (v55 >= 0xAAAAAAAAAAAAAAABLL * ((v48[4] - v53) >> 3))
      {
        v51 = v143;
        goto LABEL_74;
      }
    }
LABEL_85:
    v60 = v50[3];
    v61 = v50[4];
    while (v60 != v61)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v150, v60, v60);
      v60 += 24;
    }
    std::__tree<unsigned long>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t *)&v153, v143, v143);
    v56 = v154;
    v51 = v143;
    if (!v154)
      goto LABEL_193;
LABEL_80:
    while (1)
    {
      v59 = v56[4];
      if (v51 >= v59)
        break;
LABEL_83:
      v56 = (uint64_t *)*v56;
      if (!v56)
        goto LABEL_193;
    }
    if (v59 < v51)
    {
      ++v56;
      goto LABEL_83;
    }
    v62 = *(_QWORD *)(*(_QWORD *)v52 + 64);
    v63 = *(const void **)(v62 + 8);
    if (v63)
    {
      if (v64)
      {
        v65 = v64;
        v66 = *(std::__shared_weak_count **)(v62 + 16);
        v141 = (unint64_t *)v64;
        v142 = v66;
        if (v66)
        {
          v67 = (unint64_t *)&v66->__shared_owners_;
          do
            v68 = __ldxr(v67);
          while (__stxr(v68 + 1, v67));
        }
        v69 = v64[29];
        v139 = v64[28];
        v140 = (std::__shared_weak_count *)v69;
        if (v69)
        {
          v70 = (unint64_t *)(v69 + 8);
          do
            v71 = __ldxr(v70);
          while (__stxr(v71 + 1, v70));
        }
        Espresso::make_new_kernel(v52, (uint64_t)&v139, &lpsrc);
        if (lpsrc)
        {
          (*(void (**)(void *, uint64_t))(*(_QWORD *)lpsrc + 48))(lpsrc, *(_QWORD *)v52 + 64);
          v72 = *(_QWORD *)v52;
          v73 = *(const void **)(*(_QWORD *)v52 + 64);
          if (v73)
          {
            if (v74)
            {
              v75 = v74;
              v76 = *(std::__shared_weak_count **)(v72 + 72);
              if (v76)
              {
                v77 = (unint64_t *)&v76->__shared_owners_;
                do
                  v78 = __ldxr(v77);
                while (__stxr(v78 + 1, v77));
              }
              v79 = lpsrc;
              if (lpsrc)
              {
                v80 = v75;
                if (v79)
                {
                  v81 = v138;
                  v75 = v80;
                  if (v138)
                  {
                    v82 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v83 = __ldxr(v82);
                    while (__stxr(v83 + 1, v82));
                  }
                }
                else
                {
                  v81 = 0;
                  v75 = v80;
                }
              }
              else
              {
                v81 = 0;
              }
              v106 = v75[42];
              v105 = v75[43];
              if (v105)
              {
                v107 = (unint64_t *)(v105 + 16);
                do
                  v108 = __ldxr(v107);
                while (__stxr(v108 + 1, v107));
              }
              v109 = (std::__shared_weak_count *)*((_QWORD *)v79 + 43);
              *((_QWORD *)v79 + 42) = v106;
              *((_QWORD *)v79 + 43) = v105;
              if (v109)
                std::__shared_weak_count::__release_weak(v109);
              if (v81)
              {
                v110 = (unint64_t *)&v81->__shared_owners_;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
                if (!v111)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              if (v76)
              {
                v112 = (unint64_t *)&v76->__shared_owners_;
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
LABEL_174:
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                  std::__shared_weak_count::__release_weak(v76);
                }
              }
            }
            else
            {
              if (v97)
              {
                v98 = v97;
                v76 = *(std::__shared_weak_count **)(v72 + 72);
                if (v76)
                {
                  v99 = (unint64_t *)&v76->__shared_owners_;
                  do
                    v100 = __ldxr(v99);
                  while (__stxr(v100 + 1, v99));
                }
                v101 = lpsrc;
                if (lpsrc
                {
                  v102 = v138;
                  if (v138)
                  {
                    v103 = (unint64_t *)&v138->__shared_owners_;
                    do
                      v104 = __ldxr(v103);
                    while (__stxr(v104 + 1, v103));
                  }
                }
                else
                {
                  v102 = 0;
                }
                v115 = v98[38];
                v114 = v98[39];
                if (v114)
                {
                  v116 = (unint64_t *)(v114 + 16);
                  do
                    v117 = __ldxr(v116);
                  while (__stxr(v117 + 1, v116));
                }
                v118 = (std::__shared_weak_count *)*((_QWORD *)v101 + 39);
                *((_QWORD *)v101 + 38) = v115;
                *((_QWORD *)v101 + 39) = v114;
                if (v118)
                  std::__shared_weak_count::__release_weak(v118);
                if (v102)
                {
                  v119 = (unint64_t *)&v102->__shared_owners_;
                  do
                    v120 = __ldaxr(v119);
                  while (__stlxr(v120 - 1, v119));
                  if (!v120)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                if (v76)
                {
                  v121 = (unint64_t *)&v76->__shared_owners_;
                  do
                    v113 = __ldaxr(v121);
                  while (__stlxr(v113 - 1, v121));
                  goto LABEL_174;
                }
              }
            }
          }
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)v52 + 64), (uint64_t)lpsrc, (uint64_t)v138);
          *(_DWORD *)(*(_QWORD *)v52 + 8) = (***(uint64_t (****)(_QWORD))(v65[28] + 8))(*(_QWORD *)(v65[28] + 8));
        }
        else
        {
          if (v154)
          {
            v84 = v133;
            v85 = v154;
            do
            {
              v86 = v85;
              v87 = v84;
              v88 = v85[4];
              v89 = v85 + 1;
              if (v88 >= v143)
                v84 = v85;
              else
                ++v85;
              v85 = (uint64_t *)*v85;
            }
            while (v85);
            if (v84 != v133)
            {
              if (v88 < v143)
                v86 = v87;
              if (v143 >= v86[4])
              {
                v90 = v87 + 1;
                if (v88 >= v143)
                  v91 = v89;
                else
                  v91 = v90;
                v92 = (uint64_t *)*v91;
                v93 = v84;
                if (*v91)
                {
                  do
                  {
                    v94 = (uint64_t **)v92;
                    v92 = (uint64_t *)*v92;
                  }
                  while (v92);
                }
                else
                {
                  do
                  {
                    v94 = (uint64_t **)v93[2];
                    v43 = *v94 == v93;
                    v93 = (uint64_t *)v94;
                  }
                  while (!v43);
                }
                if (v153 == (uint64_t **)v84)
                  v153 = v94;
                --v155;
                std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v154, v84);
                operator delete(v84);
              }
            }
          }
          v95 = v50[3];
          v96 = v50[4];
          while (v95 != v96)
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__erase_unique<std::string>(&v150, v95);
            v95 += 24;
          }
        }
        v122 = v138;
        if (v138)
        {
          v123 = (unint64_t *)&v138->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            std::__shared_weak_count::__release_weak(v122);
          }
        }
        v125 = v140;
        if (v140)
        {
          v126 = (unint64_t *)&v140->__shared_owners_;
          do
            v127 = __ldaxr(v126);
          while (__stlxr(v127 - 1, v126));
          if (!v127)
          {
            ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
            std::__shared_weak_count::__release_weak(v125);
          }
        }
        v128 = v142;
        if (v142)
        {
          v129 = (unint64_t *)&v142->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
      }
    }
    v51 = v143;
LABEL_193:
    v143 = v51 + 1;
    v47 = v49;
  }
  while (v51 + 1 < (uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4);
LABEL_194:
  for (j = (_QWORD *)v151; j; j = (_QWORD *)*j)
  {
    v141 = j + 2;
    *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1 + 44, j + 2, (uint64_t)&std::piecewise_construct, (__int128 **)&v141)+ 17) = -1;
  }
  *(_BYTE *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v146);
  v132 = __p;
  __p = 0;
  if (v132)
    operator delete(v132);
LABEL_199:

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v147);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v150);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v153, v154);
}

void sub_1918921E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  void *v17;
  uint64_t v18;
  va_list va;

  va_start(va, a17);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v18 - 160);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v18 - 112, *(_QWORD **)(v18 - 104));
  _Unwind_Resume(a1);
}

void Espresso::pass_block_transform::~pass_block_transform(Espresso::pass_block_transform *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_block_transform::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_block_transform::run_on_network(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

void Espresso::MPSGraphEngine::compiler::~compiler(Espresso::MPSGraphEngine::compiler *this)
{
  Espresso::MPSGraphEngine::compiler::~compiler(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(_QWORD *)this = &off_1E2D66DC8;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)this + 26, 0);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 24));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*((_QWORD **)this + 21));
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*((char **)this + 18));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  *(_QWORD *)this = off_1E2D94680;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v4 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(_QWORD *)this = off_1E2D5FD08;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void Espresso::MPSGraphEngine::compiler::build(_QWORD *a1, uint64_t a2)
{
  __int128 *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 *i;
  char *v11;
  const void *v12;
  Espresso::MPSGraphEngine::blob_container *v13;
  Espresso::MPSGraphEngine::blob_container *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t j;
  char v29;
  uint64_t v30;
  __int128 **v31;
  __int128 *v32;
  __int128 *v33;
  char *v34;
  const void *v35;
  Espresso::MPSGraphEngine::blob_container *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t k;
  unint64_t *v54;
  unint64_t v55;
  std::runtime_error *v56;
  std::runtime_error *exception;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  char *v66;
  std::__shared_weak_count *v67;
  char *v68;
  std::__shared_weak_count *v69;
  Espresso::MPSGraphEngine::blob_container *v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  _OWORD v74[2];
  int v75;
  __int128 *v76[3];
  _QWORD v77[2];
  void *__p;
  void *v79;
  __int128 *v80[5];
  void *v81[7];

  v81[5] = *(void **)MEMORY[0x1E0C80C00];
  if (a1)
  {
    v65 = a1;
    Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)v80);
    std::shared_ptr<MIL::MILContext>::operator=[abi:ne180100]<MIL::MILContext,std::default_delete<MIL::MILContext>,void>(v65 + 27, (uint64_t *)v80);
    v4 = v80[0];
    v80[0] = 0;
    if (v4)
      (*(void (**)(__int128 *))(*(_QWORD *)v4 + 8))(v4);
  }
  Espresso::net_compiler_segment_based::build(a1, a2);
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = std::__shared_weak_count::lock(v5)) == 0 || (v64 = v6, (v59 = (uint64_t *)a1[1]) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memset(v74, 0, sizeof(v74));
  v75 = 1065353216;
  v7 = a1[4];
  v58 = (uint64_t **)a1;
  v60 = a1[5];
  if (v7 != v60)
  {
    do
    {
      std::unordered_set<std::string>::unordered_set((uint64_t)v80, v7 + 16);
      v61 = v7;
      std::unordered_set<std::string>::unordered_set((uint64_t)v81, v7 + 56);
      v8 = 0;
      v9 = 0;
      do
      {
        v63 = v8;
        for (i = v80[5 * v9 + 2]; i; i = *(__int128 **)i)
        {
          v76[0] = i + 1;
          v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v59 + 17), (unsigned __int8 *)i + 16, v76);
          v12 = (const void *)*((_QWORD *)v11 + 5);
          if (!v12
          {
            v56 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
            Espresso::invalid_state_error::invalid_state_error(v56);
          }
          v14 = v13;
          v15 = (std::__shared_weak_count *)*((_QWORD *)v11 + 6);
          if (v15)
          {
            p_shared_owners = (unint64_t *)&v15->__shared_owners_;
            do
              v17 = __ldxr(p_shared_owners);
            while (__stxr(v17 + 1, p_shared_owners));
          }
          v18 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58 + 23, (_QWORD *)i + 2, (uint64_t)(i + 1))+ 14);
          v19 = (std::__shared_weak_count *)operator new(0x98uLL);
          v19->__shared_owners_ = 0;
          v20 = (unint64_t *)&v19->__shared_owners_;
          v19->__shared_weak_owners_ = 0;
          v19->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7570;
          *(_OWORD *)&v19[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v19[3].__shared_owners_ = 0u;
          *(_OWORD *)&v19[4].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v19[5].__shared_owners_ = 0u;
          v19[5].__shared_weak_owners_ = 0;
          v19[6].__vftable = 0;
          *(_OWORD *)&v19[1].__shared_owners_ = 0u;
          v19[2].std::__shared_count = 0u;
          v19[4].std::__shared_count = 0u;
          LODWORD(v19[2].__vftable) = 1065353216;
          v19[2].__shared_owners_ = 0x1FFFFFFFFLL;
          v19[2].__shared_weak_owners_ = 0;
          v19[3].__vftable = 0;
          LOBYTE(v19[3].__shared_weak_owners_) = 0;
          v19[3].__shared_owners_ = 0;
          v19[5].__vftable = 0;
          v19[5].__shared_owners_ = 0;
          LOBYTE(v19[6].__vftable) = 0;
          v19[4].__vftable = 0;
          v19[4].__shared_owners_ = 0;
          LOBYTE(v19[4].__shared_weak_owners_) = 0;
          v19[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D629B0;
          LOBYTE(v19[1].__shared_owners_) = 1;
          HIDWORD(v19[1].__shared_owners_) = v18;
          Espresso::abstract_blob_container::shape((char *)v76, (uint64_t)v14);
          v72 = v19 + 1;
          v73 = v19;
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 1, v20));
          (*(void (**)(Espresso::MPSGraphEngine::blob_container *, __int128 **, std::__shared_weak_count **))(*(_QWORD *)v14 + 16))(v14, v76, &v72);
          v22 = v73;
          if (v73)
          {
            v23 = (unint64_t *)&v73->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          Espresso::MPSGraphEngine::blob_container::force_allocate(v14);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v74, (uint64_t)(i + 1), (uint64_t)(i + 1));
          if (__p)
          {
            v79 = __p;
            operator delete(__p);
          }
          do
            v25 = __ldaxr(v20);
          while (__stlxr(v25 - 1, v20));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
          if (v15)
          {
            v26 = (unint64_t *)&v15->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
        v8 = 1;
        v9 = 1;
      }
      while ((v63 & 1) == 0);
      for (j = 5; j != -5; j -= 5)
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v80[j]);
      v7 = v61 + 120;
    }
    while (v61 + 120 != v60);
  }
  memset(v76, 0, sizeof(v76));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v76, v59[80], v59[81], 0xAAAAAAAAAAAAAAABLL * ((v59[81] - v59[80]) >> 3));
  v77[0] = 0;
  v77[1] = 0;
  __p = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v77, v59[83], v59[84], 0xAAAAAAAAAAAAAAABLL * ((v59[84] - v59[83]) >> 3));
  v29 = 0;
  v30 = 0;
  do
  {
    v62 = v29;
    v31 = &v76[3 * v30];
    v32 = *v31;
    v33 = v31[1];
    while (v32 != v33)
    {
      v80[0] = v32;
      v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v59 + 17), (unsigned __int8 *)v32, v80);
      v35 = (const void *)*((_QWORD *)v34 + 5);
      if (v35)
      {
        if (v36)
        {
          v37 = (uint64_t)v36;
          v38 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
          v70 = v36;
          v71 = v38;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldxr(v39);
            while (__stxr(v40 + 1, v39));
          }
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v74, (uint64_t)v32))
          {
            if (!v38)
              goto LABEL_67;
LABEL_63:
            v51 = (unint64_t *)&v38->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
            goto LABEL_67;
          }
          v41 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::compute_path>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::compute_path>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::compute_path>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v58 + 23, v32, (uint64_t)v32)+ 14);
          v42 = operator new(0x98uLL);
          v42[1] = 0;
          v43 = v42 + 1;
          v42[2] = 0;
          *v42 = &off_1E2DB7570;
          *((_OWORD *)v42 + 4) = 0u;
          *((_OWORD *)v42 + 5) = 0u;
          *((_OWORD *)v42 + 7) = 0u;
          *((_OWORD *)v42 + 8) = 0u;
          v42[17] = 0;
          v42[18] = 0;
          *((_OWORD *)v42 + 2) = 0u;
          *((_OWORD *)v42 + 3) = 0u;
          *((_OWORD *)v42 + 6) = 0u;
          *((_DWORD *)v42 + 12) = 1065353216;
          v42[7] = 0x1FFFFFFFFLL;
          v42[8] = 0;
          v42[9] = 0;
          *((_BYTE *)v42 + 88) = 0;
          v42[10] = 0;
          v42[15] = 0;
          v42[16] = 0;
          *((_BYTE *)v42 + 144) = 0;
          v42[12] = 0;
          v42[13] = 0;
          *((_BYTE *)v42 + 112) = 0;
          v42[3] = &off_1E2D629B0;
          v68 = (char *)(v42 + 3);
          v69 = (std::__shared_weak_count *)v42;
          *((_BYTE *)v42 + 32) = 1;
          *((_DWORD *)v42 + 9) = v41;
          Espresso::abstract_blob_container::shape((char *)v80, v37);
          v66 = (char *)(v42 + 3);
          v67 = (std::__shared_weak_count *)v42;
          do
            v44 = __ldxr(v43);
          while (__stxr(v44 + 1, v43));
          (*(void (**)(uint64_t, __int128 **, char **))(*(_QWORD *)v37 + 16))(v37, v80, &v66);
          v45 = v67;
          if (v67)
          {
            v46 = (unint64_t *)&v67->__shared_owners_;
            do
              v47 = __ldaxr(v46);
            while (__stlxr(v47 - 1, v46));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          Espresso::MPSGraphEngine::blob_container::force_allocate(v70);
          if (v81[0])
          {
            v81[1] = v81[0];
            operator delete(v81[0]);
          }
          v48 = v69;
          if (v69)
          {
            v49 = (unint64_t *)&v69->__shared_owners_;
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          v38 = v71;
          if (v71)
            goto LABEL_63;
        }
      }
LABEL_67:
      v32 = (__int128 *)((char *)v32 + 24);
    }
    v29 = 1;
    v30 = 1;
  }
  while ((v62 & 1) == 0);
  for (k = 3; k != -3; k -= 3)
  {
    v80[0] = (__int128 *)&v76[k];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v80);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v74);
  v54 = (unint64_t *)&v64->__shared_owners_;
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (!v55)
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  Espresso::MPSGraphCompilerEngine::compiler::mil_context_in_memory_scoped::~mil_context_in_memory_scoped((Espresso::MPSGraphCompilerEngine::compiler::mil_context_in_memory_scoped *)&v65);
}

void sub_191892A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  uint64_t v40;
  uint64_t v42;

  v42 = *(_QWORD *)(v40 - 192);
  *(_QWORD *)(v40 - 192) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::compiler::dump_ir(Espresso *a1, uint64_t *a2)
{
  Espresso *v3;
  NSObject *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  std::string *v11;
  void *v12;
  void (***v13)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  std::string *v23;
  void **v24;
  std::string *v25;
  std::string::size_type size;
  std::string *v27;
  __int128 v28;
  std::__fs::filesystem::path *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  Espresso *v37;
  const char *v38;
  void **v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  std::string *v46;
  NSObject *v47;
  const std::__fs::filesystem::path *v48;
  Espresso *v49;
  const char *v50;
  NSObject *v51;
  void **v52;
  void *v53;
  std::string::size_type *v54;
  std::string::size_type *v55;
  uint64_t v56;
  std::string::size_type v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  void *v67;
  _QWORD *v68;
  void *v69;
  void *v70;
  void *v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string *v81;
  std::runtime_error *exception;
  void *v83;
  void *v84;
  Espresso *v85;
  uint64_t v86;
  id v87;
  void *v88;
  void *v89[2];
  char v90;
  void *v91[3];
  void *__p[2];
  char v93;
  void *v94[2];
  char v95;
  uint8_t v96[8];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[5];
  std::__shared_weak_count *v102;
  std::string v103;
  void *v104[2];
  unsigned __int8 v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  std::string *v108;
  std::__fs::filesystem::path v109;
  std::string v110;
  std::string v111;
  std::__fs::filesystem::path v112;
  _QWORD v113[3];
  _QWORD v114[3];
  std::string buf;
  uint64_t v116;

  v3 = a1;
  v116 = *MEMORY[0x1E0C80C00];
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1])
    {
LABEL_3:
      if (!a1)
        goto LABEL_10;
      goto LABEL_9;
    }
  }
  else if (*((_BYTE *)a2 + 23))
  {
    goto LABEL_3;
  }
  Espresso::espresso_os_log_subsystem(a1, (const char *)a2);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v96 = 0;
    _os_log_debug_impl(&dword_190DAF000, v5, OS_LOG_TYPE_DEBUG, "[Espresso::MPSGraphEngine] Provide a non-null directory for IR dump.", v96, 2u);
  }

  v3 = a1;
  if (a1)
  {
LABEL_9:
    v6 = (_QWORD *)operator new();
    v6[2] = 0;
    v6[1] = 0;
    *v6 = v6 + 1;
    *(_QWORD *)v96 = 0;
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)v3 + 26, (uint64_t)v6);
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)v96, 0);
  }
LABEL_10:
  v106 = 0;
  v107 = 0;
  v85 = v3;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
  if (!v7
    || (v8 = std::__shared_weak_count::lock(v7), (v107 = v8) == 0)
    || (v106 = *((_QWORD *)v3 + 1), (v86 = v106) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = v8;
  std::string::basic_string[abi:ne180100]<0>(v104, "net");
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v10);
  v88 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(v86 + 471) < 0)
    std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(v86 + 448), *(_QWORD *)(v86 + 456));
  else
    v103 = *(std::string *)(v86 + 448);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v103.__r_.__value_.__l.__size_)
    {
      v11 = (std::string *)v103.__r_.__value_.__r.__words[0];
      goto LABEL_24;
    }
LABEL_25:
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v88, 1, 0, 0);
    goto LABEL_26;
  }
  if (!*((_BYTE *)&v103.__r_.__value_.__s + 23))
    goto LABEL_25;
  v11 = &v103;
LABEL_24:
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v11);
  v12 = v88;
  v88 = (void *)objc_claimAutoreleasedReturnValue();
LABEL_26:

  v13 = (void (***)(uint64_t *__return_ptr, _QWORD))*((_QWORD *)v85 + 13);
  v101[0] = MEMORY[0x1E0C809B0];
  v101[1] = 3321888768;
  v101[2] = ___ZN8Espresso14MPSGraphEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
  v101[3] = &__block_descriptor_48_ea8_32c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE_e10_v16__0r_v8l;
  v101[4] = v86;
  v102 = v9;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v15 = __ldxr(p_shared_owners);
  while (__stxr(v15 + 1, p_shared_owners));
  Espresso::abstract_context::compute_batch_sync(v13, v101);
  v96[0] = 1;
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  *(_DWORD *)&v96[4] = 723714120;
  kdebug_trace();
  v16 = (_QWORD *)(v86 + 592);
  if (*(char *)(v86 + 615) < 0)
    v16 = (_QWORD *)*v16;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v16, 1);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v17, "stringByDeletingLastPathComponent");
  v87 = (id)objc_claimAutoreleasedReturnValue();

  v18 = (_QWORD *)*((_QWORD *)v85 + 26);
  v21 = (_QWORD *)*v18;
  v19 = v18 + 1;
  v20 = v21;
  if (v21 != v19)
  {
    do
    {
      if ((v105 & 0x80u) == 0)
        v22 = v105;
      else
        v22 = (size_t)v104[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v111, v22 + 10);
      if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = &v111;
      else
        v23 = (std::string *)v111.__r_.__value_.__r.__words[0];
      if (v22)
      {
        if ((v105 & 0x80u) == 0)
          v24 = v104;
        else
          v24 = (void **)v104[0];
        memmove(v23, v24, v22);
      }
      strcpy((char *)v23 + v22, "__segment_");
      std::to_string(&v110, *((_DWORD *)v20 + 8));
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = &v110;
      else
        v25 = (std::string *)v110.__r_.__value_.__r.__words[0];
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
      else
        size = v110.__r_.__value_.__l.__size_;
      v27 = std::string::append(&v111, (const std::string::value_type *)v25, size);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v112.__pn_.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v112.__pn_.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v110.__r_.__value_.__l.__data_);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      if ((v112.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v112;
      else
        v29 = (std::__fs::filesystem::path *)v112.__pn_.__r_.__value_.__r.__words[0];
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.mil"), v29);
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "stringByAppendingPathComponent:", v30);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = v20[5];
      v33 = objc_retainAutorelease(v31);
      std::string::basic_string[abi:ne180100]<0>(v94, (char *)objc_msgSend(v33, "UTF8String"));
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v87), "UTF8String"));
      memset(v91, 0, sizeof(v91));
      Espresso::MILUtil::SerializeProgram(v32, (uint64_t)v94, (uint64_t)__p, (uint64_t)v91, 0, 0);
      if (v93 < 0)
        operator delete(__p[0]);
      if (v95 < 0)
        operator delete(v94[0]);

      if (SHIBYTE(v112.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v112.__pn_.__r_.__value_.__l.__data_);
      v34 = (_QWORD *)v20[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v20[2];
          v66 = *v35 == (_QWORD)v20;
          v20 = v35;
        }
        while (!v66);
      }
      v20 = v35;
    }
    while (v35 != v19);
  }
  v36 = *(_QWORD *)(v86 + 576);
  if (v36)
    v37 = (Espresso *)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)v36 + 40))(v89);
  else
    v37 = (Espresso *)std::string::basic_string[abi:ne180100]<0>(v89, "");
  if (v90 < 0)
  {
    if (v89[1])
    {
      v39 = (void **)v89[0];
      goto LABEL_75;
    }
  }
  else if (v90)
  {
    v39 = v89;
LABEL_75:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v39);
    v40 = (id)objc_claimAutoreleasedReturnValue();
    v41 = v88;
    v42 = v87;
    v43 = objc_retainAutorelease(v40);
    v109.__pn_.__r_.__value_.__r.__words[0] = objc_msgSend(v43, "UTF8String");
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v111, (std::string **)&v109);
    v44 = objc_retainAutorelease(v42);
    buf.__r_.__value_.__r.__words[0] = objc_msgSend(v44, "UTF8String");
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v110, (std::string **)&buf);
    std::__fs::filesystem::relative[abi:ne180100]((const std::__fs::filesystem::path *)&v111, (const std::__fs::filesystem::path *)&v110, &v112);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v45 = objc_retainAutorelease(v41);
    v110.__r_.__value_.__r.__words[0] = objc_msgSend(v45, "UTF8String");
    v46 = std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v111, (std::string **)&v110);
    std::__fs::filesystem::operator/[abi:ne180100](&v112, (uint64_t)v46, (std::__fs::filesystem::path *)&v110);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v109, (std::__fs::filesystem::path *)&v110);
    std::__fs::filesystem::__create_directory(&v109, 0);
    v47 = objc_retainAutorelease(v43);
    v108 = (std::string *)-[NSObject UTF8String](v47, "UTF8String");
    v48 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&buf, &v108);
    std::__fs::filesystem::__copy(v48, (const std::__fs::filesystem::path *)&v110, (std::__fs::filesystem::copy_options)0, 0);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    Espresso::espresso_os_log_subsystem(v49, v50);
    v51 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
    {
      v81 = &v110;
      if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v81 = (std::string *)v110.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v81;
      _os_log_debug_impl(&dword_190DAF000, v51, OS_LOG_TYPE_DEBUG, "[MPSGraphCompiler::dump_ir] weights dumped to: %s", (uint8_t *)&buf, 0xCu);
    }

    if (SHIBYTE(v109.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v109.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__pn_.__r_.__value_.__l.__data_);

    goto LABEL_93;
  }
  Espresso::espresso_os_log_subsystem(v37, v38);
  v47 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v112.__pn_.__r_.__value_.__l.__data_) = 0;
    _os_log_debug_impl(&dword_190DAF000, v47, OS_LOG_TYPE_DEBUG, "[MPSGraphCompiler::dump_ir] Failed to find weights file, or network does not have weights.", (uint8_t *)&v112, 2u);
  }
LABEL_93:

  v52 = v104;
  if ((v105 & 0x80u) != 0)
    v52 = (void **)v104[0];
  objc_msgSend(v88, "stringByAppendingFormat:", CFSTR("/%s_mpsgraph_aux.json"), v52);
  v83 = (void *)objc_claimAutoreleasedReturnValue();
  v84 = (void *)objc_opt_new();
  v53 = (void *)objc_opt_new();
  v54 = *(std::string::size_type **)(v86 + 32);
  v55 = *(std::string::size_type **)(v86 + 40);
  if (v54 != v55)
  {
    v56 = 0;
    do
    {
      v57 = *v54;
      v58 = (std::__shared_weak_count *)v54[1];
      v112.__pn_.__r_.__value_.__r.__words[0] = *v54;
      v112.__pn_.__r_.__value_.__l.__size_ = (std::string::size_type)v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      if (*(_DWORD *)(v57 + 8) == 50005)
        goto LABEL_115;
      v61 = (uint64_t *)(v57 + 40);
      v62 = *(char *)(v57 + 63);
      if (v62 < 0)
      {
        if (*(_QWORD *)(v57 + 48) != 16)
          goto LABEL_110;
        v63 = (uint64_t *)*v61;
      }
      else
      {
        v63 = (uint64_t *)(v57 + 40);
        if (v62 != 16)
          goto LABEL_110;
      }
      v65 = *v63;
      v64 = v63[1];
      v66 = v65 == 0x5F747865746E6F63 && v64 == 0x726566736E617274;
      if (!v66)
      {
LABEL_110:
        v113[0] = CFSTR("ilayer");
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v56);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        v114[0] = v67;
        v113[1] = CFSTR("name");
        v68 = (_QWORD *)(v57 + 16);
        if (*(char *)(v57 + 39) < 0)
          v68 = (_QWORD *)*v68;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v68);
        v69 = (void *)objc_claimAutoreleasedReturnValue();
        v114[1] = v69;
        v113[2] = CFSTR("type");
        if (*(char *)(v57 + 63) < 0)
          v61 = (uint64_t *)*v61;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v61);
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        v114[2] = v70;
        objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v114, v113, 3);
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v53, "addObject:", v71);

      }
LABEL_115:
      if (v58)
      {
        v72 = (unint64_t *)&v58->__shared_owners_;
        do
          v73 = __ldaxr(v72);
        while (__stlxr(v73 - 1, v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      v56 = (v56 + 1);
      v54 += 2;
    }
    while (v54 != v55);
  }
  objc_msgSend(v84, "setObject:forKeyedSubscript:", v53, CFSTR("unsupported"));
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v84, 1, 0);
  v74 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "writeToFile:atomically:", v83, 1);

  if (v90 < 0)
    operator delete(v89[0]);

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v96);
  v75 = v102;
  if (v102)
  {
    v76 = (unint64_t *)&v102->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);

  if ((char)v105 < 0)
    operator delete(v104[0]);
  v78 = v107;
  if (v107)
  {
    v79 = (unint64_t *)&v107->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v85)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)v85 + 26, 0);
}

void sub_191893798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59)
{
  void *v59;

  if (a52 < 0)
    operator delete(__p);

  if (a58 < 0)
    operator delete(a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  if (a15)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100]((uint64_t *)(a15 + 208), 0);
  _Unwind_Resume(a1);
}

void sub_1918937A4()
{
  JUMPOUT(0x191893AE4);
}

void sub_1918937AC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  Espresso *v69;
  const char *v70;
  NSObject *v71;
  uint64_t v72;

  if (*(char *)(v67 - 105) < 0)
    operator delete(*(void **)(v67 - 128));
  if (a2 == 1)
  {
    v69 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v69, v70);
    v71 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
    {
      v72 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v69 + 16))(v69);
      *(_DWORD *)(v67 - 128) = 136315138;
      *(_QWORD *)(v67 - 124) = v72;
      _os_log_debug_impl(&dword_190DAF000, v71, OS_LOG_TYPE_DEBUG, "[MPSGraphCompiler::dump_ir] failed to dump weights file - maybe it already exists? Error: %s", (uint8_t *)(v67 - 128), 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1918932ECLL);
  }
  if (a64 < 0)
    operator delete(__p);
  if (*(char *)(v67 - 233) < 0)
    operator delete(*(void **)(v67 - 256));
  if (*(char *)(v67 - 209) < 0)
    operator delete(*(void **)(v67 - 232));
  if (*(char *)(v67 - 185) < 0)
    operator delete(*(void **)(v67 - 208));

  if (a24 < 0)
    operator delete(a19);

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a34);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a11);
  JUMPOUT(0x191893AD4);
}

void sub_191893800()
{
  __cxa_end_catch();
  JUMPOUT(0x191893808);
}

void sub_19189381C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_191893854()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  if (*(char *)(v3 - 233) < 0)
    operator delete(*(void **)(v3 - 256));
  if (*(char *)(v3 - 209) < 0)
    JUMPOUT(0x191893984);

  JUMPOUT(0x191893A1CLL);
}

void sub_19189386C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    JUMPOUT(0x191893AB8);
  JUMPOUT(0x191893ABCLL);
}

void sub_191893898()
{
  void *v0;

  JUMPOUT(0x191893AC4);
}

void sub_1918938A4()
{
  JUMPOUT(0x191893AC4);
}

void sub_1918938AC()
{
  JUMPOUT(0x191893ACCLL);
}

void sub_1918938B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59)
{
  if (a52 < 0)
    operator delete(a47);

  if (a58 < 0)
    operator delete(a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a59);
  if (a15)
    std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](a15 + 208, 0);
  _Unwind_Resume(a1);
}

void sub_1918938C0()
{
  JUMPOUT(0x191893AECLL);
}

void sub_1918938CC()
{
  JUMPOUT(0x1918938D4);
}

void sub_191893958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(a56);
  JUMPOUT(0x191893828);
}

void sub_1918939A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  JUMPOUT(0x191893B0CLL);
}

void sub_1918939C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;

  JUMPOUT(0x191893A1CLL);
}

void sub_1918939CC()
{
  void *v0;
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 208);
  JUMPOUT(0x191893A08);
}

void sub_191893A2C()
{
  JUMPOUT(0x191893ABCLL);
}

void sub_191893A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 209) < 0)
    operator delete(*(void **)(v31 - 232));

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a11);
  JUMPOUT(0x191893AD4);
}

void sub_191893A60(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (*(char *)(v36 - 185) < 0)
    JUMPOUT(0x191893AB8);
  JUMPOUT(0x191893ABCLL);
}

uint64_t Espresso::MPSGraphEngine::compiler::build_segment(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t **v11;
  std::string::size_type *v12;
  std::string::size_type **v13;
  std::string::size_type size;
  std::string::size_type v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t Function;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t ExternalName;
  std::string *v33;
  _OWORD *v34;
  __int128 v35;
  std::string::size_type v36;
  std::string *v37;
  _QWORD *v38;
  _QWORD *v39;
  BOOL v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  __int128 v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t *v56;
  uint64_t v57;
  MIL::IRValueType **v58;
  std::string::size_type v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  uint64_t *v63;
  void *v64;
  _BYTE *v65;
  Espresso *v66;
  const char *v67;
  NSObject *v68;
  std::string::size_type v69;
  void *v70;
  void *v71;
  id v72;
  void *v73;
  void *v74;
  void *v75;
  uint64_t **v76;
  uint64_t **v77;
  uint64_t v78;
  uint64_t *v79;
  MIL::Attributes::IOAliasInfo *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::runtime_error *exception;
  __int128 v87;
  uint64_t *v88;
  MIL::Attributes::IOAliasInfo *v89;
  __int128 v90;
  uint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  char v94[4];
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  __int128 v106;
  const void **v107[5];
  _BYTE v108[16];
  const void **v109;
  void *__p;
  void *v111;
  uint64_t v112;
  int v113[3];
  std::string v114;
  std::string v115;
  uint64_t v116;
  uint64_t v117;

  v117 = *MEMORY[0x1E0C80C00];
  v113[0] = a3;
  v106 = *a4;
  std::unordered_set<std::string>::unordered_set((uint64_t)v107, (uint64_t)(a4 + 1));
  std::unordered_set<std::string>::unordered_set((uint64_t)v108, (uint64_t)a4 + 56);
  __p = 0;
  v111 = 0;
  v112 = 0;
  std::vector<Espresso::platform>::__init_with_size[abi:ne180100]<Espresso::platform*,Espresso::platform*>(&__p, *((const void **)a4 + 12), *((_QWORD *)a4 + 13), (uint64_t)(*((_QWORD *)a4 + 13) - *((_QWORD *)a4 + 12)) >> 2);
  v104 = 0;
  v105 = 0;
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7
    || (v8 = std::__shared_weak_count::lock(v7), (v105 = v8) == 0)
    || (v9 = *(_QWORD *)(a1 + 8), (v104 = v9) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v10 = v8;
  v94[0] = 1;
  v96 = a3;
  v97 = v9;
  v98 = 0;
  v99 = 0;
  v100 = 0;
  v101 = v9;
  v102 = 0;
  v103 = 0;
  v95 = 723714112;
  kdebug_trace();
  std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((uint64_t)&v115, v109);
  v11 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), a3, v113);
  v12 = (std::string::size_type *)(v11 + 6);
  v13 = (std::string::size_type **)(v11 + 5);
  std::__tree<std::string>::destroy((uint64_t)(v11 + 5), (char *)v11[6]);
  size = v115.__r_.__value_.__l.__size_;
  *(v12 - 1) = v115.__r_.__value_.__r.__words[0];
  *v12 = size;
  v15 = v115.__r_.__value_.__r.__words[2];
  v12[1] = v115.__r_.__value_.__r.__words[2];
  if (v15)
  {
    *(_QWORD *)(size + 16) = v12;
    v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v115.__r_.__value_.__l.__size_;
    *(_OWORD *)&v115.__r_.__value_.__r.__words[1] = 0uLL;
    size = 0;
  }
  else
  {
    *v13 = v12;
  }
  std::__tree<std::string>::destroy((uint64_t)&v115, (char *)size);
  v91 = v9;
  v92 = v10;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((uint64_t)&v115, v107[2]);
  std::set<std::string>::set[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>((uint64_t)&v114, v109);
  v18 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)&v90 = *(_QWORD *)(a1 + 216);
  *((_QWORD *)&v90 + 1) = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  Espresso::MILTranslator::TranslateSegment((MIL::Attributes::FlexibleShapeInfo *)&v93, (const Espresso::net *)&v91, v106, *((unint64_t *)&v106 + 1), &v115, &v114, &v90);
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v90 + 1);
  if (*((_QWORD *)&v90 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v90 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v114, (char *)v114.__r_.__value_.__l.__size_);
  std::__tree<std::string>::destroy((uint64_t)&v115, (char *)v115.__r_.__value_.__l.__size_);
  v24 = v92;
  if (v92)
  {
    v25 = (unint64_t *)&v92->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v93 + 40))(v93);
  std::string::basic_string[abi:ne180100]<0>(&v115, "main");
  MIL::IRProgram::GetFunction();
  MIL::Attributes::IOAliasInfo::Make();
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  v87 = 0uLL;
  v88 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v115, "main");
  Function = MIL::IRProgram::GetFunction();
  v28 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Function + 128))(Function);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  v31 = (_QWORD *)*v28;
  v29 = v28 + 1;
  v30 = v31;
  if (v31 != v29)
  {
    do
    {
      if (*((char *)v30 + 55) < 0)
        std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)v30[4], v30[5]);
      else
        v115 = *(std::string *)(v30 + 4);
      v116 = v30[7];
      ExternalName = MIL::Attributes::IOAliasInfo::TryGetExternalName();
      v33 = (std::string *)ExternalName;
      v34 = (_OWORD *)*((_QWORD *)&v87 + 1);
      if (ExternalName)
      {
        if (*((_QWORD *)&v87 + 1) < (unint64_t)v88)
        {
          if ((*(char *)(ExternalName + 23) & 0x80000000) == 0)
          {
            v35 = *(_OWORD *)ExternalName;
            v36 = *(_QWORD *)(ExternalName + 16);
            goto LABEL_37;
          }
          std::string::__init_copy_ctor_external(*((std::string **)&v87 + 1), *(const std::string::value_type **)ExternalName, *(_QWORD *)(ExternalName + 8));
LABEL_42:
          v37 = (std::string *)((char *)v34 + 24);
          goto LABEL_43;
        }
      }
      else
      {
        if (*((_QWORD *)&v87 + 1) < (unint64_t)v88)
        {
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(*((std::string **)&v87 + 1), v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
          }
          else
          {
            v35 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
            v36 = v115.__r_.__value_.__r.__words[2];
LABEL_37:
            *(_QWORD *)(*((_QWORD *)&v87 + 1) + 16) = v36;
            *v34 = v35;
          }
          goto LABEL_42;
        }
        v33 = &v115;
      }
      v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v87, (uint64_t)v33);
LABEL_43:
      *((_QWORD *)&v87 + 1) = v37;
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      v38 = (_QWORD *)v30[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v30[2];
          v40 = *v39 == (_QWORD)v30;
          v30 = v39;
        }
        while (!v40);
      }
      v30 = v39;
    }
    while (v39 != v29);
  }
  v41 = v113[0];
  v42 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 136), v113[0], v113);
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v42 + 5));
  *(_OWORD *)(v42 + 5) = v87;
  v42[7] = v88;
  v88 = 0;
  v87 = 0uLL;
  Espresso::MPSGraphEngine::SanitizeMILReshapes(v93);
  v43 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 136), v41, v113);
  v44 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), v41, v113);
  v45 = v43[5];
  std::string::basic_string[abi:ne180100]<0>(&v115, "main");
  v46 = MIL::IRProgram::GetFunction();
  v47 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 128))(v46);
  if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v115.__r_.__value_.__l.__data_);
  v50 = (_QWORD *)*v47;
  v48 = v47 + 1;
  v49 = v50;
  if (v50 != v48)
  {
    do
    {
      v51 = MIL::IRValueType::AsTensorType((MIL::IRValueType *)v49[7]);
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 88))(v51);
      if (*((char *)v45 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v115, (const std::string::value_type *)*v45, v45[1]);
      }
      else
      {
        v53 = *(_OWORD *)v45;
        v115.__r_.__value_.__r.__words[2] = v45[2];
        *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v53;
      }
      Espresso::MPSGraphCompilerEngine::compiler::process_blob_tensor_type(a1, v52, &v115);
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      v54 = (_QWORD *)v49[1];
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = (_QWORD *)*v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (_QWORD *)v49[2];
          v40 = *v55 == (_QWORD)v49;
          v49 = v55;
        }
        while (!v40);
      }
      v45 += 3;
      v49 = v55;
    }
    while (v55 != v48);
  }
  v56 = v44[5];
  std::string::basic_string[abi:ne180100]<0>(&v114, "main");
  v57 = MIL::IRProgram::GetFunction();
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v57 + 160))(&v115);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v114.__r_.__value_.__l.__data_);
  v59 = v115.__r_.__value_.__l.__size_;
  v58 = (MIL::IRValueType **)v115.__r_.__value_.__r.__words[0];
  if (v115.__r_.__value_.__r.__words[0] != v115.__r_.__value_.__l.__size_)
  {
    do
    {
      v60 = MIL::IRValueType::AsTensorType(*v58);
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 88))(v60);
      if (*((char *)v56 + 55) < 0)
        std::string::__init_copy_ctor_external(&v114, (const std::string::value_type *)v56[4], v56[5]);
      else
        v114 = *(std::string *)(v56 + 4);
      Espresso::MPSGraphCompilerEngine::compiler::process_blob_tensor_type(a1, v61, &v114);
      v62 = (uint64_t *)v56[1];
      v63 = v56;
      if (v62)
      {
        do
        {
          v56 = v62;
          v62 = (uint64_t *)*v62;
        }
        while (v62);
      }
      else
      {
        do
        {
          v56 = (uint64_t *)v63[2];
          v40 = *v56 == (_QWORD)v63;
          v63 = v56;
        }
        while (!v40);
      }
      if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v114.__r_.__value_.__l.__data_);
      ++v58;
    }
    while (v58 != (MIL::IRValueType **)v59);
    v58 = (MIL::IRValueType **)v115.__r_.__value_.__r.__words[0];
  }
  if (v58)
  {
    v115.__r_.__value_.__l.__size_ = (std::string::size_type)v58;
    operator delete(v58);
  }
  v64 = (void *)objc_opt_new();
  objc_msgSend(v64, "setCompilerOptions:", objc_msgSend(v64, "compilerOptions") | 0x10);
  v65 = *(_BYTE **)(*(_QWORD *)(v104 + 1240) + 1048);
  if (v65 && (*v65 & 8) != 0)
  {
    v66 = (Espresso *)objc_msgSend(v64, "setCompilerOptions:", objc_msgSend(v64, "compilerOptions") & 0xFFFFFFFFFFFFFFEFLL);
    Espresso::espresso_os_log_subsystem(v66, v67);
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
    {
      v69 = objc_msgSend(v64, "compilerOptions");
      LODWORD(v115.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v115.__r_.__value_.__r.__words + 4) = v69;
      _os_log_impl(&dword_190DAF000, v68, OS_LOG_TYPE_INFO, "[MPSGraphEngine] Set profiling state. MPSGraphCompilerOptions: 0x%llx", (uint8_t *)&v115, 0xCu);
    }

  }
  v70 = (void *)objc_opt_new();
  objc_msgSend(v64, "setCompilationDescriptor:", v70);

  objc_msgSend(v64, "compilationDescriptor");
  v71 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v71, "setOptimizationLevel:", 0);

  v72 = objc_alloc(MEMORY[0x1E0CC7628]);
  v73 = (void *)objc_msgSend(v72, "initWithMILProgram:executableDescriptor:", v93, v64);
  v74 = *(void **)(a1 + 128);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v41);
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v74, "setObject:forKeyedSubscript:", v73, v75);

  v76 = *(uint64_t ***)(a1 + 208);
  if (v76)
  {
    v77 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v76, v41, v113);
    v78 = v93;
    v93 = 0;
    v79 = v77[5];
    v77[5] = (uint64_t *)v78;
    if (v79)
      (*(void (**)(uint64_t *))(*v79 + 8))(v79);
  }
  v115.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v115);
  v80 = v89;
  v89 = 0;
  if (v80)
  {
    MIL::Attributes::IOAliasInfo::~IOAliasInfo(v80);
    MEMORY[0x19401CD90]();
  }
  v81 = v93;
  v93 = 0;
  if (v81)
    (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v94);
  v82 = v105;
  if (v105)
  {
    v83 = (unint64_t *)&v105->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  if (__p)
  {
    v111 = __p;
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v108);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v107);
}

void sub_19189441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, MIL::Attributes::IOAliasInfo *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v33;

  *(_QWORD *)(v31 - 168) = &a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v31 - 168));
  std::unique_ptr<MIL::Attributes::IOAliasInfo>::reset[abi:ne180100](&a12);
  v33 = a17;
  a17 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  Espresso::net_compiler_segment_based::segment_t::~segment_t((Espresso::net_compiler_segment_based::segment_t *)&a29);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::compiler::__forward_segment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v7;
  Espresso::batch_metal *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned __int8 *v13;
  char *v14;
  const void *v15;
  Espresso::batch_metal *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t **v26;
  uint64_t **v27;
  void *v28;
  unsigned __int8 *v29;
  unsigned __int8 *i;
  char *v31;
  const void *v32;
  id *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  void *v37;
  void *v38;
  unint64_t *v39;
  unint64_t v40;
  void *v41;
  uint64_t *v42;
  char *v43;
  const void *v44;
  id *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  void *v49;
  void *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  BOOL v55;
  Espresso::batch_metal *v56;
  void *v57;
  id v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  _BYTE *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::runtime_error *exception;
  std::runtime_error *v76;
  std::runtime_error *v77;
  uint64_t v78;
  void *v79;
  _QWORD v80[5];
  id *v81;
  std::__shared_weak_count *v82;
  std::string v83;
  Espresso::batch_metal *v84;
  std::__shared_weak_count *v85;
  Espresso::batch_metal *v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  _DWORD v90[3];

  v90[0] = a3;
  v88 = 0;
  v89 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5 || (v7 = a3, (v89 = std::__shared_weak_count::lock(v5)) == 0) || (v88 = *(_QWORD *)(a1 + 8)) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("[MPSGraphEngine] network is null");
  if (!*(_QWORD *)a2
  {
    v86 = 0;
    v87 = 0;
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("[MPSGraphEngine] wrong batch received");
  }
  v10 = *(std::__shared_weak_count **)(a2 + 8);
  v86 = v9;
  v87 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(unsigned __int8 **)(a4 + 32);
  if (v13)
  {
    do
    {
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)(v13 + 16);
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88 + 136, v13 + 16, (__int128 **)&v83);
      v15 = (const void *)*((_QWORD *)v14 + 5);
      if (!v15
      {
        v84 = 0;
        v85 = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(exception, &v83);
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
      v84 = v16;
      v85 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 - 1, v18));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v13 = *(unsigned __int8 **)v13;
    }
    while (v13);
    v7 = v90[0];
  }
  v21 = *(void **)(a1 + 128);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v7);
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v21, "objectForKey:", v22);
  v23 = objc_claimAutoreleasedReturnValue();

  v79 = (void *)v23;
  if (!v23)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected non-nill executable in for segment.");
  v84 = v86;
  v85 = v87;
  if (v87)
  {
    v24 = (unint64_t *)&v87->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = std::__tree<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::shared_ptr<Espresso::generic_convolution_kernel>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 136), v7, v90);
  v78 = a1;
  v27 = std::__tree<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,EspressoLight::input_cvpixel_buffers_t>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(a1 + 160), v7, v90);
  v28 = (void *)objc_opt_new();
  v29 = (unsigned __int8 *)v26[5];
  for (i = (unsigned __int8 *)v26[6]; v29 != i; v29 += 24)
  {
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88 + 136, v29, (__int128 **)&v83);
    v32 = (const void *)*((_QWORD *)v31 + 5);
    if (!v32
    {
      v81 = 0;
      v82 = 0;
      v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v76, &v83);
      __cxa_throw(v76, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)v31 + 6);
    v81 = v33;
    v82 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    objc_msgSend(v33[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *((_QWORD *)v84 + 18), v33[28], 1, v78);
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    v38 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7660]), "initWithMPSNDArray:", v37);
    objc_msgSend(v28, "addObject:", v38);

    if (v34)
    {
      v39 = (unint64_t *)&v34->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
  }
  v41 = (void *)objc_opt_new();
  v42 = v27[5];
  if (v42 != (uint64_t *)(v27 + 6))
  {
    do
    {
      v83.__r_.__value_.__r.__words[0] = (std::string::size_type)(v42 + 4);
      v43 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88 + 136, (unsigned __int8 *)v42 + 32, (__int128 **)&v83);
      v44 = (const void *)*((_QWORD *)v43 + 5);
      if (!v44
      {
        v81 = 0;
        v82 = 0;
        v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v77, &v83);
        __cxa_throw(v77, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v46 = (std::__shared_weak_count *)*((_QWORD *)v43 + 6);
      v81 = v45;
      v82 = v46;
      if (v46)
      {
        v47 = (unint64_t *)&v46->__shared_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      objc_msgSend(v45[25], "ndArrayWithCommandBuffer:descriptor:aliasing:", *((_QWORD *)v84 + 18), v45[28], 1, v78);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      v50 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0CC7660]), "initWithMPSNDArray:", v49);
      objc_msgSend(v41, "addObject:", v50);

      if (v46)
      {
        v51 = (unint64_t *)&v46->__shared_owners_;
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      v53 = (uint64_t *)v42[1];
      if (v53)
      {
        do
        {
          v54 = (uint64_t **)v53;
          v53 = (uint64_t *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (uint64_t **)v42[2];
          v55 = *v54 == v42;
          v42 = (uint64_t *)v54;
        }
        while (!v55);
      }
      v42 = (uint64_t *)v54;
    }
    while (v54 != v27 + 6);
  }
  v56 = v84;
  Espresso::batch_metal::recreate_command_buffer(v84);
  if (*(_BYTE *)(v88 + 1352))
  {
    v57 = (void *)*((_QWORD *)v56 + 18);
    v80[0] = MEMORY[0x1E0C809B0];
    v80[1] = 3221225472;
    v80[2] = ___ZN8Espresso14MPSGraphEngine8compiler17__forward_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEiRKNS_26net_compiler_segment_based9segment_tE_block_invoke;
    v80[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
    v80[4] = v88;
    objc_msgSend(v57, "addCompletedHandler:", v80);
    kdebug_trace();
  }
  v58 = *((id *)v56 + 23);
  if (!v58)
  {
    v59 = *(_QWORD *)(v78 + 104);
    if (v59 && (v60 = *(std::__shared_weak_count **)(v78 + 112)) != 0)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      v58 = *(id *)(v59 + 192);
      do
        v63 = __ldaxr(v61);
      while (__stlxr(v63 - 1, v61));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    else
    {
      v58 = *(id *)(v59 + 192);
    }
    if (!v58)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("No command queue found, cannot execute MPSGraphExecutable.");
  }
  v64 = (void *)objc_opt_new();
  objc_msgSend(v79, "setOptions:", 0);
  v65 = *(_BYTE **)(*(_QWORD *)(v88 + 1240) + 1048);
  if (v65 && (*v65 & 8) != 0)
  {
    objc_msgSend(v64, "setEnableProfilingOpNames:", 1);
    objc_msgSend(v64, "setBreakUpMetalEncoders:", 1);
    objc_msgSend(v64, "setBriefProfilingOpNames:", 1);
  }
  if (getenv("ESPRESSO_MPSGRAPH_VERBOSE"))
    objc_msgSend(v79, "setOptions:", 2);
  if (getenv("ESPRESSO_MPSGRAPH_SYNC"))
    objc_msgSend(v79, "runWithMTLCommandQueue:inputsArray:resultsArray:", v58, v28, v41);
  else
    objc_msgSend(v79, "runAsyncWithMTLCommandQueue:inputsArray:resultsArray:executionDescriptor:", v58, v28, v41, v64);

  v66 = v85;
  if (v85)
  {
    v67 = (unint64_t *)&v85->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }

  v69 = v87;
  if (v87)
  {
    v70 = (unint64_t *)&v87->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v89;
  if (v89)
  {
    v73 = (unint64_t *)&v89->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
}

void sub_191894E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 112);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::compiler::set_priority(uint64_t result, int a2)
{
  *(_BYTE *)(result + 120) = 1;
  *(_DWORD *)(result + 124) = a2;
  return result;
}

uint64_t Espresso::MPSGraphEngine::compiler::clear_priority(uint64_t this)
{
  *(_BYTE *)(this + 120) = 0;
  return this;
}

uint64_t ___ZN8Espresso14MPSGraphEngine8compiler17__forward_segmentERKNSt3__110shared_ptrINS_14abstract_batchEEEiRKNS_26net_compiler_segment_based9segment_tE_block_invoke()
{
  return kdebug_trace();
}

void ___ZN8Espresso14MPSGraphEngine8compiler7dump_irERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(*(_QWORD *)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container_options>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container_options>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSGraphEngine::Kernels::pool_kernel::~pool_kernel(Espresso::MPSGraphEngine::Kernels::pool_kernel *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::pool_kernel::is_valid_for_engine()
{
  return 1;
}

void Espresso::MPSEngine::batch::~batch(id *this)
{
  Espresso::batch_metal::~batch_metal(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::context::network_transform_pre_allocation(Espresso::MPSEngine::context *this, Espresso::net *a2)
{
  Espresso::net *v2;
  void *v4;
  void *v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t *v31;
  int v32;
  std::string::size_type v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  void **v42;
  void **v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  int v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  unint64_t v60;
  char *v61;
  int64_t v62;
  unint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  int v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t **v75;
  uint64_t v76;
  const void *v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t **v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void *v86;
  char *v87;
  int64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  int v94;
  void *v95;
  int64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char v100;
  int v101;
  uint64_t **v102;
  int *v103;
  int *v104;
  uint64_t v105;
  int v106;
  __int128 v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  const void *v126;
  void *v127;
  Espresso::MetalLowmemEngine::depthwise_convolution_kernel *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *size;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t **v139;
  int *v140;
  int *v141;
  unint64_t v142;
  __int128 v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  unint64_t *v149;
  unint64_t v150;
  std::vector<std::string> *v151;
  std::vector<std::string> *v152;
  unint64_t *v153;
  unint64_t v154;
  _QWORD *v155;
  unint64_t v156;
  uint64_t **v157;
  uint64_t **v158;
  uint64_t **v159;
  uint64_t **v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t v164;
  void *v165;
  unint64_t *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  void *v173;
  uint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _DWORD *v188;
  _DWORD *v189;
  int v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  std::__shared_weak_count *v206;
  unint64_t *v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  unint64_t v213;
  int v214;
  uint64_t **v215;
  uint64_t **v216;
  uint64_t *v217;
  uint64_t v218;
  void *v219;
  unint64_t *v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  std::__shared_weak_count *v231;
  unint64_t *v232;
  unint64_t v233;
  BOOL v234;
  _DWORD *v235;
  _DWORD *v236;
  int v237;
  _QWORD *v238;
  _QWORD *v239;
  int v240;
  int v241;
  std::string::size_type v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  Espresso::net *v249;
  unint64_t *v250;
  unint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  Espresso::net *v264;
  __int128 v265;
  uint64_t v266;
  int v267;
  unsigned int v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  uint64_t *v272;
  uint64_t *v273;
  uint64_t v274;
  void *v275;
  unint64_t *v276;
  unint64_t *v277;
  unint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  uint64_t *v282;
  _QWORD *v283;
  void *v284;
  uint64_t v285;
  unint64_t *v286;
  unint64_t v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  uint64_t v291;
  void *v292;
  uint64_t v293;
  unint64_t *v294;
  unint64_t v295;
  std::__shared_weak_count *v296;
  unint64_t *v297;
  unint64_t v298;
  void *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  unsigned __int8 *v303;
  unsigned __int8 **v304;
  _BOOL4 v305;
  uint64_t v306;
  unsigned __int8 *v307;
  unsigned __int8 *v308;
  int v309;
  unsigned __int8 *v310;
  uint64_t v311;
  unsigned __int8 *v312;
  int v313;
  int v314;
  int v315;
  int v316;
  char v317;
  _BOOL4 v318;
  uint64_t v319;
  unsigned __int8 *v320;
  unsigned __int8 *v321;
  int v322;
  const void **v323;
  unsigned __int8 *v324;
  uint64_t v325;
  int v326;
  int v327;
  int v328;
  int v329;
  char v330;
  _BOOL4 v331;
  uint64_t v332;
  unsigned __int8 *v333;
  unsigned __int8 *v334;
  int v335;
  const void **v336;
  unsigned __int8 *v337;
  unsigned __int8 *v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  _BOOL4 v341;
  _QWORD *v342;
  _QWORD *v343;
  char **v344;
  __int128 *v345;
  std::string *v346;
  std::string *v347;
  unsigned __int8 *v348;
  unsigned __int8 **v349;
  uint64_t v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  int v353;
  unsigned __int8 *v354;
  _QWORD *v355;
  _QWORD *v356;
  char **v357;
  __int128 *v358;
  std::string *v359;
  std::string *v360;
  char *v361;
  void *v362;
  char *v363;
  uint64_t v364;
  unint64_t v365;
  int64_t v366;
  unint64_t v367;
  uint64_t v368;
  _DWORD *v369;
  int v370;
  char *v371;
  void *v372;
  char *v373;
  int64_t v374;
  unint64_t v375;
  int64_t v376;
  unint64_t v377;
  uint64_t v378;
  _DWORD *v379;
  int v380;
  _DWORD *v381;
  _DWORD *v382;
  int v383;
  std::__shared_weak_count *v384;
  unint64_t *v385;
  unint64_t v386;
  std::__shared_weak_count *v387;
  unint64_t *v388;
  unint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  std::__shared_weak_count *v393;
  unint64_t *v394;
  unint64_t v395;
  std::__shared_weak_count *v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  __int128 v402;
  uint64_t v403;
  int v404;
  unsigned int v405;
  std::__shared_weak_count *v406;
  unint64_t *v407;
  unint64_t v408;
  uint64_t *v409;
  uint64_t *v410;
  uint64_t v411;
  void *v412;
  unint64_t *v413;
  unint64_t *v414;
  unint64_t v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  uint64_t *v419;
  _QWORD *v420;
  void *v421;
  uint64_t v422;
  unint64_t *v423;
  unint64_t v424;
  std::__shared_weak_count *v425;
  unint64_t *v426;
  unint64_t v427;
  uint64_t v428;
  void *v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  std::__shared_weak_count *v433;
  unint64_t *v434;
  unint64_t v435;
  void *v436;
  _QWORD *v437;
  _QWORD *v438;
  _QWORD *v439;
  unsigned __int8 *v440;
  unsigned __int8 **v441;
  _BOOL4 v442;
  uint64_t v443;
  unsigned __int8 *v444;
  unsigned __int8 *v445;
  int v446;
  unsigned __int8 *v447;
  uint64_t v448;
  unsigned __int8 *v449;
  int v450;
  int v451;
  int v452;
  int v453;
  char v454;
  _BOOL4 v455;
  uint64_t v456;
  unsigned __int8 *v457;
  unsigned __int8 *v458;
  int v459;
  const void **v460;
  unsigned __int8 *v461;
  uint64_t v462;
  int v463;
  int v464;
  int v465;
  int v466;
  char v467;
  _BOOL4 v468;
  uint64_t v469;
  unsigned __int8 *v470;
  unsigned __int8 *v471;
  int v472;
  const void **v473;
  unsigned __int8 *v474;
  unsigned __int8 *v475;
  unsigned __int8 *v476;
  unsigned __int8 *v477;
  _BOOL4 v478;
  _QWORD *v479;
  _QWORD *v480;
  char **v481;
  __int128 *v482;
  std::string *v483;
  std::string *v484;
  unsigned __int8 *v485;
  unsigned __int8 **v486;
  uint64_t v487;
  unsigned __int8 *v488;
  unsigned __int8 *v489;
  int v490;
  unsigned __int8 *v491;
  _QWORD *v492;
  _QWORD *v493;
  char **v494;
  __int128 *v495;
  std::string *v496;
  std::string *v497;
  char *v498;
  void *v499;
  char *v500;
  uint64_t v501;
  unint64_t v502;
  int64_t v503;
  unint64_t v504;
  uint64_t v505;
  _DWORD *v506;
  int v507;
  char *v508;
  void *v509;
  char *v510;
  int64_t v511;
  unint64_t v512;
  int64_t v513;
  unint64_t v514;
  uint64_t v515;
  _DWORD *v516;
  int v517;
  _DWORD *v518;
  _DWORD *v519;
  int v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  std::__shared_weak_count *v527;
  unint64_t *v528;
  unint64_t v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  std::__shared_weak_count *v533;
  unint64_t *v534;
  unint64_t v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  _QWORD *v539;
  unsigned __int8 *i;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  __int128 v548;
  std::__shared_weak_count *v549;
  unint64_t *v550;
  unint64_t v551;
  std::__shared_weak_count *v552;
  unint64_t *v553;
  unint64_t v554;
  std::__shared_weak_count *v555;
  unint64_t *v556;
  unint64_t v557;
  std::__shared_weak_count *v558;
  unint64_t *v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  Espresso::MPSEngine::context *v563;
  void *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  _QWORD *v569;
  _QWORD *v570;
  __int128 v571;
  __int128 v572;
  Espresso::net *v573;
  _QWORD v574[5];
  _QWORD v575[2];
  void (*v576)(uint64_t, void **);
  void *v577;
  Espresso::MPSEngine::context *v578;
  _QWORD v579[2];
  float *(*v580)(uint64_t, uint64_t);
  void *v581;
  Espresso::MPSEngine::context *v582;
  void *v583;
  std::__shared_weak_count *v584;
  uint64_t v585;
  std::__shared_weak_count *v586;
  int v587;
  int v588;
  char v589[8];
  std::__shared_weak_count *v590;
  uint64_t *v591[3];
  uint64_t *v592[3];
  __int128 v593;
  uint64_t v594;
  __int128 v595;
  uint64_t *v596[3];
  uint64_t *v597[3];
  void **v598;
  std::__shared_weak_count *v599;
  void *__p[2];
  __int128 v601;
  __int128 v602;
  __int128 v603;
  void *v604[2];
  __int128 v605;
  void *v606[2];
  _BYTE v607[20];
  Espresso::net *v608;
  std::string v609;
  _QWORD *v610[2];
  uint64_t *v611;
  _QWORD *v612[3];
  uint64_t v613[3];

  v2 = a2;
  v613[0] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 568))
  {
    Espresso::MPSEngine::context::mark_weights_blobs(a2, a2);
    Espresso::MPSEngine::context::determine_if_splicing_textures(this, v2);
    return;
  }
  *((_BYTE *)a2 + 568) = 1;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v589, a2);
  objc_msgSend(MEMORY[0x1E0C99EA0], "standardUserDefaults");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "persistentDomainForName:", *MEMORY[0x1E0CB2B58]);
  v564 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v564, "objectForKeyedSubscript:", CFSTR("espresso.disable_fusions"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v5, "BOOLValue");

  if ((v6 & 1) != 0)
    goto LABEL_796;
  v573 = v2;
  v563 = this;
  if (!*((_BYTE *)this + 44))
    goto LABEL_187;
  v588 = 0;
  v7 = *((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 5) == v7)
    goto LABEL_186;
  v8 = 0;
  v567 = (uint64_t)v2 + 56;
  v9 = (uint64_t)v2 + 96;
  do
  {
    v10 = *(_OWORD *)(v7 + 16 * v8);
    v595 = v10;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v14 = v10;
    v15 = *(const void **)(v10 + 64);
    if (!v15
    {
      goto LABEL_180;
    }
    v16 = *(std::__shared_weak_count **)(v14 + 72);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v601 = 0;
    v20 = v588;
    v21 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v592, v588, &v588);
    v23 = v21[5];
    v22 = v21[6];
    v609.__r_.__value_.__r.__words[0] = v20;
    v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v567, v20, &v609);
    v25 = v22 != v23;
    v27 = (_QWORD *)v24[3];
    v26 = (_QWORD *)v24[4];
    if (v27 != v26)
    {
      v28 = (_QWORD *)*((_QWORD *)v573 + 30);
      do
      {
        v25 &= std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v28, v27) == 0;
        v27 += 3;
      }
      while (v27 != v26);
    }
    v29 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v592, v20, &v588);
    v30 = v29[5];
    v31 = v29[6];
    if (v30 != v31)
    {
      v32 = 0;
      while (1)
      {
        v587 = *(_DWORD *)v30;
        v33 = v587;
        v34 = *(_OWORD *)(*((_QWORD *)v573 + 4) + 16 * v587);
        v593 = v34;
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
        v568 = v34;
        if (*((_QWORD *)&v34 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v591, v33, &v587);
        if ((char *)v38[6] - (char *)v38[5] == 4)
        {
          v609.__r_.__value_.__r.__words[0] = v33;
          v39 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v567, v33, &v609);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39[4] - v39[3]) >> 3) <= 1)
            break;
        }
        v25 = 0;
        v40 = 7;
        if (v35)
          goto LABEL_80;
LABEL_84:
        if (!v40)
        {
          v30 = (uint64_t *)((char *)v30 + 4);
          if (v30 != v31)
            continue;
        }
        goto LABEL_116;
      }
      v41 = *(_QWORD *)(v568 + 64);
      if (v41)
      {
        if (v42)
        {
          v43 = v42;
          v44 = *(std::__shared_weak_count **)(v568 + 72);
          v598 = v42;
          v599 = v44;
          if (v44)
          {
            v45 = (unint64_t *)&v44->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          v47 = *(_DWORD *)((*((uint64_t (**)(void **))*v42 + 48))(v42) + 40);
          v48 = (*((uint64_t (**)(void **))*v43 + 48))(v43);
          v49 = v48;
          v50 = (char *)__p[1];
          if (__p[1] >= (void *)v601)
          {
            v61 = (char *)__p[0];
            v62 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v63 = v62 + 1;
            if ((unint64_t)(v62 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v64 = v601 - (unint64_t)__p[0];
            if ((uint64_t)(v601 - (unint64_t)__p[0]) >> 1 > v63)
              v63 = v64 >> 1;
            v65 = (unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL;
            v66 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v65)
              v66 = v63;
            if (v66)
            {
              v66 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v66);
              v61 = (char *)__p[0];
              v50 = (char *)__p[1];
            }
            else
            {
              v67 = 0;
            }
            v68 = (_DWORD *)(v66 + 4 * v62);
            *v68 = *(_DWORD *)(v49 + 40);
            v51 = v68 + 1;
            while (v50 != v61)
            {
              v69 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *--v68 = v69;
            }
            __p[0] = v68;
            __p[1] = v51;
            *(_QWORD *)&v601 = v66 + 4 * v67;
            if (v61)
              operator delete(v61);
          }
          else
          {
            *(_DWORD *)__p[1] = *(_DWORD *)(v48 + 40);
            v51 = v50 + 4;
          }
          __p[1] = v51;
          v32 += v47;
          if (*(_WORD *)((*((uint64_t (**)(void **))*v43 + 48))(v43) + 130))
            goto LABEL_73;
LABEL_87:
          v40 = 0;
          goto LABEL_74;
        }
        v598 = 0;
        v599 = 0;
        if (*(void (***)(Espresso::MPSEngine::pool_kernel *__hidden))v41 == &off_1E2DA7CE0)
        {
          v52 = *(std::__shared_weak_count **)(v568 + 72);
          v585 = v41;
          v586 = v52;
          if (v52)
          {
            v53 = (unint64_t *)&v52->__shared_owners_;
            do
              v54 = __ldxr(v53);
            while (__stxr(v54 + 1, v53));
          }
          v583 = 0;
          v584 = 0;
          memset(&v609, 0, sizeof(v609));
          if (*(_WORD *)(v41 + 370)
            || (v75 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v592, v33, &v587), v75[6] == v75[5]))
          {
            v55 = 0;
          }
          else
          {
            v76 = *(_QWORD *)(*((_QWORD *)v573 + 4)
                            + 16
                            * *(int *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v592, v33, &v587)[5]);
            v77 = *(const void **)(v76 + 64);
            if (v77)
            {
              if (v78)
              {
                v55 = *(std::__shared_weak_count **)(v76 + 72);
                if (v55)
                {
                  v79 = (unint64_t *)&v55->__shared_owners_;
                  do
                    v80 = __ldxr(v79);
                  while (__stxr(v80 + 1, v79));
                }
              }
              else
              {
                v55 = 0;
              }
            }
            else
            {
              v55 = 0;
              v78 = 0;
            }
            v583 = v78;
            v584 = v55;
            v81 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v592, v33, &v587);
            std::string::operator=(&v609, (const std::string *)(*(_QWORD *)(*((_QWORD *)v573 + 4) + 16 * *(int *)v81[5]) + 40));
            if (v78 && !*(_WORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v78 + 384))(v78) + 130))
            {
              v82 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v78 + 384))(v78) + 40);
              v83 = (*(uint64_t (**)(void *))(*(_QWORD *)v78 + 384))(v78);
              v84 = v83;
              v85 = (char *)__p[1];
              if (__p[1] >= (void *)v601)
              {
                v87 = (char *)__p[0];
                v88 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                v89 = v88 + 1;
                if ((unint64_t)(v88 + 1) >> 62)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v90 = v601 - (unint64_t)__p[0];
                if ((uint64_t)(v601 - (unint64_t)__p[0]) >> 1 > v89)
                  v89 = v90 >> 1;
                v65 = (unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL;
                v91 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v65)
                  v91 = v89;
                if (v91)
                {
                  v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v91);
                  v87 = (char *)__p[0];
                  v85 = (char *)__p[1];
                }
                else
                {
                  v92 = 0;
                }
                v93 = (_DWORD *)(v91 + 4 * v88);
                *v93 = *(_DWORD *)(v84 + 40);
                v86 = v93 + 1;
                while (v85 != v87)
                {
                  v94 = *((_DWORD *)v85 - 1);
                  v85 -= 4;
                  *--v93 = v94;
                }
                __p[0] = v93;
                __p[1] = v86;
                *(_QWORD *)&v601 = v91 + 4 * v92;
                if (v87)
                  operator delete(v87);
              }
              else
              {
                *(_DWORD *)__p[1] = *(_DWORD *)(v83 + 40);
                v86 = v85 + 4;
              }
              v40 = 0;
              v32 += v82;
              __p[1] = v86;
              v56 = 1;
LABEL_45:
              if (SHIBYTE(v609.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v609.__r_.__value_.__l.__data_);
              if (v55)
              {
                v57 = (unint64_t *)&v55->__shared_owners_;
                do
                  v58 = __ldaxr(v57);
                while (__stlxr(v58 - 1, v57));
                if (!v58)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              if (v586)
              {
                v59 = &v586->__shared_owners_;
                do
                  v60 = __ldaxr((unint64_t *)v59);
                while (__stlxr(v60 - 1, (unint64_t *)v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v586->__on_zero_shared)(v586);
                  std::__shared_weak_count::__release_weak(v586);
                }
              }
              if (!v56)
              {
LABEL_74:
                v70 = v599;
                if (v599)
                {
                  v71 = (unint64_t *)&v599->__shared_owners_;
                  do
                    v72 = __ldaxr(v71);
                  while (__stlxr(v72 - 1, v71));
                  if (!v72)
                  {
                    ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                    std::__shared_weak_count::__release_weak(v70);
                  }
                }
                v35 = (std::__shared_weak_count *)*((_QWORD *)&v593 + 1);
                if (!*((_QWORD *)&v593 + 1))
                  goto LABEL_84;
LABEL_80:
                v73 = (unint64_t *)&v35->__shared_owners_;
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
                goto LABEL_84;
              }
              goto LABEL_87;
            }
          }
          v25 = 0;
          v56 = 0;
          v40 = 7;
          goto LABEL_45;
        }
      }
      else
      {
        v598 = 0;
        v599 = 0;
      }
LABEL_73:
      v25 = 0;
      v40 = 7;
      goto LABEL_74;
    }
    LOWORD(v32) = 0;
LABEL_116:
    v95 = __p[0];
    v96 = (char *)__p[1] - (char *)__p[0];
    if (__p[1] != __p[0])
    {
      v97 = v96 >> 2;
      v65 = v96 >> 2 != 0;
      v98 = (v96 >> 2) - 1;
      if (v98 == 0 || !v65)
        v97 = 1;
      v99 = (char *)__p[0];
      do
      {
        v100 = *v99;
        v99 += 4;
        if ((v100 & 3) != 0)
          v25 &= v98 == 0;
        --v98;
        --v97;
      }
      while (v97);
    }
    if ((v25 & 1) == 0)
      goto LABEL_177;
    v101 = v588;
    v102 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v592, v588, &v588);
    v103 = (int *)v102[5];
    v104 = (int *)v102[6];
    if (v103 == v104)
      goto LABEL_163;
    v105 = 0;
    v106 = 0;
    do
    {
      v107 = *(_OWORD *)(*((_QWORD *)v573 + 4) + 16 * *v103);
      *(_OWORD *)&v609.__r_.__value_.__l.__data_ = v107;
      if (*((_QWORD *)&v107 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      v110 = v107;
      v111 = *(_QWORD *)(v107 + 64);
      if (!v111)
      {
        v593 = 0uLL;
        goto LABEL_139;
      }
      if (!v112)
      {
        v593 = 0uLL;
        if (*(void (***)(Espresso::MPSEngine::pool_kernel *__hidden))v111 == &off_1E2DA7CE0)
        {
          v134 = *(std::__shared_weak_count **)(v110 + 72);
          v598 = (void **)v111;
          v599 = v134;
          if (v134)
          {
            v135 = (unint64_t *)&v134->__shared_owners_;
            do
              v136 = __ldxr(v135);
            while (__stxr(v136 + 1, v135));
          }
          *(_WORD *)(v111 + 370) = v32;
          objc_msgSend(*(id *)(v111 + 432), "setDestinationFeatureChannelOffset:", v106);
          *(_WORD *)(v111 + 366) = v106;
          v106 += *((_DWORD *)__p[0] + v105);
          if (v134)
          {
            v137 = (unint64_t *)&v134->__shared_owners_;
            do
              v138 = __ldaxr(v137);
            while (__stlxr(v138 - 1, v137));
            if (!v138)
            {
              ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
              std::__shared_weak_count::__release_weak(v134);
            }
          }
        }
LABEL_139:
        v114 = (std::__shared_weak_count *)*((_QWORD *)&v593 + 1);
        if (!*((_QWORD *)&v593 + 1))
          goto LABEL_148;
LABEL_144:
        v129 = (unint64_t *)&v114->__shared_owners_;
        do
          v130 = __ldaxr(v129);
        while (__stlxr(v130 - 1, v129));
        if (!v130)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
        goto LABEL_148;
      }
      v113 = v112;
      v114 = *(std::__shared_weak_count **)(v110 + 72);
      *(_QWORD *)&v593 = v112;
      *((_QWORD *)&v593 + 1) = v114;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldxr(v115);
        while (__stxr(v116 + 1, v115));
      }
      *(_WORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v112 + 384))(v112) + 130) = v32;
      *(_WORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v113 + 384))(v113) + 126) = v106;
      v117 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v113 + 75) + 384))(*((_QWORD *)v113 + 75));
      v118 = *((_OWORD *)v113 + 19);
      v119 = *((_OWORD *)v113 + 21);
      *(_OWORD *)(v117 + 16) = *((_OWORD *)v113 + 20);
      *(_OWORD *)(v117 + 32) = v119;
      *(_OWORD *)v117 = v118;
      v120 = *((_OWORD *)v113 + 22);
      v121 = *((_OWORD *)v113 + 23);
      v122 = *((_OWORD *)v113 + 25);
      *(_OWORD *)(v117 + 80) = *((_OWORD *)v113 + 24);
      *(_OWORD *)(v117 + 96) = v122;
      *(_OWORD *)(v117 + 48) = v120;
      *(_OWORD *)(v117 + 64) = v121;
      v123 = *((_OWORD *)v113 + 26);
      v124 = *((_OWORD *)v113 + 27);
      v125 = *((_OWORD *)v113 + 28);
      *(_QWORD *)(v117 + 157) = *(_QWORD *)(v113 + 461);
      *(_OWORD *)(v117 + 128) = v124;
      *(_OWORD *)(v117 + 144) = v125;
      *(_OWORD *)(v117 + 112) = v123;
      v126 = (const void *)*((_QWORD *)v113 + 75);
      if (v126)
      {
        if (v127)
        {
          (*(void (**)(void *))(*(_QWORD *)v127 + 624))(v127);
        }
        else
        {
          if (v128)
            Espresso::MetalLowmemEngine::depthwise_convolution_kernel::invalidate(v128);
        }
      }
      v106 += *((_DWORD *)__p[0] + v105);
      if (v114)
        goto LABEL_144;
LABEL_148:
      size = (std::__shared_weak_count *)v609.__r_.__value_.__l.__size_;
      if (v609.__r_.__value_.__l.__size_)
      {
        v132 = (unint64_t *)(v609.__r_.__value_.__l.__size_ + 8);
        do
          v133 = __ldaxr(v132);
        while (__stlxr(v133 - 1, v132));
        if (!v133)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      ++v105;
      ++v103;
    }
    while (v103 != v104);
    v101 = v588;
LABEL_163:
    v139 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v592, v101, &v588);
    v140 = (int *)v139[5];
    v141 = (int *)v139[6];
    if (v140 != v141)
    {
      do
      {
        v142 = *v140;
        v143 = *(_OWORD *)(*((_QWORD *)v573 + 4) + 16 * v142);
        *(_OWORD *)&v609.__r_.__value_.__l.__data_ = v143;
        v144 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
        if (*((_QWORD *)&v143 + 1))
        {
          v145 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
          do
            v146 = __ldxr(v145);
          while (__stxr(v146 + 1, v145));
        }
        *(_QWORD *)&v593 = v588;
        v147 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v588, &v593);
        v598 = (void **)v142;
        v148 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v142, &v598);
        if (v148 != v147)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v148 + 3), (std::string *)v147[3], (std::string *)v147[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v147[4] - v147[3]) >> 3));
        if (v144)
        {
          v149 = (unint64_t *)&v144->__shared_owners_;
          do
            v150 = __ldaxr(v149);
          while (__stlxr(v150 - 1, v149));
          if (!v150)
          {
            ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
            std::__shared_weak_count::__release_weak(v144);
          }
        }
        ++v140;
      }
      while (v140 != v141);
      v101 = v588;
    }
    v609.__r_.__value_.__r.__words[0] = v101;
    v151 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v101, &v609);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v151 + 1, 0, 0, 0);
    v609.__r_.__value_.__r.__words[0] = v101;
    v152 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v567, v101, &v609);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v152 + 1, 0, 0, 0);
    v95 = __p[0];
LABEL_177:
    if (v95)
    {
      __p[1] = v95;
      operator delete(v95);
    }
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v595 + 1);
    v2 = v573;
LABEL_180:
    if (v11)
    {
      v153 = (unint64_t *)&v11->__shared_owners_;
      do
        v154 = __ldaxr(v153);
      while (__stlxr(v154 - 1, v153));
      if (!v154)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v8 = ++v588;
    v7 = *((_QWORD *)v2 + 4);
  }
  while (v8 < (*((_QWORD *)v2 + 5) - v7) >> 4);
LABEL_186:
  this = v563;
LABEL_187:
  v579[0] = MEMORY[0x1E0C809B0];
  v579[1] = 3221225472;
  v580 = ___ZN8Espresso9MPSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke;
  v581 = &__block_descriptor_40_e9_v16__0_v8l;
  v582 = this;
  v155 = v579;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v609, v2);
  *(_OWORD *)v606 = 0u;
  memset(v607, 0, sizeof(v607));
  *(_OWORD *)v604 = 0u;
  v605 = 0u;
  v602 = 0u;
  v603 = 0u;
  *(_OWORD *)__p = 0u;
  v601 = 0u;
  v608 = v2;
  LODWORD(v595) = 0;
  if (*((_QWORD *)v2 + 5) != *((_QWORD *)v2 + 4))
  {
    v569 = v155;
    LODWORD(v156) = 0;
    do
    {
      *(_DWORD *)&v607[8] = v156;
      v157 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v609.__r_.__value_.__r.__words[2], v156, &v595);
      if ((char *)v157[6] - (char *)v157[5] == 4)
      {
        *(_DWORD *)&v607[12] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v609.__r_.__value_.__r.__words[2], *(int *)&v607[8], &v607[8])[5];
        v158 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v609.__r_.__value_.__r.__words[2], *(int *)&v607[12], &v607[12]);
        if ((char *)v158[6] - (char *)v158[5] == 4)
        {
          *(_DWORD *)&v607[16] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v609.__r_.__value_.__r.__words[2], *(int *)&v607[12], &v607[12])[5];
          v159 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v611, *(int *)&v607[12], &v607[12]);
          if ((char *)v159[6] - (char *)v159[5] == 4)
          {
            v160 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v611, *(int *)&v607[16], &v607[16]);
            if ((char *)v160[6] - (char *)v160[5] == 4)
            {
              v161 = (uint64_t *)(*((_QWORD *)v573 + 4) + 16 * (int)v156);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v603, *v161, v161[1]);
              v162 = (uint64_t *)(*((_QWORD *)v573 + 4) + 16 * *(int *)&v607[12]);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v604, *v162, v162[1]);
              v163 = (uint64_t *)(*((_QWORD *)v573 + 4) + 16 * *(int *)&v607[16]);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v605, *v163, v163[1]);
              v164 = v603;
              v165 = *(void **)(v603 + 64);
              if (v165
              {
                v166 = *(unint64_t **)(v164 + 72);
                if (v166)
                {
                  v167 = v166 + 1;
                  do
                    v168 = __ldxr(v167);
                  while (__stxr(v168 + 1, v167));
                }
              }
              else
              {
                v166 = 0;
              }
              v169 = (std::__shared_weak_count *)__p[1];
              __p[0] = v165;
              __p[1] = v166;
              if (v169)
              {
                v170 = (unint64_t *)&v169->__shared_owners_;
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                  std::__shared_weak_count::__release_weak(v169);
                }
                v165 = __p[0];
              }
              if (v165)
              {
                v172 = v604[0];
                v173 = (void *)*((_QWORD *)v604[0] + 8);
                if (v173
                {
                  v174 = v172[9];
                  if (v174)
                  {
                    v175 = (unint64_t *)(v174 + 8);
                    do
                      v176 = __ldxr(v175);
                    while (__stxr(v176 + 1, v175));
                  }
                }
                else
                {
                  v174 = 0;
                }
                v177 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
                *(_QWORD *)&v601 = v173;
                *((_QWORD *)&v601 + 1) = v174;
                if (v177)
                {
                  v178 = (unint64_t *)&v177->__shared_owners_;
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                  v173 = (void *)v601;
                }
                if (v173)
                {
                  v180 = v605;
                  v181 = *(void **)(v605 + 64);
                  if (v181
                  {
                    v182 = *(_QWORD *)(v180 + 72);
                    if (v182)
                    {
                      v183 = (unint64_t *)(v182 + 8);
                      do
                        v184 = __ldxr(v183);
                      while (__stxr(v184 + 1, v183));
                    }
                  }
                  else
                  {
                    v182 = 0;
                  }
                  v185 = (std::__shared_weak_count *)*((_QWORD *)&v602 + 1);
                  *(_QWORD *)&v602 = v181;
                  *((_QWORD *)&v602 + 1) = v182;
                  if (v185)
                  {
                    v186 = (unint64_t *)&v185->__shared_owners_;
                    do
                      v187 = __ldaxr(v186);
                    while (__stlxr(v187 - 1, v186));
                    if (!v187)
                    {
                      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
                      std::__shared_weak_count::__release_weak(v185);
                    }
                    v181 = (void *)v602;
                  }
                  if (v181)
                    v580((uint64_t)v155, (uint64_t)__p);
                }
              }
            }
          }
        }
      }
      v156 = (int)v595 + 1;
      LODWORD(v595) = v595 + 1;
    }
    while (v156 < (uint64_t)(*((_QWORD *)v573 + 5) - *((_QWORD *)v573 + 4)) >> 4);
    v188 = v606[0];
    v189 = v606[1];
    if (v606[0] == v606[1])
    {
      v2 = v573;
      this = v563;
    }
    else
    {
      v190 = 0;
      v2 = v573;
      this = v563;
      do
      {
        Espresso::net::remove_layer(v573, v190 + *v188++);
        --v190;
      }
      while (v188 != v189);
      v188 = v606[0];
    }
    v155 = v569;
    if (v188)
    {
      v606[1] = v188;
      operator delete(v188);
    }
  }
  v191 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
  if (*((_QWORD *)&v605 + 1))
  {
    v192 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
    do
      v193 = __ldaxr(v192);
    while (__stlxr(v193 - 1, v192));
    if (!v193)
    {
      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
      std::__shared_weak_count::__release_weak(v191);
    }
  }
  v194 = (std::__shared_weak_count *)v604[1];
  if (v604[1])
  {
    v195 = (unint64_t *)((char *)v604[1] + 8);
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  v197 = (std::__shared_weak_count *)*((_QWORD *)&v603 + 1);
  if (*((_QWORD *)&v603 + 1))
  {
    v198 = (unint64_t *)(*((_QWORD *)&v603 + 1) + 8);
    do
      v199 = __ldaxr(v198);
    while (__stlxr(v199 - 1, v198));
    if (!v199)
    {
      ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
      std::__shared_weak_count::__release_weak(v197);
    }
  }
  v200 = (std::__shared_weak_count *)*((_QWORD *)&v602 + 1);
  if (*((_QWORD *)&v602 + 1))
  {
    v201 = (unint64_t *)(*((_QWORD *)&v602 + 1) + 8);
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  v203 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
  if (*((_QWORD *)&v601 + 1))
  {
    v204 = (unint64_t *)(*((_QWORD *)&v601 + 1) + 8);
    do
      v205 = __ldaxr(v204);
    while (__stlxr(v205 - 1, v204));
    if (!v205)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  v206 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v207 = (unint64_t *)((char *)__p[1] + 8);
    do
      v208 = __ldaxr(v207);
    while (__stlxr(v208 - 1, v207));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v206->__on_zero_shared)(v206);
      std::__shared_weak_count::__release_weak(v206);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v612[0]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v610[0]);
  v209 = (std::__shared_weak_count *)v609.__r_.__value_.__l.__size_;
  if (v609.__r_.__value_.__l.__size_)
  {
    v210 = (unint64_t *)(v609.__r_.__value_.__l.__size_ + 8);
    do
      v211 = __ldaxr(v210);
    while (__stlxr(v211 - 1, v210));
    if (!v211)
    {
      ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
      std::__shared_weak_count::__release_weak(v209);
    }
  }

  v575[0] = MEMORY[0x1E0C809B0];
  v575[1] = 3221225472;
  v576 = (void (*)(uint64_t, void **))___ZN8Espresso9MPSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2;
  v577 = &__block_descriptor_40_e9_v16__0_v8l;
  v578 = this;
  v570 = v575;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v595, v2);
  v605 = 0u;
  *(_OWORD *)v606 = 0u;
  v603 = 0u;
  *(_OWORD *)v604 = 0u;
  v601 = 0u;
  v602 = 0u;
  *(_OWORD *)__p = 0u;
  *(_QWORD *)v607 = 0;
  *(_QWORD *)&v607[8] = v2;
  LODWORD(v609.__r_.__value_.__l.__data_) = 0;
  v212 = *((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 5) != v212)
  {
    v213 = 0;
    v214 = 0;
    do
    {
      *(_DWORD *)v607 = v214;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v602, *(_QWORD *)(v212 + 16 * v213), *(_QWORD *)(v212 + 16 * v213 + 8));
      v215 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v596, v214, &v609);
      if ((char *)v215[6] - (char *)v215[5] == 4)
      {
        *(_DWORD *)&v607[4] = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v596, *(int *)v607, v607)[5];
        v216 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v597, *(int *)&v607[4], &v607[4]);
        if ((char *)v216[6] - (char *)v216[5] == 4)
        {
          v217 = (uint64_t *)(*((_QWORD *)v573 + 4) + 16 * *(int *)&v607[4]);
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v603, *v217, v217[1]);
          v218 = v602;
          v219 = *(void **)(v602 + 64);
          if (v219
          {
            v220 = *(unint64_t **)(v218 + 72);
            if (v220)
            {
              v221 = v220 + 1;
              do
                v222 = __ldxr(v221);
              while (__stxr(v222 + 1, v221));
            }
          }
          else
          {
            v220 = 0;
          }
          v223 = (std::__shared_weak_count *)__p[1];
          __p[0] = v219;
          __p[1] = v220;
          if (v223)
          {
            v224 = (unint64_t *)&v223->__shared_owners_;
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 - 1, v224));
            if (!v225)
            {
              ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
              std::__shared_weak_count::__release_weak(v223);
            }
          }
          v226 = v603;
          v227 = *(void **)(v603 + 64);
          if (v227
          {
            v228 = *(_QWORD *)(v226 + 72);
            if (v228)
            {
              v229 = (unint64_t *)(v228 + 8);
              do
                v230 = __ldxr(v229);
              while (__stxr(v230 + 1, v229));
            }
          }
          else
          {
            v228 = 0;
          }
          v231 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
          *(_QWORD *)&v601 = v227;
          *((_QWORD *)&v601 + 1) = v228;
          if (v231)
          {
            v232 = (unint64_t *)&v231->__shared_owners_;
            do
              v233 = __ldaxr(v232);
            while (__stlxr(v233 - 1, v232));
            if (!v233)
            {
              ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
              std::__shared_weak_count::__release_weak(v231);
            }
          }
          if (__p[0])
            v234 = (_QWORD)v601 == 0;
          else
            v234 = 1;
          if (!v234)
            v576((uint64_t)v570, __p);
        }
      }
      v213 = SLODWORD(v609.__r_.__value_.__l.__data_) + 1;
      ++LODWORD(v609.__r_.__value_.__l.__data_);
      v212 = *((_QWORD *)v573 + 4);
      v214 = v213;
    }
    while (v213 < (*((_QWORD *)v573 + 5) - v212) >> 4);
    v2 = v573;
  }
  std::__sort<std::__less<int,int> &,int *>();
  v235 = v604[0];
  v236 = v604[1];
  if (v604[0] != v604[1])
  {
    v237 = 0;
    do
    {
      Espresso::net::remove_layer(v2, v237 + *v235++);
      --v237;
    }
    while (v235 != v236);
  }
  v238 = (_QWORD *)*((_QWORD *)&v605 + 1);
  v239 = v606[0];
  if (*((void **)&v605 + 1) != v606[0])
  {
    v240 = 0;
    do
    {
      v241 = *(_DWORD *)v238;
      LODWORD(v585) = *(_DWORD *)v238 + v240;
      LODWORD(v609.__r_.__value_.__l.__data_) = v241;
      v242 = v238[2];
      v609.__r_.__value_.__l.__size_ = v238[1];
      v609.__r_.__value_.__r.__words[2] = v242;
      if (v242)
      {
        v243 = (unint64_t *)(v242 + 8);
        do
          v244 = __ldxr(v243);
        while (__stxr(v244 + 1, v243));
      }
      v610[0] = 0;
      v610[1] = 0;
      v611 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v610, v238[3], v238[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v238[4] - v238[3]) >> 3));
      memset(v612, 0, sizeof(v612));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v612, v238[6], v238[7], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v238[7] - v238[6]) >> 3));
      v593 = 0uLL;
      v594 = 0;
      v598 = (void **)&v593;
      LOBYTE(v599) = 0;
      *(_QWORD *)&v593 = operator new(0x48uLL);
      *((_QWORD *)&v593 + 1) = v593;
      v594 = v593 + 72;
      *((_QWORD *)&v593 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v594, (uint64_t)&v609, (uint64_t)v613, v593);
      Espresso::net::insert_layers((uint64_t)v573, (int *)&v585, (uint64_t *)&v593);
      v598 = (void **)&v593;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](&v598);
      v598 = (void **)v612;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v598);
      v598 = (void **)v610;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v598);
      v245 = (std::__shared_weak_count *)v609.__r_.__value_.__r.__words[2];
      if (v609.__r_.__value_.__r.__words[2])
      {
        v246 = (unint64_t *)(v609.__r_.__value_.__r.__words[2] + 8);
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
          std::__shared_weak_count::__release_weak(v245);
        }
      }
      ++v240;
      v238 += 9;
    }
    while (v238 != v239);
  }
  v609.__r_.__value_.__r.__words[0] = (std::string::size_type)&v605 + 8;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v609);
  if (v604[0])
  {
    v604[1] = v604[0];
    operator delete(v604[0]);
  }
  v248 = (std::__shared_weak_count *)*((_QWORD *)&v603 + 1);
  v249 = v573;
  if (*((_QWORD *)&v603 + 1))
  {
    v250 = (unint64_t *)(*((_QWORD *)&v603 + 1) + 8);
    do
      v251 = __ldaxr(v250);
    while (__stlxr(v251 - 1, v250));
    if (!v251)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v252 = (std::__shared_weak_count *)*((_QWORD *)&v602 + 1);
  if (*((_QWORD *)&v602 + 1))
  {
    v253 = (unint64_t *)(*((_QWORD *)&v602 + 1) + 8);
    do
      v254 = __ldaxr(v253);
    while (__stlxr(v254 - 1, v253));
    if (!v254)
    {
      ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
      std::__shared_weak_count::__release_weak(v252);
    }
  }
  v255 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
  if (*((_QWORD *)&v601 + 1))
  {
    v256 = (unint64_t *)(*((_QWORD *)&v601 + 1) + 8);
    do
      v257 = __ldaxr(v256);
    while (__stlxr(v257 - 1, v256));
    if (!v257)
    {
      ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
      std::__shared_weak_count::__release_weak(v255);
    }
  }
  v258 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v259 = (unint64_t *)((char *)__p[1] + 8);
    do
      v260 = __ldaxr(v259);
    while (__stlxr(v260 - 1, v259));
    if (!v260)
    {
      ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
      std::__shared_weak_count::__release_weak(v258);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v597[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v596[1]);
  v261 = (std::__shared_weak_count *)*((_QWORD *)&v595 + 1);
  if (*((_QWORD *)&v595 + 1))
  {
    v262 = (unint64_t *)(*((_QWORD *)&v595 + 1) + 8);
    do
      v263 = __ldaxr(v262);
    while (__stlxr(v263 - 1, v262));
    if (!v263)
    {
      ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
      std::__shared_weak_count::__release_weak(v261);
    }
  }

  v574[0] = MEMORY[0x1E0C809B0];
  v574[1] = 3221225472;
  v574[2] = ___ZN8Espresso9MPSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3;
  v574[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v574[4] = v563;
  Espresso::fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(v573, v574);
  *((_QWORD *)&v265 + 1) = 0;
  *(_OWORD *)v606 = 0u;
  memset(v607, 0, sizeof(v607));
  *(_OWORD *)v604 = 0u;
  v605 = 0u;
  v602 = 0u;
  v603 = 0u;
  *(_OWORD *)__p = 0u;
  v601 = 0u;
  v608 = v573;
  v266 = (*((_QWORD *)v573 + 5) - *((_QWORD *)v573 + 4)) >> 4;
  v267 = v266 - 3;
  if ((int)v266 >= 3)
  {
    v268 = 0;
    v565 = (uint64_t)v573 + 56;
    v561 = (uint64_t)v573 + 96;
    while (2)
    {
      *(_DWORD *)&v607[8] = v268;
      *(int32x2_t *)&v265 = vadd_s32(vdup_n_s32(v268), (int32x2_t)0x200000001);
      v571 = v265;
      *(_QWORD *)&v607[12] = v265;
      v269 = (std::__shared_weak_count *)*((_QWORD *)&v603 + 1);
      v603 = 0uLL;
      if (v269)
      {
        v270 = (unint64_t *)&v269->__shared_owners_;
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
      v272 = (uint64_t *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[12]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v604, *v272, v272[1]);
      v273 = (uint64_t *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[16]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v605, *v273, v273[1]);
      v274 = *(_QWORD *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[8]);
      v275 = *(void **)(v274 + 64);
      if (v275
      {
        v276 = *(unint64_t **)(v274 + 72);
        if (v276)
        {
          v277 = v276 + 1;
          do
            v278 = __ldxr(v277);
          while (__stxr(v278 + 1, v277));
        }
      }
      else
      {
        v276 = 0;
      }
      v279 = (std::__shared_weak_count *)__p[1];
      __p[0] = v275;
      __p[1] = v276;
      if (v279)
      {
        v280 = (unint64_t *)&v279->__shared_owners_;
        do
          v281 = __ldaxr(v280);
        while (__stlxr(v281 - 1, v280));
        if (!v281)
        {
          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
          std::__shared_weak_count::__release_weak(v279);
        }
        v275 = __p[0];
      }
      if (v275)
      {
        v282 = (uint64_t *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[8]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v603, *v282, v282[1]);
      }
      v283 = v604[0];
      v284 = (void *)*((_QWORD *)v604[0] + 8);
      if (v284
      {
        v285 = v283[9];
        if (v285)
        {
          v286 = (unint64_t *)(v285 + 8);
          do
            v287 = __ldxr(v286);
          while (__stxr(v287 + 1, v286));
        }
      }
      else
      {
        v285 = 0;
      }
      v288 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
      *(_QWORD *)&v601 = v284;
      *((_QWORD *)&v601 + 1) = v285;
      if (v288)
      {
        v289 = (unint64_t *)&v288->__shared_owners_;
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
        v284 = (void *)v601;
      }
      if (!v284)
        goto LABEL_525;
      v291 = v605;
      v292 = *(void **)(v605 + 64);
      if (v292
      {
        v293 = *(_QWORD *)(v291 + 72);
        if (v293)
        {
          v294 = (unint64_t *)(v293 + 8);
          do
            v295 = __ldxr(v294);
          while (__stxr(v295 + 1, v294));
        }
      }
      else
      {
        v293 = 0;
      }
      v296 = (std::__shared_weak_count *)*((_QWORD *)&v602 + 1);
      *(_QWORD *)&v602 = v292;
      *((_QWORD *)&v602 + 1) = v293;
      if (v296)
      {
        v297 = (unint64_t *)&v296->__shared_owners_;
        do
          v298 = __ldaxr(v297);
        while (__stlxr(v298 - 1, v297));
        if (!v298)
        {
          ((void (*)(std::__shared_weak_count *))v296->__on_zero_shared)(v296);
          std::__shared_weak_count::__release_weak(v296);
        }
        v292 = (void *)v602;
      }
      if (!v292)
        goto LABEL_525;
      v299 = __p[0];
      v609.__r_.__value_.__r.__words[0] = *(int *)&v607[16];
      v300 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v565, *(int *)&v607[16], &v609);
      v609.__r_.__value_.__r.__words[0] = *(int *)&v607[12];
      v301 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v565, *(int *)&v607[12], &v609);
      if (v299)
      {
        *(_QWORD *)&v595 = *(int *)&v607[8];
        v302 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v565, *(int *)&v607[8], &v595);
        memset(&v609, 0, sizeof(v609));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v609, v302[3], v302[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v302[4] - v302[3]) >> 3));
      }
      else
      {
        memset(&v609, 0, sizeof(v609));
      }
      v303 = (unsigned __int8 *)v301[3];
      v304 = (unsigned __int8 **)v300[3];
      v305 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v301[4] - (_QWORD)v303) >> 3) >= 3
          && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v300[4] - (_QWORD)v304) >> 3) > 2;
      v306 = v303[23];
      if ((v306 & 0x80u) == 0)
        v307 = (unsigned __int8 *)v303[23];
      else
        v307 = (unsigned __int8 *)*((_QWORD *)v303 + 1);
      v308 = (unsigned __int8 *)*((unsigned __int8 *)v304 + 23);
      v309 = (char)v308;
      if ((char)v308 < 0)
        v308 = v304[1];
      if (v307 == v308)
      {
        if (v309 >= 0)
          v310 = (unsigned __int8 *)v300[3];
        else
          v310 = *v304;
        if ((v306 & 0x80) != 0)
        {
          v318 = memcmp(*(const void **)v303, v310, *((_QWORD *)v303 + 1)) == 0;
        }
        else if (v303[23])
        {
          v311 = v306 - 1;
          v312 = v303;
          do
          {
            v314 = *v312++;
            v313 = v314;
            v316 = *v310++;
            v315 = v316;
            v65 = v311-- != 0;
            v317 = v65;
            v318 = v313 == v315;
          }
          while (v313 == v315 && (v317 & 1) != 0);
        }
        else
        {
          v318 = 1;
        }
      }
      else
      {
        v318 = 0;
      }
      v319 = v303[47];
      if ((v319 & 0x80u) == 0)
        v320 = (unsigned __int8 *)v303[47];
      else
        v320 = (unsigned __int8 *)*((_QWORD *)v303 + 4);
      v321 = (unsigned __int8 *)*((unsigned __int8 *)v304 + 71);
      v322 = (char)v321;
      if ((char)v321 < 0)
        v321 = v304[7];
      if (v320 == v321)
      {
        v323 = (const void **)(v303 + 24);
        if (v322 >= 0)
          v324 = (unsigned __int8 *)(v304 + 6);
        else
          v324 = v304[6];
        if ((v319 & 0x80) != 0)
        {
          v331 = memcmp(*v323, v324, *((_QWORD *)v303 + 4)) == 0;
        }
        else if (v303[47])
        {
          v325 = v319 - 1;
          do
          {
            v327 = *(unsigned __int8 *)v323;
            v323 = (const void **)((char *)v323 + 1);
            v326 = v327;
            v329 = *v324++;
            v328 = v329;
            v65 = v325-- != 0;
            v330 = v65;
            v331 = v326 == v328;
          }
          while (v326 == v328 && (v330 & 1) != 0);
        }
        else
        {
          v331 = 1;
        }
      }
      else
      {
        v331 = 0;
      }
      v332 = v303[71];
      if ((v332 & 0x80u) == 0)
        v333 = (unsigned __int8 *)v303[71];
      else
        v333 = (unsigned __int8 *)*((_QWORD *)v303 + 7);
      v334 = (unsigned __int8 *)*((unsigned __int8 *)v304 + 47);
      v335 = (char)v334;
      if ((char)v334 < 0)
        v334 = v304[4];
      if (v333 == v334)
      {
        v336 = (const void **)(v303 + 48);
        v339 = v304[3];
        v338 = (unsigned __int8 *)(v304 + 3);
        v337 = v339;
        if (v335 >= 0)
          v340 = v338;
        else
          v340 = v337;
        if ((v332 & 0x80) != 0)
        {
          v341 = memcmp(*v336, v340, *((_QWORD *)v303 + 7)) == 0;
        }
        else
        {
          if (v303[71])
          {
            while (*(unsigned __int8 *)v336 == *v340)
            {
              v336 = (const void **)((char *)v336 + 1);
              ++v340;
              if (!--v332)
                goto LABEL_466;
            }
            goto LABEL_524;
          }
LABEL_466:
          v341 = 1;
        }
        if (!v305 || !v318 || !v331 || !v341)
          goto LABEL_524;
        *(_QWORD *)&v595 = *(int *)&v607[12];
        v342 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v561, *(int *)&v607[12], &v595);
        *(_QWORD *)&v593 = *(int *)&v607[16];
        v343 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v561, *(int *)&v607[16], &v593);
        v344 = (char **)(v342 + 3);
        v345 = (__int128 *)v343[3];
        v346 = (std::string *)v342[4];
        if ((unint64_t)v346 >= v342[5])
        {
          v347 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v344, (uint64_t)v345);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v344, v345);
          v347 = v346 + 1;
        }
        v342[4] = v347;
        *(_BYTE *)(v601 + 504) = 1;
        if (v299)
        {
          v348 = (unsigned __int8 *)v609.__r_.__value_.__r.__words[0];
          if (v609.__r_.__value_.__l.__size_ - v609.__r_.__value_.__r.__words[0] == 24)
          {
            v349 = (unsigned __int8 **)v300[3];
            v350 = *(unsigned __int8 *)(v609.__r_.__value_.__r.__words[0] + 23);
            if ((v350 & 0x80u) == 0)
              v351 = (unsigned __int8 *)*(unsigned __int8 *)(v609.__r_.__value_.__r.__words[0] + 23);
            else
              v351 = *(unsigned __int8 **)(v609.__r_.__value_.__r.__words[0] + 8);
            v352 = (unsigned __int8 *)*((unsigned __int8 *)v349 + 23);
            v353 = (char)v352;
            if ((char)v352 < 0)
              v352 = v349[1];
            if (v351 == v352)
            {
              if (v353 >= 0)
                v354 = (unsigned __int8 *)v300[3];
              else
                v354 = *v349;
              if ((v350 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v609.__r_.__value_.__l.__data_, v354, *(_QWORD *)(v609.__r_.__value_.__r.__words[0] + 8)))
                {
                  goto LABEL_508;
                }
              }
              else if (*(_BYTE *)(v609.__r_.__value_.__r.__words[0] + 23))
              {
                while (*v348 == *v354)
                {
                  ++v348;
                  ++v354;
                  if (!--v350)
                    goto LABEL_489;
                }
                goto LABEL_508;
              }
LABEL_489:
              *(_QWORD *)&v595 = *(int *)&v607[12];
              v355 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v561, *(int *)&v607[12], &v595);
              *(_QWORD *)&v593 = *(int *)&v607[8];
              v356 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v561, *(int *)&v607[8], &v593);
              v357 = (char **)(v355 + 3);
              v358 = (__int128 *)v356[3];
              v359 = (std::string *)v355[4];
              if ((unint64_t)v359 >= v355[5])
              {
                v360 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v357, (uint64_t)v358);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v357, v358);
                v360 = v359 + 1;
              }
              v355[4] = v360;
              v361 = (char *)v606[1];
              *(_BYTE *)(v601 + 505) = 1;
              if ((unint64_t)v361 >= *(_QWORD *)v607)
              {
                v363 = (char *)v606[0];
                v364 = (v361 - (char *)v606[0]) >> 2;
                v365 = v364 + 1;
                if ((unint64_t)(v364 + 1) >> 62)
                  goto LABEL_805;
                v366 = *(_QWORD *)v607 - (unint64_t)v606[0];
                if ((uint64_t)(*(_QWORD *)v607 - (unint64_t)v606[0]) >> 1 > v365)
                  v365 = v366 >> 1;
                v65 = (unint64_t)v366 >= 0x7FFFFFFFFFFFFFFCLL;
                v367 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v65)
                  v367 = v365;
                if (v367)
                {
                  v367 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v367);
                  v361 = (char *)v606[1];
                  v363 = (char *)v606[0];
                }
                else
                {
                  v368 = 0;
                }
                v369 = (_DWORD *)(v367 + 4 * v364);
                *v369 = *(_DWORD *)&v607[8];
                v362 = v369 + 1;
                while (v361 != v363)
                {
                  v370 = *((_DWORD *)v361 - 1);
                  v361 -= 4;
                  *--v369 = v370;
                }
                v606[0] = v369;
                v606[1] = v362;
                *(_QWORD *)v607 = v367 + 4 * v368;
                if (v363)
                  operator delete(v363);
              }
              else
              {
                *(_DWORD *)v361 = *(_DWORD *)&v607[8];
                v362 = v361 + 4;
              }
              v606[1] = v362;
            }
          }
        }
LABEL_508:
        v371 = (char *)v606[1];
        if (v606[1] >= (void *)*(_QWORD *)v607)
        {
          v373 = (char *)v606[0];
          v374 = ((char *)v606[1] - (char *)v606[0]) >> 2;
          v375 = v374 + 1;
          if ((unint64_t)(v374 + 1) >> 62)
LABEL_805:
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v376 = *(_QWORD *)v607 - (unint64_t)v606[0];
          if ((uint64_t)(*(_QWORD *)v607 - (unint64_t)v606[0]) >> 1 > v375)
            v375 = v376 >> 1;
          v65 = (unint64_t)v376 >= 0x7FFFFFFFFFFFFFFCLL;
          v377 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v65)
            v377 = v375;
          if (v377)
          {
            v377 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v377);
            v371 = (char *)v606[1];
            v373 = (char *)v606[0];
          }
          else
          {
            v378 = 0;
          }
          v379 = (_DWORD *)(v377 + 4 * v374);
          *v379 = *(_DWORD *)&v607[16];
          v372 = v379 + 1;
          while (v371 != v373)
          {
            v380 = *((_DWORD *)v371 - 1);
            v371 -= 4;
            *--v379 = v380;
          }
          v606[0] = v379;
          v606[1] = v372;
          *(_QWORD *)v607 = v377 + 4 * v378;
          if (v373)
            operator delete(v373);
        }
        else
        {
          *(_DWORD *)v606[1] = *(_DWORD *)&v607[16];
          v372 = v371 + 4;
        }
        v606[1] = v372;
      }
LABEL_524:
      *(_QWORD *)&v595 = &v609;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v595);
      v249 = v573;
LABEL_525:
      *((_QWORD *)&v265 + 1) = *((_QWORD *)&v571 + 1);
      v234 = v268 == v267;
      v268 = v571;
      if (v234)
      {
        v381 = v606[0];
        v382 = v606[1];
        if (v606[0] != v606[1])
        {
          v383 = 0;
          do
          {
            Espresso::net::remove_layer(v249, v383 + *v381++);
            --v383;
          }
          while (v381 != v382);
          v381 = v606[0];
        }
        if (v381)
        {
          v606[1] = v381;
          operator delete(v381);
        }
        break;
      }
      continue;
    }
  }
  v384 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
  if (*((_QWORD *)&v605 + 1))
  {
    v385 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
    do
      v386 = __ldaxr(v385);
    while (__stlxr(v386 - 1, v385));
    if (!v386)
    {
      ((void (*)(std::__shared_weak_count *))v384->__on_zero_shared)(v384);
      std::__shared_weak_count::__release_weak(v384);
    }
  }
  v387 = (std::__shared_weak_count *)v604[1];
  if (v604[1])
  {
    v388 = (unint64_t *)((char *)v604[1] + 8);
    do
      v389 = __ldaxr(v388);
    while (__stlxr(v389 - 1, v388));
    if (!v389)
    {
      ((void (*)(std::__shared_weak_count *))v387->__on_zero_shared)(v387);
      std::__shared_weak_count::__release_weak(v387);
    }
  }
  v390 = (std::__shared_weak_count *)*((_QWORD *)&v603 + 1);
  if (*((_QWORD *)&v603 + 1))
  {
    v391 = (unint64_t *)(*((_QWORD *)&v603 + 1) + 8);
    do
      v392 = __ldaxr(v391);
    while (__stlxr(v392 - 1, v391));
    if (!v392)
    {
      ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
      std::__shared_weak_count::__release_weak(v390);
    }
  }
  v393 = (std::__shared_weak_count *)*((_QWORD *)&v602 + 1);
  if (*((_QWORD *)&v602 + 1))
  {
    v394 = (unint64_t *)(*((_QWORD *)&v602 + 1) + 8);
    do
      v395 = __ldaxr(v394);
    while (__stlxr(v395 - 1, v394));
    if (!v395)
    {
      ((void (*)(std::__shared_weak_count *))v393->__on_zero_shared)(v393);
      std::__shared_weak_count::__release_weak(v393);
    }
  }
  v396 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
  if (*((_QWORD *)&v601 + 1))
  {
    v397 = (unint64_t *)(*((_QWORD *)&v601 + 1) + 8);
    do
      v398 = __ldaxr(v397);
    while (__stlxr(v398 - 1, v397));
    if (!v398)
    {
      ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
      std::__shared_weak_count::__release_weak(v396);
    }
  }
  v399 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v400 = (unint64_t *)((char *)__p[1] + 8);
    do
      v401 = __ldaxr(v400);
    while (__stlxr(v401 - 1, v400));
    if (!v401)
    {
      ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
      std::__shared_weak_count::__release_weak(v399);
    }
  }
  *((_QWORD *)&v402 + 1) = 0;
  *(_OWORD *)v606 = 0u;
  memset(v607, 0, sizeof(v607));
  *(_OWORD *)v604 = 0u;
  v605 = 0u;
  v602 = 0u;
  v603 = 0u;
  *(_OWORD *)__p = 0u;
  v601 = 0u;
  v608 = v249;
  v403 = (*((_QWORD *)v249 + 5) - *((_QWORD *)v249 + 4)) >> 4;
  v404 = v403 - 3;
  if ((int)v403 >= 3)
  {
    v405 = 0;
    v566 = (uint64_t)v249 + 56;
    v562 = (uint64_t)v249 + 96;
    while (2)
    {
      *(_DWORD *)&v607[8] = v405;
      *(int32x2_t *)&v402 = vadd_s32(vdup_n_s32(v405), (int32x2_t)0x200000001);
      v572 = v402;
      *(_QWORD *)&v607[12] = v402;
      v406 = (std::__shared_weak_count *)*((_QWORD *)&v603 + 1);
      v603 = 0uLL;
      if (v406)
      {
        v407 = (unint64_t *)&v406->__shared_owners_;
        do
          v408 = __ldaxr(v407);
        while (__stlxr(v408 - 1, v407));
        if (!v408)
        {
          ((void (*)(std::__shared_weak_count *))v406->__on_zero_shared)(v406);
          std::__shared_weak_count::__release_weak(v406);
        }
      }
      v409 = (uint64_t *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[12]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v604, *v409, v409[1]);
      v410 = (uint64_t *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[16]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v605, *v410, v410[1]);
      v411 = *(_QWORD *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[8]);
      v412 = *(void **)(v411 + 64);
      if (v412
      {
        v413 = *(unint64_t **)(v411 + 72);
        if (v413)
        {
          v414 = v413 + 1;
          do
            v415 = __ldxr(v414);
          while (__stxr(v415 + 1, v414));
        }
      }
      else
      {
        v413 = 0;
      }
      v416 = (std::__shared_weak_count *)__p[1];
      __p[0] = v412;
      __p[1] = v413;
      if (v416)
      {
        v417 = (unint64_t *)&v416->__shared_owners_;
        do
          v418 = __ldaxr(v417);
        while (__stlxr(v418 - 1, v417));
        if (!v418)
        {
          ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
          std::__shared_weak_count::__release_weak(v416);
        }
        v412 = __p[0];
      }
      if (v412)
      {
        v419 = (uint64_t *)(*((_QWORD *)v249 + 4) + 16 * *(int *)&v607[8]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v603, *v419, v419[1]);
      }
      v420 = v604[0];
      v421 = (void *)*((_QWORD *)v604[0] + 8);
      if (v421
      {
        v422 = v420[9];
        if (v422)
        {
          v423 = (unint64_t *)(v422 + 8);
          do
            v424 = __ldxr(v423);
          while (__stxr(v424 + 1, v423));
        }
      }
      else
      {
        v422 = 0;
      }
      v425 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
      *(_QWORD *)&v601 = v421;
      *((_QWORD *)&v601 + 1) = v422;
      if (v425)
      {
        v426 = (unint64_t *)&v425->__shared_owners_;
        do
          v427 = __ldaxr(v426);
        while (__stlxr(v427 - 1, v426));
        if (!v427)
        {
          ((void (*)(std::__shared_weak_count *))v425->__on_zero_shared)(v425);
          std::__shared_weak_count::__release_weak(v425);
        }
        v421 = (void *)v601;
      }
      if (!v421)
        goto LABEL_733;
      v428 = v605;
      v429 = *(void **)(v605 + 64);
      if (v429
      {
        v430 = *(_QWORD *)(v428 + 72);
        if (v430)
        {
          v431 = (unint64_t *)(v430 + 8);
          do
            v432 = __ldxr(v431);
          while (__stxr(v432 + 1, v431));
        }
      }
      else
      {
        v430 = 0;
      }
      v433 = (std::__shared_weak_count *)*((_QWORD *)&v602 + 1);
      *(_QWORD *)&v602 = v429;
      *((_QWORD *)&v602 + 1) = v430;
      if (v433)
      {
        v434 = (unint64_t *)&v433->__shared_owners_;
        do
          v435 = __ldaxr(v434);
        while (__stlxr(v435 - 1, v434));
        if (!v435)
        {
          ((void (*)(std::__shared_weak_count *))v433->__on_zero_shared)(v433);
          std::__shared_weak_count::__release_weak(v433);
        }
        v429 = (void *)v602;
      }
      if (!v429)
        goto LABEL_733;
      v436 = __p[0];
      v609.__r_.__value_.__r.__words[0] = *(int *)&v607[16];
      v437 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v566, *(int *)&v607[16], &v609);
      v609.__r_.__value_.__r.__words[0] = *(int *)&v607[12];
      v438 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v566, *(int *)&v607[12], &v609);
      if (v436)
      {
        *(_QWORD *)&v595 = *(int *)&v607[8];
        v439 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v566, *(int *)&v607[8], &v595);
        memset(&v609, 0, sizeof(v609));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v609, v439[3], v439[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v439[4] - v439[3]) >> 3));
      }
      else
      {
        memset(&v609, 0, sizeof(v609));
      }
      v440 = (unsigned __int8 *)v438[3];
      v441 = (unsigned __int8 **)v437[3];
      v442 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v438[4] - (_QWORD)v440) >> 3) >= 3
          && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v437[4] - (_QWORD)v441) >> 3) > 2;
      v443 = v440[23];
      if ((v443 & 0x80u) == 0)
        v444 = (unsigned __int8 *)v440[23];
      else
        v444 = (unsigned __int8 *)*((_QWORD *)v440 + 1);
      v445 = (unsigned __int8 *)*((unsigned __int8 *)v441 + 23);
      v446 = (char)v445;
      if ((char)v445 < 0)
        v445 = v441[1];
      if (v444 == v445)
      {
        if (v446 >= 0)
          v447 = (unsigned __int8 *)v437[3];
        else
          v447 = *v441;
        if ((v443 & 0x80) != 0)
        {
          v455 = memcmp(*(const void **)v440, v447, *((_QWORD *)v440 + 1)) == 0;
        }
        else if (v440[23])
        {
          v448 = v443 - 1;
          v449 = v440;
          do
          {
            v451 = *v449++;
            v450 = v451;
            v453 = *v447++;
            v452 = v453;
            v65 = v448-- != 0;
            v454 = v65;
            v455 = v450 == v452;
          }
          while (v450 == v452 && (v454 & 1) != 0);
        }
        else
        {
          v455 = 1;
        }
      }
      else
      {
        v455 = 0;
      }
      v456 = v440[47];
      if ((v456 & 0x80u) == 0)
        v457 = (unsigned __int8 *)v440[47];
      else
        v457 = (unsigned __int8 *)*((_QWORD *)v440 + 4);
      v458 = (unsigned __int8 *)*((unsigned __int8 *)v441 + 71);
      v459 = (char)v458;
      if ((char)v458 < 0)
        v458 = v441[7];
      if (v457 == v458)
      {
        v460 = (const void **)(v440 + 24);
        if (v459 >= 0)
          v461 = (unsigned __int8 *)(v441 + 6);
        else
          v461 = v441[6];
        if ((v456 & 0x80) != 0)
        {
          v468 = memcmp(*v460, v461, *((_QWORD *)v440 + 4)) == 0;
        }
        else if (v440[47])
        {
          v462 = v456 - 1;
          do
          {
            v464 = *(unsigned __int8 *)v460;
            v460 = (const void **)((char *)v460 + 1);
            v463 = v464;
            v466 = *v461++;
            v465 = v466;
            v65 = v462-- != 0;
            v467 = v65;
            v468 = v463 == v465;
          }
          while (v463 == v465 && (v467 & 1) != 0);
        }
        else
        {
          v468 = 1;
        }
      }
      else
      {
        v468 = 0;
      }
      v469 = v440[71];
      if ((v469 & 0x80u) == 0)
        v470 = (unsigned __int8 *)v440[71];
      else
        v470 = (unsigned __int8 *)*((_QWORD *)v440 + 7);
      v471 = (unsigned __int8 *)*((unsigned __int8 *)v441 + 47);
      v472 = (char)v471;
      if ((char)v471 < 0)
        v471 = v441[4];
      if (v470 == v471)
      {
        v473 = (const void **)(v440 + 48);
        v476 = v441[3];
        v475 = (unsigned __int8 *)(v441 + 3);
        v474 = v476;
        if (v472 >= 0)
          v477 = v475;
        else
          v477 = v474;
        if ((v469 & 0x80) != 0)
        {
          v478 = memcmp(*v473, v477, *((_QWORD *)v440 + 7)) == 0;
        }
        else
        {
          if (v440[71])
          {
            while (*(unsigned __int8 *)v473 == *v477)
            {
              v473 = (const void **)((char *)v473 + 1);
              ++v477;
              if (!--v469)
                goto LABEL_674;
            }
            goto LABEL_732;
          }
LABEL_674:
          v478 = 1;
        }
        if (!v442 || !v455 || !v468 || !v478)
          goto LABEL_732;
        *(_QWORD *)&v595 = *(int *)&v607[12];
        v479 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v562, *(int *)&v607[12], &v595);
        *(_QWORD *)&v593 = *(int *)&v607[16];
        v480 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v562, *(int *)&v607[16], &v593);
        v481 = (char **)(v479 + 3);
        v482 = (__int128 *)v480[3];
        v483 = (std::string *)v479[4];
        if ((unint64_t)v483 >= v479[5])
        {
          v484 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v481, (uint64_t)v482);
        }
        else
        {
          std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v481, v482);
          v484 = v483 + 1;
        }
        v479[4] = v484;
        *(_BYTE *)(v601 + 472) = 1;
        if (v436)
        {
          v485 = (unsigned __int8 *)v609.__r_.__value_.__r.__words[0];
          if (v609.__r_.__value_.__l.__size_ - v609.__r_.__value_.__r.__words[0] == 24)
          {
            v486 = (unsigned __int8 **)v437[3];
            v487 = *(unsigned __int8 *)(v609.__r_.__value_.__r.__words[0] + 23);
            if ((v487 & 0x80u) == 0)
              v488 = (unsigned __int8 *)*(unsigned __int8 *)(v609.__r_.__value_.__r.__words[0] + 23);
            else
              v488 = *(unsigned __int8 **)(v609.__r_.__value_.__r.__words[0] + 8);
            v489 = (unsigned __int8 *)*((unsigned __int8 *)v486 + 23);
            v490 = (char)v489;
            if ((char)v489 < 0)
              v489 = v486[1];
            if (v488 == v489)
            {
              if (v490 >= 0)
                v491 = (unsigned __int8 *)v437[3];
              else
                v491 = *v486;
              if ((v487 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v609.__r_.__value_.__l.__data_, v491, *(_QWORD *)(v609.__r_.__value_.__r.__words[0] + 8)))
                {
                  goto LABEL_716;
                }
              }
              else if (*(_BYTE *)(v609.__r_.__value_.__r.__words[0] + 23))
              {
                while (*v485 == *v491)
                {
                  ++v485;
                  ++v491;
                  if (!--v487)
                    goto LABEL_697;
                }
                goto LABEL_716;
              }
LABEL_697:
              *(_QWORD *)&v595 = *(int *)&v607[12];
              v492 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v562, *(int *)&v607[12], &v595);
              *(_QWORD *)&v593 = *(int *)&v607[8];
              v493 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v562, *(int *)&v607[8], &v593);
              v494 = (char **)(v492 + 3);
              v495 = (__int128 *)v493[3];
              v496 = (std::string *)v492[4];
              if ((unint64_t)v496 >= v492[5])
              {
                v497 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v494, (uint64_t)v495);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v494, v495);
                v497 = v496 + 1;
              }
              v492[4] = v497;
              v498 = (char *)v606[1];
              *(_BYTE *)(v601 + 473) = 1;
              if ((unint64_t)v498 >= *(_QWORD *)v607)
              {
                v500 = (char *)v606[0];
                v501 = (v498 - (char *)v606[0]) >> 2;
                v502 = v501 + 1;
                if ((unint64_t)(v501 + 1) >> 62)
                  goto LABEL_806;
                v503 = *(_QWORD *)v607 - (unint64_t)v606[0];
                if ((uint64_t)(*(_QWORD *)v607 - (unint64_t)v606[0]) >> 1 > v502)
                  v502 = v503 >> 1;
                v65 = (unint64_t)v503 >= 0x7FFFFFFFFFFFFFFCLL;
                v504 = 0x3FFFFFFFFFFFFFFFLL;
                if (!v65)
                  v504 = v502;
                if (v504)
                {
                  v504 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v504);
                  v498 = (char *)v606[1];
                  v500 = (char *)v606[0];
                }
                else
                {
                  v505 = 0;
                }
                v506 = (_DWORD *)(v504 + 4 * v501);
                *v506 = *(_DWORD *)&v607[8];
                v499 = v506 + 1;
                while (v498 != v500)
                {
                  v507 = *((_DWORD *)v498 - 1);
                  v498 -= 4;
                  *--v506 = v507;
                }
                v606[0] = v506;
                v606[1] = v499;
                *(_QWORD *)v607 = v504 + 4 * v505;
                if (v500)
                  operator delete(v500);
              }
              else
              {
                *(_DWORD *)v498 = *(_DWORD *)&v607[8];
                v499 = v498 + 4;
              }
              v606[1] = v499;
            }
          }
        }
LABEL_716:
        v508 = (char *)v606[1];
        if (v606[1] >= (void *)*(_QWORD *)v607)
        {
          v510 = (char *)v606[0];
          v511 = ((char *)v606[1] - (char *)v606[0]) >> 2;
          v512 = v511 + 1;
          if ((unint64_t)(v511 + 1) >> 62)
LABEL_806:
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v513 = *(_QWORD *)v607 - (unint64_t)v606[0];
          if ((uint64_t)(*(_QWORD *)v607 - (unint64_t)v606[0]) >> 1 > v512)
            v512 = v513 >> 1;
          v65 = (unint64_t)v513 >= 0x7FFFFFFFFFFFFFFCLL;
          v514 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v65)
            v514 = v512;
          if (v514)
          {
            v514 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v514);
            v508 = (char *)v606[1];
            v510 = (char *)v606[0];
          }
          else
          {
            v515 = 0;
          }
          v516 = (_DWORD *)(v514 + 4 * v511);
          *v516 = *(_DWORD *)&v607[16];
          v509 = v516 + 1;
          while (v508 != v510)
          {
            v517 = *((_DWORD *)v508 - 1);
            v508 -= 4;
            *--v516 = v517;
          }
          v606[0] = v516;
          v606[1] = v509;
          *(_QWORD *)v607 = v514 + 4 * v515;
          if (v510)
            operator delete(v510);
        }
        else
        {
          *(_DWORD *)v606[1] = *(_DWORD *)&v607[16];
          v509 = v508 + 4;
        }
        v606[1] = v509;
      }
LABEL_732:
      *(_QWORD *)&v595 = &v609;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v595);
      v249 = v573;
LABEL_733:
      *((_QWORD *)&v402 + 1) = *((_QWORD *)&v572 + 1);
      v234 = v405 == v404;
      v405 = v572;
      if (v234)
      {
        v518 = v606[0];
        v519 = v606[1];
        if (v606[0] != v606[1])
        {
          v520 = 0;
          do
          {
            Espresso::net::remove_layer(v249, v520 + *v518++);
            --v520;
          }
          while (v518 != v519);
          v518 = v606[0];
        }
        if (v518)
        {
          v606[1] = v518;
          operator delete(v518);
        }
        break;
      }
      continue;
    }
  }
  v521 = (std::__shared_weak_count *)*((_QWORD *)&v605 + 1);
  if (*((_QWORD *)&v605 + 1))
  {
    v522 = (unint64_t *)(*((_QWORD *)&v605 + 1) + 8);
    do
      v523 = __ldaxr(v522);
    while (__stlxr(v523 - 1, v522));
    if (!v523)
    {
      ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
      std::__shared_weak_count::__release_weak(v521);
    }
  }
  v524 = (std::__shared_weak_count *)v604[1];
  if (v604[1])
  {
    v525 = (unint64_t *)((char *)v604[1] + 8);
    do
      v526 = __ldaxr(v525);
    while (__stlxr(v526 - 1, v525));
    if (!v526)
    {
      ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
      std::__shared_weak_count::__release_weak(v524);
    }
  }
  v527 = (std::__shared_weak_count *)*((_QWORD *)&v603 + 1);
  if (*((_QWORD *)&v603 + 1))
  {
    v528 = (unint64_t *)(*((_QWORD *)&v603 + 1) + 8);
    do
      v529 = __ldaxr(v528);
    while (__stlxr(v529 - 1, v528));
    if (!v529)
    {
      ((void (*)(std::__shared_weak_count *))v527->__on_zero_shared)(v527);
      std::__shared_weak_count::__release_weak(v527);
    }
  }
  v530 = (std::__shared_weak_count *)*((_QWORD *)&v602 + 1);
  if (*((_QWORD *)&v602 + 1))
  {
    v531 = (unint64_t *)(*((_QWORD *)&v602 + 1) + 8);
    do
      v532 = __ldaxr(v531);
    while (__stlxr(v532 - 1, v531));
    if (!v532)
    {
      ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
      std::__shared_weak_count::__release_weak(v530);
    }
  }
  v533 = (std::__shared_weak_count *)*((_QWORD *)&v601 + 1);
  if (*((_QWORD *)&v601 + 1))
  {
    v534 = (unint64_t *)(*((_QWORD *)&v601 + 1) + 8);
    do
      v535 = __ldaxr(v534);
    while (__stlxr(v535 - 1, v534));
    if (!v535)
    {
      ((void (*)(std::__shared_weak_count *))v533->__on_zero_shared)(v533);
      std::__shared_weak_count::__release_weak(v533);
    }
  }
  v536 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v537 = (unint64_t *)((char *)__p[1] + 8);
    do
      v538 = __ldaxr(v537);
    while (__stlxr(v538 - 1, v537));
    if (!v538)
    {
      ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
      std::__shared_weak_count::__release_weak(v536);
    }
  }
  Espresso::MPSEngine::context::mark_weights_blobs(v249, v264);
  Espresso::MPSEngine::context::determine_if_splicing_textures(v563, v249);
  if (*((_BYTE *)v563 + 114))
  {
    if (Espresso::net::is_root_module(v249))
    {
      Espresso::run_pass_on_network<Espresso::pass_global_name_indexing>((uint64_t)v249);
      v539 = Espresso::net::get_analysis<Espresso::pass_global_name_indexing_result>((uint64_t)v249);
      for (i = (unsigned __int8 *)v539[4]; i; i = *(unsigned __int8 **)i)
      {
        Espresso::net::get_global(__p, (uint64_t)v249, i + 16);
        if (!__p[0])
        {
          v541 = *((int *)i + 10);
          v542 = v539[7];
          if (0xAAAAAAAAAAAAAAABLL * ((v539[8] - v542) >> 3) <= v541)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v543 = v539[10];
          if (0xAAAAAAAAAAAAAAABLL * ((v539[11] - v543) >> 3) <= v541)
            std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
          v545 = v542 + 24 * (int)v541;
          v544 = *(_QWORD **)v545;
          if (*(_QWORD *)(v545 + 8) != *(_QWORD *)v545
            || (v546 = v543 + 24 * (int)v541, v544 = *(_QWORD **)v546, *(_QWORD *)(v546 + 8) != *(_QWORD *)v546))
          {
            v547 = *(_QWORD *)(*((_QWORD *)v249 + 4) + 16 * *v544);
            Espresso::abstract_blob_container::make(*(_QWORD *)(v547 + 64) + 8, (int *)(v547 + 8), (unsigned int *)(v547 + 12), &v609);
            v548 = *(_OWORD *)&v609.__r_.__value_.__l.__data_;
            *(_OWORD *)&v609.__r_.__value_.__l.__data_ = 0uLL;
            v549 = (std::__shared_weak_count *)__p[1];
            *(_OWORD *)__p = v548;
            if (v549)
            {
              v550 = (unint64_t *)&v549->__shared_owners_;
              do
                v551 = __ldaxr(v550);
              while (__stlxr(v551 - 1, v550));
              if (!v551)
              {
                ((void (*)(std::__shared_weak_count *))v549->__on_zero_shared)(v549);
                std::__shared_weak_count::__release_weak(v549);
              }
            }
            v552 = (std::__shared_weak_count *)v609.__r_.__value_.__l.__size_;
            if (v609.__r_.__value_.__l.__size_)
            {
              v553 = (unint64_t *)(v609.__r_.__value_.__l.__size_ + 8);
              do
                v554 = __ldaxr(v553);
              while (__stlxr(v554 - 1, v553));
              if (!v554)
              {
                ((void (*)(std::__shared_weak_count *))v552->__on_zero_shared)(v552);
                std::__shared_weak_count::__release_weak(v552);
              }
            }
            Espresso::net::set_global((uint64_t)v249, (__int128 *)i + 1, (uint64_t *)__p);
          }
        }
        v555 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v556 = (unint64_t *)((char *)__p[1] + 8);
          do
            v557 = __ldaxr(v556);
          while (__stlxr(v557 - 1, v556));
          if (!v557)
          {
            ((void (*)(std::__shared_weak_count *))v555->__on_zero_shared)(v555);
            std::__shared_weak_count::__release_weak(v555);
          }
        }
      }
    }
  }
LABEL_796:

  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v592[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v591[1]);
  v558 = v590;
  if (v590)
  {
    v559 = (unint64_t *)&v590->__shared_owners_;
    do
      v560 = __ldaxr(v559);
    while (__stlxr(v560 - 1, v559));
    if (!v560)
    {
      ((void (*)(std::__shared_weak_count *))v558->__on_zero_shared)(v558);
      std::__shared_weak_count::__release_weak(v558);
    }
  }
}

void sub_191897F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *__p)
{
  uint64_t a64;
  uint64_t v64;

  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a61);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a49);
  if (__p)
  {
    a64 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);

  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a41);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::context::setup_blobs_internal_properties_before_resize(Espresso::MPSEngine::context *this, Espresso::net *a2)
{
  char *v4;
  const char *v5;
  BOOL v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  char *v29;
  unint64_t *v30;
  unint64_t *v31;
  char *v32;
  int *v33;
  unint64_t *v34;
  unint64_t *i;
  char *v36;
  int *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 *v40;
  void *v41;
  _DWORD *v42;
  _DWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *p_shared_owners;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  NSObject *v62;
  __int128 *v63;
  void *v64;
  _DWORD *v65;
  _DWORD *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t v80;
  int v81;
  int v82;
  void *__p[2];
  char v84;
  void *v85;
  std::__shared_weak_count *v86;
  char v87;
  unint64_t *v88;
  std::string buf;
  void *lpsrc;
  std::__shared_weak_count *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&v85, "array_of_texarrays_batching");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::map_const_get<std::map<std::string,std::string>>((uint64_t)a2 + 472, (uint64_t)&v85, (uint64_t)__p, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    v6 = buf.__r_.__value_.__l.__size_ != 0;
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = SHIBYTE(buf.__r_.__value_.__r.__words[2]) != 0;
  }
  if (v84 < 0)
    operator delete(__p[0]);
  if (v87 < 0)
    operator delete(v85);
  if (*((_BYTE *)this + 113))
    v7 = !v6;
  else
    v7 = 1;
  if ((v7 & 1) != 0)
  {
    if (*((_BYTE *)this + 113))
      return;
    if (!v6)
      return;
    v40 = (__int128 *)*((_QWORD *)a2 + 19);
    if (!v40)
      return;
    while (1)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&buf, v40 + 1);
      v41 = lpsrc;
      if (lpsrc)
      {
        if (v42)
        {
          v43 = v42;
          v44 = v91;
          if (v91)
          {
            p_shared_owners = (unint64_t *)&v91->__shared_owners_;
            do
              v46 = __ldxr(p_shared_owners);
            while (__stxr(v46 + 1, p_shared_owners));
            v41 = lpsrc;
            if (!lpsrc)
              goto LABEL_68;
          }
          {
LABEL_70:
            v47 = v91;
            if (v91)
            {
              v48 = (unint64_t *)&v91->__shared_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
              do
                v50 = __ldaxr(v48);
              while (__stlxr(v50 - 1, v48));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
          }
          else
          {
LABEL_68:
            v43[58] = 1;
            *((_BYTE *)v43 + 236) = 0;
          }
          if (v44)
          {
            v51 = (unint64_t *)&v44->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
              std::__shared_weak_count::__release_weak(v44);
            }
          }
          goto LABEL_81;
        }
        v44 = 0;
        {
          goto LABEL_70;
        }
      }
LABEL_81:
      v53 = v91;
      if (v91)
      {
        v54 = (unint64_t *)&v91->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v40 = *(__int128 **)v40;
      if (!v40)
        return;
    }
  }
  v8 = 1;
  v81 = 1;
  v82 = 1;
  v80 = 0;
  v9 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) == v9)
  {
    v56 = 1;
    goto LABEL_94;
  }
  v10 = 0;
  v11 = (char *)a2 + 192;
  do
  {
    v12 = *(_OWORD *)(v9 + 16 * v10);
    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v12;
    if (*((_QWORD *)&v12 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = *(_QWORD *)(v12 + 64);
    v16 = *(const void **)(v15 + 8);
    if (!v16)
    {
      v85 = 0;
      v86 = 0;
      goto LABEL_24;
    }
    if (!v4)
    {
      v85 = 0;
      v86 = 0;
      if (v4)
      {
        v25 = *(std::__shared_weak_count **)(v15 + 16);
        __p[0] = v4;
        __p[1] = v25;
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        v79 = v25;
        v88 = &v80;
        v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v80, (uint64_t)&std::piecewise_construct, (uint64_t **)&v88);
        v88 = &v80;
        v4 = (char *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 96, &v80, (uint64_t)&std::piecewise_construct, (uint64_t **)&v88);
        v29 = v4;
        v30 = (unint64_t *)v28[3];
        v31 = (unint64_t *)v28[4];
        while (v30 != v31)
        {
          v4 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a2 + 184, v30);
          if (v11 != v4)
          {
            v88 = v30;
            v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 23, v30, (__int128 **)&v88);
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), v30)|| (v88 = v30, v4 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v30, (uint64_t)&std::piecewise_construct, (__int128 **)&v88), *((_DWORD *)v4 + 17) != -1))
            {
              v4 = (char *)Espresso::MPSEngine::context::calculate_if_splicing_textures((Espresso::MPSEngine::context *)(v32 + 56), (const Espresso::layer_shape *)&v82, &v81, v33);
            }
          }
          v30 += 3;
        }
        v34 = (unint64_t *)*((_QWORD *)v29 + 3);
        for (i = (unint64_t *)*((_QWORD *)v29 + 4); v34 != i; v34 += 3)
        {
          v4 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)a2 + 184, v34);
          if (v11 != v4)
          {
            if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), v34)|| (v88 = v34, v4 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 44, v34, (uint64_t)&std::piecewise_construct, (__int128 **)&v88), *((_DWORD *)v4 + 17) != -1))
            {
              v88 = v34;
              v36 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 23, v34, (__int128 **)&v88);
              v4 = (char *)Espresso::MPSEngine::context::calculate_if_splicing_textures((Espresso::MPSEngine::context *)(v36 + 56), (const Espresso::layer_shape *)&v82, &v81, v37);
            }
          }
        }
        if (v79)
        {
          v38 = (unint64_t *)&v79->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
      }
LABEL_24:
      v17 = v86;
      if (!v86)
        goto LABEL_29;
      goto LABEL_25;
    }
    v17 = *(std::__shared_weak_count **)(v15 + 16);
    v85 = v4;
    v86 = v17;
    if (!v17)
      goto LABEL_29;
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
LABEL_25:
    v20 = (unint64_t *)&v17->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
LABEL_29:
    size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
    if (buf.__r_.__value_.__l.__size_)
    {
      v23 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v10 = v80 + 1;
    v80 = v10;
    v9 = *((_QWORD *)a2 + 4);
  }
  while (v10 < (*((_QWORD *)a2 + 5) - v9) >> 4);
  v56 = v81;
  v57 = v82 + 2;
  if (v82 >= 1)
    v57 = v82 - 1;
  v8 = (v57 >> 2) + 1;
LABEL_94:
  if (v56 >= 33)
    v58 = 33;
  else
    v58 = v56;
  if (v8 * v56 >= 2049)
  {
    v59 = 0;
    do
    {
      if (v58 >= 3)
      {
        v60 = 2;
        while (v56 != v56 / v60 * v60)
        {
          if (v58 == ++v60)
            goto LABEL_105;
        }
        v56 /= v60;
      }
LABEL_105:
      ++v59;
    }
    while (v56 * v8 >= 2049 && v59 != 5);
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v4, v5);
  v62 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf.__r_.__value_.__r.__words[0]) = v56;
    _os_log_debug_impl(&dword_190DAF000, v62, OS_LOG_TYPE_DEBUG, "array of texarrays, using a batch size per texture of %d", (uint8_t *)&buf, 8u);
  }

  v63 = (__int128 *)*((_QWORD *)a2 + 19);
  if (v63)
  {
    while (2)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&buf, v63 + 1);
      v64 = lpsrc;
      if (!lpsrc)
        goto LABEL_133;
      if (v65)
      {
        v66 = v65;
        v67 = v91;
        if (v91)
        {
          v68 = (unint64_t *)&v91->__shared_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
          v64 = lpsrc;
          if (!lpsrc)
            goto LABEL_120;
        }
        {
LABEL_120:
          v66[58] = v56;
          *((_BYTE *)v66 + 236) = 1;
          if (!v67)
            goto LABEL_133;
LABEL_129:
          v74 = (unint64_t *)&v67->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
            std::__shared_weak_count::__release_weak(v67);
          }
          goto LABEL_133;
        }
      }
      else
      {
        v67 = 0;
      }
      v70 = v91;
      if (v91)
      {
        v71 = (unint64_t *)&v91->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
        do
          v73 = __ldaxr(v71);
        while (__stlxr(v73 - 1, v71));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
          if (!v67)
            goto LABEL_133;
          goto LABEL_129;
        }
      }
      if (v67)
        goto LABEL_129;
LABEL_133:
      v76 = v91;
      if (v91)
      {
        v77 = (unint64_t *)&v91->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      v63 = *(__int128 **)v63;
      if (!v63)
        return;
      continue;
    }
  }
}

void sub_1918989C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void Espresso::MPSEngine::context::network_transform_post_allocation(Espresso::MPSEngine::context *this, Espresso::net *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 *v26;
  int v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  int v41;
  int v42;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unsigned __int8 *v56;
  _QWORD *v57;
  int v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error *exception;
  _QWORD *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  __int128 v74;
  __int128 v75;

  v75 = 0uLL;
  Espresso::run_pass_on_network<Espresso::pass_update_absolute_indexes_after_transform>((uint64_t)a2);
  Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)a2);
  v71 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  v3 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) == v3)
    goto LABEL_96;
  v4 = 0;
  while (1)
  {
    v5 = (uint64_t *)(v3 + 16 * v4);
    v6 = *v5;
    if (!(_QWORD)v75)
    {
      v7 = *(_QWORD *)(v6 + 64);
      v8 = *(const void **)(v7 + 8);
      if (v8)
      {
        if (v9)
        {
          v10 = *(std::__shared_weak_count **)(v7 + 16);
          if (v10)
          {
            p_shared_owners = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldxr(p_shared_owners);
            while (__stxr(v12 + 1, p_shared_owners));
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
          }
          v14 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
          *(_QWORD *)&v75 = v9;
          *((_QWORD *)&v75 + 1) = v10;
          if (v14)
          {
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 - 1, v15));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          if (v10)
          {
            v17 = (unint64_t *)&v10->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
        }
      }
      v6 = *v5;
    }
    v19 = (unsigned __int16 *)(v6 + 40);
    if (*(char *)(v6 + 63) < 0)
      break;
    if (*(_BYTE *)(v6 + 63) == 3)
      goto LABEL_31;
    if (*(_BYTE *)(v6 + 63) == 4)
      goto LABEL_28;
LABEL_35:
    ++v4;
    v3 = *((_QWORD *)a2 + 4);
    if (v4 >= (*((_QWORD *)a2 + 5) - v3) >> 4)
      goto LABEL_96;
  }
  v20 = *(_QWORD *)(v6 + 48);
  if (v20 != 3)
  {
    if (v20 == 4)
    {
      v19 = *(unsigned __int16 **)v19;
LABEL_28:
      if (*(_DWORD *)v19 == 1835099233)
        goto LABEL_37;
      goto LABEL_35;
    }
    goto LABEL_35;
  }
  v19 = *(unsigned __int16 **)v19;
LABEL_31:
  v21 = *v19;
  v22 = *((unsigned __int8 *)v19 + 2);
  if (v21 != 26483 || v22 != 100)
    goto LABEL_35;
LABEL_37:
  if ((v4 & 0x80000000) == 0)
  {
    if (!(_QWORD)v75)
    {
      LODWORD(v72) = 0;
      Espresso::create_context((int *)&v72, &v74);
      v28 = v74;
      v74 = 0uLL;
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
      v75 = v28;
      if (v29)
      {
        v30 = (unint64_t *)&v29->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      v32 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
      if (*((_QWORD *)&v74 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
    v24 = *((_QWORD *)a2 + 4) + 16 * v4;
    v25 = *(_QWORD *)v24;
    v26 = (unsigned __int16 *)(*(_QWORD *)v24 + 40);
    if (*(char *)(*(_QWORD *)v24 + 63) < 0)
    {
      v35 = *(_QWORD *)(v25 + 48);
      if (v35 != 3)
      {
        if (v35 != 4)
          goto LABEL_107;
        v26 = *(unsigned __int16 **)v26;
        goto LABEL_56;
      }
      v26 = *(unsigned __int16 **)v26;
    }
    else
    {
      v27 = *(unsigned __int8 *)(*(_QWORD *)v24 + 63);
      if (v27 != 3)
      {
        if (v27 != 4)
          goto LABEL_107;
LABEL_56:
        if (*(_DWORD *)v26 != 1835099233)
          goto LABEL_107;
        v37 = *(std::__shared_weak_count **)(v25 + 72);
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
          v40 = v37;
        }
        else
        {
          v40 = 0;
        }
        v52 = 4 * *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v36 + 320))(v36) + 12);
        if (v40)
        {
          v55 = (unint64_t *)&v40->__shared_owners_;
          do
            v54 = __ldaxr(v55);
          while (__stlxr(v54 - 1, v55));
LABEL_83:
          if (!v54)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        goto LABEL_85;
      }
    }
    v41 = *v26;
    v42 = *((unsigned __int8 *)v26 + 2);
    if (v41 != 26483 || v42 != 100)
    {
LABEL_107:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v45 = *(std::__shared_weak_count **)(v25 + 72);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      v40 = v45;
    }
    else
    {
      v40 = 0;
    }
    v48 = (*(uint64_t (**)(void *))(*(_QWORD *)v44 + 320))(v44);
    v49 = *(_DWORD *)(v48 + 8);
    v50 = 3 * v49;
    v51 = 2 * v49;
    if (*(_BYTE *)v48)
      v52 = v50;
    else
      v52 = v51;
    if (v40)
    {
      v53 = (unint64_t *)&v40->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      goto LABEL_83;
    }
LABEL_85:
    *(_QWORD *)&v74 = v4;
    v56 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v4, &v74)[3]+ 24 * v52);
    move_all_layers_from_seed_to_ctx((uint64_t *)&v74, a2, (uint64_t)&v75, v56, v71, 0, 1, -1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 80) + 16 * v52), v74, *((uint64_t *)&v74 + 1));
    move_other_consumers((uint64_t *)&v74, a2, (uint64_t)&v75, v56, v71, v4);
    v57 = (_QWORD *)(*(_QWORD *)v24 + 40);
    v58 = *(char *)(*(_QWORD *)v24 + 63);
    if (v58 < 0)
    {
      if (*(_QWORD *)(*(_QWORD *)v24 + 48) != 4)
        goto LABEL_91;
      v57 = (_QWORD *)*v57;
    }
    else if (v58 != 4)
    {
      goto LABEL_91;
    }
    if (*(_DWORD *)v57 == 1835099233)
    {
      v72 = v4;
      v65 = v52 + 1;
      v66 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)a2 + 56, v4, &v72)[3]+ 24 * v65);
      move_all_layers_from_seed_to_ctx(&v72, a2, (uint64_t)&v75, v66, v71, 0, 1, -1);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*(_QWORD *)(*(_QWORD *)v24 + 80) + 16 * v65), v72, (uint64_t)v73);
      move_other_consumers(&v72, a2, (uint64_t)&v75, v66, v71, v4);
      v67 = v73;
      if (v73)
      {
        v68 = (unint64_t *)&v73->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
    }
LABEL_91:
    v59 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
    if (*((_QWORD *)&v74 + 1))
    {
      v60 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
    }
  }
LABEL_96:
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v75 + 1);
  if (*((_QWORD *)&v75 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v75 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_191899044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  if (a14)
  {
    v19 = (unint64_t *)&a14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))a14->__on_zero_shared)(a14);
      std::__shared_weak_count::__release_weak(a14);
    }
  }
  if (a16)
  {
    v21 = (unint64_t *)&a16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::MPSEngine::context::enable_training(Espresso::MPSEngine::context *this)
{
  uint64_t result;

  if ((***((unsigned int (****)(_QWORD))this + 1))(*((_QWORD *)this + 1)) == 80000)
    *((_BYTE *)this + 44) = 0;
  *((_BYTE *)this + 53) = 1;
  *((_BYTE *)this + 114) = 1;
  result = *((_QWORD *)this + 28);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

id Espresso::MPSEngine::context::get_arg_a(id *this)
{
  if (*((_BYTE *)this + 120))
    return this[24];
  else
    return 0;
}

uint64_t Espresso::MPSEngine::context::get_internal_fallback_context@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 232);
  *a2 = *(_QWORD *)(this + 224);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::MPSEngine::context::__launch_kernel(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t **a5)
{
  const void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  int v21;
  uint64_t (***v22)(_QWORD);
  int v23;
  _BOOL4 v24;
  BOOL v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  Espresso *v34;
  const char *v35;
  NSObject *v36;
  NSObject *v37;
  const char *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  Espresso *v42;
  const char *v43;
  uint64_t **v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  int v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  _QWORD *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE buf[22];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v8 = (const void *)*a3;
  if (*a3)
  {
    {
      v9 = (std::__shared_weak_count *)a3[1];
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        goto LABEL_19;
      }
LABEL_88:
      v44 = a5;
      goto LABEL_93;
    }
    {
      v9 = (std::__shared_weak_count *)a3[1];
      if (!v9)
        goto LABEL_88;
      v13 = (unint64_t *)&v9->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      do
        v12 = __ldaxr(v13);
      while (__stlxr(v12 - 1, v13));
LABEL_19:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
      goto LABEL_88;
    }
    {
      v9 = (std::__shared_weak_count *)a3[1];
      if (!v9)
        goto LABEL_88;
      v15 = (unint64_t *)&v9->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      do
        v12 = __ldaxr(v15);
      while (__stlxr(v12 - 1, v15));
      goto LABEL_19;
    }
  }
  v17 = *a5;
  if (a5[1] == *a5)
    goto LABEL_88;
  v18 = 0;
  v19 = 0;
  v75 = a2;
  do
  {
    while (1)
    {
      v20 = &v17[2 * v19];
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v20 + 24))(*v20) != 50000
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v20 + 24))(*v20) != 50002)
      {
        break;
      }
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v20 + 24))(*v20);
      (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD, unint64_t))(*(_QWORD *)*a3 + 24))(buf, *a3, 0, v19);
      v22 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a3 + 8) + 8);
      v23 = (**v22)(v22);
      v24 = v23 == 50002;
      if (*(_QWORD *)buf)
      {
        if (*(_QWORD *)(*(_QWORD *)buf + 72))
          v25 = 1;
        else
          v25 = v23 == 50002;
        v24 = v25;
      }
      v26 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v27 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      if (v21 != 50002 && v24)
      {
        v31 = (_QWORD *)*v20;
        v32 = (uint64_t *)(*v20 + 264);
        if (!*v32)
        {
          v73 = (uint64_t *)(*v20 + 264);
          v45 = v31[9];
          v46 = (*(uint64_t (**)(_QWORD *))(*v31 + 32))(v31);
          v47 = operator new(0x118uLL);
          v47[1] = 0;
          v47[2] = 0;
          *v47 = &off_1E2DB9598;
          v48 = (uint64_t)(v47 + 3);
          v49 = *(_QWORD *)(v45 + 224);
          v50 = *(std::__shared_weak_count **)(v45 + 232);
          *(_QWORD *)buf = v49;
          *(_QWORD *)&buf[8] = v50;
          if (v50)
          {
            v51 = v46;
            v52 = (unint64_t *)&v50->__shared_owners_;
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
            Espresso::MPSBuffersEngine::blob_container::blob_container(v48, buf, v51);
            do
              v54 = __ldaxr(v52);
            while (__stlxr(v54 - 1, v52));
            v55 = (uint64_t)(v47 + 3);
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
              v55 = (uint64_t)(v47 + 3);
            }
          }
          else
          {
            v55 = Espresso::MPSBuffersEngine::blob_container::blob_container(v48, buf, v46);
          }
          *(_QWORD *)&v68 = v55;
          *((_QWORD *)&v68 + 1) = v47;
          v69 = (std::__shared_weak_count *)v31[34];
          v32 = v73;
          *(_OWORD *)v73 = v68;
          if (v69)
          {
            v70 = (unint64_t *)&v69->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
        }
        Espresso::blobcpy(v75, v32, v20);
        v33 = v77;
        if (&v77 != (uint64_t *)a5 && v77 == v78)
        {
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v77, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
          v33 = v77;
        }
        v34 = (Espresso *)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v33 + 16 * v19), v31[33], v31[34]);
        Espresso::espresso_os_log_subsystem(v34, v35);
        v36 = objc_claimAutoreleasedReturnValue();
        a2 = v75;
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
          goto LABEL_58;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = 0x8000000191AC9E1CLL & 0x7FFFFFFFFFFFFFFFLL;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v19;
        v37 = v36;
        v38 = "[MPSEngine::adjust_layer_data] copy for buffers: k=%s ibottom=%zu";
        goto LABEL_87;
      }
      if (v21 != 50002 || v24)
        break;
      v39 = (uint64_t *)*v20;
      v40 = (uint64_t *)(*v20 + 176);
      if (!*v40)
      {
        v72 = *v20 + 176;
        v56 = *a3;
        v74 = (*(uint64_t (**)(uint64_t *))(*v39 + 32))(v39);
        v57 = operator new(0x130uLL);
        v58 = v57;
        v57[1] = 0;
        v57[2] = 0;
        *v57 = &off_1E2DC1CC8;
        v59 = *(std::__shared_weak_count **)(v56 + 16);
        *(_QWORD *)buf = *(_QWORD *)(v56 + 8);
        *(_QWORD *)&buf[8] = v59;
        if (v59)
        {
          v60 = (unint64_t *)&v59->__shared_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v57 + 3), buf, v74);
        v58[3] = &off_1E2DA8120;
        *((_DWORD *)v58 + 64) = 1;
        *((_BYTE *)v58 + 260) = 0;
        *(_OWORD *)(v58 + 33) = 0u;
        *(_OWORD *)(v58 + 35) = 0u;
        v58[37] = 0;
        if (v59)
        {
          v62 = (unint64_t *)&v59->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
            std::__shared_weak_count::__release_weak(v59);
          }
        }
        *(_QWORD *)&v64 = v58 + 3;
        *((_QWORD *)&v64 + 1) = v58;
        v65 = (std::__shared_weak_count *)v39[23];
        *((_OWORD *)v39 + 11) = v64;
        v40 = (uint64_t *)v72;
        if (v65)
        {
          v66 = (unint64_t *)&v65->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
      }
      Espresso::blobcpy(v75, v40, v20);
      v41 = v77;
      if (&v77 != (uint64_t *)a5 && v77 == v78)
      {
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v77, *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
        v41 = v77;
      }
      v42 = (Espresso *)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v41 + 16 * v19), v39[22], v39[23]);
      Espresso::espresso_os_log_subsystem(v42, v43);
      v36 = objc_claimAutoreleasedReturnValue();
      a2 = v75;
      if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        goto LABEL_58;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = 0x8000000191AC9E1CLL & 0x7FFFFFFFFFFFFFFFLL;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v19;
      v37 = v36;
      v38 = "[MPSEngine::adjust_layer_data] copy to textures: k=%s ibottom=%zu";
LABEL_87:
      _os_log_debug_impl(&dword_190DAF000, v37, OS_LOG_TYPE_DEBUG, v38, buf, 0x16u);
LABEL_58:

      ++v19;
      v17 = *a5;
      v44 = (uint64_t **)&v77;
      v18 = 1;
      if (v19 >= ((char *)a5[1] - (char *)*a5) >> 4)
        goto LABEL_93;
    }
    ++v19;
    v17 = *a5;
  }
  while (v19 < ((char *)a5[1] - (char *)*a5) >> 4);
  if ((v18 & 1) != 0)
    v44 = (uint64_t **)&v77;
  else
    v44 = a5;
  a2 = v75;
LABEL_93:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t **))(*(_QWORD *)*a3 + 16))(*a3, a2, a4, v44);
  *(_QWORD *)buf = &v77;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_191899910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  std::__shared_weak_count *v9;
  void *v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  va_list va1;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v16 = va_arg(va2, void **);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  va_copy((va_list)v16, va);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::context::is_valid_for_submit(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t v4;
  uint64_t i;

  v3 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v4 = *a2;
LABEL_2:
  if (v4 == a2[1])
    return 1;
  for (i = *(_QWORD *)(*(_QWORD *)v4 + 32); ; i += 16)
  {
    if (i == *(_QWORD *)(*(_QWORD *)v4 + 40))
    {
      v4 += 16;
      goto LABEL_2;
    }
    if (*(_DWORD *)(*(_QWORD *)i + 8) != v3)
      break;
  }
  return 0;
}

float Espresso::MPSEngine::context::begin_batch@<S0>(id *this@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  float result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if (a2)
  {
    v6 = operator new(0x120uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1E2DC2518;
    *(_QWORD *)&v7 = Espresso::MPSEngine::batch::batch((uint64_t)(v6 + 3), (uint64_t)this, a2);
    *((_QWORD *)&v7 + 1) = v6;
    v10 = v7;

    v8 = v10;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSEngine::context *,void>((Espresso::MPSEngine::batch **)&v11, this);
    v8 = v11;
  }
  *(_BYTE *)(v8 + 216) = *((_BYTE *)this + 172);
  *(_QWORD *)(v8 + 224) = this[22];
  result = *((float *)this + 42);
  *(float *)(v8 + 212) = result;
  *(_BYTE *)(v8 + 232) = *((_BYTE *)this + 184);
  *a3 = v8;
  return result;
}

void sub_191899A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::batch::batch(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void *v5;

  v4 = Espresso::batch_metal::batch_metal(a1, a2, a3);
  *(_QWORD *)v4 = &off_1E2DAC6C8;
  *(_DWORD *)(v4 + 260) = 0;
  objc_msgSend(*(id *)(v4 + 152), "endEncoding");
  v5 = *(void **)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;

  *(_DWORD *)(a1 + 136) = 50005;
  return a1;
}

void sub_191899B14(_Unwind_Exception *a1)
{
  id *v1;

  Espresso::batch_metal::~batch_metal(v1);
  _Unwind_Resume(a1);
}

void move_all_layers_from_seed_to_ctx(uint64_t *a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, _QWORD *a5, int a6, int a7, int a8)
{
  int v9;
  char *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  std::__shared_weak_count *size;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  char *v27;
  unsigned __int8 *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  const void *v36;
  _QWORD *v37;
  uint64_t v38;
  const void *v39;
  _QWORD *v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count **v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_weak_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  int v90;
  __int128 v92;
  __int128 v93;
  _QWORD v94[2];
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count **v99;
  uint64_t v100;
  void *v101;
  std::__shared_weak_count *v102;
  const void *v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  std::string v107;
  void *v108;
  void *v109;

  v9 = a7;
  *a1 = 0;
  a1[1] = 0;
  if (a7)
  {
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
    v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 17), a4, (__int128 **)&v107);
    v17 = a5;
    v18 = a6;
    LODWORD(v103) = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
    LODWORD(v101) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v16 + 5) + 32))(*((_QWORD *)v16 + 5));
    Espresso::abstract_blob_container::make(a3, (int *)&v103, (unsigned int *)&v101, &v107);
    v19 = a3;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, (__int128 *)&v107);
    size = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
    if (v107.__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v23 = *a1;
    Espresso::abstract_blob_container::shape((char *)&v107, *((_QWORD *)v16 + 5));
    v105 = 0;
    v106 = 0;
    (*(void (**)(uint64_t, std::string *, uint64_t *))(*(_QWORD *)v23 + 16))(v23, &v107, &v105);
    v24 = v106;
    if (v106)
    {
      p_shared_owners = (unint64_t *)&v106->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    v107.__r_.__value_.__r.__words[0] = (std::string::size_type)a4;
    v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a2 + 17), a4, (__int128 **)&v107);
    a3 = v19;
    a6 = v18;
    a5 = v17;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v27 + 5, *a1, a1[1]);
    v9 = a7;
  }
  v28 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a5 + 2, a4);
  if (!v28)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v29 = *((int *)v28 + 10);
  if (a6)
  {
    v30 = a5[22];
    if (0xAAAAAAAAAAAAAAABLL * ((a5[23] - v30) >> 3) <= v29)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v32 = (uint64_t *)(v30 + 24 * (int)v29);
    v31 = *v32;
    if (v32[1] != *v32)
    {
      LODWORD(v33) = *(_DWORD *)(v31 + 8 * a8);
      v107.__r_.__value_.__r.__words[0] = (int)v33;
      v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 7), (int)v33, &v107);
      if (v34[4] - v34[3] == 24)
        goto LABEL_20;
      goto LABEL_36;
    }
  }
  else
  {
    v48 = a5[19];
    if (v29 >= (a5[20] - v48) >> 3)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v33 = *(_QWORD *)(v48 + 8 * v29);
    if (v33 < (uint64_t)(a2[5] - a2[4]) >> 4)
    {
      v107.__r_.__value_.__r.__words[0] = (int)v33;
      v49 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), (int)v33, &v107);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49[4] - v49[3]) >> 3) < 2)
      {
LABEL_20:
        if ((int)v33 < 1)
          return;
        v35 = a2[4] + 16 * v33;
        Espresso::make_new_kernel(v35, a3, &v103);
        v36 = v103;
        if (!v103)
          Espresso::throw_exception_selector<Espresso::generic_error>("Fail to create kernel on new ctx");
        v37 = (_QWORD *)a3;
        v38 = *(_QWORD *)v35;
        if ((a6 & 1) == 0)
        {
          v90 = v9;
          v39 = *(const void **)(v38 + 64);
          if (v39)
          {
            if (v40)
            {
              v41 = v40;
              v42 = *(std::__shared_weak_count **)(v38 + 72);
              v101 = v40;
              v102 = v42;
              if (v42)
              {
                v43 = (unint64_t *)&v42->__shared_owners_;
                do
                  v44 = __ldxr(v43);
                while (__stxr(v44 + 1, v43));
              }
              if (v45)
              {
                v99 = v45;
                v100 = (uint64_t)v104;
                if (v104)
                {
                  v46 = (unint64_t *)&v104->__shared_owners_;
                  do
                    v47 = __ldxr(v46);
                  while (__stxr(v47 + 1, v46));
                }
              }
              else
              {
                v99 = 0;
                v100 = 0;
              }
              v51 = (std::__shared_weak_count *)v41[42];
              v50 = (std::__shared_weak_count *)v41[43];
              if (v50)
              {
                p_shared_weak_owners = (unint64_t *)&v50->__shared_weak_owners_;
                do
                  v53 = __ldxr(p_shared_weak_owners);
                while (__stxr(v53 + 1, p_shared_weak_owners));
              }
              v54 = v45[43];
              v45[42] = v51;
              v45[43] = v50;
              if (v54)
                std::__shared_weak_count::__release_weak(v54);
              v55 = Espresso::net::loaded_global_name(a2, (uint64_t)a4);
              if (*(char *)(v55 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)v55, *(_QWORD *)(v55 + 8));
              }
              else
              {
                v56 = *(_OWORD *)v55;
                v107.__r_.__value_.__r.__words[2] = *(_QWORD *)(v55 + 16);
                *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v56;
              }
              Espresso::net::get_global(&v97, (uint64_t)a2, (unsigned __int8 *)&v107);
              v57 = v98;
              v94[0] = v97;
              v94[1] = v98;
              if (v98)
              {
                v58 = (unint64_t *)&v98->__shared_owners_;
                do
                  v59 = __ldxr(v58);
                while (__stxr(v59 + 1, v58));
              }
              Espresso::sync_copy_to_host(&v95, v94);
              if (v57)
              {
                v60 = (unint64_t *)&v57->__shared_owners_;
                do
                  v61 = __ldaxr(v60);
                while (__stlxr(v61 - 1, v60));
                if (!v61)
                {
                  ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                  std::__shared_weak_count::__release_weak(v57);
                }
              }
              Espresso::blob_cpu::make_custom<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t *)&v92, v37, &v95);
              v89 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
              v93 = v92;
              Espresso::net::set_global((uint64_t)a2, (__int128 *)&v107, (uint64_t *)&v93);
              if (v89)
              {
                v62 = (unint64_t *)&v89->__shared_owners_;
                do
                  v63 = __ldaxr(v62);
                while (__stlxr(v63 - 1, v62));
                if (!v63)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              v64 = v96;
              if (v96)
              {
                v65 = (unint64_t *)&v96->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
                  std::__shared_weak_count::__release_weak(v64);
                }
              }
              v67 = v98;
              if (v98)
              {
                v68 = (unint64_t *)&v98->__shared_owners_;
                do
                  v69 = __ldaxr(v68);
                while (__stlxr(v69 - 1, v68));
                if (!v69)
                {
                  ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                  std::__shared_weak_count::__release_weak(v67);
                }
              }
              if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v107.__r_.__value_.__l.__data_);
              v70 = (std::__shared_weak_count *)v100;
              if (v100)
              {
                v71 = (unint64_t *)(v100 + 8);
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 - 1, v71));
                if (!v72)
                {
                  ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
                  std::__shared_weak_count::__release_weak(v70);
                }
              }
              v73 = v102;
              if (v102)
              {
                v74 = (unint64_t *)&v102->__shared_owners_;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if (!v75)
                {
                  ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                  std::__shared_weak_count::__release_weak(v73);
                }
              }
            }
          }
          v38 = *(_QWORD *)v35;
          v36 = v103;
          v9 = v90;
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v38 + 64), (uint64_t)v36, (uint64_t)v104);
        v76 = (***(uint64_t (****)(_QWORD))(*v37 + 8))(*(_QWORD *)(*v37 + 8));
        v77 = *(_QWORD *)v35;
        *(_DWORD *)(*(_QWORD *)v35 + 8) = v76;
        if ((a6 & 1) != 0)
        {
          if (v9)
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)(v77 + 80), *a1, a1[1]);
          v107.__r_.__value_.__r.__words[0] = v33;
          v78 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v33, &v107);
          if (v78[4] == v78[3])
            goto LABEL_98;
          v107.__r_.__value_.__r.__words[0] = v33;
          v79 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 12), v33, &v107);
          move_all_layers_from_seed_to_ctx(&v107, a2, v37, v79[3], a5, 1, 1, 0);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)v35 + 104), (__int128 *)&v107);
          v80 = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
          if (!v107.__r_.__value_.__l.__size_)
            goto LABEL_98;
          v81 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
        }
        else
        {
          if (v9)
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)(v77 + 104), *a1, a1[1]);
          v107.__r_.__value_.__r.__words[0] = v33;
          v83 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 7), v33, &v107);
          if (v83[4] == v83[3])
            goto LABEL_98;
          v107.__r_.__value_.__r.__words[0] = v33;
          v84 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t)(a2 + 7), v33, &v107);
          move_all_layers_from_seed_to_ctx(&v107, a2, v37, v84[3], a5, 0, 1, 0xFFFFFFFFLL);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(*(_QWORD *)v35 + 80), (__int128 *)&v107);
          v80 = (std::__shared_weak_count *)v107.__r_.__value_.__l.__size_;
          if (!v107.__r_.__value_.__l.__size_)
            goto LABEL_98;
          v85 = (unint64_t *)(v107.__r_.__value_.__l.__size_ + 8);
          do
            v82 = __ldaxr(v85);
          while (__stlxr(v82 - 1, v85));
        }
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
LABEL_98:
        v86 = v104;
        if (v104)
        {
          v87 = (unint64_t *)&v104->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
            std::__shared_weak_count::__release_weak(v86);
          }
        }
        return;
      }
LABEL_36:
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("this function only works for single-stream subnetwork");
    }
  }
}

void sub_19189A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  if (*(char *)(v27 - 137) < 0)
    operator delete(*(void **)(v27 - 160));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

int *move_other_consumers(uint64_t *a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4, _QWORD *a5, uint64_t a6)
{
  int *result;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v23;
  std::__shared_weak_count *v24;

  result = (int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(a5 + 2, a4);
  if (!result)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v12 = result[10];
  v13 = a5[22];
  if (0xAAAAAAAAAAAAAAABLL * ((a5[23] - v13) >> 3) <= v12)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v14 = (uint64_t *)(v13 + 24 * (int)v12);
  v15 = v14[1];
  v16 = *v14;
  if (v15 != *v14)
  {
    v17 = 0;
    do
    {
      v18 = *(_QWORD *)(v16 + 8 * v17);
      if (v18 != a6)
      {
        move_all_layers_from_seed_to_ctx(&v23, a2, a3, a4, a5, 1, 0, v17);
        v19 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        result = (int *)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](*(_QWORD **)(*(_QWORD *)(a2[4] + 16 * v18) + 80), *a1, a1[1]);
        v15 = v14[1];
        v16 = *v14;
      }
      ++v17;
    }
    while (v17 < (v15 - v16) >> 3);
  }
  return result;
}

BOOL Espresso::MPSEngine::context::calculate_if_splicing_textures(Espresso::MPSEngine::context *this, const Espresso::layer_shape *a2, int *a3, int *a4)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int32x2_t v13;

  v6 = *(_DWORD *)this;
  v5 = *((_DWORD *)this + 1);
  v8 = *((_DWORD *)this + 2);
  v7 = *((_DWORD *)this + 3);
  v9 = v8 + 2;
  if (v8 >= 1)
    v9 = v8 - 1;
  v10 = *((_DWORD *)this + 4);
  if (v10 <= 1)
    v10 = 1;
  if (v8 <= *(_DWORD *)a2)
    v8 = *(_DWORD *)a2;
  *(_DWORD *)a2 = v8;
  v11 = *((_DWORD *)this + 4) * *((_DWORD *)this + 3);
  if (v11 <= *a3)
    v11 = *a3;
  *a3 = v11;
  if (v6 > 0x4000 || v5 > 0x4000)
    Espresso::throw_exception_selector<Espresso::generic_error,int &,int &,int const&,int const&>(v6, v5, 0x4000, 0x4000);
  v12 = (v7 + v7 * (v9 >> 2)) * v10;
  if (v12 >= 2049)
  {
    v13 = vmax_s32(*(int32x2_t *)((char *)this + 12), (int32x2_t)0x100000001);
    if (v12 / vmul_lane_s32(v13, v13, 1).i32[0] >= 2049)
      Espresso::throw_exception_selector<Espresso::generic_error>("Blob too large to be represented even with splicing.  Aborting.");
  }
  return v12 > 2048;
}

void Espresso::throw_exception_selector<Espresso::generic_error,int &,int &,int const&,int const&>(int a1, int a2, int a3, int a4)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("Blob cannot be represented on texture: width %d height %d larger than valid texture dimensions width %d height %d.", a1, a2, a3, a4);
}

void Espresso::MPSEngine::context::mark_weights_blobs(Espresso::MPSEngine::context *this, Espresso::net *a2)
{
  Espresso *v3;
  _QWORD *v4;
  const char *v5;
  NSObject *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t i;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  const void *v22;
  const std::string *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *p_p;
  int64_t v32;
  char *v33;
  int v34;
  void *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int64_t v50;
  char *v51;
  int v52;
  void *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  std::string::size_type v57;
  uint64_t *v58;
  uint64_t v59;
  const void *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  int64_t v74;
  char *v75;
  int v76;
  void *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  std::string::size_type v81;
  uint64_t *v82;
  uint64_t v83;
  const void *v84;
  _QWORD *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  int64_t v98;
  char *v99;
  int v100;
  void *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  std::string::size_type v105;
  uint64_t *v106;
  uint64_t v107;
  void (***v108)(Espresso::MPSEngine::inner_product_kernel *__hidden);
  std::string::size_type v109;
  uint64_t *v110;
  uint64_t v111;
  void (***v112)(Espresso::MPSEngine::inner_product_kernel *__hidden);
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  void *v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  _QWORD *v136;
  std::__shared_weak_count *v137;
  _QWORD *v138;
  std::__shared_weak_count *v139;
  void *__p;
  int64_t v141;
  unsigned __int8 v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  __int128 v145;
  std::string v146;
  char v147;
  __int128 buf;
  __int128 v149;
  int v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v3 = (Espresso *)operator new(0x30uLL);
  *((_QWORD *)v3 + 1) = 0;
  *((_QWORD *)v3 + 2) = 0;
  *(_QWORD *)v3 = &off_1E2DBE570;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 3) = &off_1E2D9DD38;
  v4 = (_QWORD *)((char *)v3 + 24);
  v146.__r_.__value_.__r.__words[0] = (std::string::size_type)v3 + 24;
  v146.__r_.__value_.__l.__size_ = (std::string::size_type)v3;
  Espresso::espresso_os_log_subsystem(v3, v5);
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf) = 136315138;
    *(_QWORD *)((char *)&buf + 4) = (unint64_t)"N8Espresso33pass_mps_buffers_textures_interopE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v6, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", (uint8_t *)&buf, 0xCu);
  }

  (*(void (**)(__int128 *__return_ptr, _QWORD *, Espresso::MPSEngine::context *))(*v4 + 24))(&buf, v4, this);
  LOBYTE(__p) = 0;
  (*(void (**)(_QWORD *, void **))(*v4 + 16))(v4, &__p);
  if ((_BYTE)__p)
  {
    if ((_BYTE)buf)
      Espresso::net::set_analysis<Espresso::analysis_result>((uint64_t)this, (uint64_t *)&buf + 1);
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)this + 140, (uint64_t)"N8Espresso37analysis_mps_buffers_textures_interopE");
  }
  v7 = (std::__shared_weak_count *)v149;
  if ((_QWORD)v149)
  {
    v8 = (unint64_t *)(v149 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  size = (std::__shared_weak_count *)v146.__r_.__value_.__l.__size_;
  if (v146.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v146.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  buf = 0u;
  v149 = 0u;
  v150 = 1065353216;
  v13 = *((_QWORD *)this + 4);
  if (*((_QWORD *)this + 5) != v13)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v146.__r_.__value_.__r.__words[0] = *(_QWORD *)(v13 + v14) + 16;
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&buf, (uint64_t)v146.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v146)[5] = v15++;
      v13 = *((_QWORD *)this + 4);
      v16 = *((_QWORD *)this + 5);
      v14 += 16;
    }
    while (v15 < (v16 - v13) >> 4);
    if (v16 != v13)
    {
      for (i = 0; i < (*((_QWORD *)this + 5) - v13) >> 4; ++i)
      {
        v18 = *(_OWORD *)(v13 + 16 * i);
        v145 = v18;
        if (*((_QWORD *)&v18 + 1))
        {
          v19 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v21 = v18;
        v22 = *(const void **)(v18 + 64);
        if (v22)
        {
          v23 = (const std::string *)(v18 + 16);
          if (v24)
          {
            v25 = v24;
            v26 = *(std::__shared_weak_count **)(v21 + 72);
            v143 = v24;
            v144 = v26;
            if (v26)
            {
              p_shared_owners = (unint64_t *)&v26->__shared_owners_;
              do
                v28 = __ldxr(p_shared_owners);
              while (__stxr(v28 + 1, p_shared_owners));
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "/grad_dw");
            v29 = *(unsigned __int8 *)(v21 + 39);
            if ((v29 & 0x80u) == 0)
              v30 = (char *)(v21 + 16);
            else
              v30 = *(char **)(v21 + 16);
            if ((v142 & 0x80u) == 0)
              p_p = (char *)&__p;
            else
              p_p = (char *)__p;
            if ((v142 & 0x80u) == 0)
              v32 = v142;
            else
              v32 = v141;
            if (v32)
            {
              if ((v29 & 0x80u) != 0)
                v29 = *(_QWORD *)(v21 + 24);
              if (v29 >= v32)
              {
                v33 = &v30[v29];
                v34 = *p_p;
                v35 = v30;
                do
                {
                  v36 = v29 - v32;
                  if (v36 == -1)
                    break;
                  v37 = (char *)memchr(v35, v34, v36 + 1);
                  if (!v37)
                    break;
                  v38 = v37;
                  if (!memcmp(v37, p_p, v32))
                  {
                    if (v38 != v33)
                    {
                      v57 = v38 - v30;
                      if (v38 - v30 != -1)
                        goto LABEL_79;
                    }
                    break;
                  }
                  v35 = v38 + 1;
                  v29 = v33 - (v38 + 1);
                }
                while (v29 >= v32);
              }
            }
            else
            {
              v57 = 0;
LABEL_79:
              std::string::basic_string(&v146, v23, 0, v57, (std::allocator<char> *)&v138);
              v58 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&buf, (uint64_t)&v146);
              if (v58)
              {
                v59 = *(_QWORD *)(*((_QWORD *)this + 4) + 16 * v58[5]);
                v60 = *(const void **)(v59 + 64);
                if (v60)
                {
                  if (v61)
                  {
                    v62 = *(std::__shared_weak_count **)(v59 + 72);
                    if (v62)
                    {
                      v63 = (unint64_t *)&v62->__shared_owners_;
                      do
                        v64 = __ldxr(v63);
                      while (__stxr(v64 + 1, v63));
                      v25[64] = v61[75];
                      do
                        v65 = __ldaxr(v63);
                      while (__stlxr(v65 - 1, v63));
                      if (!v65)
                      {
                        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                        std::__shared_weak_count::__release_weak(v62);
                      }
                    }
                    else
                    {
                      v25[64] = v61[75];
                    }
                  }
                }
              }
              if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v146.__r_.__value_.__l.__data_);
              v25 = v143;
            }
            if (!v25[64])
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("set forward pass kernel failed");
            if ((char)v142 < 0)
              operator delete(__p);
            goto LABEL_188;
          }
          v143 = 0;
          v144 = 0;
          if (v42)
          {
            v43 = v42;
            v44 = *(std::__shared_weak_count **)(v21 + 72);
            v138 = v42;
            v139 = v44;
            if (v44)
            {
              v45 = (unint64_t *)&v44->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "/grad");
            v47 = *(unsigned __int8 *)(v21 + 39);
            if ((v47 & 0x80u) == 0)
              v48 = (char *)(v21 + 16);
            else
              v48 = *(char **)(v21 + 16);
            if ((v142 & 0x80u) == 0)
              v49 = (char *)&__p;
            else
              v49 = (char *)__p;
            if ((v142 & 0x80u) == 0)
              v50 = v142;
            else
              v50 = v141;
            if (v50)
            {
              if ((v47 & 0x80u) != 0)
                v47 = *(_QWORD *)(v21 + 24);
              if (v47 >= v50)
              {
                v51 = &v48[v47];
                v52 = *v49;
                v53 = v48;
                do
                {
                  v54 = v47 - v50;
                  if (v54 == -1)
                    break;
                  v55 = (char *)memchr(v53, v52, v54 + 1);
                  if (!v55)
                    break;
                  v56 = v55;
                  if (!memcmp(v55, v49, v50))
                  {
                    if (v56 != v51)
                    {
                      v81 = v56 - v48;
                      if (v56 - v48 != -1)
                        goto LABEL_113;
                    }
                    break;
                  }
                  v53 = v56 + 1;
                  v47 = v51 - (v56 + 1);
                }
                while (v47 >= v50);
              }
            }
            else
            {
              v81 = 0;
LABEL_113:
              std::string::basic_string(&v146, v23, 0, v81, (std::allocator<char> *)&v136);
              v82 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&buf, (uint64_t)&v146);
              if (v82)
              {
                v83 = *(_QWORD *)(*((_QWORD *)this + 4) + 16 * v82[5]);
                v84 = *(const void **)(v83 + 64);
                if (v84)
                {
                  if (v85)
                  {
                    v86 = *(std::__shared_weak_count **)(v83 + 72);
                    if (v86)
                    {
                      v87 = (unint64_t *)&v86->__shared_owners_;
                      do
                        v88 = __ldxr(v87);
                      while (__stxr(v88 + 1, v87));
                      v43[63] = v85[75];
                      do
                        v89 = __ldaxr(v87);
                      while (__stlxr(v89 - 1, v87));
                      if (!v89)
                      {
                        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                        std::__shared_weak_count::__release_weak(v86);
                      }
                    }
                    else
                    {
                      v43[63] = v85[75];
                    }
                  }
                }
              }
              if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v146.__r_.__value_.__l.__data_);
              v43 = v138;
            }
            if (!v43[63])
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("set forward pass kernel failed");
            if ((char)v142 < 0)
              operator delete(__p);
            goto LABEL_183;
          }
          v138 = 0;
          v139 = 0;
          if (v66)
          {
            v67 = v66;
            v68 = *(std::__shared_weak_count **)(v21 + 72);
            v136 = v66;
            v137 = v68;
            if (v68)
            {
              v69 = (unint64_t *)&v68->__shared_owners_;
              do
                v70 = __ldxr(v69);
              while (__stxr(v70 + 1, v69));
            }
            std::string::basic_string[abi:ne180100]<0>(&__p, "/grad_dw");
            v71 = *(unsigned __int8 *)(v21 + 39);
            if ((v71 & 0x80u) == 0)
              v72 = (char *)(v21 + 16);
            else
              v72 = *(char **)(v21 + 16);
            if ((v142 & 0x80u) == 0)
              v73 = (char *)&__p;
            else
              v73 = (char *)__p;
            if ((v142 & 0x80u) == 0)
              v74 = v142;
            else
              v74 = v141;
            if (v74)
            {
              if ((v71 & 0x80u) != 0)
                v71 = *(_QWORD *)(v21 + 24);
              if (v71 >= v74)
              {
                v75 = &v72[v71];
                v76 = *v73;
                v77 = v72;
                do
                {
                  v78 = v71 - v74;
                  if (v78 == -1)
                    break;
                  v79 = (char *)memchr(v77, v76, v78 + 1);
                  if (!v79)
                    break;
                  v80 = v79;
                  if (!memcmp(v79, v73, v74))
                  {
                    if (v80 != v75)
                    {
                      v105 = v80 - v72;
                      if (v80 - v72 != -1)
                        goto LABEL_150;
                    }
                    break;
                  }
                  v77 = v80 + 1;
                  v71 = v75 - (v80 + 1);
                }
                while (v71 >= v74);
              }
            }
            else
            {
              v105 = 0;
LABEL_150:
              std::string::basic_string(&v146, v23, 0, v105, (std::allocator<char> *)&v134);
              v106 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&buf, (uint64_t)&v146);
              if (v106)
              {
                v107 = *(_QWORD *)(*((_QWORD *)this + 4) + 16 * v106[5]);
                v108 = *(void (****)(Espresso::MPSEngine::inner_product_kernel *__hidden))(v107 + 64);
                if (v108)
                {
                  if (*v108 == &off_1E2DA90F8)
                  {
                    v122 = *(std::__shared_weak_count **)(v107 + 72);
                    if (v122)
                    {
                      v123 = (unint64_t *)&v122->__shared_owners_;
                      do
                        v124 = __ldxr(v123);
                      while (__stxr(v124 + 1, v123));
                      v67[60] = v108;
                      do
                        v125 = __ldaxr(v123);
                      while (__stlxr(v125 - 1, v123));
                      if (!v125)
                      {
                        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                        std::__shared_weak_count::__release_weak(v122);
                      }
                    }
                    else
                    {
                      v67[60] = v108;
                    }
                  }
                }
              }
              if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v146.__r_.__value_.__l.__data_);
              v67 = v136;
            }
            if (!v67[60])
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("set forward pass kernel failed");
            if ((char)v142 < 0)
              operator delete(__p);
          }
          else
          {
            v136 = 0;
            v137 = 0;
            if (v90)
            {
              v91 = v90;
              v92 = *(std::__shared_weak_count **)(v21 + 72);
              v134 = v90;
              v135 = v92;
              if (v92)
              {
                v93 = (unint64_t *)&v92->__shared_owners_;
                do
                  v94 = __ldxr(v93);
                while (__stxr(v94 + 1, v93));
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "/grad");
              v95 = *(unsigned __int8 *)(v21 + 39);
              if ((v95 & 0x80u) == 0)
                v96 = (char *)(v21 + 16);
              else
                v96 = *(char **)(v21 + 16);
              if ((v142 & 0x80u) == 0)
                v97 = (char *)&__p;
              else
                v97 = (char *)__p;
              if ((v142 & 0x80u) == 0)
                v98 = v142;
              else
                v98 = v141;
              if (v98)
              {
                if ((v95 & 0x80u) != 0)
                  v95 = *(_QWORD *)(v21 + 24);
                if (v95 >= v98)
                {
                  v99 = &v96[v95];
                  v100 = *v97;
                  v101 = v96;
                  do
                  {
                    v102 = v95 - v98;
                    if (v102 == -1)
                      break;
                    v103 = (char *)memchr(v101, v100, v102 + 1);
                    if (!v103)
                      break;
                    v104 = v103;
                    if (!memcmp(v103, v97, v98))
                    {
                      if (v104 != v99)
                      {
                        v109 = v104 - v96;
                        if (v104 - v96 != -1)
                          goto LABEL_170;
                      }
                      break;
                    }
                    v101 = v104 + 1;
                    v95 = v99 - (v104 + 1);
                  }
                  while (v95 >= v98);
                }
              }
              else
              {
                v109 = 0;
LABEL_170:
                std::string::basic_string(&v146, v23, 0, v109, (std::allocator<char> *)&v147);
                v110 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&buf, (uint64_t)&v146);
                if (v110)
                {
                  v111 = *(_QWORD *)(*((_QWORD *)this + 4) + 16 * v110[5]);
                  v112 = *(void (****)(Espresso::MPSEngine::inner_product_kernel *__hidden))(v111 + 64);
                  if (v112)
                  {
                    if (*v112 == &off_1E2DA90F8)
                    {
                      v129 = *(std::__shared_weak_count **)(v111 + 72);
                      if (v129)
                      {
                        v130 = (unint64_t *)&v129->__shared_owners_;
                        do
                          v131 = __ldxr(v130);
                        while (__stxr(v131 + 1, v130));
                        v91[59] = v112;
                        do
                          v132 = __ldaxr(v130);
                        while (__stlxr(v132 - 1, v130));
                        if (!v132)
                        {
                          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                          std::__shared_weak_count::__release_weak(v129);
                        }
                      }
                      else
                      {
                        v91[59] = v112;
                      }
                    }
                  }
                }
                if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v146.__r_.__value_.__l.__data_);
                v91 = v134;
              }
              if (!v91[59])
                Espresso::throw_exception_selector<Espresso::invalid_state_error>("set forward pass kernel failed");
              if ((char)v142 < 0)
                operator delete(__p);
              v126 = v135;
              if (v135)
              {
                v127 = (unint64_t *)&v135->__shared_owners_;
                do
                  v128 = __ldaxr(v127);
                while (__stlxr(v128 - 1, v127));
                if (!v128)
                {
                  ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                  std::__shared_weak_count::__release_weak(v126);
                }
              }
            }
          }
        }
        else
        {
          v143 = 0;
          v144 = 0;
          v138 = 0;
          v139 = 0;
          v136 = 0;
          v137 = 0;
        }
        v39 = v137;
        if (v137)
        {
          v40 = (unint64_t *)&v137->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
LABEL_183:
        v113 = v139;
        if (v139)
        {
          v114 = (unint64_t *)&v139->__shared_owners_;
          do
            v115 = __ldaxr(v114);
          while (__stlxr(v115 - 1, v114));
          if (!v115)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
LABEL_188:
        v116 = v144;
        if (v144)
        {
          v117 = (unint64_t *)&v144->__shared_owners_;
          do
            v118 = __ldaxr(v117);
          while (__stlxr(v118 - 1, v117));
          if (!v118)
          {
            ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
            std::__shared_weak_count::__release_weak(v116);
          }
        }
        v119 = (std::__shared_weak_count *)*((_QWORD *)&v145 + 1);
        if (*((_QWORD *)&v145 + 1))
        {
          v120 = (unint64_t *)(*((_QWORD *)&v145 + 1) + 8);
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        v13 = *((_QWORD *)this + 4);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v149);
  v133 = (void *)buf;
  *(_QWORD *)&buf = 0;
  if (v133)
    operator delete(v133);
}

void sub_19189B1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  if (a31 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::context::determine_if_splicing_textures(Espresso::MPSEngine::context *this, Espresso::net *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t **v6;
  _QWORD *v7;
  uint64_t **v8;
  __int128 v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  int *v29;
  uint64_t *i;
  uint64_t *v31;
  char *v32;
  int *v33;
  unint64_t *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t *v43;

  *((_BYTE *)this + 113) = 0;
  v41 = 1;
  v42 = 1;
  v40 = 0;
  v2 = *((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 5) != v2)
  {
    v5 = 0;
    v36 = (char *)a2 + 96;
    v37 = (char *)a2 + 56;
    v6 = (uint64_t **)((char *)a2 + 184);
    v7 = (_QWORD *)((char *)a2 + 192);
    v8 = (uint64_t **)((char *)a2 + 352);
    do
    {
      v9 = *(_OWORD *)(v2 + 16 * v5);
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
      if (*((_QWORD *)&v9 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v12 = *(_QWORD *)(v9 + 64);
      v13 = *(const void **)(v12 + 8);
      if (v13)
      {
        {
          v14 = *(std::__shared_weak_count **)(v12 + 16);
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldxr(p_shared_owners);
            while (__stxr(v16 + 1, p_shared_owners));
            v17 = (unint64_t *)&v14->__shared_owners_;
            do
              v18 = __ldaxr(v17);
            while (__stlxr(v18 - 1, v17));
            if (!v18)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
        }
        {
          v21 = *(std::__shared_weak_count **)(v12 + 16);
          if (v21)
          {
            v22 = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          v43 = &v40;
          v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v37, &v40, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43);
          v38 = v21;
          v43 = &v40;
          v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v36, &v40, (uint64_t)&std::piecewise_construct, (uint64_t **)&v43);
          v26 = (uint64_t *)v24[3];
          v27 = (uint64_t *)v24[4];
          while (v26 != v27)
          {
            if (v7 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v6, v26))
            {
              v43 = (unint64_t *)v26;
              v28 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v26, (__int128 **)&v43);
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), v26)|| (v43 = (unint64_t *)v26, *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v26, (uint64_t)&std::piecewise_construct, (__int128 **)&v43)+ 17) != -1))
              {
                *((_BYTE *)this + 113) |= Espresso::MPSEngine::context::calculate_if_splicing_textures((Espresso::MPSEngine::context *)(v28 + 56), (const Espresso::layer_shape *)&v42, &v41, v29);
              }
            }
            v26 += 3;
          }
          v31 = (uint64_t *)v25[3];
          for (i = (uint64_t *)v25[4]; v31 != i; v31 += 3)
          {
            if (v7 != std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v6, v31))
            {
              if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)a2 + 45), v31)|| (v43 = (unint64_t *)v31, *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, v31, (uint64_t)&std::piecewise_construct, (__int128 **)&v43)+ 17) != -1))
              {
                v43 = (unint64_t *)v31;
                v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, v31, (__int128 **)&v43);
                *((_BYTE *)this + 113) |= Espresso::MPSEngine::context::calculate_if_splicing_textures((Espresso::MPSEngine::context *)(v32 + 56), (const Espresso::layer_shape *)&v42, &v41, v33);
              }
            }
          }
          if (v38)
          {
            v34 = (unint64_t *)&v38->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
      }
      if (v39)
      {
        v19 = (unint64_t *)&v39->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v5 = v40 + 1;
      v40 = v5;
      v2 = *((_QWORD *)a2 + 4);
    }
    while (v5 < (*((_QWORD *)a2 + 5) - v2) >> 4);
  }
}

void sub_19189B6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_19189BA7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso9MPSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char *v16;
  unint64_t v17;
  _DWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30[3];

  v2 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(*a2 + 8) == v2 && *(_QWORD *)(a2[2] + 8) == v2)
  {
    v4 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 320))(*a2);
    if (!*(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[2] + 384))(a2[2]))
    {
      v5 = fabsf(*(float *)(v4 + 12)) < 0.000001 && *(_DWORD *)v4 == 0;
      if (v5 && fabsf(*(float *)(v4 + 8) + -1.0) < 0.000001)
      {
        *(_DWORD *)(v4 + 4) = 1;
        v6 = *(_QWORD *)(a2[15] + 32);
        v7 = *(char **)(*(_QWORD *)(v6 + 16 * *((int *)a2 + 28)) + 64);
        v8 = *(_QWORD *)(*(_QWORD *)(v6 + 16 * *((int *)a2 + 29)) + 64);
        v9 = operator new(8uLL);
        *v9 = v8;
        v30[1] = (uint64_t)(v9 + 1);
        v30[2] = (uint64_t)(v9 + 1);
        v30[0] = (uint64_t)v9;
        Espresso::merge_kernel_attributes(v7, v30);
        operator delete(v9);
        v10 = a2[15] + 96;
        v11 = *((int *)a2 + 29);
        v30[0] = v11;
        v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v11, v30);
        v13 = a2[15] + 96;
        v14 = *((int *)a2 + 28);
        v29 = v14;
        v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v13, v14, &v29);
        if (v15 != v12)
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v15 + 3), (std::string *)v12[3], (std::string *)v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
        v16 = (char *)a2[9];
        v17 = a2[10];
        if ((unint64_t)v16 >= v17)
        {
          v19 = (char *)a2[8];
          v20 = (v16 - v19) >> 2;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v21 = v17 - (_QWORD)v19;
          v22 = (uint64_t)(v17 - (_QWORD)v19) >> 1;
          if (v22 <= v20 + 1)
            v22 = v20 + 1;
          v23 = v21 >= 0x7FFFFFFFFFFFFFFCLL;
          v24 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v23)
            v24 = v22;
          if (v24)
          {
            v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v24);
            v19 = (char *)a2[8];
            v16 = (char *)a2[9];
          }
          else
          {
            v25 = 0;
          }
          v26 = (_DWORD *)(v24 + 4 * v20);
          v27 = v24 + 4 * v25;
          *v26 = *((_DWORD *)a2 + 29);
          v18 = v26 + 1;
          while (v16 != v19)
          {
            v28 = *((_DWORD *)v16 - 1);
            v16 -= 4;
            *--v26 = v28;
          }
          a2[8] = v26;
          a2[9] = v18;
          a2[10] = v27;
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_DWORD *)v16 = *((_DWORD *)a2 + 29);
          v18 = v16 + 4;
        }
        a2[9] = v18;
      }
    }
  }
}

void sub_19189BCB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso9MPSEngine7context32network_transform_pre_allocationEPNS_3netE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v10;
  int v11;
  _QWORD v12[2];

  v2 = *(_QWORD *)(a1 + 32);
  result = *(_QWORD *)a2;
  if (*(_QWORD *)(*(_QWORD *)a2 + 8) == v2 && *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) == v2)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 384))(*(_QWORD *)(a2 + 16));
    if (*(_QWORD *)(*(_QWORD *)a2 + 8) == v2 && *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8) == v2)
    {
      v6 = result;
      std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_deconvolution_kernel,Espresso::generic_convolution_kernel>(v12, *(void **)a2, *(_QWORD *)(a2 + 8));
      v7 = v12[0];
      result = std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v12);
      if (!v7)
      {
        std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSEngine::convolution_kernel_proxy,Espresso::generic_convolution_kernel>(v12, *(void **)a2, *(_QWORD *)(a2 + 8));
        v8 = v12[0];
        if (v12[0])
        {
          if (!*(_DWORD *)(v5 + 28) && *(_DWORD *)v6 == 24)
          {
            v10 = *(float *)(v6 + 4);
            if (*(_DWORD *)(v5 + 24) == 1)
              v10 = 0.0;
            *(_DWORD *)(v5 + 24) = 0;
            *(_DWORD *)(v5 + 60) = 24;
            v11 = *(_DWORD *)(v6 + 8);
            *(float *)(v5 + 64) = v10;
            *(_DWORD *)(v5 + 68) = v11;
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 624))(v8);
            Espresso::fuse_vertical_state<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>::remove_second_layer(a2);
          }
        }
        return std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_19189BDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::fuse_vertical<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>(Espresso::net *a1, void *a2)
{
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  int *v29;
  int *v30;
  int v31;
  int v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void (**v54)(id, _OWORD *);
  char *v55;
  uint64_t v56;
  char *v57;
  int v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *__p[2];
  __int128 v64;
  __int128 v65;
  _QWORD v66[3];
  char v67[8];
  std::__shared_weak_count *v68;
  uint64_t *v69[3];
  uint64_t *v70[3];
  char **v71;
  char v72;
  void **v73[2];
  std::__shared_weak_count *v74;
  _QWORD v75[3];
  _QWORD v76[3];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v54 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v67, a1);
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  *(_OWORD *)__p = 0u;
  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v66[0] = 0;
  v66[1] = a1;
  LODWORD(v73[0]) = 0;
  v3 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v3)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      LODWORD(v66[0]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v61, *(_QWORD *)(v3 + 16 * v4), *(_QWORD *)(v3 + 16 * v4 + 8));
      v6 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v69, v5, v73);
      if ((char *)v6[6] - (char *)v6[5] == 4)
      {
        HIDWORD(v66[0]) = *(_DWORD *)std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v69, v66[0], v66)[5];
        v7 = std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v70, SHIDWORD(v66[0]), (_DWORD *)v66 + 1);
        if ((char *)v7[6] - (char *)v7[5] == 4)
        {
          v8 = (uint64_t *)(*((_QWORD *)a1 + 4) + 16 * SHIDWORD(v66[0]));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v62, *v8, v8[1]);
          v9 = v61;
          v10 = *(void **)(v61 + 64);
          if (v10
          {
            v11 = *(_QWORD *)(v9 + 72);
            if (v11)
            {
              v12 = (unint64_t *)(v11 + 8);
              do
                v13 = __ldxr(v12);
              while (__stxr(v13 + 1, v12));
            }
          }
          else
          {
            v11 = 0;
          }
          v14 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
          *(_QWORD *)&v59 = v10;
          *((_QWORD *)&v59 + 1) = v11;
          if (v14)
          {
            p_shared_owners = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            if (!v16)
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
          }
          v17 = v62;
          v18 = *(void **)(v62 + 64);
          if (v18
          {
            v19 = *(_QWORD *)(v17 + 72);
            if (v19)
            {
              v20 = (unint64_t *)(v19 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
          }
          else
          {
            v19 = 0;
          }
          v22 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
          *(_QWORD *)&v60 = v18;
          *((_QWORD *)&v60 + 1) = v19;
          if (v22)
          {
            v23 = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          if ((_QWORD)v59)
            v25 = (_QWORD)v60 == 0;
          else
            v25 = 1;
          if (!v25)
            v54[2](v54, &v59);
        }
      }
      v4 = SLODWORD(v73[0]) + 1;
      ++LODWORD(v73[0]);
      v3 = *((_QWORD *)a1 + 4);
      v5 = v4;
    }
    while (v4 < (*((_QWORD *)a1 + 5) - v3) >> 4);
  }
  std::__sort<std::__less<int,int> &,int *>();
  v26 = __p[0];
  v27 = __p[1];
  if (__p[0] != __p[1])
  {
    v28 = 0;
    do
    {
      Espresso::net::remove_layer(a1, v28 + *v26++);
      --v28;
    }
    while (v26 != v27);
  }
  v29 = (int *)*((_QWORD *)&v64 + 1);
  v30 = (int *)v65;
  if (*((_QWORD *)&v64 + 1) != (_QWORD)v65)
  {
    v31 = 0;
    do
    {
      v32 = *v29;
      v58 = *v29 + v31;
      LODWORD(v73[0]) = v32;
      v33 = (std::__shared_weak_count *)*((_QWORD *)v29 + 2);
      v73[1] = *((void ***)v29 + 1);
      v74 = v33;
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      memset(v75, 0, sizeof(v75));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v75, *((_QWORD *)v29 + 3), *((_QWORD *)v29 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v29 + 4) - *((_QWORD *)v29 + 3)) >> 3));
      memset(v76, 0, sizeof(v76));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v76, *((_QWORD *)v29 + 6), *((_QWORD *)v29 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v29 + 7) - *((_QWORD *)v29 + 6)) >> 3));
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v71 = &v55;
      v72 = 0;
      v55 = (char *)operator new(0x48uLL);
      v56 = (uint64_t)v55;
      v57 = v55 + 72;
      v56 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v57, (uint64_t)v73, (uint64_t)&v77, (uint64_t)v55);
      Espresso::net::insert_layers((uint64_t)a1, &v58, (uint64_t *)&v55);
      v71 = &v55;
      std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      v71 = (char **)v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      v71 = (char **)v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
      v36 = v74;
      if (v74)
      {
        v37 = (unint64_t *)&v74->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      ++v31;
      v29 += 18;
    }
    while (v29 != v30);
  }
  v73[0] = (void **)&v64 + 1;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v73);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v39 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v40 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
  if (*((_QWORD *)&v61 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v70[1]);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v69[1]);
  v51 = v68;
  if (v68)
  {
    v52 = (unint64_t *)&v68->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }

}

void sub_19189C3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  Espresso::fuse_vertical_state<Espresso::generic_reshape_kernel,Espresso::generic_reshape_kernel>::~fuse_vertical_state((uint64_t)&a15);
  Espresso::network_optimization_graph::~network_optimization_graph((Espresso::network_optimization_graph *)&a32);

  _Unwind_Resume(a1);
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::generic_deconvolution_kernel,Espresso::generic_convolution_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSEngine::convolution_kernel_proxy,Espresso::generic_convolution_kernel>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::fuse_vertical_state<Espresso::generic_convolution_kernel,Espresso::generic_activation_kernel>::remove_second_layer(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  unint64_t v13;
  _DWORD *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26[3];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + 32);
  v3 = *(char **)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 112)) + 64);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16 * *(int *)(a1 + 116)) + 64);
  v5 = operator new(8uLL);
  *v5 = v4;
  v26[1] = (uint64_t)(v5 + 1);
  v26[2] = (uint64_t)(v5 + 1);
  v26[0] = (uint64_t)v5;
  Espresso::merge_kernel_attributes(v3, v26);
  operator delete(v5);
  v6 = *(_QWORD *)(a1 + 120) + 96;
  v7 = *(int *)(a1 + 116);
  v26[0] = v7;
  v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v26);
  v9 = *(_QWORD *)(a1 + 120) + 96;
  v10 = *(int *)(a1 + 112);
  v25 = v10;
  v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, v10, &v25);
  if (v11 != v8)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v11 + 3), (std::string *)v8[3], (std::string *)v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
  v12 = *(char **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(char **)(a1 + 64);
    v16 = (v12 - v15) >> 2;
    if ((unint64_t)(v16 + 1) >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)v15;
    v18 = (uint64_t)(v13 - (_QWORD)v15) >> 1;
    if (v18 <= v16 + 1)
      v18 = v16 + 1;
    v19 = v17 >= 0x7FFFFFFFFFFFFFFCLL;
    v20 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v19)
      v20 = v18;
    if (v20)
    {
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v20);
      v15 = *(char **)(a1 + 64);
      v12 = *(char **)(a1 + 72);
    }
    else
    {
      v21 = 0;
    }
    v22 = (_DWORD *)(v20 + 4 * v16);
    v23 = v20 + 4 * v21;
    *v22 = *(_DWORD *)(a1 + 116);
    v14 = v22 + 1;
    while (v12 != v15)
    {
      v24 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--v22 = v24;
    }
    *(_QWORD *)(a1 + 64) = v22;
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v23;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *(_DWORD *)v12 = *(_DWORD *)(a1 + 116);
    v14 = v12 + 4;
  }
  *(_QWORD *)(a1 + 72) = v14;
}

void sub_19189C6A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_mps_buffers_textures_interop>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE570;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_mps_buffers_textures_interop>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE570;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_mps_buffers_textures_interop>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::MPSEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __n128 result;
  _QWORD v16[2];

  v6 = operator new(0x130uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1CC8;
  v8 = (unint64_t)(v6 + 3);
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  v16[0] = v9;
  v16[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::MetalLowmemEngine::blob_container::blob_container((uint64_t)(v6 + 3), v16, a2);
  *(_QWORD *)(v7 + 24) = &off_1E2DA8120;
  *(_DWORD *)(v7 + 256) = 1;
  *(_BYTE *)(v7 + 260) = 0;
  *(_OWORD *)(v7 + 264) = 0u;
  *(_OWORD *)(v7 + 280) = 0u;
  *(_QWORD *)(v7 + 296) = 0;
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  result.n128_u64[0] = v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

void sub_19189C800(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::engine::~engine(Espresso::MPSEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC2400;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DABFF8;
  v6[40] = 0;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189C930(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::local_correlation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::local_correlation_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::local_correlation_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1E88;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA8FA0;
  v6[39] = 0;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189CA30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::grid_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::grid_sampling_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::grid_sampling_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x160uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC2438;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DAC150;
  *((_QWORD *)v6 + 42) = 0;
  *((_QWORD *)v6 + 43) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189CB4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_loss_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_loss_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_loss_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1D70;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = 0;
  v6[39] = 0;
  v6[40] = 0;
  v6[3] = &off_1E2DA8608;
  v6[43] = 0;
  v6[44] = 0;
  v6[42] = 0;
  *((_DWORD *)v6 + 82) = v7;
  *((_BYTE *)v6 + 332) = BYTE4(v7);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189CC3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::bias_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::bias_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::bias_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC23C8;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DABC18;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189CD44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::elementwise_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC23C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::elementwise_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC23C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::elementwise_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  v6 = (char *)operator new(0x200uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC24E0;
  v15 = a2[6];
  v16 = a2[7];
  v17 = *((_DWORD *)a2 + 32);
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DAC568;
  *((_QWORD *)v6 + 58) = 0;
  *((_QWORD *)v6 + 59) = 0;
  v6[480] = 1;
  *((_QWORD *)v6 + 61) = 0;
  *((_WORD *)v6 + 248) = 0;
  *((_QWORD *)v6 + 63) = 0;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189CE88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_weights_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC24E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_weights_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC24E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_weights_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  v6 = (char *)operator new(0x1F8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC2470;
  v15 = a2[6];
  v16 = a2[7];
  v17 = *((_DWORD *)a2 + 32);
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DAC2A8;
  *((_QWORD *)v6 + 58) = 0;
  v6[472] = 1;
  *((_QWORD *)v6 + 61) = 0;
  *((_QWORD *)v6 + 62) = 0;
  *((_QWORD *)v6 + 60) = 0;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189CFC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1E18;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA8BB8;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D0CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::concat_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1E18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::concat_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1E18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::concat_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  int v11;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1D38;
  v9 = *a2;
  v10 = a2[1];
  v11 = *((_DWORD *)a2 + 8);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA8358;
  v6[43] = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_DWORD *)v6 + 84) = v11;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D1C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::activation_grad>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::activation_grad>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::activation_grad>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = operator new(0x1A8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1DA8;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA8768;
  v6[52] = 0;
  *((_OWORD *)v6 + 23) = v13;
  *((_OWORD *)v6 + 24) = v14;
  *((_OWORD *)v6 + 25) = v15;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D2E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::pool_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1DA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::pool_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1DA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::pool_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x220uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC24A8;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 3) = &off_1E2DAC408;
  *((_QWORD *)v6 + 62) = 0;
  v6[504] = 1;
  *((_QWORD *)v6 + 67) = 0;
  *((_QWORD *)v6 + 65) = 0;
  *((_QWORD *)v6 + 64) = 0;
  *((_WORD *)v6 + 264) = 0;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D458(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::convolution_weights_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC24A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::convolution_weights_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC24A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::convolution_weights_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x218uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC2390;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 3) = &off_1E2DAB598;
  *((_QWORD *)v6 + 62) = 0;
  v6[504] = 1;
  *((_QWORD *)v6 + 64) = 0;
  *((_QWORD *)v6 + 66) = 0;
  *((_QWORD *)v6 + 65) = 0;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D5C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::convolution_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::convolution_grad_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::convolution_grad_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1BB0;
  v8 = *a2;
  v7 = a2[1];
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA78D8;
  v6[38] = v8;
  v6[39] = v7;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D6A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::adam_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1BB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::adam_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1BB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::adam_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1B78;
  v7 = *a2;
  LODWORD(a2) = *((_DWORD *)a2 + 2);
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA7780;
  v6[38] = v7;
  *((_DWORD *)v6 + 78) = (_DWORD)a2;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D78C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::sgd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1B78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::sgd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1B78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::sgd_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  int v10;

  v6 = (char *)operator new(0x1F8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC2080;
  v9 = *(_OWORD *)a2;
  v10 = *(_DWORD *)(a2 + 16);
  v7 = Espresso::MetalLowmemEngine::transplant_kernel::transplant_kernel((uint64_t)(v6 + 24), a1, &v9);
  *((_QWORD *)v6 + 3) = &off_1E2DAAA68;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189D884(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transplant_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAAA68;
  v2 = a1 + 57;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 54;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 48));
  Espresso::generic_transplant_kernel::~generic_transplant_kernel((Espresso::generic_transplant_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAAA68;
  v2 = a1 + 57;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 54;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 48));
  Espresso::generic_transplant_kernel::~generic_transplant_kernel((Espresso::generic_transplant_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transplant_kernel>::__launch(_QWORD *a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = (const void *)a1[1];
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = (std::__shared_weak_count *)a1[2];
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*((_BYTE *)a1 + 376) || a1[48]))
  {
    v13 = a1[54];
    v14 = a1[55];
    if (v14 == v13)
    {
      (*(void (**)(_QWORD *, const void ***, const void ***))(*a1 + 80))(a1, a3, a4);
      v13 = a1[54];
      v14 = a1[55];
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::transplant_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(a1[57] + v15));
      ++v16;
      v13 = a1[54];
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a1[55] - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::transplant_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19189DB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transplant_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 376) && !*(_QWORD *)(a1 + 384))
    {
      v11 = *(void ***)(a1 + 432);
      v12 = *(void ***)(a1 + 440);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 440) = v11;
      v13 = *(void ***)(a1 + 456);
      v14 = *(void ***)(a1 + 464);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 464) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 432));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 456));
    }
  }
  Espresso::MetalLowmemEngine::transplant_kernel::on_resized((Espresso::MetalLowmemEngine::transplant_kernel *)a1, (uint64_t **)a2, (Espresso::layer_data *)a3);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19189DD44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transplant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transplant_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transplant_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __n128 result;
  _BYTE __dst[520];
  __int128 v12;

  v6 = (char *)operator new(0x3B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC21D0;
  memcpy(__dst, a2, sizeof(__dst));
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[824] = 1;
  *((_OWORD *)v6 + 52) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2DD3F10;
  v6[856] = 0;
  *(_OWORD *)(v6 + 860) = 0u;
  *((_QWORD *)v6 + 106) = 0x200000002;
  *((_DWORD *)v6 + 224) = 0;
  memcpy(v6 + 304, __dst, 0x208uLL);
  v12 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 832), &v12);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *((_QWORD *)v6 + 3) = &off_1E2DA95C8;
  *(_OWORD *)(v6 + 904) = 0u;
  *(_OWORD *)(v6 + 920) = 0u;
  *(_OWORD *)(v6 + 936) = 0u;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189DEEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::split_nd_kernel>::~meta_texarray_kernel(void **a1)
{
  void **v2;

  *a1 = &off_1E2DA95C8;
  v2 = a1 + 113;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 110;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 101));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DA95C8;
  v2 = a1 + 113;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 110;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 101));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::split_nd_kernel>::__launch(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = (const void *)a1[1];
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = (std::__shared_weak_count *)a1[2];
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*((_BYTE *)a1 + 800) || a1[101]))
  {
    v13 = a1[111];
    v14 = a1[110];
    if (v13 == v14)
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
      v13 = a1[111];
      v14 = a1[110];
    }
    if (v13 == v14)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MPSEngine::split_nd_kernel::__launch(a1, a2, v14 + v15, a1[113] + v15);
      ++v16;
      v14 = a1[110];
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a1[111] - v14) >> 3));
  }
  else
  {
    Espresso::MPSEngine::split_nd_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19189E1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::split_nd_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 800) && !*(_QWORD *)(a1 + 808))
    {
      v11 = *(void ***)(a1 + 880);
      v12 = *(void ***)(a1 + 888);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 888) = v11;
      v13 = *(void ***)(a1 + 904);
      v14 = *(void ***)(a1 + 912);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 912) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 880));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 904));
    }
  }
  Espresso::MPSEngine::split_nd_kernel::on_resized((Espresso::MPSEngine::split_nd_kernel *)a1, (Espresso::layer_data *)a2, (Espresso::layer_data *)a3);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19189E380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::split_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC21D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::split_nd_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC21D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::split_nd_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v6 = (char *)operator new(0x1A8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1FA0;
  v9 = *a2;
  v10 = a2[1];
  v11 = *((_QWORD *)a2 + 4);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[344] = 0;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_QWORD *)v6 + 42) = v11;
  *((_QWORD *)v6 + 3) = &off_1E2DAA4B0;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189E4A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::reshape_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAA4B0;
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 44;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 41));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAA4B0;
  v2 = a1 + 47;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 44;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 41));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::reshape_kernel>::__launch(_QWORD *a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = (const void *)a1[1];
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = (std::__shared_weak_count *)a1[2];
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*((_BYTE *)a1 + 320) || a1[41]))
  {
    v13 = a1[44];
    v14 = a1[45];
    if (v14 == v13)
    {
      (*(void (**)(_QWORD *, const void ***, uint64_t *))(*a1 + 80))(a1, a3, a4);
      v13 = a1[44];
      v14 = a1[45];
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::reshape_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (uint64_t *)(a1[47] + v15));
      ++v16;
      v13 = a1[44];
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a1[45] - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::reshape_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19189E764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::reshape_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 320) && !*(_QWORD *)(a1 + 328))
    {
      v11 = *(void ***)(a1 + 352);
      v12 = *(void ***)(a1 + 360);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 360) = v11;
      v13 = *(void ***)(a1 + 376);
      v14 = *(void ***)(a1 + 384);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 384) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 352));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 376));
    }
  }
  Espresso::MetalLowmemEngine::reshape_kernel::on_resized((Espresso::MetalLowmemEngine::reshape_kernel *)a1, (Espresso::layer_data *)a2, (Espresso::layer_data *)a3);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19189E934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::reshape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1FA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::reshape_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1FA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::reshape_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  int v10;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC2048;
  v9 = *a2;
  v10 = *((_DWORD *)a2 + 4);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[328] = 0;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_DWORD *)v6 + 80) = v10;
  *((_QWORD *)v6 + 3) = &off_1E2DAA910;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189EA58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transpose_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAA910;
  v2 = a1 + 45;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 42;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 39));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAA910;
  v2 = a1 + 45;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 42;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 39));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transpose_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 304) || *(_QWORD *)(a1 + 312)))
  {
    v13 = *(_QWORD *)(a1 + 336);
    v14 = *(_QWORD *)(a1 + 344);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, uint64_t *))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 336);
      v14 = *(_QWORD *)(a1 + 344);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::transpose_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (uint64_t *)(*(_QWORD *)(a1 + 360) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 336);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 344) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::transpose_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19189ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transpose_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 304) && !*(_QWORD *)(a1 + 312))
    {
      v11 = *(void ***)(a1 + 336);
      v12 = *(void ***)(a1 + 344);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 344) = v11;
      v13 = *(void ***)(a1 + 360);
      v14 = *(void ***)(a1 + 368);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 368) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 336));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 360));
    }
  }
  Espresso::MetalLowmemEngine::transpose_kernel::on_resized((Espresso::MetalLowmemEngine::transpose_kernel *)a1, (Espresso::layer_data *)a2, (Espresso::layer_data *)a3);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19189EEE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transpose_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transpose_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::transpose_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x180uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1DE0;
  LODWORD(a2) = *a2;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 312) = 1;
  v6[40] = 0;
  v6[41] = 0;
  v6[3] = &off_1E2DA8A60;
  *((_DWORD *)v6 + 90) = 256;
  *((_OWORD *)v6 + 21) = xmmword_191A93370;
  v6[44] = 1;
  v6[46] = 0;
  v6[47] = 0;
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189F000(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_nd_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::softmax_nd_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(_QWORD *a1@<X1>, int *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::cf_loop_kernel_cpu,std::allocator<Espresso::cf_loop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_loop_params_t const&,void>(&v5, a1, *a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::cf_if_kernel_cpu,std::allocator<Espresso::cf_if_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_if_params_t const&,void>(&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  uint64_t v10;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1EF8;
  v9 = *a2;
  v10 = *((_QWORD *)a2 + 2);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[328] = 0;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_QWORD *)v6 + 40) = v10;
  *((_QWORD *)v6 + 3) = &off_1E2DAA0A8;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189F250(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::slice_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAA0A8;
  v2 = a1 + 45;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 42;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 39));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAA0A8;
  v2 = a1 + 45;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 42;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 39));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::slice_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 304) || *(_QWORD *)(a1 + 312)))
  {
    v13 = *(_QWORD *)(a1 + 336);
    v14 = *(_QWORD *)(a1 + 344);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 336);
      v14 = *(_QWORD *)(a1 + 344);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::slice_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 360) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 336);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 344) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::slice_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19189F510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::slice_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 304) && !*(_QWORD *)(a1 + 312))
    {
      v11 = *(void ***)(a1 + 336);
      v12 = *(void ***)(a1 + 344);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 344) = v11;
      v13 = *(void ***)(a1 + 360);
      v14 = *(void ***)(a1 + 368);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 368) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 336));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 360));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19189F6C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1EF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::slice_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1EF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::slice_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x190uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC2128;
  v7 = *a2;
  LODWORD(a2) = *((_DWORD *)a2 + 2);
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 320) = 0;
  v6[42] = 0;
  v6[43] = 0;
  v6[41] = 0;
  v6[38] = v7;
  *((_DWORD *)v6 + 78) = (_DWORD)a2;
  v6[3] = &off_1E2DAAEE0;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189F7D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::space_to_depth_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAAEE0;
  v2 = a1 + 44;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 41;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 38));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAAEE0;
  v2 = a1 + 44;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 41;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 38));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::space_to_depth_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 296) || *(_QWORD *)(a1 + 304)))
  {
    v13 = *(_QWORD *)(a1 + 328);
    v14 = *(_QWORD *)(a1 + 336);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 328);
      v14 = *(_QWORD *)(a1 + 336);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::space_to_depth_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 352) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 328);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 336) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::space_to_depth_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19189FA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::space_to_depth_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 296) && !*(_QWORD *)(a1 + 304))
    {
      v11 = *(void ***)(a1 + 328);
      v12 = *(void ***)(a1 + 336);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 336) = v11;
      v13 = *(void ***)(a1 + 352);
      v14 = *(void ***)(a1 + 360);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 360) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 328));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 352));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19189FC48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::space_to_depth_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2128;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::space_to_depth_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2128;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::space_to_depth_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v6 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1F68;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[368] = 0;
  *((_QWORD *)v6 + 47) = 0;
  *((_QWORD *)v6 + 48) = 0;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 49) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  *((_QWORD *)v6 + 3) = &off_1E2DAA358;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_19189FD78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::concat_kernel>::~meta_texarray_kernel(void **a1)
{
  void **v2;

  *a1 = &off_1E2DAA358;
  v2 = a1 + 52;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 49;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2D7DEB0;
  v2 = a1 + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAA358;
  v2 = a1 + 52;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 49;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2D7DEB0;
  v2 = a1 + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::concat_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t **a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 344) || *(_QWORD *)(a1 + 352)))
  {
    v13 = *(_QWORD *)(a1 + 392);
    v14 = *(_QWORD *)(a1 + 400);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, uint64_t **))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 392);
      v14 = *(_QWORD *)(a1 + 400);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::concat_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (uint64_t **)(*(_QWORD *)(a1 + 416) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 392);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 400) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::concat_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A0060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::concat_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 344) && !*(_QWORD *)(a1 + 352))
    {
      v11 = *(void ***)(a1 + 392);
      v12 = *(void ***)(a1 + 400);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 400) = v11;
      v13 = *(void ***)(a1 + 416);
      v14 = *(void ***)(a1 + 424);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 424) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 392));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 416));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A0214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1F68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1F68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::concat_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t **a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 336) || *(_QWORD *)(a1 + 344)))
  {
    v13 = *(_QWORD *)(a1 + 376);
    v14 = *(_QWORD *)(a1 + 384);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, uint64_t **))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 376);
      v14 = *(_QWORD *)(a1 + 384);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::elementwise_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (uint64_t **)(*(_QWORD *)(a1 + 400) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 376);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 384) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::elementwise_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A04D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 336) && !*(_QWORD *)(a1 + 344))
    {
      v11 = *(void ***)(a1 + 376);
      v12 = *(void ***)(a1 + 384);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 384) = v11;
      v13 = *(void ***)(a1 + 400);
      v14 = *(void ***)(a1 + 408);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 408) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 376));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 400));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A068C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC20B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::elementwise_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC20B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC20F0;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[312] = 0;
  *((_QWORD *)v6 + 41) = 0;
  *((_QWORD *)v6 + 42) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v7;
  *((_QWORD *)v6 + 3) = &off_1E2DAAD88;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A0780(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::flatten_kernel_metal>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAAD88;
  v2 = a1 + 43;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 40;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 37));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAAD88;
  v2 = a1 + 43;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 40;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 37));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::flatten_kernel_metal>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 288) || *(_QWORD *)(a1 + 296)))
  {
    v13 = *(_QWORD *)(a1 + 320);
    v14 = *(_QWORD *)(a1 + 328);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 320);
      v14 = *(_QWORD *)(a1 + 328);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::flatten_kernel_metal::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 344) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 320);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 328) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::flatten_kernel_metal::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A0A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::flatten_kernel_metal>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  std::runtime_error *exception;
  std::__shared_weak_count *v19;
  void **v20;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v19 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 288) && !*(_QWORD *)(a1 + 296))
    {
      v11 = *(void ***)(a1 + 320);
      v12 = *(void ***)(a1 + 328);
      while (v12 != v11)
      {
        v12 -= 3;
        v20 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
      }
      *(_QWORD *)(a1 + 328) = v11;
      v13 = *(void ***)(a1 + 344);
      v14 = *(void ***)(a1 + 352);
      while (v14 != v13)
      {
        v14 -= 3;
        v20 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v20);
      }
      *(_QWORD *)(a1 + 352) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 320));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 344));
    }
  }
  v15 = *(void **)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;

  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1918A0C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::flatten_kernel_metal>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC20F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::flatten_kernel_metal>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC20F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::flatten_kernel_metal>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  _OWORD *v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = operator new(0x220uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC2010;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::batchnorm_params,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 3), a1);
  v6[54] = 0;
  v6[55] = 0;
  v6[51] = 0;
  v6[52] = 0;
  *((_BYTE *)v6 + 424) = 0;
  v6[60] = 0;
  v6[61] = 0;
  v6[57] = 0;
  v6[58] = 0;
  v6[56] = 0;
  v7[21] = v11;
  v7[22] = *(_OWORD *)v12;
  v7[19] = v9;
  v7[20] = v10;
  *(_OWORD *)((char *)v7 + 364) = *(_OWORD *)&v12[12];
  v6[3] = &off_1E2DAA760;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A0D40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::batchnorm_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAA760;
  v2 = a1 + 62;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 59;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2D7E398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 57));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 51));
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel((Espresso::generic_batchnorm_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAA760;
  v2 = a1 + 62;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 59;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2D7E398;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 57));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 51));
  Espresso::generic_batchnorm_kernel::~generic_batchnorm_kernel((Espresso::generic_batchnorm_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::batchnorm_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 400) || *(_QWORD *)(a1 + 408)))
  {
    v13 = *(_QWORD *)(a1 + 472);
    v14 = *(_QWORD *)(a1 + 480);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 472);
      v14 = *(_QWORD *)(a1 + 480);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::batchnorm_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 496) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 472);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 480) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::batchnorm_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A1048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::batchnorm_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 400) && !*(_QWORD *)(a1 + 408))
    {
      v11 = *(void ***)(a1 + 472);
      v12 = *(void ***)(a1 + 480);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 480) = v11;
      v13 = *(void ***)(a1 + 496);
      v14 = *(void ***)(a1 + 504);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 504) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 472));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 496));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A11FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::batchnorm_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::batchnorm_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x1D0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1F30;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  *((_BYTE *)v6 + 360) = 0;
  v6[46] = 0;
  v6[47] = 0;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  v6[3] = &off_1E2DAA200;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A132C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::split_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DAA200;
  v2 = a1 + 52;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 49;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2D7DD58;
  v2 = a1 + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DAA200;
  v2 = a1 + 52;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 49;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2D7DD58;
  v2 = a1 + 46;
  std::vector<objc_object  {objcproto10MTLTexture}* {__strong}>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 43));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::split_kernel>::__launch(uint64_t a1, uint64_t *a2, _QWORD *a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 336) || *(_QWORD *)(a1 + 344)))
  {
    v13 = *(_QWORD *)(a1 + 392);
    v14 = *(_QWORD *)(a1 + 400);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, _QWORD *, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 392);
      v14 = *(_QWORD *)(a1 + 400);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MetalLowmemEngine::split_kernel::__launch(a1, a2, (_QWORD *)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 416) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 392);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 400) - v13) >> 3));
  }
  else
  {
    Espresso::MetalLowmemEngine::split_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A1624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::split_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 336) && !*(_QWORD *)(a1 + 344))
    {
      v11 = *(void ***)(a1 + 392);
      v12 = *(void ***)(a1 + 400);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 400) = v11;
      v13 = *(void ***)(a1 + 416);
      v14 = *(void ***)(a1 + 424);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 424) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 392));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 416));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A17D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::split_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1F30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::split_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1F30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MetalLowmemEngine::split_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>::__launch(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = (const void *)a1[1];
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = (std::__shared_weak_count *)a1[2];
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*((_BYTE *)a1 + 288) || a1[37]))
  {
    v13 = a1[47];
    v14 = a1[48];
    if (v14 == v13)
    {
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 80))(a1, a3, a4);
      v13 = a1[47];
      v14 = a1[48];
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MPSEngine::general_concat_kernel::__launch(a1, a2, v13 + v15, a1[50] + v15);
      ++v16;
      v13 = a1[47];
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a1[48] - v13) >> 3));
  }
  else
  {
    Espresso::MPSEngine::general_concat_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A1A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 288) && !*(_QWORD *)(a1 + 296))
    {
      v11 = *(void ***)(a1 + 376);
      v12 = *(void ***)(a1 + 384);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 384) = v11;
      v13 = *(void ***)(a1 + 400);
      v14 = *(void ***)(a1 + 408);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 408) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 376));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 400));
    }
  }
  Espresso::MPSEngine::general_concat_kernel::on_resized(a1, (Espresso::layer_data *)a2, (Espresso::layer_data *)a3);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A1C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_concat_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC1BE8;
  LODWORD(a2) = *a2;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2DA7A30;
  v6[39] = 0;
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A1D38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1BE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::copy_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1BE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::copy_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  _DWORD *v7;
  int v8;
  int v9;
  const void *v10;
  id *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  const void *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const void *v29;
  id *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  __n128 result;
  std::runtime_error *v39;
  std::runtime_error *exception;
  std::runtime_error *v41;
  __int128 v42;
  _BYTE v43[32];
  __int128 v44;

  v6 = (char *)operator new(0x1B8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC2160;
  v42 = *a2;
  *(_OWORD *)v43 = a2[1];
  *(_OWORD *)&v43[12] = *(__int128 *)((char *)a2 + 28);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v7 = v6 + 304;
  v6[352] = 1;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA7FC8;
  *((_QWORD *)v6 + 47) = 0;
  *((_QWORD *)v6 + 48) = 0;
  *((_OWORD *)v6 + 19) = v42;
  *((_OWORD *)v6 + 20) = *(_OWORD *)v43;
  *(_OWORD *)(v6 + 329) = *(_OWORD *)&v43[9];
  v8 = *((_DWORD *)v6 + 79);
  if (Espresso::MPSEngine::reduce_kernel::used_version(void)::onceToken != -1)
    dispatch_once(&Espresso::MPSEngine::reduce_kernel::used_version(void)::onceToken, &__block_literal_global_7094);
  v9 = Espresso::MPSEngine::reduce_kernel::used_version(void)::override_version;
  if (Espresso::MPSEngine::reduce_kernel::used_version(void)::override_version == -1)
    v9 = v8;
  if (v9)
  {
    if (v9 == 2)
    {
      if (*v7 == 11 && *((_DWORD *)v6 + 78) == 4)
      {
        v10 = (const void *)*((_QWORD *)v6 + 4);
        if (!v10
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
          exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
        }
        v12 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
        if (v12)
        {
          p_shared_owners = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldxr(p_shared_owners);
          while (__stxr(v14 + 1, p_shared_owners));
        }
        objc_msgSend(v11[20], "kernelForFunction:cacheString:withConstants:", "argmax_simple", 0, 0, v42, *(_QWORD *)v43, *(_QWORD *)&v43[8], *(_QWORD *)&v43[16], *(_QWORD *)&v43[24]);
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = (void *)*((_QWORD *)v6 + 47);
        *((_QWORD *)v6 + 47) = v15;

        if (v12)
        {
          v17 = (unint64_t *)&v12->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v19 = (const void *)*((_QWORD *)v6 + 4);
        if (!v19
        {
          v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Espresso: wrong_context_type");
          v41->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
        }
        v21 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::dummy_kernel,std::allocator<Espresso::MPSEngine::dummy_kernel>,std::shared_ptr<Espresso::MPSEngine::context> &,void>(&v44, (uint64_t)v20, v21);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 360), &v44);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v44 + 1);
        if (*((_QWORD *)&v44 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v44 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        if (v21)
        {
          v27 = (unint64_t *)&v21->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
      }
    }
    else
    {
      v29 = (const void *)*((_QWORD *)v6 + 4);
      if (!v29
      {
        v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v39, "Espresso: wrong_context_type");
        v39->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v31 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
        v34 = v30[18];
        do
          v35 = __ldaxr(v32);
        while (__stlxr(v35 - 1, v32));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      else
      {
        v34 = v30[18];
      }
      if (*v7 == 11 && *((_DWORD *)v6 + 78) == 4)
      {
        v36 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC7208]), "initWithDevice:", v34);
        v37 = (void *)*((_QWORD *)v6 + 48);
        *((_QWORD *)v6 + 48) = v36;

      }
    }
  }
  *((_QWORD *)v6 + 3) = &off_1E2DA9318;
  *(_OWORD *)(v6 + 392) = 0u;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A21E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  Espresso::base_kernel *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v8;

  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v8);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::reduce_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DA9318;
  v2 = a1 + 49;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 46;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 42));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DA9318;
  v2 = a1 + 49;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 46;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 42));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::reduce_kernel>::__launch(uint64_t a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 328) || *(_QWORD *)(a1 + 336)))
  {
    v13 = *(_QWORD *)(a1 + 368);
    v14 = *(_QWORD *)(a1 + 376);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 368);
      v14 = *(_QWORD *)(a1 + 376);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MPSEngine::reduce_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 392) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 368);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 376) - v13) >> 3));
  }
  else
  {
    Espresso::MPSEngine::reduce_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A2568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::reduce_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 328) && !*(_QWORD *)(a1 + 336))
    {
      v11 = *(void ***)(a1 + 368);
      v12 = *(void ***)(a1 + 376);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 376) = v11;
      v13 = *(void ***)(a1 + 392);
      v14 = *(void ***)(a1 + 400);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 400) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 368));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 392));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A271C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::reduce_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2160;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::reduce_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2160;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::reduce_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  id v14;
  unint64_t v15;
  id v16;
  double v17;
  double v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  void *v24;
  __n128 result;
  std::runtime_error *exception;
  std::runtime_error *v27;
  _QWORD v28[3];

  v6 = (int *)operator new(0x148uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1C20;
  v8 = *a2;
  v7 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 6), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA7B88;
  *((_QWORD *)v6 + 39) = v7;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v8;
  v9 = (const void *)*((_QWORD *)v6 + 4);
  if (!v9
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = v10[18];
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v14 = v10[18];
  }
  v16 = objc_alloc(MEMORY[0x1E0CC6D50]);
  LODWORD(v17) = 1.0;
  LODWORD(v18) = 0;
  v19 = objc_msgSend(v16, "initWithDevice:a:b:", v14, v17, v18);
  v20 = (void *)*((_QWORD *)v6 + 40);
  *((_QWORD *)v6 + 40) = v19;

  v21 = v6[78];
  v22 = (void *)*((_QWORD *)v6 + 40);
  v28[0] = v6[76];
  v28[1] = v21;
  v28[2] = 0;
  objc_msgSend(v22, "setOffset:", v28);
  if (!*((_QWORD *)v6 + 40))
  {
    v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v27, "Error creating mps kernel");
    __cxa_throw(v27, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)(*((_QWORD *)v6 + 4) + 64))
  {
    v23 = v6 + 50;
    if (*((char *)v6 + 223) < 0)
      v23 = (_QWORD *)*v23;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v23);
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)v6 + 40), "setLabel:", v24);

  }
  result.n128_u64[0] = (unint64_t)(v6 + 6);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A29AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  Espresso::base_kernel *v2;
  void *v3;
  void *v4;
  void *v6;

  __cxa_free_exception(v4);

  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::crop_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::crop_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  id *v9;
  __int128 v10;
  __int128 v11;
  const void *v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  id v17;
  unint64_t v18;
  id v19;
  double v20;
  double v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t *v32;
  unint64_t *v33;
  __n128 result;
  std::runtime_error *exception;
  std::runtime_error *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  __int128 v41;
  _QWORD v42[3];

  v6 = (char *)operator new(0x1E0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC22E8;
  v7 = a2[3];
  v39 = a2[2];
  v40[0] = v7;
  *(_OWORD *)((char *)v40 + 12) = *(__int128 *)((char *)a2 + 60);
  v8 = a2[1];
  v37 = *a2;
  v38 = v8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[384] = 1;
  *((_QWORD *)v6 + 49) = 0;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DAB1B0;
  v9 = (id *)(v6 + 408);
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 53) = 0;
  *((_QWORD *)v6 + 51) = 0;
  v10 = v40[0];
  *((_OWORD *)v6 + 21) = v39;
  *((_OWORD *)v6 + 22) = v10;
  v11 = v38;
  *((_OWORD *)v6 + 19) = v37;
  *((_OWORD *)v6 + 20) = v11;
  *(_OWORD *)(v6 + 364) = *(_OWORD *)((char *)v40 + 12);
  v12 = (const void *)*((_QWORD *)v6 + 4);
  if (!v12
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = v13[18];
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  else
  {
    v17 = v13[18];
  }
  v19 = objc_alloc(MEMORY[0x1E0CC6D50]);
  LODWORD(v20) = 1.0;
  LODWORD(v21) = 0;
  v22 = objc_msgSend(v19, "initWithDevice:a:b:", v17, v20, v21);
  v23 = (void *)*((_QWORD *)v6 + 51);
  *((_QWORD *)v6 + 51) = v22;

  v24 = -(uint64_t)*((__int16 *)v6 + 158);
  v25 = (void *)*((_QWORD *)v6 + 51);
  v42[0] = -(uint64_t)*((__int16 *)v6 + 156);
  v42[1] = v24;
  v42[2] = 0;
  objc_msgSend(v25, "setOffset:", v42);
  if (!*v9)
  {
    v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Error creating mps kernel");
    __cxa_throw(v36, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)(*((_QWORD *)v6 + 4) + 64))
  {
    v26 = v6 + 200;
    if (v6[223] < 0)
      v26 = (_QWORD *)*v26;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v26, v37, v38, v39, v40[0], v40[1]);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*v9, "setLabel:", v27);

  }
  switch(*((_WORD *)v6 + 153))
  {
    case 0:
      objc_msgSend(*v9, "setEdgeMode:", 0);
      if (fabsf(*((float *)v6 + 77)) > 0.00001)
      {
        std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::general_padding_kernel,std::allocator<Espresso::MetalLowmemEngine::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params &,void>((uint64_t *)&v41, a1, &v37);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 416), &v41);
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
        if (*((_QWORD *)&v41 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          goto LABEL_33;
        }
      }
      break;
    case 1:
      std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::general_padding_kernel,std::allocator<Espresso::MetalLowmemEngine::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params &,void>((uint64_t *)&v41, a1, &v37);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 416), &v41);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v33 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v30 = __ldaxr(v33);
        while (__stlxr(v30 - 1, v33));
        goto LABEL_33;
      }
      break;
    case 2:
      std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::general_padding_kernel,std::allocator<Espresso::MetalLowmemEngine::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params &,void>((uint64_t *)&v41, a1, &v37);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 416), &v41);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v30 = __ldaxr(v31);
        while (__stlxr(v30 - 1, v31));
        goto LABEL_33;
      }
      break;
    case 3:
      std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::general_padding_kernel,std::allocator<Espresso::MetalLowmemEngine::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params &,void>((uint64_t *)&v41, a1, &v37);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 416), &v41);
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v32 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v30 = __ldaxr(v32);
        while (__stlxr(v30 - 1, v32));
LABEL_33:
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      break;
    default:
      break;
  }

  *((_QWORD *)v6 + 3) = &off_1E2DA9CC8;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A2E60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::base_kernel *v2;
  void *v3;
  uint64_t v4;
  id *v5;
  void *v7;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[16].__shared_owners_);
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_padding_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DA9CC8;
  v2 = a1 + 54;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 51;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DAB1B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 49));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 46));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DA9CC8;
  v2 = a1 + 54;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 51;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DAB1B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 49));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 46));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_padding_kernel>::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 360) || *(_QWORD *)(a1 + 392)))
  {
    v13 = *(_QWORD *)(a1 + 408);
    v14 = *(_QWORD *)(a1 + 416);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 408);
      v14 = *(_QWORD *)(a1 + 416);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MPSEngine::general_padding_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 432) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 408);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 416) - v13) >> 3));
  }
  else
  {
    Espresso::MPSEngine::general_padding_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A31BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_padding_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 360) && !*(_QWORD *)(a1 + 392))
    {
      v11 = *(void ***)(a1 + 408);
      v12 = *(void ***)(a1 + 416);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 416) = v11;
      v13 = *(void ***)(a1 + 432);
      v14 = *(void ***)(a1 + 440);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 440) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 408));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 432));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A3370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC22E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_padding_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC22E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::general_padding_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  EspressoConvolutionWeightsForMPS *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[24];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[10];
  uint64_t v31;

  v6 = (char *)operator new(0x280uLL);
  v25 = a2[8];
  *(_OWORD *)v26 = a2[9];
  v7 = a2[3];
  v21 = a2[4];
  v22 = a2[5];
  v23 = a2[6];
  v24 = a2[7];
  v17 = *a2;
  v18 = a2[1];
  v19 = a2[2];
  v20 = v7;
  LODWORD(v29) = *(_DWORD *)&v26[12];
  v27 = *a2;
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1E50;
  *(_QWORD *)&v26[16] = *((_QWORD *)a2 + 20);
  *(_QWORD *)((char *)&v29 + 4) = *(_QWORD *)&v26[16];
  v28 = v7;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  v6[584] = 1;
  *((_QWORD *)v6 + 74) = 0;
  *((_QWORD *)v6 + 76) = 0;
  *((_QWORD *)v6 + 75) = 0;
  *((_QWORD *)v6 + 3) = off_1E2DAB988;
  *(_OWORD *)(v6 + 456) = v25;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v26;
  *(_QWORD *)(v6 + 485) = *(_QWORD *)((char *)&v29 + 1);
  *(_OWORD *)(v6 + 392) = v21;
  *(_OWORD *)(v6 + 408) = v22;
  *(_OWORD *)(v6 + 424) = v23;
  *(_OWORD *)(v6 + 440) = v24;
  *(_OWORD *)(v6 + 328) = v27;
  *(_OWORD *)(v6 + 344) = v18;
  *(_OWORD *)(v6 + 360) = v19;
  *(_OWORD *)(v6 + 376) = v28;
  v8 = [EspressoConvolutionWeightsForMPS alloc];
  v9 = *(_OWORD *)(v6 + 472);
  v30[8] = *(_OWORD *)(v6 + 456);
  v30[9] = v9;
  v31 = *((_QWORD *)v6 + 61);
  v10 = *(_OWORD *)(v6 + 408);
  v30[4] = *(_OWORD *)(v6 + 392);
  v30[5] = v10;
  v11 = *(_OWORD *)(v6 + 440);
  v30[6] = *(_OWORD *)(v6 + 424);
  v30[7] = v11;
  v12 = *(_OWORD *)(v6 + 344);
  v30[0] = *(_OWORD *)(v6 + 328);
  v30[1] = v12;
  v13 = *(_OWORD *)(v6 + 376);
  v30[2] = *(_OWORD *)(v6 + 360);
  v30[3] = v13;
  v14 = -[EspressoConvolutionWeightsForMPS initWithParams:](v8, "initWithParams:", v30);
  v15 = (void *)*((_QWORD *)v6 + 76);
  *((_QWORD *)v6 + 76) = v14;

  *((_QWORD *)v6 + 3) = &off_1E2DA8D10;
  *((_QWORD *)v6 + 77) = 0;
  *((_QWORD *)v6 + 79) = 0;
  *((_QWORD *)v6 + 78) = 0;
  *(_OWORD *)(v6 + 456) = v25;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v26;
  *(_QWORD *)(v6 + 485) = *(_QWORD *)&v26[13];
  *(_OWORD *)(v6 + 392) = v21;
  *(_OWORD *)(v6 + 408) = v22;
  *(_OWORD *)(v6 + 424) = v23;
  *(_OWORD *)(v6 + 440) = v24;
  *(_OWORD *)(v6 + 328) = v17;
  *(_OWORD *)(v6 + 344) = v18;
  *(_OWORD *)(v6 + 360) = v19;
  *(_OWORD *)(v6 + 376) = v20;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A35DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::deconvolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::deconvolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, _OWORD *a4@<X8>)
{
  double result;
  __int128 v6;

  std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>,std::allocator<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(&v6, a1, a3, a2);
  result = *(double *)&v6;
  *a4 = v6;
  return result;
}

double std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>,std::allocator<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(_QWORD *a1, _QWORD *a2, int a3, __int128 *a4)
{
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;
  uint64_t v12;
  __int128 v13;
  const void *v14;
  id *v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  double result;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::runtime_error *exception;
  __int128 v28;
  __int128 v29;
  int v30;
  __int128 v31;

  v8 = (char *)operator new(0x200uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DC2240;
  v9 = v8 + 24;
  v10 = a4[1];
  v28 = *a4;
  v29 = v10;
  v30 = *((_DWORD *)a4 + 8);
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a2);
  *((_QWORD *)v8 + 3) = &off_1E2DA88C0;
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  v8[416] = 1;
  *((_QWORD *)v8 + 53) = 0;
  *((_QWORD *)v8 + 54) = 0;
  v11 = (void **)(v8 + 440);
  v12 = (uint64_t)(v8 + 448);
  *((_QWORD *)v8 + 56) = 0;
  *((_QWORD *)v8 + 57) = 0;
  *((_QWORD *)v8 + 55) = 0;
  v13 = v29;
  *(_OWORD *)(v8 + 328) = v28;
  *(_OWORD *)(v8 + 344) = v13;
  *((_DWORD *)v8 + 90) = v30;
  v14 = (const void *)*((_QWORD *)v8 + 4);
  if (!v14
  {
    v31 = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)v8 + 5);
  *(_QWORD *)&v31 = v15;
  *((_QWORD *)&v31 + 1) = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
    v19 = v15[18];
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    v12 = (uint64_t)(v8 + 448);
    v9 = v8 + 24;
    v11 = (void **)(v8 + 440);
  }
  else
  {
    v19 = v15[18];
  }
  create_mps_neuron(v19, *((_DWORD *)v8 + 82), *((float *)v8 + 83), *((float *)v8 + 84));
  v21 = objc_claimAutoreleasedReturnValue();
  v22 = *v11;
  *v11 = (void *)v21;

  if (!*v11)
  {
    std::allocate_shared[abi:ne180100]<Espresso::MetalLowmemEngine::activation_kernel,std::allocator<Espresso::MetalLowmemEngine::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params &,void>(&v31, a2, a3, (uint64_t)&v28);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v12, &v31);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }

  *((_QWORD *)v8 + 3) = &off_1E2DA9878;
  result = 0.0;
  *((_OWORD *)v8 + 29) = 0u;
  *((_OWORD *)v8 + 30) = 0u;
  *((_OWORD *)v8 + 31) = 0u;
  *a1 = v9;
  a1[1] = v8;
  return result;
}

void sub_1918A399C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::generic_activation_kernel *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id *v6;
  void *v8;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v5 + 400);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v8);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 392) || *(_QWORD *)(a1 + 424)))
  {
    v13 = *(_QWORD *)(a1 + 440);
    v14 = *(_QWORD *)(a1 + 448);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 440);
      v14 = *(_QWORD *)(a1 + 448);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MPSEngine::activation_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 464) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 440);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 448) - v13) >> 3));
  }
  else
  {
    Espresso::MPSEngine::activation_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A3C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 392) && !*(_QWORD *)(a1 + 424))
    {
      v11 = *(void ***)(a1 + 440);
      v12 = *(void ***)(a1 + 448);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 448) = v11;
      v13 = *(void ***)(a1 + 464);
      v14 = *(void ***)(a1 + 472);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 472) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 440));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 464));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A3DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2240;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::activation_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2240;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  char *v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC22B0;
  v16 = a2[2];
  *(_OWORD *)v17 = a2[3];
  *(_OWORD *)&v17[16] = a2[4];
  v14 = *a2;
  v15 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[384] = 1;
  *((_QWORD *)v6 + 49) = 0;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DAB058;
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *((_OWORD *)v6 + 21) = v16;
  *((_OWORD *)v6 + 22) = *(_OWORD *)v17;
  *((_OWORD *)v6 + 19) = v14;
  *((_OWORD *)v6 + 20) = v15;
  *(_OWORD *)(v6 + 365) = *(_OWORD *)&v17[13];
  v7 = (char *)operator new(0x188uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_1E2DBAFA0;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 24), a1);
  *((_QWORD *)v7 + 3) = &off_1E2D7F1B8;
  *((_QWORD *)v7 + 48) = 0;
  *((_OWORD *)v7 + 21) = v16;
  *((_OWORD *)v7 + 22) = *(_OWORD *)v17;
  *((_OWORD *)v7 + 19) = v14;
  *((_OWORD *)v7 + 20) = v15;
  *(_OWORD *)(v7 + 365) = *(_OWORD *)&v17[13];
  *(_QWORD *)&v9 = v8;
  *((_QWORD *)&v9 + 1) = v7;
  v10 = (std::__shared_weak_count *)*((_QWORD *)v6 + 52);
  *(_OWORD *)(v6 + 408) = v9;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_QWORD *)v6 + 3) = &off_1E2DA9B70;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A3FD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::base_kernel *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *v6;
  void *v7;

  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[16].__shared_owners_);
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::crop_and_resize_kernel>::~meta_texarray_kernel(void **a1)
{
  void **v2;

  *a1 = &off_1E2DA9B70;
  v2 = a1 + 53;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DAB058;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 48));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 46));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DA9B70;
  v2 = a1 + 53;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DAB058;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 48));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 46));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::crop_and_resize_kernel>::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v5;
  _BYTE *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::runtime_error *exception;
  std::__shared_weak_count *v19;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  v19 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v8[113] && (!*(_BYTE *)(a1 + 360) || *(_QWORD *)(a1 + 384)))
  {
    v12 = *(_QWORD *)(a1 + 400);
    v13 = *(_QWORD *)(a1 + 408);
    if (v13 == v12)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v12 = *(_QWORD *)(a1 + 400);
      v13 = *(_QWORD *)(a1 + 408);
    }
    if (v13 == v12)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v14 = 0;
    v15 = 0;
    do
    {
      Espresso::MPSEngine::crop_and_resize_kernel::__launch(a1);
      ++v15;
      v14 += 24;
    }
    while (v15 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 408) - *(_QWORD *)(a1 + 400)) >> 3));
  }
  else
  {
    Espresso::MPSEngine::crop_and_resize_kernel::__launch(a1);
  }
  if (v19)
  {
    v16 = (unint64_t *)&v19->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1918A42E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::crop_and_resize_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 360) && !*(_QWORD *)(a1 + 384))
    {
      v11 = *(void ***)(a1 + 400);
      v12 = *(void ***)(a1 + 408);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 408) = v11;
      v13 = *(void ***)(a1 + 424);
      v14 = *(void ***)(a1 + 432);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 432) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 400));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 424));
    }
  }
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A4494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::crop_and_resize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC22B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::crop_and_resize_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC22B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::crop_and_resize_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  __n128 result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC2208;
  v19 = a2[2];
  v20 = a2[3];
  v21 = *((_QWORD *)a2 + 8);
  v17 = *a2;
  v18 = a2[1];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  v6[376] = 1;
  *((_QWORD *)v6 + 48) = 0;
  *((_QWORD *)v6 + 49) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA84B0;
  *((_QWORD *)v6 + 51) = 0;
  *((_QWORD *)v6 + 52) = 0;
  *((_QWORD *)v6 + 50) = 0;
  *((_OWORD *)v6 + 21) = v19;
  *((_OWORD *)v6 + 22) = v20;
  *((_QWORD *)v6 + 46) = v21;
  *((_OWORD *)v6 + 19) = v17;
  *((_OWORD *)v6 + 20) = v18;
  v22 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 408), &v22);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (*((_DWORD *)v6 + 79) == 1)
  {
    v10 = operator new(0x180uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_1E2DBAD38;
    v11 = Espresso::base_kernel::base_kernel((uint64_t)(v10 + 3), a1);
    v10[3] = &off_1E2D7E240;
    *((_OWORD *)v10 + 21) = v19;
    *((_OWORD *)v10 + 22) = v20;
    v10[46] = v21;
    v10[47] = 0;
    *((_OWORD *)v10 + 19) = v17;
    *((_OWORD *)v10 + 20) = v18;
    *(_QWORD *)&v12 = v11;
    *((_QWORD *)&v12 + 1) = v10;
    v13 = (std::__shared_weak_count *)*((_QWORD *)v6 + 52);
    *(_OWORD *)(v6 + 408) = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  *((_QWORD *)v6 + 3) = &off_1E2DA9720;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A46D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  Espresso::base_kernel *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  void *v6;
  void *v7;

  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 384);
  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v7);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::upsample_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DA9720;
  v2 = a1 + 53;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DA84B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 48));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 45));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DA9720;
  v2 = a1 + 53;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 50;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DA84B0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 48));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 45));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::upsample_kernel>::__launch(_QWORD *a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = (const void *)a1[1];
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = (std::__shared_weak_count *)a1[2];
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*((_BYTE *)a1 + 352) || a1[48]))
  {
    v13 = a1[50];
    v14 = a1[51];
    if (v14 == v13)
    {
      (*(void (**)(_QWORD *, const void ***, const void ***))(*a1 + 80))(a1, a3, a4);
      v13 = a1[50];
      v14 = a1[51];
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MPSEngine::upsample_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(a1[53] + v15));
      ++v16;
      v13 = a1[50];
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((a1[51] - v13) >> 3));
  }
  else
  {
    Espresso::MPSEngine::upsample_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A49FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::upsample_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 352) && !*(_QWORD *)(a1 + 384))
    {
      v11 = *(void ***)(a1 + 400);
      v12 = *(void ***)(a1 + 408);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 408) = v11;
      v13 = *(void ***)(a1 + 424);
      v14 = *(void ***)(a1 + 432);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 432) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 400));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 424));
    }
  }
  Espresso::MPSEngine::upsample_kernel::on_resized(a1, (uint64_t)a2, (uint64_t *)a3);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A4BCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2208;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::upsample_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2208;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::upsample_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1EC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::inner_product_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1EC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  __n128 result;
  __int128 v11[2];

  v8 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DC2198;
  v11[0] = *a2;
  *(__int128 *)((char *)v11 + 12) = *(__int128 *)((char *)a2 + 12);
  v9 = Espresso::MPSEngine::softmax_kernel::softmax_kernel((uint64_t)(v8 + 24), a1, a3, v11);
  *((_QWORD *)v8 + 3) = &off_1E2DA9470;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1918A4D28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::softmax_kernel>::~meta_texarray_kernel(id *a1)
{
  void **v2;

  *a1 = &off_1E2DA9470;
  v2 = a1 + 55;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 52;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DA8200;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 50));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
}

{
  void **v2;

  *a1 = &off_1E2DA9470;
  v2 = a1 + 55;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1 + 52;
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v2);
  *a1 = &off_1E2DA8200;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 50));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 44));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 40));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::softmax_kernel>::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::runtime_error *exception;
  std::__shared_weak_count *v20;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 312) || *(_QWORD *)(a1 + 352)))
  {
    v13 = *(_QWORD *)(a1 + 416);
    v14 = *(_QWORD *)(a1 + 424);
    if (v14 == v13)
    {
      (*(void (**)(uint64_t, const void ***, const void ***))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 416);
      v14 = *(_QWORD *)(a1 + 424);
    }
    if (v14 == v13)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      Espresso::MPSEngine::softmax_kernel::__launch(a1, a2, (const void ***)(v13 + v15), (const void ***)(*(_QWORD *)(a1 + 440) + v15));
      ++v16;
      v13 = *(_QWORD *)(a1 + 416);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 424) - v13) >> 3));
  }
  else
  {
    Espresso::MPSEngine::softmax_kernel::__launch(a1, a2, a3, a4);
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918A5060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::softmax_kernel>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  unint64_t *v15;
  unint64_t v16;
  std::runtime_error *exception;
  std::__shared_weak_count *v18;
  void **v19;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 312) && !*(_QWORD *)(a1 + 352))
    {
      v11 = *(void ***)(a1 + 416);
      v12 = *(void ***)(a1 + 424);
      while (v12 != v11)
      {
        v12 -= 3;
        v19 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 424) = v11;
      v13 = *(void ***)(a1 + 440);
      v14 = *(void ***)(a1 + 448);
      while (v14 != v13)
      {
        v14 -= 3;
        v19 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v19);
      }
      *(_QWORD *)(a1 + 448) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 416));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 440));
    }
  }
  Espresso::MPSEngine::softmax_kernel::on_resized((_QWORD *)a1, a2, a3);
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1918A5230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2198;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::softmax_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2198;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::softmax_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  const void *v7;
  id *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  void *v17;
  _QWORD *v18;
  void *v19;
  double v20;
  __n128 result;
  std::runtime_error *exception;
  std::runtime_error *v23;
  _BYTE v24[32];

  v6 = (char *)operator new(0x158uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1B40;
  *(_OWORD *)v24 = *a2;
  *(_OWORD *)&v24[12] = *(_OWORD *)((char *)a2 + 12);
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA7628;
  *((_QWORD *)v6 + 42) = 0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v24;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v24[12];
  v7 = (const void *)*((_QWORD *)v6 + 4);
  if (!v7
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)v6 + 5);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = v8[18];
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    v12 = v8[18];
  }
  v14 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6CE0]), "initWithDevice:kernelSize:", v12, *((int *)v6 + 78));
  v15 = (void *)*((_QWORD *)v6 + 42);
  *((_QWORD *)v6 + 42) = v14;

  v17 = (void *)*((_QWORD *)v6 + 42);
  if (!v17)
  {
    v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Error creating mps kernel");
    __cxa_throw(v23, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)(*((_QWORD *)v6 + 4) + 64))
  {
    v18 = v6 + 200;
    if (v6[223] < 0)
      v18 = (_QWORD *)*v18;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v18, *(_QWORD *)v24, *(_QWORD *)&v24[8], *(_QWORD *)&v24[16], *(_QWORD *)&v24[24]);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*((id *)v6 + 42), "setLabel:", v19);

    v17 = (void *)*((_QWORD *)v6 + 42);
  }
  LODWORD(v16) = *((_DWORD *)v6 + 76);
  objc_msgSend(v17, "setAlpha:", v16, *(_QWORD *)v24, *(_QWORD *)&v24[8], *(_QWORD *)&v24[16], *(_QWORD *)&v24[24]);
  LODWORD(v20) = *((_DWORD *)v6 + 77);
  objc_msgSend(*((id *)v6 + 42), "setBeta:", v20);

  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A54DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::base_kernel *v2;
  void *v3;
  void *v4;
  void *v6;

  __cxa_free_exception(v4);

  Espresso::base_kernel::~base_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1B40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::lrn_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1B40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::lrn_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);

  Espresso::base_kernel::~base_kernel(v1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v6 = (char *)operator new(0x1D8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1C58;
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA7CE0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 57) = 0;
  *((_QWORD *)v6 + 55) = 0;
  v6[464] = 0;
  *(_OWORD *)(v6 + 392) = v12;
  *(_OWORD *)(v6 + 408) = v13;
  *(_OWORD *)(v6 + 424) = v14;
  *(_OWORD *)(v6 + 328) = v8;
  *(_OWORD *)(v6 + 344) = v9;
  *(_OWORD *)(v6 + 360) = v10;
  *(_OWORD *)(v6 + 376) = v11;
  Espresso::MPSEngine::pool_kernel::recreate_kernel((Espresso::MPSEngine::pool_kernel *)(v6 + 24));
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1918A5694(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::generic_pool_kernel *v2;
  void *v4;

  Espresso::generic_pool_kernel::~generic_pool_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_pool_kernel *v1;

  v1 = (Espresso::generic_pool_kernel *)(a1 + 24);

  Espresso::generic_pool_kernel::~generic_pool_kernel(v1);
}

__n128 ___ZN8Espresso9MPSEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int64x2_t v13;
  uint64_t v14;
  const void *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  EspressoConvolutionWeightsForMPS *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  __n128 result;
  std::runtime_error *v36;
  std::runtime_error *exception;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[24];
  __int128 v48[10];
  uint64_t v49;

  v8 = (char *)operator new(0x2A8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DC2320;
  v46 = a2[8];
  *(_OWORD *)v47 = a2[9];
  *(_QWORD *)&v47[16] = *((_QWORD *)a2 + 20);
  v42 = a2[4];
  v43 = a2[5];
  v44 = a2[6];
  v45 = a2[7];
  v38 = *a2;
  v39 = a2[1];
  v40 = a2[2];
  v41 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v8 + 328));
  *((_QWORD *)v8 + 62) = 0;
  *((_QWORD *)v8 + 63) = 0;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  *((_OWORD *)v8 + 34) = 0u;
  *((_OWORD *)v8 + 35) = 0u;
  *((_QWORD *)v8 + 72) = 0;
  *(_OWORD *)(v8 + 456) = v46;
  *(_OWORD *)(v8 + 472) = *(_OWORD *)v47;
  *(_QWORD *)(v9 + 157) = *(_QWORD *)&v47[13];
  *(_OWORD *)(v8 + 392) = v42;
  *(_OWORD *)(v8 + 408) = v43;
  *(_OWORD *)(v8 + 424) = v44;
  *(_OWORD *)(v8 + 440) = v45;
  *(_OWORD *)(v8 + 328) = v38;
  *(_OWORD *)(v8 + 344) = v39;
  *(_OWORD *)(v8 + 360) = v40;
  *(_OWORD *)(v8 + 376) = v41;
  v8[584] = 1;
  *((_QWORD *)v8 + 74) = 0;
  *((_QWORD *)v8 + 76) = 0;
  *((_QWORD *)v8 + 75) = 0;
  *((_QWORD *)v8 + 3) = &off_1E2DABD70;
  *((_QWORD *)v8 + 78) = 0;
  *((_QWORD *)v8 + 77) = 0;
  v10 = *((_DWORD *)v8 + 111);
  if (v10 >= 2 && v10 == *((_DWORD *)v8 + 93))
  {
    if (*((_DWORD *)v8 + 92) % v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "The number of depthwise output channel count is not a multiple of the input channel count.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v11 = operator new();
    Espresso::base_kernel::base_kernel(v11, a1);
    *(_QWORD *)(v11 + 288) = 0;
    *(_QWORD *)(v11 + 296) = 0;
    *(_QWORD *)(v11 + 280) = v11 + 288;
    Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v11 + 304));
    *(_QWORD *)(v11 + 472) = 0;
    *(_QWORD *)(v11 + 480) = 0;
    *(_OWORD *)(v11 + 488) = 0u;
    *(_OWORD *)(v11 + 504) = 0u;
    *(_OWORD *)(v11 + 520) = 0u;
    *(_OWORD *)(v11 + 536) = 0u;
    *(_QWORD *)(v11 + 552) = 0;
    *(_OWORD *)(v11 + 432) = v46;
    *(_OWORD *)(v11 + 448) = *(_OWORD *)v47;
    *(_QWORD *)(v12 + 157) = *(_QWORD *)&v47[13];
    *(_OWORD *)(v11 + 368) = v42;
    *(_OWORD *)(v11 + 384) = v43;
    *(_OWORD *)(v11 + 400) = v44;
    *(_OWORD *)(v11 + 416) = v45;
    *(_OWORD *)(v11 + 304) = v38;
    *(_OWORD *)(v11 + 320) = v39;
    *(_OWORD *)(v11 + 336) = v40;
    *(_OWORD *)(v11 + 352) = v41;
    *(_QWORD *)v11 = &off_1E2D801D8;
    *(_DWORD *)(v11 + 560) = a3;
    *(_BYTE *)(v11 + 676) = 0;
    *(_OWORD *)(v11 + 568) = 0u;
    *(_OWORD *)(v11 + 584) = 0u;
    *(_OWORD *)(v11 + 600) = 0u;
    *(_OWORD *)(v11 + 680) = 0u;
    *(_OWORD *)(v11 + 696) = 0u;
    *(_OWORD *)(v11 + 712) = 0u;
    v13 = vdupq_n_s64(1uLL);
    *(_QWORD *)(v11 + 728) = 1;
    *(int64x2_t *)(v11 + 736) = v13;
    *(int64x2_t *)(v11 + 752) = v13;
    *(_QWORD *)(v11 + 768) = 1;
    v14 = *((_QWORD *)v8 + 78);
    *((_QWORD *)v8 + 78) = v11;
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = (const void *)*((_QWORD *)v8 + 4);
    if (!v15
    {
      v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v36, "Espresso: wrong_context_type");
      v36->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v17 = (std::__shared_weak_count *)*((_QWORD *)v8 + 5);
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::dummy_kernel,std::allocator<Espresso::MPSEngine::dummy_kernel>,std::shared_ptr<Espresso::MPSEngine::context> &,void>(v48, (uint64_t)v16, v17);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v8 + 592), v48);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v48[0] + 1);
    if (*((_QWORD *)&v48[0] + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v48[0] + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (v17)
    {
      v23 = (unint64_t *)&v17->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v25 = operator new();
    Espresso::base_kernel::base_kernel(v25, a1);
    *(_QWORD *)(v25 + 288) = 0;
    *(_QWORD *)(v25 + 296) = 0;
    *(_QWORD *)(v25 + 280) = v25 + 288;
    Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v25 + 304));
    *(_QWORD *)(v25 + 552) = 0;
    *(_OWORD *)(v25 + 520) = 0u;
    *(_OWORD *)(v25 + 536) = 0u;
    *(_OWORD *)(v25 + 488) = 0u;
    *(_OWORD *)(v25 + 504) = 0u;
    *(_OWORD *)(v25 + 472) = 0u;
    *(_BYTE *)(v25 + 560) = 1;
    *(_QWORD *)(v25 + 568) = 0;
    *(_QWORD *)(v25 + 584) = 0;
    *(_QWORD *)(v25 + 576) = 0;
    *(_QWORD *)v25 = off_1E2DAB6F8;
    *(_OWORD *)(v25 + 432) = v46;
    *(_OWORD *)(v25 + 448) = *(_OWORD *)v47;
    *(_QWORD *)(v25 + 461) = *(_QWORD *)&v47[13];
    *(_OWORD *)(v25 + 368) = v42;
    *(_OWORD *)(v25 + 384) = v43;
    *(_OWORD *)(v25 + 400) = v44;
    *(_OWORD *)(v25 + 416) = v45;
    *(_OWORD *)(v25 + 304) = v38;
    *(_OWORD *)(v25 + 320) = v39;
    *(_OWORD *)(v25 + 336) = v40;
    *(_OWORD *)(v25 + 352) = v41;
    v26 = [EspressoConvolutionWeightsForMPS alloc];
    v27 = *(_OWORD *)(v25 + 448);
    v48[8] = *(_OWORD *)(v25 + 432);
    v48[9] = v27;
    v49 = *(_QWORD *)(v25 + 464);
    v28 = *(_OWORD *)(v25 + 384);
    v48[4] = *(_OWORD *)(v25 + 368);
    v48[5] = v28;
    v29 = *(_OWORD *)(v25 + 416);
    v48[6] = *(_OWORD *)(v25 + 400);
    v48[7] = v29;
    v30 = *(_OWORD *)(v25 + 320);
    v48[0] = *(_OWORD *)(v25 + 304);
    v48[1] = v30;
    v31 = *(_OWORD *)(v25 + 352);
    v48[2] = *(_OWORD *)(v25 + 336);
    v48[3] = v31;
    v32 = -[EspressoConvolutionWeightsForMPS initWithParams:](v26, "initWithParams:", v48);
    v33 = *(void **)(v25 + 584);
    *(_QWORD *)(v25 + 584) = v32;

    *(_QWORD *)v25 = &off_1E2DAB308;
    *(_OWORD *)(v25 + 592) = 0u;
    *(_BYTE *)(v25 + 608) = 1;
    *(_OWORD *)(v25 + 616) = 0u;
    v34 = *((_QWORD *)v8 + 78);
    *((_QWORD *)v8 + 78) = v25;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  }
  *((_QWORD *)v8 + 3) = &off_1E2DA9E20;
  *(_OWORD *)(v8 + 632) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 664) = 0u;
  result.n128_u64[0] = (unint64_t)(v8 + 24);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1918A5C00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  uint64_t v3;
  std::__shared_weak_count_vtbl *v5;
  void *v6;

  v5 = v1[26].__vftable;
  v1[26].__vftable = 0;
  if (v5)
    (*((void (**)(std::__shared_weak_count_vtbl *))v5->~__shared_weak_count + 1))(v5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[25].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::convolution_kernel_proxy>::~meta_texarray_kernel(uint64_t a1)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E2DA9E20;
  v3 = (void **)(a1 + 632);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 608);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)a1 = &off_1E2DABD70;
  v2 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 584);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 568);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)a1);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)a1 = &off_1E2DA9E20;
  v3 = (void **)(a1 + 632);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 608);
  std::vector<Espresso::layer_data>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(_QWORD *)a1 = &off_1E2DABD70;
  v2 = *(_QWORD *)(a1 + 600);
  *(_QWORD *)(a1 + 600) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 584);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 568);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel((void **)a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::convolution_kernel_proxy>::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v5;
  _BYTE *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::runtime_error *exception;
  std::__shared_weak_count *v39;

  v5 = *(const void **)(a1 + 8);
  if (!v5
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  v39 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9[113] && (!*(_BYTE *)(a1 + 560) || *(_QWORD *)(a1 + 568)))
  {
    v13 = *(_QWORD *)(a1 + 616);
    v14 = *(_QWORD *)(a1 + 608);
    if (v13 == v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a3, a4);
      v13 = *(_QWORD *)(a1 + 616);
      v14 = *(_QWORD *)(a1 + 608);
    }
    if (v13 == v14)
      Espresso::throw_exception_selector<Espresso::generic_error>("meta_texarray_kernel failed to make array of layer data.");
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(a1 + 632);
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
      v19 = *(_OWORD *)(a1 + 304);
      v20 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(v18 + 16) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(v18 + 32) = v20;
      *(_OWORD *)v18 = v19;
      v21 = *(_OWORD *)(a1 + 352);
      v22 = *(_OWORD *)(a1 + 368);
      v23 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(v18 + 80) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(v18 + 96) = v23;
      *(_OWORD *)(v18 + 48) = v21;
      *(_OWORD *)(v18 + 64) = v22;
      v24 = *(_OWORD *)(a1 + 416);
      v25 = *(_OWORD *)(a1 + 432);
      v26 = *(_OWORD *)(a1 + 448);
      *(_QWORD *)(v18 + 157) = *(_QWORD *)(a1 + 461);
      *(_OWORD *)(v18 + 128) = v25;
      *(_OWORD *)(v18 + 144) = v26;
      *(_OWORD *)(v18 + 112) = v24;
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 16))(*(_QWORD *)(a1 + 600), a2, v14 + v15, v17 + v15);
      ++v16;
      v14 = *(_QWORD *)(a1 + 608);
      v15 += 24;
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 616) - v14) >> 3));
  }
  else
  {
    v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
    v28 = *(_OWORD *)(a1 + 304);
    v29 = *(_OWORD *)(a1 + 336);
    *(_OWORD *)(v27 + 16) = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(v27 + 32) = v29;
    *(_OWORD *)v27 = v28;
    v30 = *(_OWORD *)(a1 + 352);
    v31 = *(_OWORD *)(a1 + 368);
    v32 = *(_OWORD *)(a1 + 400);
    *(_OWORD *)(v27 + 80) = *(_OWORD *)(a1 + 384);
    *(_OWORD *)(v27 + 96) = v32;
    *(_OWORD *)(v27 + 48) = v30;
    *(_OWORD *)(v27 + 64) = v31;
    v33 = *(_OWORD *)(a1 + 416);
    v34 = *(_OWORD *)(a1 + 432);
    v35 = *(_OWORD *)(a1 + 448);
    *(_QWORD *)(v27 + 157) = *(_QWORD *)(a1 + 461);
    *(_OWORD *)(v27 + 128) = v34;
    *(_OWORD *)(v27 + 144) = v35;
    *(_OWORD *)(v27 + 112) = v33;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 600) + 16))(*(_QWORD *)(a1 + 600), a2, a3, a4);
  }
  if (v39)
  {
    v36 = (unint64_t *)&v39->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1918A60B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::convolution_kernel_proxy>::on_resized(uint64_t a1, const void ***a2, const void ***a3)
{
  const void *v4;
  _BYTE *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  std::runtime_error *exception;
  std::__shared_weak_count *v27;
  void **v28;

  v4 = *(const void **)(a1 + 8);
  if (!v4
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v7[113])
  {
    if (*(_BYTE *)(a1 + 560) && !*(_QWORD *)(a1 + 568))
    {
      v11 = *(void ***)(a1 + 608);
      v12 = *(void ***)(a1 + 616);
      while (v12 != v11)
      {
        v12 -= 3;
        v28 = v12;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v28);
      }
      *(_QWORD *)(a1 + 616) = v11;
      v13 = *(void ***)(a1 + 632);
      v14 = *(void ***)(a1 + 640);
      while (v14 != v13)
      {
        v14 -= 3;
        v28 = v14;
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v28);
      }
      *(_QWORD *)(a1 + 640) = v13;
    }
    else
    {
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a2, (_QWORD *)(a1 + 608));
      Espresso::MPSEngine::resize_meta_layer_data(*(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), a3, (_QWORD *)(a1 + 632));
    }
  }
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 600) + 384))(*(_QWORD *)(a1 + 600));
  v16 = *(_OWORD *)(a1 + 304);
  v17 = *(_OWORD *)(a1 + 336);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(a1 + 320);
  *(_OWORD *)(v15 + 32) = v17;
  *(_OWORD *)v15 = v16;
  v18 = *(_OWORD *)(a1 + 352);
  v19 = *(_OWORD *)(a1 + 368);
  v20 = *(_OWORD *)(a1 + 400);
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(a1 + 384);
  *(_OWORD *)(v15 + 96) = v20;
  *(_OWORD *)(v15 + 48) = v18;
  *(_OWORD *)(v15 + 64) = v19;
  v21 = *(_OWORD *)(a1 + 416);
  v22 = *(_OWORD *)(a1 + 432);
  v23 = *(_OWORD *)(a1 + 448);
  *(_QWORD *)(v15 + 157) = *(_QWORD *)(a1 + 461);
  *(_OWORD *)(v15 + 128) = v22;
  *(_OWORD *)(v15 + 144) = v23;
  *(_OWORD *)(v15 + 112) = v21;
  (*(void (**)(_QWORD, const void ***, const void ***))(**(_QWORD **)(a1 + 600) + 80))(*(_QWORD *)(a1 + 600), a2, a3);
  if (v27)
  {
    v24 = (unint64_t *)&v27->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
}

void sub_1918A62E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::convolution_kernel_proxy>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::convolution_kernel_proxy>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2320;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::meta_texarray_kernel<Espresso::MPSEngine::convolution_kernel_proxy>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

Espresso::MPSEngine::batch *Espresso::MPSEngine::batch::batch(Espresso::MPSEngine::batch *this, id *a2)
{
  Espresso::batch_metal *v3;
  void *v4;

  v3 = Espresso::batch_metal::batch_metal(this, a2);
  *(_QWORD *)v3 = &off_1E2DAC6C8;
  *((_DWORD *)v3 + 65) = 0;
  objc_msgSend(*((id *)v3 + 19), "endEncoding");
  v4 = (void *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;

  *((_DWORD *)this + 34) = 50005;
  return this;
}

void sub_1918A63A8(_Unwind_Exception *a1)
{
  id *v1;

  Espresso::batch_metal::~batch_metal(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::context::context<objc_object  {objcproto15MTLCommandQueue}* {__strong}>(uint64_t a1, _QWORD *a2, void *a3)
{
  id v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  __int128 v24;
  __int128 v25;

  v5 = a3;
  Espresso::context_metal::context_metal(a1, a2, v5);
  *(_QWORD *)a1 = &off_1E2DAC780;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 44) = 1;
  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso14wisdom_managerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v25);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 24, &v25);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  objc_msgSend(*(id *)(a1 + 160), "setKernelPrefix:", CFSTR("TARR_"));
  if ((**(unsigned int (***)(_QWORD))*a2)(*a2) != 50002)
  {
    v21 = 50002;
    Espresso::abstract_engine_factory::shared(&v25);
    Espresso::abstract_engine_factory::engine_for_platform(v25, &v21, &v22);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
    if (*((_QWORD *)&v25 + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = operator new(0x110uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = &off_1E2DB99F8;
    v13 = Espresso::MPSEngine::context::context<objc_object  {objcproto15MTLCommandQueue}* {__strong}>(v12 + 3, &v22, v5);
    v12[3] = &off_1E2D72C40;
    *((_WORD *)v12 + 132) = 1;
    *((_BYTE *)v12 + 68) = 1;
    *((_BYTE *)v12 + 80) = 1;
    *(_QWORD *)&v24 = v13;
    *((_QWORD *)&v24 + 1) = v12;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 224, &v24);
    v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(*(_QWORD *)(a1 + 224) + 240) = 0;
  }

  return a1;
}

void sub_1918A65CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  id *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *v20;

  std::__shared_weak_count::~__shared_weak_count(v18);
  operator delete(v20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  Espresso::context_metal::~context_metal(v16);

  _Unwind_Resume(a1);
}

void Espresso::cf_branch_kernel_cpu::~cf_branch_kernel_cpu(void **this)
{
  Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_branch_kernel_cpu::__launch(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 *v16;

  v4 = *a2;
  v5 = *(_QWORD **)(*a2 + 64);
  if (!v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  v6 = *(_QWORD **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("missing condition blob");
  v14 = 0;
  v15 = 0;
  (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 24) + 928;
  if (fabsf(**(float **)(v14 + 24)) <= 0.000001)
  {
    v16 = (__int128 *)(a1 + 304);
    v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, a1 + 304, (uint64_t)&std::piecewise_construct, &v16);
  }
  else
  {
    v16 = (__int128 *)(a1 + 280);
    v10 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, a1 + 280, (uint64_t)&std::piecewise_construct, &v16);
  }
  *(_QWORD *)(*(_QWORD *)(v4 + 64) + 120) = v10[5];
  v11 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1918A679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::cf_jump_kernel_cpu::~cf_jump_kernel_cpu(Espresso::cf_jump_kernel_cpu *this)
{
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::cf_jump_kernel_cpu::__launch(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(*(_QWORD *)a2 + 64);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  v2[15] = *(_QWORD *)(result + 320);
  return result;
}

void `non-virtual thunk to'Espresso::cf_jump_kernel_cpu::~cf_jump_kernel_cpu(Espresso::cf_jump_kernel_cpu *this)
{
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel((Espresso::cf_jump_kernel_cpu *)((char *)this - 288));
}

{
  Espresso::generic_cf_jump_kernel::~generic_cf_jump_kernel((Espresso::cf_jump_kernel_cpu *)((char *)this - 288));
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_call_kernel_cpu::~cf_call_kernel_cpu(Espresso::cf_call_kernel_cpu *this)
{
  Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_call_kernel_cpu::__launch(uint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  __int128 v40;
  unsigned __int8 *v41;

  v5 = (uint64_t *)(*a2 + 64);
  v4 = (uint64_t *)*v5;
  if (!*v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  v6 = *v4;
  if (!*v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  v8 = (_QWORD *)v4[1];
  if (v8)
  {
    v10 = v8[1] - *v8;
    v11 = *a3;
    v12 = a3[1];
    if (v10 != v12 - *a3)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Wrong number of returned blobs");
    if (v12 != v11)
    {
      v13 = 0;
      do
      {
        v14 = *(_OWORD *)(**(_QWORD **)(*v5 + 8) + 16 * v13);
        v40 = v14;
        if (*((_QWORD *)&v14 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
          v11 = *a3;
        }
        Espresso::blobcpy(a2, (uint64_t *)(v11 + 16 * v13), (uint64_t *)&v40);
        v17 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          v18 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        ++v13;
        v11 = *a3;
      }
      while (v13 < (a3[1] - *a3) >> 4);
      v4 = (uint64_t *)*v5;
    }
    v20 = (std::__shared_weak_count *)v4[2];
    v4[1] = 0;
    v4[2] = 0;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    v24 = a1 + 280;
    v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(*v4, a1 + 280);
    v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v25 + 648) - *(_QWORD *)(v25 + 640)) >> 3);
    v27 = a4[1];
    v28 = v27 - *a4;
    if (v26 != v28 >> 4)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,unsigned long &,unsigned long>("Wrong number of arguments: %zu != %zu", v26, v28 >> 4);
    if (v27 != *a4)
    {
      v29 = v25;
      v30 = 0;
      v31 = v25 + 136;
      do
      {
        v41 = (unsigned __int8 *)(*(_QWORD *)(v29 + 640) + 24 * v30);
        v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, v41, (__int128 **)&v41);
        v33 = *((_QWORD *)v32 + 5);
        v34 = *((_QWORD *)v32 + 6);
        *(_QWORD *)&v40 = v33;
        *((_QWORD *)&v40 + 1) = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (!v33)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null blob found");
        Espresso::blobcpy(a2, (uint64_t *)&v40, (uint64_t *)(*a4 + 16 * v30));
        v37 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
        if (*((_QWORD *)&v40 + 1))
        {
          v38 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        ++v30;
      }
      while (v30 < (uint64_t)(a4[1] - *a4) >> 4);
    }
    Espresso::interpreter_t::net_call(v6, v5, v24);
  }
}

void sub_1918A6B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::cf_call_kernel_cpu::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  NSObject *v21;
  __int128 v22;
  void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t **v33;
  char *v34;
  __int128 v35;
  const void *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t buf[16];
  _BYTE v44[24];
  void *__p[2];
  uint64_t v46;
  __int128 v47;

  *((_QWORD *)&v47 + 1) = *MEMORY[0x1E0C80C00];
  v5 = *(std::__shared_weak_count **)(a1 + 312);
  if (!v5)
    goto LABEL_20;
  v5 = std::__shared_weak_count::lock(v5);
  if (!v5)
    goto LABEL_20;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 304);
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (v9)
  {
    if (v7)
      goto LABEL_7;
LABEL_20:
    Espresso::espresso_os_log_subsystem((Espresso *)v5, a2);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_190DAF000, v21, OS_LOG_TYPE_DEBUG, "Interpreter not set", buf, 2u);
    }

    v46 = 0;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)&v44[8] = 0u;
    *(_QWORD *)&v22 = 0x100000001;
    *((_QWORD *)&v22 + 1) = 0x100000001;
    *(_OWORD *)buf = v22;
    *(_QWORD *)v44 = 0xFFFFFFFF00000001;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
    v39 = a3;
    LOBYTE(v40) = 0;
    v23 = operator new(0x40uLL);
    *a3 = (uint64_t)v23;
    a3[1] = (uint64_t)v23;
    a3[2] = (uint64_t)v23 + 64;
    a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)buf, &v47, (uint64_t)v23);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    return;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    goto LABEL_20;
LABEL_7:
  v10 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 312));
  *(_QWORD *)buf = *(_QWORD *)(a1 + 304);
  *(_QWORD *)&buf[8] = v10;
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 32))(*(_QWORD *)buf, a1 + 280);
  v12 = (unint64_t *)&v10->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  v14 = *(uint64_t **)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 40) - (_QWORD)v14;
  if (v15)
  {
    v16 = 0;
    v17 = v15 >> 4;
    if (v17 <= 1)
      v18 = 1;
    else
      v18 = v17;
    while (1)
    {
      v19 = *v14;
      v20 = *(const void **)(*v14 + 64);
      if (v20)
      {
        {
          break;
        }
      }
      ++v16;
      v14 += 2;
      if (v18 == v16)
        goto LABEL_32;
    }
    *(_QWORD *)buf = v16;
    v24 = *(std::__shared_weak_count **)(v19 + 72);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      do
        v27 = __ldaxr(v25);
      while (__stlxr(v27 - 1, v25));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v42 = buf;
    v28 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v11 + 56, (unint64_t *)buf, (uint64_t)&std::piecewise_construct, (uint64_t **)&v42);
    if (&v39 != v28 + 3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v39, (std::string *)v28[3], (std::string *)v28[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[4] - v28[3]) >> 3));
  }
LABEL_32:
  v29 = v39;
  v30 = v40;
  if (v39 == v40)
  {
    v30 = v39;
    if (&v39 != (uint64_t **)(v11 + 664))
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v39, *(std::string **)(v11 + 664), *(std::string **)(v11 + 672), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v11 + 672) - *(_QWORD *)(v11 + 664)) >> 3));
      v29 = v39;
      v30 = v40;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<Espresso::layer_shape>::reserve(a3, 0xAAAAAAAAAAAAAAABLL * (v30 - v29));
  v31 = v39;
  v32 = v40;
  if (v39 != v40)
  {
    v33 = (uint64_t **)(v11 + 184);
    do
    {
      v42 = (uint8_t *)v31;
      v34 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, v31, (__int128 **)&v42);
      v35 = *(_OWORD *)(v34 + 72);
      *(_OWORD *)buf = *(_OWORD *)(v34 + 56);
      *(_OWORD *)v44 = v35;
      v36 = (const void *)*((_QWORD *)v34 + 12);
      *(_QWORD *)&v44[16] = *((_QWORD *)v34 + 11);
      __p[0] = 0;
      __p[1] = 0;
      v46 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(__p, v36, *((_QWORD *)v34 + 13), (uint64_t)(*((_QWORD *)v34 + 13) - (_QWORD)v36) >> 2);
      v37 = a3[1];
      if (v37 >= a3[2])
      {
        v38 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, (__int128 *)buf);
      }
      else
      {
        std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, (__int128 *)buf);
        v38 = v37 + 64;
      }
      a3[1] = v38;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v31 += 3;
    }
    while (v31 != v32);
  }
  *(_QWORD *)buf = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1918A6F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  a15 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void Espresso::cf_return_kernel_cpu::~cf_return_kernel_cpu(Espresso::cf_return_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_return_kernel_cpu::__launch(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4 = *a2;
  v5 = *(_QWORD **)(*a2 + 64);
  if (!v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  v7 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8 = v7;
  v7->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  v7->__shared_weak_owners_ = 0;
  v7[1].__vftable = 0;
  v10 = (uint64_t)&v7[1];
  v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8488;
  v7[1].__shared_owners_ = 0;
  v7[1].__shared_weak_owners_ = 0;
  if (&v7[1] != (std::__shared_weak_count *)a4)
  {
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>((uint64_t)&v7[1], *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 4);
    v5 = *(_QWORD **)(v4 + 64);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v5 + 1, v10, (uint64_t)v8);
  v11 = *(_QWORD *)(v4 + 64);
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_WORD *)(v11 + 128) = 0;
  *(_BYTE *)(*(_QWORD *)(v4 + 64) + 129) = 1;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1918A7130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::get_shape_kernel_cpu::~get_shape_kernel_cpu(Espresso::get_shape_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::get_shape_kernel_cpu::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  if (*(_DWORD *)(*a3 + 8) > 4u)
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
  else
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a3);
}

void Espresso::alloc_kernel_cpu::~alloc_kernel_cpu(Espresso::alloc_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::alloc_kernel_cpu::__launch(uint64_t a1, uint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::vector<int>::size_type v12;
  unint64_t v13;
  uint64_t i;
  unint64_t v15;
  std::vector<int>::pointer begin;
  uint64_t v17;
  unint64_t v18;
  std::vector<int>::pointer v19;
  int64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  vDSP_Length v33;
  unint64_t *v34;
  unint64_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t **v42;
  char *v43;
  __int128 v44;
  _QWORD *v45;
  unint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  std::__shared_weak_count *v63;
  _OWORD __A[2];
  uint64_t v65;
  char *v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  std::vector<int> v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  int32x4_t v73;
  _BYTE v74[24];
  void *v75[3];

  if (*(_BYTE *)(a1 + 284))
  {
    v5 = *a2;
    v6 = *(_QWORD **)(*a2 + 64);
    if (!v6)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
    if (!*v6)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
    memset(v75, 0, sizeof(v75));
    *(_OWORD *)&v74[8] = 0u;
    v73 = (int32x4_t)xmmword_191A8AA80;
    *(_QWORD *)v74 = 0xFFFFFFFF00000001;
    v8 = *a4;
    v9 = **a4;
    if (v9 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9))
    {
      v10 = *(_QWORD *)(*v8 + 160);
      v58 = *(std::__shared_weak_count **)(*v8 + 168);
      v71 = v10;
      v72 = v58;
      if (v58)
      {
        p_shared_owners = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(p_shared_owners);
        while (__stxr(v60 + 1, p_shared_owners));
      }
    }
    else
    {
      v10 = 0;
      v71 = 0;
      v72 = 0;
    }
    if (*(_DWORD *)(a1 + 280))
    {
      v11 = 0;
      v12 = *(int *)(v10 + 8);
      v13 = v12;
      do
      {
        v13 *= *(int *)(v10 + 12 + v11);
        v11 += 4;
      }
      while (v11 != 12);
      if (v13 >= 6)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("alloc_kernel_cpu: invalid rank");
      for (i = 0; i != 12; i += 4)
        v12 *= *(int *)(v10 + 12 + i);
      std::vector<int>::vector(&v70, v12);
      v15 = 0;
      begin = v70.__begin_;
      while (1)
      {
        v17 = 0;
        v18 = *(int *)(v10 + 8);
        do
        {
          v18 *= *(int *)(v10 + 12 + v17);
          v17 += 4;
        }
        while (v17 != 12);
        if (v18 <= v15)
          break;
        begin[v15] = (int)(float)(*(float *)(*(_QWORD *)(v10 + 24) + 4 * v15) + 0.5);
        ++v15;
      }
      v68[0] = 0;
      v68[1] = 0;
      v69 = 0;
      v19 = v70.__begin_;
      v20 = (char *)v70.__end_ - (char *)v70.__begin_;
      if (v70.__end_ != v70.__begin_)
      {
        v21 = v20 >> 2;
        if ((unint64_t)(v20 >> 2) <= 1)
          v21 = 1;
        v22 = v68;
        do
        {
          v23 = *v19++;
          *v22++ = v23;
          --v21;
        }
        while (v21);
      }
      HIDWORD(v69) = (unint64_t)v20 >> 2;
      Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v68, 0, (uint64_t)__A);
      v73 = (int32x4_t)__A[0];
      *(_OWORD *)v74 = __A[1];
      v24 = v66;
      *(_QWORD *)&v74[16] = v65;
      v75[0] = v66;
      v25 = v67;
      *(_OWORD *)&v75[1] = v67;
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        v61 = v67;
        operator delete(v70.__begin_);
        v25 = v61;
      }
      v26 = v25;
    }
    else
    {
      v26 = 0;
      v24 = 0;
      v36 = *(float32x4_t **)(v10 + 24);
      v37 = *v36;
      *(_DWORD *)v74 = (int)(float)(v36[1].f32[0] + 0.5);
      *(_DWORD *)&v74[4] = 5;
      v38.i64[0] = 0x3F0000003F000000;
      v38.i64[1] = 0x3F0000003F000000;
      v73 = vcvtq_s32_f32(vaddq_f32(v37, v38));
    }
    v39 = *(_QWORD *)(v5 + 64);
    v40 = *(_QWORD *)(v39 + 24) + 96;
    *(_QWORD *)&__A[0] = v39 + 32;
    v41 = (_QWORD *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v40, (unint64_t *)(v39 + 32), (uint64_t)&std::piecewise_construct, (uint64_t **)__A)[3];
    v42 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(v5 + 64) + 24) + 184);
    *(_QWORD *)&__A[0] = v41;
    v43 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v42, v41, (__int128 **)__A);
    v44 = *(_OWORD *)v74;
    *(int32x4_t *)(v43 + 56) = v73;
    *(_OWORD *)(v43 + 72) = v44;
    *((_QWORD *)v43 + 11) = *(_QWORD *)&v74[16];
    if (v43 + 56 != (char *)&v73)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v43 + 96, v24, v26, (v26 - (uint64_t)v24) >> 2);
    v45 = operator new(0x98uLL);
    v45[1] = 0;
    v46 = v45 + 1;
    v45[2] = 0;
    *v45 = &off_1E2DBE998;
    *((_OWORD *)v45 + 4) = 0u;
    *((_OWORD *)v45 + 5) = 0u;
    *((_OWORD *)v45 + 2) = 0u;
    *((_OWORD *)v45 + 3) = 0u;
    *((_OWORD *)v45 + 6) = 0u;
    *((_OWORD *)v45 + 7) = 0u;
    *((_OWORD *)v45 + 8) = 0u;
    v45[17] = 0;
    v45[18] = 0;
    *((_DWORD *)v45 + 12) = 1065353216;
    v45[7] = 0x1FFFFFFFFLL;
    v45[12] = 0;
    v45[13] = 0;
    v45[8] = 0;
    v45[9] = 0;
    *((_BYTE *)v45 + 88) = 0;
    v45[10] = 0;
    v45[3] = &off_1E2DA0BF0;
    v45[15] = 0;
    v45[16] = 0;
    *((_BYTE *)v45 + 144) = 0;
    *(_QWORD *)&__A[0] = v45 + 3;
    *((_QWORD *)&__A[0] + 1) = v45;
    *((_BYTE *)v45 + 144) = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 126);
    v47 = **a3;
    v62 = (char *)(v45 + 3);
    v63 = (std::__shared_weak_count *)v45;
    do
      v48 = __ldxr(v46);
    while (__stxr(v48 + 1, v46));
    (*(void (**)(uint64_t, int32x4_t *, char **))(*(_QWORD *)v47 + 16))(v47, &v73, &v62);
    v49 = v63;
    if (v63)
    {
      v50 = (unint64_t *)&v63->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = (std::__shared_weak_count *)*((_QWORD *)&__A[0] + 1);
    if (*((_QWORD *)&__A[0] + 1))
    {
      v53 = (unint64_t *)(*((_QWORD *)&__A[0] + 1) + 8);
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v72;
    if (v72)
    {
      v56 = (unint64_t *)&v72->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    if (v75[0])
    {
      v75[1] = v75[0];
      operator delete(v75[0]);
    }
  }
  else
  {
    v27 = *a3;
    (*(void (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3);
    v28 = *(_QWORD *)(*v27 + 160);
    v29 = *(std::__shared_weak_count **)(*v27 + 168);
    v73.i64[0] = v28;
    v73.i64[1] = (uint64_t)v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v32 = 0;
    LODWORD(__A[0]) = 0;
    v33 = *(int *)(v28 + 8);
    do
    {
      v33 *= *(int *)(v28 + 12 + v32);
      v32 += 4;
    }
    while (v32 != 12);
    vDSP_vfill((const float *)__A, *(float **)(v28 + 24), 1, v33);
    if (v29)
    {
      v34 = (unint64_t *)&v29->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
}

void sub_1918A76A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 128);
  _Unwind_Resume(a1);
}

void Espresso::load_global_kernel_cpu::~load_global_kernel_cpu(Espresso::load_global_kernel_cpu *this)
{
  Espresso::generic_load_global_kernel::~generic_load_global_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::load_global_kernel_cpu::__launch(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v9;
  Espresso::blob_container_array *v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t value_high;
  int v28;
  int v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  std::vector<int>::size_type v37;
  int *end;
  std::vector<int>::pointer begin;
  unint64_t v40;
  float *v41;
  float v42;
  BOOL v43;
  unint64_t *v44;
  unint64_t v45;
  float *v46;
  unint64_t *v47;
  unint64_t v48;
  const Espresso::layer_nd_shape *v49;
  uint64_t *v50;
  BOOL v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  Espresso::blob_container_array *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  __int128 v76;
  std::vector<int> v77;
  void *v78;
  void *v79;
  char v80[20];
  int v81;
  void *__p;
  void *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;

  v4 = *(_QWORD **)(*a2 + 64);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  if (*a3 == a3[1])
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("load_global called with no output blobs");
  v9 = (_QWORD *)(a1 + 280);
  Espresso::net::get_global(&v72, v4[3], (unsigned __int8 *)(a1 + 280));
  v10 = v72;
  if (!v72)
  {
    if (*(char *)(a1 + 303) < 0)
      v9 = (_QWORD *)*v9;
    *(_QWORD *)v80 = v9;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("load_global: undefined global %s", v80);
  }
  if (!*(_BYTE *)(a1 + 304))
  {
    Espresso::blobcpy(a2, *a3, (uint64_t *)&v72);
    goto LABEL_10;
  }
  v11 = *a3;
  v12 = **a3;
  if (!v12 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12))
  {
    v70 = 0;
    v71 = 0;
    goto LABEL_10;
  }
  v17 = *(_QWORD *)(*v11 + 160);
  v16 = *(std::__shared_weak_count **)(*v11 + 168);
  v70 = v17;
  v71 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
  }
  if (!v17)
  {
LABEL_22:
    if (!v16)
      goto LABEL_10;
LABEL_23:
    v21 = (unint64_t *)&v16->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      v23 = v16;
LABEL_27:
      std::__shared_weak_count::__release_weak(v23);
      goto LABEL_10;
    }
    goto LABEL_10;
  }
  v20 = *(unsigned int *)(a1 + 332);
  if ((_DWORD)v20 == 1)
  {
    **(float **)(v17 + 24) = (float)(unint64_t)Espresso::blob_container_array::size(v10);
    goto LABEL_22;
  }
  v24 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
  {
    if ((_DWORD)v20 == 5)
    {
      if (!*v24 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v24 + 32))(*v24))
      {
        v76 = 0uLL;
        goto LABEL_33;
      }
      v30 = *v24;
      v32 = *(_QWORD *)(*v24 + 160);
      v31 = *(std::__shared_weak_count **)(v30 + 168);
      *(_QWORD *)&v76 = v32;
      *((_QWORD *)&v76 + 1) = v31;
      if (v31)
      {
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 1, v33));
      }
      if (!v32)
      {
        if (v31)
        {
          v44 = (unint64_t *)&v31->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
LABEL_33:
        v16 = v71;
        if (!v71)
          goto LABEL_10;
        goto LABEL_23;
      }
      Espresso::abstract_blob_container::shape(v80, **(_QWORD **)a4);
      v35 = v81;
      if (__p)
      {
        v83 = __p;
        operator delete(__p);
      }
      if (v35)
      {
        v36 = 0;
        v37 = *(int *)(v32 + 8);
        do
        {
          v37 *= *(int *)(v32 + 12 + v36);
          v36 += 4;
        }
        while (v36 != 12);
        std::vector<int>::vector(&v77, v37);
        begin = v77.__begin_;
        end = v77.__end_;
        if (v77.__end_ != v77.__begin_)
        {
          v40 = v77.__end_ - v77.__begin_;
          v41 = *(float **)(v32 + 24);
          if (v40 <= 1)
            v40 = 1;
          do
          {
            v42 = *v41++;
            *begin++ = (int)v42;
            --v40;
          }
          while (v40);
          Espresso::abstract_blob_container::shape(v80, **a3);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v84, (const Espresso::layer_shape *)v80, 0);
          Espresso::blob_container_array::gather(v10, (uint64_t)&v70, (int *)&v84, &v77);
          if (__p)
          {
            v83 = __p;
            operator delete(__p);
          }
          end = v77.__begin_;
        }
        if (!end)
          goto LABEL_74;
        v77.__end_ = end;
      }
      else
      {
        v46 = *(float **)(v17 + 24);
        Espresso::abstract_blob_container::shape(v80, **a3);
        LODWORD(v77.__begin_) = (int)**(float **)(v32 + 24);
        Espresso::blob_container_array::get(v10, v46, (const Espresso::layer_shape *)v80, (const int *)&v77);
        end = (int *)__p;
        if (!__p)
        {
LABEL_74:
          if (v31)
          {
            v47 = (unint64_t *)&v31->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          goto LABEL_108;
        }
        v83 = __p;
      }
      operator delete(end);
      goto LABEL_74;
    }
    v69 = "array_op = %d with inputs";
LABEL_121:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>(v69, v20);
  }
  if ((_DWORD)v20 != 7)
  {
    if ((_DWORD)v20 != 3)
    {
      v69 = "array_op = %d with no inputs";
      goto LABEL_121;
    }
    v25 = *a3;
    v26 = Espresso::blob_container_array::size(v10);
    if (!v26)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("pop_back on empty blob array");
    Espresso::blob_container_array::element_shape((Espresso::blob_container_array *)&v77, (uint64_t)v10);
    Espresso::abstract_blob_container::shape(v80, *v25);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v84, (const Espresso::layer_shape *)v80, 0);
    if (HIDWORD(v86) == HIDWORD(v77.__end_cap_.__value_))
    {
      if (!HIDWORD(v77.__end_cap_.__value_))
      {
        v43 = 1;
        goto LABEL_81;
      }
      if (LODWORD(v77.__begin_) == (_DWORD)v84)
      {
        value_high = 0;
        while (SHIDWORD(v77.__end_cap_.__value_) - 1 != value_high)
        {
          v28 = *((_DWORD *)&v77.__begin_ + value_high + 1);
          v29 = *((_DWORD *)&v84 + ++value_high);
          if (v28 != v29)
            goto LABEL_80;
        }
        value_high = SHIDWORD(v77.__end_cap_.__value_);
LABEL_80:
        v43 = value_high >= SHIDWORD(v77.__end_cap_.__value_);
        goto LABEL_81;
      }
    }
    v43 = 0;
LABEL_81:
    if (__p)
    {
      v83 = __p;
      operator delete(__p);
    }
    if (!v43)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("shape of returned blob is different from that of the blob array");
    v49 = (const Espresso::layer_nd_shape *)(v26 - 1);
    v50 = (uint64_t *)(*((_QWORD *)v10 + 21) + 16 * (_QWORD)v49);
    Espresso::abstract_blob_container::shape(v80, *v50);
    Espresso::abstract_blob_container::shape((char *)&v77, *v25);
    v51 = Espresso::layer_shape::operator==((uint64_t)&v77, (uint64_t)v80);
    if (v78)
    {
      v79 = v78;
      operator delete(v78);
    }
    if (!v51)
    {
      v52 = *v25;
      v84 = 0;
      v85 = 0;
      (*(void (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v52 + 16))(v52, v80, &v84);
      v53 = v85;
      if (v85)
      {
        v54 = (unint64_t *)&v85->__shared_owners_;
        do
          v55 = __ldaxr(v54);
        while (__stlxr(v55 - 1, v54));
        if (!v55)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
    }
    v56 = *v25;
    v57 = *(_OWORD *)v50;
    v76 = v57;
    if (*((_QWORD *)&v57 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
    v74 = 0;
    v75 = 0;
    (*(void (**)(uint64_t, _QWORD *, __int128 *, uint64_t *))(*(_QWORD *)v56 + 144))(v56, a2, &v76, &v74);
    v60 = v75;
    if (v75)
    {
      v61 = (unint64_t *)&v75->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
    if (*((_QWORD *)&v76 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    *((_QWORD *)v10 + 22) = std::shared_ptr<void>::~shared_ptr[abi:ne180100](*((_QWORD *)v10 + 22) - 16);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v77, (const Espresso::layer_shape *)v80, 0);
    Espresso::blob_container_array::set_array_shape(v10, v49, (const Espresso::layer_nd_shape *)&v77);
    goto LABEL_106;
  }
  Espresso::abstract_blob_container::shape(v80, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v77, (const Espresso::layer_shape *)v80, 0);
  v84 = 0;
  v85 = 0;
  v86 = 0;
  Espresso::blob_container_array::gather(v10, (uint64_t)&v70, (int *)&v77, &v84);
LABEL_106:
  if (__p)
  {
    v83 = __p;
    operator delete(__p);
  }
LABEL_108:
  v66 = v71;
  if (v71)
  {
    v67 = (unint64_t *)&v71->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      v23 = v66;
      goto LABEL_27;
    }
  }
LABEL_10:
  v13 = v73;
  if (v73)
  {
    v14 = (unint64_t *)&v73->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1918A7E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::load_global_kernel_cpu::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  __int128 v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int32 v21;
  int32x2_t v22;
  int32x4_t v23;
  int v24;
  char *v25;
  std::vector<int>::pointer v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  void *v30;
  std::vector<int>::pointer v31;
  unint64_t v32;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v35;
  unint64_t v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  std::vector<int>::pointer v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  _QWORD v47[2];
  int v48;
  int v49;
  std::vector<int> v50;
  _QWORD *v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void *lpsrc;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE __p[24];
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  __int128 v64;

  *((_QWORD *)&v64 + 1) = *MEMORY[0x1E0C80C00];
  v58 = 0;
  v59 = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 344);
  if (v5)
  {
    v5 = std::__shared_weak_count::lock(v5);
    v7 = v5;
    v59 = v5;
    if (v5)
    {
      v8 = *(_QWORD *)(a1 + 336);
      v58 = v8;
      if (v8)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "__main__");
        v9 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 32))(v8, __p);
        Espresso::net::get_global(&lpsrc, v9, (unsigned __int8 *)(a1 + 280));
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (lpsrc)
        {
          if (*(_BYTE *)(a1 + 304))
          {
            v10 = *(unsigned int *)(a1 + 332);
            if ((_DWORD)v10 == 1)
            {
              v53 = 0;
              v54 = 0;
              v55 = 0;
              Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v53, 0, (uint64_t)__p);
              *a3 = 0;
              a3[1] = 0;
              a3[2] = 0;
              v51 = a3;
              v52 = 0;
              v11 = (char *)operator new(0x40uLL);
              *a3 = v11;
              a3[1] = v11;
              a3[2] = v11 + 64;
              v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)__p, &v64, (uint64_t)v11);
            }
            else
            {
              v21 = *(_DWORD *)(a1 + 316);
              v22 = *(int32x2_t *)(a1 + 320);
              v23.i32[0] = vdup_lane_s32(v22, 1).u32[0];
              v23.i32[1] = v21;
              v23.u64[1] = (unint64_t)vrev64_s32(*(int32x2_t *)(a1 + 308));
              if ((vmaxv_u16((uint16x4_t)vmovn_s32(vcltzq_s32(v23))) & 1) != 0 || v22.i32[0] < 0)
              {
                switch((_DWORD)v10)
                {
                  case 3:
                    Espresso::blob_container_array::element_shape((Espresso::blob_container_array *)&v53, (uint64_t)v30);
                    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v53, 0, (uint64_t)__p);
                    std::vector<Espresso::layer_shape>::vector[abi:ne180100](a3, (__int128 *)__p, 1uLL);
                    break;
                  case 7:
                    Espresso::abstract_blob_container::shape(__p, (uint64_t)v30);
                    std::vector<Espresso::layer_shape>::vector[abi:ne180100](a3, (__int128 *)__p, 1uLL);
                    break;
                  case 5:
                    if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
                      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("input is needed for load_global with array_op == GATHER");
                    Espresso::abstract_blob_container::shape(__p, (uint64_t)v30);
                    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v53, (const Espresso::layer_shape *)__p, 0);
                    if ((_QWORD)v62)
                    {
                      *((_QWORD *)&v62 + 1) = v62;
                      operator delete((void *)v62);
                    }
                    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v51, *(const Espresso::layer_shape **)a2, 0);
                    Espresso::layer_nd_shape::shape_vector(&v50, (uint64_t)&v51);
                    if (HIDWORD(v55) <= 1)
                    {
                      end = v50.__end_;
                    }
                    else
                    {
                      v31 = v50.__end_;
                      v32 = 1;
                      do
                      {
                        if (v31 >= v50.__end_cap_.__value_)
                        {
                          begin = v50.__begin_;
                          v35 = v31 - v50.__begin_;
                          v36 = v35 + 1;
                          if ((unint64_t)(v35 + 1) >> 62)
                            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                          v37 = (char *)v50.__end_cap_.__value_ - (char *)v50.__begin_;
                          if (((char *)v50.__end_cap_.__value_ - (char *)v50.__begin_) >> 1 > v36)
                            v36 = v37 >> 1;
                          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                            v38 = 0x3FFFFFFFFFFFFFFFLL;
                          else
                            v38 = v36;
                          if (v38)
                          {
                            v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v38);
                            begin = v50.__begin_;
                            v31 = v50.__end_;
                          }
                          else
                          {
                            v39 = 0;
                          }
                          v40 = (int *)(v38 + 4 * v35);
                          *v40 = *((_DWORD *)&v53 + v32);
                          end = v40 + 1;
                          while (v31 != begin)
                          {
                            v41 = *--v31;
                            *--v40 = v41;
                          }
                          v50.__begin_ = v40;
                          v50.__end_ = end;
                          v50.__end_cap_.__value_ = (int *)(v38 + 4 * v39);
                          if (begin)
                            operator delete(begin);
                        }
                        else
                        {
                          *v31 = *((_DWORD *)&v53 + v32);
                          end = v31 + 1;
                        }
                        v50.__end_ = end;
                        ++v32;
                        v31 = end;
                      }
                      while (v32 < SHIDWORD(v55));
                    }
                    v47[0] = 0;
                    v47[1] = 0;
                    v48 = 0;
                    v42 = v50.__begin_;
                    v43 = (char *)end - (char *)v50.__begin_;
                    if (end != v50.__begin_)
                    {
                      v44 = v43 >> 2;
                      if ((unint64_t)(v43 >> 2) <= 1)
                        v44 = 1;
                      v45 = v47;
                      do
                      {
                        v46 = *v42++;
                        *v45++ = v46;
                        --v44;
                      }
                      while (v44);
                    }
                    v49 = (unint64_t)v43 >> 2;
                    Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v47, 0, (uint64_t)__p);
                    std::vector<Espresso::layer_shape>::vector[abi:ne180100](a3, (__int128 *)__p, 1uLL);
                    if ((_QWORD)v62)
                    {
                      *((_QWORD *)&v62 + 1) = v62;
                      operator delete((void *)v62);
                    }
                    v26 = v50.__begin_;
                    if (v50.__begin_)
                    {
                      v50.__end_ = v50.__begin_;
                      goto LABEL_28;
                    }
LABEL_29:
                    v27 = v57;
                    if (v57)
                    {
                      p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                      do
                        v29 = __ldaxr(p_shared_owners);
                      while (__stlxr(v29 - 1, p_shared_owners));
                      if (!v29)
                      {
                        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
                        std::__shared_weak_count::__release_weak(v27);
                      }
                    }
                    v7 = v59;
                    if (!v59)
                      return;
LABEL_16:
                    v16 = (unint64_t *)&v7->__shared_owners_;
                    do
                      v17 = __ldaxr(v16);
                    while (__stlxr(v17 - 1, v16));
                    if (!v17)
                    {
                      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
                      std::__shared_weak_count::__release_weak(v7);
                    }
                    return;
                  default:
                    Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("array_op == %d", v10);
                }
LABEL_26:
                v26 = (std::vector<int>::pointer)v62;
                if ((_QWORD)v62)
                {
                  *((_QWORD *)&v62 + 1) = v62;
LABEL_28:
                  operator delete(v26);
                  goto LABEL_29;
                }
                goto LABEL_29;
              }
              v24 = *(_DWORD *)(a1 + 328);
              *(_QWORD *)__p = *(_QWORD *)(a1 + 308);
              *(int32x2_t *)&__p[12] = v22;
              *(_DWORD *)&__p[8] = v21;
              *(_DWORD *)&__p[20] = v24;
              v61 = 0u;
              v62 = 0u;
              v63 = 0;
              a3[1] = 0;
              a3[2] = 0;
              *a3 = 0;
              v53 = a3;
              LOBYTE(v54) = 0;
              v25 = (char *)operator new(0x40uLL);
              *a3 = v25;
              a3[1] = v25;
              a3[2] = v25 + 64;
              v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)__p, &v64, (uint64_t)v25);
            }
          }
          else
          {
            Espresso::abstract_blob_container::shape(__p, (uint64_t)lpsrc);
            *a3 = 0;
            a3[1] = 0;
            a3[2] = 0;
            v53 = a3;
            LOBYTE(v54) = 0;
            v20 = (char *)operator new(0x40uLL);
            *a3 = v20;
            a3[1] = v20;
            a3[2] = v20 + 64;
            v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)__p, &v64, (uint64_t)v20);
          }
        }
        else
        {
          v63 = 0;
          v62 = 0u;
          v61 = 0u;
          *(_QWORD *)&v18 = 0x100000001;
          *((_QWORD *)&v18 + 1) = 0x100000001;
          *(_OWORD *)__p = v18;
          *(_QWORD *)&__p[16] = 0xFFFFFFFF00000001;
          a3[1] = 0;
          a3[2] = 0;
          *a3 = 0;
          v53 = a3;
          LOBYTE(v54) = 0;
          v19 = (char *)operator new(0x40uLL);
          *a3 = v19;
          a3[1] = v19;
          a3[2] = v19 + 64;
          v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)__p, &v64, (uint64_t)v19);
        }
        a3[1] = v12;
        goto LABEL_26;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  Espresso::espresso_os_log_subsystem((Espresso *)v5, (const char *)a2);
  v13 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__p = 0;
    _os_log_debug_impl(&dword_190DAF000, v13, OS_LOG_TYPE_DEBUG, "Interpreter not set", __p, 2u);
  }

  v63 = 0;
  v62 = 0u;
  v61 = 0u;
  *(_QWORD *)&v14 = 0x100000001;
  *((_QWORD *)&v14 + 1) = 0x100000001;
  *(_OWORD *)__p = v14;
  *(_QWORD *)&__p[16] = 0xFFFFFFFF00000001;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v53 = a3;
  LOBYTE(v54) = 0;
  v15 = (char *)operator new(0x40uLL);
  *a3 = v15;
  a3[1] = v15;
  a3[2] = v15 + 64;
  a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::layer_shape>,Espresso::layer_shape const*,Espresso::layer_shape const*,Espresso::layer_shape*>((uint64_t)(a3 + 2), (__int128 *)__p, &v64, (uint64_t)v15);
  if ((_QWORD)v62)
  {
    *((_QWORD *)&v62 + 1) = v62;
    operator delete((void *)v62);
  }
  if (v7)
    goto LABEL_16;
}

void sub_1918A854C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p)
  {
    a34 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a12)
    operator delete(a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t Espresso::load_global_kernel_cpu::has_dynamic_top_shape(Espresso::load_global_kernel_cpu *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v18 = 0;
  v19 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 43);
  if (!v2)
    goto LABEL_13;
  v19 = std::__shared_weak_count::lock(v2);
  if (!v19)
    goto LABEL_13;
  v3 = *((_QWORD *)this + 42);
  v18 = v3;
  if (!v3)
    goto LABEL_13;
  std::string::basic_string[abi:ne180100]<0>(__p, "__main__");
  v4 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  Espresso::net::get_global(&v16, v4, (unsigned __int8 *)this + 280);
  if (v15 < 0)
    operator delete(__p[0]);
  v6 = v16;
  v5 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_11;
LABEL_13:
      v9 = 1;
      goto LABEL_14;
    }
  }
  if (!v6)
    goto LABEL_13;
LABEL_11:
  v9 = 0;
LABEL_14:
  v10 = v19;
  if (v19)
  {
    v11 = (unint64_t *)&v19->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v9;
}

void sub_1918A8780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 32);
  _Unwind_Resume(a1);
}

void Espresso::store_global_kernel_cpu::~store_global_kernel_cpu(void **this)
{
  Espresso::generic_store_global_kernel::~generic_store_global_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::store_global_kernel_cpu::__launch(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned __int8 *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  int v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  Espresso::blob_container_array *v29;
  uint64_t *v30;
  uint64_t *v31;
  Espresso::blob_container_array *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  std::vector<int>::size_type v75;
  int *end;
  std::vector<int>::pointer begin;
  unint64_t v78;
  float *v79;
  float v80;
  BOOL v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  char *v125;
  __int128 v126;
  int64x2_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  void *lpsrc[2];
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  std::vector<int> v140;
  uint64_t v141;
  _QWORD *v142;
  void *__p;
  void *v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  __int128 v147;
  int v148;
  _QWORD v149[2];
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;

  v4 = *a2;
  v5 = *(_QWORD **)(*a2 + 64);
  if (!v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  v9 = (unsigned __int8 *)(a1 + 280);
  if (*(_BYTE *)(a1 + 304))
  {
    Espresso::net::get_global(lpsrc, v5[3], v9);
    v10 = lpsrc[0];
    if (!lpsrc[0])
    {
      v11 = *(unsigned int *)(a1 + 332);
      if ((_DWORD)v11)
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("array_op = %d with no existing global", v11);
      v12 = *(_QWORD *)(v4 + 64);
      v13 = *(_QWORD **)(v12 + 24);
      v14 = *(_QWORD *)(v13[4] + 16 * *(_QWORD *)(v12 + 32));
      v15 = (char *)operator new(0xD8uLL);
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = off_1E2D8F108;
      *(_QWORD *)v15 = &off_1E2DBBFD0;
      v16 = *(_DWORD *)(v14 + 12);
      *((_DWORD *)v15 + 13) = -1;
      *((_QWORD *)v15 + 11) = 0;
      *(_OWORD *)(v15 + 72) = 0u;
      *(_OWORD *)(v15 + 56) = 0u;
      *((_QWORD *)v15 + 12) = v13[2];
      v17 = v13[3];
      *((_QWORD *)v15 + 13) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      *((_QWORD *)v15 + 14) = 0;
      *((_QWORD *)v15 + 15) = 0;
      *((_DWORD *)v15 + 32) = 0;
      *((_DWORD *)v15 + 34) = 1065353216;
      *(_QWORD *)(v15 + 140) = 0xFFFFFFFF00000000;
      *((_DWORD *)v15 + 37) = 1;
      *((_QWORD *)v15 + 4) = 0;
      *((_QWORD *)v15 + 5) = 0;
      *((_DWORD *)v15 + 12) = 0;
      *(_OWORD *)(v15 + 152) = 0uLL;
      *(_OWORD *)(v15 + 168) = 0uLL;
      *((_QWORD *)v15 + 3) = &off_1E2D85F28;
      *((_DWORD *)v15 + 46) = v16;
      *((_QWORD *)v15 + 25) = 0;
      *((_QWORD *)v15 + 26) = 0;
      *((_QWORD *)v15 + 24) = 0;
      *(_QWORD *)&v20 = v15 + 24;
      *((_QWORD *)&v20 + 1) = v15;
      v21 = (std::__shared_weak_count *)lpsrc[1];
      *(_OWORD *)lpsrc = v20;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldaxr(p_shared_owners);
        while (__stlxr(v23 - 1, p_shared_owners));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = *(_OWORD *)(a1 + 308);
      v25 = *(_QWORD *)(a1 + 324);
      v155 = 0;
      v154 = 0u;
      v153 = 0u;
      v151 = v24;
      v152 = v25;
      v133 = 0;
      v134 = 0;
      (*(void (**)(void *, __int128 *, uint64_t *))(*(_QWORD *)lpsrc[0] + 16))(lpsrc[0], &v151, &v133);
      v26 = v134;
      if (v134)
      {
        v27 = (unint64_t *)&v134->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      Espresso::net::set_global(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 24), (__int128 *)v9, (uint64_t *)lpsrc);
      if ((_QWORD)v154)
      {
        *((_QWORD *)&v154 + 1) = v154;
        operator delete((void *)v154);
      }
      v10 = lpsrc[0];
      if (!lpsrc[0])
        goto LABEL_184;
    }
    if (!v29)
LABEL_184:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("global is not a blob_array");
    v31 = *a4;
    v30 = a4[1];
    if (*a4 == v30)
    {
      v33 = *(unsigned int *)(a1 + 332);
      if ((_DWORD)v33)
      {
        v51 = "array_op = %d with no input";
        goto LABEL_191;
      }
      goto LABEL_69;
    }
    v32 = v29;
    if ((char *)v30 - (char *)v31 == 16)
    {
      v33 = *(unsigned int *)(a1 + 332);
      if ((_DWORD)v33 != 6)
      {
        if ((_DWORD)v33 == 2)
        {
          v34 = Espresso::blob_container_array::size(v29);
          Espresso::abstract_blob_container::shape((char *)&v151, *v31);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v149, (const Espresso::layer_shape *)&v151, 0);
          if (!v34)
          {
LABEL_131:
            v92 = *v31 + 72;
            LODWORD(v140.__begin_) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v31 + 24))(*v31);
            LODWORD(v145) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v31 + 32))(*v31);
            Espresso::abstract_blob_container::make(v92, (int *)&v140, (unsigned int *)&v145, &v147);
            v145 = 0;
            v146 = 0;
            (*(void (**)(_QWORD, __int128 *, uint64_t *))(*(_QWORD *)v147 + 16))(v147, &v151, &v145);
            v93 = v146;
            if (v146)
            {
              v94 = (unint64_t *)&v146->__shared_owners_;
              do
                v95 = __ldaxr(v94);
              while (__stlxr(v95 - 1, v94));
              if (!v95)
              {
                ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                std::__shared_weak_count::__release_weak(v93);
              }
            }
            v96 = v147;
            v97 = v31[1];
            v138 = *v31;
            v139 = (std::__shared_weak_count *)v97;
            if (v97)
            {
              v98 = (unint64_t *)(v97 + 8);
              do
                v99 = __ldxr(v98);
              while (__stxr(v99 + 1, v98));
            }
            v136 = 0;
            v137 = 0;
            (*(void (**)(uint64_t, _QWORD *, uint64_t *, uint64_t *))(*(_QWORD *)v96 + 144))(v96, a2, &v138, &v136);
            v100 = v137;
            if (v137)
            {
              v101 = (unint64_t *)&v137->__shared_owners_;
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
            v103 = v139;
            if (v139)
            {
              v104 = (unint64_t *)&v139->__shared_owners_;
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
            v106 = *((_QWORD *)v32 + 23);
            v107 = (_QWORD *)*((_QWORD *)v32 + 22);
            if ((unint64_t)v107 >= v106)
            {
              v112 = *((_QWORD *)v32 + 21);
              v113 = ((uint64_t)v107 - v112) >> 4;
              v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 60)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v115 = v106 - v112;
              if (v115 >> 3 > v114)
                v114 = v115 >> 3;
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF0)
                v116 = 0xFFFFFFFFFFFFFFFLL;
              else
                v116 = v114;
              v142 = (_QWORD *)((char *)v32 + 184);
              v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v116);
              v119 = &v117[16 * v113];
              v120 = *((_QWORD *)&v147 + 1);
              *(_OWORD *)v119 = v147;
              if (v120)
              {
                v121 = (unint64_t *)(v120 + 8);
                do
                  v122 = __ldxr(v121);
                while (__stxr(v122 + 1, v121));
              }
              v124 = (_QWORD *)*((_QWORD *)v32 + 21);
              v123 = (_QWORD *)*((_QWORD *)v32 + 22);
              if (v123 == v124)
              {
                v127 = vdupq_n_s64((unint64_t)v123);
                v125 = &v117[16 * v113];
              }
              else
              {
                v125 = &v117[16 * v113];
                do
                {
                  v126 = *((_OWORD *)v123 - 1);
                  v123 -= 2;
                  *((_OWORD *)v125 - 1) = v126;
                  v125 -= 16;
                  *v123 = 0;
                  v123[1] = 0;
                }
                while (v123 != v124);
                v127 = *(int64x2_t *)((char *)v32 + 168);
              }
              v111 = v119 + 16;
              *((_QWORD *)v32 + 21) = v125;
              *((_QWORD *)v32 + 22) = v119 + 16;
              *(int64x2_t *)&v140.__end_ = v127;
              v128 = *((_QWORD *)v32 + 23);
              *((_QWORD *)v32 + 23) = &v117[16 * v118];
              v141 = v128;
              v140.__begin_ = (std::vector<int>::pointer)v127.i64[0];
              std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v140);
            }
            else
            {
              *v107 = v147;
              v108 = *((_QWORD *)&v147 + 1);
              v107[1] = *((_QWORD *)&v147 + 1);
              if (v108)
              {
                v109 = (unint64_t *)(v108 + 8);
                do
                  v110 = __ldxr(v109);
                while (__stxr(v110 + 1, v109));
              }
              v111 = v107 + 2;
            }
            *((_QWORD *)v32 + 22) = v111;
            Espresso::blob_container_array::set_array_shape(v32, (const Espresso::layer_nd_shape *)(v34 + 1), (const Espresso::layer_nd_shape *)v149);
            v129 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
            if (*((_QWORD *)&v147 + 1))
            {
              v130 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
              do
                v131 = __ldaxr(v130);
              while (__stlxr(v131 - 1, v130));
              if (!v131)
              {
                ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                std::__shared_weak_count::__release_weak(v129);
              }
            }
            if ((_QWORD)v154)
            {
              *((_QWORD *)&v154 + 1) = v154;
              operator delete((void *)v154);
            }
            goto LABEL_176;
          }
          Espresso::abstract_blob_container::shape((char *)&v140, (uint64_t)v32);
          Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v145, (const Espresso::layer_shape *)&v140, 0);
          get_value_shape((const Espresso::layer_nd_shape *)&v147, (uint64_t)&v145);
          if (HIDWORD(v150) == v148)
          {
            if (!v148)
            {
              v81 = 1;
              goto LABEL_128;
            }
            if ((_DWORD)v147 == LODWORD(v149[0]))
            {
              v35 = 0;
              while (v148 - 1 != v35)
              {
                v36 = *((_DWORD *)&v147 + v35 + 1);
                v37 = *((_DWORD *)v149 + ++v35);
                if (v36 != v37)
                  goto LABEL_127;
              }
              v35 = v148;
LABEL_127:
              v81 = v35 >= v148;
              goto LABEL_128;
            }
          }
          v81 = 0;
LABEL_128:
          if (__p)
          {
            v144 = __p;
            operator delete(__p);
          }
          if (!v81)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("blob_array requires all elements to be of same shape");
          goto LABEL_131;
        }
        v51 = "array_op = %d with single input";
LABEL_191:
        Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>(v51, v33);
      }
      if (*v31 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)*v31 + 32))(*v31))
      {
        v64 = *(std::__shared_weak_count **)(*v31 + 168);
        *(_QWORD *)&v147 = *(_QWORD *)(*v31 + 160);
        *((_QWORD *)&v147 + 1) = v64;
        if (v64)
        {
          v82 = (unint64_t *)&v64->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
      }
      else
      {
        v64 = 0;
        v147 = 0uLL;
      }
      Espresso::abstract_blob_container::shape((char *)&v151, **a4);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v140, (const Espresso::layer_shape *)&v151, 0);
      v149[0] = 0;
      v149[1] = 0;
      v150 = 0;
      Espresso::blob_container_array::scatter((uint64_t)v32, (uint64_t)a2, (uint64_t)&v147, (int *)&v140, v149);
      if ((_QWORD)v154)
      {
        *((_QWORD *)&v154 + 1) = v154;
        operator delete((void *)v154);
      }
      if (!v64)
        goto LABEL_176;
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (v66)
        goto LABEL_176;
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      v67 = v64;
LABEL_125:
      std::__shared_weak_count::__release_weak(v67);
LABEL_176:
      v48 = (std::__shared_weak_count *)lpsrc[1];
      if (!lpsrc[1])
        return;
      v132 = (unint64_t *)((char *)lpsrc[1] + 8);
      do
        v50 = __ldaxr(v132);
      while (__stlxr(v50 - 1, v132));
      goto LABEL_179;
    }
    if (!*v31 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v31 + 32))(*v31))
    {
      v147 = 0uLL;
    }
    else
    {
      v52 = *v31;
      v54 = *(_QWORD *)(*v31 + 160);
      v53 = *(_QWORD *)(v52 + 168);
      *(_QWORD *)&v147 = v54;
      *((_QWORD *)&v147 + 1) = v53;
      if (v53)
      {
        v55 = (unint64_t *)(v53 + 8);
        do
          v56 = __ldxr(v55);
        while (__stxr(v56 + 1, v55));
      }
      if (v54)
      {
        v57 = *(unsigned int *)(a1 + 332);
        if ((_DWORD)v57 != 4)
          Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("array_op = %d with 2 inputs", v57);
        v58 = *a4;
        v59 = (*a4)[2];
        if (!v59 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v59 + 32))(v59))
        {
          v145 = 0;
          v146 = 0;
LABEL_64:
          v60 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
          if (*((_QWORD *)&v147 + 1))
          {
            v61 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
LABEL_69:
          v48 = (std::__shared_weak_count *)lpsrc[1];
          if (!lpsrc[1])
            return;
          v63 = (unint64_t *)((char *)lpsrc[1] + 8);
          do
            v50 = __ldaxr(v63);
          while (__stlxr(v50 - 1, v63));
          goto LABEL_179;
        }
        v68 = v58[2];
        v70 = *(_QWORD *)(v68 + 160);
        v69 = *(std::__shared_weak_count **)(v68 + 168);
        v145 = v70;
        v146 = v69;
        if (v69)
        {
          v71 = (unint64_t *)&v69->__shared_owners_;
          do
            v72 = __ldxr(v71);
          while (__stxr(v72 + 1, v71));
        }
        if (!v70)
        {
          if (v69)
          {
            v84 = (unint64_t *)&v69->__shared_owners_;
            do
              v85 = __ldaxr(v84);
            while (__stlxr(v85 - 1, v84));
            if (!v85)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          goto LABEL_64;
        }
        Espresso::abstract_blob_container::shape((char *)&v151, (*a4)[2]);
        v73 = HIDWORD(v152);
        if ((_QWORD)v154)
        {
          *((_QWORD *)&v154 + 1) = v154;
          operator delete((void *)v154);
        }
        if (v73)
        {
          v74 = 0;
          v75 = *(int *)(v70 + 8);
          do
          {
            v75 *= *(int *)(v70 + 12 + v74);
            v74 += 4;
          }
          while (v74 != 12);
          std::vector<int>::vector(&v140, v75);
          begin = v140.__begin_;
          end = v140.__end_;
          if (v140.__end_ != v140.__begin_)
          {
            v78 = v140.__end_ - v140.__begin_;
            v79 = *(float **)(v70 + 24);
            if (v78 <= 1)
              v78 = 1;
            do
            {
              v80 = *v79++;
              *begin++ = llroundf(v80);
              --v78;
            }
            while (v78);
            Espresso::abstract_blob_container::shape((char *)&v151, **a4);
            Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v149, (const Espresso::layer_shape *)&v151, 0);
            Espresso::blob_container_array::scatter((uint64_t)v32, (uint64_t)a2, (uint64_t)&v147, (int *)v149, &v140);
            if ((_QWORD)v154)
            {
              *((_QWORD *)&v154 + 1) = v154;
              operator delete((void *)v154);
            }
            end = v140.__begin_;
          }
          if (!end)
            goto LABEL_115;
          v140.__end_ = end;
        }
        else
        {
          v86 = *(_QWORD *)(v54 + 24);
          Espresso::abstract_blob_container::shape((char *)&v151, **a4);
          LODWORD(v140.__begin_) = llroundf(**(float **)(v70 + 24));
          Espresso::blob_container_array::put((uint64_t)v32, (uint64_t)a2, v86, (Espresso::layer_shape *)&v151, (int *)&v140);
          end = (int *)v154;
          if (!(_QWORD)v154)
            goto LABEL_115;
          *((_QWORD *)&v154 + 1) = v154;
        }
        operator delete(end);
LABEL_115:
        if (v69)
        {
          v87 = (unint64_t *)&v69->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v89 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
        if (!*((_QWORD *)&v147 + 1))
          goto LABEL_176;
        v90 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
        do
          v91 = __ldaxr(v90);
        while (__stlxr(v91 - 1, v90));
        if (v91)
          goto LABEL_176;
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        v67 = v89;
        goto LABEL_125;
      }
    }
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("cannot fetch input");
  }
  if (*a4 == a4[1])
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("store_global called with no input blobs");
  Espresso::net::get_global(&v151, v5[3], v9);
  if (!(_QWORD)v151)
  {
    v38 = (_QWORD *)**a4;
    v39 = *(_QWORD *)(v38[9] + 8);
    v40 = (*(uint64_t (**)(_QWORD *))(*v38 + 32))(v38);
    (*(void (**)(std::vector<int> *__return_ptr, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v39 + 24))(&v140, v39, v38 + 9, v40);
    v41 = *(_OWORD *)&v140.__begin_;
    v140.__begin_ = 0;
    v140.__end_ = 0;
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
    v151 = v41;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    v45 = (std::__shared_weak_count *)v140.__end_;
    if (v140.__end_)
    {
      v46 = (unint64_t *)(v140.__end_ + 2);
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    Espresso::net::set_global(*(_QWORD *)(*(_QWORD *)(v4 + 64) + 24), (__int128 *)v9, (uint64_t *)&v151);
  }
  Espresso::blobcpy(a2, (uint64_t *)&v151, *a4);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
LABEL_179:
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1918A9368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 104);
  if (v31)
  {
    *(_QWORD *)(v29 - 96) = v31;
    operator delete(v31);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::blob_container_array>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBFD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob_container_array>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBFD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob_container_array>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::cf_if_kernel_cpu::~cf_if_kernel_cpu(Espresso::cf_if_kernel_cpu *this)
{
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_if_kernel_cpu::__launch(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v4;
  _QWORD *v5;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v13;
  float v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v4 = *a2;
  v5 = *(_QWORD **)(*a2 + 64);
  if (!v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  if (a4[1] == *a4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("missing condition blob");
  if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)**a4 + 24))(**a4)
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)**a4 + 24))(**a4) != 100)
  {
    v25 = 0;
    v26 = 0;
    (*(void (**)(_QWORD, _QWORD *, uint64_t *))(*(_QWORD *)**a4 + 40))(**a4, a2, &v25);
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    v13 = v26;
    v14 = **(float **)(v25 + 24);
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    _S0 = fabsf(v14);
LABEL_20:
    if (_S0 > 0.000001)
      return;
    goto LABEL_21;
  }
  v10 = (_QWORD *)**a4;
  v11 = v10[20];
  if (v11)
  {
    _S0 = **(float **)(v11 + 24);
    goto LABEL_20;
  }
  v17 = v10[22];
  if (v17)
  {
    _H0 = **(_WORD **)(v17 + 24);
    __asm { FCVT            S0, H0 }
    goto LABEL_20;
  }
  v23 = v10[24];
  if (v23)
  {
    LOBYTE(v9) = **(_BYTE **)(v23 + 24);
    _S0 = (float)v9;
    goto LABEL_20;
  }
  v24 = v10[26];
  if (v24)
  {
    _S0 = (float)**(int **)(v24 + 24);
    goto LABEL_20;
  }
LABEL_21:
  *(_QWORD *)(*(_QWORD *)(v4 + 64) + 120) = *(_QWORD *)(a1 + 320);
}

void sub_1918A96D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::cf_if_kernel_cpu::~cf_if_kernel_cpu(Espresso::cf_if_kernel_cpu *this)
{
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel((Espresso::cf_if_kernel_cpu *)((char *)this - 288));
}

{
  Espresso::generic_cf_if_kernel::~generic_cf_if_kernel((Espresso::cf_if_kernel_cpu *)((char *)this - 288));
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_loop_kernel_cpu::~cf_loop_kernel_cpu(Espresso::cf_loop_kernel_cpu *this)
{
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_loop_kernel_cpu::__launch(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(*(_QWORD *)a2 + 64);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
}

void `non-virtual thunk to'Espresso::cf_loop_kernel_cpu::~cf_loop_kernel_cpu(Espresso::cf_loop_kernel_cpu *this)
{
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel((Espresso::cf_loop_kernel_cpu *)((char *)this - 288));
}

{
  Espresso::generic_cf_loop_kernel::~generic_cf_loop_kernel((Espresso::cf_loop_kernel_cpu *)((char *)this - 288));
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_for_kernel_cpu::~cf_for_kernel_cpu(Espresso::cf_for_kernel_cpu *this)
{
  *(_QWORD *)this = &off_1E2D81848;
  *((_QWORD *)this + 36) = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D81848;
  *((_QWORD *)this + 36) = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 360);
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_for_kernel_cpu::__launch(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  int v22;
  int v23;
  float v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _OWORD *v35;
  uint64_t v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _OWORD *v42;
  __int128 v43;
  int64x2_t v44;
  _OWORD *v45;
  _OWORD *v46;
  uint64_t *v47;
  _OWORD *v48;
  uint64_t v49;
  __int128 v50;
  unint64_t *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _OWORD *v55;
  __int128 v56;
  int64x2_t v57;
  _OWORD *v58;
  _OWORD *v59;
  int64x2_t v61;
  _OWORD *v62;
  int64x2_t v63;
  _OWORD *v64;
  int64x2_t *v65;
  int64x2_t v66;
  _OWORD *v67;
  _QWORD *v68;
  void *__p;
  void *v70;

  v4 = *(_QWORD **)(*(_QWORD *)a2 + 64);
  if (!v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v4)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  v8 = (a3[1] - *a3) >> 4;
  v9 = (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4;
  if (*(_DWORD *)(a1 + 280))
    ++v9;
  if (v8 != v9)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("cf_for_kernel_cpu: Invalid number of top blobs: %zu", v8);
  Espresso::abstract_blob_container::shape((char *)&v65, **(_QWORD **)a4);
  v10 = v66.i32[3];
  if (v66.i32[2] == 1)
    v11 = 4;
  else
    v11 = 5;
  if (v66.i32[3] == -1)
    v10 = v11;
  v12 = v10 - 1;
  if (__p)
  {
    v70 = __p;
    operator delete(__p);
  }
  switch(v12)
  {
    case 0:
      v13 = (_DWORD *)(**(_QWORD **)a4 + 8);
      goto LABEL_19;
    case 1:
      v13 = (_DWORD *)(**(_QWORD **)a4 + 12);
      goto LABEL_19;
    case 2:
      v13 = (_DWORD *)(**(_QWORD **)a4 + 16);
      goto LABEL_19;
    case 3:
      v13 = (_DWORD *)(**(_QWORD **)a4 + 20);
      goto LABEL_19;
    case 4:
      v13 = (_DWORD *)(**(_QWORD **)a4 + 24);
LABEL_19:
      *(_DWORD *)(a1 + 384) = *v13 / *(_DWORD *)(a1 + 284);
      break;
    default:
      break;
  }
  v14 = (_QWORD *)(a1 + 360);
  v15 = *(_QWORD *)(a1 + 360);
  if (!v15)
  {
    v16 = (char *)operator new(0x148uLL);
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *(_QWORD *)v16 = &off_1E2DB9C60;
    v17 = Espresso::base_kernel::base_kernel((uint64_t)(v16 + 24), (_QWORD *)(a1 + 8));
    *((_QWORD *)v16 + 3) = &off_1E2D735A8;
    *((_DWORD *)v16 + 76) = v12;
    *(_OWORD *)(v16 + 308) = xmmword_191A82A80;
    *((_DWORD *)v16 + 81) = 1;
    *(_QWORD *)&v18 = v17;
    *((_QWORD *)&v18 + 1) = v16;
    v19 = *(std::__shared_weak_count **)(a1 + 368);
    *(_OWORD *)v14 = v18;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v15 = *v14;
  }
  v22 = *(_DWORD *)(a1 + 284) * *(_DWORD *)(a1 + 380);
  *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 320))(v15) + 4) = v22;
  v23 = *(_DWORD *)(a1 + 284) + *(_DWORD *)(a1 + 284) * *(_DWORD *)(a1 + 380);
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 360) + 320))(*(_QWORD *)(a1 + 360)) + 8) = v23;
  if (*(_DWORD *)(a1 + 280))
  {
    v24 = (float)*(int *)(a1 + 380);
    v25 = *a3;
    (*(void (**)(_QWORD))(**(_QWORD **)*a3 + 32))(*(_QWORD *)*a3);
    v26 = *(_QWORD *)(*(_QWORD *)v25 + 160);
    v27 = *(std::__shared_weak_count **)(*(_QWORD *)v25 + 168);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      **(float **)(v26 + 24) = v24;
      v30 = (unint64_t *)&v27->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    else
    {
      **(float **)(v26 + 24) = v24;
    }
    v32 = 1;
  }
  else
  {
    v32 = 0;
  }
  if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
  {
    v33 = 0;
    do
    {
      v63 = 0uLL;
      v64 = 0;
      v34 = *a3;
      v68 = &v64;
      v35 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(1uLL);
      v37 = *(_OWORD *)&v34[16 * v33 + 16 * v32];
      *v35 = v37;
      if (*((_QWORD *)&v37 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      v40 = (_QWORD *)v63.i64[1];
      v41 = (_QWORD *)v63.i64[0];
      if (v63.i64[1] == v63.i64[0])
      {
        v44 = vdupq_n_s64(v63.u64[1]);
        v42 = v35;
      }
      else
      {
        v42 = v35;
        do
        {
          v43 = *((_OWORD *)v40 - 1);
          v40 -= 2;
          *--v42 = v43;
          *v40 = 0;
          v40[1] = 0;
        }
        while (v40 != v41);
        v44 = v63;
      }
      v45 = v35 + 1;
      v63.i64[0] = (uint64_t)v42;
      v63.i64[1] = (uint64_t)(v35 + 1);
      v66 = v44;
      v46 = v64;
      v64 = &v35[v36];
      v67 = v46;
      v65 = (int64x2_t *)v44.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v65);
      v47 = *(uint64_t **)a4;
      v63.i64[1] = (uint64_t)v45;
      v61 = 0uLL;
      v62 = 0;
      v68 = &v62;
      v48 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(1uLL);
      v50 = *(_OWORD *)&v47[2 * v33];
      *v48 = v50;
      if (*((_QWORD *)&v50 + 1))
      {
        v51 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      v53 = (_QWORD *)v61.i64[1];
      v54 = (_QWORD *)v61.i64[0];
      if (v61.i64[1] == v61.i64[0])
      {
        v57 = vdupq_n_s64(v61.u64[1]);
        v55 = v48;
      }
      else
      {
        v55 = v48;
        do
        {
          v56 = *((_OWORD *)v53 - 1);
          v53 -= 2;
          *--v55 = v56;
          *v53 = 0;
          v53[1] = 0;
        }
        while (v53 != v54);
        v57 = v61;
      }
      v58 = v48 + 1;
      v61.i64[0] = (uint64_t)v55;
      v61.i64[1] = (uint64_t)(v48 + 1);
      v66 = v57;
      v59 = v62;
      v62 = &v48[v49];
      v67 = v59;
      v65 = (int64x2_t *)v57.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v65);
      v61.i64[1] = (uint64_t)v58;
      (*(void (**)(_QWORD, uint64_t, int64x2_t *, int64x2_t *))(*(_QWORD *)*v14 + 16))(*v14, a2, &v63, &v61);
      v65 = &v61;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      v65 = &v63;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
      ++v33;
    }
    while (v33 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  }
}

void sub_1918A9CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void Espresso::cf_for_kernel_cpu::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t *v34;
  void *__p;
  void *v36;
  uint64_t v37;
  _QWORD v38[5];
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*(_DWORD *)(a1 + 280))
  {
    v34 = a3 + 2;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(1uLL);
    *(_QWORD *)&v32 = v6;
    *((_QWORD *)&v32 + 1) = v6;
    *((_QWORD *)&v33 + 1) = &v6[64 * v7];
    *(_QWORD *)&v8 = 0x100000001;
    *((_QWORD *)&v8 + 1) = 0x100000001;
    *(_OWORD *)v6 = v8;
    *((_QWORD *)v6 + 2) = 0xFFFFFFFF00000001;
    *((_QWORD *)v6 + 7) = 0;
    LOBYTE(v8) = 0;
    BYTE4(v8) = 0;
    BYTE8(v8) = 0;
    BYTE12(v8) = 0;
    *(_OWORD *)(v6 + 40) = v8;
    *(_OWORD *)(v6 + 24) = v8;
    *(_QWORD *)&v33 = v6 + 64;
    std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, &v32);
    v9 = a3[1];
    std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)&v32);
    a3[1] = v9;
  }
  v10 = *a2;
  v11 = a2[1];
  if (*a2 != v11)
  {
    LODWORD(v12) = -1;
    do
    {
      v13 = *v10;
      v14 = v10[1];
      v34 = (uint64_t *)*((_QWORD *)v10 + 4);
      v32 = v13;
      v33 = v14;
      v36 = 0;
      v37 = 0;
      __p = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *((const void **)v10 + 5), *((_QWORD *)v10 + 6), (uint64_t)(*((_QWORD *)v10 + 6) - *((_QWORD *)v10 + 5)) >> 2);
      v15 = DWORD1(v33);
      if ((int)v12 >= 1)
      {
        if ((_DWORD)v33 == 1)
          v16 = 4;
        else
          v16 = 5;
        if (DWORD1(v33) != -1)
          v16 = DWORD1(v33);
        if ((_DWORD)v12 != v16 - 1)
          Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>("the axis to be iterate on must agree for all input blobs");
      }
      v39 = v32;
      v40 = v33;
      if ((_DWORD)v33 == 1)
        v17 = 4;
      else
        v17 = 5;
      if (DWORD1(v33) == -1)
        v15 = v17;
      v12 = v15 - 1;
      v18 = *((unsigned int *)&v39 + v12);
      v19 = *(unsigned int *)(a1 + 284);
      if ((int)v18 % (int)v19)
        Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>("slice_step %d doesn't devide corresponding dim %d\n", v19, v18);
      *((_DWORD *)&v39 + v12) = v19;
      v20 = v40;
      v21 = a3[1];
      v22 = a3[2];
      if (v21 >= v22)
      {
        v31 = v39;
        v24 = (uint64_t)(v21 - *a3) >> 6;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v26 = v22 - *a3;
        if (v26 >> 5 > v25)
          v25 = v26 >> 5;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFC0)
          v27 = 0x3FFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        v38[4] = a3 + 2;
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v27);
        v29 = &v28[64 * v24];
        v38[0] = v28;
        v38[1] = v29;
        v38[3] = &v28[64 * v30];
        *(_OWORD *)v29 = v31;
        *((_DWORD *)v29 + 4) = v20;
        *((_DWORD *)v29 + 5) = -1;
        *(_OWORD *)(v29 + 24) = 0u;
        *(_OWORD *)(v29 + 40) = 0u;
        *((_QWORD *)v29 + 7) = 0;
        v38[2] = v29 + 64;
        std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, v38);
        v23 = a3[1];
        std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v38);
      }
      else
      {
        *(_OWORD *)v21 = v39;
        *(_DWORD *)(v21 + 16) = v20;
        *(_DWORD *)(v21 + 20) = -1;
        v23 = v21 + 64;
        *(_OWORD *)(v21 + 24) = 0u;
        *(_OWORD *)(v21 + 40) = 0u;
        *(_QWORD *)(v21 + 56) = 0;
        a3[1] = v21 + 64;
      }
      a3[1] = v23;
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
      v10 += 4;
    }
    while (v10 != v11);
  }
}

void sub_1918A9FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v20 - 128) = v19;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 128));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::cf_for_kernel_cpu::~cf_for_kernel_cpu(Espresso::cf_for_kernel_cpu *this)
{
  Espresso::generic_cf_for_kernel *v1;

  v1 = (Espresso::cf_for_kernel_cpu *)((char *)this - 288);
  *((_QWORD *)this - 36) = &off_1E2D81848;
  *(_QWORD *)this = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(v1);
}

{
  Espresso::generic_cf_for_kernel *v1;

  v1 = (Espresso::cf_for_kernel_cpu *)((char *)this - 288);
  *((_QWORD *)this - 36) = &off_1E2D81848;
  *(_QWORD *)this = &unk_1E2D819A0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  Espresso::generic_cf_for_kernel::~generic_cf_for_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_else_kernel_cpu::~cf_else_kernel_cpu(Espresso::cf_else_kernel_cpu *this)
{
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::cf_else_kernel_cpu::__launch(uint64_t result, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)(*(_QWORD *)a2 + 64);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  v2[15] = *(_QWORD *)(result + 320);
  return result;
}

void `non-virtual thunk to'Espresso::cf_else_kernel_cpu::~cf_else_kernel_cpu(Espresso::cf_else_kernel_cpu *this)
{
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel((Espresso::cf_else_kernel_cpu *)((char *)this - 288));
}

{
  Espresso::generic_cf_else_kernel::~generic_cf_else_kernel((Espresso::cf_else_kernel_cpu *)((char *)this - 288));
  JUMPOUT(0x19401CD90);
}

void Espresso::cf_end_kernel_cpu::~cf_end_kernel_cpu(void **this)
{
  Espresso::generic_cf_end_kernel::~generic_cf_end_kernel(this);
  JUMPOUT(0x19401CD90);
}

char *Espresso::cf_end_kernel_cpu::__launch(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char *result;
  int v4;

  v2 = *(_QWORD **)(*(_QWORD *)a2 + 64);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  result = *(char **)(a1 + 312);
  if (result)
  {
    if (result)
    {
      v4 = *((_DWORD *)result + 95) + 1;
      *((_DWORD *)result + 95) = v4;
      if (v4 >= *((_DWORD *)result + 96))
      {
        *(_QWORD *)(result + 380) = 0;
      }
      else
      {
        v2[15] = *((_QWORD *)result + 44);
        v2[15] = *((_QWORD *)result + 44);
      }
    }
  }
  return result;
}

void Espresso::cf_kernel_with_br_label_to_bind::~cf_kernel_with_br_label_to_bind(void **this)
{
  *this = off_1E2D9B528;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E2D9B528;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x19401CD90);
}

{
  *this = off_1E2D9B528;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void Espresso::builtin_kernel_cpu::~builtin_kernel_cpu(void **this)
{
  *this = &off_1E2D829E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 58));
  Espresso::generic_builtin_kernel::~generic_builtin_kernel(this);
}

{
  *this = &off_1E2D829E0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 58));
  Espresso::generic_builtin_kernel::~generic_builtin_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::builtin_kernel_cpu::__launch(Espresso *a1, const char *a2, _QWORD **a3, uint64_t **a4)
{
  uint64_t v4;
  _QWORD *v5;
  const char *v8;
  Espresso *v9;
  uint64_t v10;
  char *v11;
  int v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  const char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  _QWORD v85[21];
  __int128 buf;
  int v87;
  int v88;
  void *v89;
  void *v90;
  _QWORD v91[2];
  uint64_t v92;
  std::__shared_weak_count *v93;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD **)(*(_QWORD *)a2 + 64);
  if (!v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter state");
  if (!*v5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Null interpreter");
  if (*a3 == a3[1])
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("missing output blob");
  v8 = a2;
  v9 = a1;
  v10 = (uint64_t)a1 + 464;
  if (!*((_QWORD *)a1 + 58))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&buf, 1, 1, 1, 1);
    a1 = (Espresso *)std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10, &buf);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&buf + 1);
    if (*((_QWORD *)&buf + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&buf + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  v11 = (char *)v9 + 280;
  if (*((char *)v9 + 303) < 0)
  {
    v16 = *((_QWORD *)v9 + 36);
    if (v16 != 10)
    {
      if (v16 != 12)
      {
        v11 = *(char **)v11;
        goto LABEL_82;
      }
      v11 = *(char **)v11;
LABEL_17:
      if (*(_QWORD *)v11 != 0x756F5F646E756F62 || *((_DWORD *)v11 + 2) != 1953853556)
        goto LABEL_82;
      v18 = *(_QWORD *)(*(_QWORD *)(v4 + 64) + 24);
      if (*(_QWORD *)(v18 + 1240))
      {
        **(_DWORD **)(*((_QWORD *)v9 + 58) + 24) = 0;
        v20 = *((_QWORD *)v9 + 54);
        v19 = *((_QWORD *)v9 + 55);
        while (v20 != v19)
        {
          if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v18 + 1240) + 144))(*(_QWORD *)(v18 + 1240), *(unsigned int *)(v18 + 1248), v20))
          {
            goto LABEL_67;
          }
          v20 += 24;
        }
      }
      else
      {
        if (!*((_BYTE *)v9 + 456))
        {
          *((_BYTE *)v9 + 456) = 1;
          Espresso::espresso_os_log_subsystem(a1, a2);
          v63 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_error_impl(&dword_190DAF000, v63, OS_LOG_TYPE_ERROR, "Cannot find network's plan, must be using C++ interface: assuming all outputs to be bound", (uint8_t *)&buf, 2u);
          }

        }
LABEL_67:
        **(_DWORD **)(*(_QWORD *)v10 + 24) = 1065353216;
      }
      goto LABEL_75;
    }
    v11 = *(char **)v11;
  }
  else
  {
    v12 = *((unsigned __int8 *)v9 + 303);
    if (v12 != 10)
    {
      if (v12 != 12)
        goto LABEL_82;
      goto LABEL_17;
    }
  }
  if (*(_QWORD *)v11 != 0x696F706B61657262 || *((_WORD *)v11 + 4) != 29806)
  {
LABEL_82:
    *(_QWORD *)&buf = v11;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Invalid builtin: %s", &buf);
  }
  v22 = *(_QWORD *)(v4 + 64);
  v23 = *(_QWORD *)(v22 + 24);
  v24 = *(_QWORD *)(v23 + 1240);
  if (v24)
  {
    if (*(_QWORD *)(v24 + 8))
    {
      v26 = a4;
      v25 = *a4;
      if (v26[1] != v25)
      {
        v27 = *(unsigned int *)(v23 + 1248);
        v28 = (std::__shared_weak_count *)v25[1];
        v91[0] = *v25;
        v91[1] = v28;
        if (v28)
        {
          p_shared_owners = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldxr(p_shared_owners);
          while (__stxr(v30 + 1, p_shared_owners));
        }
        Espresso::sync_copy_to_host(&v92, v91);
        if (v28)
        {
          v31 = (unint64_t *)&v28->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v83 = v8;
        v84 = v27;
        v33 = v92;
        *(_BYTE *)(v92 + 32) = 0;
        Espresso::abstract_blob_container::shape((char *)&buf, *v25);
        v35 = (int)buf;
        v34 = SDWORD1(buf);
        v37 = SDWORD2(buf);
        v36 = SHIDWORD(buf);
        v38 = v87;
        if (v87 <= 1)
          v39 = 1;
        else
          v39 = v87;
        v40 = 4 * (int)buf;
        v41 = v40 * SDWORD1(buf);
        v42 = SDWORD1(buf) * (uint64_t)(int)buf;
        if (v87 == 1)
          v43 = 4;
        else
          v43 = 5;
        if (v88 == -1)
          v44 = v43;
        else
          v44 = v88;
        v45 = *(_QWORD *)(v33 + 24);
        if (v89)
        {
          v90 = v89;
          v46 = v87;
          v77 = v22;
          v79 = v10;
          v73 = SDWORD2(buf);
          v75 = (int)buf;
          v47 = SDWORD1(buf);
          v48 = SHIDWORD(buf);
          v49 = SDWORD1(buf) * (uint64_t)(int)buf;
          v50 = 4 * (int)buf * SDWORD1(buf);
          v81 = 4 * (int)buf;
          v71 = v24;
          v51 = v45;
          v52 = v44;
          operator delete(v89);
          v44 = v52;
          v45 = v51;
          v10 = v79;
          v40 = v81;
          v41 = v50;
          v42 = v49;
          v36 = v48;
          v35 = v75;
          v22 = v77;
          v34 = v47;
          v24 = v71;
          v37 = v73;
          v38 = v46;
        }
        v53 = v39 * v36;
        v54 = v41 * v37;
        v55 = v93;
        v56 = v42 * v37;
        v8 = v83;
        if (v93)
        {
          v57 = (unint64_t *)&v93->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            v78 = v34;
            v80 = v38;
            v74 = v42;
            v76 = v36;
            v70 = v42 * v37;
            v72 = v41;
            v82 = v40;
            v59 = v45;
            v68 = v53;
            v69 = v41 * v37;
            v67 = v44;
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
            v44 = v67;
            v53 = v68;
            v54 = v69;
            v56 = v70;
            v45 = v59;
            v38 = v80;
            v40 = v82;
            v41 = v72;
            v42 = v74;
            v36 = v76;
            v34 = v78;
          }
        }
        v60 = *(_QWORD *)(*(_QWORD *)(v23 + 1240) + 8);
        v61 = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 16 * *(_QWORD *)(v22 + 32));
        v62 = (_QWORD *)(v61 + 16);
        if (*(char *)(v61 + 39) < 0)
          v62 = (_QWORD *)*v62;
        v85[0] = v45;
        v85[1] = v44;
        v85[2] = v35;
        v85[3] = v34;
        v85[4] = v37;
        v85[5] = v53;
        v85[6] = v40;
        v85[7] = v41;
        v85[8] = v54;
        v85[9] = v54 * v53;
        v85[10] = v35;
        v85[11] = v34;
        v85[12] = v37;
        v85[13] = v36;
        v85[14] = v38;
        v85[15] = 1;
        v85[16] = v35;
        v85[17] = v42;
        v85[18] = v56;
        v85[19] = v56 * v36;
        v85[20] = 65568;
        (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, _QWORD *))(v60 + 16))(v60, v62, v24, v84, v85);
        goto LABEL_75;
      }
      Espresso::espresso_os_log_subsystem(a1, a2);
      v65 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
LABEL_74:

LABEL_75:
        (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)**a3 + 48))(**a3, v8, v10);
        return;
      }
      LOWORD(buf) = 0;
      v66 = "No bottom blobs to breakpoint layer";
    }
    else
    {
      Espresso::espresso_os_log_subsystem(a1, a2);
      v65 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
        goto LABEL_74;
      LOWORD(buf) = 0;
      v66 = "No breakpoint block set";
    }
    _os_log_error_impl(&dword_190DAF000, v65, OS_LOG_TYPE_ERROR, v66, (uint8_t *)&buf, 2u);
    goto LABEL_74;
  }
  Espresso::espresso_os_log_subsystem(a1, a2);
  v64 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_190DAF000, v64, OS_LOG_TYPE_ERROR, "Breakpoint layer: Invalid state, no espresso_plan available in network", (uint8_t *)&buf, 2u);
  }

}

void sub_1918AA874(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::cf_branch_kernel_cpu::cf_branch_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_DWORD *)(a1 + 328) = -1;
  *(_QWORD *)a1 = &off_1E2D86208;
  std::string::operator=((std::string *)v5, (const std::string *)a3);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a3 + 24));
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a3 + 48);
  return a1;
}

void sub_1918AA900(_Unwind_Exception *a1)
{
  void **v1;

  Espresso::generic_cf_branch_kernel::~generic_cf_branch_kernel(v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::generic_cf_jump_kernel::generic_cf_jump_kernel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *(_DWORD *)(v3 + 280) = -1;
  *(_QWORD *)v3 = off_1E2D87488;
  *(_QWORD *)(v3 + 288) = off_1E2D9B528;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 296), "");
  a1[40] = 0;
  *a1 = off_1E2D8DA38;
  a1[36] = &unk_1E2D8DB90;
  return a1;
}

void sub_1918AA980(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;

  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::cf_call_kernel_cpu::cf_call_kernel_cpu(_QWORD *a1, _QWORD *a2, const std::string *a3)
{
  uint64_t v5;

  v5 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2) + 280;
  a1[39] = 0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *a1 = &off_1E2D82B38;
  std::string::operator=((std::string *)v5, a3);
  return a1;
}

void sub_1918AA9E8(_Unwind_Exception *a1)
{
  Espresso::generic_cf_call_kernel *v1;

  Espresso::generic_cf_call_kernel::~generic_cf_call_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::load_global_kernel_cpu::load_global_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;

  v5 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(v5 + 28) = xmmword_191A935B0;
  *(_DWORD *)(a1 + 324) = 1;
  *(_QWORD *)(a1 + 328) = 0x7FFFFFFFFLL;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)a1 = &off_1E2D8EAF8;
  std::string::operator=((std::string *)v5, (const std::string *)a3);
  v6 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 320) = v6;
  return a1;
}

void sub_1918AAA78(_Unwind_Exception *a1)
{
  Espresso::generic_load_global_kernel *v1;

  Espresso::generic_load_global_kernel::~generic_load_global_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::store_global_kernel_cpu::store_global_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;

  v5 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(v5 + 28) = xmmword_191A8AA80;
  *(_DWORD *)(a1 + 324) = 1;
  *(_QWORD *)(a1 + 328) = 1;
  *(_QWORD *)a1 = &off_1E2D90748;
  std::string::operator=((std::string *)v5, (const std::string *)a3);
  v6 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 320) = v6;
  return a1;
}

void sub_1918AAB04(_Unwind_Exception *a1)
{
  void **v1;

  Espresso::generic_store_global_kernel::~generic_store_global_kernel(v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::generic_cf_if_kernel::generic_cf_if_kernel(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *v3 = off_1E2D87080;
  v3[36] = off_1E2D9B528;
  std::string::basic_string[abi:ne180100]<0>(v3 + 37, "");
  a1[40] = 0;
  *a1 = off_1E2D869A8;
  a1[36] = &unk_1E2D86B00;
  return a1;
}

void sub_1918AAB7C(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;

  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::generic_cf_loop_kernel::generic_cf_loop_kernel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *(_DWORD *)(v3 + 280) = 0;
  *(_QWORD *)v3 = off_1E2D875E0;
  *(_QWORD *)(v3 + 288) = off_1E2D9B528;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 296), "");
  a1[40] = 0;
  *a1 = off_1E2D8DBB0;
  a1[36] = &unk_1E2D8DD08;
  return a1;
}

void sub_1918AAC00(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;

  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::generic_cf_for_kernel::generic_cf_for_kernel(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)Espresso::base_kernel::base_kernel(a1, a2);
  v3[35] = 0x100000001;
  *v3 = off_1E2D871D8;
  v3[36] = off_1E2D9B528;
  std::string::basic_string[abi:ne180100]<0>(v3 + 37, "");
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)a1 = off_1E2D89608;
  *(_QWORD *)(a1 + 288) = &unk_1E2D89760;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  return a1;
}

void sub_1918AAC94(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;

  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::generic_cf_else_kernel::generic_cf_else_kernel(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)Espresso::base_kernel::base_kernel((uint64_t)a1, a2);
  *v3 = off_1E2D87330;
  v3[36] = off_1E2D9B528;
  std::string::basic_string[abi:ne180100]<0>(v3 + 37, "");
  a1[40] = 0;
  *a1 = off_1E2D8D8C0;
  a1[36] = &unk_1E2D8DA18;
  return a1;
}

void sub_1918AAD14(_Unwind_Exception *a1)
{
  Espresso::base_kernel *v1;

  Espresso::base_kernel::~base_kernel(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::builtin_kernel_cpu::builtin_kernel_cpu(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  std::string *v11;
  uint64_t v12;
  _QWORD v14[13];
  char v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  v5 = Espresso::base_kernel::base_kernel(a1, a2) + 280;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_QWORD *)a1 = &off_1E2D829E0;
  *(_BYTE *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  std::string::operator=((std::string *)v5, (const std::string *)a3);
  std::string::operator=((std::string *)(a1 + 304), (const std::string *)(a3 + 24));
  std::string::operator=((std::string *)(a1 + 328), (const std::string *)(a3 + 48));
  std::string::operator=((std::string *)(a1 + 352), (const std::string *)(a3 + 72));
  std::string::operator=((std::string *)(a1 + 376), (const std::string *)(a3 + 96));
  v6 = *(_OWORD *)(a3 + 136);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)(a1 + 416) = v6;
  v17 = 0uLL;
  v18 = 0;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v14, a1 + 304, 24);
  while (1)
  {
    v7 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14, (uint64_t)&v17, 0x2Cu);
    if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
      break;
    v8 = HIBYTE(v18);
    if (v18 < 0)
      v8 = *((_QWORD *)&v17 + 1);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 440);
      if (v9 >= *(_QWORD *)(a1 + 448))
      {
        v11 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(a1 + 432), (uint64_t)&v17);
      }
      else
      {
        if (SHIBYTE(v18) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a1 + 440), (const std::string::value_type *)v17, *((std::string::size_type *)&v17 + 1));
        }
        else
        {
          v10 = v17;
          *(_QWORD *)(v9 + 16) = v18;
          *(_OWORD *)v9 = v10;
        }
        v11 = (std::string *)(v9 + 24);
        *(_QWORD *)(a1 + 440) = v9 + 24;
      }
      *(_QWORD *)(a1 + 440) = v11;
    }
  }
  v14[0] = *MEMORY[0x1E0DE4F50];
  v12 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v14[2] = v12;
  v14[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](&v16);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);
  return a1;
}

void sub_1918AAF48(_Unwind_Exception *a1)
{
  void **v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 58));
  Espresso::generic_builtin_kernel::~generic_builtin_kernel(v1);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::split_nd_kernel::~split_nd_kernel(Espresso::MPSGraphEngine::Kernels::split_nd_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::split_nd_kernel::is_valid_for_engine(int *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  char *v7;
  std::string::size_type v8;
  char *v9;
  int *v10;
  int *v11;
  int v12;
  std::string::size_type v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int64x2_t *v40;
  uint64_t v41;
  std::string v42;
  std::string v43;
  std::string __p;
  _BYTE v45[24];
  _BYTE v46[32];
  std::__shared_weak_count *v47;
  int64x2_t *v48;
  uint64_t v49;
  void **v50[2];

  v5 = a3[1] - *a3;
  if (v5 == 64)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    memset(&v43, 0, sizeof(v43));
    v10 = a1 + 72;
    v11 = a1 + 200;
    while (1)
    {
      v12 = *v10;
      if (!*v10)
        break;
      if (v12 < 0)
        goto LABEL_68;
      if ((unint64_t)v9 >= v8)
      {
        v14 = (v9 - v7) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v7) >> 1 > v15)
          v15 = (uint64_t)(v8 - (_QWORD)v7) >> 1;
        if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
        {
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          v12 = *v10;
        }
        else
        {
          v17 = 0;
        }
        v18 = (char *)(v16 + 4 * v14);
        *(_DWORD *)v18 = v12;
        v13 = (std::string::size_type)(v18 + 4);
        while (v9 != v7)
        {
          v19 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        v8 = v16 + 4 * v17;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v43.__r_.__value_.__r.__words[2] = v8;
        if (v7)
          operator delete(v7);
        v7 = v18;
      }
      else
      {
        *(_DWORD *)v9 = v12;
        v13 = (std::string::size_type)(v9 + 4);
      }
      v43.__r_.__value_.__l.__size_ = v13;
      ++v10;
      v9 = (char *)v13;
      if (v10 == v11)
        goto LABEL_46;
    }
    v13 = (std::string::size_type)v9;
LABEL_46:
    if (v13 == v43.__r_.__value_.__r.__words[0])
      v30 = a1[71];
    else
      v30 = (uint64_t)(v13 - v43.__r_.__value_.__r.__words[0]) >> 2;
    if (v30 == (uint64_t)(a3[4] - a3[3]) >> 6)
    {
      v27 = 1;
      goto LABEL_69;
    }
    v31 = *(_QWORD *)(a2 + 8);
    v40 = *(int64x2_t **)a2;
    v41 = v31;
    if (v31)
    {
      v32 = (unint64_t *)(v31 + 8);
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::basic_string[abi:ne180100]<0>(&v42, "[Dispatch::MPSGraph::split_nd_kernel] unsupported: invalid size_splits / num_splits");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v42, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v34 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v36 = __ldaxr(p_shared_owners);
      while (__stlxr(v36 - 1, p_shared_owners));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v50[0] = (void **)v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v50);
    v50[0] = (void **)v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v27 = v41;
    if (v41)
    {
      v37 = (unint64_t *)(v41 + 8);
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v27);
      }
LABEL_68:
      v27 = 0;
    }
LABEL_69:
    if (v43.__r_.__value_.__r.__words[0])
      operator delete(v43.__r_.__value_.__l.__data_);
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 8);
    v48 = *(int64x2_t **)a2;
    v49 = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v5 = a3[1] - *a3;
    }
    std::to_string(&v42, v5 >> 6);
    v23 = std::string::insert(&v42, 0, "[Dispatch::MPSGraph::split_nd_kernel] unsupported: number of inputs must be 1, received ");
    v43 = *v23;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v43, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v48, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v24 = v47;
    if (v47)
    {
      v25 = (unint64_t *)&v47->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v50[0] = (void **)v46;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v50);
    v50[0] = (void **)v45;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v27 = v49;
    if (v49)
    {
      v28 = (unint64_t *)(v49 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 16))(v27);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v27);
      }
      return 0;
    }
  }
  return v27;
}

void sub_1918AB3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a25);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a18)
  {
    a19 = (uint64_t)a18;
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::blob_container::~blob_container(id *this, void *a2)
{
  Espresso::MetalLowmemEngine::blob_container::~blob_container(this, a2);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D7E008;
  Espresso::on_dealloc((Espresso *)this, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 27));

  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)this);
}

void Espresso::MetalLowmemEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  id *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE *v19;
  _BOOL4 v20;
  const void *v21;
  _BYTE *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  id *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _BYTE *v37;
  int v38;
  int v39;
  int v40;
  void *v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  uint64_t v48;
  void *v49;
  int v50;
  char v51;
  int v52;
  int v53;
  int v54;
  unsigned int v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  id *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  id *v63;
  id *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  void *v75;
  int v76;
  unint64_t *v77;
  unint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  void *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::runtime_error *exception;
  std::runtime_error *v99;
  std::runtime_error *v100;
  int v101;
  int v102;
  _QWORD *v103;
  void *v104;
  _BOOL4 v105;
  id v106;
  id *v107;
  uint64_t v108;
  _BYTE *v109;
  std::__shared_weak_count *v110;
  void *lpsrc;
  std::__shared_weak_count *v112;

  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), *a3, a3[1]);
  v6 = *a3;
  if (v6)
  {
    lpsrc = 0;
    v112 = 0;
    if (v7)
    {
      v105 = *((_BYTE *)v7 + 88) != 0;
      v103 = v7;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&lpsrc, *((_QWORD *)v7 + 13), *((_QWORD *)v7 + 14));
    }
    else
    {
      v103 = 0;
      v105 = 0;
    }
  }
  else
  {
    v103 = 0;
    v105 = 0;
    lpsrc = 0;
    v112 = 0;
  }
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  if (v6 && *(_BYTE *)(v6 + 8))
    v9 = *(_DWORD *)(v6 + 12);
  v11 = (id *)(a1 + 160);
  v10 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(a1 + 200) = v9;
  if (v10 || (v12 = *(void **)(a1 + 168)) != 0)
  {
    Espresso::on_dealloc((Espresso *)a1, v8);
    v12 = *(void **)(a1 + 168);
  }
  *(_QWORD *)(a1 + 168) = 0;

  v13 = *(void **)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;

  v14 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;

  v15 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;

  v16 = objc_opt_new();
  v17 = (void *)v16;
  if (*(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 24))
  {
    v18 = 4;
    if (v9 == 1)
      v18 = 2;
    *(_QWORD *)(a1 + 208) = v18;
    v101 = *(_DWORD *)(a1 + 116);
    v104 = (void *)v16;
    v20 = !v6
    v21 = *(const void **)(a1 + 72);
    if (!v21
    {
      v109 = 0;
      v110 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
      exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v23 = *(std::__shared_weak_count **)(a1 + 80);
    v109 = v22;
    v110 = v23;
    if (v23)
    {
      p_shared_owners = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
      v21 = *(const void **)(a1 + 72);
      if (!v21)
        goto LABEL_167;
    }
    if (!v26)
    {
LABEL_167:
      v107 = 0;
      v108 = 0;
      v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v99, "Espresso: wrong_context_type");
      v99->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v27 = *(std::__shared_weak_count **)(a1 + 80);
    v107 = v26;
    v108 = (uint64_t)v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v106 = v26[18];
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    else
    {
      v106 = v26[18];
    }
    v31 = *(int *)(a1 + 8);
    v32 = *(int *)(a1 + 12);
    v33 = *(_DWORD *)(a1 + 16);
    v34 = *(_DWORD *)(a1 + 24);
    if (v34 <= 1)
      v34 = 1;
    v35 = v34 * *(_DWORD *)(a1 + 20);
    v36 = v33 - 1;
    if (v33 < 1)
      v36 = v33 + 2;
    v102 = (v36 >> 2) + 1;
    v37 = v109;
    v38 = v109[113];
    if (v109[113])
      v39 = 1;
    else
      v39 = v34 * *(_DWORD *)(a1 + 20);
    v40 = *((_DWORD *)v109 + 55);
    if (v40 == 1 && v20)
    {
      v42 = (void *)objc_opt_new();
      objc_msgSend(v42, "setHeight:", v32);
      objc_msgSend(v42, "setWidth:", v31);
      if (v109[113])
        v43 = v38 == 0;
      else
        v43 = 1;
      if (v43)
        v44 = 1;
      else
        v44 = v35;
      objc_msgSend(v42, "setArrayLength:", v39 * v102 * v44);
      if (v9 == 1)
      {
        v45 = 115;
LABEL_55:
        objc_msgSend(v42, "setPixelFormat:", v45);
LABEL_88:
        objc_msgSend(v42, "setUsage:", 3);
        objc_msgSend(v42, "setTextureType:", 3);
        objc_msgSend(v42, "setStorageMode:", 2);
        if ((objc_opt_respondsToSelector() & 1) != 0)
        {
          v58 = objc_msgSend(v106, "heapTextureSizeAndAlignWithDescriptor:", v42);
          if (!v105)
          {
            if (lpsrc)
            {
              if (v59)
              {
                v60 = v112;
                if (v112)
                {
                  v61 = (unint64_t *)&v112->__shared_owners_;
                  do
                    v62 = __ldxr(v61);
                  while (__stxr(v62 + 1, v61));
                }
              }
              else
              {
                v60 = 0;
              }
              objc_storeStrong((id *)(a1 + 192), v59[24]);
              if (v60)
              {
                v77 = (unint64_t *)&v60->__shared_owners_;
                do
                  v78 = __ldaxr(v77);
                while (__stlxr(v78 - 1, v77));
                if (!v78)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
            }
            v79 = *(void **)(a1 + 192);
            if (!v79)
            {
              Espresso::on_alloc((Espresso *)a1, (void *)v58);
              v80 = (void *)objc_opt_new();
              objc_msgSend(v80, "setCpuCacheMode:", 0);
              objc_msgSend(v80, "setStorageMode:", 2);
              objc_msgSend(v80, "setSize:", v58);
              objc_msgSend(v80, "setHazardTrackingMode:", 2);
              v81 = objc_msgSend(v106, "newHeapWithDescriptor:", v80);
              v82 = *(void **)(a1 + 192);
              *(_QWORD *)(a1 + 192) = v81;

              v79 = *(void **)(a1 + 192);
            }
            v83 = objc_msgSend(v79, "newTextureWithDescriptor:", v42);
            v84 = *(void **)(a1 + 168);
            *(_QWORD *)(a1 + 168) = v83;

            objc_msgSend(*(id *)(a1 + 168), "makeAliasable");
            objc_msgSend(v104, "addObject:", *(_QWORD *)(a1 + 168));
            if (*(_QWORD *)(a1 + 168))
              goto LABEL_152;
            goto LABEL_143;
          }
          goto LABEL_99;
        }
        if (*(_QWORD *)(a1 + 168))
        {
LABEL_152:

LABEL_153:
          v17 = v104;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v104);
          v90 = objc_claimAutoreleasedReturnValue();
          v91 = *(void **)(a1 + 184);
          *(_QWORD *)(a1 + 184) = v90;

          goto LABEL_154;
        }
        if (v105)
        {
          v58 = -1;
LABEL_99:
          v103[12] = v58;
LABEL_118:

          goto LABEL_119;
        }
LABEL_143:
        v85 = objc_msgSend(v106, "newTextureWithDescriptor:", v42);
        v86 = *(void **)(a1 + 168);
        *(_QWORD *)(a1 + 168) = v85;

        objc_msgSend(v104, "addObject:", *(_QWORD *)(a1 + 168));
        goto LABEL_152;
      }
      if (v9 == 4 && v101)
      {
        v48 = 72;
      }
      else
      {
        if (v9 != 4 || v101)
        {
          if (v9 == 3)
            v45 = 124;
          else
            v45 = 125;
          goto LABEL_55;
        }
        v48 = 70;
      }
      objc_msgSend(v42, "setPixelFormat:", v48);
      *(_QWORD *)(a1 + 208) = 1;
      goto LABEL_88;
    }
    if (v40)
    {
      if (v40 != 3 || !v20)
      {
        if (v40 != 2 && v20)
          goto LABEL_153;
        goto LABEL_75;
      }
    }
    else if (!v20)
    {
LABEL_75:
      v53 = v32 * v31 * v33 * *(_DWORD *)(a1 + 208);
      v54 = v53 - 1;
      if (v53 < 1)
        v54 = v53 + 6;
      v55 = (v54 & 0xFFFFFFF8) + 8;
      if ((v53 & 7) != 0)
        v53 = v55;
      *(_DWORD *)(a1 + 204) = v53;
      v56 = (void *)(v53 * v35);
      if (!v105)
      {
        if (lpsrc)
        {
          v64 = v63;
          if (v63)
          {
            v65 = v112;
            v107 = v63;
            v108 = (uint64_t)v112;
            if (v112)
            {
              v66 = (unint64_t *)&v112->__shared_owners_;
              do
                v67 = __ldxr(v66);
              while (__stxr(v67 + 1, v66));
            }
          }
          else
          {
            v107 = 0;
            v108 = 0;
            NSLog(CFSTR("TODO Error aliasing %s %d"), "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/MetalLowmemEngine/MetalLowmemEngine/BlobContainer.mm", 407);
            v65 = 0;
          }
          objc_storeStrong((id *)(a1 + 160), v64[20]);
          if (v65)
          {
            v87 = (unint64_t *)&v65->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
        }
        if (*v11)
          goto LABEL_153;
        Espresso::on_alloc((Espresso *)a1, v56);
        v89 = objc_msgSend(v106, "newBufferWithLength:options:", v56, 32);
        v42 = *v11;
        *v11 = (id)v89;
        goto LABEL_152;
      }
      v103[12] = v56;
LABEL_119:
      v17 = v104;
LABEL_154:

      v92 = v110;
      if (v110)
      {
        v93 = (unint64_t *)&v110->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
      }
      goto LABEL_159;
    }
    v49 = (void *)objc_opt_new();
    v42 = v49;
    v50 = v35 * v32 + 2;
    if (v35 * (int)v32 >= 1)
      v50 = v35 * v32 - 1;
    objc_msgSend(v49, "setHeight:", (int)((v50 & 0xFFFFFFFC) + 4));
    if (v9 == 1)
    {
      objc_msgSend(v42, "setPixelFormat:", 115);
      v51 = 3;
      v52 = 8;
LABEL_74:
      objc_msgSend(v42, "setWidth:", (((v102 * (int)v31 - 1) / v52) << v51) + v52);
      goto LABEL_113;
    }
    if (v9 == 4 && v101)
    {
      v57 = 72;
    }
    else
    {
      if (v9 != 4 || v101)
      {
        if (v9 != 3)
        {
          objc_msgSend(v42, "setPixelFormat:", 125);
          v51 = 2;
          v52 = 4;
          goto LABEL_74;
        }
        objc_msgSend(v42, "setPixelFormat:", 124);
        v76 = v102 * v31 + 2;
        if (v102 * (int)v31 >= 1)
          v76 = v102 * v31 - 1;
        objc_msgSend(v42, "setWidth:", (int)((v76 & 0xFFFFFFFC) + 4));
LABEL_112:
        *(_QWORD *)(a1 + 208) = 4;
LABEL_113:
        objc_msgSend(v42, "setUsage:", 3);
        objc_msgSend(v42, "setTextureType:", 2);
        if (*((_DWORD *)v37 + 55))
        {
          if (!v105)
            goto LABEL_143;
          v69 = -1;
        }
        else
        {
          v70 = 4 * objc_msgSend(v42, "width") * *(_QWORD *)(a1 + 208);
          v69 = (v70 * objc_msgSend(v42, "height") + 4095) & 0xFFFFFFFFFFFFF000;
          if (!v105)
          {
            if (lpsrc)
            {
              std::dynamic_pointer_cast[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,Espresso::abstract_blob_container>(&v107, lpsrc, (uint64_t)v112);
              objc_storeStrong((id *)(a1 + 160), v107[20]);
              if (objc_msgSend(*v11, "length") < v69)
              {
                v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v100, "Buffer mismatch");
                __cxa_throw(v100, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
              }
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v107);
            }
            v71 = *v11;
            if (!*v11)
            {
              Espresso::on_alloc((Espresso *)a1, (void *)v69);
              v72 = objc_msgSend(v106, "newBufferWithLength:options:", v69, 0);
              v73 = *v11;
              *v11 = (id)v72;

              v71 = *v11;
            }
            v74 = objc_msgSend(v71, "newTextureWithDescriptor:offset:bytesPerRow:", v42, 0, v70);
            v75 = *(void **)(a1 + 168);
            *(_QWORD *)(a1 + 168) = v74;

            *(_DWORD *)(a1 + 204) = v70;
            objc_msgSend(v104, "addObject:", *(_QWORD *)(a1 + 168));
            goto LABEL_152;
          }
        }
        v103[12] = v69;
        goto LABEL_118;
      }
      v57 = 70;
    }
    objc_msgSend(v42, "setPixelFormat:", v57);
    v68 = v102 * v31 + 14;
    if (v102 * (int)v31 >= 1)
      v68 = v102 * v31 - 1;
    objc_msgSend(v42, "setWidth:", (int)((v68 & 0xFFFFFFF0) + 16));
    *(_QWORD *)(a1 + 208) = 1;
    objc_msgSend(v42, "setPixelFormat:", 125);
    goto LABEL_112;
  }
  if (v105)
    v103[12] = 0;
LABEL_159:

  v95 = v112;
  if (v112)
  {
    v96 = (unint64_t *)&v112->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
}

void sub_1918ABF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;

  __cxa_free_exception(v22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::blob_container::platform(Espresso::MetalLowmemEngine::blob_container *this)
{
  return 20000;
}

uint64_t Espresso::MetalLowmemEngine::blob_container::compute_path(Espresso::MetalLowmemEngine::blob_container *this)
{
  return *((unsigned int *)this + 50);
}

void Espresso::MetalLowmemEngine::blob_container::__copy_to_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  void *v7;
  int32x2_t v8;
  unint64_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  void *v46;
  uint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  id v52;
  float v53;
  float v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  size_t v68;
  std::string *v69;
  void **v70;
  void **v71;
  std::string::size_type v72;
  std::string *v73;
  __int128 v74;
  _BYTE *v75;
  void *v76;
  int v77;
  __int32 v78;
  int v79;
  int v80;
  __int32 v81;
  __int32 v82;
  int v83;
  void *v84;
  int v85;
  int v86;
  int32x2_t v87;
  int32x2_t v88;
  __int128 v89;
  std::__shared_weak_count *v90;
  uint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::runtime_error *exception;
  std::runtime_error *v97;
  std::runtime_error *v98;
  int64x2_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  std::string v103;
  void *__p[2];
  unsigned __int8 v105;
  void *v106[2];
  unsigned __int8 v107;
  int64x2_t *v108;
  std::__shared_weak_count *v109;
  __int128 v110;
  _BYTE v111[24];
  uint64_t v112;
  int64x2_t *v113;

  v4 = (const void *)a1[9];
  if (!v4
  {
    v110 = 0uLL;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = a1[10];
  *(_QWORD *)&v110 = v7;
  *((int32x2_t *)&v110 + 1) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(*(_QWORD *)&v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (!*(_QWORD *)a2
  {
    v108 = 0;
    v109 = 0;
    v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v97, "Espresso: wrong_batch_type");
    v97->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v12 = v11;
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  v108 = v11;
  v109 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (void *)*a3;
  if (!*a3)
  {
    (*(void (**)(_BYTE *__return_ptr, int32x2_t *))(*(_QWORD *)a1 + 56))(v111, a1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)v111);
    v17 = *(std::__shared_weak_count **)&v111[8];
    if (*(_QWORD *)&v111[8])
    {
      v18 = (unint64_t *)(*(_QWORD *)&v111[8] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v12 = v108;
    v16 = (void *)*a3;
  }
  v20 = (unint64_t *)a3[1];
  v106[0] = v16;
  v106[1] = v20;
  if (v20)
  {
    v21 = v20 + 1;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = v12[11].u64[0];
  v24 = (_QWORD *)v12[10].i64[1];
  if ((unint64_t)v24 >= v23)
  {
    v26 = v12[10].i64[0];
    v27 = ((uint64_t)v24 - v26) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v29 = v23 - v26;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v113 = v12 + 11;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v30);
    v33 = &v31[16 * v27];
    *(_OWORD *)v33 = *(_OWORD *)v106;
    v35 = (_QWORD *)v12[10].i64[0];
    v34 = (_QWORD *)v12[10].i64[1];
    if (v34 == v35)
    {
      v38 = vdupq_n_s64((unint64_t)v34);
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 2;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *v34 = 0;
        v34[1] = 0;
      }
      while (v34 != v35);
      v38 = v12[10];
    }
    v25 = v33 + 16;
    v12[10].i64[0] = (uint64_t)v36;
    v12[10].i64[1] = (uint64_t)(v33 + 16);
    *(int64x2_t *)&v111[8] = v38;
    v39 = v12[11].i64[0];
    v12[11].i64[0] = (uint64_t)&v31[16 * v32];
    v112 = v39;
    *(_QWORD *)v111 = v38.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v111);
  }
  else
  {
    *v24 = v16;
    v24[1] = v20;
    v25 = v24 + 2;
  }
  v12[10].i64[1] = (uint64_t)v25;
  v40 = *(_DWORD *)(v110 + 220);
  if (v40 <= 3 && v40 != 2)
  {
    *(_OWORD *)v111 = v110;
    if (*((_QWORD *)&v110 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    v106[0] = v12;
    v106[1] = v109;
    if (v109)
    {
      v44 = &v109->__shared_owners_;
      do
        v45 = __ldxr((unint64_t *)v44);
      while (__stxr(v45 + 1, (unint64_t *)v44));
    }
    Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t)v111, v12, a3);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    if (v109)
    {
      v47 = &v109->__shared_owners_;
      do
        v48 = __ldaxr((unint64_t *)v47);
      while (__stlxr(v48 - 1, (unint64_t *)v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
        std::__shared_weak_count::__release_weak(v109);
      }
    }
    v49 = *(std::__shared_weak_count **)&v111[8];
    if (*(_QWORD *)&v111[8])
    {
      v50 = (unint64_t *)(*(_QWORD *)&v111[8] + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (a1[21])
    {
      v52 = (id)v108[9].i64[1];
      std::string::basic_string[abi:ne180100]<0>(v106, "");
      if (objc_msgSend(*(id *)&a1[21], "textureType") == 3)
        MEMORY[0x19401C808](v106, "_texarray");
      v53 = *(float *)a1[14].i32;
      std::string::basic_string[abi:ne180100]<0>(__p, "read_tex2d_4f");
      v54 = 1.0 / v53;
      if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1) == 1)
      {
        MEMORY[0x19401C808](__p, "read_tex2d_4h");
      }
      else if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1) == 4 && !a1[14].i32[1])
      {
        MEMORY[0x19401C808](__p, "read_tex2d_4_8norm");
        v54 = v54 * 256.0;
      }
      else if ((*(unsigned int (**)(int32x2_t *))(*(_QWORD *)a1 + 32))(a1) == 4 && a1[14].i32[1] == 1)
      {
        MEMORY[0x19401C808](__p, "read_tex2d_4_8norm");
        v54 = v54 * 128.0;
      }
      v67 = v110;
      if ((v105 & 0x80u) == 0)
        v68 = v105;
      else
        v68 = (size_t)__p[1];
      v69 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v68 + 9);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v69 = (std::string *)v103.__r_.__value_.__r.__words[0];
      if (v68)
      {
        if ((v105 & 0x80u) == 0)
          v70 = __p;
        else
          v70 = (void **)__p[0];
        memmove(v69, v70, v68);
      }
      strcpy((char *)v69 + v68, "_unpacked");
      if ((v107 & 0x80u) == 0)
        v71 = v106;
      else
        v71 = (void **)v106[0];
      if ((v107 & 0x80u) == 0)
        v72 = v107;
      else
        v72 = (std::string::size_type)v106[1];
      v73 = std::string::append(&v103, (const std::string::value_type *)v71, v72);
      v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
      *(_QWORD *)&v111[16] = *((_QWORD *)&v73->__r_.__value_.__l + 2);
      *(_OWORD *)v111 = v74;
      v73->__r_.__value_.__l.__size_ = 0;
      v73->__r_.__value_.__r.__words[2] = 0;
      v73->__r_.__value_.__r.__words[0] = 0;
      if (v111[23] >= 0)
        v75 = v111;
      else
        v75 = *(_BYTE **)v111;
      objc_msgSend(*(id *)(v67 + 160), "kernelForFunction:cacheString:withConstants:", v75, 0, 0);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      if ((v111[23] & 0x80000000) != 0)
        operator delete(*(void **)v111);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      v77 = a1[2].i32[0];
      v78 = a1[2].i32[1];
      v79 = v77 - 1;
      if (v77 < 1)
        v79 = v77 + 2;
      v80 = (v79 >> 2) + 1;
      v81 = a1[1].i32[0];
      v82 = a1[1].i32[1];
      *(_DWORD *)v111 = v81;
      *(_DWORD *)&v111[4] = v82;
      *(_DWORD *)&v111[8] = v77;
      *(_DWORD *)&v111[12] = v80;
      v83 = a1[3].i32[0];
      if (v83 <= 1)
        v83 = 1;
      *(_DWORD *)&v111[16] = v83 * v78;
      *(_DWORD *)&v111[20] = v82 * v81;
      LODWORD(v112) = v82 * v81 * v77;
      HIDWORD(v112) = v82 * v81 * v80;
      *(float *)&v113 = v54;
      v84 = (void *)objc_msgSend(*(id *)(v110 + 144), "newBufferWithBytes:length:options:", v111, 36, 0);
      if (!v76)
      {
        v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v98, "Kernel not found");
        __cxa_throw(v98, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      objc_msgSend(v52, "setComputePipelineState:", v76);
      objc_msgSend(v52, "setTexture:atIndex:", *(_QWORD *)&a1[21], 0);
      objc_msgSend(v52, "setBuffer:offset:atIndex:", v46, 0, 0);
      objc_msgSend(v52, "setBuffer:offset:atIndex:", v84, 0, 1);
      v85 = a1[3].i32[0];
      v86 = a1[2].i32[1] * v80;
      if (v85 <= 1)
        v85 = 1;
      v87 = vadd_s32(a1[1], (int32x2_t)-1);
      v88 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v87, (uint32x2_t)vcltz_s32(v87), 0x1CuLL), 4uLL);
      *(_QWORD *)&v89 = v88.i32[0];
      *((_QWORD *)&v89 + 1) = v88.i32[1];
      v101 = v89;
      v102 = v86 * v85;
      v99 = vdupq_n_s64(0x10uLL);
      v100 = 1;
      objc_msgSend(v52, "dispatchThreadgroups:threadsPerThreadgroup:", &v101, &v99);

      if ((char)v105 < 0)
        operator delete(__p[0]);
      if ((char)v107 < 0)
        operator delete(v106[0]);

    }
    else
    {
      v55 = a1[1].i32[1] * (uint64_t)a1[1].i32[0] * a1[2].i32[0];
      if (*(_QWORD *)&a1[26] * v55 == a1[25].i32[1])
      {
        v56 = (void *)a1[20];
        v57 = *a3;
        v58 = *(int *)(*a3 + 8);
        if (a1[25].i32[0])
        {
          v59 = 0;
          v60 = v57 + 12;
          do
          {
            v58 *= *(int *)(v60 + v59);
            v59 += 4;
          }
          while (v59 != 12);
          Espresso::convert_float16_to_float32(v110, (uint64_t)v108, v56, v46, v58, 0, 0);
        }
        else
        {
          v65 = 0;
          v66 = v57 + 12;
          do
          {
            v58 *= *(int *)(v66 + v65);
            v65 += 4;
          }
          while (v65 != 12);
          Espresso::copy_float32_to_float32(v110, (uint64_t)v108, v56, v46, v58, 0, 0);
        }
      }
      else if (a1[2].i32[1] >= 1)
      {
        v61 = 0;
        v62 = 0;
        do
        {
          v63 = (void *)a1[20];
          v64 = a1[25].i32[1] * (uint64_t)(int)v62;
          if (a1[25].i32[0])
            Espresso::convert_float16_to_float32(v110, (uint64_t)v108, v63, v46, v55, v64, v61);
          else
            Espresso::copy_float32_to_float32(v110, (uint64_t)v108, v63, v46, v55, v64, v61);
          ++v62;
          v61 += 4 * v55;
        }
        while (v62 < a1[2].i32[1]);
      }
    }

  }
  v90 = v109;
  if (v109)
  {
    v91 = &v109->__shared_owners_;
    do
      v92 = __ldaxr((unint64_t *)v91);
    while (__stlxr(v92 - 1, (unint64_t *)v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v94 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
}

void sub_1918AC8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36)
{
  void *v36;
  uint64_t v37;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 144);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::blob_container::__copy_from_host(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  void **v7;
  void **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int64x2_t *v12;
  int64x2_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  __int128 v35;
  int64x2_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  float v58;
  uint64_t v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void **v71;
  int v72;
  int v73;
  int v74;
  int v75;
  unsigned int v76;
  unsigned int v77;
  int v78;
  void *v79;
  int v80;
  int v81;
  int32x2_t v82;
  int32x2_t v83;
  __int128 v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::runtime_error *exception;
  std::runtime_error *v92;
  std::runtime_error *v93;
  std::runtime_error *v94;
  int64x2_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  void *__p[2];
  char v100;
  uint64_t *v101;
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  void **v105;
  int64x2_t v106;
  uint64_t v107;
  int64x2_t *v108;

  v4 = *(const void **)(a1 + 72);
  if (!v4
  {
    v103 = 0;
    v104 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 80);
  v103 = (uint64_t)v7;
  v104 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (!*(_QWORD *)a2
  {
    v101 = 0;
    v102 = 0;
    v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v92, "Espresso: wrong_batch_type");
    v92->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v13 = v12;
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  v101 = (uint64_t *)v12;
  v102 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *a3;
  v18 = (unint64_t *)a3[1];
  __p[0] = (void *)*a3;
  __p[1] = v18;
  if (v18)
  {
    v19 = v18 + 1;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = v12[11].u64[0];
  v22 = (uint64_t *)v12[10].i64[1];
  if ((unint64_t)v22 >= v21)
  {
    v24 = v12[10].i64[0];
    v25 = ((uint64_t)v22 - v24) >> 4;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v27 = v21 - v24;
    if (v27 >> 3 > v26)
      v26 = v27 >> 3;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0)
      v28 = 0xFFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    v108 = v13 + 11;
    v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v28);
    v31 = &v29[16 * v25];
    *(_OWORD *)v31 = *(_OWORD *)__p;
    v33 = (_QWORD *)v13[10].i64[0];
    v32 = (_QWORD *)v13[10].i64[1];
    if (v32 == v33)
    {
      v36 = vdupq_n_s64((unint64_t)v32);
      v34 = &v29[16 * v25];
    }
    else
    {
      v34 = &v29[16 * v25];
      do
      {
        v35 = *((_OWORD *)v32 - 1);
        v32 -= 2;
        *((_OWORD *)v34 - 1) = v35;
        v34 -= 16;
        *v32 = 0;
        v32[1] = 0;
      }
      while (v32 != v33);
      v36 = v13[10];
    }
    v23 = v31 + 16;
    v13[10].i64[0] = (uint64_t)v34;
    v13[10].i64[1] = (uint64_t)(v31 + 16);
    v106 = v36;
    v37 = v13[11].i64[0];
    v13[11].i64[0] = (uint64_t)&v29[16 * v30];
    v107 = v37;
    v105 = (void **)v36.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v105);
    v8 = (void **)v103;
  }
  else
  {
    *v22 = v17;
    v22[1] = (uint64_t)v18;
    v23 = v22 + 2;
  }
  v13[10].i64[1] = (uint64_t)v23;
  v38 = *((_DWORD *)v8 + 55);
  if (v38 >= 2 && v38 != 3)
  {
    v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v93, "not implemented");
    __cxa_throw(v93, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v105 = v8;
  v106.i64[0] = (uint64_t)v104;
  if (v104)
  {
    v40 = (unint64_t *)&v104->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  __p[0] = v13;
  __p[1] = v14;
  if (v14)
  {
    v42 = (unint64_t *)&v14->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>((uint64_t)&v105, v13, a3);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  if (v14)
  {
    v45 = (unint64_t *)&v14->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v47 = (std::__shared_weak_count *)v106.i64[0];
  if (v106.i64[0])
  {
    v48 = (unint64_t *)(v106.i64[0] + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = *(void **)(a1 + 168);
  if (v50)
  {
    if (objc_msgSend(v50, "pixelFormat") == 124)
    {
      NSLog(CFSTR("TODO skipping copy for sint texture %s %d"), "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/MetalLowmemEngine/MetalLowmemEngine/BlobContainer.mm", 477);
      goto LABEL_104;
    }
    v57 = (id)v101[19];
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    if (objc_msgSend(*(id *)(a1 + 168), "textureType") == 3)
      MEMORY[0x19401C808](__p, "_texarray");
    v58 = *(float *)(a1 + 112);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 1)
    {
      v59 = v103;
      std::operator+<char>();
      if (v106.i8[15] >= 0)
        v60 = (void **)&v105;
      else
        v60 = v105;
    }
    else
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 4 && !*(_DWORD *)(a1 + 116))
      {
        v70 = v103;
        std::operator+<char>();
        if (v106.i8[15] >= 0)
          v71 = (void **)&v105;
        else
          v71 = v105;
        objc_msgSend(*(id *)(v70 + 160), "kernelForFunction:cacheString:withConstants:", v71, 0, 0);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        if (v106.i8[15] < 0)
          operator delete(v105);
        v58 = v58 * 0.0039062;
        goto LABEL_94;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) == 4 && *(_DWORD *)(a1 + 116) == 1)
      {
        v65 = v103;
        std::operator+<char>();
        if (v106.i8[15] >= 0)
          v66 = (void **)&v105;
        else
          v66 = v105;
        objc_msgSend(*(id *)(v65 + 160), "kernelForFunction:cacheString:withConstants:", v66, 0, 0);
        v67 = (void *)objc_claimAutoreleasedReturnValue();
        if (v106.i8[15] < 0)
          operator delete(v105);
        v58 = v58 * 0.0078125;
        goto LABEL_94;
      }
      v59 = v103;
      std::operator+<char>();
      if (v106.i8[15] >= 0)
        v60 = (void **)&v105;
      else
        v60 = v105;
    }
    objc_msgSend(*(id *)(v59 + 160), "kernelForFunction:cacheString:withConstants:", v60, 0, 0);
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    if (v106.i8[15] < 0)
      operator delete(v105);
LABEL_94:
    v72 = *(_DWORD *)(a1 + 16);
    v73 = *(_DWORD *)(a1 + 20);
    v74 = v72 - 1;
    if (v72 < 1)
      v74 = v72 + 2;
    v75 = (v74 >> 2) + 1;
    v76 = *(_DWORD *)(a1 + 8);
    v77 = *(_DWORD *)(a1 + 12);
    v105 = (void **)__PAIR64__(v77, v76);
    v106.i64[0] = __PAIR64__(v75, v72);
    v78 = *(_DWORD *)(a1 + 24);
    if (v78 <= 1)
      v78 = 1;
    v106.i32[2] = v78 * v73;
    v106.i32[3] = v77 * v76;
    LODWORD(v107) = v77 * v76 * v72;
    HIDWORD(v107) = v77 * v76 * v75;
    *(float *)&v108 = v58;
    v79 = (void *)objc_msgSend(*(id *)(v103 + 144), "newBufferWithBytes:length:options:", &v105, 36, 0);
    if (!v67)
    {
      v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v94, "Kernel not found");
      __cxa_throw(v94, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    objc_msgSend(v57, "setComputePipelineState:", v67);
    objc_msgSend(v57, "setTexture:atIndex:", *(_QWORD *)(a1 + 168), 0);
    objc_msgSend(v57, "setBuffer:offset:atIndex:", v44, 0, 0);
    objc_msgSend(v57, "setBuffer:offset:atIndex:", v79, 0, 1);
    v80 = *(_DWORD *)(a1 + 24);
    v81 = *(_DWORD *)(a1 + 20) * v75;
    if (v80 <= 1)
      v80 = 1;
    v82 = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)-1);
    v83 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v82, (uint32x2_t)vcltz_s32(v82), 0x1CuLL), 4uLL);
    *(_QWORD *)&v84 = v83.i32[0];
    *((_QWORD *)&v84 + 1) = v83.i32[1];
    v97 = v84;
    v98 = v81 * v80;
    v95 = vdupq_n_s64(0x10uLL);
    v96 = 1;
    objc_msgSend(v57, "dispatchThreadgroups:threadsPerThreadgroup:", &v97, &v95);

    if (v100 < 0)
      operator delete(__p[0]);

    goto LABEL_104;
  }
  v51 = *(int *)(a1 + 12) * (uint64_t)*(int *)(a1 + 8) * *(int *)(a1 + 16);
  if (*(_QWORD *)(a1 + 208) * v51 == *(_DWORD *)(a1 + 204))
  {
    v52 = *(void **)(a1 + 160);
    v53 = *a3;
    v54 = *(int *)(*a3 + 8);
    if (*(_DWORD *)(a1 + 200))
    {
      v55 = 0;
      v56 = v53 + 12;
      do
      {
        v54 *= *(int *)(v56 + v55);
        v55 += 4;
      }
      while (v55 != 12);
      Espresso::convert_float32_to_float16(v103, (uint64_t)v101, v44, v52, v54, 0, 0);
    }
    else
    {
      v68 = 0;
      v69 = v53 + 12;
      do
      {
        v54 *= *(int *)(v69 + v68);
        v68 += 4;
      }
      while (v68 != 12);
      Espresso::copy_float32_to_float32(v103, (uint64_t)v101, v44, v52, v54, 0, 0);
    }
  }
  else if (*(int *)(a1 + 20) >= 1)
  {
    v61 = 0;
    v62 = 0;
    do
    {
      v63 = *(void **)(a1 + 160);
      v64 = *(int *)(a1 + 204) * (uint64_t)(int)v62;
      if (*(_DWORD *)(a1 + 200))
        Espresso::convert_float32_to_float16(v103, (uint64_t)v101, v44, v63, v51, v61, v64);
      else
        Espresso::copy_float32_to_float32(v103, (uint64_t)v101, v44, v63, v51, v61, v64);
      ++v62;
      v61 += 4 * v51;
    }
    while (v62 < *(int *)(a1 + 20));
  }
LABEL_104:

  v85 = v102;
  if (v102)
  {
    v86 = (unint64_t *)&v102->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v104;
  if (v104)
  {
    v89 = (unint64_t *)&v104->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
}

void sub_1918AD254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  uint64_t v29;

  if (*(char *)(v29 - 97) < 0)
    operator delete(*(void **)(v29 - 120));
  if (a24 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::blob_container::__copy_from_CVPixelBuffer(uint64_t a1, _QWORD *a2, _QWORD *a3, __CVBuffer *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  int v15;
  char v16;
  void *v17;
  id v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  int v23;
  int v24;
  size_t Width;
  size_t Height;
  unint64_t src_crop_rect;
  uint64_t v28;
  id v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *size;
  unint64_t *v36;
  unint64_t v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t **v40;
  void *v41;
  void *v42;
  const __CFDictionary *v43;
  uint64_t *v44;
  __CVBuffer *v45;
  VTSessionRef *v46;
  CFDictionaryRef DictionaryRepresentation;
  OSStatus v48;
  std::runtime_error *exception;
  std::string *v50;
  __int128 v51;
  int v52;
  std::__shared_weak_count *v53;
  int v54;
  int v55;
  void *__p;
  void *v57;
  std::string v58;
  std::string pixelBufferOut;
  CGRect v60;

  Espresso::abstract_blob_container::shape((char *)&v54, a1);
  if (*(_DWORD *)(a5 + 88) || (v12 = v54, CVPixelBufferGetWidth(a4) != v12))
  {
    v14 = 1;
  }
  else
  {
    v13 = v55;
    v14 = CVPixelBufferGetHeight(a4) != v13;
  }
  if (!a4)
    Espresso::throw_exception_selector<Espresso::generic_error>("Unexpected null pointer");
  if (CVPixelBufferGetIOSurface(a4))
    v16 = 1;
  else
    v16 = v14;
  if ((v16 & 1) == 0)
  {
    Espresso::abstract_blob_container::__copy_from_CVPixelBuffer((int *)a1, (uint64_t)a2, v15, a4, (__int128 *)a5, a6);
    goto LABEL_44;
  }
  if (CVPixelBufferGetPixelFormatType(a4) == 1278226536)
  {
    Espresso::MetalLowmemEngine::blob_container::cvpix_to_texture((Espresso::MetalLowmemEngine::blob_container *)a1, a4, *(_DWORD *)(a5 + 92));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    if (v17)
    {
      v18 = v17;
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, id, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, v18, a5, a6);
      v19 = v18;
    }
    else
    {
      Espresso::MetalLowmemEngine::blob_container::slow_copy_kCVPixelFormatType_OneComponent16Half_shared(a2, a4, (void *)a1, 1u);
      v19 = 0;
    }
    goto LABEL_43;
  }
  v20 = *(std::__shared_weak_count **)(*(_QWORD *)(a1 + 216) + 96);
  v53 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
  }
  v23 = v54;
  v24 = *(_DWORD *)(a5 + 88);
  if (v24 == 270 || v24 == 90)
  {
    v52 = v55;
  }
  else
  {
    v52 = v54;
    v23 = v55;
  }
  Width = CVPixelBufferGetWidth(a4);
  Height = CVPixelBufferGetHeight(a4);
  src_crop_rect = Espresso::abstract_blob_container::get_src_crop_rect(Width, Height, (_DWORD *)a5, v52, v23);
  if (!*(_BYTE *)(a5 + 85) && v14)
  {
    v32 = src_crop_rect;
    v33 = v28;
    v34 = *(_QWORD *)(a1 + 216);
    if (!*(_QWORD *)(v34 + 72))
    {
      _ZNSt3__115allocate_sharedB8ne180100IN8Espresso9hw_scalerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&pixelBufferOut);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](*(_QWORD *)(a1 + 216) + 72, (__int128 *)&pixelBufferOut);
      size = (std::__shared_weak_count *)pixelBufferOut.__r_.__value_.__l.__size_;
      if (pixelBufferOut.__r_.__value_.__l.__size_)
      {
        v36 = (unint64_t *)(pixelBufferOut.__r_.__value_.__l.__size_ + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v34 = *(_QWORD *)(a1 + 216);
    }
    if (std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v34 + 48), a3, (uint64_t)a3)[7])
    {
      v38 = std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 48), a3, (uint64_t)a3);
      if (CVPixelBufferGetWidth((CVPixelBufferRef)v38[7]) == v52)
      {
        v39 = std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 48), a3, (uint64_t)a3);
        if (CVPixelBufferGetHeight((CVPixelBufferRef)v39[7]) == v23)
        {
LABEL_41:
          v45 = (__CVBuffer *)std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 48), a3, (uint64_t)a3)[7];
          v46 = *(VTSessionRef **)(*(_QWORD *)(a1 + 216) + 72);
          v60.origin.x = (double)(int)v32;
          v60.origin.y = (double)SHIDWORD(v32);
          v60.size.width = (double)(int)v33;
          v60.size.height = (double)SHIDWORD(v33);
          DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v60);
          VTSessionSetProperty(*v46, (CFStringRef)*MEMORY[0x1E0CED850], DictionaryRepresentation);
          CFRelease(DictionaryRepresentation);
          v48 = VTPixelTransferSessionTransferImage((VTPixelTransferSessionRef)*v46, a4, v45);
          if (v48)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::to_string(&v58, v48);
            v50 = std::string::insert(&v58, 0, "Error scaling ");
            v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
            pixelBufferOut.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
            *(_OWORD *)&pixelBufferOut.__r_.__value_.__l.__data_ = v51;
            v50->__r_.__value_.__l.__size_ = 0;
            v50->__r_.__value_.__r.__words[2] = 0;
            v50->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, &pixelBufferOut);
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          Espresso::MetalLowmemEngine::blob_container::cvpix_to_texture((Espresso::MetalLowmemEngine::blob_container *)a1, v45, *(_DWORD *)(a5 + 92));
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = v53;
          if (!v53)
            goto LABEL_43;
          goto LABEL_24;
        }
      }
      v40 = std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 48), a3, (uint64_t)a3);
      CVPixelBufferRelease((CVPixelBufferRef)v40[7]);
      std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 48), a3, (uint64_t)a3)[7] = 0;
    }
    pixelBufferOut.__r_.__value_.__r.__words[0] = 0;
    v41 = (void *)MEMORY[0x1E0C99D80];
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionary");
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v41, "dictionaryWithObjectsAndKeys:", v42, *MEMORY[0x1E0CA8FF0], 0);
    v43 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v52, v23, 0x42475241u, v43, (CVPixelBufferRef *)&pixelBufferOut);
    v44 = (uint64_t *)pixelBufferOut.__r_.__value_.__r.__words[0];

    std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 48), a3, (uint64_t)a3)[7] = v44;
    goto LABEL_41;
  }
  Espresso::MetalLowmemEngine::blob_container::cvpix_to_texture((Espresso::MetalLowmemEngine::blob_container *)a1, a4, *(_DWORD *)(a5 + 92));
  v29 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, _QWORD *, _QWORD *, id, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2, a3, v29, a5, a6);
  v19 = v29;
  if (v20)
  {
LABEL_24:
    v30 = (unint64_t *)&v20->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_43:

LABEL_44:
  if (__p)
  {
    v57 = __p;
    operator delete(__p);
  }
}

void sub_1918AD8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;
  uint64_t v29;

  if (*(char *)(v29 - 89) < 0)
    operator delete(*(void **)(v29 - 112));
  if (a27 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);

      if (a19)
      {
        a20 = (uint64_t)a19;
        operator delete(a19);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v27);
  goto LABEL_8;
}

void Espresso::MetalLowmemEngine::blob_container::__copy_from_MTLTexture(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, uint64_t a5, int a6)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t src_crop_rect;
  int v21;
  float v22;
  int v23;
  float v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  id v37;
  uint64_t *v38;
  uint64_t *v39;
  id *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  void *v45;
  id v46;
  uint64_t *v47;
  void *v48;
  unint64_t *v54;
  unint64_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  _OWORD v64[2];
  uint64_t v65;
  void *__p;
  void *v67;
  uint64_t v68;
  float64x2_t v69;
  double v70;
  double v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  void *v75;
  _BYTE *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;

  kdebug_trace();
  v12 = *(_QWORD *)(a1 + 216);
  v14 = *(_QWORD *)(v12 + 88);
  v13 = *(std::__shared_weak_count **)(v12 + 96);
  v77 = v14;
  v78 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  if (objc_msgSend(a4, "pixelFormat") == 25 || objc_msgSend(a4, "pixelFormat") == 10)
  {
    Espresso::MetalLowmemEngine::blob_container::__copy_from_or_to_external_MTLTexture(a1, a2, a4, a5, 0, objc_msgSend(a4, "pixelFormat"));
  }
  else
  {
    Espresso::abstract_blob_container::shape((char *)&v72, a1);
    v17 = v72;
    v18 = *(_DWORD *)(a5 + 88);
    if (v18 == 270 || v18 == 90)
    {
      v19 = DWORD1(v72);
    }
    else
    {
      v17 = DWORD1(v72);
      v19 = v72;
    }
    src_crop_rect = Espresso::abstract_blob_container::get_src_crop_rect(objc_msgSend(a4, "width"), objc_msgSend(a4, "height"), (_DWORD *)a5, v19, v17);
    v22 = (float)v19 / (float)v21;
    v24 = (float)v17 / (float)v23;
    v69.f64[0] = v22;
    v69.f64[1] = v24;
    if ((int)src_crop_rect > 0 || (v25 = 0.0, v26 = 0.0, SHIDWORD(src_crop_rect) >= 1))
    {
      v25 = (float)-(float)((float)(int)src_crop_rect * v22);
      v26 = (float)-(float)((float)SHIDWORD(src_crop_rect) * v24);
    }
    v70 = v25;
    v71 = v26;
    if (*(_BYTE *)(a5 + 85))
    {
      if (!*(_DWORD *)(a5 + 88)
        && (v27 = (int)v72, objc_msgSend(a4, "width") == v27)
        && (v28 = SDWORD1(v72), objc_msgSend(a4, "height") == v28))
      {
        v29 = a4;
      }
      else
      {
        if (!std::__tree<std::__value_type<std::string,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto10MTLTexture}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(*(uint64_t ***)(a1 + 216), a3, (uint64_t)a3)[7]|| objc_msgSend(std::__tree<std::__value_type<std::string,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto10MTLTexture}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(*(uint64_t ***)(a1 + 216), a3, (uint64_t)a3)[7], "width") != v19|| objc_msgSend(std::__tree<std::__value_type<std::string,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto10MTLTexture}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(*(uint64_t ***)(a1 + 216), a3, (uint64_t)a3)[7], "height") != v17)
        {
          v30 = (void *)objc_opt_new();
          objc_msgSend(v30, "setWidth:", v19);
          objc_msgSend(v30, "setHeight:", v17);
          objc_msgSend(v30, "setPixelFormat:", 80);
          objc_msgSend(v30, "setUsage:", 3);
          objc_msgSend(v30, "setTextureType:", 2);
          v31 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 88) + 144), "newTextureWithDescriptor:", v30);
          v32 = std::__tree<std::__value_type<std::string,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto10MTLTexture}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(*(uint64_t ***)(a1 + 216), a3, (uint64_t)a3);
          v33 = v32[7];
          v32[7] = (uint64_t *)v31;

          v34 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6E80]), "initWithDevice:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 216) + 88) + 144));
          v35 = std::__tree<std::__value_type<std::string,MPSImageLanczosScale * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSImageLanczosScale * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSImageLanczosScale * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 24), a3, (uint64_t)a3);
          v36 = v35[7];
          v35[7] = (uint64_t *)v34;

        }
        v37 = a4;
        v38 = std::__tree<std::__value_type<std::string,MPSImageLanczosScale * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSImageLanczosScale * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSImageLanczosScale * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(*(_QWORD *)(a1 + 216) + 24), a3, (uint64_t)a3)[7];
        v39 = v38;
        if (*(_BYTE *)(v14 + 64))
          objc_msgSend(v38, "setLabel:", CFSTR("MPSImageLanczosScale"));
        if (*(_QWORD *)a2)
        {
          if (v40)
          {
            v41 = *(std::__shared_weak_count **)(a2 + 8);
            if (v41)
            {
              v42 = (unint64_t *)&v41->__shared_owners_;
              do
                v43 = __ldxr(v42);
              while (__stxr(v43 + 1, v42));
              do
                v44 = __ldaxr(v42);
              while (__stlxr(v44 - 1, v42));
              if (!v44)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
        }
        else
        {
          v40 = 0;
        }
        objc_msgSend(v40[19], "endEncoding");
        v46 = v40[19];
        v40[19] = 0;

        objc_msgSend(v39, "setScaleTransform:", &v69);
        objc_msgSend(v39, "encodeToCommandBuffer:sourceTexture:destinationTexture:", v40[18], v37, std::__tree<std::__value_type<std::string,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto10MTLTexture}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(*(uint64_t ***)(a1 + 216), a3, (uint64_t)a3)[7]);
        v47 = std::__tree<std::__value_type<std::string,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto10MTLTexture}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(*(uint64_t ***)(a1 + 216), a3, (uint64_t)a3)[7];

        v29 = v47;
      }
      v48 = *(void **)(a1 + 168);
      v59[0] = v72;
      v59[1] = v73;
      v60 = v74;
      v61 = 0;
      v62 = 0;
      v63 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v61, v75, (uint64_t)v76, (v76 - (_BYTE *)v75) >> 2);
      __asm { FMOV            V0.2D, #1.0 }
      v56 = _Q0;
      v57 = 0;
      v58 = 0;
      Espresso::MetalLowmemEngine::blob_container::image_mean_bias(a1, a2, a6, v48, v29, (__int128 *)a5, (int32x2_t *)v59, &v56);
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }

    }
    else
    {
      v45 = *(void **)(a1 + 168);
      v64[0] = v72;
      v64[1] = v73;
      v65 = v74;
      __p = 0;
      v67 = 0;
      v68 = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v75, (uint64_t)v76, (v76 - (_BYTE *)v75) >> 2);
      Espresso::MetalLowmemEngine::blob_container::image_mean_bias(a1, a2, a6, v45, a4, (__int128 *)a5, (int32x2_t *)v64, &v69);
      if (__p)
      {
        v67 = __p;
        operator delete(__p);
      }
    }
    if (v75)
    {
      v76 = v75;
      operator delete(v75);
    }
    v13 = v78;
  }

  if (v13)
  {
    v54 = (unint64_t *)&v13->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1918ADF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  void *v27;
  uint64_t v28;
  void *v30;

  if (__p)
    operator delete(__p);
  v30 = *(void **)(v28 - 128);
  if (v30)
  {
    *(_QWORD *)(v28 - 120) = v30;
    operator delete(v30);
  }

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MetalLowmemEngine::blob_container::__copy_to_CVPixelBuffer(Espresso::MetalLowmemEngine::blob_container *a1, _QWORD *a2, int a3, CVPixelBufferRef pixelBuffer)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  void *v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *j;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  void *v34;
  OSType PixelFormatType;
  OSType v36;
  uint8x8_t v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t *v40;
  unint64_t v41;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t v52;
  void *__p[2];
  __int128 v55;
  float v56;
  _QWORD v57[9];
  int v58;
  int v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  if (!pixelBuffer)
    Espresso::throw_exception_selector<Espresso::generic_error>("Unexpected null pointer");
  v6 = 0;
  v7 = 0;
  v8 = 0;
  qmemcpy(v57, "h00LARGB800L", 12);
  *(_OWORD *)__p = 0u;
  v55 = 0u;
  v56 = 1.0;
  do
  {
    v9 = *((unsigned int *)v57 + v8);
    if (v6)
    {
      v10 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
      v10.i16[0] = vaddlv_u8(v10);
      if (v10.u32[0] > 1uLL)
      {
        v4 = *((unsigned int *)v57 + v8);
        if (v6 <= v9)
          v4 = v9 % v6;
      }
      else
      {
        v4 = ((_DWORD)v6 - 1) & v9;
      }
      v11 = (uint64_t **)*((_QWORD *)__p[0] + v4);
      if (v11)
      {
        for (i = *v11; i; i = (uint64_t *)*i)
        {
          v13 = i[1];
          if (v13 == v9)
          {
            if (*((_DWORD *)i + 4) == (_DWORD)v9)
              goto LABEL_75;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v6)
                v13 %= v6;
            }
            else
            {
              v13 &= v6 - 1;
            }
            if (v13 != v4)
              break;
          }
        }
      }
    }
    v14 = operator new(0x18uLL);
    *v14 = 0;
    v14[1] = v9;
    *((_DWORD *)v14 + 4) = v9;
    v15 = (float)(unint64_t)(v7 + 1);
    if (!v6 || (float)(v56 * (float)v6) < v15)
    {
      v16 = (v6 & (v6 - 1)) != 0;
      if (v6 < 3)
        v16 = 1;
      v17 = v16 | (2 * v6);
      v18 = vcvtps_u32_f32(v15 / v56);
      if (v17 <= v18)
        prime = (int8x8_t)v18;
      else
        prime = (int8x8_t)v17;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v6 = (unint64_t)__p[1];
      }
      if (*(_QWORD *)&prime > v6)
        goto LABEL_31;
      if (*(_QWORD *)&prime < v6)
      {
        v26 = vcvtps_u32_f32((float)*((unint64_t *)&v55 + 1) / v56);
        if (v6 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
        {
          v26 = std::__next_prime(v26);
        }
        else
        {
          v28 = 1 << -(char)__clz(v26 - 1);
          if (v26 >= 2)
            v26 = v28;
        }
        if (*(_QWORD *)&prime <= v26)
          prime = (int8x8_t)v26;
        if (*(_QWORD *)&prime >= v6)
        {
          v6 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_31:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v20 = operator new(8 * *(_QWORD *)&prime);
            v21 = __p[0];
            __p[0] = v20;
            if (v21)
              operator delete(v21);
            v22 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v22++) = 0;
            while (*(_QWORD *)&prime != v22);
            v23 = (_QWORD **)v55;
            if ((_QWORD)v55)
            {
              v24 = *(_QWORD *)(v55 + 8);
              v25 = (uint8x8_t)vcnt_s8(prime);
              v25.i16[0] = vaddlv_u8(v25);
              if (v25.u32[0] > 1uLL)
              {
                if (v24 >= *(_QWORD *)&prime)
                  v24 %= *(_QWORD *)&prime;
              }
              else
              {
                v24 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v24) = &v55;
              for (j = *v23; j; v24 = v30)
              {
                v30 = j[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*((_QWORD *)__p[0] + v30))
                  {
                    *((_QWORD *)__p[0] + v30) = v23;
                    goto LABEL_56;
                  }
                  *v23 = (_QWORD *)*j;
                  *j = **((_QWORD **)__p[0] + v30);
                  **((_QWORD **)__p[0] + v30) = j;
                  j = v23;
                }
                v30 = v24;
LABEL_56:
                v23 = (_QWORD **)j;
                j = (_QWORD *)*j;
              }
            }
            v6 = (unint64_t)prime;
            goto LABEL_60;
          }
          v34 = __p[0];
          __p[0] = 0;
          if (v34)
            operator delete(v34);
          v6 = 0;
          __p[1] = 0;
        }
      }
LABEL_60:
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v6 <= v9)
          v4 = v9 % v6;
        else
          v4 = v9;
      }
      else
      {
        v4 = ((_DWORD)v6 - 1) & v9;
      }
    }
    v31 = __p[0];
    v32 = (_QWORD *)*((_QWORD *)__p[0] + v4);
    if (v32)
    {
      *v14 = *v32;
LABEL_73:
      *v32 = v14;
      goto LABEL_74;
    }
    *v14 = v55;
    *(_QWORD *)&v55 = v14;
    v31[v4] = &v55;
    if (*v14)
    {
      v33 = *(_QWORD *)(*v14 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v33 >= v6)
          v33 %= v6;
      }
      else
      {
        v33 &= v6 - 1;
      }
      v32 = (char *)__p[0] + 8 * v33;
      goto LABEL_73;
    }
LABEL_74:
    v7 = ++*((_QWORD *)&v55 + 1);
LABEL_75:
    ++v8;
  }
  while (v8 != 3);
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (!__p[1])
    goto LABEL_102;
  v36 = PixelFormatType;
  v37 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
  v37.i16[0] = vaddlv_u8(v37);
  if (v37.u32[0] > 1uLL)
  {
    v38 = PixelFormatType;
    if (__p[1] <= (void *)PixelFormatType)
      v38 = PixelFormatType % (unint64_t)__p[1];
  }
  else
  {
    v38 = (LODWORD(__p[1]) - 1) & PixelFormatType;
  }
  v39 = (uint64_t **)*((_QWORD *)__p[0] + v38);
  if (!v39 || (v40 = *v39) == 0)
LABEL_102:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported pixelformat for output copy");
  while (2)
  {
    v41 = v40[1];
    if (v41 != PixelFormatType)
    {
      if (v37.u32[0] > 1uLL)
      {
        if ((void *)v41 >= __p[1])
          v41 %= (unint64_t)__p[1];
      }
      else
      {
        v41 &= (unint64_t)__p[1] - 1;
      }
      if (v41 != v38)
        goto LABEL_102;
      goto LABEL_101;
    }
    if (*((_DWORD *)v40 + 4) != PixelFormatType)
    {
LABEL_101:
      v40 = (uint64_t *)*v40;
      if (!v40)
        goto LABEL_102;
      continue;
    }
    break;
  }
  LODWORD(v57[0]) = 1065353216;
  memset((char *)&v57[1] + 4, 0, 20);
  *(_QWORD *)((char *)v57 + 4) = 0x100000000;
  v57[7] = 0;
  v57[8] = 0;
  v57[4] = 0;
  v57[5] = 0;
  __asm { FMOV            V0.2S, #1.0 }
  v57[6] = _D0;
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  Espresso::MetalLowmemEngine::blob_container::cvpix_to_texture(a1, pixelBuffer, 0);
  v47 = (void *)objc_claimAutoreleasedReturnValue();
  v48 = v47;
  if (v47 || v36 != 1278226536)
  {
    v49 = objc_msgSend(v47, "pixelFormat", a2);
    Espresso::MetalLowmemEngine::blob_container::__copy_from_or_to_external_MTLTexture((uint64_t)a1, v52, v48, (uint64_t)v57, 1, v49);
  }
  else
  {
    Espresso::MetalLowmemEngine::blob_container::slow_copy_kCVPixelFormatType_OneComponent16Half_shared(a2, pixelBuffer, a1, 0);
  }

  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)__p);
}

void sub_1918AE598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL Espresso::MetalLowmemEngine::blob_container::__copy_from(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v10, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v5 = v10;
  if (v10)
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5 != 0;
}

void sub_1918AE678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id Espresso::MetalLowmemEngine::blob_container::cvpix_to_texture(Espresso::MetalLowmemEngine::blob_container *this, CVPixelBufferRef pixelBuffer, int a3)
{
  size_t Width;
  size_t Height;
  IOSurfaceRef IOSurface;
  uint64_t PixelFormatType;
  MTLPixelFormat v10;
  void *v11;
  void *v12;
  const void *v13;
  id *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __CVMetalTextureCache *v20;
  std::runtime_error *exception;
  CVMetalTextureRef image;
  std::__shared_weak_count *v24;

  Width = CVPixelBufferGetWidth(pixelBuffer);
  Height = CVPixelBufferGetHeight(pixelBuffer);
  IOSurface = CVPixelBufferGetIOSurface(pixelBuffer);
  PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if ((int)PixelFormatType > 1278226535)
  {
    if ((_DWORD)PixelFormatType == 1278226536)
    {
      v10 = MTLPixelFormatR16Float;
      goto LABEL_10;
    }
    if ((_DWORD)PixelFormatType == 1380411457)
    {
      v10 = MTLPixelFormatRGBA16Float;
      goto LABEL_10;
    }
LABEL_30:
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("Invalid pixel format %d", PixelFormatType);
  }
  if ((_DWORD)PixelFormatType == 1111970369)
  {
    v10 = MTLPixelFormatBGRA8Unorm;
    goto LABEL_10;
  }
  if ((_DWORD)PixelFormatType != 1278226488)
    goto LABEL_30;
  v10 = MTLPixelFormatR8Unorm;
LABEL_10:
  v11 = 0;
  if (Width <= 0x4000 && Height <= 0x4000)
  {
    if (IOSurface)
    {
      objc_msgSend(MEMORY[0x1E0CC6BB0], "texture2DDescriptorWithPixelFormat:width:height:mipmapped:", v10, Width, Height, 0);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setUsage:", 3);
      v13 = (const void *)*((_QWORD *)this + 9);
      if (!v13
      {
        image = 0;
        v24 = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v15 = (std::__shared_weak_count *)*((_QWORD *)this + 10);
      image = (CVMetalTextureRef)v14;
      v24 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v11 = (void *)objc_msgSend(v14[18], "newTextureWithDescriptor:iosurface:plane:", v12, IOSurface, 0);
      if (v15)
      {
        v18 = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }

    }
    else
    {
      image = 0;
      CVMetalTextureCacheFlush(*(CVMetalTextureCacheRef *)(*((_QWORD *)this + 27) + 104), 0);
      v20 = *(__CVMetalTextureCache **)(*((_QWORD *)this + 27) + 104);
      if (!v20)
        Espresso::throw_exception_selector<Espresso::memory_error>("Missing videoTextureCache");
      if (CVMetalTextureCacheCreateTextureFromImage((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v20, pixelBuffer, 0, v10, Width, Height, a3, &image)|| !image)
      {
        Espresso::throw_exception_selector<Espresso::memory_error>("Cannot create CVMetalTextureRef");
      }
      CVMetalTextureGetTexture(image);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      CFRelease(image);
    }
  }
  return v11;
}

void sub_1918AE924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::blob_container::slow_copy_kCVPixelFormatType_OneComponent16Half_shared(_QWORD *a1, __CVBuffer *a2, void *lpsrc, unsigned int a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __IOSurface *IOSurface;
  __IOSurface *v12;
  IOSurfaceLockOptions v13;
  char *BaseAddress;
  char *v15;
  vImagePixelCount data_low;
  size_t Height;
  size_t v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  size_t v23;
  uint64_t v24;
  uint64_t i;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  _QWORD *v34;
  IOSurfaceLockOptions options;
  void *v36;
  vImage_Buffer src;
  void *__p;
  void *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  vImage_Buffer dest;

  if (lpsrc)
  {
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  if (!(v8 | v9))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Expected textures or buffers GPU blob.");
  if (v8)
    v10 = v8;
  else
    v10 = v9;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v10 + 56))(&v40);
  if (!v40)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to create host blob");
  IOSurface = CVPixelBufferGetIOSurface(a2);
  v12 = IOSurface;
  if (a4)
    v13 = 5;
  else
    v13 = 4;
  if (IOSurface)
  {
    IOSurfaceLock(IOSurface, v13, 0);
    BaseAddress = (char *)IOSurfaceGetBaseAddress(v12);
  }
  else
  {
    CVPixelBufferLockBaseAddress(a2, a4);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
  }
  v15 = BaseAddress;
  v36 = (void *)v9;
  Espresso::abstract_blob_container::shape((char *)&src, (uint64_t)lpsrc);
  data_low = SLODWORD(src.data);
  if (__p)
  {
    v39 = __p;
    operator delete(__p);
  }
  Height = CVPixelBufferGetHeight(a2);
  v18 = CVPixelBufferGetBytesPerRow(a2) >> 1;
  if (a4)
  {
    v34 = a1;
    options = v13;
    if (Height)
    {
      v19 = *(char **)(v40 + 24);
      v20 = 2 * v18;
      v21 = 1;
      do
      {
        src.data = v15;
        src.height = 1;
        src.width = data_low;
        src.rowBytes = 2 * data_low;
        dest.data = v19;
        dest.height = 1;
        dest.width = data_low;
        dest.rowBytes = 4 * data_low;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        v22 = Height > v21++;
        v19 += 4 * data_low;
        v15 += v20;
      }
      while (v22);
    }
    v13 = options;
    if (v8)
      (*(void (**)(unint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 48))(v8, v34, &v40);
    if (v36)
      (*(void (**)(void *, _QWORD *, uint64_t *))(*(_QWORD *)v36 + 48))(v36, v34, &v40);
  }
  else
  {
    if (v8)
      (*(void (**)(unint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v8 + 40))(v8, a1, &v40);
    if (v36)
      (*(void (**)(void *, _QWORD *, uint64_t *))(*(_QWORD *)v36 + 40))(v36, a1, &v40);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
    if (Height)
    {
      LODWORD(v23) = 0;
      v24 = *(_QWORD *)(v40 + 24);
      do
      {
        if ((_DWORD)data_low)
        {
          for (i = 0; i != data_low; ++i)
          {
            _S0 = *(_DWORD *)(v24 + 4 * i);
            __asm { FCVT            H0, S0 }
            *(_WORD *)&v15[2 * i] = _S0;
          }
        }
        v23 = (v23 + 1);
        v15 += 2 * v18;
        v24 += 4 * data_low;
      }
      while (Height > v23);
    }
  }
  if (v12)
    IOSurfaceUnlock(v12, v13, 0);
  else
    CVPixelBufferUnlockBaseAddress(a2, a4);
  v31 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1918AEC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::blob_container::__copy_from_or_to_external_MTLTexture(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, uint64_t a6)
{
  id v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  id v22;
  void *v23;
  id v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  const char *v36;
  float v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  const __CFString *v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  const char *v51;
  _QWORD v52[3];
  _QWORD v53[3];
  id v54[2];
  _DWORD v55[7];
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;

  v11 = a3;
  if (*(_QWORD *)a2)
  {
    if (v12)
    {
      v13 = *(std::__shared_weak_count **)(a2 + 8);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v17 = *(_QWORD *)(a1 + 216);
  v19 = *(_QWORD *)(v17 + 88);
  v18 = *(std::__shared_weak_count **)(v17 + 96);
  v57 = v19;
  v58 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  if ((a5 & 1) != 0)
  {
    v22 = v11;
    v23 = *(void **)(a1 + 168);
  }
  else
  {
    v22 = *(id *)(a1 + 168);
    v23 = v11;
  }
  v24 = v23;
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 184), "count") > 1)
  {
    v51 = "Array of texarrays not supported with CVPixelBuffer copy";
    goto LABEL_85;
  }
  if (objc_msgSend(*(id *)(a1 + 168), "textureType") != 3)
  {
    v51 = "CVPixelBuffer copy not supported on MetalLowmem.";
LABEL_85:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>(v51);
  }
  if (*(_QWORD *)(a4 + 104))
    goto LABEL_82;
  v25 = *(unsigned __int8 *)(a4 + 84);
  v26 = *(unsigned __int8 *)(a4 + 85);
  v27 = *(_DWORD *)(a4 + 88);
  v28 = *(_DWORD *)(a4 + 92);
  v29 = *(_DWORD *)(a4 + 96);
  v30 = *(_DWORD *)(a4 + 100);
  if (v30)
  {
    if (v30 != *(_DWORD *)(a1 + 12))
      goto LABEL_82;
  }
  if (!v29)
  {
    if (!(v26 | v25) && !v28 && !v27)
    {
      v29 = *(_DWORD *)(a1 + 8);
      goto LABEL_31;
    }
LABEL_82:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("CVPixelBuffer OneComponenetHalf - only default settings supported for copy.");
  }
  if (v26 | v25 || v29 != *(_DWORD *)(a1 + 8) || v28 || v27)
    goto LABEL_82;
LABEL_31:
  v31 = v29 - 1;
  if (v29 < 1)
    v31 = v29 + 2;
  v33 = *(_DWORD *)(a1 + 12);
  v32 = *(_DWORD *)(a1 + 16);
  v34 = v32 - 1;
  if (v32 < 1)
    v34 = v32 + 2;
  v35 = (v34 >> 2) + 1;
  v55[0] = v29;
  v55[1] = v33;
  v55[2] = 0;
  v55[3] = v32;
  v55[4] = *(_DWORD *)(a1 + 24) * *(_DWORD *)(a1 + 20);
  v55[5] = v35;
  v55[6] = (v31 >> 2) + 1;
  v56 = 0x3F80000000000000;
  if (a6 == 80)
  {
    LODWORD(v56) = 1;
    v37 = 255.0;
    if (a5)
      v37 = 0.0039216;
    *((float *)&v56 + 1) = v37;
    v38 = *(void **)(a1 + 168);
    if (a5)
    {
      if (objc_msgSend(v38, "pixelFormat") == 115)
      {
        v36 = "TARR_f16_image_copy_to_MTLPixelFormatBGRA8Unorm";
        goto LABEL_61;
      }
      if (objc_msgSend(*(id *)(a1 + 168), "pixelFormat") != 125)
        goto LABEL_87;
      v36 = "TARR_f32_image_copy_to_MTLPixelFormatBGRA8Unorm";
    }
    else
    {
      if (objc_msgSend(v38, "pixelFormat") == 115)
      {
        v36 = "TARR_f16_image_copy_from_MTLPixelFormatBGRA8Unorm";
        goto LABEL_61;
      }
      if (objc_msgSend(*(id *)(a1 + 168), "pixelFormat") != 125)
        goto LABEL_87;
      v36 = "TARR_f32_image_copy_from_MTLPixelFormatBGRA8Unorm";
    }
  }
  else
  {
    if (a6 == 25)
    {
      if (a5)
      {
LABEL_41:
        if (objc_msgSend(*(id *)(a1 + 168), "pixelFormat") == 115)
        {
          v36 = "TARR_f16_image_copy_to_MTLPixelFormatR16Float";
          goto LABEL_61;
        }
        if (objc_msgSend(*(id *)(a1 + 168), "pixelFormat") == 125)
        {
          v36 = "TARR_f32_image_copy_to_MTLPixelFormatR16Float";
          goto LABEL_61;
        }
LABEL_87:
        Espresso::throw_exception_selector<Espresso::generic_error>("Compute path must be FP32 or FP16");
      }
    }
    else
    {
      if (a6 != 10)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Unsupported pixel format for copy");
      LODWORD(v56) = 1;
      if (a5)
      {
        HIDWORD(v56) = 998277249;
        goto LABEL_41;
      }
      HIDWORD(v56) = 1132396544;
    }
    if (objc_msgSend(*(id *)(a1 + 168), "pixelFormat") == 115)
    {
      v36 = "TARR_f16_image_copy_from_MTLPixelFormatR16Float";
      goto LABEL_61;
    }
    if (objc_msgSend(*(id *)(a1 + 168), "pixelFormat") != 125)
      goto LABEL_87;
    v36 = "TARR_f32_image_copy_from_MTLPixelFormatR16Float";
  }
LABEL_61:
  objc_msgSend(*(id *)(v19 + 160), "kernelForFunction:cacheString:withConstants:", v36, 0, 0);
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v54, (uint64_t)v12);
  v40 = v54[0];
  v41 = v40;
  if (*(_BYTE *)(v19 + 64))
  {
    if (a5)
      v42 = CFSTR("cvpix_copy_to_output");
    else
      v42 = CFSTR("cvpix_copy_to_input");
    objc_msgSend(v40, "setLabel:", v42);
  }
  if (!v39)
    Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found.");
  objc_msgSend(v41, "setComputePipelineState:", v39);
  objc_msgSend(v41, "setTexture:atIndex:", v22, 0);
  objc_msgSend(v41, "setTexture:atIndex:", v24, 1);
  objc_msgSend(v41, "setBytes:length:atIndex:", v55, 36, 0);
  v43 = *(_DWORD *)(a1 + 20) * v35 * *(_DWORD *)(a1 + 24);
  v44 = *(_DWORD *)(a1 + 8);
  v45 = *(_DWORD *)(a1 + 12);
  if (v44 >= 32)
    v46 = 8;
  else
    v46 = 2;
  if (v45 >= 32)
    v47 = 8;
  else
    v47 = 2;
  if (v43 < 32)
    v48 = 1;
  else
    v48 = 8;
  v53[0] = (v44 - 1) / (int)v46 + 1;
  v53[1] = (v45 - 1) / (int)v47 + 1;
  v53[2] = (v43 - 1) / (int)v48 + 1;
  v52[0] = v46;
  v52[1] = v47;
  v52[2] = v48;
  objc_msgSend(v41, "dispatchThreadgroups:threadsPerThreadgroup:", v53, v52);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v54);
  if (v18)
  {
    v49 = (unint64_t *)&v18->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }

}

void sub_1918AF1C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  va_list va;

  va_start(va, a8);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13 - 96);

  _Unwind_Resume(a1);
}

void Espresso::MetalLowmemEngine::blob_container::image_mean_bias(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5, __int128 *a6, int32x2_t *a7, float64x2_t *a8)
{
  id v15;
  id v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  id v38;
  void *v39;
  int32x2_t v40;
  int32x2_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  id v49[2];
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v15 = a4;
  v16 = a5;
  if (*(_QWORD *)a2)
  {
    if (v17)
    {
      v18 = *(std::__shared_weak_count **)(a2 + 8);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(p_shared_owners);
        while (__stxr(v20 + 1, p_shared_owners));
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
  else
  {
    v17 = 0;
  }
  v22 = *(_QWORD *)(a1 + 216);
  v24 = *(_QWORD *)(v22 + 88);
  v23 = *(std::__shared_weak_count **)(v22 + 96);
  v54 = v24;
  v55 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = a6[4];
  v52 = a6[3];
  v53 = v27;
  v28 = a6[2];
  v29 = *a6;
  v50[1] = a6[1];
  v51 = v28;
  v50[0] = v29;
  *(int32x2_t *)((char *)&v51 + 4) = *a7;
  LODWORD(v51) = a3;
  LODWORD(v53) = *((_DWORD *)a6 + 22);
  *(float32x2_t *)&v27 = vcvt_f32_f64(a8[1]);
  *(float32x2_t *)&v52 = vcvt_f32_f64(*a8);
  *((_QWORD *)&v52 + 1) = v27;
  v30 = (void *)objc_opt_new();
  v31 = (void *)objc_opt_new();
  LOWORD(v49[0]) = v53;
  objc_msgSend(v31, "appendFormat:", CFSTR("%d:%d_"), 0, v53);
  objc_msgSend(v30, "setConstantValue:type:atIndex:", v49, 37, 0);
  LOWORD(v49[0]) = HIDWORD(v50[0]) != DWORD2(v50[0]);
  objc_msgSend(v31, "appendFormat:", CFSTR("%d:%d_"), 1, HIDWORD(v50[0]) != DWORD2(v50[0]));
  objc_msgSend(v30, "setConstantValue:type:atIndex:", v49, 37, 1);
  v32 = *((unsigned __int8 *)a6 + 84);
  LOWORD(v49[0]) = *((unsigned __int8 *)a6 + 84);
  objc_msgSend(v31, "appendFormat:", CFSTR("%d:%d_"), 3, v32);
  objc_msgSend(v30, "setConstantValue:type:atIndex:", v49, 41, 3);
  LOWORD(v49[0]) = *((_DWORD *)a6 + 18);
  objc_msgSend(v31, "appendFormat:", CFSTR("%d:%d_"), 4, LOWORD(v49[0]));
  objc_msgSend(v30, "setConstantValue:type:atIndex:", v49, 41, 4);
  v33 = objc_msgSend(v15, "textureType");
  v34 = objc_retainAutorelease(v31);
  v35 = objc_msgSend(v34, "UTF8String");
  if (v33 == 3)
    v36 = "TARR_image_scale_bias";
  else
    v36 = "T2D_image_scale_bias";
  objc_msgSend(*(id *)(v24 + 160), "kernelForFunction:cacheString:withConstants:", v36, v35, v30);
  v37 = (void *)objc_claimAutoreleasedReturnValue();
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v49, (uint64_t)v17);
  v38 = v49[0];
  v39 = v38;
  if (*(_BYTE *)(v24 + 64))
    objc_msgSend(v38, "setLabel:", CFSTR("image_mean_bias"));
  if (!v37)
    Espresso::throw_exception_selector<Espresso::generic_error>("Kernel not found.");
  objc_msgSend(v39, "setComputePipelineState:", v37);
  objc_msgSend(v39, "setTexture:atIndex:", v15, 0);
  objc_msgSend(v39, "setTexture:atIndex:", v16, 1);
  objc_msgSend(v39, "setBytes:length:atIndex:", v50, 80, 0);
  v40 = vadd_s32(*a7, (int32x2_t)-1);
  v41 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v40, (uint32x2_t)vcltz_s32(v40), 0x1EuLL), 2uLL);
  *(_QWORD *)&v42 = v41.i32[0];
  *((_QWORD *)&v42 + 1) = v41.i32[1];
  v47 = v42;
  v48 = 1;
  v45 = vdupq_n_s64(4uLL);
  v46 = 1;
  objc_msgSend(v39, "dispatchThreadgroups:threadsPerThreadgroup:", &v47, &v45);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v49);
  if (v23)
  {
    v43 = (unint64_t *)&v23->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }

}

void sub_1918AF5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v6 - 104);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,objc_object  {objcproto10MTLTexture}* {__strong}>,std::__map_value_compare<std::string,objc_object  {objcproto10MTLTexture}* {__strong},std::less<std::string>,true>,std::allocator<objc_object  {objcproto10MTLTexture}* {__strong}>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::piecewise_construct_t const&<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x40uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1918AF754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,MPSImageLanczosScale * {__strong}>,std::__map_value_compare<std::string,std::__value_type<std::string,MPSImageLanczosScale * {__strong}>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MPSImageLanczosScale * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  _QWORD *v10;
  _QWORD *v11;
  std::string *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD v16[2];
  char v17;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v10 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v7;
        v8 = v7;
        if (!*v7)
          goto LABEL_7;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2))
        return v7;
      v8 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    v11 = operator new(0x40uLL);
    v16[0] = v11;
    v16[1] = v6;
    v17 = 0;
    v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(_QWORD *)(a3 + 16);
    }
    v11[7] = 0;
    v17 = 1;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v7;
    *v8 = v11;
    v13 = (uint64_t *)**a1;
    v14 = v11;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1918AF894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::factory_object>({block_pointer} {__strong})(void)>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN8Espresso9hw_scalerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  char *v2;
  uint64_t result;
  std::runtime_error *exception;

  v2 = (char *)operator new(0x20uLL);
  *((_QWORD *)v2 + 1) = 0;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &off_1E2DC2668;
  *((_QWORD *)v2 + 3) = 0;
  result = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (VTPixelTransferSessionRef *)v2 + 3);
  if (!*((_QWORD *)v2 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unable to create scaler session");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1918AF944(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,__CVBuffer *>,std::__map_value_compare<std::string,std::__value_type<std::string,__CVBuffer *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,__CVBuffer *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  _QWORD *v8;
  uint64_t **v9;
  _QWORD *v10;
  std::string *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v5;
        v8 = v5 + 4;
        if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4))
          break;
        v5 = *v6;
        v9 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a2))
        return v6;
      v9 = v6 + 1;
      v5 = v6[1];
      if (!v5)
        goto LABEL_9;
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_9:
    v10 = operator new(0x40uLL);
    v11 = (std::string *)(v10 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v10[6] = *(_QWORD *)(a3 + 16);
    }
    v10[7] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v6;
    *v9 = v10;
    v12 = (uint64_t *)**a1;
    v13 = v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v10;
}

void sub_1918AFA74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::hw_scaler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::hw_scaler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::hw_scaler>::__on_zero_shared(uint64_t a1)
{
  OpaqueVTPixelTransferSession *v2;
  const void *v3;

  v2 = *(OpaqueVTPixelTransferSession **)(a1 + 24);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    v3 = *(const void **)(a1 + 24);
    if (v3)
      CFRelease(v3);
  }
}

_QWORD *std::dynamic_pointer_cast[abi:ne180100]<Espresso::MetalLowmemEngine::blob_container,Espresso::abstract_blob_container>(_QWORD *result, void *lpsrc, uint64_t a3)
{
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;

  v3 = result;
  if (lpsrc
  {
    *v3 = result;
    v3[1] = a3;
    if (a3)
    {
      v5 = (unint64_t *)(a3 + 8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
  }
  else
  {
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void Espresso::MetalLowmemEngine::blob_container_options::~blob_container_options(Espresso::MetalLowmemEngine::blob_container_options *this)
{
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
  JUMPOUT(0x19401CD90);
}

void EspressoLight::espresso_nitro_plan::~espresso_nitro_plan(EspressoLight::espresso_nitro_plan *this)
{
  EspressoLight::espresso_nitro_plan::~espresso_nitro_plan(this);
  JUMPOUT(0x19401CD90);
}

{
  *(_QWORD *)this = &off_1E2D59588;
  std::unique_ptr<EspressoLight::espresso_nitro_plan::priv_t>::reset[abi:ne180100]((uint64_t *)this + 145, 0);
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)this + 1128, *((_QWORD **)this + 142));
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 139));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 1088);
  if (*((char *)this + 1087) < 0)
    operator delete(*((void **)this + 133));
  *(_QWORD *)this = off_1E2D59730;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 1048);

}

uint64_t EspressoLight::espresso_nitro_plan::add_network(uint64_t a1, char *a2)
{
  char *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string *p_str;
  std::string::size_type size;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  int v15;
  int v16;
  std::string::size_type v17;
  std::string::size_type v18;
  _QWORD *i;
  uint64_t v20;
  std::string::size_type v21;
  unint64_t v22;
  std::string::size_type *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  std::string::size_type *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string::size_type v35;
  int64x2_t v36;
  Espresso::tracer *v37;
  unint64_t v38;
  std::string v40;
  std::string __str;
  std::string __p;
  std::string v43;
  std::string v44;
  unint64_t v45;
  uint64_t v46;
  std::string v47;
  uint64_t v48[2];

  if (*(_QWORD *)(a1 + 1088))
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Program has already been loaded");
  v4 = (char *)operator new(0x108uLL);
  *(_QWORD *)v4 = &off_1E2DB6188;
  *((_QWORD *)v4 + 1) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *((_QWORD *)v4 + 13) = 0;
  *((_QWORD *)v4 + 9) = v4 + 80;
  *((_QWORD *)v4 + 11) = 0;
  *((_QWORD *)v4 + 12) = v4 + 104;
  *((_QWORD *)v4 + 16) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 14) = 0;
  *((_QWORD *)v4 + 15) = v4 + 128;
  *((_QWORD *)v4 + 19) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = v4 + 152;
  *((_QWORD *)v4 + 22) = 0;
  *(_OWORD *)(v4 + 56) = 0u;
  *((_QWORD *)v4 + 20) = 0;
  *((_QWORD *)v4 + 21) = v4 + 176;
  *((_QWORD *)v4 + 25) = 0;
  *((_QWORD *)v4 + 23) = 0;
  *((_QWORD *)v4 + 24) = v4 + 200;
  *((_QWORD *)v4 + 28) = 0;
  *((_QWORD *)v4 + 26) = 0;
  *((_QWORD *)v4 + 27) = v4 + 224;
  *((_QWORD *)v4 + 32) = 0;
  *((_QWORD *)v4 + 31) = 0;
  *((_QWORD *)v4 + 29) = 0;
  *((_QWORD *)v4 + 30) = v4 + 248;
  *(_QWORD *)&v5 = v4 + 24;
  *((_QWORD *)&v5 + 1) = v4;
  v6 = *(std::__shared_weak_count **)(a1 + 1096);
  *(_OWORD *)(a1 + 1088) = v5;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  v11 = (std::string *)((char *)p_str + size);
  if (size)
  {
    v12 = p_str;
    v13 = (std::string *)((char *)p_str + size);
    do
    {
      if (v12->__r_.__value_.__s.__data_[0] == 47)
      {
        v14 = 1u;
        while (v14 != 13)
        {
          if ((std::string *)((char *)v12 + v14) == v11)
            goto LABEL_25;
          v15 = v12->__r_.__value_.__s.__data_[v14];
          v16 = aCodeNitroir[v14++];
          if (v15 != v16)
            goto LABEL_16;
        }
        v13 = v12;
      }
LABEL_16:
      v12 = (std::string *)((char *)v12 + 1);
    }
    while (v12 != v11);
  }
  else
  {
    v13 = p_str;
  }
LABEL_25:
  v17 = (char *)v13 - (char *)p_str;
  if (v13 == v11)
    v18 = -1;
  else
    v18 = v17;
  std::string::basic_string(&v44, &__str, 0, v18, (std::allocator<char> *)&v47);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v44;
  nitro::nitro_program::load(*(uint64_t ***)(a1 + 1088), (const void **)&__str.__r_.__value_.__l.__data_, 9);
  for (i = *(_QWORD **)(**(_QWORD **)(a1 + 1088) + 16); i; i = (_QWORD *)*i)
    *(_QWORD *)(i[5] + 1240) = a1;
  v20 = *(_QWORD *)(a1 + 1160);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v40, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v40 = __str;
  if (*(_BYTE *)v20)
  {
    v21 = operator new();
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v43, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
    else
      v43 = v40;
    std::string::basic_string[abi:ne180100]<0>(&__p, *(char **)(v20 + 8));
    v48[0] = 0;
    v48[1] = 0;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v44, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
    else
      v44 = v43;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v47 = __p;
    Espresso::tracer::tracer(v21, v48, &v44, 0, 0, (uint64_t *)&v47);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v47.__r_.__value_.__r.__words[0] = v21;
    v22 = *(_QWORD *)(v20 + 32);
    v23 = *(std::string::size_type **)(v20 + 24);
    if ((unint64_t)v23 >= v22)
    {
      v24 = *(_QWORD *)(v20 + 16);
      v25 = ((uint64_t)v23 - v24) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v27 = v22 - v24;
      if (v27 >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      v46 = v20 + 32;
      if (v28)
        v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v28);
      else
        v29 = 0;
      v30 = (std::string::size_type *)(v28 + 8 * v25);
      v31 = v28 + 8 * v29;
      v45 = v31;
      v47.__r_.__value_.__r.__words[0] = 0;
      *v30 = v21;
      v32 = v30 + 1;
      v44.__r_.__value_.__r.__words[2] = (std::string::size_type)(v30 + 1);
      v34 = *(_QWORD **)(v20 + 16);
      v33 = *(_QWORD **)(v20 + 24);
      if (v33 == v34)
      {
        v37 = 0;
        v36 = vdupq_n_s64((unint64_t)v33);
      }
      else
      {
        do
        {
          v35 = *--v33;
          *v33 = 0;
          *--v30 = v35;
        }
        while (v33 != v34);
        v36 = *(int64x2_t *)(v20 + 16);
        v32 = (_QWORD *)v44.__r_.__value_.__r.__words[2];
        v31 = v45;
        v37 = (Espresso::tracer *)v47.__r_.__value_.__r.__words[0];
      }
      *(_QWORD *)(v20 + 16) = v30;
      *(_QWORD *)(v20 + 24) = v32;
      *(int64x2_t *)&v44.__r_.__value_.__r.__words[1] = v36;
      v38 = *(_QWORD *)(v20 + 32);
      *(_QWORD *)(v20 + 32) = v31;
      v45 = v38;
      v44.__r_.__value_.__r.__words[0] = v36.i64[0];
      std::__split_buffer<std::unique_ptr<Espresso::tracer>>::~__split_buffer((uint64_t)&v44);
      *(_QWORD *)(v20 + 24) = v32;
      if (v37)
      {
        Espresso::tracer::~tracer(v37);
        MEMORY[0x19401CD90]();
      }
    }
    else
    {
      *v23 = v21;
      *(_QWORD *)(v20 + 24) = v23 + 1;
    }
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v40.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1918B00A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;
  uint64_t v41;

  if (a40 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 48);
  if (a27 < 0)
    operator delete(a22);
  if (a33 < 0)
    operator delete(a28);
  MEMORY[0x19401CD90](v40, 0x10A0C401AD03C3FLL);
  if (a14 < 0)
    operator delete(a9);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_nitro_plan::execute_sync(EspressoLight::espresso_nitro_plan *this)
{
  int v2;
  EspressoLight::espresso_nitro_plan *v3;
  const void **v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  std::vector<int>::size_type v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t **v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  float *v28;
  uint64_t **v29;
  uint64_t **v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t **v38;
  uint64_t **v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t *v57;
  void *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  void *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  void *v74;
  void *v75;
  uint64_t *v76;
  uint64_t *v77;
  void *v78;
  void *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  void *v90;
  void *v91;
  uint64_t *v92;
  uint64_t *v93;
  void *v94;
  void *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *p_shared_owners;
  unint64_t *v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  void *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t *v116;
  void *v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t *v127;
  void *v128;
  void *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t *v133;
  void *v134;
  void *v135;
  EspressoLight::espresso_nitro_plan *v136;
  EspressoLight::espresso_nitro_plan *v137;
  uint64_t v138;
  _OWORD *v139;
  char *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  std::string v145;
  std::string v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  void *v152;
  void *v153;
  void *__p;
  void *v155;
  std::vector<int> v156;
  unint64_t v157;
  void *v158;
  _BYTE *v159;
  uint64_t *v160;
  _QWORD *v161[2];
  char v162[4];
  int v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 *v168;
  __int128 v169;
  __int128 v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;

  v162[0] = 1;
  v164 = 0u;
  v165 = 0u;
  v166 = 0u;
  v167 = 0u;
  v163 = 723714168;
  kdebug_trace();
  v2 = *((_DWORD *)this + 288);
  if (v2 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int>(v2, 1);
  v161[0] = 0;
  v161[1] = 0;
  v160 = (uint64_t *)v161;
  v3 = (EspressoLight::espresso_nitro_plan *)*((_QWORD *)this + 138);
  if (v3 != (EspressoLight::espresso_nitro_plan *)((char *)this + 1112))
  {
    while (1)
    {
      std::vector<unsigned long>::vector(&v158, 0xAuLL);
      v4 = (const void **)((char *)v3 + 56);
      v157 = 0;
      espresso_buffer_unpack_tensor_shape((int32x4_t *)((char *)v3 + 56), &v157, v158);
      std::vector<unsigned long>::resize(&v158, v157);
      if (v159 == v158)
      {
        v7 = 1;
      }
      else
      {
        v5 = (unint64_t)((v159 - (_BYTE *)v158) >> 3) <= 1 ? 1 : (v159 - (_BYTE *)v158) >> 3;
        v6 = (uint64_t *)v158;
        v7 = 1;
        do
        {
          v8 = *v6++;
          v7 *= v8;
          --v5;
        }
        while (v5);
      }
      v9 = v157 && v159 == v158;
      v10 = v9 ? 0 : v7;
      v11 = *((unsigned int *)v3 + 54);
      if ((_DWORD)v11 == 65568)
        break;
      if ((_DWORD)v11 != 131104)
        Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("Invalid storage_type %d", v11);
      if (!v157)
      {
        v37 = (uint64_t *)*(int *)*v4;
        v168 = (__int128 *)((char *)v3 + 32);
        v38 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v160, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v168);
        v39 = v38;
        switch(*((_BYTE *)v38 + 64))
        {
          case 2:
            v40 = (unint64_t *)v38[7];
            do
            {
              v41 = __ldaxr(v40);
              v42 = v41 - 1;
            }
            while (__stlxr(v42, v40));
            if (!v42)
            {
              v43 = v38[7];
              if (!v43)
                goto LABEL_216;
              if (*((char *)v43 + 31) < 0)
                operator delete((void *)v43[1]);
              v44 = v43;
              v45 = 0x1012C404EF22A49;
              goto LABEL_215;
            }
            break;
          case 3:
            v113 = (unint64_t *)v38[7];
            do
            {
              v114 = __ldaxr(v113);
              v115 = v114 - 1;
            }
            while (__stlxr(v115, v113));
            if (!v115)
            {
              v116 = v38[7];
              if (!v116)
                goto LABEL_216;
              v117 = (void *)v116[1];
              if (v117)
              {
                v116[2] = (uint64_t)v117;
                operator delete(v117);
              }
              v44 = v116;
              v45 = 0x1080C409938AC02;
              goto LABEL_215;
            }
            break;
          case 4:
            v104 = (unint64_t *)v38[7];
            do
            {
              v105 = __ldaxr(v104);
              v106 = v105 - 1;
            }
            while (__stlxr(v106, v104));
            if (!v106)
            {
              v107 = v38[7];
              if (!v107)
                goto LABEL_216;
              v168 = (__int128 *)(v107 + 1);
              std::vector<nitro::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
              goto LABEL_193;
            }
            break;
          case 5:
            v121 = (unint64_t *)v38[7];
            do
            {
              v122 = __ldaxr(v121);
              v123 = v122 - 1;
            }
            while (__stlxr(v123, v121));
            if (!v123)
            {
              v107 = v38[7];
              if (!v107)
                goto LABEL_216;
              v168 = (__int128 *)(v107 + 1);
              std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
LABEL_193:
              v44 = v107;
              v45 = 0x1020C405E66F15BLL;
              goto LABEL_215;
            }
            break;
          case 9:
            v130 = (unint64_t *)v38[7];
            do
            {
              v131 = __ldaxr(v130);
              v132 = v131 - 1;
            }
            while (__stlxr(v132, v130));
            if (!v132)
            {
              v133 = v38[7];
              if (v133)
              {
                v134 = (void *)v133[7];
                if (v134)
                {
                  v133[8] = (uint64_t)v134;
                  operator delete(v134);
                }
                v135 = (void *)v133[4];
                if (v135)
                {
                  v133[5] = (uint64_t)v135;
                  operator delete(v135);
                }
                std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v133 + 2));
                v44 = v133;
                v45 = 0x10B0C4002311774;
LABEL_215:
                MEMORY[0x19401CD90](v44, v45);
              }
LABEL_216:
              v39[7] = 0;
            }
            break;
          default:
            break;
        }
        *((_BYTE *)v39 + 64) = 0;
        v39[7] = v37;
        goto LABEL_218;
      }
      std::vector<int>::vector(&v156, v10);
      if (v10)
        memcpy(v156.__begin_, *v4, 4 * v10);
      v147 = 0;
      v148 = 0;
      v149 = 0;
      nitro::ndarray<int>::ndarray((uint64_t)&v150, (uint64_t)&v156, (char **)&v158, (char **)&v147, 0);
      v168 = (__int128 *)((char *)v3 + 32);
      v12 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v160, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v168);
      v13 = v12;
      switch(*((_BYTE *)v12 + 64))
      {
        case 2:
          v14 = (unint64_t *)v12[7];
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            v17 = v12[7];
            if (!v17)
              goto LABEL_133;
            if (*((char *)v17 + 31) < 0)
              operator delete((void *)v17[1]);
            v18 = v17;
            v19 = 0x1012C404EF22A49;
            goto LABEL_132;
          }
          break;
        case 3:
          v59 = (unint64_t *)v12[7];
          do
          {
            v60 = __ldaxr(v59);
            v61 = v60 - 1;
          }
          while (__stlxr(v61, v59));
          if (!v61)
          {
            v62 = v12[7];
            if (!v62)
              goto LABEL_133;
            v63 = (void *)v62[1];
            if (v63)
            {
              v62[2] = (uint64_t)v63;
              operator delete(v63);
            }
            v18 = v62;
            v19 = 0x1080C409938AC02;
            goto LABEL_132;
          }
          break;
        case 4:
          v50 = (unint64_t *)v12[7];
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          if (!v52)
          {
            v53 = v12[7];
            if (!v53)
              goto LABEL_133;
            v168 = (__int128 *)(v53 + 1);
            std::vector<nitro::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
            goto LABEL_92;
          }
          break;
        case 5:
          v67 = (unint64_t *)v12[7];
          do
          {
            v68 = __ldaxr(v67);
            v69 = v68 - 1;
          }
          while (__stlxr(v69, v67));
          if (!v69)
          {
            v53 = v12[7];
            if (!v53)
              goto LABEL_133;
            v168 = (__int128 *)(v53 + 1);
            std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
LABEL_92:
            v18 = v53;
            v19 = 0x1020C405E66F15BLL;
            goto LABEL_132;
          }
          break;
        case 9:
          v86 = (unint64_t *)v12[7];
          do
          {
            v87 = __ldaxr(v86);
            v88 = v87 - 1;
          }
          while (__stlxr(v88, v86));
          if (!v88)
          {
            v89 = v12[7];
            if (v89)
            {
              v90 = (void *)v89[7];
              if (v90)
              {
                v89[8] = (uint64_t)v90;
                operator delete(v90);
              }
              v91 = (void *)v89[4];
              if (v91)
              {
                v89[5] = (uint64_t)v91;
                operator delete(v91);
              }
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v89 + 2));
              v18 = v89;
              v19 = 0x10B0C4002311774;
LABEL_132:
              MEMORY[0x19401CD90](v18, v19);
            }
LABEL_133:
            v13[7] = 0;
          }
          break;
        default:
          break;
      }
      v13[7] = 0;
      *((_BYTE *)v13 + 64) = 9;
      v92 = (uint64_t *)operator new();
      *v92 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v92 + 1));
      v13[7] = v92;
      *v92 = 1;
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v168, &v150);
      v93 = v13[7];
      *((_DWORD *)v93 + 2) = (_DWORD)v168;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v93 + 2), &v169);
      v94 = (void *)v93[4];
      if (v94)
      {
        v93[5] = (uint64_t)v94;
        operator delete(v94);
        v93[4] = 0;
        v93[5] = 0;
        v93[6] = 0;
      }
      v95 = (void *)v93[7];
      *((_OWORD *)v93 + 2) = v170;
      v93[6] = v171;
      v170 = 0uLL;
      v171 = 0;
      if (v95)
      {
        v93[8] = (uint64_t)v95;
        operator delete(v95);
        v93[7] = 0;
        v93[8] = 0;
        v93[9] = 0;
        v95 = (void *)v170;
      }
      *(_OWORD *)(v93 + 7) = v172;
      v93[9] = v173;
      v172 = 0uLL;
      v173 = 0;
      v93[10] = v174;
      if (v95)
      {
        *((_QWORD *)&v170 + 1) = v95;
        operator delete(v95);
      }
      v96 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
      if (*((_QWORD *)&v169 + 1))
      {
        v97 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      if (__p)
      {
        v155 = __p;
        operator delete(__p);
      }
      if (v152)
      {
        v153 = v152;
        operator delete(v152);
      }
      v83 = v151;
      if (v151)
      {
        p_shared_owners = (unint64_t *)&v151->__shared_owners_;
        do
          v85 = __ldaxr(p_shared_owners);
        while (__stlxr(v85 - 1, p_shared_owners));
LABEL_152:
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
LABEL_154:
      if (v147)
      {
        v148 = v147;
        operator delete(v147);
      }
      if (v156.__begin_)
      {
        v156.__end_ = v156.__begin_;
        operator delete(v156.__begin_);
      }
LABEL_218:
      if (v158)
      {
        v159 = v158;
        operator delete(v158);
      }
      v136 = (EspressoLight::espresso_nitro_plan *)*((_QWORD *)v3 + 1);
      if (v136)
      {
        do
        {
          v137 = v136;
          v136 = *(EspressoLight::espresso_nitro_plan **)v136;
        }
        while (v136);
      }
      else
      {
        do
        {
          v137 = (EspressoLight::espresso_nitro_plan *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v137 == (_QWORD)v3;
          v3 = v137;
        }
        while (!v9);
      }
      v3 = v137;
      if (v137 == (EspressoLight::espresso_nitro_plan *)((char *)this + 1112))
        goto LABEL_226;
    }
    if (!v157)
    {
      v28 = (float *)*v4;
      v168 = (__int128 *)((char *)v3 + 32);
      v29 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v160, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v168);
      v30 = v29;
      switch(*((_BYTE *)v29 + 64))
      {
        case 2:
          v31 = (unint64_t *)v29[7];
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = v29[7];
            if (!v34)
              goto LABEL_204;
            if (*((char *)v34 + 31) < 0)
              operator delete((void *)v34[1]);
            v35 = v34;
            v36 = 0x1012C404EF22A49;
            goto LABEL_203;
          }
          break;
        case 3:
          v108 = (unint64_t *)v29[7];
          do
          {
            v109 = __ldaxr(v108);
            v110 = v109 - 1;
          }
          while (__stlxr(v110, v108));
          if (!v110)
          {
            v111 = v29[7];
            if (!v111)
              goto LABEL_204;
            v112 = (void *)v111[1];
            if (v112)
            {
              v111[2] = (uint64_t)v112;
              operator delete(v112);
            }
            v35 = v111;
            v36 = 0x1080C409938AC02;
            goto LABEL_203;
          }
          break;
        case 4:
          v100 = (unint64_t *)v29[7];
          do
          {
            v101 = __ldaxr(v100);
            v102 = v101 - 1;
          }
          while (__stlxr(v102, v100));
          if (!v102)
          {
            v103 = v29[7];
            if (!v103)
              goto LABEL_204;
            v168 = (__int128 *)(v103 + 1);
            std::vector<nitro::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
            goto LABEL_187;
          }
          break;
        case 5:
          v118 = (unint64_t *)v29[7];
          do
          {
            v119 = __ldaxr(v118);
            v120 = v119 - 1;
          }
          while (__stlxr(v120, v118));
          if (!v120)
          {
            v103 = v29[7];
            if (!v103)
              goto LABEL_204;
            v168 = (__int128 *)(v103 + 1);
            std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
LABEL_187:
            v35 = v103;
            v36 = 0x1020C405E66F15BLL;
            goto LABEL_203;
          }
          break;
        case 9:
          v124 = (unint64_t *)v29[7];
          do
          {
            v125 = __ldaxr(v124);
            v126 = v125 - 1;
          }
          while (__stlxr(v126, v124));
          if (!v126)
          {
            v127 = v29[7];
            if (v127)
            {
              v128 = (void *)v127[7];
              if (v128)
              {
                v127[8] = (uint64_t)v128;
                operator delete(v128);
              }
              v129 = (void *)v127[4];
              if (v129)
              {
                v127[5] = (uint64_t)v129;
                operator delete(v129);
              }
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v127 + 2));
              v35 = v127;
              v36 = 0x10B0C4002311774;
LABEL_203:
              MEMORY[0x19401CD90](v35, v36);
            }
LABEL_204:
            v30[7] = 0;
          }
          break;
        default:
          break;
      }
      v30[7] = 0;
      *((_BYTE *)v30 + 64) = 1;
      *((double *)v30 + 7) = *v28;
      goto LABEL_218;
    }
    std::vector<float>::vector(&v156, v10);
    if (v10)
      memcpy(v156.__begin_, *v4, 4 * v10);
    v147 = 0;
    v148 = 0;
    v149 = 0;
    nitro::ndarray<float>::ndarray((uint64_t)&v150, (uint64_t)&v156, (char **)&v158, (char **)&v147, 0);
    v168 = (__int128 *)((char *)v3 + 32);
    v20 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v160, (const void **)v3 + 4, (uint64_t)&std::piecewise_construct, &v168);
    v21 = v20;
    switch(*((_BYTE *)v20 + 64))
    {
      case 2:
        v22 = (unint64_t *)v20[7];
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          v25 = v20[7];
          if (!v25)
            goto LABEL_103;
          if (*((char *)v25 + 31) < 0)
            operator delete((void *)v25[1]);
          v26 = v25;
          v27 = 0x1012C404EF22A49;
          goto LABEL_102;
        }
        break;
      case 3:
        v54 = (unint64_t *)v20[7];
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56)
        {
          v57 = v20[7];
          if (!v57)
            goto LABEL_103;
          v58 = (void *)v57[1];
          if (v58)
          {
            v57[2] = (uint64_t)v58;
            operator delete(v58);
          }
          v26 = v57;
          v27 = 0x1080C409938AC02;
          goto LABEL_102;
        }
        break;
      case 4:
        v46 = (unint64_t *)v20[7];
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48)
        {
          v49 = v20[7];
          if (!v49)
            goto LABEL_103;
          v168 = (__int128 *)(v49 + 1);
          std::vector<nitro::flexible_type>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
          goto LABEL_86;
        }
        break;
      case 5:
        v64 = (unint64_t *)v20[7];
        do
        {
          v65 = __ldaxr(v64);
          v66 = v65 - 1;
        }
        while (__stlxr(v66, v64));
        if (!v66)
        {
          v49 = v20[7];
          if (!v49)
            goto LABEL_103;
          v168 = (__int128 *)(v49 + 1);
          std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
LABEL_86:
          v26 = v49;
          v27 = 0x1020C405E66F15BLL;
          goto LABEL_102;
        }
        break;
      case 9:
        v70 = (unint64_t *)v20[7];
        do
        {
          v71 = __ldaxr(v70);
          v72 = v71 - 1;
        }
        while (__stlxr(v72, v70));
        if (!v72)
        {
          v73 = v20[7];
          if (v73)
          {
            v74 = (void *)v73[7];
            if (v74)
            {
              v73[8] = (uint64_t)v74;
              operator delete(v74);
            }
            v75 = (void *)v73[4];
            if (v75)
            {
              v73[5] = (uint64_t)v75;
              operator delete(v75);
            }
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v73 + 2));
            v26 = v73;
            v27 = 0x10B0C4002311774;
LABEL_102:
            MEMORY[0x19401CD90](v26, v27);
          }
LABEL_103:
          v21[7] = 0;
        }
        break;
      default:
        break;
    }
    v21[7] = 0;
    *((_BYTE *)v21 + 64) = 9;
    v76 = (uint64_t *)operator new();
    *v76 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v76 + 1));
    v21[7] = v76;
    *v76 = 1;
    nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v168, &v150);
    v77 = v21[7];
    *((_DWORD *)v77 + 2) = (_DWORD)v168;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v77 + 2), &v169);
    v78 = (void *)v77[4];
    if (v78)
    {
      v77[5] = (uint64_t)v78;
      operator delete(v78);
      v77[4] = 0;
      v77[5] = 0;
      v77[6] = 0;
    }
    v79 = (void *)v77[7];
    *((_OWORD *)v77 + 2) = v170;
    v77[6] = v171;
    v170 = 0uLL;
    v171 = 0;
    if (v79)
    {
      v77[8] = (uint64_t)v79;
      operator delete(v79);
      v77[7] = 0;
      v77[8] = 0;
      v77[9] = 0;
      v79 = (void *)v170;
    }
    *(_OWORD *)(v77 + 7) = v172;
    v77[9] = v173;
    v172 = 0uLL;
    v173 = 0;
    v77[10] = v174;
    if (v79)
    {
      *((_QWORD *)&v170 + 1) = v79;
      operator delete(v79);
    }
    v80 = (std::__shared_weak_count *)*((_QWORD *)&v169 + 1);
    if (*((_QWORD *)&v169 + 1))
    {
      v81 = (unint64_t *)(*((_QWORD *)&v169 + 1) + 8);
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
    if (__p)
    {
      v155 = __p;
      operator delete(__p);
    }
    if (v152)
    {
      v153 = v152;
      operator delete(v152);
    }
    v83 = v151;
    if (!v151)
      goto LABEL_154;
    v84 = (unint64_t *)&v151->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    goto LABEL_152;
  }
LABEL_226:
  *((_DWORD *)this + 288) = 2;
  v138 = *((_QWORD *)this + 136);
  v139 = (_OWORD *)((char *)this + 1064);
  if (*((char *)this + 1087) < 0)
  {
    std::string::__init_copy_ctor_external(&v146, *((const std::string::value_type **)this + 133), *((_QWORD *)this + 134));
  }
  else
  {
    *(_OWORD *)&v146.__r_.__value_.__l.__data_ = *v139;
    v146.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 135);
  }
  nitro::nitro_program::run(v138, (std::string::size_type)&v146, (uint64_t)&v160, (uint64_t)&v168);
  v140 = (char *)this + 1136;
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)this + 1128, *((_QWORD **)this + 142));
  v141 = (_QWORD *)v169;
  *((_QWORD *)this + 141) = v168;
  *((_QWORD *)this + 142) = v141;
  v142 = *((_QWORD *)&v169 + 1);
  *((_QWORD *)this + 143) = *((_QWORD *)&v169 + 1);
  if (v142)
  {
    v141[2] = v140;
    v168 = &v169;
    v169 = 0uLL;
    v141 = 0;
  }
  else
  {
    *((_QWORD *)this + 141) = v140;
  }
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)&v168, v141);
  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v146.__r_.__value_.__l.__data_);
  v143 = *(uint64_t **)(*((_QWORD *)this + 145) + 16);
  if (*(uint64_t **)(*((_QWORD *)this + 145) + 24) != v143)
  {
    v169 = 0uLL;
    v168 = &v169;
    v144 = *v143;
    if (*((char *)this + 1087) < 0)
    {
      std::string::__init_copy_ctor_external(&v145, *((const std::string::value_type **)this + 133), *((_QWORD *)this + 134));
    }
    else
    {
      *(_OWORD *)&v145.__r_.__value_.__l.__data_ = *v139;
      v145.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 135);
    }
    Espresso::tracer::add_frame<espresso_buffer_t>(v144, (_QWORD *)this + 138, &v168, (uint64_t *)&v145);
    if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v145.__r_.__value_.__l.__data_);
    Espresso::tracer::save_frames(**(Espresso::tracer ***)(*((_QWORD *)this + 145) + 16));
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)v169);
  }
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)&v160, v161[0]);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)v162);
}

void sub_1918B0F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,_QWORD *a43,uint64_t a44,char a45)
{
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)&a42, a43);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a45);
  _Unwind_Resume(a1);
}

void EspressoLight::espresso_nitro_plan::execute_forward_nocopy(EspressoLight::espresso_nitro_plan *this)
{
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("execute_forward_nocopy is not available for dynamic networks");
}

void EspressoLight::espresso_nitro_plan::bind_input(EspressoLight::espresso_nitro_plan *this, int a2, const char *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("ESPRESSO_BIND_PTR_USE_EXTERNAL must be used for dynamic networks");
}

void EspressoLight::espresso_nitro_plan::bind_output(EspressoLight::espresso_nitro_plan *this, int a2, const char *a3)
{
  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("ESPRESSO_BIND_PTR_DYNAMIC_OUTPUT must be used for dynamic networks");
}

uint64_t EspressoLight::espresso_nitro_plan::set_function_name(uint64_t a1, const std::string *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  __int128 v14;

  v3 = *(_DWORD *)(a1 + 1152);
  if ((v3 | 2) != 2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int,int>(v3, 0, 2);
  std::string::operator=((std::string *)(a1 + 1064), a2);
  v11 = 0u;
  v13 = 0;
  v14 = 0uLL;
  v12 = &v13;
  v4 = a1 + 1112;
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(a1 + 1112));
  v5 = v11;
  *(_QWORD *)(a1 + 1104) = &v11;
  *(_QWORD *)(a1 + 1112) = v5;
  v6 = *((_QWORD *)&v11 + 1);
  *(_QWORD *)(a1 + 1120) = *((_QWORD *)&v11 + 1);
  if (v6)
  {
    *(_QWORD *)(v5 + 16) = v4;
    v11 = 0uLL;
  }
  else
  {
    *(_QWORD *)(a1 + 1104) = v4;
  }
  v7 = a1 + 1136;
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(a1 + 1128, *(_QWORD **)(a1 + 1136));
  v8 = v13;
  *(_QWORD *)(a1 + 1128) = v12;
  *(_QWORD *)(a1 + 1136) = v8;
  v9 = v14;
  *(_QWORD *)(a1 + 1144) = v14;
  if (v9)
  {
    v8[2] = v7;
    v8 = 0;
    v12 = &v13;
    v13 = 0;
    *(_QWORD *)&v14 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1128) = v7;
  }
  *(_DWORD *)(a1 + 1152) = DWORD2(v14);
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)&v12, v8);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)v11);
  *(_DWORD *)(a1 + 1152) = 1;
  return 0;
}

void EspressoLight::espresso_nitro_plan::bind_external_input(uint64_t a1, int a2, char *__s, __int128 *a4)
{
  int v5;
  uint64_t **v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *__p[2];
  char v18;
  void **v19;

  v5 = *(_DWORD *)(a1 + 1152);
  if (v5 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int>(v5, 1);
  v7 = (uint64_t **)(a1 + 1104);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v19 = __p;
  v8 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v7, __p, (_OWORD **)&v19);
  v9 = *a4;
  v10 = a4[1];
  *(_OWORD *)((char *)v8 + 88) = a4[2];
  *(_OWORD *)((char *)v8 + 72) = v10;
  *(_OWORD *)((char *)v8 + 56) = v9;
  v11 = a4[3];
  v12 = a4[4];
  v13 = a4[5];
  *(_OWORD *)((char *)v8 + 152) = a4[6];
  *(_OWORD *)((char *)v8 + 136) = v13;
  *(_OWORD *)((char *)v8 + 120) = v12;
  *(_OWORD *)((char *)v8 + 104) = v11;
  v14 = a4[7];
  v15 = a4[8];
  v16 = a4[9];
  *((_QWORD *)v8 + 27) = *((_QWORD *)a4 + 20);
  *(_OWORD *)((char *)v8 + 200) = v16;
  *(_OWORD *)((char *)v8 + 184) = v15;
  *(_OWORD *)((char *)v8 + 168) = v14;
  if (v18 < 0)
    operator delete(__p[0]);
}

void sub_1918B1278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EspressoLight::espresso_nitro_plan::bind_dyn_output(EspressoLight::espresso_nitro_plan *this@<X0>, char *__s@<X2>, uint64_t a3@<X8>)
{
  int v4;
  char *v7;
  _QWORD *v8;
  char *v9;
  _BOOL4 v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  const nitro::ndarray_container *v14;
  int v15;
  int v16;
  _DWORD *v17;
  float v18;
  float *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  char *v23;
  char *v24;
  std::vector<int>::size_type v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  size_t v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  void *__p;
  char *v48;
  std::__shared_weak_count *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  std::__shared_weak_count *v55;
  void *v56;
  _BYTE *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  void **v61;

  v4 = *((_DWORD *)this + 288);
  if (v4 != 2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int>(v4, 2);
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  v7 = (char *)this + 1136;
  v8 = (_QWORD *)*((_QWORD *)this + 142);
  if (!v8)
    goto LABEL_9;
  v9 = (char *)this + 1136;
  do
  {
    v10 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, &__p);
    v11 = v8 + 1;
    if (!v10)
    {
      v11 = v8;
      v9 = (char *)v8;
    }
    v8 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v9 == v7
    || std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (_QWORD *)v9 + 4))
  {
LABEL_9:
    v9 = (char *)this + 1136;
  }
  if (SHIBYTE(v49) < 0)
    operator delete(__p);
  if (v7 == v9)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*&>(__s);
  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v12 = v9[64];
  if (v9[64])
  {
    if (v12 == 1)
    {
      v18 = *((double *)v9 + 7);
      espresso_buffer_pack_tensor_shape(a3, 0, 0);
      *(_DWORD *)(a3 + 160) = 65568;
      v19 = (float *)malloc_type_malloc(4uLL, 0x100004052888210uLL);
      *(_QWORD *)a3 = v19;
      *v19 = v18;
    }
    else
    {
      if (v12 != 9)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unidentified type of output.");
      v13 = *((_QWORD *)v9 + 7);
      v15 = *(_DWORD *)(v13 + 8);
      v14 = (const nitro::ndarray_container *)(v13 + 8);
      if (v15 == 9)
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__p, v14);
      else
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v14, (uint64_t)&__p);
      nitro::ndarray<float>::ndarray((uint64_t)&v54, (uint64_t)&__p);
      if (v52)
      {
        v53 = v52;
        operator delete(v52);
      }
      if (v50)
      {
        v51 = v50;
        operator delete(v50);
      }
      v20 = v49;
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v22 = __ldaxr(p_shared_owners);
        while (__stlxr(v22 - 1, p_shared_owners));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      __p = 0;
      v48 = 0;
      v49 = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v56, (uint64_t)v57, (v57 - (_BYTE *)v56) >> 3);
      v23 = (char *)__p;
      v24 = v48;
      v25 = (v48 - (_BYTE *)__p) >> 3;
      if (v48 == __p)
      {
        v27 = 1;
      }
      else
      {
        if (v25 <= 1)
          v26 = 1;
        else
          v26 = (v48 - (_BYTE *)__p) >> 3;
        v27 = 1;
        v28 = (uint64_t *)__p;
        do
        {
          v29 = *v28++;
          v27 *= v29;
          --v26;
        }
        while (v26);
      }
      espresso_buffer_pack_tensor_shape(a3, v25, (uint64_t)__p);
      *(_DWORD *)(a3 + 160) = 65568;
      if (v24 == v23)
        v30 = 0;
      else
        v30 = 4 * v27;
      v31 = malloc_type_malloc(v30, 0x100004052888210uLL);
      *(_QWORD *)a3 = v31;
      memcpy(v31, (char *)v54 + 4 * v60, v30);
      if (__p)
      {
        v48 = (char *)__p;
        operator delete(__p);
      }
      if (v58)
      {
        v59 = v58;
        operator delete(v58);
      }
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      v32 = v55;
      if (v55)
      {
        v33 = (unint64_t *)&v55->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
  }
  else
  {
    v16 = (int)(float)*((uint64_t *)v9 + 7);
    espresso_buffer_pack_tensor_shape(a3, 0, 0);
    *(_DWORD *)(a3 + 160) = 131104;
    v17 = malloc_type_malloc(4uLL, 0x100004052888210uLL);
    *(_QWORD *)a3 = v17;
    *v17 = v16;
  }
  if (*(_QWORD *)(*((_QWORD *)this + 145) + 24) != *(_QWORD *)(*((_QWORD *)this + 145) + 16))
  {
    v48 = 0;
    v49 = 0;
    __p = &v48;
    std::string::basic_string[abi:ne180100]<0>(&v54, __s);
    v61 = &v54;
    v35 = std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&__p, &v54, (_OWORD **)&v61);
    v36 = *(_OWORD *)a3;
    v37 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)((char *)v35 + 88) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)((char *)v35 + 72) = v37;
    *(_OWORD *)((char *)v35 + 56) = v36;
    v38 = *(_OWORD *)(a3 + 48);
    v39 = *(_OWORD *)(a3 + 64);
    v40 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)((char *)v35 + 152) = *(_OWORD *)(a3 + 96);
    *(_OWORD *)((char *)v35 + 136) = v40;
    *(_OWORD *)((char *)v35 + 120) = v39;
    *(_OWORD *)((char *)v35 + 104) = v38;
    v41 = *(_OWORD *)(a3 + 112);
    v42 = *(_OWORD *)(a3 + 128);
    v43 = *(_OWORD *)(a3 + 144);
    *((_QWORD *)v35 + 27) = *(_QWORD *)(a3 + 160);
    *(_OWORD *)((char *)v35 + 200) = v43;
    *(_OWORD *)((char *)v35 + 184) = v42;
    *(_OWORD *)((char *)v35 + 168) = v41;
    if (SHIBYTE(v56) < 0)
      operator delete(v54);
    v44 = **(_QWORD **)(*((_QWORD *)this + 145) + 16);
    std::string::basic_string[abi:ne180100]<0>(v45, "outputs");
    Espresso::tracer::set_attachment<espresso_buffer_t>(v44, (uint64_t *)v45, &__p);
    if (v46 < 0)
      operator delete(v45[0]);
    Espresso::tracer::save_frames(**(Espresso::tracer ***)(*((_QWORD *)this + 145) + 16));
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v48);
  }
}

void sub_1918B16D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  nitro::ndarray<float>::~ndarray(&a26);
  _Unwind_Resume(a1);
}

uint64_t EspressoLight::espresso_nitro_plan::is_output_bound()
{
  return 1;
}

uint64_t EspressoLight::espresso_nitro_plan::is_output_declared()
{
  return 1;
}

uint64_t EspressoLight::espresso_nitro_plan::query_blob_dimensions(EspressoLight::espresso_nitro_plan *this, int a2, char *__s, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  void *__p[2];
  char v12;
  _DWORD v13[10];
  void *v14;
  void *v15;

  v5 = *((_DWORD *)this + 288);
  if (v5 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int>(v5, 1);
  v7 = *((_QWORD *)this + 136);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  nitro::nitro_program::get_blob_shape(v7, (std::string *)((char *)this + 1064), __p, (uint64_t)v13);
  if (v12 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v8 = v13[0];
  *((_QWORD *)&v8 + 1) = v13[1];
  v9 = v8;
  *(_QWORD *)&v8 = v13[2];
  *((_QWORD *)&v8 + 1) = v13[3];
  *(_OWORD *)a4 = v9;
  *((_OWORD *)a4 + 1) = v8;
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  return 0;
}

void sub_1918B17FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::logic_error a16)
{
  const std::logic_error *exception_ptr;

  if (a15 < 0)
    operator delete(__p);
  if (a2 == 1)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(exception_object);
    std::logic_error::logic_error(&a16, exception_ptr);
    a16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_begin_catch(exception_object);
    MEMORY[0x19401C700](&a16);
    __cxa_end_catch();
    JUMPOUT(0x1918B17E0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoLight::espresso_nitro_plan::query_blob_shape(EspressoLight::espresso_nitro_plan *this, int a2, char *__s, unint64_t *a4, unint64_t *a5)
{
  int v6;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  void *v14[2];
  char v15;
  _BYTE v16[40];
  void *__p;
  void *v18;
  _BYTE v19[20];
  int v20;

  v6 = *((_DWORD *)this + 288);
  if (v6 != 1)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int>(v6, 1);
  v9 = *((_QWORD *)this + 136);
  std::string::basic_string[abi:ne180100]<0>(v14, __s);
  nitro::nitro_program::get_blob_shape(v9, (std::string *)((char *)this + 1064), v14, (uint64_t)v16);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v19, (const Espresso::layer_shape *)v16, 0);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v15 < 0)
    operator delete(v14[0]);
  LODWORD(v10) = v20;
  *a4 = v20;
  if ((_DWORD)v10)
  {
    v10 = v10;
    v11 = (int *)v19;
    do
    {
      v12 = *v11++;
      *a5++ = v12;
      --v10;
    }
    while (v10);
  }
  return 0;
}

void sub_1918B1934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::logic_error a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  const std::logic_error *exception_ptr;

  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a14 < 0)
    operator delete(a9);
  if (a2 == 1)
  {
    exception_ptr = (const std::logic_error *)__cxa_get_exception_ptr(exception_object);
    std::logic_error::logic_error(&a15, exception_ptr);
    a15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    __cxa_begin_catch(exception_object);
    MEMORY[0x19401C700](&a15);
    __cxa_end_catch();
    JUMPOUT(0x1918B1918);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoLight::espresso_nitro_plan::add_network(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("Invalid stage: %d, allowed=%d", a1, a2);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,char const*&>(const char *a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("The network did not produce an output named %s", a1);
}

_OWORD *std::__tree<std::__value_type<std::string,espresso_buffer_t>,std::__map_value_compare<std::string,std::__value_type<std::string,espresso_buffer_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0xE0uLL);
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *(_OWORD *)((char *)v6 + 56) = 0u;
    *(_OWORD *)((char *)v6 + 72) = 0u;
    *(_OWORD *)((char *)v6 + 88) = 0u;
    *(_OWORD *)((char *)v6 + 104) = 0u;
    *(_OWORD *)((char *)v6 + 120) = 0u;
    *(_OWORD *)((char *)v6 + 136) = 0u;
    *(_OWORD *)((char *)v6 + 152) = 0u;
    *(_OWORD *)((char *)v6 + 168) = 0u;
    *(_OWORD *)((char *)v6 + 184) = 0u;
    *(_OWORD *)((char *)v6 + 200) = 0u;
    *((_QWORD *)v6 + 27) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int,int,int>(int a1, int a2, int a3)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("Invalid stage: %d, allowed=%d,%d", a1, a2, a3);
}

void std::vector<nitro::flexible_type>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<nitro::nitro_program>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<nitro::nitro_program>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<nitro::nitro_program>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = a1 + 168;
  std::__tree<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::function<nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>>>>::destroy(a1 + 240, *(_QWORD **)(a1 + 248));
  std::__tree<std::__value_type<unsigned long,nitro::nitro_variable>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_variable>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_variable>>>::destroy(a1 + 216, *(_QWORD **)(a1 + 224));
  std::__tree<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<nitro::nitro_class>>>>::destroy(a1 + 192, *(_QWORD *)(a1 + 200));
  std::__tree<std::__value_type<unsigned long,nitro::nitro_function>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,nitro::nitro_function>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,nitro::nitro_function>>>::destroy(v2, *(_QWORD **)(a1 + 176));
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(a1 + 144, *(_QWORD **)(a1 + 152));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1 + 120, *(char **)(a1 + 128));
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(a1 + 96, *(char **)(a1 + 104));
  std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::destroy(*(char **)(a1 + 80));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::string,nitro::model_metadata>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::model_metadata>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::model_metadata>>>::destroy(*((_QWORD *)a1 + 1));
    nitro::model_metadata::~model_metadata((nitro::model_metadata *)(a1 + 56));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *std::unique_ptr<EspressoLight::espresso_nitro_plan::priv_t>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 16);
    std::vector<std::unique_ptr<Espresso::tracer>>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::network_ensemble::~network_ensemble(Espresso::network_ensemble *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this);
}

Espresso::network_ensemble *Espresso::network_ensemble::network_ensemble(Espresso::network_ensemble *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  int v8;
  __int128 v9;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  v2 = (char *)this + 120;
  *(_OWORD *)((char *)this + 136) = 0u;
  v8 = 100;
  Espresso::create_context(&v8, &v9);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v2, &v9);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *((_QWORD *)this + 15);
  *(_BYTE *)(v6 + 44) = 1;
  *(_BYTE *)(v6 + 112) = 0;
  return this;
}

void sub_1918B1FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 + 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

BOOL Espresso::network_ensemble::load_root_network(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t **v4;
  __int128 *i;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string *p_p;
  std::__shared_weak_count *v27;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  std::string *v33;

  Espresso::load_network(a2, a1 + 15, 0, 0, &v31);
  v3 = v31;
  if (v31)
  {
    v4 = (uint64_t **)(a1 + 17);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 17, v31, (uint64_t)v32);
    for (i = *(__int128 **)(v31 + 1000); i; i = *(__int128 **)i)
    {
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, i + 1);
      p_p = &__p;
      v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6 + 5, v29, (uint64_t)v30);
      v7 = a1[8];
      p_p = &__p;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 5), (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 10) = v7;
      v8 = (uint64_t)(*v4 + 123);
      p_p = &__p;
      v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v9 + 5, v29, (uint64_t)v30);
      std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&p_p, **v4, (std::__shared_weak_count *)(*v4)[1]);
      v10 = (uint64_t)(*v4 + 123);
      v33 = &__p;
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (uint64_t)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v33)[5];
      v12 = (__int128 *)p_p;
      v13 = v27;
      if (v27)
      {
        p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      *(_QWORD *)(v11 + 1088) = v12;
      v16 = *(std::__shared_weak_count **)(v11 + 1096);
      *(_QWORD *)(v11 + 1096) = v13;
      if (v16)
      {
        std::__shared_weak_count::__release_weak(v16);
        v13 = v27;
      }
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v19 = v30;
      if (v30)
      {
        v20 = (unint64_t *)&v30->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v22 = v32;
  if (v32)
  {
    v23 = (unint64_t *)&v32->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v3 != 0;
}

void sub_1918B223C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::pair<std::string const,std::shared_ptr<Espresso::net>>::~pair((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Espresso::network_ensemble::setup_network(uint64_t a1, _QWORD *a2, __int128 **a3)
{
  __int128 *v3;
  __int128 *v4;
  char **v6;
  _QWORD *v7;
  __int128 *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  char *v18;
  BOOL v19;
  uint64_t **v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t **v23;
  uint64_t **v24;
  char *v25;
  char **v26;
  std::__shared_weak_count *v27;
  _QWORD *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  char **v34;
  char *v35[2];
  __int128 *v36;
  uint64_t *v37;
  uint64_t *v38;

  v3 = *a3;
  v4 = a3[1];
  if (v4 != *a3)
  {
    v35[0] = 0;
    v35[1] = 0;
    v6 = v35;
    v34 = v35;
    do
    {
      v36 = v3;
      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v34, v3, &v36)[56] = 1;
      v3 = (__int128 *)((char *)v3 + 24);
    }
    while (v3 != v4);
    v7 = (_QWORD *)*a2;
    v8 = (__int128 *)(*a2 + 304);
    if (v8 != (__int128 *)&v34)
    {
      v9 = (uint64_t *)v34;
      if (v7[40])
      {
        v10 = (uint64_t **)(v7 + 39);
        v11 = (uint64_t *)v7[38];
        v12 = v7[39];
        v7[38] = v7 + 39;
        *(_QWORD *)(v12 + 16) = 0;
        v7[39] = 0;
        v7[40] = 0;
        if (v11[1])
          v13 = (uint64_t *)v11[1];
        else
          v13 = v11;
        v36 = v8;
        v37 = v13;
        v38 = v13;
        if (v13)
        {
          v37 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v13);
          if (v9 != (uint64_t *)v35)
          {
            do
            {
              std::string::operator=((std::string *)(v13 + 4), (const std::string *)(v9 + 4));
              *((_BYTE *)v13 + 56) = *((_BYTE *)v9 + 56);
              v14 = v38;
              v15 = *v10;
              v16 = (uint64_t **)(v7 + 39);
              v17 = (uint64_t **)(v7 + 39);
              if (*v10)
              {
                do
                {
                  while (1)
                  {
                    v16 = (uint64_t **)v15;
                    if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v14 + 4, v15 + 4))break;
                    v15 = *v16;
                    v17 = v16;
                    if (!*v16)
                      goto LABEL_17;
                  }
                  v15 = v16[1];
                }
                while (v15);
                v17 = v16 + 1;
              }
LABEL_17:
              std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v8, (uint64_t)v16, v17, v14);
              v38 = v37;
              if (v37)
                v37 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v37);
              v18 = (char *)v9[1];
              if (v18)
              {
                do
                {
                  v6 = (char **)v18;
                  v18 = *(char **)v18;
                }
                while (v18);
              }
              else
              {
                do
                {
                  v6 = (char **)v9[2];
                  v19 = *v6 == (char *)v9;
                  v9 = (uint64_t *)v6;
                }
                while (!v19);
              }
              v13 = v38;
              if (v38)
                v19 = v6 == v35;
              else
                v19 = 1;
              v9 = (uint64_t *)v6;
            }
            while (!v19);
          }
        }
        else
        {
          v6 = (char **)v9;
        }
        std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v36);
        v9 = (uint64_t *)v6;
      }
      if (v9 != (uint64_t *)v35)
      {
        v20 = (uint64_t **)(v7 + 39);
        do
        {
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>((uint64_t)&v36, (uint64_t)v8, (uint64_t)(v9 + 4));
          v21 = (uint64_t *)v36;
          v22 = *v20;
          v23 = v20;
          v24 = v20;
          if (*v20)
          {
            do
            {
              while (1)
              {
                v23 = (uint64_t **)v22;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21 + 4, v22 + 4))
                  break;
                v22 = *v23;
                v24 = v23;
                if (!*v23)
                  goto LABEL_40;
              }
              v22 = v23[1];
            }
            while (v22);
            v24 = v23 + 1;
          }
LABEL_40:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)v8, (uint64_t)v23, v24, v21);
          v25 = (char *)v9[1];
          if (v25)
          {
            do
            {
              v26 = (char **)v25;
              v25 = *(char **)v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              v26 = (char **)v9[2];
              v19 = *v26 == (char *)v9;
              v9 = (uint64_t *)v26;
            }
            while (!v19);
          }
          v9 = (uint64_t *)v26;
        }
        while (v26 != v35);
      }
      v7 = (_QWORD *)*a2;
    }
    v27 = (std::__shared_weak_count *)a2[1];
    v33 = v27;
    v28 = v7;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      v28 = (_QWORD *)*a2;
    }
    Espresso::shape_network_recursive((Espresso *)v7, (Espresso::net *)(v28 + 23), 0, 0);
    if (v33)
    {
      v31 = (unint64_t *)&v33->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    std::__tree<std::string>::destroy((uint64_t)&v34, v35[0]);
  }
}

void sub_1918B2564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char *a12)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::string>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void Espresso::network_ensemble::load_network(_QWORD *a1, __int128 *a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  __int128 *v31;
  std::__shared_weak_count *v32;
  _QWORD v33[2];
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 *v36;

  Espresso::load_network(a3, a1 + 15, 0, 0, &v34);
  v31 = a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v31);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v7 + 5, v34, (uint64_t)v35);
  v8 = a1[8];
  v31 = a2;
  v9 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 5), (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v31);
  *((_DWORD *)v9 + 10) = v8;
  v10 = v35;
  v33[0] = v34;
  v33[1] = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  Espresso::network_ensemble::setup_network((uint64_t)v9, v33, a4);
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v17 = a1[17];
  v16 = (uint64_t **)(a1 + 17);
  v15 = v17;
  if (v17)
  {
    v31 = a2;
    v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v15 + 984, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v31);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v18 + 5, v34, (uint64_t)v35);
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v31, **v16, (std::__shared_weak_count *)(*v16)[1]);
    v19 = (uint64_t)(*v16 + 123);
    v36 = a2;
    v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v19, (uint64_t)a2, (uint64_t)&std::piecewise_construct, &v36)[5];
    v21 = v31;
    v22 = v32;
    if (v32)
    {
      p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v24 = __ldxr(p_shared_weak_owners);
      while (__stxr(v24 + 1, p_shared_weak_owners));
    }
    *(_QWORD *)(v20 + 1088) = v21;
    v25 = *(std::__shared_weak_count **)(v20 + 1096);
    *(_QWORD *)(v20 + 1096) = v22;
    if (v25)
    {
      std::__shared_weak_count::__release_weak(v25);
      v22 = v32;
    }
    if (v22)
    {
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v16, v34, (uint64_t)v35);
  }
  v28 = v35;
  if (v35)
  {
    v29 = (unint64_t *)&v35->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
}

void sub_1918B27BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t Espresso::network_ensemble::call_network@<X0>(_QWORD *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unsigned __int8 *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v30;
  char *v31;
  void *v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  unsigned __int8 **v39;
  unsigned __int8 *i;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  std::string *v44;
  float v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  int8x8_t prime;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;
  uint8x8_t v56;
  unint64_t v57;
  uint8x8_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned __int8 **v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  NSObject *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  Espresso *v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  int32x4_t *v89;
  int32x4_t v90;
  _QWORD *v91;
  int v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unsigned __int8 *v96;
  unsigned __int8 *j;
  char *v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t *v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t *v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint8x8_t v123;
  unint64_t v124;
  unsigned __int8 **v125;
  unsigned __int8 *k;
  unint64_t v127;
  char *v128;
  std::string *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  float v139;
  float v140;
  _BOOL8 v141;
  unint64_t v142;
  unint64_t v143;
  size_t v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  void *v156;
  const std::string::value_type *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unsigned int v161;
  uint64_t v162;
  int v163;
  __int128 v164;
  int v165;
  int v166;
  char *v167[2];
  void *__p;
  void *v169;
  __int128 v170;
  uint64_t v171;
  std::__shared_weak_count *v172;
  uint64_t v173;
  std::__shared_weak_count *v174;
  void *v175[2];
  __int128 v176;
  int v177;
  void (****v178)(__int128 *__return_ptr);
  std::__shared_weak_count *v179;
  size_t __n[2];
  __int128 v181;
  int v182;
  __int128 *v183;
  uint8_t buf[16];
  _BYTE v185[56];
  uint64_t v186;

  v5 = (uint64_t)a2;
  v186 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__n = 0u;
  v181 = 0u;
  v182 = 1065353216;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(a1, a2);
  if (!v8)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v10 = *((_QWORD *)v8 + 5);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v178 = (void (****)(__int128 *__return_ptr))v10;
  v179 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v159 = v5;
  v160 = a1;
  v13 = (***(unsigned int (****)(_QWORD))(*(_QWORD *)(v10 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v10 + 16)
                                                                                             + 8)) == 100
     || (***(unsigned int (****)(_QWORD))(*(_QWORD *)(v10 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v10 + 16)
                                                                                             + 8)) == 0;
  v162 = a4;
  *(_OWORD *)v175 = 0u;
  v176 = 0u;
  v177 = 1065353216;
  v158 = a3;
  v14 = *(unsigned __int8 **)(a3 + 16);
  if (v14)
  {
    v15 = 0;
    v161 = v13;
    do
    {
      v5 = (uint64_t)(v14 + 16);
      v16 = *((_QWORD *)v14 + 6);
      *(_QWORD *)buf = v14 + 16;
      v163 = v15;
      v17 = (_DWORD *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v178 + 17), v14 + 16, (__int128 **)buf)+ 5);
      v18 = *((_QWORD *)v14 + 15);
      v19 = *((_QWORD *)v14 + 16);
      v20 = v18 == v17[2] && v19 == v17[3];
      v21 = *((_QWORD *)v14 + 17);
      v22 = *((_QWORD *)v14 + 18);
      v24 = v20 && v21 == v17[4] && v22 == v17[5];
      v25 = *((_QWORD *)v14 + 19);
      v27 = (int)v17[6];
      v26 = (int)v17[7];
      v30 = !v24 || v25 != v27 || v16 != v26;
      memset(buf, 0, sizeof(buf));
      *(_QWORD *)&v164 = v14 + 16;
      v31 = std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v175, v14 + 16, (__int128 **)&v164);
      v33 = v31 + 80;
      v32 = (void *)*((_QWORD *)v31 + 10);
      *((_DWORD *)v31 + 10) = v18;
      *((_DWORD *)v31 + 11) = v19;
      *((_DWORD *)v31 + 12) = v21;
      *((_DWORD *)v31 + 13) = v22;
      *((_DWORD *)v31 + 14) = v25;
      *((_DWORD *)v31 + 15) = -1;
      *((_OWORD *)v31 + 4) = *(_OWORD *)buf;
      if (v32)
      {
        *((_QWORD *)v31 + 11) = v32;
        operator delete(v32);
        *v33 = 0;
        v33[1] = 0;
        v33[2] = 0;
      }
      *v33 = 0;
      v33[1] = 0;
      v33[2] = 0;
      *(_QWORD *)buf = v14 + 16;
      v13 = v161;
      v15 = v163 | v30;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v175, v14 + 16, (__int128 **)buf)+ 15) = v16;
      v14 = *(unsigned __int8 **)v14;
    }
    while (v14);
  }
  else
  {
    LOBYTE(v15) = 0;
  }
  v34 = std::__string_hash<char>::operator()[abi:ne180100](v159);
  v35 = v34;
  v36 = v160[11];
  if (v36)
  {
    v37 = (uint8x8_t)vcnt_s8((int8x8_t)v36);
    v37.i16[0] = vaddlv_u8(v37);
    v38 = v37.u32[0];
    if (v37.u32[0] > 1uLL)
    {
      v5 = v34;
      if (v34 >= v36)
        v5 = v34 % v36;
    }
    else
    {
      v5 = (v36 - 1) & v34;
    }
    v39 = *(unsigned __int8 ***)(v160[10] + 8 * v5);
    if (v39)
    {
      for (i = *v39; i; i = *(unsigned __int8 **)i)
      {
        v41 = *((_QWORD *)i + 1);
        if (v41 == v35)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, (unsigned __int8 *)v159))
            goto LABEL_109;
        }
        else
        {
          if (v38 > 1)
          {
            if (v41 >= v36)
              v41 %= v36;
          }
          else
          {
            v41 &= v36 - 1;
          }
          if (v41 != v5)
            break;
        }
      }
    }
  }
  v42 = (char *)operator new(0x50uLL);
  v43 = v160 + 12;
  *(_QWORD *)buf = v42;
  *(_QWORD *)&buf[8] = v160 + 12;
  v185[0] = 0;
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = v35;
  v44 = (std::string *)(v42 + 16);
  if (*(char *)(v159 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)v159, *(_QWORD *)(v159 + 8));
  }
  else
  {
    *(_OWORD *)&v44->__r_.__value_.__l.__data_ = *(_OWORD *)v159;
    *((_QWORD *)v42 + 4) = *(_QWORD *)(v159 + 16);
  }
  *(_OWORD *)(v42 + 56) = 0u;
  *(_OWORD *)(v42 + 40) = 0u;
  *((_DWORD *)v42 + 18) = 1065353216;
  v185[0] = 1;
  v45 = (float)(unint64_t)(v160[13] + 1);
  v46 = *((float *)v160 + 28);
  if (!v36 || (float)(v46 * (float)v36) < v45)
  {
    v47 = 1;
    if (v36 >= 3)
      v47 = (v36 & (v36 - 1)) != 0;
    v48 = v47 | (2 * v36);
    v49 = vcvtps_u32_f32(v45 / v46);
    if (v48 <= v49)
      prime = (int8x8_t)v49;
    else
      prime = (int8x8_t)v48;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v36 = v160[11];
    if (*(_QWORD *)&prime > v36)
      goto LABEL_65;
    if (*(_QWORD *)&prime < v36)
    {
      v57 = vcvtps_u32_f32((float)(unint64_t)v160[13] / *((float *)v160 + 28));
      if (v36 < 3 || (v58 = (uint8x8_t)vcnt_s8((int8x8_t)v36), v58.i16[0] = vaddlv_u8(v58), v58.u32[0] > 1uLL))
      {
        v57 = std::__next_prime(v57);
      }
      else
      {
        v59 = 1 << -(char)__clz(v57 - 1);
        if (v57 >= 2)
          v57 = v59;
      }
      if (*(_QWORD *)&prime <= v57)
        prime = (int8x8_t)v57;
      if (*(_QWORD *)&prime >= v36)
      {
        v36 = v160[11];
      }
      else
      {
        if (prime)
        {
LABEL_65:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v51 = operator new(8 * *(_QWORD *)&prime);
          v52 = (void *)v160[10];
          v160[10] = v51;
          if (v52)
            operator delete(v52);
          v53 = 0;
          v160[11] = prime;
          do
            *(_QWORD *)(v160[10] + 8 * v53++) = 0;
          while (*(_QWORD *)&prime != v53);
          v54 = (_QWORD *)*v43;
          if (*v43)
          {
            v55 = v54[1];
            v56 = (uint8x8_t)vcnt_s8(prime);
            v56.i16[0] = vaddlv_u8(v56);
            if (v56.u32[0] > 1uLL)
            {
              if (v55 >= *(_QWORD *)&prime)
                v55 %= *(_QWORD *)&prime;
            }
            else
            {
              v55 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(v160[10] + 8 * v55) = v43;
            v60 = (_QWORD *)*v54;
            if (*v54)
            {
              do
              {
                v61 = v60[1];
                if (v56.u32[0] > 1uLL)
                {
                  if (v61 >= *(_QWORD *)&prime)
                    v61 %= *(_QWORD *)&prime;
                }
                else
                {
                  v61 &= *(_QWORD *)&prime - 1;
                }
                if (v61 != v55)
                {
                  v62 = v160[10];
                  if (!*(_QWORD *)(v62 + 8 * v61))
                  {
                    *(_QWORD *)(v62 + 8 * v61) = v54;
                    goto LABEL_90;
                  }
                  *v54 = *v60;
                  *v60 = **(_QWORD **)(v160[10] + 8 * v61);
                  **(_QWORD **)(v160[10] + 8 * v61) = v60;
                  v60 = v54;
                }
                v61 = v55;
LABEL_90:
                v54 = v60;
                v60 = (_QWORD *)*v60;
                v55 = v61;
              }
              while (v60);
            }
          }
          v36 = (unint64_t)prime;
          goto LABEL_94;
        }
        v156 = (void *)v160[10];
        v160[10] = 0;
        if (v156)
          operator delete(v156);
        v36 = 0;
        v160[11] = 0;
      }
    }
LABEL_94:
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v35 >= v36)
        v5 = v35 % v36;
      else
        v5 = v35;
    }
    else
    {
      v5 = (v36 - 1) & v35;
    }
  }
  v63 = *(unsigned __int8 ***)(v160[10] + 8 * v5);
  i = *(unsigned __int8 **)buf;
  if (v63)
  {
    **(_QWORD **)buf = *v63;
LABEL_107:
    *v63 = i;
    goto LABEL_108;
  }
  **(_QWORD **)buf = v160[12];
  v160[12] = i;
  *(_QWORD *)(v160[10] + 8 * v5) = v43;
  if (*(_QWORD *)i)
  {
    v64 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v36 & (v36 - 1)) != 0)
    {
      if (v64 >= v36)
        v64 %= v36;
    }
    else
    {
      v64 &= v36 - 1;
    }
    v63 = (unsigned __int8 **)(v160[10] + 8 * v64);
    goto LABEL_107;
  }
LABEL_108:
  *(_QWORD *)buf = 0;
  ++v160[13];
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
LABEL_109:
  v65 = (uint64_t)(i + 40);
  if ((v15 & 1) != 0)
  {
    v66 = (uint64_t)v178;
    v67 = Espresso::net::try_fast_reshape((uint64_t)v178, (uint64_t)v175);
    if ((v67 & 1) == 0)
    {
      Espresso::espresso_os_log_subsystem((Espresso *)v67, v68);
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(v159 + 23) >= 0)
          v157 = (const std::string::value_type *)v159;
        else
          v157 = *(const std::string::value_type **)v159;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v157;
        _os_log_debug_impl(&dword_190DAF000, v69, OS_LOG_TYPE_DEBUG, "network_ensemble slow reshape %s", buf, 0xCu);
      }

      *(_QWORD *)&v164 = v159;
      v70 = *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v160 + 5), (unsigned __int8 *)v159, (uint64_t)&std::piecewise_construct, (__int128 **)&v164)+ 10);
      buf[0] = 1;
      memset(&v185[8], 0, 48);
      *(_QWORD *)&buf[8] = v70;
      *(_QWORD *)v185 = 1;
      *(_DWORD *)&buf[4] = 723714072;
      kdebug_trace();
      v71 = v179;
      v173 = v66;
      v174 = v179;
      if (v179)
      {
        v72 = (unint64_t *)&v179->__shared_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::unordered_map<std::string,Espresso::layer_shape>>((uint64_t)&v164, v66, v175);
      if (v71)
      {
        v74 = (unint64_t *)&v71->__shared_owners_;
        do
          v75 = __ldaxr(v74);
        while (__stlxr(v75 - 1, v74));
        if (!v75)
        {
          ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
          std::__shared_weak_count::__release_weak(v71);
        }
      }
      v76 = (Espresso *)v178;
      v77 = v179;
      v171 = (uint64_t)v178;
      v172 = v179;
      if (v179)
      {
        v78 = (unint64_t *)&v179->__shared_owners_;
        do
          v79 = __ldxr(v78);
        while (__stxr(v79 + 1, v78));
      }
      Espresso::shape_network_recursive(v76, (Espresso::net *)&v164, 0, 0);
      if (v77)
      {
        v80 = (unint64_t *)&v77->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
          std::__shared_weak_count::__release_weak(v77);
        }
      }
      v170 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v178 + 145), &v170);
      v82 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
      if (*((_QWORD *)&v170 + 1))
      {
        v83 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 - 1, v83));
        if (!v84)
        {
          ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
          std::__shared_weak_count::__release_weak(v82);
        }
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v167, v167[1]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v164, *((char **)&v164 + 1));
      Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)buf);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear(v65);
  }
  *(_QWORD *)&v164 = v159;
  v85 = *((int *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v160 + 5), (unsigned __int8 *)v159, (uint64_t)&std::piecewise_construct, (__int128 **)&v164)+ 10);
  buf[0] = 1;
  memset(v185, 0, sizeof(v185));
  *(_QWORD *)&buf[8] = v85;
  *(_DWORD *)&buf[4] = 723714128;
  kdebug_trace();
  v86 = (uint64_t)v178;
  (**v178[2])(&v170);
  v87 = *(uint64_t **)(v158 + 16);
  if (v87)
  {
    do
    {
      v88 = v87[5];
      v89 = (int32x4_t *)operator new(0x60uLL);
      v89->i64[1] = 0;
      v89[1].i64[0] = 0;
      v89->i64[0] = (uint64_t)&off_1E2DBECA8;
      v89[1].i64[1] = (uint64_t)&off_1E2DA11F0;
      v90 = vuzp1q_s32(*(int32x4_t *)(v87 + 15), *(int32x4_t *)(v87 + 17));
      v89[4] = 0u;
      v89[5] = 0u;
      v89[2] = v90;
      v89[3].i64[0] = v88;
      v89[3].i8[8] = 0;
      *(_QWORD *)&v164 = (char *)v89 + 24;
      *((_QWORD *)&v164 + 1) = v89;
      v183 = (__int128 *)(v87 + 2);
      v91 = (_QWORD *)*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v178 + 17), (unsigned __int8 *)v87 + 16, &v183)+ 5);
      if (*(_BYTE *)(v160[15] + 44))
        v92 = 0;
      else
        v92 = v13;
      if (v92 == 1 && v91[20])
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v91 + 20, v164, *((uint64_t *)&v164 + 1));
      else
        (*(void (**)(_QWORD *, __int128 *, __int128 *))(*v91 + 48))(v91, &v170, &v164);
      v93 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
      if (*((_QWORD *)&v164 + 1))
      {
        v94 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
        do
          v95 = __ldaxr(v94);
        while (__stlxr(v95 - 1, v94));
        if (!v95)
        {
          ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
          std::__shared_weak_count::__release_weak(v93);
        }
      }
      v87 = (uint64_t *)*v87;
    }
    while (v87);
    v86 = (uint64_t)v178;
  }
  Espresso::net::__forward(v86, &v170, 0, 0xFFFFFFFFLL);
  v96 = *(unsigned __int8 **)(v86 + 664);
  for (j = *(unsigned __int8 **)(v86 + 672); v96 != j; *((_OWORD *)v114 + 12) = 0u)
  {
    *(_QWORD *)&v164 = v96;
    v98 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65, v96, (__int128 **)&v164);
    *(_QWORD *)&v164 = v96;
    v99 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v86 + 136, v96, (__int128 **)&v164);
    v100 = v98 + 40;
    v101 = *((_QWORD *)v99 + 5);
    if ((_DWORD)v13 && (v102 = *(_QWORD *)(v101 + 160)) != 0)
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v100, v102, *(_QWORD *)(v101 + 168));
    }
    else
    {
      if (!*v100)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&v164, *(_DWORD *)(v101 + 8), *(_DWORD *)(v101 + 12), *(_DWORD *)(v101 + 16), *(_DWORD *)(v101 + 24) * *(_DWORD *)(v101 + 20));
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v100, &v164);
        v103 = (std::__shared_weak_count *)*((_QWORD *)&v164 + 1);
        if (*((_QWORD *)&v164 + 1))
        {
          v104 = (unint64_t *)(*((_QWORD *)&v164 + 1) + 8);
          do
            v105 = __ldaxr(v104);
          while (__stlxr(v105 - 1, v104));
          if (!v105)
          {
            ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
            std::__shared_weak_count::__release_weak(v103);
          }
        }
        v86 = (uint64_t)v178;
      }
      *(_QWORD *)&v164 = v96;
      v106 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v86 + 136, v96, (__int128 **)&v164);
      (*(void (**)(_QWORD, __int128 *, _QWORD *))(**((_QWORD **)v106 + 5) + 40))(*((_QWORD *)v106 + 5), &v170, v100);
    }
    v107 = *(_QWORD *)(*v100 + 24);
    v108 = *((_QWORD *)v99 + 5);
    v109 = *(_QWORD *)(v108 + 8);
    v110 = *(_QWORD *)(v108 + 16);
    v111 = *(int *)(v108 + 24);
    Espresso::abstract_blob_container::shape((char *)&v164, v108);
    if (v165 == 1)
      v112 = 4;
    else
      v112 = 5;
    if (v166 == -1)
      v113 = v112;
    else
      v113 = v166;
    if (__p)
    {
      v169 = __p;
      operator delete(__p);
    }
    *(_QWORD *)&v164 = v96;
    v114 = std::__hash_table<std::__hash_value_type<std::string,espresso_buffer_t>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,espresso_buffer_t>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,espresso_buffer_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__n, (uint64_t)v96, (uint64_t)&std::piecewise_construct, (__int128 **)&v164);
    *(_QWORD *)&v115 = (int)v109;
    *((_QWORD *)&v115 + 1) = SHIDWORD(v109);
    v116 = v115;
    *(_QWORD *)&v115 = (int)v110;
    *((_QWORD *)&v115 + 1) = SHIDWORD(v110);
    v114[5] = v107;
    v114[6] = v113;
    *(_OWORD *)(v114 + 7) = 0u;
    *(_OWORD *)(v114 + 9) = 0u;
    *(_OWORD *)(v114 + 11) = 0u;
    *(_OWORD *)(v114 + 13) = 0u;
    *(_OWORD *)(v114 + 15) = v116;
    *(_OWORD *)(v114 + 17) = v115;
    v114[19] = v111;
    *((_OWORD *)v114 + 10) = 0u;
    *((_OWORD *)v114 + 11) = 0u;
    v96 += 24;
  }
  (*(void (**)(_QWORD))(*(_QWORD *)v170 + 24))(v170);
  v117 = v162;
  *(_OWORD *)v162 = 0u;
  *(_OWORD *)(v162 + 16) = 0u;
  *(_DWORD *)(v162 + 32) = v182;
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(v162, __n[1]);
  v118 = (uint64_t *)v181;
  if ((_QWORD)v181)
  {
    v119 = (_QWORD *)(v162 + 16);
    do
    {
      v120 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v118 + 2));
      v121 = v120;
      v122 = *(_QWORD *)(v117 + 8);
      if (v122)
      {
        v123 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
        v123.i16[0] = vaddlv_u8(v123);
        v124 = v123.u32[0];
        if (v123.u32[0] > 1uLL)
        {
          v13 = v120;
          if (v120 >= v122)
            v13 = v120 % v122;
        }
        else
        {
          v13 = (v122 - 1) & v120;
        }
        v125 = *(unsigned __int8 ***)(*(_QWORD *)v117 + 8 * v13);
        if (v125)
        {
          for (k = *v125; k; k = *(unsigned __int8 **)k)
          {
            v127 = *((_QWORD *)k + 1);
            if (v127 == v121)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](k + 16, (unsigned __int8 *)v118 + 16))
                goto LABEL_216;
            }
            else
            {
              if (v124 > 1)
              {
                if (v127 >= v122)
                  v127 %= v122;
              }
              else
              {
                v127 &= v122 - 1;
              }
              if (v127 != v13)
                break;
            }
          }
          v117 = v162;
        }
      }
      v128 = (char *)operator new(0xD0uLL);
      *(_QWORD *)v128 = 0;
      *((_QWORD *)v128 + 1) = v121;
      v129 = (std::string *)(v128 + 16);
      if (*((char *)v118 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v129, (const std::string::value_type *)v118[2], v118[3]);
      }
      else
      {
        v130 = *((_OWORD *)v118 + 1);
        *((_QWORD *)v128 + 4) = v118[4];
        *(_OWORD *)&v129->__r_.__value_.__l.__data_ = v130;
      }
      v131 = *(_OWORD *)(v118 + 5);
      v132 = *(_OWORD *)(v118 + 7);
      *(_OWORD *)(v128 + 72) = *(_OWORD *)(v118 + 9);
      *(_OWORD *)(v128 + 56) = v132;
      *(_OWORD *)(v128 + 40) = v131;
      v133 = *(_OWORD *)(v118 + 11);
      v134 = *(_OWORD *)(v118 + 13);
      v135 = *(_OWORD *)(v118 + 15);
      *(_OWORD *)(v128 + 136) = *(_OWORD *)(v118 + 17);
      *(_OWORD *)(v128 + 120) = v135;
      *(_OWORD *)(v128 + 104) = v134;
      *(_OWORD *)(v128 + 88) = v133;
      v136 = *(_OWORD *)(v118 + 19);
      v137 = *(_OWORD *)(v118 + 21);
      v138 = *(_OWORD *)(v118 + 23);
      *((_QWORD *)v128 + 25) = v118[25];
      *(_OWORD *)(v128 + 184) = v138;
      *(_OWORD *)(v128 + 168) = v137;
      *(_OWORD *)(v128 + 152) = v136;
      v139 = (float)(unint64_t)(*(_QWORD *)(v117 + 24) + 1);
      v140 = *(float *)(v117 + 32);
      if (!v122 || (float)(v140 * (float)v122) < v139)
      {
        v141 = v122 < 3 || (v122 & (v122 - 1)) != 0;
        v142 = v141 | (2 * v122);
        v143 = vcvtps_u32_f32(v139 / v140);
        if (v142 <= v143)
          v144 = v143;
        else
          v144 = v142;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>(v117, v144);
        v122 = *(_QWORD *)(v117 + 8);
        if ((v122 & (v122 - 1)) != 0)
        {
          if (v121 >= v122)
            v13 = v121 % v122;
          else
            v13 = v121;
        }
        else
        {
          v13 = (v122 - 1) & v121;
        }
      }
      v145 = *(_QWORD *)v117;
      v146 = *(_QWORD **)(*(_QWORD *)v117 + 8 * v13);
      if (v146)
      {
        *(_QWORD *)v128 = *v146;
      }
      else
      {
        *(_QWORD *)v128 = *v119;
        *v119 = v128;
        *(_QWORD *)(v145 + 8 * v13) = v119;
        if (!*(_QWORD *)v128)
          goto LABEL_215;
        v147 = *(_QWORD *)(*(_QWORD *)v128 + 8);
        if ((v122 & (v122 - 1)) != 0)
        {
          if (v147 >= v122)
            v147 %= v122;
        }
        else
        {
          v147 &= v122 - 1;
        }
        v146 = (_QWORD *)(*(_QWORD *)v117 + 8 * v147);
      }
      *v146 = v128;
LABEL_215:
      ++*(_QWORD *)(v117 + 24);
LABEL_216:
      v118 = (uint64_t *)*v118;
      v117 = v162;
    }
    while (v118);
  }
  v148 = (std::__shared_weak_count *)*((_QWORD *)&v170 + 1);
  if (*((_QWORD *)&v170 + 1))
  {
    v149 = (unint64_t *)(*((_QWORD *)&v170 + 1) + 8);
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)buf);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((_QWORD *)v176);
  v151 = v175[0];
  v175[0] = 0;
  if (v151)
    operator delete(v151);
  v152 = v179;
  if (v179)
  {
    v153 = (unint64_t *)&v179->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
      std::__shared_weak_count::__release_weak(v152);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)__n);
}

void sub_1918B36D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,char a37)
{
  uint64_t v37;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  Espresso::network_shape::~network_shape(&a15);
  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)(v37 - 192));
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::shared_ptr<Espresso::blob<float,4>>>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void EspressoLight::espresso_nitro_plan::inference_status_t::~inference_status_t(EspressoLight::espresso_nitro_plan::inference_status_t *this)
{
  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 1));
}

void sub_1918B3C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_1918B3F40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1918B4048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__8(uint64_t a1, std::string **a2)
{
  if ((std::string **)a1 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

void __copy_helper_atomic_property__7(_QWORD *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
}

void __assign_helper_atomic_property__6(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *> *>>((_QWORD *)a1, *(__int128 **)(a2 + 16));
  }
}

void std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *> *>>(_QWORD *a1, __int128 *a2)
{
  __int128 *v2;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  BOOL v7;
  _QWORD *v8;
  BOOL v9;
  char *v10;
  std::string *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = v6;
    }
    else
    {
      do
      {
        v12 = v6 + 2;
        v13 = v6 + 5;
        std::pair<std::string &,Espresso::layer_shape &>::operator=[abi:ne180100]<std::string const,Espresso::layer_shape,(void *)0>((uint64_t)&v12, (uint64_t)(v2 + 1));
        v8 = (_QWORD *)*v6;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v6);
        v2 = *(__int128 **)v2;
        if (v8)
          v9 = v2 == 0;
        else
          v9 = 1;
        v6 = v8;
      }
      while (!v9);
    }
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = *(__int128 **)v2)
  {
    v10 = (char *)operator new(0x68uLL);
    v12 = v10;
    v13 = a1 + 2;
    v14 = 0;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    v11 = std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]((std::string *)(v10 + 16), v2 + 1);
    v14 = 1;
    *((_QWORD *)v10 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v11);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v12);
    v12 = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)&v12);
  }
}

void sub_1918B42EC(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_1918B4304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_shape>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __assign_helper_atomic_property__18198(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  char *v9;
  std::string *v10;
  _QWORD v11[2];
  char v12;

  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    v3 = *(uint64_t **)(a2 + 16);
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
    {
      for (i = 0; i != v4; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
      v6 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      if (v6)
        v7 = v3 == 0;
      else
        v7 = 1;
      if (v7)
      {
        v8 = (_QWORD *)v6;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v3 + 2));
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v6 + 40), v3[5], v3[6]);
          v8 = *(_QWORD **)v6;
          std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi(a1, v6);
          v3 = (uint64_t *)*v3;
          if (!v8)
            break;
          v6 = (uint64_t)v8;
        }
        while (v3);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v8);
    }
    for (; v3; v3 = (uint64_t *)*v3)
    {
      v9 = (char *)operator new(0x38uLL);
      v11[0] = v9;
      v11[1] = a1 + 16;
      v12 = 0;
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      v10 = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v9 + 16), (__int128 *)v3 + 1);
      v12 = 1;
      *((_QWORD *)v9 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v10);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi(a1, (uint64_t)v9);
      v11[0] = 0;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
    }
  }
}

void sub_1918B4454(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_1918B446C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void __copy_helper_atomic_property__18199(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v25[2];
  char v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_41;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x38uLL);
      v25[0] = v15;
      v25[1] = a1 + 16;
      v26 = 0;
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v15 + 16), (__int128 *)v5 + 1);
      v26 = 1;
      v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v17 = *(float *)(a1 + 32);
      if (!v9 || (float)(v17 * (float)v9) < v16)
      {
        v18 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v18 = 1;
        v19 = v18 | (2 * v9);
        v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20)
          v21 = v20;
        else
          v21 = v19;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v21);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v22 = *(_QWORD *)a1;
      v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v23)
      {
        *(_QWORD *)v15 = *v23;
      }
      else
      {
        *(_QWORD *)v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v22 + 8 * v2) = v6;
        if (!*(_QWORD *)v15)
          goto LABEL_40;
        v24 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v24 >= v9)
            v24 %= v9;
        }
        else
        {
          v24 &= v9 - 1;
        }
        v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
      }
      *v23 = v15;
LABEL_40:
      v25[0] = 0;
      ++*(_QWORD *)(a1 + 24);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
LABEL_41:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
}

void sub_1918B46F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,1>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,1>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,1>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,1>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  _QWORD *v15;
  std::string *v16;
  __int128 *v17;
  __int128 v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD v29[2];
  char v30;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = (char *)operator new(0x38uLL);
  v29[0] = v13;
  v29[1] = a1 + 16;
  v30 = 0;
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v16 = (std::string *)(v13 + 16);
  v17 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v18 = *v17;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v18;
  }
  *((_QWORD *)v13 + 5) = 0;
  *((_QWORD *)v13 + 6) = 0;
  v30 = 1;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v24);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v26)
  {
    *(_QWORD *)v13 = *v26;
LABEL_41:
    *v26 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v25 + 8 * v3) = v15;
  if (*(_QWORD *)v13)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9)
        v27 %= v9;
    }
    else
    {
      v27 &= v9 - 1;
    }
    v26 = (_QWORD *)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_41;
  }
LABEL_42:
  v29[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29);
  return v13;
}

void sub_1918B4980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::reshape_kernel::~reshape_kernel(Espresso::MPSGraphEngine::Kernels::reshape_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::reshape_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  int64x2_t *v29;
  std::__shared_weak_count *v30;
  int64x2_t *v31;
  std::__shared_weak_count *v32;
  void *v33[2];
  char v34;
  std::string __p;
  _BYTE v36[24];
  _BYTE v37[32];
  std::__shared_weak_count *v38;
  int64x2_t *v39;
  std::__shared_weak_count *v40;
  void **v41;

  if (*(_BYTE *)(a1 + 312) || (v4 = a3[1] - *a3, v4 >= 0x41))
  {
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    v39 = *(int64x2_t **)a2;
    v40 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "[Dispatch::MPSGraph::reshape_kernel] unsupported: dynamic reshape");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v33, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v39, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v9 = v38;
    if (v38)
    {
      v10 = (unint64_t *)&v38->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v41 = (void **)v37;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)v36;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v34 < 0)
      operator delete(v33[0]);
    v12 = v40;
    if (!v40)
      return 0;
    v13 = (unint64_t *)&v40->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    goto LABEL_53;
  }
  if (v4 != 64)
  {
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    v31 = *(int64x2_t **)a2;
    v32 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "[Dispatch::MPSGraph::reshape_kernel] unsupported: 0 inputs");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v33, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v31, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v18 = v38;
    if (v38)
    {
      v19 = (unint64_t *)&v38->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v41 = (void **)v37;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v41);
    v41 = (void **)v36;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v34 < 0)
      operator delete(v33[0]);
    v12 = v32;
    if (!v32)
      return 0;
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v14 = __ldaxr(v21);
    while (__stlxr(v14 - 1, v21));
    goto LABEL_53;
  }
  if (*(int *)(a1 + 300) > 0)
    return 1;
  v22 = *(std::__shared_weak_count **)(a2 + 8);
  v29 = *(int64x2_t **)a2;
  v30 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  std::string::basic_string[abi:ne180100]<0>(v33, "[Dispatch::MPSGraph::reshape_kernel] unsupported: dst_nd_rank is 0");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v33, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v29, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v25 = v38;
  if (v38)
  {
    v26 = (unint64_t *)&v38->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v41 = (void **)v37;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v41);
  v41 = (void **)v36;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v34 < 0)
    operator delete(v33[0]);
  v12 = v30;
  if (v30)
  {
    v28 = (unint64_t *)&v30->__shared_owners_;
    do
      v14 = __ldaxr(v28);
    while (__stlxr(v14 - 1, v28));
LABEL_53:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 0;
}

void sub_1918B4D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a19);
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1918B5284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::mutex *v21;
  void *v22;
  void *v23;
  void *v24;

  std::mutex::unlock(v21);
  _Unwind_Resume(a1);
}

void sub_1918B551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  __cxa_free_exception(v10);

  _Unwind_Resume(a1);
}

void sub_1918B56A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1918B6024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  void *v55;
  void *v56;

  Espresso_scoped_signpost::~Espresso_scoped_signpost((Espresso_scoped_signpost *)&a55);
  _Unwind_Resume(a1);
}

void sub_1918B62BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1918B64D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_style_transfer_two_nets_onlyanepart::~pass_style_transfer_two_nets_onlyanepart(Espresso::pass_style_transfer_two_nets_onlyanepart *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_style_transfer_two_nets_onlyanepart::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_style_transfer_two_nets_onlyanepart::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD v5[6];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = ___ZN8Espresso40pass_style_transfer_two_nets_onlyanepart14run_on_networkERNS_3netE_block_invoke;
  v5[3] = &__block_descriptor_48_e9_v16__0_v8l;
  v5[4] = (char *)a1 + 16;
  v5[5] = a1;
  Espresso::single_match_replace<Espresso::generic_batchnorm_kernel>(a1, v5);
  *((_BYTE *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)((char *)a1 + 184), 0, 0);
  Espresso::single_match_replace<Espresso::generic_general_padding_kernel>(a1, &__block_literal_global_37_18357);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
}

void ___ZN8Espresso40pass_style_transfer_two_nets_onlyanepart14run_on_networkERNS_3netE_block_invoke(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int *v8;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  uint64_t v51;
  unint64_t v52;
  const void **v53;
  size_t v54;
  std::string *v55;
  const void *v56;
  size_t v57;
  std::string *v58;
  std::string *v59;
  size_t v60;
  std::string *v61;
  std::string *v62;
  uint64_t **v63;
  char *v64;
  __int128 v65;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  void **v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t i;
  std::string *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t j;
  _DWORD *v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  size_t v110;
  std::string *p_lpsrc;
  std::string *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  size_t v118;
  std::string *v119;
  std::string *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t **v135;
  char *v136;
  __int128 v137;
  uint64_t **v138;
  char *v139;
  __int128 v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  size_t v144;
  std::string *v145;
  std::string *v146;
  uint64_t v147;
  unint64_t v148;
  __int128 *v149;
  __int128 v150;
  uint64_t k;
  unint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  const void **v156;
  size_t v157;
  std::string *v158;
  const void *v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  size_t v163;
  std::string *v164;
  std::string *v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  size_t v169;
  std::string *v170;
  std::string *v171;
  uint64_t v172;
  unint64_t v173;
  std::string **v174;
  uint64_t n;
  unint64_t *v176;
  unint64_t v177;
  uint64_t m;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  size_t v184;
  std::string *v185;
  std::string *v186;
  uint64_t v187;
  unint64_t v188;
  std::string **v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  std::__shared_weak_count *v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  uint64_t v203[2];
  uint64_t v204[2];
  uint64_t v205[2];
  uint64_t v206[2];
  uint64_t v207[2];
  std::string v208;
  std::string lpsrc;
  uint64_t v210[2];
  _QWORD v211[2];
  uint64_t v212;
  std::__shared_weak_count *v213;
  _QWORD v214[2];
  uint64_t v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  std::string::size_type v218;
  std::string v219;
  __int128 __p;
  __int128 v221;
  uint64_t v222;
  void *v223;
  _BYTE *v224;
  uint64_t v225;
  std::string v226;
  std::string v227;
  std::string v228;
  std::string v229;
  std::string v230;
  uint64_t v231;
  std::string::size_type v232;
  uint64_t v233;
  std::string::size_type v234;
  uint64_t v235;
  std::string::size_type size;
  _DWORD v237[3];
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _QWORD v241[3];
  char v242;
  uint64_t v243;
  _QWORD v244[3];
  char v245;
  uint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  std::string *v249;
  std::string::size_type v250;
  std::string v251;
  uint64_t v252;
  std::string v253;
  std::string v254;
  std::string v255;
  uint64_t v256;
  std::string v257;
  __int128 v258;

  *(_QWORD *)&v258 = *MEMORY[0x1E0C80C00];
  v4 = a2->i64[0];
  v5 = (std::__shared_weak_count *)a2->i64[1];
  v247 = a2->i64[0];
  v248 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4);
  if (v8[2] == 1 && v8[1] == 1)
  {
    v10 = *v8;
    v11 = v8[7];
    v12 = v8[9];
    v244[2] = 897988541;
    v245 = 0;
    v246 = 0;
    v244[1] = 1065353216;
    v244[0] = 1;
    v241[2] = 897988541;
    v242 = 0;
    v243 = 0;
    v241[1] = 1065353216;
    v241[0] = 0;
    v237[2] = 1065353216;
    v238 = 0;
    v240 = 0;
    v239 = 0;
    v237[1] = v12;
    v237[0] = 2;
    Espresso::abstract_engine_factory::shared(&v230);
    v13 = v230.__r_.__value_.__r.__words[0];
    v14 = *(_QWORD *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
    LODWORD(v229.__r_.__value_.__l.__data_) = 0;
    LODWORD(v228.__r_.__value_.__l.__data_) = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v13, v14, (uint64_t)&__p, (uint64_t)v244, (int *)&v229);
    if (v253.__r_.__value_.__r.__words[0]
    {
      v235 = (uint64_t)v15;
      size = v253.__r_.__value_.__l.__size_;
      if (v253.__r_.__value_.__l.__size_)
      {
        v16 = (unint64_t *)(v253.__r_.__value_.__l.__size_ + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
    }
    else
    {
      v235 = 0;
      size = 0;
    }
    v18 = (std::__shared_weak_count *)v253.__r_.__value_.__l.__size_;
    if (v253.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v253.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (SBYTE7(v221) < 0)
      operator delete((void *)__p);
    v21 = (std::__shared_weak_count *)v230.__r_.__value_.__l.__size_;
    if (v230.__r_.__value_.__l.__size_)
    {
      v22 = (unint64_t *)(v230.__r_.__value_.__l.__size_ + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    Espresso::abstract_engine_factory::shared(&v230);
    v24 = v230.__r_.__value_.__r.__words[0];
    v25 = *(_QWORD *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(&__p, "elementwise");
    LODWORD(v229.__r_.__value_.__l.__data_) = 0;
    LODWORD(v228.__r_.__value_.__l.__data_) = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v24, v25, (uint64_t)&__p, (uint64_t)v241, (int *)&v229);
    if (v253.__r_.__value_.__r.__words[0]
    {
      v233 = (uint64_t)v26;
      v234 = v253.__r_.__value_.__l.__size_;
      if (v253.__r_.__value_.__l.__size_)
      {
        v27 = (unint64_t *)(v253.__r_.__value_.__l.__size_ + 8);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
    }
    else
    {
      v233 = 0;
      v234 = 0;
    }
    v29 = (std::__shared_weak_count *)v253.__r_.__value_.__l.__size_;
    if (v253.__r_.__value_.__l.__size_)
    {
      v30 = (unint64_t *)(v253.__r_.__value_.__l.__size_ + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (SBYTE7(v221) < 0)
      operator delete((void *)__p);
    v32 = (std::__shared_weak_count *)v230.__r_.__value_.__l.__size_;
    if (v230.__r_.__value_.__l.__size_)
    {
      v33 = (unint64_t *)(v230.__r_.__value_.__l.__size_ + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    Espresso::abstract_engine_factory::shared(&v230);
    v35 = v230.__r_.__value_.__r.__words[0];
    v36 = *(_QWORD *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(&__p, "activation");
    LODWORD(v229.__r_.__value_.__l.__data_) = 0;
    LODWORD(v228.__r_.__value_.__l.__data_) = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v35, v36, (uint64_t)&__p, (uint64_t)v237, (int *)&v229);
    if (v253.__r_.__value_.__r.__words[0]
    {
      v231 = (uint64_t)v37;
      v232 = v253.__r_.__value_.__l.__size_;
      if (v253.__r_.__value_.__l.__size_)
      {
        v38 = (unint64_t *)(v253.__r_.__value_.__l.__size_ + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
    }
    else
    {
      v231 = 0;
      v232 = 0;
    }
    v40 = (std::__shared_weak_count *)v253.__r_.__value_.__l.__size_;
    if (v253.__r_.__value_.__l.__size_)
    {
      v41 = (unint64_t *)(v253.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    if (SBYTE7(v221) < 0)
      operator delete((void *)__p);
    v43 = (std::__shared_weak_count *)v230.__r_.__value_.__l.__size_;
    if (v230.__r_.__value_.__l.__size_)
    {
      v44 = (unint64_t *)(v230.__r_.__value_.__l.__size_ + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::remove_layer(a2);
    v46 = *(_QWORD *)(a1 + 40);
    v47 = a2[3].i32[2];
    v48 = *(_QWORD *)(*(_QWORD *)(v46 + 32) + 16 * v47);
    if (*(char *)(v48 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&v230, *(const std::string::value_type **)(v48 + 16), *(_QWORD *)(v48 + 24));
      v46 = *(_QWORD *)(a1 + 40);
      v47 = a2[3].i32[2];
    }
    else
    {
      v230 = *(std::string *)(v48 + 16);
    }
    *(_QWORD *)&__p = v47;
    v49 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v46 + 56, v47, &__p)[3];
    if (*((char *)v49 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v229, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
    }
    else
    {
      v50 = *v49;
      v229.__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
      *(_OWORD *)&v229.__r_.__value_.__l.__data_ = v50;
    }
    v51 = *(_QWORD *)(a1 + 40) + 96;
    v52 = a2[3].i32[2];
    *(_QWORD *)&__p = v52;
    v53 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v51, v52, &__p)[3];
    if (*((char *)v53 + 23) >= 0)
      v54 = *((unsigned __int8 *)v53 + 23);
    else
      v54 = (size_t)v53[1];
    v55 = &v228;
    std::string::basic_string[abi:ne180100]((uint64_t)&v228, v54 + 5);
    if ((v228.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v55 = (std::string *)v228.__r_.__value_.__r.__words[0];
    if (v54)
    {
      if (*((char *)v53 + 23) >= 0)
        v56 = v53;
      else
        v56 = *v53;
      memmove(v55, v56, v54);
    }
    strcpy((char *)v55 + v54, "__tmp");
    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
    else
      v57 = v229.__r_.__value_.__l.__size_;
    v58 = &v227;
    std::string::basic_string[abi:ne180100]((uint64_t)&v227, v57 + 5);
    if ((v227.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v58 = (std::string *)v227.__r_.__value_.__r.__words[0];
    if (v57)
    {
      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v229;
      else
        v59 = (std::string *)v229.__r_.__value_.__r.__words[0];
      memmove(v58, v59, v57);
    }
    strcpy((char *)v58 + v57, "__mul");
    if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = HIBYTE(v229.__r_.__value_.__r.__words[2]);
    else
      v60 = v229.__r_.__value_.__l.__size_;
    v61 = &v226;
    std::string::basic_string[abi:ne180100]((uint64_t)&v226, v60 + 5);
    if ((v226.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v61 = (std::string *)v226.__r_.__value_.__r.__words[0];
    if (v60)
    {
      if ((v229.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = &v229;
      else
        v62 = (std::string *)v229.__r_.__value_.__r.__words[0];
      memmove(v61, v62, v60);
    }
    strcpy((char *)v61 + v60, "__add");
    v63 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
    v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v229;
    v64 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v63, &v229, (__int128 **)&v253);
    v65 = *(_OWORD *)(v64 + 72);
    __p = *(_OWORD *)(v64 + 56);
    v221 = v65;
    v66 = (const void *)*((_QWORD *)v64 + 12);
    v222 = *((_QWORD *)v64 + 11);
    v223 = 0;
    v224 = 0;
    v225 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v223, v66, *((_QWORD *)v64 + 13), (uint64_t)(*((_QWORD *)v64 + 13) - (_QWORD)v66) >> 2);
    v253.__r_.__value_.__r.__words[0] = 0x100000001;
    HIDWORD(v253.__r_.__value_.__r.__words[2]) = -1;
    LODWORD(v253.__r_.__value_.__r.__words[1]) = v10;
    *(std::string::size_type *)((char *)&v253.__r_.__value_.__r.__words[1] + 4) = 0x100000001;
    Espresso::abstract_engine_factory::shared(&v208);
    v67 = v208.__r_.__value_.__r.__words[0];
    v68 = *(_QWORD *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(&v219, "load_constant");
    LODWORD(v257.__r_.__value_.__l.__data_) = 0;
    LODWORD(v255.__r_.__value_.__l.__data_) = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v67, v68, (uint64_t)&v219, (uint64_t)&v253, (int *)&v257);
    if (lpsrc.__r_.__value_.__r.__words[0]
    {
      v249 = (std::string *)v69;
      v250 = lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v70 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
      }
    }
    else
    {
      v249 = 0;
      v250 = 0;
    }
    v72 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v73 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v74 = __ldaxr(v73);
      while (__stlxr(v74 - 1, v73));
      if (!v74)
      {
        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
        std::__shared_weak_count::__release_weak(v72);
      }
    }
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    v75 = (std::__shared_weak_count *)v208.__r_.__value_.__l.__size_;
    if (v208.__r_.__value_.__l.__size_)
    {
      v76 = (unint64_t *)(v208.__r_.__value_.__l.__size_ + 8);
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
        std::__shared_weak_count::__release_weak(v75);
      }
    }
    Espresso::abstract_engine_factory::shared(&v208);
    v78 = v208.__r_.__value_.__r.__words[0];
    v79 = *(_QWORD *)(a1 + 32);
    std::string::basic_string[abi:ne180100]<0>(&v219, "load_constant");
    LODWORD(v257.__r_.__value_.__l.__data_) = 0;
    LODWORD(v255.__r_.__value_.__l.__data_) = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v78, v79, (uint64_t)&v219, (uint64_t)&v253, (int *)&v257);
    if (lpsrc.__r_.__value_.__r.__words[0]
    {
      v217 = (uint64_t)v80;
      v218 = lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v81 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
    }
    else
    {
      v217 = 0;
      v218 = 0;
    }
    v83 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v84 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        std::__shared_weak_count::__release_weak(v83);
      }
    }
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    v86 = (std::__shared_weak_count *)v208.__r_.__value_.__l.__size_;
    if (v208.__r_.__value_.__l.__size_)
    {
      v87 = (unint64_t *)(v208.__r_.__value_.__l.__size_ + 8);
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    *(_QWORD *)&__p = 0x100000001;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v215, 1, 1, v10, 1);
    v89 = v215;
    v90 = *(int *)(v215 + 8);
    for (i = 12; i != 24; i += 4)
      v90 *= *(int *)(v215 + i);
    if (v90)
      memset_pattern16(*(void **)(v215 + 24), &unk_191A93AC0, 4 * v90);
    v92 = v249;
    v93 = v216;
    v214[0] = v89;
    v214[1] = v216;
    if (v216)
    {
      v94 = (unint64_t *)&v216->__shared_owners_;
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    Espresso::generic_load_constant_kernel::set_constant_blob(v92, (uint64_t)v214);
    if (v93)
    {
      v96 = (unint64_t *)&v93->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v212, 1, 1, v10, 1);
    v98 = v212;
    v99 = *(int *)(v212 + 8);
    for (j = 12; j != 24; j += 4)
      v99 *= *(int *)(v212 + j);
    if (v99)
      memset_pattern16(*(void **)(v212 + 24), &unk_191A93AD0, 4 * v99);
    v101 = (_DWORD *)v217;
    v102 = v213;
    v211[0] = v98;
    v211[1] = v213;
    if (v213)
    {
      v103 = (unint64_t *)&v213->__shared_owners_;
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
    Espresso::generic_load_constant_kernel::set_constant_blob(v101, (uint64_t)v211);
    if (v102)
    {
      v105 = (unint64_t *)&v102->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v107 = (std::__shared_weak_count *)v250;
    v210[0] = (uint64_t)v249;
    v210[1] = v250;
    if (v250)
    {
      v108 = (unint64_t *)(v250 + 8);
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    std::string::basic_string[abi:ne180100]<0>(&v219, "load_constant");
    if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v110 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
    else
      v110 = v230.__r_.__value_.__l.__size_;
    p_lpsrc = &lpsrc;
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v110 + 7);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    if (v110)
    {
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v112 = &v230;
      else
        v112 = (std::string *)v230.__r_.__value_.__r.__words[0];
      memmove(p_lpsrc, v112, v110);
    }
    strcpy((char *)p_lpsrc + v110, "__mul_c");
    memset(&v208, 0, sizeof(v208));
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v255, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
    else
      v255 = v227;
    memset(&v257, 0, sizeof(v257));
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
    v251.__r_.__value_.__s.__data_[8] = 0;
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v257.__r_.__value_.__l.__size_ = v257.__r_.__value_.__r.__words[0];
    v257.__r_.__value_.__r.__words[2] = v257.__r_.__value_.__r.__words[0] + 24;
    v257.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v257.__r_.__value_.__r.__words[2], (__int128 *)&v255, (__int128 *)&v256, (std::string *)v257.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v210, &v219, &lpsrc, (std::string **)&v208, (std::string **)&v257);
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v255.__r_.__value_.__l.__data_);
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (v107)
    {
      v113 = (unint64_t *)&v107->__shared_owners_;
      do
        v114 = __ldaxr(v113);
      while (__stlxr(v114 - 1, v113));
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v115 = (std::__shared_weak_count *)v218;
    v207[0] = v217;
    v207[1] = v218;
    if (v218)
    {
      v116 = (unint64_t *)(v218 + 8);
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
    std::string::basic_string[abi:ne180100]<0>(&v219, "load_constant");
    if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v118 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
    else
      v118 = v230.__r_.__value_.__l.__size_;
    v119 = &lpsrc;
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v118 + 7);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v119 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    if (v118)
    {
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v120 = &v230;
      else
        v120 = (std::string *)v230.__r_.__value_.__r.__words[0];
      memmove(v119, v120, v118);
    }
    strcpy((char *)v119 + v118, "__add_c");
    memset(&v208, 0, sizeof(v208));
    if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v255, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
    else
      v255 = v226;
    memset(&v257, 0, sizeof(v257));
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
    v251.__r_.__value_.__s.__data_[8] = 0;
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v257.__r_.__value_.__l.__size_ = v257.__r_.__value_.__r.__words[0];
    v257.__r_.__value_.__r.__words[2] = v257.__r_.__value_.__r.__words[0] + 24;
    v257.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v257.__r_.__value_.__r.__words[2], (__int128 *)&v255, (__int128 *)&v256, (std::string *)v257.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v207, &v219, &lpsrc, (std::string **)&v208, (std::string **)&v257);
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v255.__r_.__value_.__l.__data_);
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (v115)
    {
      v121 = (unint64_t *)&v115->__shared_owners_;
      do
        v122 = __ldaxr(v121);
      while (__stlxr(v122 - 1, v121));
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v123 = v213;
    if (v213)
    {
      v124 = (unint64_t *)&v213->__shared_owners_;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
        std::__shared_weak_count::__release_weak(v123);
      }
    }
    v126 = v216;
    if (v216)
    {
      v127 = (unint64_t *)&v216->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
        std::__shared_weak_count::__release_weak(v126);
      }
    }
    v129 = (std::__shared_weak_count *)v218;
    if (v218)
    {
      v130 = (unint64_t *)(v218 + 8);
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = (std::__shared_weak_count *)v250;
    if (v250)
    {
      v133 = (unint64_t *)(v250 + 8);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v135 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
    v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v227;
    v136 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v135, &v227, (__int128 **)&v253);
    v137 = v221;
    *(_OWORD *)(v136 + 56) = __p;
    *(_OWORD *)(v136 + 72) = v137;
    *((_QWORD *)v136 + 11) = v222;
    if (v136 + 56 != (char *)&__p)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v136 + 96, (char *)v223, (uint64_t)v224, (v224 - (_BYTE *)v223) >> 2);
    v138 = (uint64_t **)(*(_QWORD *)(a1 + 40) + 184);
    v253.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226;
    v139 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v138, &v226, (__int128 **)&v253);
    v140 = v221;
    *(_OWORD *)(v139 + 56) = __p;
    *(_OWORD *)(v139 + 72) = v140;
    *((_QWORD *)v139 + 11) = v222;
    if (v139 + 56 != (char *)&__p)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v139 + 96, (char *)v223, (uint64_t)v224, (v224 - (_BYTE *)v223) >> 2);
    v141 = (std::__shared_weak_count *)v234;
    v206[0] = v233;
    v206[1] = v234;
    if (v234)
    {
      v142 = (unint64_t *)(v234 + 8);
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    std::string::basic_string[abi:ne180100]<0>(&v219, "elementwise");
    if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v144 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
    else
      v144 = v230.__r_.__value_.__l.__size_;
    v145 = &lpsrc;
    std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v144 + 5);
    if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v145 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
    if (v144)
    {
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v146 = &v230;
      else
        v146 = (std::string *)v230.__r_.__value_.__r.__words[0];
      memmove(v145, v146, v144);
    }
    strcpy((char *)v145 + v144, "__add");
    v147 = *(_QWORD *)(a1 + 40) + 56;
    v148 = a2[3].i32[2];
    v249 = (std::string *)v148;
    v149 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v147, v148, &v249)[3];
    if (*((char *)v149 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v253, *(const std::string::value_type **)v149, *((_QWORD *)v149 + 1));
    }
    else
    {
      v150 = *v149;
      v253.__r_.__value_.__r.__words[2] = *((_QWORD *)v149 + 2);
      *(_OWORD *)&v253.__r_.__value_.__l.__data_ = v150;
    }
    if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v254, v226.__r_.__value_.__l.__data_, v226.__r_.__value_.__l.__size_);
    else
      v254 = v226;
    memset(&v208, 0, sizeof(v208));
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
    v257.__r_.__value_.__s.__data_[8] = 0;
    v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
    v208.__r_.__value_.__l.__size_ = v208.__r_.__value_.__r.__words[0];
    v208.__r_.__value_.__r.__words[2] = v208.__r_.__value_.__r.__words[0] + 48;
    v208.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v208.__r_.__value_.__r.__words[2], (__int128 *)&v253, (__int128 *)&v255, (std::string *)v208.__r_.__value_.__l.__data_);
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v255, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
    else
      v255 = v228;
    memset(&v257, 0, sizeof(v257));
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
    v251.__r_.__value_.__s.__data_[8] = 0;
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v257.__r_.__value_.__l.__size_ = v257.__r_.__value_.__r.__words[0];
    v257.__r_.__value_.__r.__words[2] = v257.__r_.__value_.__r.__words[0] + 24;
    v257.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v257.__r_.__value_.__r.__words[2], (__int128 *)&v255, (__int128 *)&v256, (std::string *)v257.__r_.__value_.__l.__data_);
    Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v206, &v219, &lpsrc, (std::string **)&v208, (std::string **)&v257);
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v251);
    if (SHIBYTE(v255.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v255.__r_.__value_.__l.__data_);
    v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
    for (k = 0; k != -6; k -= 3)
    {
      if (SHIBYTE(v254.__r_.__value_.__r.__words[k + 2]) < 0)
        operator delete(*(void **)((char *)&v253 + k * 8 + 24));
    }
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (v141)
    {
      v152 = (unint64_t *)&v141->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
        std::__shared_weak_count::__release_weak(v141);
      }
    }
    if (v11 == 2)
    {
      v154 = *(_QWORD *)(a1 + 40) + 96;
      v155 = a2[3].i32[2];
      v253.__r_.__value_.__r.__words[0] = v155;
      v156 = (const void **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v154, v155, &v253)[3];
      if (*((char *)v156 + 23) >= 0)
        v157 = *((unsigned __int8 *)v156 + 23);
      else
        v157 = (size_t)v156[1];
      v158 = &v219;
      std::string::basic_string[abi:ne180100]((uint64_t)&v219, v157 + 6);
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v158 = (std::string *)v219.__r_.__value_.__r.__words[0];
      if (v157)
      {
        if (*((char *)v156 + 23) >= 0)
          v159 = v156;
        else
          v159 = *v156;
        memmove(v158, v159, v157);
      }
      strcpy((char *)v158 + v157, "__tmp2");
      v160 = (std::__shared_weak_count *)size;
      v205[0] = v235;
      v205[1] = size;
      if (size)
      {
        v161 = (unint64_t *)(size + 8);
        do
          v162 = __ldxr(v161);
        while (__stxr(v162 + 1, v161));
      }
      std::string::basic_string[abi:ne180100]<0>(&lpsrc, "elementwise");
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v163 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
      else
        v163 = v230.__r_.__value_.__l.__size_;
      v164 = &v208;
      std::string::basic_string[abi:ne180100]((uint64_t)&v208, v163 + 5);
      if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v164 = (std::string *)v208.__r_.__value_.__r.__words[0];
      if (v163)
      {
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v165 = &v230;
        else
          v165 = (std::string *)v230.__r_.__value_.__r.__words[0];
        memmove(v164, v165, v163);
      }
      strcpy((char *)v164 + v163, "__mul");
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v253, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
      else
        v253 = v228;
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v254, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
      else
        v254 = v227;
      memset(&v257, 0, sizeof(v257));
      v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
      v255.__r_.__value_.__s.__data_[8] = 0;
      v257.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v257.__r_.__value_.__l.__size_ = v257.__r_.__value_.__r.__words[0];
      v257.__r_.__value_.__r.__words[2] = v257.__r_.__value_.__r.__words[0] + 48;
      v257.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v257.__r_.__value_.__r.__words[2], (__int128 *)&v253, (__int128 *)&v255, (std::string *)v257.__r_.__value_.__l.__data_);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v251, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
      else
        v251 = v219;
      memset(&v255, 0, sizeof(v255));
      v249 = &v255;
      LOBYTE(v250) = 0;
      v255.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v255.__r_.__value_.__l.__size_ = v255.__r_.__value_.__r.__words[0];
      v255.__r_.__value_.__r.__words[2] = v255.__r_.__value_.__r.__words[0] + 24;
      v255.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v255.__r_.__value_.__r.__words[2], (__int128 *)&v251, (__int128 *)&v252, (std::string *)v255.__r_.__value_.__l.__data_);
      Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v205, &lpsrc, &v208, (std::string **)&v257, (std::string **)&v255);
      v249 = &v255;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v249);
      if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v251.__r_.__value_.__l.__data_);
      v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v257;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
      for (m = 0; m != -6; m -= 3)
      {
        if (SHIBYTE(v254.__r_.__value_.__r.__words[m + 2]) < 0)
          operator delete(*(void **)((char *)&v253 + m * 8 + 24));
      }
      if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v208.__r_.__value_.__l.__data_);
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (v160)
      {
        v179 = (unint64_t *)&v160->__shared_owners_;
        do
          v180 = __ldaxr(v179);
        while (__stlxr(v180 - 1, v179));
        if (!v180)
        {
          ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
          std::__shared_weak_count::__release_weak(v160);
        }
      }
      v181 = (std::__shared_weak_count *)v232;
      v204[0] = v231;
      v204[1] = v232;
      if (v232)
      {
        v182 = (unint64_t *)(v232 + 8);
        do
          v183 = __ldxr(v182);
        while (__stxr(v183 + 1, v182));
      }
      std::string::basic_string[abi:ne180100]<0>(&v253, "activation");
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v184 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
      else
        v184 = v230.__r_.__value_.__l.__size_;
      v185 = &lpsrc;
      std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v184 + 7);
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v185 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
      if (v184)
      {
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v186 = &v230;
        else
          v186 = (std::string *)v230.__r_.__value_.__r.__words[0];
        memmove(v185, v186, v184);
      }
      strcpy((char *)v185 + v184, "__lrelu");
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v257, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
      else
        v257 = v219;
      memset(&v208, 0, sizeof(v208));
      v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
      v255.__r_.__value_.__s.__data_[8] = 0;
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
      v208.__r_.__value_.__l.__size_ = v208.__r_.__value_.__r.__words[0];
      v208.__r_.__value_.__r.__words[2] = v208.__r_.__value_.__r.__words[0] + 24;
      v208.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v208.__r_.__value_.__r.__words[2], (__int128 *)&v257, &v258, (std::string *)v208.__r_.__value_.__l.__data_);
      v187 = *(_QWORD *)(a1 + 40) + 96;
      v188 = a2[3].i32[2];
      v255.__r_.__value_.__r.__words[0] = v188;
      v189 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v187, v188, &v255);
      Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v204, &v253, &lpsrc, (std::string **)&v208, v189 + 3);
      v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v255);
      if (SHIBYTE(v257.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v257.__r_.__value_.__l.__data_);
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v253.__r_.__value_.__l.__data_);
      if (v181)
      {
        v190 = (unint64_t *)&v181->__shared_owners_;
        do
          v191 = __ldaxr(v190);
        while (__stlxr(v191 - 1, v190));
        if (!v191)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
    }
    else
    {
      v166 = (std::__shared_weak_count *)size;
      v203[0] = v235;
      v203[1] = size;
      if (size)
      {
        v167 = (unint64_t *)(size + 8);
        do
          v168 = __ldxr(v167);
        while (__stxr(v168 + 1, v167));
      }
      std::string::basic_string[abi:ne180100]<0>(&v219, "elementwise");
      if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v169 = HIBYTE(v230.__r_.__value_.__r.__words[2]);
      else
        v169 = v230.__r_.__value_.__l.__size_;
      v170 = &lpsrc;
      std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v169 + 5);
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v170 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
      if (v169)
      {
        if ((v230.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v171 = &v230;
        else
          v171 = (std::string *)v230.__r_.__value_.__r.__words[0];
        memmove(v170, v171, v169);
      }
      strcpy((char *)v170 + v169, "__mul");
      if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v253, v228.__r_.__value_.__l.__data_, v228.__r_.__value_.__l.__size_);
      else
        v253 = v228;
      if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v254, v227.__r_.__value_.__l.__data_, v227.__r_.__value_.__l.__size_);
      else
        v254 = v227;
      memset(&v208, 0, sizeof(v208));
      v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
      v257.__r_.__value_.__s.__data_[8] = 0;
      v208.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v208.__r_.__value_.__l.__size_ = v208.__r_.__value_.__r.__words[0];
      v208.__r_.__value_.__r.__words[2] = v208.__r_.__value_.__r.__words[0] + 48;
      v208.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v208.__r_.__value_.__r.__words[2], (__int128 *)&v253, (__int128 *)&v255, (std::string *)v208.__r_.__value_.__l.__data_);
      v172 = *(_QWORD *)(a1 + 40) + 96;
      v173 = a2[3].i32[2];
      v257.__r_.__value_.__r.__words[0] = v173;
      v174 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v172, v173, &v257);
      Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v203, &v219, &lpsrc, (std::string **)&v208, v174 + 3);
      v257.__r_.__value_.__r.__words[0] = (std::string::size_type)&v208;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v257);
      for (n = 0; n != -6; n -= 3)
      {
        if (SHIBYTE(v254.__r_.__value_.__r.__words[n + 2]) < 0)
          operator delete(*(void **)((char *)&v253 + n * 8 + 24));
      }
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v219.__r_.__value_.__l.__data_);
      if (v166)
      {
        v176 = (unint64_t *)&v166->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (!v177)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
    }
    if (v223)
    {
      v224 = v223;
      operator delete(v223);
    }
    if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v226.__r_.__value_.__l.__data_);
    if (SHIBYTE(v227.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v227.__r_.__value_.__l.__data_);
    if (SHIBYTE(v228.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v228.__r_.__value_.__l.__data_);
    if (SHIBYTE(v229.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v229.__r_.__value_.__l.__data_);
    if (SHIBYTE(v230.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v230.__r_.__value_.__l.__data_);
    v192 = (std::__shared_weak_count *)v232;
    if (v232)
    {
      v193 = (unint64_t *)(v232 + 8);
      do
        v194 = __ldaxr(v193);
      while (__stlxr(v194 - 1, v193));
      if (!v194)
      {
        ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
        std::__shared_weak_count::__release_weak(v192);
      }
    }
    v195 = (std::__shared_weak_count *)v234;
    if (v234)
    {
      v196 = (unint64_t *)(v234 + 8);
      do
        v197 = __ldaxr(v196);
      while (__stlxr(v197 - 1, v196));
      if (!v197)
      {
        ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
        std::__shared_weak_count::__release_weak(v195);
      }
    }
    v198 = (std::__shared_weak_count *)size;
    if (size)
    {
      v199 = (unint64_t *)(size + 8);
      do
        v200 = __ldaxr(v199);
      while (__stlxr(v200 - 1, v199));
      if (!v200)
      {
        ((void (*)(std::__shared_weak_count *))v198->__on_zero_shared)(v198);
        std::__shared_weak_count::__release_weak(v198);
      }
    }
    v5 = v248;
  }
  if (v5)
  {
    v201 = (unint64_t *)&v5->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1918B8034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a67;
  void *a68;
  char a72;
  void *a73;
  char a74;
  void *a75;
  char a76;
  char a77;
  char a78;
  char a79;
  uint64_t v79;

  if (a28 < 0)
    operator delete(__p);
  if (*(char *)(v79 - 169) < 0)
    operator delete(*(void **)(v79 - 192));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a46 < 0)
    operator delete(a41);
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  if (a61 < 0)
    operator delete(a56);
  if (a67 < 0)
    operator delete(a62);
  if (a72 < 0)
    operator delete(a68);
  if (a74 < 0)
    operator delete(a73);
  if (a76 < 0)
    operator delete(a75);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a77);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a78);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a79);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v79 - 256);
  _Unwind_Resume(a1);
}

void Espresso::single_match_replace<Espresso::generic_general_padding_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_1918B8A08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso40pass_style_transfer_two_nets_onlyanepart14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  *(_WORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2) + 2) = 0;
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1918B8B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_style_transfer_two_nets_onlyanepart>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE9D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_style_transfer_two_nets_onlyanepart>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE9D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_style_transfer_two_nets_onlyanepart>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1918B8D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_style_transfer_parameterize_transplant::~pass_style_transfer_parameterize_transplant(Espresso::pass_style_transfer_parameterize_transplant *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_style_transfer_parameterize_transplant::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_style_transfer_parameterize_transplant::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  FILE *v10;
  std::__shared_weak_count *size;
  int v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char v16;
  uint64_t v17;
  const void *v18;
  void *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 *v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  const void *v28;
  void *v29;
  void *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _DWORD *v34;
  __n128 v35;
  uint64_t v36;
  _OWORD *v37;
  uint64_t v38;
  int v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  uint64_t v68;
  void *__p[2];
  char v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  void *v79;
  std::__shared_weak_count *v80;
  std::string v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  __int128 v85;
  _QWORD v86[6];

  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v86);
  v6 = *((_QWORD *)a1 + 4);
  v5 = *((_QWORD *)a1 + 5);
  v7 = getenv("ESPRESSO_RESHAPE_TWO_NETS");
  v8 = getenv("ESPRESSO_SHIFTS");
  v9 = v8;
  v85 = 0uLL;
  if (v8)
  {
    v10 = fopen(v8, "rb");
    Espresso::debug::read_blob_f4((Espresso::debug *)&v81, v10);
    size = (std::__shared_weak_count *)v81.__r_.__value_.__l.__size_;
    v85 = *(_OWORD *)&v81.__r_.__value_.__l.__data_;
  }
  else
  {
    size = 0;
  }
  v84 = 0;
  if (v5 != v6)
  {
    v68 = a2;
    v12 = 0;
    v13 = 0;
    v14 = (v5 - v6) >> 4;
    if (v7)
      v15 = v9 == 0;
    else
      v15 = 1;
    v16 = v15;
    do
    {
      v17 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v13);
      v18 = *(const void **)(v17 + 64);
      if (v18)
      {
        if (v19)
        {
          v20 = v19;
          v21 = *(std::__shared_weak_count **)(v17 + 72);
          v82 = v19;
          v83 = v21;
          if (v21)
          {
            p_shared_owners = (unint64_t *)&v21->__shared_owners_;
            do
              v23 = __ldxr(p_shared_owners);
            while (__stxr(v23 + 1, p_shared_owners));
          }
          __p[0] = &v84;
          v24 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v84, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
          if (*((char *)v24 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)v24, *((_QWORD *)v24 + 1));
          }
          else
          {
            v25 = *v24;
            v81.__r_.__value_.__r.__words[2] = *((_QWORD *)v24 + 2);
            *(_OWORD *)&v81.__r_.__value_.__l.__data_ = v25;
          }
          v26 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(v86, (uint64_t)&v81);
          if (!v26)
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          v27 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v26[5]);
          v28 = *(const void **)(v27 + 64);
          if (!v28
          {
            v79 = 0;
            v80 = 0;
            Espresso::throw_exception_selector<Espresso::generic_error>("Found non-batchnorm kernel producing input for transplant kernel. Aborting.");
          }
          v30 = v29;
          v31 = *(std::__shared_weak_count **)(v27 + 72);
          v79 = v29;
          v80 = v31;
          if (v31)
          {
            v32 = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldxr(v32);
            while (__stxr(v33 + 1, v32));
          }
          v34 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v20 + 384))(v20);
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v77, 4 * *v34, 1, 1, 1);
          v36 = *v34;
          if ((v16 & 1) != 0)
          {
            v35 = (__n128)xmmword_191A939A0;
            if ((int)v36 >= 1)
            {
              v37 = *(_OWORD **)(v77 + 16);
              do
              {
                *v37++ = xmmword_191A939A0;
                --v36;
              }
              while (v36);
            }
          }
          else
          {
            if ((int)v36 >= 1)
            {
              v38 = *(_QWORD *)(v85 + 24);
              v39 = 2 * v12;
              v40 = 2 * *(_DWORD *)(v85 + 12);
              v41 = (_DWORD *)(*(_QWORD *)(v77 + 16) + 8);
              v42 = *v34;
              do
              {
                *(v41 - 2) = *(_DWORD *)(v38 + 4 * v39);
                *(v41 - 1) = *(_DWORD *)(v38 + 4 * (v39 + 1));
                *v41 = *(_DWORD *)(v38 + 4 * (v40 + v39));
                v35.n128_u32[0] = *(_DWORD *)(v38 + 4 * (v40 + v39 + 1));
                v41[1] = v35.n128_u32[0];
                v39 += 2;
                v41 += 4;
                --v42;
              }
              while (v42);
            }
            v12 += v36;
          }
          (*(void (**)(uint64_t *__return_ptr, void *, __n128))(*(_QWORD *)v30 + 408))(&v75, v30, v35);
          (*(void (**)(uint64_t *__return_ptr, void *))(*(_QWORD *)v20 + 432))(&v73, v20);
          memcpy(*(void **)(v73 + 16), *(const void **)(v75 + 16), 4 * *(int *)(v75 + 8));
          v71 = 0;
          v72 = 0;
          std::string::basic_string[abi:ne180100]<0>(__p, "batchnorm_params");
          (*(void (**)(void *, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v20 + 168))(v20, &v71, __p, *(_QWORD *)(v75 + 16), 4 * *(int *)(v75 + 8), 0);
          if (v70 < 0)
            operator delete(__p[0]);
          v43 = v72;
          if (v72)
          {
            v44 = (unint64_t *)&v72->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v46 = v82;
          v71 = 0;
          v72 = 0;
          std::string::basic_string[abi:ne180100]<0>(__p, "shifts");
          (*(void (**)(void *, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v46 + 168))(v46, &v71, __p, *(_QWORD *)(v77 + 16), 4 * *(int *)(v77 + 8), 0);
          if (v70 < 0)
            operator delete(__p[0]);
          v47 = v72;
          if (v72)
          {
            v48 = (unint64_t *)&v72->__shared_owners_;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
            if (!v49)
            {
              ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
              std::__shared_weak_count::__release_weak(v47);
            }
          }
          v50 = v74;
          if (v74)
          {
            v51 = (unint64_t *)&v74->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v53 = v76;
          if (v76)
          {
            v54 = (unint64_t *)&v76->__shared_owners_;
            do
              v55 = __ldaxr(v54);
            while (__stlxr(v55 - 1, v54));
            if (!v55)
            {
              ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
              std::__shared_weak_count::__release_weak(v53);
            }
          }
          v56 = v78;
          if (v78)
          {
            v57 = (unint64_t *)&v78->__shared_owners_;
            do
              v58 = __ldaxr(v57);
            while (__stlxr(v58 - 1, v57));
            if (!v58)
            {
              ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
              std::__shared_weak_count::__release_weak(v56);
            }
          }
          v59 = v80;
          if (v80)
          {
            v60 = (unint64_t *)&v80->__shared_owners_;
            do
              v61 = __ldaxr(v60);
            while (__stlxr(v61 - 1, v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v81.__r_.__value_.__l.__data_);
          v62 = v83;
          if (v83)
          {
            v63 = (unint64_t *)&v83->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
      }
      v13 = v84 + 1;
      v84 = v13;
    }
    while (v13 < v14);
    size = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
    a2 = v68;
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
  if (size)
  {
    v65 = (unint64_t *)&size->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v86[2]);
  v67 = (void *)v86[0];
  v86[0] = 0;
  if (v67)
    operator delete(v67);
}

void sub_1918B93DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v36 - 144);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table(v36 - 128);
  _Unwind_Resume(a1);
}

void Espresso::pass_style_transfer_two_nets::~pass_style_transfer_two_nets(Espresso::pass_style_transfer_two_nets *this)
{
  *(_QWORD *)this = &off_1E2D98D10;
  Espresso::net_pass::~net_pass((Espresso::pass_style_transfer_two_nets *)((char *)this + 24));
  Espresso::net_pass::~net_pass(this);
}

{
  *(_QWORD *)this = &off_1E2D98D10;
  Espresso::net_pass::~net_pass((Espresso::pass_style_transfer_two_nets *)((char *)this + 24));
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_style_transfer_two_nets::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_style_transfer_two_nets::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  Espresso::net *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t **v27;
  __int128 *v28;
  __int128 v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  char v33;
  std::string::size_type *v34;
  std::string::size_type v35;
  std::string::size_type v36;
  size_t v37;
  std::string *p_str;
  const void *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t *v47;
  uint64_t *v48;
  char *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  std::vector<std::string> *v56;
  size_t size;
  std::string *v58;
  std::string *v59;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v62;
  uint64_t v63;
  std::vector<std::string>::pointer begin;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  std::string *v72;
  int v73;
  std::vector<std::string> *v74;
  size_t v75;
  std::string *v76;
  std::string *v77;
  std::string *v78;
  std::vector<std::string>::pointer v79;
  __int128 v80;
  std::vector<std::string>::pointer v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  std::string *v89;
  int v90;
  __int128 *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  void *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  std::__shared_weak_count *v107;
  unint64_t *p_shared_owners;
  unint64_t v109;
  uint64_t v110;
  std::string::size_type v111;
  void *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  void *v119;
  __n128 v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  size_t v131;
  std::string *p_lpsrc;
  const void *v133;
  std::string::size_type v134;
  std::string::size_type v135;
  std::string::size_type v136;
  std::string::size_type v137;
  std::string::size_type v138;
  void *v139;
  unint64_t *v140;
  unint64_t v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  size_t v145;
  std::string *v146;
  std::string *v147;
  size_t v148;
  __int128 *v149;
  std::string *v150;
  uint64_t i;
  size_t v152;
  std::string *v153;
  std::string *v154;
  size_t v155;
  __int128 *v156;
  std::string *v157;
  uint64_t j;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  char *v193;
  int v194;
  char *v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  void *v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  uint64_t v204;
  unint64_t v206;
  int v207[2];
  uint64_t v208;
  char *v209;
  unint64_t v210;
  uint64_t v212;
  std::__shared_weak_count *v213;
  char **v214;
  char *v215[2];
  unint64_t v216;
  __int128 v217;
  __int128 v218;
  void *__p[2];
  uint64_t v220;
  std::string v221;
  __int128 v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  _QWORD v227[7];
  char v228[16];
  std::__shared_weak_count *v229;
  std::string __str;
  __n128 v231;
  __n128 v232;
  __n128 v233;
  uint64_t v234;
  uint64_t v235;
  std::__shared_weak_count *v236;
  void *v237;
  std::string::size_type v238;
  uint64_t v239;
  std::__shared_weak_count *v240;
  void *v241;
  std::string::size_type v242;
  unint64_t v243;
  int64x2_t v244;
  unint64_t v245;
  uint64_t v246;
  char *v247;
  char *v248;
  _BYTE v249[32];
  __int128 v250;
  _BYTE v251[28];
  uint64_t v252;
  uint64_t v253[11];
  uint64_t v254[12];
  std::string lpsrc;
  __int128 v256;
  __int128 v257;
  uint64_t v258;
  _BYTE v259[24];
  _BYTE *v260;
  _BYTE v261[24];
  _BYTE *v262;
  _BYTE v263[24];
  _BYTE *v264;
  uint64_t v265;

  v3 = a1;
  v265 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)a1 + 4);
  v4 = *((_QWORD *)a1 + 5);
  v247 = 0;
  v246 = 0;
  v248 = 0;
  *(_QWORD *)v249 = &v246;
  v249[8] = 0;
  v6 = (v4 - v5) >> 4;
  v210 = v6;
  v206 = v4 - v5;
  *(_QWORD *)v207 = v5;
  v208 = v4;
  if (v4 == v5)
  {
    __str.__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    if ((unint64_t)(v4 - v5) >= 0x38E38E38E38E38E1)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>>((v4 - v5) >> 4);
    v246 = (uint64_t)v7;
    v248 = &v7[72 * v8];
    bzero(v7, 72 * ((72 * v6 - 72) / 0x48uLL) + 72);
    v9 = 0;
    v247 = &v7[72 * ((72 * v6 - 72) / 0x48uLL) + 72];
    __str.__r_.__value_.__r.__words[0] = 0;
    v10 = (uint64_t)v3 + 96;
    v11 = (uint64_t)v3 + 56;
    do
    {
      v12 = v246;
      v13 = (char *)operator new(0xF8uLL);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)v13 = &off_1E2DBF0D0;
      *((_QWORD *)v13 + 3) = &off_1E2DA1A38;
      *(_OWORD *)(v13 + 40) = 0u;
      *(_OWORD *)(v13 + 56) = 0u;
      *(_OWORD *)(v13 + 72) = 0u;
      *(_OWORD *)(v13 + 88) = 0u;
      *(_OWORD *)(v13 + 104) = 0u;
      *(_OWORD *)(v13 + 120) = 0u;
      *(_OWORD *)(v13 + 136) = 0u;
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 161) = 0u;
      *((_OWORD *)v13 + 13) = 0u;
      *((_OWORD *)v13 + 14) = 0u;
      *((_QWORD *)v13 + 30) = 0;
      v14 = v12 + 72 * v9 + 8;
      *(_QWORD *)v249 = v13 + 24;
      *(_QWORD *)&v249[8] = v13;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14, (__int128 *)v249);
      v15 = *(std::__shared_weak_count **)&v249[8];
      if (*(_QWORD *)&v249[8])
      {
        v16 = (unint64_t *)(*(_QWORD *)&v249[8] + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v3 = a1;
      std::string::operator=((std::string *)(*(_QWORD *)v14 + 16), (const std::string *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * __str.__r_.__value_.__r.__words[0]) + 16));
      std::string::operator=((std::string *)(*(_QWORD *)v14 + 40), (const std::string *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * __str.__r_.__value_.__r.__words[0]) + 40));
      v18 = *(_QWORD **)(*((_QWORD *)a1 + 4) + 16 * __str.__r_.__value_.__r.__words[0]);
      v19 = *(_QWORD *)v14;
      *(_QWORD *)(v19 + 8) = v18[1];
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v19 + 64), v18[8], v18[9]);
      v20 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * __str.__r_.__value_.__r.__words[0]);
      if (*(_QWORD *)v14 != v20)
      {
        std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(*(_QWORD *)v14 + 80, *(uint64_t **)(v20 + 80), *(uint64_t **)(v20 + 88), (uint64_t)(*(_QWORD *)(v20 + 88) - *(_QWORD *)(v20 + 80)) >> 4);
        v21 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * __str.__r_.__value_.__r.__words[0]);
        if (*(_QWORD *)v14 != v21)
          std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Espresso::abstract_blob_container>*,std::shared_ptr<Espresso::abstract_blob_container>*>(*(_QWORD *)v14 + 104, *(uint64_t **)(v21 + 104), *(uint64_t **)(v21 + 112), (uint64_t)(*(_QWORD *)(v21 + 112) - *(_QWORD *)(v21 + 104)) >> 4);
      }
      *(_QWORD *)v249 = &__str;
      v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v10, (unint64_t *)&__str, (uint64_t)&std::piecewise_construct, (uint64_t **)v249);
      if ((_QWORD *)(v12 + 72 * v9 + 48) != v22 + 3)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v12 + 72 * v9 + 48, (std::string *)v22[3], (std::string *)v22[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22[4] - v22[3]) >> 3));
      *(_QWORD *)v249 = &__str;
      v23 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v11, (unint64_t *)&__str, (uint64_t)&std::piecewise_construct, (uint64_t **)v249);
      v24 = (_QWORD *)(v12 + 72 * v9);
      if (v24 != v23)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v24 + 3), (std::string *)v23[3], (std::string *)v23[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23[4] - v23[3]) >> 3));
      v9 = __str.__r_.__value_.__r.__words[0] + 1;
      __str.__r_.__value_.__r.__words[0] = v9;
      v6 = v210;
    }
    while (v9 < v210);
  }
  *(_DWORD *)v249 = 0;
  Espresso::net::insert_layers((uint64_t)v3, (int *)v249, &v246);
  v25 = (char *)v3 + 16;
  v216 = 0;
  if (v208 != *(_QWORD *)v207)
  {
    v204 = (uint64_t)v3 + 16;
    v26 = (uint64_t)v3 + 96;
    v209 = (char *)v3 + 96;
    v27 = (uint64_t **)((char *)v3 + 184);
    do
    {
      lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
      v28 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, &v216, (uint64_t)&std::piecewise_construct, (uint64_t **)&lpsrc)[3];
      if (*((char *)v28 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v249, *(const std::string::value_type **)v28, *((_QWORD *)v28 + 1));
      }
      else
      {
        v29 = *v28;
        *(_QWORD *)&v249[16] = *((_QWORD *)v28 + 2);
        *(_OWORD *)v249 = v29;
      }
      std::string::append((std::string *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v216) + 16), "__small");
      v221.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
      lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, &v216, (uint64_t)&std::piecewise_construct, (uint64_t **)&v221)+ 3);
      v221.__r_.__value_.__r.__words[0] = (std::string::size_type)&v216;
      v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v3 + 56, &v216, (uint64_t)&std::piecewise_construct, (uint64_t **)&v221);
      v31 = 0;
      v32 = 0;
      lpsrc.__r_.__value_.__l.__size_ = (std::string::size_type)(v30 + 3);
      do
      {
        v33 = v31;
        v34 = (std::string::size_type *)*((_QWORD *)&lpsrc.__r_.__value_.__l.__data_ + v32);
        v36 = *v34;
        v35 = v34[1];
        while (v36 != v35)
        {
          if (*(char *)(v36 + 23) >= 0)
            v37 = *(unsigned __int8 *)(v36 + 23);
          else
            v37 = *(_QWORD *)(v36 + 8);
          std::string::basic_string[abi:ne180100]((uint64_t)&__str, v37 + 7);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (v37)
          {
            if (*(char *)(v36 + 23) >= 0)
              v39 = (const void *)v36;
            else
              v39 = *(const void **)v36;
            memmove(p_str, v39, v37);
          }
          strcpy((char *)p_str + v37, "__small");
          v221.__r_.__value_.__r.__words[0] = v36;
          v40 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, (_QWORD *)v36, (__int128 **)&v221);
          v221.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
          v41 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &__str, (__int128 **)&v221);
          v42 = *(_OWORD *)(v40 + 56);
          v43 = *(_OWORD *)(v40 + 72);
          *((_QWORD *)v41 + 11) = *((_QWORD *)v40 + 11);
          *(_OWORD *)(v41 + 72) = v43;
          *(_OWORD *)(v41 + 56) = v42;
          if (v41 != v40)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v41 + 96, *((char **)v40 + 12), *((_QWORD *)v40 + 13), (uint64_t)(*((_QWORD *)v40 + 13) - *((_QWORD *)v40 + 12)) >> 2);
          std::string::operator=((std::string *)v36, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v36 += 24;
        }
        v31 = 1;
        v32 = 1;
      }
      while ((v33 & 1) == 0);
      if ((v249[23] & 0x80000000) != 0)
        operator delete(*(void **)v249);
      ++v216;
      v26 = (uint64_t)v3 + 96;
      v6 = v210;
    }
    while (v216 < v210);
    v44 = 0;
    v243 = 0;
    v244 = 0uLL;
    v245 = 0;
    v3 = a1;
    v25 = (char *)v204;
    while (1)
    {
      v45 = *(_QWORD *)(*((_QWORD *)v3 + 4) + 16 * v44);
      v46 = *(const void **)(v45 + 64);
      if (v46)
      {
        if (v47)
          break;
      }
LABEL_260:
      v44 = v243 + 1;
      v243 = v44;
      if (v44 >= v210)
        goto LABEL_263;
    }
    v48 = v47;
    v49 = *(char **)(v45 + 72);
    v214 = (char **)v47;
    v215[0] = v49;
    if (v49)
    {
      v50 = (unint64_t *)(v49 + 8);
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    *(_QWORD *)v249 = &v243;
    v52 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, &v243, (uint64_t)&std::piecewise_construct, (uint64_t **)v249)[3];
    if (*((char *)v52 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)v52, *((_QWORD *)v52 + 1));
    }
    else
    {
      v53 = *v52;
      v221.__r_.__value_.__r.__words[2] = *((_QWORD *)v52 + 2);
      *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v53;
    }
    v54 = (*(uint64_t (**)(uint64_t *))(*v48 + 384))(v48);
    if (*(_DWORD *)(v54 + 8) != 1 || *(_DWORD *)(v54 + 4) != 1)
    {
      if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v221.__r_.__value_.__l.__data_);
LABEL_255:
      if (v49)
      {
        v170 = (unint64_t *)(v49 + 8);
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          (*(void (**)(char *))(*(_QWORD *)v49 + 16))(v49);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v49);
        }
      }
      goto LABEL_260;
    }
    *(_QWORD *)v249 = &v243;
    v56 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, &v243, (uint64_t)&std::piecewise_construct, (uint64_t **)v249);
    if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v221.__r_.__value_.__r.__words[2]);
    else
      size = v221.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 6);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &__str;
    else
      v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v59 = &v221;
      else
        v59 = (std::string *)v221.__r_.__value_.__r.__words[0];
      memmove(v58, v59, size);
    }
    strcpy((char *)v58 + size, "__mean");
    value = v56[1].__end_cap_.__value_;
    end = v56[1].__end_;
    if (end >= value)
    {
      begin = v56[1].__begin_;
      v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
      v66 = v65 + 1;
      v63 = (uint64_t)v209;
      if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      if (2 * v67 > v66)
        v66 = 2 * v67;
      if (v67 >= 0x555555555555555)
        v68 = 0xAAAAAAAAAAAAAAALL;
      else
        v68 = v66;
      *(_QWORD *)&v250 = (char *)v56 + 40;
      if (v68)
        v68 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v68);
      else
        v69 = 0;
      v70 = v68 + 24 * v65;
      *(_QWORD *)v249 = v68;
      *(_QWORD *)&v249[8] = v70;
      *(_QWORD *)&v249[24] = v68 + 24 * v69;
      v71 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)(v70 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      *(_OWORD *)v70 = v71;
      memset(&__str, 0, sizeof(__str));
      *(_QWORD *)&v249[16] = v70 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(v56 + 1, (std::__split_buffer<std::string> *)v249);
      v72 = v56[1].__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v249);
      v73 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      v56[1].__end_ = v72;
      if (v73 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      v62 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v62;
      v56[1].__end_ = end + 1;
      v63 = (uint64_t)v209;
    }
    *(_QWORD *)v249 = &v243;
    v74 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v63, &v243, (uint64_t)&std::piecewise_construct, (uint64_t **)v249);
    if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v75 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
    else
      v75 = v221.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v75 + 6);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v76 = &__str;
    else
      v76 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v75)
    {
      if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v77 = &v221;
      else
        v77 = (std::string *)v221.__r_.__value_.__r.__words[0];
      memmove(v76, v77, v75);
    }
    strcpy((char *)v76 + v75, "__ivar");
    v78 = v74[1].__end_cap_.__value_;
    v79 = v74[1].__end_;
    if (v79 >= v78)
    {
      v81 = v74[1].__begin_;
      v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v79 - (char *)v81) >> 3);
      v83 = v82 + 1;
      v26 = (uint64_t)v209;
      if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - (char *)v81) >> 3);
      if (2 * v84 > v83)
        v83 = 2 * v84;
      if (v84 >= 0x555555555555555)
        v85 = 0xAAAAAAAAAAAAAAALL;
      else
        v85 = v83;
      *(_QWORD *)&v250 = (char *)v74 + 40;
      if (v85)
        v85 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v85);
      else
        v86 = 0;
      v87 = v85 + 24 * v82;
      *(_QWORD *)v249 = v85;
      *(_QWORD *)&v249[8] = v87;
      *(_QWORD *)&v249[24] = v85 + 24 * v86;
      v88 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      *(_QWORD *)(v87 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
      *(_OWORD *)v87 = v88;
      memset(&__str, 0, sizeof(__str));
      *(_QWORD *)&v249[16] = v87 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(v74 + 1, (std::__split_buffer<std::string> *)v249);
      v89 = v74[1].__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)v249);
      v90 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
      v74[1].__end_ = v89;
      if (v90 < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      v80 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      v79->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v79->__r_.__value_.__l.__data_ = v80;
      v74[1].__end_ = v79 + 1;
      v26 = (uint64_t)v209;
    }
    v91 = (__int128 *)(*(uint64_t (**)(uint64_t *))(*v48 + 384))(v48);
    v3 = a1;
    v92 = v91[1];
    v93 = v91[2];
    v94 = v91[3];
    *(_OWORD *)&v251[12] = *(__int128 *)((char *)v91 + 60);
    v95 = *v91;
    v250 = v93;
    *(_OWORD *)v251 = v94;
    *(_OWORD *)v249 = v95;
    *(_OWORD *)&v249[16] = v92;
    *(_DWORD *)&v251[16] = 1;
    Espresso::abstract_engine_factory::shared(&v216);
    v96 = v216;
    std::string::basic_string[abi:ne180100]<0>(&__str, "batchnorm");
    LODWORD(v237) = 0;
    LODWORD(v235) = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v96, v204, (uint64_t)&__str, (uint64_t)v249, (int *)&v237);
    if (lpsrc.__r_.__value_.__r.__words[0]
    {
      v241 = v97;
      v242 = lpsrc.__r_.__value_.__l.__size_;
      if (!lpsrc.__r_.__value_.__l.__size_)
        goto LABEL_122;
      v98 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v99 = __ldxr(v98);
      while (__stxr(v99 + 1, v98));
    }
    else
    {
      v241 = 0;
      v242 = 0;
    }
    v100 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v101 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
LABEL_122:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v103 = (std::__shared_weak_count *)v217;
    if ((_QWORD)v217)
    {
      v104 = (unint64_t *)(v217 + 8);
      do
        v105 = __ldaxr(v104);
      while (__stlxr(v105 - 1, v104));
      if (!v105)
      {
        ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
        std::__shared_weak_count::__release_weak(v103);
      }
    }
    v106 = v241;
    (*((void (**)(uint64_t *__return_ptr))*v214 + 51))(&v239);
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v106 + 392))(v106, &v239);
    v107 = v240;
    if (v240)
    {
      p_shared_owners = (unint64_t *)&v240->__shared_owners_;
      do
        v109 = __ldaxr(p_shared_owners);
      while (__stlxr(v109 - 1, p_shared_owners));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v110 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v243);
    v112 = v241;
    v111 = v242;
    if (v242)
    {
      v113 = (unint64_t *)(v242 + 8);
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    v115 = *(std::__shared_weak_count **)(v110 + 72);
    *(_QWORD *)(v110 + 64) = v112;
    *(_QWORD *)(v110 + 72) = v111;
    if (v115)
    {
      v116 = (unint64_t *)&v115->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    DWORD2(v217) = 0;
    *(_QWORD *)&v217 = 0;
    v216 = *(unsigned int *)v249;
    Espresso::abstract_engine_factory::shared(&v235);
    v118 = v235;
    std::string::basic_string[abi:ne180100]<0>(&__str, "transplant");
    v234 = 0;
    Espresso::abstract_engine_factory::make_kernel_priv(v118, v204, (uint64_t)&__str, (uint64_t)&v216, (int *)&v234 + 1);
    if (lpsrc.__r_.__value_.__r.__words[0]
    {
      v237 = v119;
      v238 = lpsrc.__r_.__value_.__l.__size_;
      v120 = 0uLL;
      if (!lpsrc.__r_.__value_.__l.__size_)
      {
LABEL_154:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          v120 = 0uLL;
        }
        v126 = v236;
        if (v236)
        {
          v127 = (unint64_t *)&v236->__shared_owners_;
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v126->__on_zero_shared)(v126, v120);
            std::__shared_weak_count::__release_weak(v126);
            v120 = 0uLL;
          }
        }
        LODWORD(__str.__r_.__value_.__l.__data_) = 0;
        *(__n128 *)&__str.__r_.__value_.__r.__words[1] = v120;
        v231 = v120;
        v232 = v120;
        v233 = v120;
        v129 = (char *)operator new(0xF8uLL);
        *((_QWORD *)v129 + 1) = 0;
        *((_QWORD *)v129 + 2) = 0;
        *(_QWORD *)v129 = &off_1E2DBF0D0;
        *((_QWORD *)v129 + 3) = &off_1E2DA1A38;
        *(_OWORD *)(v129 + 40) = 0u;
        *(_OWORD *)(v129 + 56) = 0u;
        *(_OWORD *)(v129 + 72) = 0u;
        *(_OWORD *)(v129 + 88) = 0u;
        *(_OWORD *)(v129 + 104) = 0u;
        *(_OWORD *)(v129 + 120) = 0u;
        *(_OWORD *)(v129 + 136) = 0u;
        *(_OWORD *)(v129 + 152) = 0u;
        *(_OWORD *)(v129 + 161) = 0u;
        *((_OWORD *)v129 + 13) = 0u;
        *((_OWORD *)v129 + 14) = 0u;
        *((_QWORD *)v129 + 30) = 0;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v129 + 24);
        __str.__r_.__value_.__r.__words[2] = (std::string::size_type)v129;
        v130 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v243);
        if (*(char *)(v130 + 39) >= 0)
          v131 = *(unsigned __int8 *)(v130 + 39);
        else
          v131 = *(_QWORD *)(v130 + 24);
        std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v131 + 12);
        if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_lpsrc = &lpsrc;
        else
          p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        if (v131)
        {
          if (*(char *)(v130 + 39) >= 0)
            v133 = (const void *)(v130 + 16);
          else
            v133 = *(const void **)(v130 + 16);
          memmove(p_lpsrc, v133, v131);
        }
        strcpy((char *)p_lpsrc + v131, "__transplant");
        v134 = __str.__r_.__value_.__l.__size_;
        v135 = __str.__r_.__value_.__l.__size_ + 16;
        if (*(char *)(__str.__r_.__value_.__l.__size_ + 39) < 0)
        {
          operator delete(*(void **)v135);
          v134 = __str.__r_.__value_.__l.__size_;
        }
        v136 = lpsrc.__r_.__value_.__r.__words[2];
        *(_OWORD *)v135 = *(_OWORD *)&lpsrc.__r_.__value_.__l.__data_;
        *(_QWORD *)(v135 + 16) = v136;
        MEMORY[0x19401C808](v134 + 40, "transplant");
        v137 = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)(__str.__r_.__value_.__l.__size_ + 8) = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v243) + 8);
        v139 = v237;
        v138 = v238;
        if (v238)
        {
          v140 = (unint64_t *)(v238 + 8);
          do
            v141 = __ldxr(v140);
          while (__stxr(v141 + 1, v140));
        }
        v142 = *(std::__shared_weak_count **)(v137 + 72);
        *(_QWORD *)(v137 + 64) = v139;
        *(_QWORD *)(v137 + 72) = v138;
        if (v142)
        {
          v143 = (unint64_t *)&v142->__shared_owners_;
          do
            v144 = __ldaxr(v143);
          while (__stlxr(v144 - 1, v143));
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
            std::__shared_weak_count::__release_weak(v142);
          }
        }
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v145 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
        else
          v145 = v221.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v145 + 6);
        if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v146 = &lpsrc;
        else
          v146 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        if (v145)
        {
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v147 = &v221;
          else
            v147 = (std::string *)v221.__r_.__value_.__r.__words[0];
          memmove(v146, v147, v145);
        }
        strcpy((char *)v146 + v145, "__mean");
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v148 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
        else
          v148 = v221.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v256, v148 + 6);
        if ((SBYTE7(v257) & 0x80u) == 0)
          v149 = &v256;
        else
          v149 = (__int128 *)v256;
        if (v148)
        {
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v150 = &v221;
          else
            v150 = (std::string *)v221.__r_.__value_.__r.__words[0];
          memmove(v149, v150, v148);
        }
        strcpy((char *)v149 + v148, "__ivar");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v231, &lpsrc, (__int128 *)((char *)&v257 + 8), 2uLL);
        for (i = 0; i != -48; i -= 24)
        {
          if (*((char *)&v257 + i + 7) < 0)
            operator delete(*(void **)((char *)&lpsrc + i + 24));
        }
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v152 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
        else
          v152 = v221.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&lpsrc, v152 + 6);
        if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v153 = &lpsrc;
        else
          v153 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        if (v152)
        {
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v154 = &v221;
          else
            v154 = (std::string *)v221.__r_.__value_.__r.__words[0];
          memmove(v153, v154, v152);
        }
        strcpy((char *)v153 + v152, "__bias");
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v155 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
        else
          v155 = v221.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v256, v155 + 7);
        if ((SBYTE7(v257) & 0x80u) == 0)
          v156 = &v256;
        else
          v156 = (__int128 *)v256;
        if (v155)
        {
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v157 = &v221;
          else
            v157 = (std::string *)v221.__r_.__value_.__r.__words[0];
          memmove(v156, v157, v155);
        }
        strcpy((char *)v156 + v155, "__scale");
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&v232.n128_i8[8], &lpsrc, (__int128 *)((char *)&v257 + 8), 2uLL);
        for (j = 0; j != -48; j -= 24)
        {
          if (*((char *)&v257 + j + 7) < 0)
            operator delete(*(void **)((char *)&lpsrc + j + 24));
        }
        v159 = v244.i64[1];
        if (v244.i64[1] >= v245)
        {
          v160 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(&v244, (uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(v244.i64[1], (uint64_t)&__str);
          v160 = v159 + 72;
        }
        v244.i64[1] = v160;
        lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v232.n128_u64[1];
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
        lpsrc.__r_.__value_.__r.__words[0] = (std::string::size_type)&v231;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&lpsrc);
        v161 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
        if (__str.__r_.__value_.__r.__words[2])
        {
          v162 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
          do
            v163 = __ldaxr(v162);
          while (__stlxr(v163 - 1, v162));
          if (!v163)
          {
            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
            std::__shared_weak_count::__release_weak(v161);
          }
        }
        v164 = (std::__shared_weak_count *)v238;
        if (v238)
        {
          v165 = (unint64_t *)(v238 + 8);
          do
            v166 = __ldaxr(v165);
          while (__stlxr(v166 - 1, v165));
          if (!v166)
          {
            ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
            std::__shared_weak_count::__release_weak(v164);
          }
        }
        v167 = (std::__shared_weak_count *)v242;
        if (v242)
        {
          v168 = (unint64_t *)(v242 + 8);
          do
            v169 = __ldaxr(v168);
          while (__stlxr(v169 - 1, v168));
          if (!v169)
          {
            ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
            std::__shared_weak_count::__release_weak(v167);
          }
        }
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v221.__r_.__value_.__l.__data_);
        v49 = v215[0];
        goto LABEL_255;
      }
      v121 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v122 = __ldxr(v121);
      while (__stxr(v122 + 1, v121));
    }
    else
    {
      v237 = 0;
      v238 = 0;
      v120 = 0uLL;
    }
    v123 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
    if (lpsrc.__r_.__value_.__l.__size_)
    {
      v124 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 - 1, v124));
      if (!v125)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v123->__on_zero_shared)(v123, v120);
        std::__shared_weak_count::__release_weak(v123);
        v120 = 0uLL;
      }
    }
    goto LABEL_154;
  }
  v244 = 0uLL;
  v245 = 0;
LABEL_263:
  *(_DWORD *)v249 = v206 >> 4;
  Espresso::net::insert_layers((uint64_t)v3, (int *)v249, v244.i64);
  *((_BYTE *)v3 + 180) = 0;
  Espresso::shape_network_recursive(v3, (Espresso::net *)((char *)v3 + 184), 0, 0);
  Espresso::pass_style_transfer_parameterize_transplant::run_on_network(v3, (uint64_t)v228);
  v172 = v229;
  if (v229)
  {
    v173 = (unint64_t *)&v229->__shared_owners_;
    do
      v174 = __ldaxr(v173);
    while (__stlxr(v174 - 1, v173));
    if (!v174)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v249, "pass_style_transfer_two_nets: intermediate 0");
  v264 = 0;
  Espresso::net::pprint((uint64_t)v3, (uint64_t)v249, (uint64_t)v263);
  v175 = v264;
  if (v264 == v263)
  {
    v176 = 4;
    v175 = v263;
  }
  else
  {
    if (!v264)
      goto LABEL_273;
    v176 = 5;
  }
  (*(void (**)(void))(*v175 + 8 * v176))();
LABEL_273:
  if ((v249[23] & 0x80000000) != 0)
    operator delete(*(void **)v249);
  v227[0] = MEMORY[0x1E0C809B0];
  v227[1] = 3221225472;
  v227[2] = ___ZN8Espresso28pass_style_transfer_two_nets14run_on_networkERNS_3netE_block_invoke;
  v227[3] = &__block_descriptor_56_e9_v16__0_v8l;
  v227[4] = v6;
  v227[5] = v25;
  v227[6] = v3;
  Espresso::single_match_replace<Espresso::generic_batchnorm_kernel>(v3, v227);
  std::string::basic_string[abi:ne180100]<0>(v249, "pass_style_transfer_two_nets: intermediate 1");
  v262 = 0;
  Espresso::net::pprint((uint64_t)v3, (uint64_t)v249, (uint64_t)v261);
  v177 = v262;
  if (v262 == v261)
  {
    v178 = 4;
    v177 = v261;
  }
  else
  {
    if (!v262)
      goto LABEL_280;
    v178 = 5;
  }
  (*(void (**)(void))(*v177 + 8 * v178))();
LABEL_280:
  if ((v249[23] & 0x80000000) != 0)
    operator delete(*(void **)v249);
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v225, *(_QWORD *)v3, *((std::__shared_weak_count **)v3 + 1));
  Espresso::compute_network_shape_starting_from_data_shapes(&v225, (uint64_t)v3 + 184, (uint64_t)v249);
  v179 = (char *)v3 + 192;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v3 + 184, *((char **)v3 + 24));
  v180 = *(_QWORD *)&v249[8];
  *((_QWORD *)v3 + 23) = *(_QWORD *)v249;
  *((_QWORD *)v3 + 24) = v180;
  v181 = *(_QWORD *)&v249[16];
  *((_QWORD *)v3 + 25) = *(_QWORD *)&v249[16];
  if (v181)
  {
    *(_QWORD *)(v180 + 16) = v179;
    *(_QWORD *)v249 = &v249[8];
    *(_OWORD *)&v249[8] = 0uLL;
  }
  else
  {
    *((_QWORD *)v3 + 23) = v179;
  }
  v182 = (char *)v3 + 216;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v3 + 208, *((char **)v3 + 27));
  v183 = v250;
  *((_QWORD *)v3 + 26) = *(_QWORD *)&v249[24];
  *((_QWORD *)v3 + 27) = v183;
  v184 = *((_QWORD *)&v250 + 1);
  *((_QWORD *)v3 + 28) = *((_QWORD *)&v250 + 1);
  if (v184)
  {
    *(_QWORD *)(v183 + 16) = v182;
    *(_QWORD *)&v249[24] = &v250;
    v250 = 0uLL;
    v183 = 0;
  }
  else
  {
    *((_QWORD *)v3 + 26) = v182;
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v249[24], (char *)v183);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v249, *(char **)&v249[8]);
  v185 = v226;
  if (v226)
  {
    v186 = (unint64_t *)&v226->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
      std::__shared_weak_count::__release_weak(v185);
    }
  }
  *((_BYTE *)v3 + 180) = 0;
  Espresso::shape_network_recursive(v3, (Espresso::net *)((char *)v3 + 184), 0, 0);
  Espresso::single_match_replace<Espresso::generic_general_padding_kernel>(v3, &__block_literal_global_18387);
  std::string::basic_string[abi:ne180100]<0>(v249, "pass_style_transfer_two_nets");
  v260 = 0;
  Espresso::net::pprint((uint64_t)v3, (uint64_t)v249, (uint64_t)v259);
  v188 = v260;
  if (v260 == v259)
  {
    v189 = 4;
    v188 = v259;
  }
  else
  {
    if (!v260)
      goto LABEL_298;
    v189 = 5;
  }
  (*(void (**)(void))(*v188 + 8 * v189))();
LABEL_298:
  if ((v249[23] & 0x80000000) != 0)
    operator delete(*(void **)v249);
  if ((unint64_t)(v210
                        + 954437177 * ((unint64_t)(v244.i64[1] - v244.i64[0]) >> 3)) << 32)
  {
    v190 = (int)(v210 + 954437177 * ((unint64_t)(v244.i64[1] - v244.i64[0]) >> 3));
    v191 = (uint64_t *)*((_QWORD *)v3 + 4);
    if (v190 <= 1)
      v190 = 1;
    do
    {
      v192 = *v191;
      v191 += 2;
      *(_DWORD *)(*(_QWORD *)(v192 + 64) + 140) = 1;
      --v190;
    }
    while (v190);
  }
  if (getenv("ESPRESSO_RESHAPE_TWO_NETS"))
  {
    v193 = getenv("ESPRESSO_TWO_NETS_SMALL_RES");
    if (v193)
      v194 = atoi(v193);
    else
      v194 = 64;
    v195 = getenv("ESPRESSO_TWO_NETS_LARGE_RES");
    if (v195)
      v196 = atoi(v195);
    else
      v196 = 512;
    v233.n128_u64[0] = 0;
    v231 = 0u;
    v232 = 0u;
    LODWORD(__str.__r_.__value_.__l.__data_) = v194;
    HIDWORD(__str.__r_.__value_.__r.__words[0]) = v194;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_191A939B0;
    v258 = 0;
    v257 = 0u;
    v256 = 0u;
    LODWORD(lpsrc.__r_.__value_.__l.__data_) = v194;
    HIDWORD(lpsrc.__r_.__value_.__r.__words[0]) = v194;
    *(_OWORD *)&lpsrc.__r_.__value_.__r.__words[1] = xmmword_191A939B0;
    v224 = 0;
    v223 = 0u;
    v222 = 0u;
    LODWORD(v221.__r_.__value_.__l.__data_) = v196;
    HIDWORD(v221.__r_.__value_.__r.__words[0]) = v196;
    *(_OWORD *)&v221.__r_.__value_.__r.__words[1] = xmmword_191A939B0;
    v220 = 0;
    *(_OWORD *)__p = 0u;
    v218 = 0u;
    LODWORD(v216) = v196;
    HIDWORD(v216) = v196;
    v217 = xmmword_191A939B0;
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<char const(&)[13],Espresso::layer_shape&,0>(v249, "data0__small", (__int128 *)&__str);
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<char const(&)[13],Espresso::layer_shape&,0>(&v252, "data2__small", (__int128 *)&lpsrc);
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<char const(&)[6],Espresso::layer_shape&,0>(v253, "data0", (__int128 *)&v221);
    std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<char const(&)[6],Espresso::layer_shape&,0>(v254, "data2", (__int128 *)&v216);
    v197 = 0;
    v215[0] = 0;
    v215[1] = 0;
    v214 = v215;
    do
    {
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,Espresso::layer_shape> const&>((uint64_t **)&v214, v215, &v249[v197], (__int128 *)&v249[v197]);
      v197 += 88;
    }
    while (v197 != 352);
    v198 = 352;
    do
    {
      v199 = &v249[v198];
      v200 = *(void **)((char *)&v246 + v198);
      if (v200)
      {
        *((_QWORD *)v199 - 2) = v200;
        operator delete(v200);
      }
      if ((char)*(v199 - 65) < 0)
        operator delete(*((void **)v199 - 11));
      v198 -= 88;
    }
    while (v198);
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v212, *(_QWORD *)v3, *((std::__shared_weak_count **)v3 + 1));
    Espresso::compute_network_shape_starting_from_data_shapes(&v212, (uint64_t)&v214, (uint64_t)v249);
    v201 = v213;
    if (v213)
    {
      v202 = (unint64_t *)&v213->__shared_owners_;
      do
        v203 = __ldaxr(v202);
      while (__stlxr(v203 - 1, v202));
      if (!v203)
      {
        ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
        std::__shared_weak_count::__release_weak(v201);
      }
    }
    *((_BYTE *)v3 + 180) = 0;
    Espresso::shape_network_recursive(v3, (Espresso::net *)v249, 0, 0);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v249[24], (char *)v250);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v249, *(char **)&v249[8]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v214, v215[0]);
    if (__p[0])
      operator delete(__p[0]);
    if ((_QWORD)v223)
      operator delete((void *)v223);
    if ((_QWORD)v257)
      operator delete((void *)v257);
    if (v232.n128_u64[0])
      operator delete((void *)v232.n128_u64[0]);
  }
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
  *(_QWORD *)v249 = &v244;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v249);
  *(_QWORD *)v249 = &v246;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)v249);
}

void sub_1918BADC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  Espresso::network_shape::~network_shape((char **)&STACK[0x230]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a22, (char *)a23);
  if (__p)
    operator delete(__p);
  if (a38)
    operator delete(a38);
  if (STACK[0x3C0])
    operator delete((void *)STACK[0x3C0]);
  if (a59)
    operator delete(a59);
  a54 = &STACK[0x200];
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  a54 = &STACK[0x218];
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso28pass_style_transfer_two_nets14run_on_networkERNS_3netE_block_invoke(_QWORD *a1, int64x2_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _DWORD *v8;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  __int128 *v51;
  __int128 v52;
  size_t v53;
  std::string *v54;
  std::string *v55;
  size_t v56;
  std::string *v57;
  std::string *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  size_t v62;
  std::string *p_p;
  std::string *p_lpsrc;
  size_t v65;
  uint64_t v66;
  void *v67;
  std::string *v68;
  uint64_t i;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  size_t v75;
  std::string *v76;
  std::string *v77;
  size_t v78;
  uint64_t v79;
  void *v80;
  std::string *v81;
  std::string *v82;
  char *v83;
  std::string::size_type *p_size;
  uint64_t j;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  size_t v91;
  std::string *v92;
  std::string *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107[2];
  uint64_t v108[2];
  std::string *v109;
  std::string *v110;
  void **p_data;
  std::string __p;
  std::string v113;
  uint64_t v114[2];
  std::string v115;
  std::string v116;
  std::string v117;
  std::string v118;
  std::string lpsrc;
  uint64_t v120;
  std::string::size_type v121;
  uint64_t v122;
  std::string::size_type v123;
  uint64_t v124;
  std::string::size_type size;
  _DWORD v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD v130[3];
  char v131;
  uint64_t v132;
  _QWORD v133[3];
  char v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  void ***v138;
  char v139;
  std::string v140;
  uint64_t v141;
  std::string v142;
  _QWORD v143[2];
  char v144;
  std::string v145;
  __int128 v146;

  *(_QWORD *)&v146 = *MEMORY[0x1E0C80C00];
  if (a1[4] <= (unint64_t)a2[3].i32[2])
  {
    v4 = a2->i64[0];
    v5 = (std::__shared_weak_count *)a2->i64[1];
    v136 = a2->i64[0];
    v137 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    v8 = (_DWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 384))(v4);
    if (v8[2] == 1 && v8[1] == 1)
    {
      v10 = v8[7];
      v11 = v8[9];
      v133[2] = 897988541;
      v134 = 0;
      v135 = 0;
      v133[0] = 1;
      v133[1] = 1065353216;
      v130[2] = 897988541;
      v131 = 0;
      v132 = 0;
      v130[0] = 0;
      v130[1] = 1065353216;
      v126[2] = 1065353216;
      v128 = 0;
      v129 = 0;
      v127 = 0;
      v126[1] = v11;
      v126[0] = 2;
      Espresso::abstract_engine_factory::shared(&v118);
      v12 = v118.__r_.__value_.__r.__words[0];
      v13 = a1[5];
      std::string::basic_string[abi:ne180100]<0>(&v142, "elementwise");
      LODWORD(v117.__r_.__value_.__l.__data_) = 0;
      LODWORD(v116.__r_.__value_.__l.__data_) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v12, v13, (uint64_t)&v142, (uint64_t)v133, (int *)&v117);
      if (lpsrc.__r_.__value_.__r.__words[0]
      {
        v124 = (uint64_t)v14;
        size = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_)
        {
          v15 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
      }
      else
      {
        v124 = 0;
        size = 0;
      }
      v17 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v18 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v142.__r_.__value_.__l.__data_);
      v20 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
      if (v118.__r_.__value_.__l.__size_)
      {
        v21 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      Espresso::abstract_engine_factory::shared(&v118);
      v23 = v118.__r_.__value_.__r.__words[0];
      v24 = a1[5];
      std::string::basic_string[abi:ne180100]<0>(&v142, "elementwise");
      LODWORD(v117.__r_.__value_.__l.__data_) = 0;
      LODWORD(v116.__r_.__value_.__l.__data_) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v23, v24, (uint64_t)&v142, (uint64_t)v130, (int *)&v117);
      if (lpsrc.__r_.__value_.__r.__words[0]
      {
        v122 = (uint64_t)v25;
        v123 = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_)
        {
          v26 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
      }
      else
      {
        v122 = 0;
        v123 = 0;
      }
      v28 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v29 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v142.__r_.__value_.__l.__data_);
      v31 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
      if (v118.__r_.__value_.__l.__size_)
      {
        v32 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      Espresso::abstract_engine_factory::shared(&v118);
      v34 = v118.__r_.__value_.__r.__words[0];
      v35 = a1[5];
      std::string::basic_string[abi:ne180100]<0>(&v142, "activation");
      LODWORD(v117.__r_.__value_.__l.__data_) = 0;
      LODWORD(v116.__r_.__value_.__l.__data_) = 0;
      Espresso::abstract_engine_factory::make_kernel_priv(v34, v35, (uint64_t)&v142, (uint64_t)v126, (int *)&v117);
      if (lpsrc.__r_.__value_.__r.__words[0]
      {
        v120 = (uint64_t)v36;
        v121 = lpsrc.__r_.__value_.__l.__size_;
        if (lpsrc.__r_.__value_.__l.__size_)
        {
          v37 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
          do
            v38 = __ldxr(v37);
          while (__stxr(v38 + 1, v37));
        }
      }
      else
      {
        v120 = 0;
        v121 = 0;
      }
      v39 = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
      if (lpsrc.__r_.__value_.__l.__size_)
      {
        v40 = (unint64_t *)(lpsrc.__r_.__value_.__l.__size_ + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v142.__r_.__value_.__l.__data_);
      v42 = (std::__shared_weak_count *)v118.__r_.__value_.__l.__size_;
      if (v118.__r_.__value_.__l.__size_)
      {
        v43 = (unint64_t *)(v118.__r_.__value_.__l.__size_ + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::remove_layer(a2);
      v45 = a1[6];
      v46 = a2[3].i32[2];
      v47 = *(_QWORD *)(*(_QWORD *)(v45 + 32) + 16 * v46);
      if (*(char *)(v47 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&lpsrc, *(const std::string::value_type **)(v47 + 16), *(_QWORD *)(v47 + 24));
        v45 = a1[6];
        v46 = a2[3].i32[2];
      }
      else
      {
        lpsrc = *(std::string *)(v47 + 16);
      }
      v142.__r_.__value_.__r.__words[0] = v46;
      v48 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v45 + 56, v46, &v142)[3];
      if (*((char *)v48 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v118, *(const std::string::value_type **)v48, *((_QWORD *)v48 + 1));
      }
      else
      {
        v49 = *v48;
        v118.__r_.__value_.__r.__words[2] = *((_QWORD *)v48 + 2);
        *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v49;
      }
      v50 = a1[6] + 96;
      v142.__r_.__value_.__r.__words[0] = a2[3].i32[2];
      v51 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v50, v142.__r_.__value_.__r.__words[0], &v142)[3];
      if (*((char *)v51 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v117, *(const std::string::value_type **)v51, *((_QWORD *)v51 + 1));
      }
      else
      {
        v52 = *v51;
        v117.__r_.__value_.__r.__words[2] = *((_QWORD *)v51 + 2);
        *(_OWORD *)&v117.__r_.__value_.__l.__data_ = v52;
      }
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      else
        v53 = v117.__r_.__value_.__l.__size_;
      v54 = &v116;
      std::string::basic_string[abi:ne180100]((uint64_t)&v116, v53 + 5);
      if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v54 = (std::string *)v116.__r_.__value_.__r.__words[0];
      if (v53)
      {
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = &v117;
        else
          v55 = (std::string *)v117.__r_.__value_.__r.__words[0];
        memmove(v54, v55, v53);
      }
      strcpy((char *)v54 + v53, "__tmp");
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      else
        v56 = v117.__r_.__value_.__l.__size_;
      v57 = &v115;
      std::string::basic_string[abi:ne180100]((uint64_t)&v115, v56 + 6);
      if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v57 = (std::string *)v115.__r_.__value_.__r.__words[0];
      if (v56)
      {
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v58 = &v117;
        else
          v58 = (std::string *)v117.__r_.__value_.__r.__words[0];
        memmove(v57, v58, v56);
      }
      strcpy((char *)v57 + v56, "__tmp2");
      v59 = (std::__shared_weak_count *)v123;
      v114[0] = v122;
      v114[1] = v123;
      if (v123)
      {
        v60 = (unint64_t *)(v123 + 8);
        do
          v61 = __ldxr(v60);
        while (__stxr(v61 + 1, v60));
      }
      std::string::basic_string[abi:ne180100]<0>(&v113, "elementwise");
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v62 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      else
        v62 = lpsrc.__r_.__value_.__l.__size_;
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v62 + 5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v62)
      {
        if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_lpsrc = &lpsrc;
        else
          p_lpsrc = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        memmove(p_p, p_lpsrc, v62);
      }
      strcpy((char *)p_p + v62, "__add");
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v142, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
      else
        v142 = v118;
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v65 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      else
        v65 = v117.__r_.__value_.__l.__size_;
      v66 = std::string::basic_string[abi:ne180100]((uint64_t)v143, v65 + 13);
      if (v144 >= 0)
        v67 = (void *)v66;
      else
        v67 = (void *)v143[0];
      if (v65)
      {
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v68 = &v117;
        else
          v68 = (std::string *)v117.__r_.__value_.__r.__words[0];
        memmove(v67, v68, v65);
      }
      strcpy((char *)v67 + v65, "__small__bias");
      memset(&v145, 0, sizeof(v145));
      v109 = &v145;
      LOBYTE(v110) = 0;
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v145.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[2] = v145.__r_.__value_.__r.__words[0] + 48;
      v145.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v145.__r_.__value_.__r.__words[2], (__int128 *)&v142, (__int128 *)&v145, (std::string *)v145.__r_.__value_.__l.__data_);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v140, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
      else
        v140 = v116;
      v109 = 0;
      v110 = 0;
      p_data = 0;
      v138 = (void ***)&v109;
      v139 = 0;
      v109 = (std::string *)operator new(0x18uLL);
      v110 = v109;
      p_data = (void **)&v109[1].__r_.__value_.__l.__data_;
      v110 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v140, (__int128 *)&v141, v109);
      Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v114, &v113, &__p, (std::string **)&v145, &v109);
      v138 = (void ***)&v109;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      v109 = &v145;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      for (i = 0; i != -48; i -= 24)
      {
        if (*(&v144 + i) < 0)
          operator delete(*(void **)((char *)&v142 + i + 24));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (v59)
      {
        v70 = (unint64_t *)&v59->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v72 = (std::__shared_weak_count *)size;
      v108[0] = v124;
      v108[1] = size;
      if (size)
      {
        v73 = (unint64_t *)(size + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      std::string::basic_string[abi:ne180100]<0>(&v113, "elementwise");
      if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
      else
        v75 = lpsrc.__r_.__value_.__l.__size_;
      v76 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v75 + 5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (v75)
      {
        if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v77 = &lpsrc;
        else
          v77 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
        memmove(v76, v77, v75);
      }
      strcpy((char *)v76 + v75, "__mul");
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v142, v116.__r_.__value_.__l.__data_, v116.__r_.__value_.__l.__size_);
      else
        v142 = v116;
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v78 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
      else
        v78 = v117.__r_.__value_.__l.__size_;
      v79 = std::string::basic_string[abi:ne180100]((uint64_t)v143, v78 + 14);
      if (v144 >= 0)
        v80 = (void *)v79;
      else
        v80 = (void *)v143[0];
      if (v78)
      {
        if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v81 = &v117;
        else
          v81 = (std::string *)v117.__r_.__value_.__r.__words[0];
        memmove(v80, v81, v78);
      }
      strcpy((char *)v80 + v78, "__small__scale");
      memset(&v145, 0, sizeof(v145));
      v109 = &v145;
      LOBYTE(v110) = 0;
      v145.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x30uLL);
      v145.__r_.__value_.__l.__size_ = v145.__r_.__value_.__r.__words[0];
      v145.__r_.__value_.__r.__words[2] = v145.__r_.__value_.__r.__words[0] + 48;
      v145.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v145.__r_.__value_.__r.__words[2], (__int128 *)&v142, (__int128 *)&v145, (std::string *)v145.__r_.__value_.__l.__data_);
      if (v10 == 2)
        v82 = &v115;
      else
        v82 = &v117;
      v83 = (char *)&v115.__r_.__value_.__r.__words[2] + 7;
      if (v10 != 2)
        v83 = (char *)&v117.__r_.__value_.__r.__words[2] + 7;
      if (*v83 < 0)
      {
        p_size = &v117.__r_.__value_.__l.__size_;
        if (v10 == 2)
          p_size = &v115.__r_.__value_.__l.__size_;
        std::string::__init_copy_ctor_external(&v140, v82->__r_.__value_.__l.__data_, *p_size);
      }
      else
      {
        v140 = *v82;
      }
      v109 = 0;
      v110 = 0;
      p_data = 0;
      v138 = (void ***)&v109;
      v139 = 0;
      v109 = (std::string *)operator new(0x18uLL);
      v110 = v109;
      p_data = (void **)&v109[1].__r_.__value_.__l.__data_;
      v110 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v140, (__int128 *)&v141, v109);
      Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v108, &v113, &__p, (std::string **)&v145, &v109);
      v138 = (void ***)&v109;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v140.__r_.__value_.__l.__data_);
      v109 = &v145;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
      for (j = 0; j != -48; j -= 24)
      {
        if (*(&v144 + j) < 0)
          operator delete(*(void **)((char *)&v142 + j + 24));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v113.__r_.__value_.__l.__data_);
      if (v72)
      {
        v86 = (unint64_t *)&v72->__shared_owners_;
        do
          v87 = __ldaxr(v86);
        while (__stlxr(v87 - 1, v86));
        if (!v87)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      if (v10 == 2)
      {
        v88 = (std::__shared_weak_count *)v121;
        v107[0] = v120;
        v107[1] = v121;
        if (v121)
        {
          v89 = (unint64_t *)(v121 + 8);
          do
            v90 = __ldxr(v89);
          while (__stxr(v90 + 1, v89));
        }
        std::string::basic_string[abi:ne180100]<0>(&v142, "activation");
        if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v91 = HIBYTE(lpsrc.__r_.__value_.__r.__words[2]);
        else
          v91 = lpsrc.__r_.__value_.__l.__size_;
        v92 = &v113;
        std::string::basic_string[abi:ne180100]((uint64_t)&v113, v91 + 7);
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v92 = (std::string *)v113.__r_.__value_.__r.__words[0];
        if (v91)
        {
          if ((lpsrc.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &lpsrc;
          else
            v93 = (std::string *)lpsrc.__r_.__value_.__r.__words[0];
          memmove(v92, v93, v91);
        }
        strcpy((char *)v92 + v91, "__lrelu");
        if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v145, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
        else
          v145 = v115;
        memset(&__p, 0, sizeof(__p));
        v109 = &__p;
        LOBYTE(v110) = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[0] + 24;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&__p.__r_.__value_.__r.__words[2], (__int128 *)&v145, &v146, (std::string *)__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v140, v117.__r_.__value_.__l.__data_, v117.__r_.__value_.__l.__size_);
        else
          v140 = v117;
        v109 = 0;
        v110 = 0;
        p_data = 0;
        v138 = (void ***)&v109;
        v139 = 0;
        v109 = (std::string *)operator new(0x18uLL);
        v110 = v109;
        p_data = (void **)&v109[1].__r_.__value_.__l.__data_;
        v110 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v140, (__int128 *)&v141, v109);
        Espresso::single_match_state<Espresso::generic_batchnorm_kernel>::add_kernel(a2, v107, &v142, &v113, (std::string **)&__p, &v109);
        v138 = (void ***)&v109;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v138);
        if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v140.__r_.__value_.__l.__data_);
        v109 = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
        if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v145.__r_.__value_.__l.__data_);
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
        if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v142.__r_.__value_.__l.__data_);
        if (v88)
        {
          v94 = (unint64_t *)&v88->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
      }
      if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v115.__r_.__value_.__l.__data_);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v116.__r_.__value_.__l.__data_);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118.__r_.__value_.__l.__data_);
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
        operator delete(lpsrc.__r_.__value_.__l.__data_);
      v96 = (std::__shared_weak_count *)v121;
      if (v121)
      {
        v97 = (unint64_t *)(v121 + 8);
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
          std::__shared_weak_count::__release_weak(v96);
        }
      }
      v99 = (std::__shared_weak_count *)v123;
      if (v123)
      {
        v100 = (unint64_t *)(v123 + 8);
        do
          v101 = __ldaxr(v100);
        while (__stlxr(v101 - 1, v100));
        if (!v101)
        {
          ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
          std::__shared_weak_count::__release_weak(v99);
        }
      }
      v102 = (std::__shared_weak_count *)size;
      if (size)
      {
        v103 = (unint64_t *)(size + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v5 = v137;
    }
    if (v5)
    {
      v105 = (unint64_t *)&v5->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1918BC044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  uint64_t v64;

  a14 = (uint64_t)&a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 121) < 0)
    operator delete(*(void **)(v64 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  if (a45 < 0)
    operator delete(a40);
  if (a52 < 0)
    operator delete(a47);
  if (a59 < 0)
    operator delete(a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v64 - 208);
  _Unwind_Resume(a1);
}

void sub_1918BC330()
{
  JUMPOUT(0x1918BC2C8);
}

void sub_1918BC338()
{
  JUMPOUT(0x1918BC2D8);
}

void sub_1918BC348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  JUMPOUT(0x1918BC310);
}

void sub_1918BC370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  JUMPOUT(0x1918BC318);
}

void sub_1918BC398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 121) < 0)
    operator delete(*(void **)(v35 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  JUMPOUT(0x1918BC320);
}

void sub_1918BC3C0()
{
  JUMPOUT(0x1918BC2E8);
}

void sub_1918BC3C8()
{
  JUMPOUT(0x1918BC2F8);
}

void sub_1918BC3D0()
{
  JUMPOUT(0x1918BC320);
}

_QWORD *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<char const(&)[13],Espresso::layer_shape&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v6 = *a3;
  v7 = a3[1];
  v8 = *((_QWORD *)a3 + 4);
  v5[8] = 0;
  v5 += 8;
  *(v5 - 1) = v8;
  *(_OWORD *)(v5 - 3) = v7;
  *(_OWORD *)(v5 - 5) = v6;
  v5[1] = 0;
  v5[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5, *((const void **)a3 + 5), *((_QWORD *)a3 + 6), (uint64_t)(*((_QWORD *)a3 + 6) - *((_QWORD *)a3 + 5)) >> 2);
  return a1;
}

void sub_1918BC42C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::pair<std::string const,Espresso::layer_shape>::pair[abi:ne180100]<char const(&)[6],Espresso::layer_shape&,0>(_QWORD *a1, char *a2, __int128 *a3)
{
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  v6 = *a3;
  v7 = a3[1];
  v8 = *((_QWORD *)a3 + 4);
  v5[8] = 0;
  v5 += 8;
  *(v5 - 1) = v8;
  *(_OWORD *)(v5 - 3) = v7;
  *(_OWORD *)(v5 - 5) = v6;
  v5[1] = 0;
  v5[2] = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5, *((const void **)a3 + 5), *((_QWORD *)a3 + 6), (uint64_t)(*((_QWORD *)a3 + 6) - *((_QWORD *)a3 + 5)) >> 2);
  return a1;
}

void sub_1918BC49C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void ___ZN8Espresso28pass_style_transfer_two_nets14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  *(_WORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 320))(v2) + 2) = 0;
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1918BC548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_style_transfer_two_nets>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_style_transfer_two_nets>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_style_transfer_two_nets>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1918BC76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::pass_style_transfer_parameterize_transplant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEA08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_style_transfer_parameterize_transplant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEA08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_style_transfer_parameterize_transplant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::MPSEngine::convolution_grad_kernel::~convolution_grad_kernel(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::convolution_grad_kernel::__launch(int32x2_t *a1, uint64_t a2, uint64_t **a3, int32x2_t ***a4)
{
  int32x2_t ***v4;
  std::__shared_weak_count **v8;
  uint64_t v9;
  int32x2_t **v10;
  int32x2_t *v11;
  id *v12;
  int32x2_t *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  int32x2_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  int32x2_t **v22;
  int32x2_t *v23;
  unint64_t *v24;
  unint64_t v25;
  id *v26;
  char v27;
  const void *v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  EspressoTrainingConvolutionWeightsForMPS *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  EspressoTrainingConvolutionWeightsForMPS *v41;
  int v42;
  uint64_t v43;
  const void *v44;
  id *v45;
  std::__shared_weak_count *v46;
  id *v47;
  char v48;
  uint64_t **v49;
  unint64_t *v50;
  unint64_t v51;
  id v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  void *v64;
  uint64_t **v65;
  id *v66;
  int v67;
  id v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int32x2_t v83;
  int32x2_t v84;
  int32x2_t v85;
  int32x2_t v86;
  int v87;
  int32x2_t v88;
  int32x2_t v89;
  int8x8_t v90;
  int8x8_t v91;
  __int32 v92;
  int v93;
  int v94;
  void *v95;
  int32x2_t v96;
  __int128 v97;
  uint64_t *v98;
  const void *v99;
  id *v100;
  id *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  int32x2_t **v105;
  int32x2_t *v106;
  id *v107;
  id *v108;
  int32x2_t *v109;
  unint64_t *v110;
  unint64_t v111;
  int32x2_t *v112;
  id *v113;
  id *v114;
  int32x2_t *v115;
  unint64_t *v116;
  unint64_t v117;
  id *v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  void *v122;
  id v123;
  id v124;
  id v125;
  id v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  int32x2_t *v138;
  unint64_t *v139;
  unint64_t v140;
  std::runtime_error *v141;
  std::runtime_error *exception;
  int32x2_t ***v143;
  int32x2_t v144;
  id v145;
  int32x2_t v146;
  __int128 v147;
  uint64_t v148;
  void *__p;
  void *v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  id *v162;
  std::__shared_weak_count *v163;
  id *v164;
  std::__shared_weak_count *v165;

  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  v4 = a4;
  v8 = &v165;
  v9 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 328))(a1);
  v164 = 0;
  v165 = 0;
  v162 = 0;
  v163 = 0;
  {
    v10 = *v4;
    v11 = (*v4)[2];
    if (v11)
    {
      if (v12)
      {
        v13 = v10[3];
        if (v13)
        {
          v14 = (unint64_t *)&v13[1];
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        goto LABEL_25;
      }
LABEL_24:
      v13 = 0;
LABEL_25:
      v26 = 0;
      v27 = 0;
      v164 = v12;
      goto LABEL_38;
    }
LABEL_23:
    v12 = 0;
    goto LABEL_24;
  }
  {
    v16 = (char *)*v4;
    v17 = (*v4)[2];
    if (v17)
    {
      if (v12)
      {
        v18 = (std::__shared_weak_count *)*((_QWORD *)v16 + 3);
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldxr(p_shared_owners);
          while (__stxr(v20 + 1, p_shared_owners));
          v16 = (char *)*v4;
        }
LABEL_28:
        v8 = &v163;
        v164 = v12;
        v165 = v18;
        if ((unint64_t)((char *)v4[1] - v16) >= 0x21 && (v28 = (const void *)*((_QWORD *)v16 + 4)) != 0)
        {
          if (v26)
          {
            v13 = (int32x2_t *)*((_QWORD *)v16 + 5);
            if (v13)
            {
              v29 = (unint64_t *)&v13[1];
              do
                v30 = __ldxr(v29);
              while (__stxr(v30 + 1, v29));
            }
            goto LABEL_37;
          }
        }
        else
        {
          v26 = 0;
        }
        v13 = 0;
LABEL_37:
        v27 = 0;
        v162 = v26;
        goto LABEL_38;
      }
    }
    else
    {
      v12 = 0;
    }
    v18 = 0;
    goto LABEL_28;
  }
  v22 = *v4;
  if (v21)
  {
    v23 = v22[4];
    if (v23)
    {
      if (v12)
      {
        v13 = v22[5];
        if (v13)
        {
          v24 = (unint64_t *)&v13[1];
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        goto LABEL_25;
      }
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  v138 = v22[2];
  if (v138)
  {
    if (v12)
    {
      v13 = v22[3];
      if (v13)
      {
        v139 = (unint64_t *)&v13[1];
        do
          v140 = __ldxr(v139);
        while (__stxr(v140 + 1, v139));
      }
      goto LABEL_160;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = 0;
LABEL_160:
  v26 = 0;
  v164 = v12;
  v27 = 1;
LABEL_38:
  *v8 = (std::__shared_weak_count *)v13;
  if (!v12)
  {
    v31 = 0;
    if (!v26)
      goto LABEL_41;
    goto LABEL_40;
  }
  v31 = v12[21];
  if (v26)
LABEL_40:
    v26 = (id *)v26[21];
LABEL_41:
  if (!*(_QWORD *)&a1[62] || a1[60].i8[0])
  {
    v145 = v31;
    v32 = [EspressoTrainingConvolutionWeightsForMPS alloc];
    v33 = *(_OWORD *)v9;
    v34 = *(_OWORD *)(v9 + 32);
    v152 = *(_OWORD *)(v9 + 16);
    v153 = v34;
    v151 = v33;
    v35 = *(_OWORD *)(v9 + 48);
    v36 = *(_OWORD *)(v9 + 64);
    v37 = *(_OWORD *)(v9 + 96);
    v156 = *(_OWORD *)(v9 + 80);
    v157 = v37;
    v154 = v35;
    v155 = v36;
    v38 = *(_OWORD *)(v9 + 112);
    v39 = *(_OWORD *)(v9 + 128);
    v40 = *(_OWORD *)(v9 + 144);
    v161 = *(_QWORD *)(v9 + 160);
    v159 = v39;
    v160 = v40;
    v158 = v38;
    v41 = -[EspressoTrainingConvolutionWeightsForMPS initWithParams:forMode:](v32, "initWithParams:forMode:", &v151, *(unsigned __int8 *)(*(_QWORD *)&a1[1] + 114));
    -[EspressoTrainingConvolutionWeightsForMPS setWeightsBuffer:](v41, "setWeightsBuffer:", v31);
    -[EspressoTrainingConvolutionWeightsForMPS setBiasesBuffer:](v41, "setBiasesBuffer:", v26);
    v143 = v4;
    if (v12)
    {
      if ((*((unsigned int (**)(id *))*v12 + 4))(v12) == 1)
        v42 = 268435472;
      else
        v42 = 268435488;
    }
    else
    {
      v42 = 268435488;
    }
    v43 = a2;
    v41->super.data_type = v42;
    objc_storeStrong((id *)&a1[61], v41);
    v44 = (const void *)a1[1];
    if (!v44
    {
      v147 = 0uLL;
      v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v141, "Espresso: wrong_context_type");
      v141->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v46 = (std::__shared_weak_count *)a1[2];
    *(_QWORD *)&v147 = v45;
    *((_QWORD *)&v147 + 1) = v46;
    if (v46)
    {
      v47 = v26;
      v48 = v27;
      v49 = a3;
      v50 = (unint64_t *)&v46->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
      v52 = v45[18];
      do
        v53 = __ldaxr(v50);
      while (__stlxr(v53 - 1, v50));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      v27 = v48;
      v26 = v47;
    }
    else
    {
      v49 = a3;
      v52 = v45[18];
    }
    a2 = v43;
    v54 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6CB8]), "initWithDevice:weights:", v52, *(_QWORD *)&a1[61]);
    v55 = (void *)a1[62];
    a1[62] = (int32x2_t)v54;

    objc_msgSend(*(id *)&a1[62], "setGradientOption:", 1);
    a1[60].i8[0] = 0;

    v4 = v143;
    a3 = v49;
    v31 = v145;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
  if (!v26)
  {
    v56 = (void *)a1[59];
    if (!v56)
    {
      Espresso::abstract_blob_container::shape((char *)&v147, **a3);
      v57 = SHIDWORD(v148) > 3 || HIDWORD(v148) == -1;
      v58 = 8;
      if (v57)
        v58 = 16;
      v59 = *(int *)(**a3 + v58);
      if (__p)
      {
        v150 = __p;
        operator delete(__p);
      }
      objc_msgSend(v31, "device");
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      v61 = objc_msgSend(v60, "newBufferWithLength:options:", 4 * v59, 0);
      v62 = (void *)a1[59];
      a1[59] = (int32x2_t)v61;

      v56 = (void *)a1[59];
    }
    v26 = v56;
  }
  v63 = objc_alloc(MEMORY[0x1E0CC6CD8]);
  v64 = v63;
  if ((v27 & 1) != 0)
  {
    v65 = a3;
    v66 = v164;
    v67 = *((unsigned __int8 *)v164[9] + 114);
    v68 = v63;
    if ((*((unsigned int (**)(id *))*v66 + 4))(v66) == 1)
      v69 = 268435472;
    else
      v69 = 268435488;
    v70 = (void *)objc_msgSend(v68, "initWithWeights:biases:weightsDataType:weightsLayout:", v31, v26, v69, v67 == 0);
    a3 = v65;
  }
  else
  {
    v70 = (void *)objc_msgSend(v63, "initWithWeights:biases:", v31, v26);
  }

  v72 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)&v147 = v71;
  *((_QWORD *)&v147 + 1) = v72;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldxr(v73);
    while (__stxr(v74 + 1, v73));
  }
  objc_msgSend(*(id *)&a1[62], "reloadWeightsAndBiasesWithCommandBuffer:state:", v71[18], v70);
  if (v72)
  {
    v75 = (unint64_t *)&v72->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }

  v77 = v163;
  if (v163)
  {
    v78 = (unint64_t *)&v163->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v165;
  if (v165)
  {
    v81 = (unint64_t *)&v165->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83.i32[0] = a1[50].i16[0];
  v83.i32[1] = a1[50].i16[1];
  v84 = (int32x2_t)0x100000001;
  v85 = vmul_s32(vadd_s32(a1[44], (int32x2_t)-1), vmax_s32(v83, (int32x2_t)0x100000001));
  v86 = vadd_s32(v85, (int32x2_t)0x100000001);
  v87 = a1[47].i16[0];
  v146 = v85;
  switch(v87)
  {
    case 4:
      goto LABEL_101;
    case 2:
      v91 = 0;
      break;
    case 1:
LABEL_101:
      v88.i32[0] = a1[49].i16[2];
      v88.i32[1] = a1[49].i16[3];
      v89 = vmax_s32(vsub_s32(vmla_s32(v86, vadd_s32((**v4)[1], (int32x2_t)-1), v88), (*v4)[4][1]), 0);
      v90 = (int8x8_t)vshr_n_u32((uint32x2_t)v89, 1uLL);
      v91 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a1[47].u16[0] == 1), 0x1FuLL)), v90, (int8x8_t)vsub_s32(v89, (int32x2_t)v90));
      break;
    default:
      v84.i16[0] = a1[48].i16[0];
      v84.i16[2] = a1[48].i16[2];
      v91 = (int8x8_t)vshr_n_s32(vshl_n_s32(v84, 0x10uLL), 0x10uLL);
      break;
  }
  v144 = (int32x2_t)v91;
  v92 = v91.i32[0] - v86.i32[0] / 2;
  if (v86.i32[1] >= 0)
    v93 = v86.i32[1];
  else
    v93 = v86.i32[1] + 1;
  v94 = v91.i32[1] - (v93 >> 1);
  v151 = 0uLL;
  *(_QWORD *)&v152 = 0;
  objc_msgSend(*(id *)&a1[62], "setPrimaryOffset:", &v151);
  objc_msgSend(*(id *)&a1[62], "setKernelOffsetX:", (v146.i8[0] & 1) + (uint64_t)v92);
  objc_msgSend(*(id *)&a1[62], "setKernelOffsetY:", (v146.i8[4] & 1) + (uint64_t)v94);
  v95 = (void *)a1[62];
  v96 = vneg_s32(v144);
  *(_QWORD *)&v97 = v96.i32[0];
  *((_QWORD *)&v97 + 1) = v96.i32[1];
  v147 = v97;
  v148 = 0;
  objc_msgSend(v95, "setSecondaryOffset:", &v147);
  objc_msgSend(*(id *)&a1[62], "setSecondaryStrideInPixelsX:", a1[49].i16[2]);
  objc_msgSend(*(id *)&a1[62], "setSecondaryStrideInPixelsY:", a1[49].i16[3]);
  v98 = *a3;
  v99 = (const void *)**a3;
  if (v99
  {
    v101 = v100;
    v102 = v98[1];
    *(_QWORD *)&v151 = v100;
    *((_QWORD *)&v151 + 1) = v102;
    if (v102)
    {
      v103 = (unint64_t *)(v102 + 8);
      do
        v104 = __ldxr(v103);
      while (__stxr(v104 + 1, v103));
    }
  }
  else
  {
    v101 = 0;
    v151 = 0uLL;
  }
  v105 = *v4;
  v106 = **v4;
  if (v106
  {
    v108 = v107;
    v109 = v105[1];
    *(_QWORD *)&v147 = v107;
    *((_QWORD *)&v147 + 1) = v109;
    if (v109)
    {
      v110 = (unint64_t *)&v109[1];
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
      v105 = *v4;
    }
  }
  else
  {
    v108 = 0;
    v147 = 0uLL;
  }
  v112 = v105[4];
  if (v112
  {
    v114 = v113;
    v115 = v105[5];
    v164 = v113;
    v165 = (std::__shared_weak_count *)v115;
    if (v115)
    {
      v116 = (unint64_t *)&v115[1];
      do
        v117 = __ldxr(v116);
      while (__stxr(v117 + 1, v116));
    }
  }
  else
  {
    v114 = 0;
    v164 = 0;
    v165 = 0;
  }
  v119 = *(std::__shared_weak_count **)(a2 + 8);
  v162 = v118;
  v163 = v119;
  if (v119)
  {
    v120 = (unint64_t *)&v119->__shared_owners_;
    do
      v121 = __ldxr(v120);
    while (__stxr(v121 + 1, v120));
  }
  v122 = (void *)a1[62];
  v123 = v118[18];
  v124 = v108[30];
  v125 = v114[30];
  v126 = v101[30];
  objc_msgSend(v122, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v123, v124, v125, v126);

  if (v119)
  {
    v127 = (unint64_t *)&v119->__shared_owners_;
    do
      v128 = __ldaxr(v127);
    while (__stlxr(v128 - 1, v127));
    if (!v128)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  v129 = v165;
  if (v165)
  {
    v130 = (unint64_t *)&v165->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  v132 = (std::__shared_weak_count *)*((_QWORD *)&v147 + 1);
  if (*((_QWORD *)&v147 + 1))
  {
    v133 = (unint64_t *)(*((_QWORD *)&v147 + 1) + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v135 = (std::__shared_weak_count *)*((_QWORD *)&v151 + 1);
  if (*((_QWORD *)&v151 + 1))
  {
    v136 = (unint64_t *)(*((_QWORD *)&v151 + 1) + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
}

void sub_1918BD478(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 104);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_grad_kernel::blob_options(Espresso::MPSEngine::convolution_grad_kernel *this@<X0>, char a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;

  *a4 = 0;
  a4[1] = 0;
  if (a3 == 1 && (a2 & 1) == 0)
  {
    v5 = (const void *)*((_QWORD *)this + 1);
    if (v5)
    {
      if (v7)
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v19 = v7;
        v20 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v18 = v11 + 3;
        *((_QWORD *)&v18 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a4, &v18);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
        if (*((_QWORD *)&v18 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a4 + 72), v19[28], v19[29]);
        v15 = v20;
        if (v20)
        {
          v16 = (unint64_t *)&v20->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
  }
}

void sub_1918BD6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_weights_grad_kernel::~convolution_weights_grad_kernel(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::convolution_weights_grad_kernel::__launch(int32x2_t *a1, uint64_t a2, uint64_t **a3, int32x2_t ***a4)
{
  int32x2_t *v6;
  uint64_t v7;
  int32x2_t **v8;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  int32x2_t **v13;
  int32x2_t *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int32x2_t **v18;
  int32x2_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int32x2_t **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  id v28;
  id v29;
  EspressoTrainingConvolutionWeightsForMPS *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  EspressoTrainingConvolutionWeightsForMPS *v39;
  int v40;
  int v41;
  int32x2_t *v42;
  const void *v43;
  uint64_t **v44;
  id *v45;
  std::__shared_weak_count *v46;
  int32x2_t *v47;
  id v48;
  char v49;
  id v50;
  unint64_t *v51;
  unint64_t v52;
  id v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  id v66;
  void *v67;
  id v68;
  uint64_t **v69;
  id *v70;
  _BOOL8 v71;
  id v72;
  uint64_t v73;
  void *v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  int32x2_t v88;
  int32x2_t v89;
  int32x2_t v90;
  int v91;
  int32x2_t v92;
  int32x2_t v93;
  int8x8_t v94;
  int8x8_t v95;
  int v96;
  int v97;
  void *v98;
  int32x2_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  const void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  int32x2_t **v109;
  int32x2_t *v110;
  id *v111;
  id *v112;
  int32x2_t *v113;
  unint64_t *v114;
  unint64_t v115;
  int32x2_t *v116;
  id *v117;
  int32x2_t *v118;
  unint64_t *v119;
  unint64_t v120;
  _QWORD *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  int32x2_t v126;
  void *v127;
  MyMPSCNNConvolutionGradientState *v128;
  void *v129;
  uint64_t *v130;
  const void *v131;
  _QWORD *v132;
  _QWORD *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  void *v137;
  uint64_t *v138;
  const void *v139;
  _QWORD *v140;
  _QWORD *v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  uint64_t *v145;
  const void *v146;
  id *v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  id v151;
  unint64_t v152;
  uint64_t v153;
  void *v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t v157;
  void *v158;
  uint64_t *v159;
  _QWORD *v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  MPSImageBatch *v166;
  const void *v167;
  id *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  uint64_t v173;
  void *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t v177;
  void *v178;
  void *v179;
  id *v180;
  uint64_t *v181;
  const void *v182;
  id *v183;
  id *v184;
  unint64_t *v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  id v189;
  id v190;
  id v191;
  unint64_t *v192;
  void *v193;
  uint64_t v194;
  id v195;
  id v196;
  void *v197;
  MPSImageBatch *v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  int32x2_t **v211;
  std::__shared_weak_count *v212;
  unint64_t *v213;
  unint64_t v214;
  id **v215;
  std::runtime_error *v216;
  std::runtime_error *exception;
  std::runtime_error *v218;
  std::runtime_error *v219;
  std::runtime_error *v220;
  __int128 v221;
  char v222;
  char v223;
  uint64_t v225;
  int32x2_t v226;
  __int128 v227;
  uint64_t v228;
  void *__p;
  void *v230;
  _QWORD *v231;
  std::__shared_weak_count *v232;
  id *v233;
  std::__shared_weak_count *v234;
  id *v235;
  std::__shared_weak_count *v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;

  v248 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  v6 = a1;
  v7 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 328))(a1);
  v235 = 0;
  v236 = 0;
  v233 = 0;
  v234 = 0;
  {
    v8 = *a4;
    v9 = (id *)(*a4)[2];
    if (v9)
    {
      if (v9)
      {
        v10 = (std::__shared_weak_count *)v8[3];
        if (v10)
        {
          p_shared_owners = (unint64_t *)&v10->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
          v235 = v9;
          v236 = v10;
LABEL_38:
          v27 = 0;
          goto LABEL_39;
        }
      }
    }
    goto LABEL_31;
  }
  {
    v13 = *a4;
    v14 = (*a4)[2];
    if (v14
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v235 = (id *)v14;
      v236 = v15;
    }
    else
    {
      v235 = (id *)v14;
      v236 = 0;
    }
    v18 = *a4;
    if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x21)
    {
      v19 = 0;
    }
    else
    {
      v19 = v18[4];
      if (v19)
      {
        if (v19)
        {
          v20 = (std::__shared_weak_count *)v18[5];
          if (v20)
          {
            v21 = (unint64_t *)&v20->__shared_owners_;
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          goto LABEL_35;
        }
      }
    }
    v20 = 0;
LABEL_35:
    v233 = (id *)v19;
    v234 = v20;
    v27 = 0;
    goto LABEL_36;
  }
  {
    {
      v211 = *a4;
      v9 = (id *)(*a4)[2];
      if (v9)
      {
        if (v9)
        {
          v212 = (std::__shared_weak_count *)v211[3];
          if (v212)
          {
            v213 = (unint64_t *)&v212->__shared_owners_;
            do
              v214 = __ldxr(v213);
            while (__stxr(v214 + 1, v213));
            v235 = v9;
            v236 = v212;
            v27 = 1;
            goto LABEL_39;
          }
        }
      }
      v235 = v9;
      v236 = 0;
      v27 = 1;
      if (v9)
        goto LABEL_39;
LABEL_37:
      v28 = 0;
      goto LABEL_40;
    }
    {
      std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v237, (*a4)[2], (uint64_t)(*a4)[3]);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v235, &v237);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v237);
      if ((unint64_t)((char *)a4[1] - (char *)*a4) < 0x21)
        v237 = 0uLL;
      else
        std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v237, (*a4)[4], (uint64_t)(*a4)[5]);
      v215 = &v233;
    }
    else
    {
      std::dynamic_pointer_cast[abi:ne180100]<Espresso::MPSBuffersEngine::blob_container,Espresso::abstract_blob_container>(&v237, (*a4)[4], (uint64_t)(*a4)[5]);
      v215 = &v235;
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v215, &v237);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v237);
    v27 = 1;
LABEL_36:
    v9 = v235;
    if (v235)
      goto LABEL_39;
    goto LABEL_37;
  }
  v23 = *a4;
  v9 = (id *)(*a4)[4];
  if (v9)
  {
    if (v9)
    {
      v24 = (std::__shared_weak_count *)v23[5];
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
        v235 = v9;
        v236 = v24;
        goto LABEL_38;
      }
    }
  }
LABEL_31:
  v27 = 0;
  v235 = v9;
  v236 = 0;
  if (!v9)
    goto LABEL_37;
LABEL_39:
  v28 = v9[21];
LABEL_40:
  if (v233)
    v29 = v233[21];
  else
    v29 = 0;
  if (!*(_QWORD *)&v6[62] || v6[60].i8[0])
  {
    v30 = [EspressoTrainingConvolutionWeightsForMPS alloc];
    v31 = *(_OWORD *)v7;
    v32 = *(_OWORD *)(v7 + 32);
    v238 = *(_OWORD *)(v7 + 16);
    v239 = v32;
    v237 = v31;
    v33 = *(_OWORD *)(v7 + 48);
    v34 = *(_OWORD *)(v7 + 64);
    v35 = *(_OWORD *)(v7 + 96);
    v242 = *(_OWORD *)(v7 + 80);
    v243 = v35;
    v240 = v33;
    v241 = v34;
    v36 = *(_OWORD *)(v7 + 112);
    v37 = *(_OWORD *)(v7 + 128);
    v38 = *(_OWORD *)(v7 + 144);
    v247 = *(_QWORD *)(v7 + 160);
    v245 = v37;
    v246 = v38;
    v244 = v36;
    v39 = -[EspressoTrainingConvolutionWeightsForMPS initWithParams:forMode:](v30, "initWithParams:forMode:", &v237, *(unsigned __int8 *)(*(_QWORD *)&v6[1] + 114));
    -[EspressoTrainingConvolutionWeightsForMPS setWeightsBuffer:](v39, "setWeightsBuffer:", v28);
    -[EspressoTrainingConvolutionWeightsForMPS setBiasesBuffer:](v39, "setBiasesBuffer:", v29);
    if (v235)
    {
      v40 = (*((uint64_t (**)(id *))*v235 + 4))(v235);
      v41 = 268435472;
      if (v40 != 1)
        v41 = 268435488;
    }
    else
    {
      v41 = 268435488;
    }
    v39->super.data_type = v41;
    v42 = v6 + 61;
    objc_storeStrong((id *)&v6[61], v39);
    v225 = a2;
    v43 = (const void *)v6[1];
    if (!v43
      || (v44 = a3,
    {
      v227 = 0uLL;
      v216 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v216, "Espresso: wrong_context_type");
      v216->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v46 = (std::__shared_weak_count *)v6[2];
    *(_QWORD *)&v227 = v45;
    *((_QWORD *)&v227 + 1) = v46;
    if (v46)
    {
      v47 = v6;
      v48 = v29;
      v49 = v27;
      v50 = v28;
      v51 = (unint64_t *)&v46->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
      v53 = v45[18];
      do
        v54 = __ldaxr(v51);
      while (__stlxr(v54 - 1, v51));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
      v28 = v50;
      v27 = v49;
      v29 = v48;
      v6 = v47;
    }
    else
    {
      v53 = v45[18];
    }
    a3 = v44;
    a2 = v225;
    v55 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6CB8]), "initWithDevice:weights:", v53, *v42);
    v56 = (void *)v6[62];
    v6[62] = (int32x2_t)v55;

    if (v6[63].i8[0])
      v57 = 3;
    else
      v57 = 2;
    objc_msgSend(*(id *)&v6[62], "setGradientOption:", v57);

    v6[60].i8[0] = 0;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
  if (!v29)
  {
    v58 = (void *)v6[59];
    if (!v58)
    {
      v59 = v27;
      Espresso::abstract_blob_container::shape((char *)&v227, **a3);
      v60 = SHIDWORD(v228) > 3 || HIDWORD(v228) == -1;
      v61 = 8;
      if (v60)
        v61 = 16;
      v62 = *(int *)(**a3 + v61);
      if (__p)
      {
        v230 = __p;
        operator delete(__p);
      }
      objc_msgSend(v28, "device");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = objc_msgSend(v63, "newBufferWithLength:options:", 4 * v62, 0);
      v65 = (void *)v6[59];
      v6[59] = (int32x2_t)v64;

      v27 = v59;
      v58 = (void *)v6[59];
    }
    v29 = v58;
  }
  v66 = objc_alloc(MEMORY[0x1E0CC6CD8]);
  v67 = v66;
  if ((v27 & 1) != 0)
  {
    v68 = v28;
    v69 = a3;
    v70 = v235;
    v71 = *((_BYTE *)v235[9] + 114) == 0;
    v72 = v66;
    if ((*((unsigned int (**)(id *))*v70 + 4))(v70) == 1)
      v73 = 268435472;
    else
      v73 = 268435488;
    v74 = (void *)objc_msgSend(v72, "initWithWeights:biases:weightsDataType:weightsLayout:", v68, v29, v73, v71);
    a3 = v69;
    v28 = v68;
  }
  else
  {
    v74 = (void *)objc_msgSend(v66, "initWithWeights:biases:", v28, v29);
  }

  v76 = *(std::__shared_weak_count **)(a2 + 8);
  *(_QWORD *)&v227 = v75;
  *((_QWORD *)&v227 + 1) = v76;
  if (v76)
  {
    v77 = (unint64_t *)&v76->__shared_owners_;
    do
      v78 = __ldxr(v77);
    while (__stxr(v78 + 1, v77));
  }
  objc_msgSend(*(id *)&v6[62], "reloadWeightsAndBiasesWithCommandBuffer:state:", v75[18], v74);
  if (v76)
  {
    v79 = (unint64_t *)&v76->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }

  v82 = v234;
  if (v234)
  {
    v83 = (unint64_t *)&v234->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v236;
  if (v236)
  {
    v86 = (unint64_t *)&v236->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88.i32[0] = v6[50].i16[0];
  v88.i32[1] = v6[50].i16[1];
  v89 = (int32x2_t)0x100000001;
  *(int32x2_t *)&v81 = vmul_s32(vadd_s32(v6[44], (int32x2_t)-1), vmax_s32(v88, (int32x2_t)0x100000001));
  v90 = vadd_s32(*(int32x2_t *)&v81, (int32x2_t)0x100000001);
  v91 = v6[47].i16[0];
  v221 = v81;
  switch(v91)
  {
    case 4:
      goto LABEL_103;
    case 2:
      v95 = 0;
      break;
    case 1:
LABEL_103:
      v92.i32[0] = v6[49].i16[2];
      v92.i32[1] = v6[49].i16[3];
      v93 = vmax_s32(vsub_s32(vmla_s32(v90, vadd_s32((**a4)[1], (int32x2_t)-1), v92), (*a4)[2][1]), 0);
      v94 = (int8x8_t)vshr_n_u32((uint32x2_t)v93, 1uLL);
      v95 = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v6[47].u16[0] == 1), 0x1FuLL)), v94, (int8x8_t)vsub_s32(v93, (int32x2_t)v94));
      break;
    default:
      v89.i16[0] = v6[48].i16[0];
      v89.i16[2] = v6[48].i16[2];
      v95 = (int8x8_t)vshr_n_s32(vshl_n_s32(v89, 0x10uLL), 0x10uLL);
      break;
  }
  v226 = (int32x2_t)v95;
  if (v90.i32[0] >= 0)
    v96 = v90.i32[0];
  else
    v96 = v90.i32[0] + 1;
  if (v90.i32[1] >= 0)
    v97 = v90.i32[1];
  else
    v97 = v90.i32[1] + 1;
  v237 = 0uLL;
  *(_QWORD *)&v238 = 0;
  objc_msgSend(*(id *)&v6[62], "setPrimaryOffset:", &v237, v221);
  objc_msgSend(*(id *)&v6[62], "setKernelOffsetX:", (v222 & 1) + (uint64_t)(v226.i32[0] - (v96 >> 1)));
  objc_msgSend(*(id *)&v6[62], "setKernelOffsetY:", (v223 & 1) + (uint64_t)(v226.i32[1] - (v97 >> 1)));
  v98 = (void *)v6[62];
  v99 = vneg_s32(v226);
  *(_QWORD *)&v100 = v99.i32[0];
  *((_QWORD *)&v100 + 1) = v99.i32[1];
  v227 = v100;
  v228 = 0;
  objc_msgSend(v98, "setSecondaryOffset:", &v227);
  objc_msgSend(*(id *)&v6[62], "setSecondaryStrideInPixelsX:", v6[49].i16[2]);
  objc_msgSend(*(id *)&v6[62], "setSecondaryStrideInPixelsY:", v6[49].i16[3]);
  v101 = v6[43].i32[0];
  v102 = *a3;
  v103 = (const void *)**a3;
  if (v103
  {
    v105 = v104;
    v106 = v102[1];
    *(_QWORD *)&v227 = v104;
    *((_QWORD *)&v227 + 1) = v106;
    if (v106)
    {
      v107 = (unint64_t *)(v106 + 8);
      do
        v108 = __ldxr(v107);
      while (__stxr(v108 + 1, v107));
    }
  }
  else
  {
    v105 = 0;
    v227 = 0uLL;
  }
  v109 = *a4;
  v110 = **a4;
  if (v110
  {
    v112 = v111;
    v113 = v109[1];
    v235 = v111;
    v236 = (std::__shared_weak_count *)v113;
    if (v113)
    {
      v114 = (unint64_t *)&v113[1];
      do
        v115 = __ldxr(v114);
      while (__stxr(v115 + 1, v114));
      v109 = *a4;
    }
  }
  else
  {
    v112 = 0;
    v235 = 0;
    v236 = 0;
  }
  v116 = v109[2];
  if (v116
  {
    v118 = v109[3];
    v233 = v117;
    v234 = (std::__shared_weak_count *)v118;
    if (v118)
    {
      v119 = (unint64_t *)&v118[1];
      do
        v120 = __ldxr(v119);
      while (__stxr(v120 + 1, v119));
    }
  }
  else
  {
    v233 = 0;
    v234 = 0;
  }
  if (!v105)
  {
    v218 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(v218);
  }
  if (*(_QWORD *)a2
  {
    v122 = *(std::__shared_weak_count **)(a2 + 8);
    v231 = v121;
    v232 = v122;
    if (v122)
    {
      v123 = (unint64_t *)&v122->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
    }
  }
  else
  {
    v231 = 0;
    v232 = 0;
  }
  v125 = objc_msgSend(v112[32], "count");
  v126 = v6[64];
  if (v125 >= 2)
  {
    if (!*(_QWORD *)&v126 || (v127 = *(void **)(*(_QWORD *)&v126 + 624)) == 0)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("case not implemented with no associated forward kernel");
    v128 = v127;
    -[MyMPSCNNConvolutionGradientState objectAtIndexedSubscript:](v128, "objectAtIndexedSubscript:", 0);
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    if (v6[63].i8[1])
    {
      v130 = *a3;
      v131 = (const void *)(*a3)[4];
      if (v131
      {
        v133 = v132;
        v134 = (std::__shared_weak_count *)v130[5];
        *(_QWORD *)&v237 = v132;
        *((_QWORD *)&v237 + 1) = v134;
        if (v134)
        {
          v135 = (unint64_t *)&v134->__shared_owners_;
          do
            v136 = __ldxr(v135);
          while (__stxr(v136 + 1, v135));
        }
      }
      else
      {
        v134 = 0;
        v133 = 0;
        v237 = 0uLL;
      }
      objc_msgSend(v129, "gradientForBiases");
      v153 = objc_claimAutoreleasedReturnValue();
      v154 = (void *)v133[21];
      v133[21] = v153;

      if (v134)
      {
        v155 = (unint64_t *)&v134->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
          std::__shared_weak_count::__release_weak(v134);
        }
      }
    }
    objc_msgSend(v129, "gradientForWeights");
    v157 = objc_claimAutoreleasedReturnValue();
    v158 = *(void **)(v227 + 168);
    *(_QWORD *)(v227 + 168) = v157;

    if (!v6[63].i8[0])
    {
      objc_msgSend(*(id *)&v6[62], "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:", v231[18], v235[32], v233[32], v128);
      v166 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
      MPSImageBatchIncrementReadCount(v166, -1);

      goto LABEL_218;
    }
    v159 = *a3;
    v161 = (std::__shared_weak_count *)v159[3];
    *(_QWORD *)&v237 = v160;
    *((_QWORD *)&v237 + 1) = v161;
    if (v161)
    {
      v162 = (unint64_t *)&v161->__shared_owners_;
      do
        v163 = __ldxr(v162);
      while (__stxr(v163 + 1, v162));
    }
    objc_msgSend(*(id *)&v6[62], "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:destinationGradients:", v231[18], v235[32], v233[32], v128, v160[32]);
    if (v161)
    {
      v164 = (unint64_t *)&v161->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      goto LABEL_215;
    }
    goto LABEL_218;
  }
  if (!*(_QWORD *)&v126 || (v137 = *(void **)(*(_QWORD *)&v126 + 616)) == 0)
  {
    (*(void (**)(int32x2_t *))(*(_QWORD *)v6 + 328))(v6);
    if (v6[63].i8[1])
    {
      v145 = *a3;
      v146 = (const void *)(*a3)[4];
      if (!v146
      {
        v237 = 0uLL;
        v219 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_state_error::invalid_state_error(v219);
      }
      v148 = (std::__shared_weak_count *)v145[5];
      *(_QWORD *)&v237 = v147;
      *((_QWORD *)&v237 + 1) = v148;
      if (!v148)
      {
        v151 = v147[21];
        goto LABEL_203;
      }
      v149 = (unint64_t *)&v148->__shared_owners_;
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
      v151 = v147[21];
      do
        v152 = __ldaxr(v149);
      while (__stlxr(v152 - 1, v149));
      if (v152)
        goto LABEL_203;
    }
    else
    {
      v167 = (const void *)v6[1];
      if (!v167
      {
        v237 = 0uLL;
        v220 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v220, "Espresso: wrong_context_type");
        v220->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v148 = (std::__shared_weak_count *)v6[2];
      *(_QWORD *)&v237 = v168;
      *((_QWORD *)&v237 + 1) = v148;
      if (v148)
      {
        v169 = (unint64_t *)&v148->__shared_owners_;
        do
          v170 = __ldxr(v169);
        while (__stxr(v170 + 1, v169));
      }
      v151 = (id)objc_msgSend(v168[18], "newBufferWithLength:options:", 4 * v101, 0);
      if (!v148)
        goto LABEL_203;
      v171 = (unint64_t *)&v148->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (v172)
        goto LABEL_203;
    }
    ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
    std::__shared_weak_count::__release_weak(v148);
LABEL_203:
    *(_QWORD *)&v237 = *(_QWORD *)(v227 + 168);
    *((_QWORD *)&v237 + 1) = v151;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v237, 2);
    v179 = (void *)objc_claimAutoreleasedReturnValue();
    v128 = -[MPSState initWithResources:]([MyMPSCNNConvolutionGradientState alloc], "initWithResources:", v179);
    v180 = v233;
    v128->_sourceWidth = *((int *)v233 + 2);
    v128->_sourceHeight = *((int *)v180 + 3);

    goto LABEL_204;
  }
  v128 = v137;
  if (v6[63].i8[1])
  {
    v138 = *a3;
    v139 = (const void *)(*a3)[4];
    if (v139
    {
      v141 = v140;
      v142 = (std::__shared_weak_count *)v138[5];
      *(_QWORD *)&v237 = v140;
      *((_QWORD *)&v237 + 1) = v142;
      if (v142)
      {
        v143 = (unint64_t *)&v142->__shared_owners_;
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
    }
    else
    {
      v142 = 0;
      v141 = 0;
      v237 = 0uLL;
    }
    -[MPSCNNConvolutionGradientState gradientForBiases](v128, "gradientForBiases");
    v173 = objc_claimAutoreleasedReturnValue();
    v174 = (void *)v141[21];
    v141[21] = v173;

    if (v142)
    {
      v175 = (unint64_t *)&v142->__shared_owners_;
      do
        v176 = __ldaxr(v175);
      while (__stlxr(v176 - 1, v175));
      if (!v176)
      {
        ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
        std::__shared_weak_count::__release_weak(v142);
      }
    }
  }
  -[MPSCNNConvolutionGradientState gradientForWeights](v128, "gradientForWeights");
  v177 = objc_claimAutoreleasedReturnValue();
  v178 = *(void **)(v227 + 168);
  *(_QWORD *)(v227 + 168) = v177;

LABEL_204:
  if (!v6[63].i8[0])
  {
    v193 = (void *)v6[62];
    v194 = v231[18];
    v195 = v235[30];
    v196 = v233[30];
    objc_msgSend(v193, "encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:", v194, v195, v196, v128);
    v197 = (void *)objc_claimAutoreleasedReturnValue();

    *(_QWORD *)&v237 = v197;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v237, 1);
    v198 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
    MPSImageBatchIncrementReadCount(v198, -1);

    goto LABEL_218;
  }
  v181 = *a3;
  v182 = (const void *)(*a3)[2];
  if (v182
  {
    v184 = v183;
    v161 = (std::__shared_weak_count *)v181[3];
    *(_QWORD *)&v237 = v183;
    *((_QWORD *)&v237 + 1) = v161;
    if (v161)
    {
      v185 = (unint64_t *)&v161->__shared_owners_;
      do
        v186 = __ldxr(v185);
      while (__stxr(v186 + 1, v185));
    }
  }
  else
  {
    v161 = 0;
    v184 = 0;
    v237 = 0uLL;
  }
  v187 = (void *)v6[62];
  v188 = v231[18];
  v189 = v235[30];
  v190 = v233[30];
  v191 = v184[30];
  objc_msgSend(v187, "encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:destinationGradient:", v188, v189, v190, v128, v191);

  if (v161)
  {
    v192 = (unint64_t *)&v161->__shared_owners_;
    do
      v165 = __ldaxr(v192);
    while (__stlxr(v165 - 1, v192));
LABEL_215:
    if (!v165)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
LABEL_218:

  v199 = v232;
  if (v232)
  {
    v200 = (unint64_t *)&v232->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  v202 = v234;
  if (v234)
  {
    v203 = (unint64_t *)&v234->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = v236;
  if (v236)
  {
    v206 = (unint64_t *)&v236->__shared_owners_;
    do
      v207 = __ldaxr(v206);
    while (__stlxr(v207 - 1, v206));
    if (!v207)
    {
      ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
      std::__shared_weak_count::__release_weak(v205);
    }
  }
  v208 = (std::__shared_weak_count *)*((_QWORD *)&v227 + 1);
  if (*((_QWORD *)&v227 + 1))
  {
    v209 = (unint64_t *)(*((_QWORD *)&v227 + 1) + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    if (!v210)
    {
      ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
      std::__shared_weak_count::__release_weak(v208);
    }
  }
}

void sub_1918BEB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_weights_grad_kernel::blob_options(Espresso::MPSEngine::convolution_weights_grad_kernel *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v6;
  const void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;

  *a4 = 0;
  a4[1] = 0;
  if (a3)
    v6 = 0;
  else
    v6 = a2;
  if (a3 == 2 || v6)
  {
    v7 = (const void *)*((_QWORD *)this + 1);
    if (v7)
    {
      if (v8)
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v20 = v8;
        v21 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = operator new(0x70uLL);
        v12[1] = 0;
        v12[2] = 0;
        *v12 = &off_1E2DBE228;
        *((_OWORD *)v12 + 4) = 0u;
        *((_OWORD *)v12 + 5) = 0u;
        *((_OWORD *)v12 + 2) = 0u;
        *((_OWORD *)v12 + 3) = 0u;
        v12[3] = &off_1E2D9B4D8;
        *((_DWORD *)v12 + 12) = 1065353216;
        v12[7] = 0x1FFFFFFFFLL;
        v12[12] = 0;
        v12[13] = 0;
        v12[8] = 0;
        v12[9] = 0;
        *((_BYTE *)v12 + 88) = 0;
        v12[10] = 0;
        *(_QWORD *)&v19 = v12 + 3;
        *((_QWORD *)&v19 + 1) = v12;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a4, &v19);
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a4 + 72), v20[28], v20[29]);
        v16 = v21;
        if (v21)
        {
          v17 = (unint64_t *)&v21->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_1918BEF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::convolution_weights_grad_kernel::top_shapes_for_bottom_shapes(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[5];

  Espresso::generic_convolution_weights_grad_kernel::top_shapes_for_bottom_shapes(a1, a3);
  if (*(_BYTE *)(a1 + 504))
  {
    v6 = (__int128 *)(*a2 + 64);
    v7 = a3[1];
    if (v7 >= a3[2])
    {
      v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v6);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v6);
      v8 = v7 + 64;
    }
    a3[1] = v8;
  }
  if (*(_BYTE *)(a1 + 505))
  {
    v9 = *(_DWORD *)(a1 + 344);
    v10 = a3[2];
    v11 = a3[1];
    if (v11 >= v10)
    {
      v13 = (uint64_t)(v11 - *a3) >> 6;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v15 = v10 - *a3;
      if (v15 >> 5 > v14)
        v14 = v15 >> 5;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
        v16 = 0x3FFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      v20[4] = a3 + 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
      v18 = &v17[64 * v13];
      v20[0] = v17;
      v20[1] = v18;
      v20[3] = &v17[64 * v19];
      *(_QWORD *)v18 = 0x100000001;
      *((_DWORD *)v18 + 2) = v9;
      *(_QWORD *)(v18 + 12) = 0x100000001;
      *((_DWORD *)v18 + 5) = -1;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 40) = 0u;
      *((_QWORD *)v18 + 7) = 0;
      v20[2] = v18 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, v20);
      v12 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v20);
    }
    else
    {
      *(_QWORD *)v11 = 0x100000001;
      *(_DWORD *)(v11 + 8) = v9;
      *(_QWORD *)(v11 + 12) = 0x100000001;
      *(_DWORD *)(v11 + 20) = -1;
      v12 = v11 + 64;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_QWORD *)(v11 + 56) = 0;
      a3[1] = v11 + 64;
    }
    a3[1] = v12;
  }
}

void sub_1918BF09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::pool_grad_kernel::~pool_grad_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::pool_grad_kernel::__launch(int32x2_t *a1, uint64_t a2, uint64_t *a3, int32x2_t ***a4, double a5, __n128 a6)
{
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  id v14;
  unint64_t v15;
  __int32 v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  void *v29;
  int32x2_t *v30;
  void *v31;
  int32x2_t v32;
  int v33;
  int32x2_t v34;
  int8x8_t v35;
  int32x2_t v36;
  __int128 v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  int32x2_t **v42;
  uint64_t v43;
  id v44;
  id *v45;
  id *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  id *v50;
  id *v51;
  int32x2_t *v52;
  unint64_t *v53;
  unint64_t v54;
  int32x2_t *v55;
  id *v56;
  id *v57;
  int32x2_t *v58;
  unint64_t *v59;
  unint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  id v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::runtime_error *exception;
  int32x2_t v83;
  int32x2_t v84;
  __int128 v85;
  uint64_t v86;
  _QWORD v87[3];
  void *v88;
  std::__shared_weak_count *v89;
  id *v90;
  std::__shared_weak_count *v91;
  id *v92;
  std::__shared_weak_count *v93;
  id *v94;
  std::__shared_weak_count *v95;

  if (a1[49])
    goto LABEL_38;
  v11 = (std::__shared_weak_count *)a1[2];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    v14 = v10[18];
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    v14 = v10[18];
  }
  v16 = a1[35].i32[0];
  switch(v16)
  {
    case 2:
      v17 = objc_alloc(MEMORY[0x1E0CC6DA8]);
      v18 = a1[35].i32[1];
      v19 = a1[36].i32[0];
      v26 = a1[37].i32[0];
      if (v26 <= 1)
        v21 = 1;
      else
        v21 = v26;
      v27 = a1[37].i32[1];
      if (v27 <= 1)
        v23 = 1;
      else
        v23 = v27;
      goto LABEL_31;
    case 1:
      v17 = objc_alloc(MEMORY[0x1E0CC6DB8]);
      v18 = a1[35].i32[1];
      v19 = a1[36].i32[0];
      v24 = a1[37].i32[0];
      if (v24 <= 1)
        v21 = 1;
      else
        v21 = v24;
      v25 = a1[37].i32[1];
      if (v25 <= 1)
        v23 = 1;
      else
        v23 = v25;
      goto LABEL_31;
    case 0:
      v17 = objc_alloc(MEMORY[0x1E0CC6D98]);
      v18 = a1[35].i32[1];
      v19 = a1[36].i32[0];
      v20 = a1[37].i32[0];
      if (v20 <= 1)
        v21 = 1;
      else
        v21 = v20;
      v22 = a1[37].i32[1];
      if (v22 <= 1)
        v23 = 1;
      else
        v23 = v22;
LABEL_31:
      v28 = objc_msgSend(v17, "initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:", v14, v18, v19, v21, v23);
      v29 = (void *)a1[49];
      a1[49] = (int32x2_t)v28;

      break;
  }
  if (!*(_QWORD *)&a1[49])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating mps kernel");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_BYTE *)(*(_QWORD *)&a1[1] + 64))
  {
    v30 = a1 + 22;
    if (a1[24].i8[7] < 0)
      v30 = (int32x2_t *)*v30;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(*(id *)&a1[49], "setLabel:", v31);

  }
LABEL_38:
  v32 = *(int32x2_t *)((char *)a1 + 284);
  v33 = a1[39].i16[2];
  switch(v33)
  {
    case 4:
LABEL_41:
      v34 = vmax_s32(vsub_s32(vmla_s32(v32, vadd_s32((**a4)[1], (int32x2_t)-1), a1[37]), (*a4)[2][1]), 0);
      v35 = (int8x8_t)vshr_n_u32((uint32x2_t)v34, 1uLL);
      a6.n128_u64[0] = (unint64_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(a1[39].u16[2] == 1), 0x1FuLL)), v35, (int8x8_t)vsub_s32(v34, (int32x2_t)v35));
      break;
    case 2:
      a6 = 0uLL;
      break;
    case 1:
      goto LABEL_41;
    default:
      a6.n128_u16[0] = a1[40].u16[2];
      a6.n128_u16[2] = a1[41].u16[0];
      a6.n128_u64[0] = (unint64_t)vshr_n_s32(vshl_n_s32((int32x2_t)a6.n128_u64[0], 0x10uLL), 0x10uLL);
      break;
  }
  v36 = vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)v32, (uint32x2_t)v32, 0x1FuLL), 1uLL);
  objc_msgSend(*(id *)&a1[49], "setSecondaryEdgeMode:", 1, *(_OWORD *)&a6);
  memset(v87, 0, sizeof(v87));
  objc_msgSend(*(id *)&a1[49], "setPrimaryOffset:", v87);
  v84 = vsub_s32(v36, v83);
  objc_msgSend(*(id *)&a1[49], "setKernelOffsetX:", ((a1[35].i32[1] & 1) == 0) + (uint64_t)-v84.i32[0]);
  objc_msgSend(*(id *)&a1[49], "setKernelOffsetY:", ((a1[36].i32[0] & 1) == 0) + (uint64_t)-v84.i32[1]);
  *(_QWORD *)&v37 = v84.i32[0];
  *((_QWORD *)&v37 + 1) = v84.i32[1];
  v38 = (void *)a1[49];
  v85 = v37;
  v86 = 0;
  objc_msgSend(v38, "setSecondaryOffset:", &v85);
  objc_msgSend(*(id *)&a1[49], "setSecondaryStrideInPixelsX:", a1[37].i32[0]);
  objc_msgSend(*(id *)&a1[49], "setSecondaryStrideInPixelsY:", a1[37].i32[1]);
  if (!a1[35].i32[0])
  {
    v39 = *(id *)&a1[49];
    v40 = v39;
    if (!a1[38].i32[1])
    {
      objc_msgSend(v39, "setZeroPadSizeX:", v83.i32[0]);
      objc_msgSend(v40, "setZeroPadSizeY:", v83.i32[1]);
    }

  }
  v41 = (void *)a1[49];
  v42 = *a4;
  v43 = *a3;
  v44 = v41;
  if (*(_QWORD *)v43
  {
    v46 = v45;
    v47 = *(std::__shared_weak_count **)(v43 + 8);
    v94 = v45;
    v95 = v47;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
  }
  else
  {
    v46 = 0;
    v94 = 0;
    v95 = 0;
  }
  if (*v42
  {
    v51 = v50;
    v52 = v42[1];
    v92 = v50;
    v93 = (std::__shared_weak_count *)v52;
    if (v52)
    {
      v53 = (unint64_t *)&v52[1];
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
  }
  else
  {
    v51 = 0;
    v92 = 0;
    v93 = 0;
  }
  v55 = v42[2];
  if (v55
  {
    v57 = v56;
    v58 = v42[3];
    v90 = v56;
    v91 = (std::__shared_weak_count *)v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58[1];
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
  }
  else
  {
    v57 = 0;
    v90 = 0;
    v91 = 0;
  }
  if (*(_QWORD *)a2
  {
    v62 = v61;
    v63 = *(std::__shared_weak_count **)(a2 + 8);
    v88 = v61;
    v89 = v63;
    if (v63)
    {
      v64 = (unint64_t *)&v63->__shared_owners_;
      do
        v65 = __ldxr(v64);
      while (__stxr(v65 + 1, v64));
    }
  }
  else
  {
    v63 = 0;
    v62 = 0;
    v88 = 0;
    v89 = 0;
  }
  v66 = objc_msgSend(v51[32], "count");
  v67 = v62[18];
  if (v66 < 2)
  {
    v68 = v51[30];
    v69 = v57[30];
    v70 = v46[30];
    objc_msgSend(v44, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v67, v68, v69, v70);

    if (!v63)
      goto LABEL_84;
  }
  else
  {
    objc_msgSend(v44, "encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationImages:", v67, v51[32], v57[32], v46[32]);
    if (!v63)
      goto LABEL_84;
  }
  v71 = (unint64_t *)&v63->__shared_owners_;
  do
    v72 = __ldaxr(v71);
  while (__stlxr(v72 - 1, v71));
  if (!v72)
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
LABEL_84:
  v73 = v91;
  if (v91)
  {
    v74 = (unint64_t *)&v91->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = v93;
  if (v93)
  {
    v77 = (unint64_t *)&v93->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v95;
  if (v95)
  {
    v80 = (unint64_t *)&v95->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }

}

void sub_1918BF790(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::pool_grad_kernel::on_resized(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;

  if (*(_DWORD *)(a1 + 336))
  {
    *(_QWORD *)(a1 + 284) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 8);
    v3 = *(void **)(a1 + 392);
    *(_QWORD *)(a1 + 392) = 0;

  }
}

void Espresso::MPSEngine::activation_grad::~activation_grad(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::activation_grad::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v7;
  id *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  id v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  id *v29;
  id *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  id *v34;
  id *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  const void *v39;
  id *v40;
  id *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::runtime_error *exception;
  id v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  std::__shared_weak_count *v67;

  v7 = *(void **)(a1 + 320);
  if (!v7)
  {
    v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v13 = v9[18];
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    else
    {
      v13 = v9[18];
    }
    v18 = 0;
    v19 = *(unsigned int *)(a1 + 280);
    LODWORD(v14) = 1.0;
    v20 = 5;
    LODWORD(v16) = 0;
    v21 = 1;
    LODWORD(v15) = 1.0;
    switch((int)v19)
    {
      case 0:
        goto LABEL_15;
      case 1:
        goto LABEL_20;
      case 2:
        goto LABEL_14;
      case 3:
        goto LABEL_17;
      case 5:
        goto LABEL_19;
      case 6:
        v19 = 2;
        goto LABEL_19;
      case 7:
        v19 = 4;
        goto LABEL_19;
      case 8:
        v21 = 9;
LABEL_14:
        LODWORD(v16) = *(_DWORD *)(a1 + 284);
LABEL_15:
        LODWORD(v14) = LODWORD(v16);
        objc_msgSend(MEMORY[0x1E0CC71E8], "cnnNeuronDescriptorWithType:a:", v21, v14, v15);
        v22 = objc_claimAutoreleasedReturnValue();
        goto LABEL_21;
      case 10:
        v19 = 7;
LABEL_19:
        LODWORD(v14) = *(_DWORD *)(a1 + 284);
        LODWORD(v15) = *(_DWORD *)(a1 + 288);
        v20 = v19;
LABEL_20:
        objc_msgSend(MEMORY[0x1E0CC71E8], "cnnNeuronDescriptorWithType:a:b:", v20, v14, v15, v16);
        v22 = objc_claimAutoreleasedReturnValue();
        goto LABEL_21;
      case 12:
        v19 = 8;
LABEL_17:
        objc_msgSend(MEMORY[0x1E0CC71E8], "cnnNeuronDescriptorWithType:", v19, v14, v15, v16);
        v22 = objc_claimAutoreleasedReturnValue();
LABEL_21:
        v18 = (void *)v22;
        if (v22)
        {
          v23 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6D40]), "initWithDevice:neuronDescriptor:", v13, v22);
          v24 = *(void **)(a1 + 320);
          *(_QWORD *)(a1 + 320) = v23;

        }
        break;
      default:
        break;
    }
    if (!*(_QWORD *)(a1 + 320))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Error creating mps kernel");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 64))
    {
      v25 = (_QWORD *)(a1 + 176);
      if (*(char *)(a1 + 199) < 0)
        v25 = (_QWORD *)*v25;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v25, v14, v15, v16);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(*(id *)(a1 + 320), "setLabel:", v26);

    }
    v7 = *(void **)(a1 + 320);
  }
  v27 = *a4;
  v28 = *a3;
  v64 = v7;
  if (*(_QWORD *)v28
  {
    v30 = v29;
    v31 = *(std::__shared_weak_count **)(v28 + 8);
    v67 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  else
  {
    v30 = 0;
    v67 = 0;
  }
  if (*(_QWORD *)v27
  {
    v35 = v34;
    v36 = *(std::__shared_weak_count **)(v27 + 8);
    v66 = v36;
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
  }
  else
  {
    v35 = 0;
    v66 = 0;
  }
  v39 = *(const void **)(v27 + 16);
  if (v39
  {
    v41 = v40;
    v42 = *(std::__shared_weak_count **)(v27 + 24);
    v65 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
  }
  else
  {
    v41 = 0;
    v65 = 0;
  }
  if (*(_QWORD *)a2
  {
    v46 = v45;
    v47 = *(std::__shared_weak_count **)(a2 + 8);
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
    }
  }
  else
  {
    v47 = 0;
    v46 = 0;
  }
  v50 = objc_msgSend(v35[32], "count");
  v51 = v46[18];
  if (v50 < 2)
  {
    v52 = v35[30];
    v53 = v41[30];
    v54 = v30[30];
    objc_msgSend(v64, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v51, v52, v53, v54);

    if (!v47)
      goto LABEL_65;
  }
  else
  {
    objc_msgSend(v64, "encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationImages:", v51, v35[32], v41[32], v30[32]);
    if (!v47)
      goto LABEL_65;
  }
  v55 = (unint64_t *)&v47->__shared_owners_;
  do
    v56 = __ldaxr(v55);
  while (__stlxr(v56 - 1, v55));
  if (!v56)
  {
    ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
LABEL_65:
  if (v65)
  {
    v57 = (unint64_t *)&v65->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v66)
  {
    v59 = (unint64_t *)&v66->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  if (v67)
  {
    v61 = (unint64_t *)&v67->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }

}

void sub_1918BFD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  void *v17;
  void *v18;
  void *v19;

  __cxa_free_exception(v18);

  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::concat_grad_kernel::~concat_grad_kernel(Espresso::MPSEngine::concat_grad_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSEngine::concat_grad_kernel::__launch()
{
  return puts("TODO: impl concat_grad_kernel::__launch");
}

void Espresso::MPSEngine::softmax_loss_grad_kernel::~softmax_loss_grad_kernel(id *this)
{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{

  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::softmax_loss_grad_kernel::__launch(_QWORD *a1, uint64_t *a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  id *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const void *v20;
  id *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  id v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  uint64_t v34;
  const void *v35;
  id *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  __int128 v50;
  int64x2_t *v51;
  uint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  const void *v55;
  id *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  int64x2_t *v73;
  int64x2_t *v74;
  uint32x2_t v75;
  __int128 v76;
  uint32x2_t v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::runtime_error *v88;
  std::runtime_error *exception;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  int64x2_t v96;
  uint64_t v97;
  int64x2_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  int64x2_t v104;
  uint64_t v105;
  id *v106;
  std::__shared_weak_count *v107;
  int32x2_t v108;
  uint64_t v109;
  int v110;
  float v111;
  uint64_t v112;
  id v113[2];
  id *v114;
  std::__shared_weak_count *v115;
  id *v116;
  std::__shared_weak_count *v117;
  id *v118;
  std::__shared_weak_count *v119;

  v7 = *a3;
  v8 = **a3;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v118 = v9;
    v119 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v118 = 0;
    v119 = 0;
  }
  v14 = *a4;
  v15 = **a4;
  if (v15
  {
    v17 = (std::__shared_weak_count *)v14[1];
    v116 = v16;
    v117 = v17;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v14 = *a4;
    }
  }
  else
  {
    v116 = 0;
    v117 = 0;
  }
  v20 = v14[2];
  if (v20
  {
    v22 = (std::__shared_weak_count *)v14[3];
    v114 = v21;
    v115 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v114 = 0;
    v115 = 0;
  }
  Espresso::temporary_mtl_encoder::temporary_mtl_encoder((uint64_t)v113, *a2);
  v25 = v113[0];
  v108 = 0;
  v109 = 0;
  v112 = 0;
  v110 = 0;
  v26 = *((_DWORD *)v10 + 2);
  v27 = *((_DWORD *)v10 + 3);
  v108 = (int32x2_t)__PAIR64__(v27, v26);
  v28 = *((_DWORD *)v10 + 4);
  v29 = *((_DWORD *)v10 + 6);
  if (v29 <= 1)
    v29 = 1;
  v30 = v29 * *((_DWORD *)v10 + 5);
  LODWORD(v109) = *((_DWORD *)v10 + 4);
  HIDWORD(v109) = v30;
  v32 = v28 - 1;
  v31 = v28 < 1;
  v33 = v28 + 2;
  if (!v31)
    v33 = v32;
  v110 = (v33 >> 2) + 1;
  v111 = 1.0 / (float)(v27 * v26 * v30);
  LODWORD(v112) = objc_msgSend(v10[32], "count");
  if (objc_msgSend(v10[32], "count") == 1)
  {
    v34 = a1[39];
    if (!v34)
    {
      v35 = (const void *)a1[1];
      if (!v35
      {
        v106 = 0;
        v107 = 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v37 = (std::__shared_weak_count *)a1[2];
      v106 = v36;
      v107 = v37;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
      }
      objc_msgSend(v36[20], "kernelForFunction:cacheString:withConstants:", "softmax_grad_single_tex", 0, 0);
      v40 = objc_claimAutoreleasedReturnValue();
      v41 = (void *)a1[39];
      a1[39] = v40;

      if (v37)
      {
        v42 = (unint64_t *)&v37->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v34 = a1[39];
    }
    objc_msgSend(v25, "setComputePipelineState:", v34);
    objc_msgSend(v116[32], "objectAtIndexedSubscript:", 0);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "texture");
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setTexture:atIndex:", v45, 0);

    objc_msgSend(v114[32], "objectAtIndexedSubscript:", 0);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v46, "texture");
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setTexture:atIndex:", v47, 1);

    objc_msgSend(v118[32], "objectAtIndexedSubscript:", 0);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v48, "texture");
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v25, "setTexture:atIndex:", v49, 2);

    objc_msgSend(v25, "setBytes:length:atIndex:", &v108, 32, 0);
    if (*(_QWORD *)&v108 == 0x100000001)
    {
      v104 = vdupq_n_s64(1uLL);
      v105 = ((HIDWORD(v109) * v110 - 1) >> 5) + 1;
      v103 = 1;
      v50 = xmmword_191A939D0;
      v51 = &v104;
      v52 = &v103;
    }
    else
    {
      v77 = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v108, (int32x2_t)-1), 1uLL);
      *(_QWORD *)&v78 = v77.i32[0];
      *((_QWORD *)&v78 + 1) = v77.i32[1];
      v101 = v78;
      v102 = ((HIDWORD(v109) * v110 - 1) >> 4) + 1;
      v100 = 2;
      v50 = xmmword_191A939C0;
      v51 = (int64x2_t *)&v101;
      v52 = &v100;
    }
    *(_OWORD *)(v52 + 1) = v50;
    objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", v51);
  }
  else
  {
    v53 = 0;
    v90 = vdupq_n_s64(2uLL);
    v91 = vdupq_n_s64(1uLL);
    while (v53 < ((objc_msgSend(v10[32], "count", *(_OWORD *)&v90) - 1) & 0xFFFFFFFFFFFFFFFCLL) + 4)
    {
      v54 = a1[40];
      if (!v54)
      {
        v55 = (const void *)a1[1];
        if (!v55
        {
          v106 = 0;
          v107 = 0;
          v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v88, "Espresso: wrong_context_type");
          v88->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
        }
        v57 = (std::__shared_weak_count *)a1[2];
        v106 = v56;
        v107 = v57;
        if (v57)
        {
          v58 = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        objc_msgSend(v56[20], "kernelForFunction:cacheString:withConstants:", "softmax_grad_batch", 0, 0);
        v60 = objc_claimAutoreleasedReturnValue();
        v61 = (void *)a1[40];
        a1[40] = v60;

        if (v57)
        {
          v62 = (unint64_t *)&v57->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v54 = a1[40];
      }
      objc_msgSend(v25, "setComputePipelineState:", v54);
      v64 = 0;
      v65 = 0;
      v66 = v116;
      do
      {
        if (v53 + v65 >= objc_msgSend(v66[32], "count"))
        {
          objc_msgSend(v25, "setTexture:atIndex:", 0, v64);
          objc_msgSend(v25, "setTexture:atIndex:", 0, v64 + 1);
          objc_msgSend(v25, "setTexture:atIndex:", 0, v65 + 8);
        }
        else
        {
          objc_msgSend(v66[32], "objectAtIndexedSubscript:", v53 + v65);
          v67 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v67, "texture");
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "setTexture:atIndex:", v68, v64);

          objc_msgSend(v114[32], "objectAtIndexedSubscript:", v53 + v65);
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "texture");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "setTexture:atIndex:", v70, v64 + 1);

          objc_msgSend(v118[32], "objectAtIndexedSubscript:", v53 + v65);
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v71, "texture");
          v72 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v25, "setTexture:atIndex:", v72, v65 + 8);

        }
        ++v65;
        v64 += 2;
      }
      while (v65 != 4);
      objc_msgSend(v25, "setBytes:length:atIndex:", &v108, 32, 0);
      if (*(_QWORD *)&v108 == 0x100000001)
      {
        v98 = v91;
        v99 = ((v110 - 1) >> 5) + 1;
        v96 = v91;
        v97 = 32;
        v73 = &v96;
        v74 = &v98;
      }
      else
      {
        v75 = vsra_n_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v108, (int32x2_t)-1), 1uLL);
        *(_QWORD *)&v76 = v75.i32[0];
        *((_QWORD *)&v76 + 1) = v75.i32[1];
        v94 = v76;
        v95 = ((v110 - 1) >> 4) + 1;
        v92 = v90;
        v93 = 16;
        v73 = &v92;
        v74 = (int64x2_t *)&v94;
      }
      objc_msgSend(v25, "dispatchThreadgroups:threadsPerThreadgroup:", v74, v73);
      v53 += 4;
      v10 = v118;
    }
  }

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder(v113);
  v79 = v115;
  if (v115)
  {
    v80 = (unint64_t *)&v115->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v82 = v117;
  if (v117)
  {
    v83 = (unint64_t *)&v117->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = v119;
  if (v119)
  {
    v86 = (unint64_t *)&v119->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
}

void sub_1918C06A4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 200);

  Espresso::temporary_mtl_encoder::~temporary_mtl_encoder((id *)(v2 - 152));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2 - 104);
  _Unwind_Resume(a1);
}

BOOL Espresso::MPSEngine::softmax_loss_grad_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  int v4;
  _BOOL4 v5;

  v3 = *a3;
  if (*a3 == a3[1])
  {
    v5 = 1;
  }
  else
  {
    v4 = *(_DWORD *)(v3 + 20);
    if (v4 == -1)
    {
      if (*(_DWORD *)(v3 + 16) == 1)
        v4 = 4;
      else
        v4 = 5;
    }
    v5 = v4 > 3;
  }
  return !*(_BYTE *)(a1 + 307) && v5;
}

void Espresso::MPSEngine::inner_product_grad_kernel::~inner_product_grad_kernel(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::inner_product_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, const void ***a4)
{
  uint64_t v8;
  const void **v9;
  const void *v10;
  id *v11;
  id *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  id v16;
  char v17;
  EspressoTrainingInnerProductWeightsForMPS *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  EspressoTrainingInnerProductWeightsForMPS *v25;
  int v26;
  const void *v27;
  id *v28;
  std::__shared_weak_count *v29;
  uint64_t **v30;
  unint64_t *v31;
  unint64_t v32;
  id v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  id *v60;
  id *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  const void **v65;
  const void *v66;
  id *v67;
  id *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  const void *v72;
  id *v73;
  id *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  id v84;
  id v85;
  id v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::runtime_error *v98;
  std::runtime_error *exception;
  id *v100;
  std::__shared_weak_count *v101;
  int v102;
  void *__p;
  void *v104;
  _OWORD v105[8];
  int v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  id *v109;
  std::__shared_weak_count *v110;

  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  v107 = 0;
  v108 = 0;
  v9 = *a4;
  v10 = (*a4)[2];
  if (v10
  {
    v12 = v11;
    v13 = (std::__shared_weak_count *)v9[3];
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v109 = v11;
    v110 = v13;
    v16 = v11[21];
    v17 = 0;
  }
  else
  {
    v12 = 0;
    v16 = 0;
    v109 = 0;
    v110 = 0;
    v17 = 1;
  }
  if (!*(_QWORD *)(a1 + 464) || *(_BYTE *)(a1 + 448))
  {
    v18 = [EspressoTrainingInnerProductWeightsForMPS alloc];
    v105[0] = *(_OWORD *)v8;
    v19 = *(_OWORD *)(v8 + 16);
    v20 = *(_OWORD *)(v8 + 32);
    v21 = *(_OWORD *)(v8 + 64);
    v105[3] = *(_OWORD *)(v8 + 48);
    v105[4] = v21;
    v105[1] = v19;
    v105[2] = v20;
    v22 = *(_OWORD *)(v8 + 80);
    v23 = *(_OWORD *)(v8 + 96);
    v24 = *(_OWORD *)(v8 + 112);
    v106 = *(_DWORD *)(v8 + 128);
    v105[6] = v23;
    v105[7] = v24;
    v105[5] = v22;
    v25 = -[EspressoTrainingInnerProductWeightsForMPS initWithParams:forMode:](v18, "initWithParams:forMode:", v105, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 114));
    -[EspressoTrainingInnerProductWeightsForMPS setWeightsBuffer:](v25, "setWeightsBuffer:", v16);
    -[EspressoTrainingInnerProductWeightsForMPS setBiasesBuffer:](v25, "setBiasesBuffer:", 0);
    v26 = 268435488;
    if ((v17 & 1) == 0)
    {
      if ((*((unsigned int (**)(id *))*v12 + 4))(v12) == 1)
        v26 = 268435472;
      else
        v26 = 268435488;
    }
    v25->super.data_type = v26;
    objc_storeStrong((id *)(a1 + 456), v25);
    v27 = *(const void **)(a1 + 8);
    if (!v27
    {
      v100 = 0;
      v101 = 0;
      v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v98, "Espresso: wrong_context_type");
      v98->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v29 = *(std::__shared_weak_count **)(a1 + 16);
    v100 = v28;
    v101 = v29;
    if (v29)
    {
      v30 = a3;
      v31 = (unint64_t *)&v29->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
      v33 = v28[18];
      do
        v34 = __ldaxr(v31);
      while (__stlxr(v34 - 1, v31));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      a3 = v30;
    }
    else
    {
      v33 = v28[18];
    }
    v35 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6D08]), "initWithDevice:weights:", v33, *(_QWORD *)(a1 + 456), v100, v101);
    v36 = *(void **)(a1 + 464);
    *(_QWORD *)(a1 + 464) = v35;

    objc_msgSend(*(id *)(a1 + 464), "setGradientOption:", 1);
    *(_BYTE *)(a1 + 448) = 0;

  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
  v37 = *(void **)(a1 + 440);
  if (!v37)
  {
    Espresso::abstract_blob_container::shape((char *)&v100, **a3);
    v38 = v102 > 3 || v102 == -1;
    v39 = 8;
    if (v38)
      v39 = 16;
    v40 = *(int *)(**a3 + v39);
    if (__p)
    {
      v104 = __p;
      operator delete(__p);
    }
    objc_msgSend(v16, "device");
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    v42 = objc_msgSend(v41, "newBufferWithLength:options:", 4 * v40, 0);
    v43 = *(void **)(a1 + 440);
    *(_QWORD *)(a1 + 440) = v42;

    v37 = *(void **)(a1 + 440);
  }
  v44 = v37;
  v45 = objc_alloc(MEMORY[0x1E0CC6CD8]);
  v46 = (void *)objc_msgSend(v45, "initWithWeights:biases:", v16, v44);

  v48 = *(std::__shared_weak_count **)(a2 + 8);
  v100 = v47;
  v101 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  objc_msgSend(*(id *)(a1 + 464), "reloadWeightsAndBiasesWithCommandBuffer:state:", v47[18], v46, v100, v101);
  if (v48)
  {
    v51 = (unint64_t *)&v48->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }

  v53 = v108;
  if (v108)
  {
    v54 = (unint64_t *)&v108->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v110;
  if (v110)
  {
    v57 = (unint64_t *)&v110->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = *a3;
  if (*v59
  {
    v61 = v60;
    v62 = v59[1];
    *(_QWORD *)&v105[0] = v60;
    *((_QWORD *)&v105[0] + 1) = v62;
    if (v62)
    {
      v63 = (unint64_t *)(v62 + 8);
      do
        v64 = __ldxr(v63);
      while (__stxr(v64 + 1, v63));
    }
  }
  else
  {
    v61 = 0;
    v105[0] = 0uLL;
  }
  v65 = *a4;
  v66 = **a4;
  if (v66
  {
    v68 = v67;
    v69 = (std::__shared_weak_count *)v65[1];
    v100 = v67;
    v101 = v69;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
      v65 = *a4;
    }
  }
  else
  {
    v68 = 0;
    v100 = 0;
    v101 = 0;
  }
  v72 = v65[4];
  if (v72
  {
    v74 = v73;
    v75 = (std::__shared_weak_count *)v65[5];
    v109 = v73;
    v110 = v75;
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
  }
  else
  {
    v74 = 0;
    v109 = 0;
    v110 = 0;
  }
  v79 = *(std::__shared_weak_count **)(a2 + 8);
  v107 = v78;
  v108 = v79;
  if (v79)
  {
    v80 = (unint64_t *)&v79->__shared_owners_;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  v82 = *(void **)(a1 + 464);
  v83 = v78[18];
  v84 = v68[30];
  v85 = v74[30];
  v86 = v61[30];
  objc_msgSend(v82, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v83, v84, v85, v86, v100);

  if (v79)
  {
    v87 = (unint64_t *)&v79->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    if (!v88)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  v89 = v110;
  if (v110)
  {
    v90 = (unint64_t *)&v110->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  v92 = v101;
  if (v101)
  {
    v93 = (unint64_t *)&v101->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v105[0] + 1);
  if (*((_QWORD *)&v105[0] + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v105[0] + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
}

void sub_1918C0FC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 104);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_grad_kernel::blob_options(Espresso::MPSEngine::inner_product_grad_kernel *this@<X0>, char a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const void *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;

  *a4 = 0;
  a4[1] = 0;
  if (a3 == 1 && (a2 & 1) == 0)
  {
    v5 = (const void *)*((_QWORD *)this + 1);
    if (v5)
    {
      if (v7)
      {
        v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v19 = v7;
        v20 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = operator new(0x70uLL);
        v11[1] = 0;
        v11[2] = 0;
        *v11 = &off_1E2DBE228;
        *((_OWORD *)v11 + 4) = 0u;
        *((_OWORD *)v11 + 5) = 0u;
        *((_OWORD *)v11 + 2) = 0u;
        *((_OWORD *)v11 + 3) = 0u;
        v11[3] = &off_1E2D9B4D8;
        *((_DWORD *)v11 + 12) = 1065353216;
        v11[7] = 0x1FFFFFFFFLL;
        v11[12] = 0;
        v11[13] = 0;
        v11[8] = 0;
        v11[9] = 0;
        *((_BYTE *)v11 + 88) = 0;
        v11[10] = 0;
        *(_QWORD *)&v18 = v11 + 3;
        *((_QWORD *)&v18 + 1) = v11;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a4, &v18);
        v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
        if (*((_QWORD *)&v18 + 1))
        {
          v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a4 + 72), v19[28], v19[29]);
        v15 = v20;
        if (v20)
        {
          v16 = (unint64_t *)&v20->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
  }
}

void sub_1918C11F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_weights_grad_kernel::~inner_product_weights_grad_kernel(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::inner_product_weights_grad_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, const void ***a4)
{
  const void ***v4;
  std::__shared_weak_count **v8;
  uint64_t v9;
  uint64_t v10;
  const void **v11;
  const void *v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  char *v18;
  const void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  id *v23;
  const void *v24;
  unint64_t *v25;
  unint64_t v26;
  const void *v27;
  unint64_t *v28;
  unint64_t v29;
  id v30;
  EspressoTrainingInnerProductWeightsForMPS *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  EspressoTrainingInnerProductWeightsForMPS *v38;
  int v39;
  const void *v40;
  id *v41;
  std::__shared_weak_count *v42;
  id *v43;
  const void ***v44;
  id v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  id v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  id v61;
  void *v62;
  id *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  const void *v77;
  void *v78;
  void *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  const void **v83;
  const void *v84;
  id *v85;
  id *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  const void *v90;
  id *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void *v101;
  MyMPSCNNConvolutionGradientState *v102;
  void *v103;
  uint64_t *v104;
  const void *v105;
  _QWORD *v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  void *v111;
  uint64_t *v112;
  const void *v113;
  _QWORD *v114;
  _QWORD *v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  uint64_t *v119;
  const void *v120;
  id *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  id v125;
  unint64_t v126;
  uint64_t v127;
  void *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  id v132;
  uint64_t *v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  MPSImageBatch *v140;
  const void *v141;
  id *v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  void *v148;
  unint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  id v152;
  void *v153;
  id *v154;
  uint64_t *v155;
  const void *v156;
  id *v157;
  id *v158;
  unint64_t *v159;
  unint64_t v160;
  void *v161;
  uint64_t v162;
  id v163;
  id v164;
  id v165;
  unint64_t *v166;
  unint64_t v167;
  void *v168;
  uint64_t v169;
  id v170;
  id v171;
  void *v172;
  MPSImageBatch *v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  std::runtime_error *v186;
  std::runtime_error *exception;
  std::runtime_error *v188;
  std::runtime_error *v189;
  std::runtime_error *v190;
  uint64_t **v191;
  id *v192;
  std::__shared_weak_count *v193;
  int v194;
  void *__p;
  void *v196;
  _QWORD *v197;
  std::__shared_weak_count *v198;
  id *v199;
  std::__shared_weak_count *v200;
  id *v201;
  std::__shared_weak_count *v202;
  _OWORD v203[8];
  int v204;
  uint64_t v205;

  v205 = *MEMORY[0x1E0C80C00];
  if ((unint64_t)((char *)a4[1] - (char *)*a4) <= 0x1F)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(exception);
  }
  v4 = a4;
  v8 = &v202;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
  v201 = 0;
  v202 = 0;
  v199 = 0;
  v200 = 0;
  {
    v10 = a2;
    v11 = *v4;
    v12 = (*v4)[2];
    if (v12)
    {
      if (v13)
      {
        v14 = (std::__shared_weak_count *)v11[3];
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          a2 = v10;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    else
    {
      v13 = 0;
    }
    v14 = 0;
LABEL_18:
    a2 = v10;
    goto LABEL_19;
  }
  v18 = (char *)*v4;
  if (!v17)
  {
    v24 = (const void *)*((_QWORD *)v18 + 4);
    if (v24)
    {
      if (v13)
      {
        v14 = (std::__shared_weak_count *)*((_QWORD *)v18 + 5);
        if (v14)
        {
          v25 = (unint64_t *)&v14->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        goto LABEL_19;
      }
    }
    else
    {
      v13 = 0;
    }
    v14 = 0;
LABEL_19:
    v23 = 0;
    v201 = v13;
    goto LABEL_38;
  }
  v19 = (const void *)*((_QWORD *)v18 + 2);
  if (!v19)
  {
    v13 = 0;
    goto LABEL_27;
  }
  if (!v13)
  {
LABEL_27:
    v20 = 0;
    goto LABEL_28;
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)v18 + 3);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v18 = (char *)*v4;
  }
LABEL_28:
  v8 = &v200;
  v201 = v13;
  v202 = v20;
  if ((unint64_t)((char *)v4[1] - v18) >= 0x21 && (v27 = (const void *)*((_QWORD *)v18 + 4)) != 0)
  {
    if (v23)
    {
      v14 = (std::__shared_weak_count *)*((_QWORD *)v18 + 5);
      if (v14)
      {
        v28 = (unint64_t *)&v14->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      goto LABEL_37;
    }
  }
  else
  {
    v23 = 0;
  }
  v14 = 0;
LABEL_37:
  v199 = v23;
LABEL_38:
  *v8 = v14;
  if (!v13)
  {
    v30 = 0;
    if (!v23)
      goto LABEL_41;
    goto LABEL_40;
  }
  v30 = v13[21];
  if (v23)
LABEL_40:
    v23 = (id *)v23[21];
LABEL_41:
  if (!*(_QWORD *)(a1 + 440) || *(_BYTE *)(a1 + 456))
  {
    v31 = [EspressoTrainingInnerProductWeightsForMPS alloc];
    v203[0] = *(_OWORD *)v9;
    v32 = *(_OWORD *)(v9 + 16);
    v33 = *(_OWORD *)(v9 + 32);
    v34 = *(_OWORD *)(v9 + 64);
    v203[3] = *(_OWORD *)(v9 + 48);
    v203[4] = v34;
    v203[1] = v32;
    v203[2] = v33;
    v35 = *(_OWORD *)(v9 + 80);
    v36 = *(_OWORD *)(v9 + 96);
    v37 = *(_OWORD *)(v9 + 112);
    v204 = *(_DWORD *)(v9 + 128);
    v203[6] = v36;
    v203[7] = v37;
    v203[5] = v35;
    v38 = -[EspressoTrainingInnerProductWeightsForMPS initWithParams:forMode:](v31, "initWithParams:forMode:", v203, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 114));
    -[EspressoTrainingInnerProductWeightsForMPS setWeightsBuffer:](v38, "setWeightsBuffer:", v30);
    -[EspressoTrainingInnerProductWeightsForMPS setBiasesBuffer:](v38, "setBiasesBuffer:", v23);
    v39 = 268435488;
    if (v13)
    {
      if ((*((unsigned int (**)(id *))*v13 + 4))(v13) == 1)
        v39 = 268435472;
      else
        v39 = 268435488;
    }
    v38->super.data_type = v39;
    objc_storeStrong((id *)(a1 + 464), v38);
    v191 = a3;
    v40 = *(const void **)(a1 + 8);
    if (!v40
    {
      v192 = 0;
      v193 = 0;
      v186 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v186, "Espresso: wrong_context_type");
      v186->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
    }
    v42 = *(std::__shared_weak_count **)(a1 + 16);
    v192 = v41;
    v193 = v42;
    if (v42)
    {
      v43 = v23;
      v44 = v4;
      v45 = v30;
      v46 = a2;
      v47 = (unint64_t *)&v42->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      v49 = v41[18];
      do
        v50 = __ldaxr(v47);
      while (__stlxr(v50 - 1, v47));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      a2 = v46;
      v30 = v45;
      v4 = v44;
      v23 = v43;
    }
    else
    {
      v49 = v41[18];
    }
    a3 = v191;
    v51 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6D08]), "initWithDevice:weights:", v49, *(_QWORD *)(a1 + 464));
    v52 = *(void **)(a1 + 440);
    *(_QWORD *)(a1 + 440) = v51;

    if (*(_BYTE *)(a1 + 472))
      v53 = 3;
    else
      v53 = 2;
    objc_msgSend(*(id *)(a1 + 440), "setGradientOption:", v53);

    *(_BYTE *)(a1 + 456) = 0;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Training inner_product has bound weights");
  if (!v23)
  {
    v54 = *(void **)(a1 + 448);
    if (!v54)
    {
      Espresso::abstract_blob_container::shape((char *)&v192, **a3);
      v55 = v194 > 3 || v194 == -1;
      v56 = 8;
      if (v55)
        v56 = 16;
      v57 = *(int *)(**a3 + v56);
      if (__p)
      {
        v196 = __p;
        operator delete(__p);
      }
      objc_msgSend(v30, "device");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = objc_msgSend(v58, "newBufferWithLength:options:", 4 * v57, 0);
      v60 = *(void **)(a1 + 448);
      *(_QWORD *)(a1 + 448) = v59;

      v54 = *(void **)(a1 + 448);
    }
    v23 = v54;
  }
  v61 = objc_alloc(MEMORY[0x1E0CC6CD8]);
  v62 = (void *)objc_msgSend(v61, "initWithWeights:biases:", v30, v23);

  v64 = *(std::__shared_weak_count **)(a2 + 8);
  v192 = v63;
  v193 = v64;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldxr(v65);
    while (__stxr(v66 + 1, v65));
  }
  objc_msgSend(*(id *)(a1 + 440), "reloadWeightsAndBiasesWithCommandBuffer:state:", v63[18], v62);
  if (v64)
  {
    v67 = (unint64_t *)&v64->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }

  v69 = v200;
  if (v200)
  {
    v70 = (unint64_t *)&v200->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v202;
  if (v202)
  {
    v73 = (unint64_t *)&v202->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = *(int *)(a1 + 304);
  v76 = *a3;
  v77 = (const void *)**a3;
  if (v77
  {
    v79 = v78;
    v80 = v76[1];
    v192 = (id *)v78;
    v193 = (std::__shared_weak_count *)v80;
    if (v80)
    {
      v81 = (unint64_t *)(v80 + 8);
      do
        v82 = __ldxr(v81);
      while (__stxr(v82 + 1, v81));
    }
  }
  else
  {
    v79 = 0;
    v192 = 0;
    v193 = 0;
  }
  v83 = *v4;
  v84 = **v4;
  if (v84
  {
    v86 = v85;
    v87 = (std::__shared_weak_count *)v83[1];
    v201 = v85;
    v202 = v87;
    if (v87)
    {
      v88 = (unint64_t *)&v87->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
      v83 = *v4;
    }
  }
  else
  {
    v86 = 0;
    v201 = 0;
    v202 = 0;
  }
  v90 = v83[2];
  if (v90
  {
    v92 = (std::__shared_weak_count *)v83[3];
    v199 = v91;
    v200 = v92;
    if (v92)
    {
      v93 = (unint64_t *)&v92->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
  }
  else
  {
    v199 = 0;
    v200 = 0;
  }
  if (!v79)
  {
    v188 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::invalid_state_error::invalid_state_error(v188);
  }
  if (*(_QWORD *)a2
  {
    v96 = *(std::__shared_weak_count **)(a2 + 8);
    v197 = v95;
    v198 = v96;
    if (v96)
    {
      v97 = (unint64_t *)&v96->__shared_owners_;
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
  }
  else
  {
    v197 = 0;
    v198 = 0;
  }
  v99 = objc_msgSend(v86[32], "count");
  v100 = *(_QWORD *)(a1 + 480);
  if (v99 < 2)
  {
    if (v100)
    {
      v111 = *(void **)(v100 + 576);
      if (v111)
      {
        v102 = v111;
        if (*(_BYTE *)(a1 + 473))
        {
          v112 = *a3;
          v113 = (const void *)(*a3)[4];
          if (v113
          {
            v115 = v114;
            v116 = (std::__shared_weak_count *)v112[5];
            *(_QWORD *)&v203[0] = v114;
            *((_QWORD *)&v203[0] + 1) = v116;
            if (v116)
            {
              v117 = (unint64_t *)&v116->__shared_owners_;
              do
                v118 = __ldxr(v117);
              while (__stxr(v118 + 1, v117));
            }
          }
          else
          {
            v116 = 0;
            v115 = 0;
            v203[0] = 0uLL;
          }
          -[MPSCNNConvolutionGradientState gradientForBiases](v102, "gradientForBiases");
          v147 = objc_claimAutoreleasedReturnValue();
          v148 = (void *)v115[21];
          v115[21] = v147;

          if (v116)
          {
            v149 = (unint64_t *)&v116->__shared_owners_;
            do
              v150 = __ldaxr(v149);
            while (__stlxr(v150 - 1, v149));
            if (!v150)
            {
              ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
              std::__shared_weak_count::__release_weak(v116);
            }
          }
        }
        -[MPSCNNConvolutionGradientState gradientForWeights](v102, "gradientForWeights");
        v151 = objc_claimAutoreleasedReturnValue();
        v152 = v192[21];
        v192[21] = (id)v151;

LABEL_188:
        if (!*(_BYTE *)(a1 + 472))
        {
          v168 = *(void **)(a1 + 440);
          v169 = v197[18];
          v170 = v201[30];
          v171 = v199[30];
          objc_msgSend(v168, "encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:", v169, v170, v171, v102);
          v172 = (void *)objc_claimAutoreleasedReturnValue();

          *(_QWORD *)&v203[0] = v172;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v203, 1);
          v173 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
          MPSImageBatchIncrementReadCount(v173, -1);

          goto LABEL_202;
        }
        v155 = *a3;
        v156 = (const void *)(*a3)[2];
        if (v156
        {
          v158 = v157;
          v135 = (std::__shared_weak_count *)v155[3];
          *(_QWORD *)&v203[0] = v157;
          *((_QWORD *)&v203[0] + 1) = v135;
          if (v135)
          {
            v159 = (unint64_t *)&v135->__shared_owners_;
            do
              v160 = __ldxr(v159);
            while (__stxr(v160 + 1, v159));
          }
        }
        else
        {
          v135 = 0;
          v158 = 0;
          v203[0] = 0uLL;
        }
        v161 = *(void **)(a1 + 440);
        v162 = v197[18];
        v163 = v201[30];
        v164 = v199[30];
        v165 = v158[30];
        objc_msgSend(v161, "encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:destinationGradient:", v162, v163, v164, v102, v165);

        if (v135)
        {
          v166 = (unint64_t *)&v135->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
            goto LABEL_200;
        }
        goto LABEL_202;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 328))(a1);
    if (*(_BYTE *)(a1 + 473))
    {
      v119 = *a3;
      v120 = (const void *)(*a3)[4];
      if (!v120
      {
        v203[0] = 0uLL;
        v189 = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_state_error::invalid_state_error(v189);
      }
      v122 = (std::__shared_weak_count *)v119[5];
      *(_QWORD *)&v203[0] = v121;
      *((_QWORD *)&v203[0] + 1) = v122;
      if (!v122)
      {
        v125 = v121[21];
        goto LABEL_187;
      }
      v123 = (unint64_t *)&v122->__shared_owners_;
      do
        v124 = __ldxr(v123);
      while (__stxr(v124 + 1, v123));
      v125 = v121[21];
      do
        v126 = __ldaxr(v123);
      while (__stlxr(v126 - 1, v123));
      if (v126)
        goto LABEL_187;
    }
    else
    {
      v141 = *(const void **)(a1 + 8);
      if (!v141
      {
        v203[0] = 0uLL;
        v190 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v190, "Espresso: wrong_context_type");
        v190->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v122 = *(std::__shared_weak_count **)(a1 + 16);
      *(_QWORD *)&v203[0] = v142;
      *((_QWORD *)&v203[0] + 1) = v122;
      if (v122)
      {
        v143 = (unint64_t *)&v122->__shared_owners_;
        do
          v144 = __ldxr(v143);
        while (__stxr(v144 + 1, v143));
      }
      v125 = (id)objc_msgSend(v142[18], "newBufferWithLength:options:", 4 * v75, 0);
      if (!v122)
        goto LABEL_187;
      v145 = (unint64_t *)&v122->__shared_owners_;
      do
        v146 = __ldaxr(v145);
      while (__stlxr(v146 - 1, v145));
      if (v146)
        goto LABEL_187;
    }
    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
    std::__shared_weak_count::__release_weak(v122);
LABEL_187:
    *(_QWORD *)&v203[0] = v192[21];
    *((_QWORD *)&v203[0] + 1) = v125;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v203, 2);
    v153 = (void *)objc_claimAutoreleasedReturnValue();
    v102 = -[MPSState initWithResources:]([MyMPSCNNConvolutionGradientState alloc], "initWithResources:", v153);
    v154 = v199;
    v102->_sourceWidth = *((int *)v199 + 2);
    v102->_sourceHeight = *((int *)v154 + 3);

    goto LABEL_188;
  }
  if (!v100 || (v101 = *(void **)(v100 + 584)) == 0)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("case not implemented with no associated forward kernel");
  v102 = v101;
  -[MyMPSCNNConvolutionGradientState objectAtIndexedSubscript:](v102, "objectAtIndexedSubscript:", 0);
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(_BYTE *)(a1 + 473))
  {
    v104 = *a3;
    v105 = (const void *)(*a3)[4];
    if (v105
    {
      v107 = v106;
      v108 = (std::__shared_weak_count *)v104[5];
      *(_QWORD *)&v203[0] = v106;
      *((_QWORD *)&v203[0] + 1) = v108;
      if (v108)
      {
        v109 = (unint64_t *)&v108->__shared_owners_;
        do
          v110 = __ldxr(v109);
        while (__stxr(v110 + 1, v109));
      }
    }
    else
    {
      v108 = 0;
      v107 = 0;
      v203[0] = 0uLL;
    }
    objc_msgSend(v103, "gradientForBiases");
    v127 = objc_claimAutoreleasedReturnValue();
    v128 = (void *)v107[21];
    v107[21] = v127;

    if (v108)
    {
      v129 = (unint64_t *)&v108->__shared_owners_;
      do
        v130 = __ldaxr(v129);
      while (__stlxr(v130 - 1, v129));
      if (!v130)
      {
        ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
        std::__shared_weak_count::__release_weak(v108);
      }
    }
  }
  objc_msgSend(v103, "gradientForWeights");
  v131 = objc_claimAutoreleasedReturnValue();
  v132 = v192[21];
  v192[21] = (id)v131;

  if (!*(_BYTE *)(a1 + 472))
  {
    objc_msgSend(*(id *)(a1 + 440), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:", v197[18], v201[32], v199[32], v102);
    v140 = (MPSImageBatch *)objc_claimAutoreleasedReturnValue();
    MPSImageBatchIncrementReadCount(v140, -1);

    goto LABEL_202;
  }
  v133 = *a3;
  v135 = (std::__shared_weak_count *)v133[3];
  *(_QWORD *)&v203[0] = v134;
  *((_QWORD *)&v203[0] + 1) = v135;
  if (v135)
  {
    v136 = (unint64_t *)&v135->__shared_owners_;
    do
      v137 = __ldxr(v136);
    while (__stxr(v137 + 1, v136));
  }
  objc_msgSend(*(id *)(a1 + 440), "encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:destinationGradients:", v197[18], v201[32], v199[32], v102, v134[32]);
  if (v135)
  {
    v138 = (unint64_t *)&v135->__shared_owners_;
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
LABEL_200:
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
LABEL_202:

  v174 = v198;
  if (v198)
  {
    v175 = (unint64_t *)&v198->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
      std::__shared_weak_count::__release_weak(v174);
    }
  }
  v177 = v200;
  if (v200)
  {
    v178 = (unint64_t *)&v200->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v202;
  if (v202)
  {
    v181 = (unint64_t *)&v202->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = v193;
  if (v193)
  {
    v184 = (unint64_t *)&v193->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
}

void sub_1918C2254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  uint64_t v16;
  va_list va2;
  uint64_t v18;
  uint64_t v19;
  va_list va3;
  uint64_t v21;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v16 = va_arg(va3, _QWORD);
  v18 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v19 = va_arg(va4, _QWORD);
  v21 = va_arg(va4, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_weights_grad_kernel::blob_options(Espresso::MPSEngine::inner_product_weights_grad_kernel *this@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v6;
  const void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  _QWORD *v20;
  std::__shared_weak_count *v21;

  *a4 = 0;
  a4[1] = 0;
  if (a3)
    v6 = 0;
  else
    v6 = a2;
  if (a3 == 2 || v6)
  {
    v7 = (const void *)*((_QWORD *)this + 1);
    if (v7)
    {
      if (v8)
      {
        v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        v20 = v8;
        v21 = v9;
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = operator new(0x70uLL);
        v12[1] = 0;
        v12[2] = 0;
        *v12 = &off_1E2DBE228;
        *((_OWORD *)v12 + 4) = 0u;
        *((_OWORD *)v12 + 5) = 0u;
        *((_OWORD *)v12 + 2) = 0u;
        *((_OWORD *)v12 + 3) = 0u;
        v12[3] = &off_1E2D9B4D8;
        *((_DWORD *)v12 + 12) = 1065353216;
        v12[7] = 0x1FFFFFFFFLL;
        v12[12] = 0;
        v12[13] = 0;
        v12[8] = 0;
        v12[9] = 0;
        *((_BYTE *)v12 + 88) = 0;
        v12[10] = 0;
        *(_QWORD *)&v19 = v12 + 3;
        *((_QWORD *)&v19 + 1) = v12;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a4, &v19);
        v13 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
        if (*((_QWORD *)&v19 + 1))
        {
          v14 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*a4 + 72), v20[28], v20[29]);
        v16 = v21;
        if (v21)
        {
          v17 = (unint64_t *)&v21->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
  }
}

void sub_1918C25E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::inner_product_weights_grad_kernel::top_shapes_for_bottom_shapes(int32x2_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v6;
  unint64_t v7;
  uint64_t v8;
  __int32 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD v20[5];

  Espresso::generic_inner_product_weights_grad_kernel::top_shapes_for_bottom_shapes(a1, a3);
  if (a1[59].i8[0])
  {
    v6 = (__int128 *)(*a2 + 64);
    v7 = a3[1];
    if (v7 >= a3[2])
    {
      v8 = std::vector<Espresso::layer_shape>::__push_back_slow_path<Espresso::layer_shape const&>(a3, v6);
    }
    else
    {
      std::vector<Espresso::layer_shape>::__construct_one_at_end[abi:ne180100]<Espresso::layer_shape const&>((uint64_t)a3, v6);
      v8 = v7 + 64;
    }
    a3[1] = v8;
  }
  if (a1[59].i8[1])
  {
    v9 = a1[38].i32[0];
    v10 = a3[2];
    v11 = a3[1];
    if (v11 >= v10)
    {
      v13 = (uint64_t)(v11 - *a3) >> 6;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v15 = v10 - *a3;
      if (v15 >> 5 > v14)
        v14 = v15 >> 5;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFC0)
        v16 = 0x3FFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      v20[4] = a3 + 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::layer_shape>>(v16);
      v18 = &v17[64 * v13];
      v20[0] = v17;
      v20[1] = v18;
      v20[3] = &v17[64 * v19];
      *(_QWORD *)v18 = 0x100000001;
      *((_DWORD *)v18 + 2) = v9;
      *(_QWORD *)(v18 + 12) = 0x100000001;
      *((_DWORD *)v18 + 5) = -1;
      *(_OWORD *)(v18 + 24) = 0u;
      *(_OWORD *)(v18 + 40) = 0u;
      *((_QWORD *)v18 + 7) = 0;
      v20[2] = v18 + 64;
      std::vector<Espresso::layer_shape>::__swap_out_circular_buffer(a3, v20);
      v12 = a3[1];
      std::__split_buffer<Espresso::layer_shape>::~__split_buffer((uint64_t)v20);
    }
    else
    {
      *(_QWORD *)v11 = 0x100000001;
      *(_DWORD *)(v11 + 8) = v9;
      *(_QWORD *)(v11 + 12) = 0x100000001;
      *(_DWORD *)(v11 + 20) = -1;
      v12 = v11 + 64;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_OWORD *)(v11 + 40) = 0u;
      *(_QWORD *)(v11 + 56) = 0;
      a3[1] = v11 + 64;
    }
    a3[1] = v12;
  }
}

void sub_1918C2770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::elementwise_grad_kernel::~elementwise_grad_kernel(Espresso::MPSEngine::elementwise_grad_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSEngine::elementwise_grad_kernel::__launch()
{
  return puts("TODO: impl elementwise_grad_kernel::__launch");
}

void Espresso::MPSEngine::bias_grad_kernel::~bias_grad_kernel(id *this)
{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  void **v2;

  *this = off_1E2D9DD68;
  v2 = this + 35;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSEngine::bias_grad_kernel::__launch(uint64_t a1, uint64_t a2, const void ***a3, const void ***a4)
{
  const void **v7;
  const void *v8;
  id *v9;
  id *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  const void **v14;
  const void *v15;
  id *v16;
  id *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  const void *v26;
  id *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::runtime_error *exception;
  id *v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  id *v49;
  std::__shared_weak_count *v50;
  id *v51;
  std::__shared_weak_count *v52;

  v7 = *a3;
  v8 = **a3;
  if (v8
  {
    v10 = v9;
    v11 = (std::__shared_weak_count *)v7[1];
    v51 = v9;
    v52 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v51 = 0;
    v52 = 0;
  }
  v14 = *a4;
  v15 = **a4;
  if (v15
  {
    v17 = v16;
    v18 = (std::__shared_weak_count *)v14[1];
    v49 = v16;
    v50 = v18;
    if (v18)
    {
      v19 = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
    }
  }
  else
  {
    v17 = 0;
    v49 = 0;
    v50 = 0;
  }
  if (*(_QWORD *)a2
  {
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    v47 = v21;
    v48 = v22;
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
  }
  else
  {
    v21 = 0;
    v47 = 0;
    v48 = 0;
  }
  v25 = *(void **)(a1 + 312);
  if (!v25)
  {
    if (*(_QWORD *)(a1 + 320))
    {
      v25 = 0;
    }
    else
    {
      v26 = *(const void **)(a1 + 8);
      if (!v26
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
        exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
      }
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v46 = v27;
      if (v28)
      {
        v29 = (unint64_t *)&v28->__shared_owners_;
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
        v31 = v27[18];
        do
          v32 = __ldaxr(v29);
        while (__stlxr(v32 - 1, v29));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      else
      {
        v31 = v27[18];
      }
      v33 = objc_msgSend(objc_alloc(MEMORY[0x1E0CC6C98]), "initWithDevice:isSecondarySourceFilter:", v31, 1, v46, v28);
      v34 = *(void **)(a1 + 312);
      *(_QWORD *)(a1 + 312) = v33;

      objc_msgSend(*(id *)(a1 + 312), "setSecondaryStrideInPixelsX:", 0);
      objc_msgSend(*(id *)(a1 + 312), "setSecondaryStrideInPixelsY:", 0);

      v25 = *(void **)(a1 + 312);
      v21 = v47;
      v17 = v49;
      v10 = v51;
    }
  }
  v35 = v21[18];
  v36 = v17[30];
  v37 = v17[30];
  v38 = v10[30];
  objc_msgSend(v25, "encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:", v35, v36, v37, v38);

  if (v48)
  {
    v39 = (unint64_t *)&v48->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v50)
  {
    v41 = (unint64_t *)&v50->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v52)
  {
    v43 = (unint64_t *)&v52->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1918C2C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t e5_compile_internal(int a1, const char **a2)
{
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;
  _BYTE v8[408];
  _QWORD v9[20];

  v9[19] = *MEMORY[0x1E0C80C00];
  Espresso::AOT::AOTCompilerDriver::AOTCompilerDriver((Espresso::AOT::AOTCompilerDriver *)v6);
  std::ofstream::basic_ofstream(&v7);
  if (*(_DWORD *)&v8[*(_QWORD *)(v7 - 24) + 24])
    v4 = 1;
  else
    v4 = Espresso::AOT::AOTCompilerDriver::Run(v6, a1, a2, &v7);
  v7 = *MEMORY[0x1E0DE4F48];
  *(_QWORD *)&v8[*(_QWORD *)(v7 - 24) - 8] = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 24);
  MEMORY[0x19401C8BC](v8);
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v9);
  Espresso::AOT::AOTCompilerDriver::~AOTCompilerDriver((Espresso::AOT::AOTCompilerDriver *)v6);
  return v4;
}

void sub_1918C2D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2)
  {
    std::ofstream::~ofstream(&a15);
    Espresso::AOT::AOTCompilerDriver::~AOTCompilerDriver((Espresso::AOT::AOTCompilerDriver *)&a10);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1918C2D30);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::BNNSEngine::convolution_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  __n128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  vImagePixelCount v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *height;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  _BOOL4 v71;
  _DWORD *v72;
  uint64_t v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  float v89;
  float *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  _BOOL4 v110;
  uint64_t v111;
  uint64_t v112;
  int v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  int v119;
  uint64_t v120;
  const char *v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v145;
  int v146;
  _QWORD *data;
  int v148;
  int v149;
  int i;
  __int128 v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  int v159;
  int *v160;
  int v161;
  int v162;
  int j;
  __int128 v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  _DWORD *v169;
  __int128 *v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  int v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  int v181;
  void *v182;
  int v183;
  _DWORD *v184;
  int v185;
  int v186;
  const void *v187;
  void *v188;
  _DWORD *v189;
  uint64_t v190;
  int v191;
  int v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  int v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  _WORD *v204;
  uint64_t v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float *v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  float *v214;
  uint64_t v215;
  uint64_t k;
  int *v217;
  _WORD *v218;
  uint64_t v219;
  int v220;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  _DWORD *v228;
  char *v229;
  __int128 v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  _QWORD *v236;
  std::__shared_weak_count *v237;
  uint64_t v238;
  unint64_t *v239;
  unint64_t v240;
  unsigned __int8 *v241;
  BOOL v242;
  int v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  BOOL v247;
  int v248;
  unint64_t *v249;
  unint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  unint64_t *v253;
  vImagePixelCount v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  vImagePixelCount v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  vDSP_Length v270;
  uint64_t v271;
  int v272;
  uint64_t v273;
  int v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  int v279;
  uint64_t v280;
  int v281;
  uint64_t v282;
  float *v283;
  float *v284;
  float v285;
  float v286;
  float v287;
  float v288;
  int v289;
  float v290;
  int v291;
  vDSP_Length m;
  uint64_t v293;
  vDSP_Length v294;
  uint64_t v295;
  float v296;
  unint64_t *v297;
  unint64_t v298;
  unint64_t *v299;
  unint64_t v300;
  NSObject *v301;
  int v302;
  unint64_t *v303;
  unint64_t v304;
  uint64_t v305;
  uint64_t v306;
  float *v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t *v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  std::__shared_weak_count *v340;
  unint64_t *v341;
  unint64_t v342;
  unint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  unint64_t *v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  const char *v354;
  std::runtime_error *exception;
  const char *v356;
  const char *v357;
  const char *v358;
  const char *v359;
  const char *v360;
  const char *v361;
  unint64_t *v362;
  uint64_t v363;
  _BOOL4 v364;
  int v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  char **v369;
  _DWORD *v370;
  uint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  unint64_t v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  _QWORD v383[2];
  __int128 v384;
  uint64_t v385;
  std::__shared_weak_count *v386;
  __int128 v387;
  uint64_t v388;
  std::__shared_weak_count *v389;
  void *v390;
  vImagePixelCount v391;
  __int128 v392;
  char v393[8];
  uint64_t *v394;
  uint64_t *v395;
  uint64_t *v396;
  _QWORD *v397;
  _DWORD *v398;
  std::__shared_weak_count *v399;
  uint64_t v400;
  std::__shared_weak_count *v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  vImage_Buffer dest;
  vImage_Buffer src;

  v8 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v8 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v400 = 0;
    v401 = 0;
  }
  else
  {
    v51 = *(std::__shared_weak_count **)(*v8 + 168);
    v400 = *(_QWORD *)(*v8 + 160);
    v401 = v51;
    if (v51)
    {
      p_shared_owners = (unint64_t *)&v51->__shared_owners_;
      do
        v53 = __ldxr(p_shared_owners);
      while (__stxr(v53 + 1, p_shared_owners));
    }
  }
  v9 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v9 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v398 = 0;
    v399 = 0;
  }
  else
  {
    v10 = *(_DWORD **)(*v9 + 160);
    v54 = *(std::__shared_weak_count **)(*v9 + 168);
    v398 = v10;
    v399 = v54;
    if (v54)
    {
      v55 = (unint64_t *)&v54->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
  }
  v393[0] = 0;
  v394 = a3;
  v395 = a4;
  v396 = &v400;
  v397 = &v398;
  v11 = (_QWORD *)*a4;
  v12 = *(_QWORD *)*a4;
  if (*(_DWORD *)(v12 + 28) == 3)
  {
    v13 = *(_QWORD *)*a3;
    if (*(_DWORD *)(v13 + 28) == 3)
    {
      if (*(_BYTE *)(a1 + 744))
      {
        *(_DWORD *)(v13 + 28) = 4;
        *(_QWORD *)(v13 + 16) = *(_QWORD *)(v13 + 12);
        *(_DWORD *)(v13 + 12) = 1;
        *(_DWORD *)(v12 + 28) = 4;
        *(_QWORD *)(v12 + 16) = *(_QWORD *)(v12 + 12);
        *(_DWORD *)(v12 + 12) = 1;
        v10[2] = *(_DWORD *)(v12 + 8);
        v10[3] = *(_DWORD *)(v12 + 12);
        v10[4] = *(_DWORD *)(v12 + 16);
        v10[5] = *(_DWORD *)(v12 + 20);
        v14 = (_DWORD *)v400;
        *(_DWORD *)(v400 + 8) = *(_DWORD *)(v13 + 8);
        v14[3] = *(_DWORD *)(v13 + 12);
        v14[4] = *(_DWORD *)(v13 + 16);
        v14[5] = *(_DWORD *)(v13 + 20);
        v393[0] = 1;
      }
    }
  }
  v15 = *(_QWORD *)(a1 + 576);
  if (v15)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v15 + 16))(v15, a2, a3, a4);
    goto LABEL_15;
  }
  v23 = *(_QWORD *)(a1 + 640);
  *(_QWORD *)&v392 = *(_QWORD *)(a1 + 632);
  *((_QWORD *)&v392 + 1) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v11 = (_QWORD *)*a4;
  }
  v26 = a4[1];
  if ((unint64_t)(v26 - (_QWORD)v11) >= 0x11)
  {
    v27 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v26, 1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v392, v27[20], v27[21]);
  }
  v28 = *(std::__shared_weak_count **)(a1 + 624);
  v390 = *(void **)(a1 + 616);
  v391 = (vImagePixelCount)v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = a4[1];
  if ((unint64_t)(v31 - *a4) >= 0x21)
  {
    v32 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v31, 2);
    v34 = v32[20];
    v33 = v32[21];
    src.data = (void *)v34;
    src.height = v33;
    if (v33)
    {
      v35 = (unint64_t *)(v33 + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = 0;
    v38 = *(_DWORD *)(v34 + 8);
    do
    {
      v38 *= *(_DWORD *)(v34 + 12 + v37);
      v37 += 4;
    }
    while (v37 != 12);
    v39 = (char *)operator new(0x58uLL);
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    *(_QWORD *)v39 = &off_1E2DBEC00;
    v40 = *(_QWORD *)(v34 + 24);
    *((_QWORD *)v39 + 3) = &off_1E2DA1190;
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *((_DWORD *)v39 + 8) = v38;
    *((_QWORD *)v39 + 5) = v40;
    v39[48] = 0;
    v390 = v39 + 24;
    v391 = (vImagePixelCount)v39;
    if (v28)
    {
      v41 = (unint64_t *)&v28->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    height = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v44 = (unint64_t *)(src.height + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
  }
  v46 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v46)
  {
    v48 = v46[22];
    v47 = (std::__shared_weak_count *)v46[23];
    v388 = v48;
    v389 = v47;
    if (v47)
    {
      v49 = (unint64_t *)&v47->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
  }
  else
  {
    v48 = 0;
    v388 = 0;
    v389 = 0;
  }
  v57 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v57)
  {
    v59 = v57[22];
    v58 = v57[23];
    *(_QWORD *)&v387 = v59;
    *((_QWORD *)&v387 + 1) = v58;
    if (v58)
    {
      v60 = (unint64_t *)(v58 + 8);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
  }
  else
  {
    v59 = 0;
    v387 = 0uLL;
  }
  v62 = (_QWORD *)*a3;
  if (a3[1] != *a3 && *v62 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v62 + 32))(*v62) == 3)
  {
    v63 = *v62;
    v65 = *(_QWORD *)(*v62 + 208);
    v64 = *(std::__shared_weak_count **)(v63 + 216);
    v385 = v65;
    v386 = v64;
    if (v64)
    {
      v66 = (unint64_t *)&v64->__shared_owners_;
      do
        v67 = __ldxr(v66);
      while (__stxr(v67 + 1, v66));
    }
  }
  else
  {
    v65 = 0;
    v385 = 0;
    v386 = 0;
  }
  if (a4[1] == *a4)
  {
    v384 = 0uLL;
    if (v48)
    {
LABEL_81:
      if (v59 && *(_DWORD *)(*(_QWORD *)(a1 + 8) + 116))
        *(_DWORD *)(a1 + 448) = 1;
      v68 = v400;
      goto LABEL_89;
    }
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v384, (uint64_t *)*a4);
    if (v48)
      goto LABEL_81;
  }
  v68 = v400;
  if (!v400)
  {
    if (!v65)
    {
      v354 = "Null output blobs";
LABEL_504:
      Espresso::throw_exception_selector<Espresso::invalid_state_error>(v354);
    }
    v68 = 0;
  }
LABEL_89:
  v370 = (_DWORD *)a1;
  if (!v398 && !v59 && !(_QWORD)v384)
  {
    v354 = "Null input blobs";
    goto LABEL_504;
  }
  if (v48)
    v69 = v48;
  else
    v69 = v65;
  if (!v68)
    v68 = v69;
  v70 = *(int *)(v68 + 20);
  v71 = (unint64_t)(a4[1] - *a4) > 0x10;
  v72 = v370;
  v373 = v370 + 2;
  v73 = v392;
  if (!(_QWORD)v392)
  {
    if (*((_QWORD *)v370 + 63) && *((_QWORD *)v370 + 65))
    {
      (*(void (**)(vImage_Buffer *__return_ptr))(*(_QWORD *)v370 + 472))(&src);
      v74 = *(_OWORD *)&src.data;
      src.data = 0;
      src.height = 0;
      v75 = (std::__shared_weak_count *)*((_QWORD *)&v392 + 1);
      v392 = v74;
      if (v75)
      {
        v76 = (unint64_t *)&v75->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v79 = (unint64_t *)(src.height + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v370[86];
      v73 = v392;
      if ((int)v81 >= 1)
      {
        v82 = 0;
        v83 = 0;
        v84 = 0;
        v85 = *(int *)(v392 + 12) * (uint64_t)*(int *)(v392 + 8) * *(int *)(v392 + 16);
        v86 = *(_QWORD *)(*((_QWORD *)v370 + 63) + 16);
        v87 = (*(_DWORD *)(v392 + 12) * *(_DWORD *)(v392 + 8) * *(_DWORD *)(v392 + 16));
        do
        {
          if ((int)v87 >= 1)
          {
            v88 = *(float *)(v86 + 4 * v84);
            v89 = *(float *)(v86 + 4 * (v84 + v81)) - v88;
            v90 = (float *)(*(_QWORD *)(v73 + 24) + v83);
            v91 = (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v370 + 65) + 24) + v82);
            v92 = v87;
            do
            {
              v93 = *v91++;
              *v90++ = v88 + (float)((float)((float)v93 * 0.0039216) * v89);
              --v92;
            }
            while (v92);
          }
          ++v84;
          v83 += 4 * v85;
          v82 += v85;
        }
        while (v84 != v81);
      }
      v365 = 0;
      v71 = 1;
      if (v73)
        goto LABEL_132;
      goto LABEL_138;
    }
    if (*((_QWORD *)v370 + 81))
    {
LABEL_137:
      v365 = 0;
      goto LABEL_138;
    }
LABEL_121:
    v94 = (uint64_t)(v72 + 162);
    if (*((_QWORD *)v72 + 79)
      || *(_DWORD *)(*((_QWORD *)v370 + 1) + 76)
      || (v95 = (_QWORD *)*((_QWORD *)v370 + 59)) == 0
      || !*v95
      || !v95[4] && !v95[6] && !v95[8] && !v95[10]
      || *((_QWORD *)v370 + 83) != *((_QWORD *)v370 + 84))
    {
      if ((_QWORD)v392)
        goto LABEL_131;
      if (!*((_QWORD *)v370 + 65))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Conv weights not set");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      goto LABEL_137;
    }
    (*(void (**)(vImage_Buffer *__return_ptr, _DWORD *))(*(_QWORD *)v370 + 616))(&src, v370);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v94, (__int128 *)&src);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&src);
    v345 = *((_QWORD *)v370 + 59);
    v346 = *((_QWORD *)v370 + 82);
    v383[0] = *((_QWORD *)v370 + 81);
    v383[1] = v346;
    if (v346)
    {
      v347 = (unint64_t *)(v346 + 8);
      do
        v348 = __ldxr(v347);
      while (__stxr(v348 + 1, v347));
    }
    Espresso::quantized_weights_helper::dequantize_to_float16_4d(v345);
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v383);
    v365 = 1;
    v73 = v392;
    if ((_QWORD)v392)
      goto LABEL_132;
LABEL_138:
    v73 = 0;
    v381 = 0;
    v382 = 0;
    goto LABEL_139;
  }
  if (!*((_QWORD *)v370 + 81))
  {
    v72 = v370;
    goto LABEL_121;
  }
LABEL_131:
  v365 = 0;
LABEL_132:
  v381 = v73;
  v382 = (std::__shared_weak_count *)*((_QWORD *)&v392 + 1);
  if (*((_QWORD *)&v392 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v392 + 1) + 8);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
LABEL_139:
  v98 = *((_QWORD *)v370 + 81);
  if (v98)
  {
    v99 = (std::__shared_weak_count *)*((_QWORD *)v370 + 82);
    v379 = *((_QWORD *)v370 + 81);
    v380 = v99;
    v100 = v98;
    if (v99)
    {
      v101 = (unint64_t *)&v99->__shared_owners_;
      do
        v102 = __ldxr(v101);
      while (__stxr(v102 + 1, v101));
      v100 = v98;
    }
  }
  else
  {
    v100 = 0;
    v379 = 0;
    v380 = 0;
  }
  v103 = *((_QWORD *)v370 + 65);
  if (v103)
  {
    v104 = (std::__shared_weak_count *)*((_QWORD *)v370 + 66);
    v377 = *((_QWORD *)v370 + 65);
    v378 = v104;
    v105 = v103;
    if (v104)
    {
      v106 = (unint64_t *)&v104->__shared_owners_;
      do
        v107 = __ldxr(v106);
      while (__stxr(v107 + 1, v106));
      v105 = v103;
    }
  }
  else
  {
    v105 = 0;
    v377 = 0;
    v378 = 0;
  }
  v364 = v71;
  v108 = *(_QWORD *)*a4;
  v109 = *(_DWORD *)(v108 + 8);
  v371 = a2;
  if (v73 && *(_QWORD *)(v73 + 24) != *((_QWORD *)v370 + 86))
  {
    v110 = 1;
    goto LABEL_165;
  }
  if (v98)
  {
    v111 = *(_QWORD *)(v98 + 24);
    v112 = *((_QWORD *)v370 + 86);
    _ZF = v111 == v112;
    v110 = v111 != v112;
    _ZF = !_ZF || v103 == 0;
    if (!_ZF)
      goto LABEL_163;
  }
  else
  {
    if (v103)
    {
      v111 = *((_QWORD *)v370 + 86);
LABEL_163:
      v110 = *(_QWORD *)(v103 + 24) != v111;
      goto LABEL_165;
    }
    v110 = 0;
  }
LABEL_165:
  v114 = *(_DWORD *)(v108 + 12);
  if (v109 != v370[148])
    goto LABEL_169;
  if (v114 != v370[149])
    v110 = 1;
  if (v110)
  {
LABEL_169:
    Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters((void ***)v370 + 83);
    v370[148] = v109;
    v370[149] = v114;
    if (v100)
      v115 = v100;
    else
      v115 = v73;
    if (v105)
      v115 = v105;
    *((_QWORD *)v370 + 86) = *(_QWORD *)(v115 + 24);
  }
  v116 = *(_QWORD *)*a3;
  v117 = *(_DWORD *)(v116 + 8);
  v118 = *(_DWORD *)(v116 + 12);
  v119 = *((__int16 *)v370 + 200);
  v120 = v370[88];
  v121 = (const char *)*((__int16 *)v370 + 201);
  v122 = v370[89];
  v123 = *((__int16 *)v370 + 198);
  v124 = *((__int16 *)v370 + 199);
  v125 = *((__int16 *)v370 + 192);
  v126 = *((__int16 *)v370 + 193);
  v374 = __PAIR64__(v126, v125);
  v127 = *((__int16 *)v370 + 194);
  v128 = *((__int16 *)v370 + 195);
  v375 = __PAIR64__(v128, v127);
  v129 = *((__int16 *)v370 + 196);
  v130 = *((__int16 *)v370 + 197);
  v376 = __PAIR64__(v129, v130);
  v131 = *((__int16 *)v370 + 188);
  switch(v131)
  {
    case 4:
      goto LABEL_178;
    case 2:
      v374 = 0;
      v375 = 0;
      v376 = 0;
      goto LABEL_249;
    case 1:
LABEL_178:
      v129 = 0;
      v130 = 0;
      v132 = (v122 - 1) * (_DWORD)v121 - v114 + (v118 - 1) * v124 + 1;
      v133 = (v120 - 1) * v119 - v109 + (v117 - 1) * v123 + 1;
      v134 = v132 & ~(v132 >> 31);
      v135 = v133 & ~(v133 >> 31);
      v136 = v135 >> 1;
      v137 = v135 - (v135 >> 1);
      v138 = v134 >> 1;
      v139 = v134 - (v134 >> 1);
      if (*((_WORD *)v370 + 188) == 1)
        v125 = v136;
      else
        v125 = v137;
      if (*((_WORD *)v370 + 188) == 1)
        v126 = v137;
      else
        v126 = v136;
      v140 = 12;
      if (*((_WORD *)v370 + 188) == 1)
        v141 = 8;
      else
        v141 = 12;
      if (*((_WORD *)v370 + 188) != 1)
        v140 = 8;
      *(_DWORD *)((char *)&v374 + v141) = v138;
      *(_DWORD *)((char *)&v374 + v140) = v139;
      if ((unsigned __int16)v131 == 1)
        v142 = 20;
      else
        v142 = 16;
      if ((unsigned __int16)v131 == 1)
        v120 = 16;
      else
        v120 = 20;
      if ((unsigned __int16)v131 == 1)
        v128 = v139;
      else
        v128 = v138;
      if ((unsigned __int16)v131 == 1)
        v127 = v138;
      else
        v127 = v139;
      v374 = __PAIR64__(v126, v125);
      *(_DWORD *)((char *)&v374 + v142) = 0;
      *(_DWORD *)((char *)&v374 + v120) = 0;
      break;
  }
  if (v125 != v126 || v127 != v128 || v130 != v129)
  {
    v145 = v387;
    if ((_QWORD)v387)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&src, v126 + v125 + *(_DWORD *)(v387 + 8), v127 + *(_DWORD *)(v387 + 12) + v128, *(_DWORD *)(v387 + 16), *(_DWORD *)(v387 + 20));
      if (*(int *)(v145 + 20) >= 1)
      {
        v146 = 0;
        data = src.data;
        do
        {
          if (*(int *)(v145 + 16) >= 1)
          {
            v148 = 0;
            do
            {
              v149 = *(_DWORD *)(v145 + 12);
              if (v149 >= 1)
              {
                for (i = 0; i < v149; ++i)
                {
                  v120 = (uint64_t)memcpy((void *)(data[3]+ 2* *((_DWORD *)data + 3)* *((_DWORD *)data + 2)* v146* *((_DWORD *)data + 4)+ 2 * *((_DWORD *)data + 3) * *((_DWORD *)data + 2) * v148+ 2 * (i + (int)v375) * *((_DWORD *)data + 2)+ 2 * (int)v374), (const void *)(*(_QWORD *)(v145 + 24)+ 2 * *(_DWORD *)(v145 + 8) * v149 * v146 * *(_DWORD *)(v145 + 16)+ 2 * *(_DWORD *)(v145 + 8) * v149 * v148+ 2 * *(_DWORD *)(v145 + 8) * i), 2 * *(int *)(v145 + 8));
                  v149 = *(_DWORD *)(v145 + 12);
                }
              }
              ++v148;
            }
            while (v148 < *(_DWORD *)(v145 + 16));
          }
          ++v146;
        }
        while (v146 < *(_DWORD *)(v145 + 20));
      }
      v151 = *(_OWORD *)&src.data;
      src.data = 0;
      src.height = 0;
      v152 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
      v387 = v151;
      if (v152)
      {
        v153 = (unint64_t *)&v152->__shared_owners_;
        do
          v154 = __ldaxr(v153);
        while (__stlxr(v154 - 1, v153));
        if (!v154)
        {
          ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
          std::__shared_weak_count::__release_weak(v152);
        }
      }
      v155 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v156 = (unint64_t *)(src.height + 8);
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 - 1, v156));
        goto LABEL_247;
      }
    }
    else
    {
      v158 = v384;
      if ((_QWORD)v384)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,4>,std::allocator<Espresso::blob<unsigned char,4>>,int &,int &,int &,int &,void>(&src, v125 + *(_DWORD *)(v384 + 8) + v126, v375 + HIDWORD(v375) + *(_DWORD *)(v384 + 12), *(_DWORD *)(v384 + 16), *(_DWORD *)(v384 + 20));
        if (*(int *)(v158 + 20) >= 1)
        {
          v159 = 0;
          v160 = (int *)src.data;
          do
          {
            if (*(int *)(v158 + 16) >= 1)
            {
              v161 = 0;
              do
              {
                v162 = *(_DWORD *)(v158 + 12);
                if (v162 >= 1)
                {
                  for (j = 0; j < v162; ++j)
                  {
                    v120 = (uint64_t)memcpy((void *)(*((_QWORD *)v160 + 3)+ v160[4] * (uint64_t)(v160[3] * v160[2] * v159)+ v160[3] * v160[2] * v161+ (j + (int)v375) * v160[2]+ (int)v374), (const void *)(*(_QWORD *)(v158 + 24)+ *(int *)(v158 + 16)* (uint64_t)(v162 * v159 * *(_DWORD *)(v158 + 8))+ v162 * v161 * *(_DWORD *)(v158 + 8)+ *(_DWORD *)(v158 + 8) * j), *(int *)(v158 + 8));
                    v162 = *(_DWORD *)(v158 + 12);
                  }
                }
                ++v161;
              }
              while (v161 < *(_DWORD *)(v158 + 16));
            }
            ++v159;
          }
          while (v159 < *(_DWORD *)(v158 + 20));
        }
        v164 = *(_OWORD *)&src.data;
        src.data = 0;
        src.height = 0;
        v165 = (std::__shared_weak_count *)*((_QWORD *)&v384 + 1);
        v384 = v164;
        if (v165)
        {
          v166 = (unint64_t *)&v165->__shared_owners_;
          do
            v167 = __ldaxr(v166);
          while (__stlxr(v167 - 1, v166));
          if (!v167)
          {
            ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
            std::__shared_weak_count::__release_weak(v165);
          }
        }
        v155 = (std::__shared_weak_count *)src.height;
        if (src.height)
        {
          v168 = (unint64_t *)(src.height + 8);
          do
            v157 = __ldaxr(v168);
          while (__stlxr(v157 - 1, v168));
LABEL_247:
          if (!v157)
          {
            ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
            std::__shared_weak_count::__release_weak(v155);
          }
        }
      }
    }
  }
LABEL_249:
  v169 = v370;
  v170 = (__int128 *)(v370 + 76);
  v369 = (char **)(v370 + 166);
  if (*((_QWORD *)v370 + 84) != *((_QWORD *)v370 + 83))
    goto LABEL_250;
  std::vector<void *>::resize(v369, 1uLL);
  std::string::basic_string[abi:ne180100]<0>(&src, "bnns_auto_sparse");
  v241 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)v370 + 30, (unsigned __int8 *)&src);
  if (SHIBYTE(src.width) < 0)
    operator delete(src.data);
  if (v398)
    v242 = v400 == 0;
  else
    v242 = 1;
  v243 = !v242;
  if (!v242 && v381)
  {
    if (v390)
    {
      v244 = (std::__shared_weak_count *)v391;
      src.data = v390;
      src.height = v391;
      if (v391)
      {
        v245 = (unint64_t *)(v391 + 8);
        do
          v246 = __ldxr(v245);
        while (__stxr(v246 + 1, v245));
      }
    }
    else
    {
      v244 = 0;
      src.data = 0;
      src.height = 0;
    }
    v169 = v370;
    Espresso::BNNSEngine::convolution_kernel::create_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>((uint64_t)v170, (uint64_t)&v398, (uint64_t)&v400, (uint64_t)&v381, (uint64_t)&src, &v374, (uint64_t)v369, *((_QWORD *)v370 + 75), v241 != 0);
    if (v244)
    {
      v299 = (unint64_t *)&v244->__shared_owners_;
      do
        v300 = __ldaxr(v299);
      while (__stlxr(v300 - 1, v299));
      goto LABEL_530;
    }
    goto LABEL_250;
  }
  if ((_QWORD)v387)
    v247 = v388 == 0;
  else
    v247 = 1;
  v248 = !v247;
  if (v247 || !v379)
  {
    if (!v379)
      v243 = 0;
    if (v243 == 1)
    {
      v169 = v370;
      if (v390)
      {
        src.data = v390;
        src.height = v391;
        if (v391)
        {
          v297 = (unint64_t *)(v391 + 8);
          do
            v298 = __ldxr(v297);
          while (__stxr(v298 + 1, v297));
        }
      }
      else
      {
        src.data = 0;
        src.height = 0;
      }
      create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<unsigned short,4>>((uint64_t)v170, (uint64_t)&v398, &v400, (uint64_t)&v379, (uint64_t)&src, &v374, (uint64_t)v369, *((_QWORD *)v370 + 75));
    }
    else
    {
      if (v381)
        v302 = v248;
      else
        v302 = 0;
      v169 = v370;
      if (v302 != 1)
      {
        if ((_QWORD)v384)
        {
          if (v400 && v377)
          {
            if (v390)
            {
              src.data = v390;
              src.height = v391;
              if (v391)
              {
                v343 = (unint64_t *)(v391 + 8);
                do
                  v344 = __ldxr(v343);
                while (__stxr(v344 + 1, v343));
              }
            }
            else
            {
              src.data = 0;
              src.height = 0;
            }
            create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,Espresso::blob<unsigned char,4>>((uint64_t)v170, (uint64_t)&v384, &v400, (uint64_t)&v377, (uint64_t)&src, &v374, (uint64_t)v369, *((_QWORD *)v370 + 75));
            goto LABEL_495;
          }
          if (v385 && v377)
          {
            if (v390)
            {
              v349 = (std::__shared_weak_count *)v391;
              src.data = v390;
              src.height = v391;
              if (v391)
              {
                v350 = (unint64_t *)(v391 + 8);
                do
                  v351 = __ldxr(v350);
                while (__stxr(v351 + 1, v350));
              }
            }
            else
            {
              v349 = 0;
              src.data = 0;
              src.height = 0;
            }
            create_azden_conv_bnns_filter<Espresso::blob<int,4>,Espresso::blob<unsigned char,4>,Espresso::blob<unsigned char,4>>((uint64_t)v170, (uint64_t)&v384, &v385, (uint64_t)&v377, (uint64_t)&src, &v374, (uint64_t)v369, *((_QWORD *)v370 + 75));
            if (v349)
            {
              v352 = (unint64_t *)&v349->__shared_owners_;
              do
                v353 = __ldaxr(v352);
              while (__stlxr(v353 - 1, v352));
              if (!v353)
              {
                ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
                std::__shared_weak_count::__release_weak(v349);
              }
            }
            v169 = v370;
            goto LABEL_250;
          }
        }
        if (v388)
          v356 = "fp16";
        else
          v356 = "int8";
        if (v400)
          v357 = "fp32";
        else
          v357 = v356;
        if ((_QWORD)v387)
          v358 = "fp16";
        else
          v358 = "int8";
        if (v398)
          v359 = "fp32";
        else
          v359 = v358;
        if (v379)
          v360 = "fp16";
        else
          v360 = "int8";
        if (v381)
          v361 = "fp32";
        else
          v361 = v360;
        Espresso::throw_exception_selector<Espresso::not_implemented_error,char const*&,char const*&,char const*&>(v359, v357, v361);
      }
      if (v390)
      {
        src.data = v390;
        src.height = v391;
        if (v391)
        {
          v303 = (unint64_t *)(v391 + 8);
          do
            v304 = __ldxr(v303);
          while (__stxr(v304 + 1, v303));
        }
      }
      else
      {
        src.data = 0;
        src.height = 0;
      }
      create_azden_conv_bnns_filter<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>,Espresso::blob<float,4>>((uint64_t)v170, (uint64_t)&v387, &v388, (uint64_t)&v381, (uint64_t)&src, &v374, (uint64_t)v369, *((_QWORD *)v370 + 75));
    }
LABEL_495:
    v120 = std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&src);
    goto LABEL_250;
  }
  if (v390)
  {
    v244 = (std::__shared_weak_count *)v391;
    src.data = v390;
    src.height = v391;
    if (v391)
    {
      v249 = (unint64_t *)(v391 + 8);
      do
        v250 = __ldxr(v249);
      while (__stxr(v250 + 1, v249));
    }
  }
  else
  {
    v244 = 0;
    src.data = 0;
    src.height = 0;
  }
  v305 = *((_QWORD *)v370 + 75);
  if (v241)
  {
    create_azden_conv_bnns_filter<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>>((uint64_t)v170, (uint64_t)&v387, &v388, (uint64_t)&v379, (uint64_t)&src, &v374, (uint64_t)v369, v305, 1);
  }
  else
  {
    create_azden_conv_bnns_filter<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>>((uint64_t)v170, (uint64_t)&v387, &v388, (uint64_t)&v379, (uint64_t)&src, &v374, (uint64_t)v369, v305, 0);
    v244 = (std::__shared_weak_count *)src.height;
  }
  v169 = v370;
  if (v244)
  {
    v362 = (unint64_t *)&v244->__shared_owners_;
    do
      v300 = __ldaxr(v362);
    while (__stlxr(v300 - 1, v362));
LABEL_530:
    if (!v300)
    {
      ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
      std::__shared_weak_count::__release_weak(v244);
    }
  }
LABEL_250:
  v363 = (uint64_t)(v169 + 162);
  v171 = *((_QWORD *)v169 + 84) - *((_QWORD *)v169 + 83);
  v172 = v171 >> 3;
  if ((int)(v171 >> 3) >= 1)
  {
    v173 = 0;
    v174 = 0;
    v175 = 0;
    v367 = (uint64_t)(v370 + 144);
    v176 = (v370[87] - 1) / (int)v172 + 1;
    v177 = (v370[86] - 1) / (int)v172 + 1;
    v178 = v171 & 0x7FFFFFFF8;
    while (1)
    {
      v179 = v385;
      if (v385)
        goto LABEL_253;
      v179 = v388;
      if (!v388)
        break;
      v180 = *(_DWORD *)(v388 + 8);
      v181 = *(_DWORD *)(v388 + 12);
      v182 = (void *)(*(_QWORD *)(v388 + 24) + 2 * v173 * v180 * v181);
LABEL_256:
      v183 = v181 * v180;
      v184 = (_DWORD *)v384;
      if ((_QWORD)v384)
      {
        v185 = *(_DWORD *)(v384 + 8);
        v186 = *(_DWORD *)(v384 + 12);
        v187 = (const void *)(*(_QWORD *)(v384 + 24) + v174 * v185 * v186);
      }
      else
      {
        v184 = (_DWORD *)v387;
        if ((_QWORD)v387)
        {
          v185 = *(_DWORD *)(v387 + 8);
          v186 = *(_DWORD *)(v387 + 12);
          v187 = (const void *)(*(_QWORD *)(v387 + 24) + 2 * v174 * v185 * v186);
        }
        else
        {
          v184 = v398;
          v185 = v398[2];
          v186 = v398[3];
          v187 = (const void *)(*((_QWORD *)v398 + 3) + 4 * v174 * v185 * v186);
        }
      }
      v188 = *(void **)&(*v369)[v175];
      if (!v188
        || (v120 = BNNSFilterApplyBatch(v188, v70, v187, (int)v184[4] * (uint64_t)(v186 * v185), v182, *(int *)(v179 + 16) * (uint64_t)v183), (_DWORD)v120 == -1))
      {
        if ((_QWORD)v387)
        {
          v228 = v370;
          v229 = (char *)operator new(0x268uLL);
          *((_QWORD *)v229 + 1) = 0;
          *((_QWORD *)v229 + 2) = 0;
          *(_QWORD *)v229 = &off_1E2DB6F88;
          Espresso::base_kernel::base_kernel((uint64_t)(v229 + 24), v373);
          *((_QWORD *)v229 + 39) = 0;
          *((_QWORD *)v229 + 40) = 0;
          *((_QWORD *)v229 + 38) = v229 + 312;
          Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v229 + 328));
          *((_QWORD *)v229 + 72) = 0;
          *((_OWORD *)v229 + 34) = 0u;
          *((_OWORD *)v229 + 35) = 0u;
          *((_OWORD *)v229 + 32) = 0u;
          *((_OWORD *)v229 + 33) = 0u;
          *((_OWORD *)v229 + 31) = 0u;
          *((_QWORD *)v229 + 3) = &off_1E2D60A48;
          *(_OWORD *)(v229 + 584) = 0u;
          *(_OWORD *)(v229 + 600) = 0u;
          v230 = *((_OWORD *)v370 + 28);
          *(_OWORD *)(v229 + 456) = *((_OWORD *)v370 + 27);
          *(_OWORD *)(v229 + 472) = v230;
          *(_QWORD *)(v231 + 157) = *(_QWORD *)((char *)v370 + 461);
          v232 = *((_OWORD *)v370 + 24);
          *(_OWORD *)(v229 + 392) = *((_OWORD *)v370 + 23);
          *(_OWORD *)(v229 + 408) = v232;
          v233 = *((_OWORD *)v370 + 26);
          *(_OWORD *)(v229 + 424) = *((_OWORD *)v370 + 25);
          *(_OWORD *)(v229 + 440) = v233;
          v234 = *((_OWORD *)v370 + 20);
          *(_OWORD *)(v229 + 328) = *v170;
          *(_OWORD *)(v229 + 344) = v234;
          v235 = *((_OWORD *)v370 + 22);
          *(_OWORD *)(v229 + 360) = *((_OWORD *)v370 + 21);
          *(_OWORD *)(v229 + 376) = v235;
          src.data = v229 + 24;
          src.height = (vImagePixelCount)v229;
          v236 = v370 + 144;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v367, (__int128 *)&src);
          v237 = (std::__shared_weak_count *)src.height;
          v238 = v371;
          if (src.height)
          {
            v239 = (unint64_t *)(src.height + 8);
            do
              v240 = __ldaxr(v239);
            while (__stlxr(v240 - 1, v239));
LABEL_337:
            if (!v240)
            {
              ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
              std::__shared_weak_count::__release_weak(v237);
            }
          }
        }
        else
        {
          v228 = v370;
          v251 = operator new(0x298uLL);
          v251[1] = 0;
          v251[2] = 0;
          *v251 = &off_1E2DBCA50;
          src.data = (void *)Espresso::convolution_kernel_cpu::convolution_kernel_cpu((uint64_t)(v251 + 3), v373, v252, v170);
          src.height = (vImagePixelCount)v251;
          v236 = v370 + 144;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v367, (__int128 *)&src);
          v237 = (std::__shared_weak_count *)src.height;
          v238 = v371;
          if (src.height)
          {
            v253 = (unint64_t *)(src.height + 8);
            do
              v240 = __ldaxr(v253);
            while (__stlxr(v240 - 1, v253));
            goto LABEL_337;
          }
        }
        v254 = *((_QWORD *)v228 + 80);
        src.data = (void *)*((_QWORD *)v228 + 79);
        src.height = v254;
        if (v254)
        {
          v255 = (unint64_t *)(v254 + 8);
          do
            v256 = __ldxr(v255);
          while (__stxr(v256 + 1, v255));
        }
        (*(void (**)(_DWORD *, vImage_Buffer *))(*(_QWORD *)v228 + 400))(v228, &src);
        v257 = (std::__shared_weak_count *)src.height;
        if (src.height)
        {
          v258 = (unint64_t *)(src.height + 8);
          do
            v259 = __ldaxr(v258);
          while (__stlxr(v259 - 1, v258));
          if (!v259)
          {
            ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
            std::__shared_weak_count::__release_weak(v257);
          }
        }
        v260 = *((_QWORD *)v228 + 78);
        dest.data = (void *)*((_QWORD *)v228 + 77);
        dest.height = v260;
        if (v260)
        {
          v261 = (unint64_t *)(v260 + 8);
          do
            v262 = __ldxr(v261);
          while (__stxr(v262 + 1, v261));
        }
        (*(void (**)(_DWORD *, vImage_Buffer *))(*(_QWORD *)v228 + 392))(v228, &dest);
        v263 = (std::__shared_weak_count *)dest.height;
        if (dest.height)
        {
          v264 = (unint64_t *)(dest.height + 8);
          do
            v265 = __ldaxr(v264);
          while (__stlxr(v265 - 1, v264));
          if (!v265)
          {
            ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
            std::__shared_weak_count::__release_weak(v263);
          }
        }
        (*(void (**)(_QWORD, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)*v236 + 16))(*v236, v238, a3, a4);
        Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters((void ***)v369);
        if (v365)
        {
          src.data = 0;
          src.height = 0;
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v363, (__int128 *)&src);
          v266 = (std::__shared_weak_count *)src.height;
          if (src.height)
          {
            v267 = (unint64_t *)(src.height + 8);
            do
              v268 = __ldaxr(v267);
            while (__stlxr(v268 - 1, v267));
            goto LABEL_422;
          }
        }
        goto LABEL_424;
      }
      v175 += 8;
      v174 += v176;
      v173 += v177;
      if (v178 == v175)
        goto LABEL_265;
    }
    v179 = v400;
LABEL_253:
    v180 = *(_DWORD *)(v179 + 8);
    v181 = *(_DWORD *)(v179 + 12);
    v182 = (void *)(*(_QWORD *)(v179 + 24) + 4 * v173 * v180 * v181);
    goto LABEL_256;
  }
LABEL_265:
  v189 = v370;
  if (!v370[104])
    goto LABEL_416;
  v190 = v388;
  if (v388)
  {
    v191 = *(_DWORD *)(v388 + 8);
    v192 = *(_DWORD *)(v388 + 12);
    v372 = v390;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(&v402, v191, v192, 1, 1);
    if (*(int *)(v190 + 20) < 1)
      goto LABEL_296;
    v193 = 0;
    v194 = (v192 * v191);
    LODWORD(v195) = v370[86];
    v366 = v190;
    while (1)
    {
      if ((int)v195 < 1)
        goto LABEL_295;
      v196 = 0;
      v197 = *(_QWORD *)(v190 + 24);
      v198 = *(_DWORD *)(v190 + 8);
      v199 = *(_DWORD *)(v190 + 12);
      v200 = *(_DWORD *)(v190 + 16);
      v201 = v197 + 2 * v198 * v193 * v199 * v200;
      v202 = v402;
      v203 = *(void **)(v402 + 16);
      v368 = v193;
      v204 = (_WORD *)(v197 + 2 * v199 * v200 * v198 * v193);
      do
      {
        src.data = (void *)(v201 + 2 * v196 * (int)v194);
        src.height = 1;
        src.width = (int)v194;
        src.rowBytes = 2 * (int)v194;
        dest.data = v203;
        dest.height = 1;
        dest.width = (int)v194;
        dest.rowBytes = 4 * (int)v194;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        if ((int)v194 >= 1)
        {
          v205 = v372[2];
          v206 = *(float *)(v205 + 4 * (4 * v196));
          v207 = *(float *)(v205 + 4 * ((4 * (_DWORD)v196) | 1u));
          v208 = *(float *)(v205 + 4 * ((4 * (_DWORD)v196) | 2u));
          v209 = 1.0 / *(float *)(v205 + 4 * ((4 * (_DWORD)v196) | 3u));
          v210 = *(float **)(v202 + 16);
          v211 = v194;
          do
          {
            *v210 = v207 + (float)((float)(v209 * (float)(*v210 - v208)) * v206);
            ++v210;
            --v211;
          }
          while (v211);
        }
        v212 = v189[82];
        if (v212 == 1)
        {
          LODWORD(src.data) = 0;
          vDSP_vthr(*(const float **)(v202 + 16), 1, (const float *)&src, *(float **)(v202 + 16), 1, *(int *)(v202 + 12) * (uint64_t)*(int *)(v202 + 8));
        }
        else if (v212 == 2)
        {
          v213 = *(int *)(v202 + 12) * (uint64_t)*(int *)(v202 + 8);
          if (v213)
          {
            v214 = *(float **)(v202 + 16);
            do
            {
              if (*v214 < 0.0)
                *v214 = *v214 * 0.25;
              ++v214;
              --v213;
            }
            while (v213);
          }
        }
        if (!v189[83])
        {
          v203 = *(void **)(v202 + 16);
          if (!(_DWORD)v194)
            goto LABEL_293;
LABEL_291:
          v217 = (int *)v203;
          v218 = v204;
          v219 = (int)v194;
          do
          {
            v220 = *v217++;
            _S0 = v220;
            __asm { FCVT            H0, S0 }
            *v218++ = _S0;
            --v219;
          }
          while (v219);
          goto LABEL_293;
        }
        v215 = *(int *)(v202 + 12) * (uint64_t)*(int *)(v202 + 8);
        v203 = *(void **)(v202 + 16);
        if (v215)
        {
          for (k = 0; k != v215; ++k)
            *((float *)v203 + k) = tanhf(*((float *)v203 + k));
          v189 = v370;
        }
        if ((_DWORD)v194)
          goto LABEL_291;
LABEL_293:
        ++v196;
        v195 = (int)v189[86];
        v204 += (int)v194;
      }
      while (v196 < v195);
      v190 = v366;
      v193 = v368;
LABEL_295:
      if (++v193 >= *(_DWORD *)(v190 + 20))
      {
LABEL_296:
        v225 = v403;
        if (v403)
        {
          v226 = (unint64_t *)&v403->__shared_owners_;
          do
            v227 = __ldaxr(v226);
          while (__stlxr(v227 - 1, v226));
          if (!v227)
          {
            ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
            std::__shared_weak_count::__release_weak(v225);
          }
        }
        goto LABEL_416;
      }
    }
  }
  v269 = v400;
  if (v400)
  {
    v270 = *(int *)(v400 + 8);
    v271 = *(unsigned int *)(v400 + 20);
    if ((int)v271 >= 1)
    {
      v272 = 0;
      v273 = 0;
      v274 = *(_DWORD *)(v400 + 12);
      v275 = v274 * v270;
      v276 = *(_QWORD *)(v400 + 24);
      v277 = v370[86];
      v278 = v390;
      v279 = v274 * *(_DWORD *)(v400 + 16) * v270;
      do
      {
        if ((int)v277 >= 1)
        {
          v280 = 0;
          v281 = 0;
          v282 = v278[2];
          do
          {
            if (v275 >= 1)
            {
              v283 = (float *)(v276 + 4 * v281);
              v284 = (float *)(v282 + 16 * v280);
              v285 = *v284;
              v286 = v284[1];
              v287 = v284[2];
              v288 = v284[3];
              v289 = v275;
              v290 = 1.0 / v288;
              do
              {
                v283[v272] = v286 + (float)((float)(v290 * (float)(*v283 - v287)) * v285);
                ++v283;
                --v289;
              }
              while (v289);
            }
            ++v280;
            v281 += v275;
          }
          while (v280 != v277);
        }
        ++v273;
        v272 += v279;
      }
      while (v273 != v271);
    }
    v291 = v370[82];
    if (v291 == 1)
    {
      v306 = 0;
      LODWORD(src.data) = 0;
      v307 = *(float **)(v269 + 24);
      v308 = v269 + 12;
      do
      {
        v270 *= *(int *)(v308 + v306);
        v306 += 4;
      }
      while (v306 != 12);
      vDSP_vthr(v307, 1, (const float *)&src, v307, 1, v270);
    }
    else if (v291 == 2)
    {
      for (m = 0; ; ++m)
      {
        v293 = 0;
        v294 = v270;
        do
        {
          v294 *= *(int *)(v269 + 12 + v293);
          v293 += 4;
        }
        while (v293 != 12);
        if (v294 <= m)
          break;
        v295 = *(_QWORD *)(v269 + 24);
        v296 = *(float *)(v295 + 4 * m);
        if (v296 < 0.0)
          *(float *)(v295 + 4 * m) = v296 * 0.25;
      }
    }
    if (v370[83])
    {
      v309 = 0;
      v310 = v400;
      v311 = *(int *)(v400 + 8);
      while (1)
      {
        v312 = 0;
        v313 = v311;
        do
        {
          v313 *= *(int *)(v310 + 12 + v312);
          v312 += 4;
        }
        while (v312 != 12);
        if (v313 <= v309)
          break;
        v314 = *(_QWORD *)(v310 + 24);
        *(float *)(v314 + 4 * v309) = tanhf(*(float *)(v314 + 4 * v309));
        ++v309;
      }
    }
  }
  else
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v120, v121);
    v301 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v301, OS_LOG_TYPE_INFO))
    {
      LOWORD(src.data) = 0;
      _os_log_impl(&dword_190DAF000, v301, OS_LOG_TYPE_INFO, "convolution_kernel: has_batch_norm only supported for fp16 and fp32 tops", (uint8_t *)&src, 2u);
    }

  }
LABEL_416:
  if (v364)
    Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters((void ***)v369);
  if (v365)
  {
    Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters((void ***)v369);
    src.data = 0;
    src.height = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v363, (__int128 *)&src);
    v266 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v315 = (unint64_t *)(src.height + 8);
      do
        v268 = __ldaxr(v315);
      while (__stlxr(v268 - 1, v315));
LABEL_422:
      if (!v268)
      {
        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
        std::__shared_weak_count::__release_weak(v266);
      }
    }
  }
LABEL_424:
  v316 = v378;
  if (v378)
  {
    v317 = (unint64_t *)&v378->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
      std::__shared_weak_count::__release_weak(v316);
    }
  }
  v319 = v380;
  if (v380)
  {
    v320 = (unint64_t *)&v380->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  v322 = v382;
  if (v382)
  {
    v323 = (unint64_t *)&v382->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = (std::__shared_weak_count *)*((_QWORD *)&v384 + 1);
  if (*((_QWORD *)&v384 + 1))
  {
    v326 = (unint64_t *)(*((_QWORD *)&v384 + 1) + 8);
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  v328 = v386;
  if (v386)
  {
    v329 = (unint64_t *)&v386->__shared_owners_;
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
  v331 = (std::__shared_weak_count *)*((_QWORD *)&v387 + 1);
  if (*((_QWORD *)&v387 + 1))
  {
    v332 = (unint64_t *)(*((_QWORD *)&v387 + 1) + 8);
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (!v333)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
    }
  }
  v334 = v389;
  if (v389)
  {
    v335 = (unint64_t *)&v389->__shared_owners_;
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
  v337 = (std::__shared_weak_count *)v391;
  if (v391)
  {
    v338 = (unint64_t *)(v391 + 8);
    do
      v339 = __ldaxr(v338);
    while (__stlxr(v339 - 1, v338));
    if (!v339)
    {
      ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
      std::__shared_weak_count::__release_weak(v337);
    }
  }
  v340 = (std::__shared_weak_count *)*((_QWORD *)&v392 + 1);
  if (*((_QWORD *)&v392 + 1))
  {
    v341 = (unint64_t *)(*((_QWORD *)&v392 + 1) + 8);
    do
      v342 = __ldaxr(v341);
    while (__stlxr(v342 - 1, v341));
    if (!v342)
    {
      ((void (*)(std::__shared_weak_count *))v340->__on_zero_shared)(v340);
      std::__shared_weak_count::__release_weak(v340);
    }
  }
LABEL_15:
  v16.n128_f64[0] = Espresso::BNNSEngine::convolution_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::call_function_on_destructor_t::~call_function_on_destructor_t((uint64_t)v393);
  v17 = v399;
  if (v399)
  {
    v18 = (unint64_t *)&v399->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v16);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v401;
  if (v401)
  {
    v21 = (unint64_t *)&v401->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v20->__on_zero_shared)(v20, v16);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1918C4A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  std::__shared_weak_count *v42;
  uint64_t v43;
  void *v45;

  std::__shared_weak_count::~__shared_weak_count(v42);
  operator delete(v45);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  Espresso::BNNSEngine::convolution_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::call_function_on_destructor_t::~call_function_on_destructor_t((uint64_t)&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43 - 208);
  _Unwind_Resume(a1);
}

void sub_1918C4A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,char a42)
{
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  Espresso::BNNSEngine::convolution_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::call_function_on_destructor_t::~call_function_on_destructor_t((uint64_t)&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 208);
  _Unwind_Resume(a1);
}

void sub_1918C4A84()
{
  JUMPOUT(0x1918C4A8CLL);
}

void sub_1918C4A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  if (*(char *)(v42 - 121) < 0)
    JUMPOUT(0x1918C4AA8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a39);
  Espresso::BNNSEngine::convolution_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::call_function_on_destructor_t::~call_function_on_destructor_t(&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 208);
  _Unwind_Resume(a1);
}

void sub_1918C4AB8()
{
  JUMPOUT(0x1918C4B5CLL);
}

void sub_1918C4AC0()
{
  JUMPOUT(0x1918C4AC8);
}

void sub_1918C4AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  Espresso::BNNSEngine::convolution_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::call_function_on_destructor_t::~call_function_on_destructor_t((uint64_t)&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 208);
  _Unwind_Resume(a1);
}

void sub_1918C4AE0()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 144);
  JUMPOUT(0x1918C4B6CLL);
}

void sub_1918C4AF4()
{
  JUMPOUT(0x1918C4B54);
}

void sub_1918C4B00()
{
  JUMPOUT(0x1918C4B8CLL);
}

void sub_1918C4B08()
{
  JUMPOUT(0x1918C4B4CLL);
}

void sub_1918C4B14()
{
  JUMPOUT(0x1918C4B7CLL);
}

void sub_1918C4B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a25);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&a39);
  Espresso::BNNSEngine::convolution_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::call_function_on_destructor_t::~call_function_on_destructor_t(&a42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 - 208);
  _Unwind_Resume(a1);
}

void sub_1918C4B24()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v0 - 192);
  JUMPOUT(0x1918C4B34);
}

void Espresso::BNNSEngine::convolution_kernel::share_weights(uint64_t a1, const void **a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v4 = *(const void **)(a1 + 576);
  if (v4
  {
    v5 = *(std::__shared_weak_count **)(a1 + 584);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v10 = *(std::__shared_weak_count **)(a1 + 584);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    (*(void (**)(void *, const void **))(*(_QWORD *)v9 + 48))(v9, a2);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    Espresso::generic_convolution_kernel::share_weights((_QWORD *)a1, a2);
    if (*a2)
    {
      if (v15)
      {
        v16 = v15;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 616), v16[77], v16[78]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 632), v16[79], v16[80]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 648), v16[81], v16[82]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 472), v16[59], v16[60]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 520), v16[65], v16[66]);
      }
    }
  }
}

void sub_1918C4D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::clear_weights(Espresso::BNNSEngine::convolution_kernel *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 59);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 61);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 39);
}

void Espresso::BNNSEngine::convolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, unint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  _QWORD *v12;
  double v13;
  double v14;
  int32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23[2];
  __int128 v24[2];
  void *__p;
  void *v26;

  v11 = a1[72];
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t *, unsigned __int8 *, void *, unint64_t, uint64_t *))(*(_QWORD *)v11 + 160))(v11, a2, a3, a4, a5, a6);
  }
  else
  {
    Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, a3, a4, a5, a6);
    v12 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*a1 + 464))(v24, a1);
    v16 = (uint64_t)(a1 + 59);
    v17 = a1[1];
    v18 = (std::__shared_weak_count *)a1[2];
    v23[0] = v17;
    v23[1] = (uint64_t)v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
    Espresso::set_conv_quantized_weight_helper(v13, v14, v15, (uint64_t)v12, (unsigned __int8 **)a3, (char *)a4, a5, a6, v16, v24, v23, 0, 0);
    if (v18)
    {
      v21 = (unint64_t *)&v18->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
  }
}

void sub_1918C4EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::__set_weights_finalize(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v2 = a1[72];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v3 = a1[59];
  if (v3 && *(_QWORD *)v3)
  {
    if (*(_QWORD *)(v3 + 32))
    {
      if (!*(_DWORD *)(a1[1] + 76))
      {
LABEL_19:
        Espresso::quantized_weights_helper::make_fp16_lut_from_fp32((Espresso::quantized_weights_helper *)v3);
        v3 = a1[59];
LABEL_20:
        if (*(int *)(v3 + 156) <= 7)
          Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
        return;
      }
    }
    else
    {
      if (!*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64) && !*(_QWORD *)(v3 + 80))
        return;
      if (!*(_DWORD *)(a1[1] + 76))
      {
        if (!*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64))
          goto LABEL_20;
        goto LABEL_19;
      }
    }
    Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v3, &v7);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 79), &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t Espresso::BNNSEngine::convolution_kernel::supports_weight_key(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 576);
  if (v3)
  {
    v3 = (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)v3 + 208))(v3, a2);
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  v5 = v4 | Espresso::generic_convolution_kernel::supports_weight_key(v3, a2);
  return v5 | Espresso::weight_key_supported_by_conv_quantized_weights_helper(a2, 0);
}

void Espresso::BNNSEngine::convolution_kernel::get_runtime_type_config(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  if (*(_DWORD *)(a1[1] + 116) && a2[1] - *a2 == 40 && *(_DWORD *)(*a2 + 8) <= 1u)
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a2);
  else
    Espresso::base_kernel::get_runtime_type_config(a1, a2, a3, a4);
}

void Espresso::BNNSEngine::convolution_kernel::set_biases(_QWORD *a1, uint64_t *a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;

  v4 = (const void *)a1[72];
  if (v4
  {
    v5 = (std::__shared_weak_count *)a1[73];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = (const void *)a1[72];
    if (v9
    {
      v11 = (std::__shared_weak_count *)a1[73];
      v25 = v10;
      v26 = v11;
      if (v11)
      {
        v12 = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    else
    {
      v10 = 0;
      v25 = 0;
      v26 = 0;
    }
    v14 = a2[1];
    v23 = *a2;
    v24 = (std::__shared_weak_count *)v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 392))(v10, &v23);
    v17 = v24;
    if (v24)
    {
      v18 = (unint64_t *)&v24->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = v26;
    if (v26)
    {
      v21 = (unint64_t *)&v26->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 77, *a2, a2[1]);
  }
}

void sub_1918C5248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  __int128 v41;

  v4 = *(const void **)(a1 + 576);
  if (v4
  {
    v5 = *(std::__shared_weak_count **)(a1 + 584);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v9 = *(const void **)(a1 + 576);
    if (v9
    {
      v11 = *(_QWORD *)(a1 + 584);
      *(_QWORD *)&v41 = v10;
      *((_QWORD *)&v41 + 1) = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
    }
    else
    {
      v10 = 0;
      v41 = 0uLL;
    }
    v32 = a2[1];
    v39 = *a2;
    v40 = (std::__shared_weak_count *)v32;
    if (v32)
    {
      v33 = (unint64_t *)(v32 + 8);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 400))(v10, &v39);
    v35 = v40;
    if (v40)
    {
      v36 = (unint64_t *)&v40->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v31 = __ldaxr(v38);
      while (__stlxr(v31 - 1, v38));
LABEL_41:
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
  }
  else
  {
    v14 = a1 + 632;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 632), *a2, a2[1]);
    if (*(_DWORD *)(a1 + 560) == 1)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v41, *a2 + 8);
      v15 = a1 + 648;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v15, &v41);
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = 0;
      v20 = *(int **)(*a2 + 24);
      v21 = *(_WORD **)(*(_QWORD *)v15 + 24);
      v22 = *(int *)(*(_QWORD *)v15 + 8);
      do
      {
        v22 *= *(int *)(*(_QWORD *)v15 + 12 + v19);
        v19 += 4;
      }
      while (v19 != 12);
      for (; v22; --v22)
      {
        v23 = *v20++;
        _S0 = v23;
        __asm { FCVT            H0, S0 }
        *v21++ = _S0;
      }
      v41 = 0uLL;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14, &v41);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
      if (*((_QWORD *)&v41 + 1))
      {
        v30 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        goto LABEL_41;
      }
    }
  }
}

void sub_1918C54DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1918C5534(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::convolution_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 624);
  *a2 = *(_QWORD *)(this + 616);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::BNNSEngine::convolution_kernel::get_weights(Espresso::BNNSEngine::convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = (const void *)*((_QWORD *)this + 72);
  if (v4)
  {
    if (!v5)
      Espresso::throw_exception_selector<Espresso::generic_error>("Error downcasting fallback kernel");
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(void *))(*(_QWORD *)v5 + 456))(v5);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 80);
    *a2 = *((_QWORD *)this + 79);
    a2[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
}

void sub_1918C565C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::set_f16_weights(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  const void *v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *v27;
  std::__shared_weak_count *v28;

  v5 = (const void *)a1[72];
  if (v5
  {
    v7 = (std::__shared_weak_count *)a1[73];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v11 = (const void *)a1[72];
    if (v11
    {
      v13 = (std::__shared_weak_count *)a1[73];
      v27 = v12;
      v28 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v12 = 0;
      v27 = 0;
      v28 = 0;
    }
    v16 = a2[1];
    v25 = *a2;
    v26 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v12 + 544))(v12, &v25, a3);
    v19 = v26;
    if (v26)
    {
      v20 = (unint64_t *)&v26->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v28;
    if (v28)
    {
      v23 = (unint64_t *)&v28->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 81, *a2, a2[1]);
  }
}

void sub_1918C5820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::get_f16_weights(Espresso::BNNSEngine::convolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = (const void *)*((_QWORD *)this + 72);
  if (v4)
  {
    if (!v5)
      Espresso::throw_exception_selector<Espresso::generic_error>("Error downcasting fallback kernel");
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(void *))(*(_QWORD *)v5 + 552))(v5);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 82);
    *a2 = *((_QWORD *)this + 81);
    a2[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
}

void sub_1918C5928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::set_quantized_weights_blob(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  const void *v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;

  v5 = (const void *)a1[72];
  if (v5
  {
    v7 = (std::__shared_weak_count *)a1[73];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v11 = (const void *)a1[72];
    if (v11
    {
      v13 = (std::__shared_weak_count *)a1[73];
      v35 = v12;
      v36 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v12 = 0;
      v35 = 0;
      v36 = 0;
    }
    v16 = a2[1];
    v33 = *a2;
    v34 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (std::__shared_weak_count *)a3[1];
    v31 = *a3;
    v32 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    (*(void (**)(void *, uint64_t *, uint64_t *))(*(_QWORD *)v12 + 560))(v12, &v33, &v31);
    v22 = v32;
    if (v32)
    {
      v23 = (unint64_t *)&v32->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v34;
    if (v34)
    {
      v26 = (unint64_t *)&v34->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v36;
    if (v36)
    {
      v29 = (unint64_t *)&v36->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 65, *a2, a2[1]);
  }
}

void sub_1918C5B44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::set_quantization_ranges_blob(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  const void *v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *v35;
  std::__shared_weak_count *v36;

  v5 = (const void *)a1[72];
  if (v5
  {
    v7 = (std::__shared_weak_count *)a1[73];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v11 = (const void *)a1[72];
    if (v11
    {
      v13 = (std::__shared_weak_count *)a1[73];
      v35 = v12;
      v36 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      v12 = 0;
      v35 = 0;
      v36 = 0;
    }
    v16 = a2[1];
    v33 = *a2;
    v34 = (std::__shared_weak_count *)v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    v19 = (std::__shared_weak_count *)a3[1];
    v31 = *a3;
    v32 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    (*(void (**)(void *, uint64_t *, uint64_t *))(*(_QWORD *)v12 + 592))(v12, &v33, &v31);
    v22 = v32;
    if (v32)
    {
      v23 = (unint64_t *)&v32->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v25 = v34;
    if (v34)
    {
      v26 = (unint64_t *)&v34->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v28 = v36;
    if (v36)
    {
      v29 = (unint64_t *)&v36->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
  else
  {
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 63, *a2, a2[1]);
  }
}

void sub_1918C5D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::convolution_kernel::create_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a9)
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1, a2, a3, a4, a5, a6, a7, a8, 1);
  else
    create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1, a2, a3, a4, a5, a6, a7, a8, 0);
}

void create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<unsigned short,4>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  BOOL v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  _QWORD v45[8];
  BOOL v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[4];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[4];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  _BYTE *v91;
  uint64_t v92;
  __int128 __src;
  unint64_t v94;
  uint64_t v95;
  char v96[8];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v13 = *a6 != a6[1] || a6[2] != a6[3] || a6[4] != a6[5];
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v81 = 0u;
  v79 = 0u;
  memset(v80, 0, sizeof(v80));
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  memset(v70, 0, sizeof(v70));
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 3221225472;
  v45[2] = ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_NS1_ItLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke;
  v45[3] = &__block_descriptor_66_e120_v80__0Q8Q16Q24Q32Q40____II_8Q__8Q__vI_vIff_48____II_8Q__8Q__vI_vIff_56____II_8Q__8Q__vI_vIff_64____II_8Q__8Q__vI_vIff_72l;
  v45[4] = a8;
  v45[5] = a1;
  v46 = v13;
  v47 = 0;
  v45[6] = a6;
  v45[7] = a7;
  v14 = (void *)MEMORY[0x19401D648](v45);
  v15 = 0;
  if (*(_QWORD *)a5 && !*(_DWORD *)(a1 + 112))
    v15 = *(_QWORD *)(*(_QWORD *)a5 + 16);
  v42 = v15;
  v16 = v14;
  v17 = *(int *)(a1 + 40);
  v18 = *(int *)(a1 + 44);
  v20 = *(int *)(*(_QWORD *)a2 + 8);
  v19 = *(int *)(*(_QWORD *)a2 + 12);
  v41 = a3;
  v21 = *a3;
  v22 = *(int *)(*a3 + 8);
  v23 = *(int *)(v21 + 12);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v24 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v25 = (int)v24;
  *((_QWORD *)&v25 + 1) = SHIDWORD(v24);
  __src = v25;
  v94 = v18;
  v95 = v17;
  v43 = v16;
  v44 = v17;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v90, (char *)&__src, v96, 4uLL);
  v26 = *(unsigned int *)(a1 + 116);
  if ((int)v26 >= 2)
    v90[2] = v18 / v26;
  v39 = a2;
  v40 = a4;
  v27 = operator new(0x18uLL);
  *v27 = v22;
  v27[1] = v23;
  v27[2] = v44;
  v28 = operator new(0x18uLL);
  v29 = v28;
  *v28 = v20;
  v28[1] = v19;
  v28[2] = v18;
  v30 = *(int *)(*v41 + 20);
  v31 = *(int *)(a1 + 40);
  v32 = *(int *)(a1 + 44);
  v33 = *(_QWORD *)(*v41 + 24);
  memset(v80, 0, sizeof(v80));
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  HIDWORD(v80[0]) = 196608;
  v34 = v27[2];
  *(_OWORD *)&v80[1] = *(_OWORD *)v27;
  v80[3] = v34;
  *((_QWORD *)&v87 + 1) = v33;
  LODWORD(v88) = 65568;
  DWORD1(v89) = 1065353216;
  if (*(_QWORD *)v39)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v39 + 24);
    memset(v70, 0, sizeof(v70));
    v77 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
    v75 = 0uLL;
    v76 = 0uLL;
    v73 = 0uLL;
    v74 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    HIDWORD(v70[0]) = 196608;
    *(_OWORD *)&v70[1] = *(_OWORD *)v28;
    v70[3] = v28[2];
    *((_QWORD *)&v77 + 1) = v35;
    LODWORD(v78) = 65568;
    DWORD1(v79) = 1065353216;
  }
  v36 = (int)v19 * (uint64_t)(int)v20 * v32;
  v37 = (int)v23 * (uint64_t)(int)v22 * v31;
  if (*(_QWORD *)v40)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v40 + 24);
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    DWORD1(v59) = 0x40000;
    if (v91 != (_BYTE *)v90)
      memmove((char *)&v59 + 8, v90, v91 - (_BYTE *)v90);
    *((_QWORD *)&v67 + 1) = v38;
    LODWORD(v68) = 65552;
    *(_QWORD *)((char *)&v69 + 4) = 1065353216;
  }
  if (v42)
  {
    *(_QWORD *)&v56 = 0;
    v57 = 0u;
    v58 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    *(_QWORD *)&v48 = 0x1000000000000;
    v49 = 0u;
    *((_QWORD *)&v48 + 1) = v44;
    *((_QWORD *)&v56 + 1) = v42;
    LODWORD(v57) = 65568;
    DWORD1(v58) = 1065353216;
  }
  (*((void (**)(id, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, _QWORD *, __int128 *, __int128 *))v43
   + 2))(v43, v30, v36, v37, 0, 0, v80, v70, &v59, &v48);
  operator delete(v29);
  operator delete(v27);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }

}

void sub_1918C6240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;

  operator delete(v17);
  operator delete(v16);
  v20 = *(void **)(v18 - 168);
  if (v20)
  {
    *(_QWORD *)(v18 - 160) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void create_azden_conv_bnns_filter<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  BOOL v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  _QWORD v45[8];
  BOOL v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[4];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[4];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  _BYTE *v91;
  uint64_t v92;
  __int128 __src;
  unint64_t v94;
  uint64_t v95;
  char v96[8];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v13 = *a6 != a6[1] || a6[2] != a6[3] || a6[4] != a6[5];
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v81 = 0u;
  v79 = 0u;
  memset(v80, 0, sizeof(v80));
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  memset(v70, 0, sizeof(v70));
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 3221225472;
  v45[2] = ___Z29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_NS1_IfLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke;
  v45[3] = &__block_descriptor_66_e120_v80__0Q8Q16Q24Q32Q40____II_8Q__8Q__vI_vIff_48____II_8Q__8Q__vI_vIff_56____II_8Q__8Q__vI_vIff_64____II_8Q__8Q__vI_vIff_72l;
  v45[4] = a8;
  v45[5] = a1;
  v46 = v13;
  v47 = 0;
  v45[6] = a6;
  v45[7] = a7;
  v14 = (void *)MEMORY[0x19401D648](v45);
  v15 = 0;
  if (*(_QWORD *)a5 && !*(_DWORD *)(a1 + 112))
    v15 = *(_QWORD *)(*(_QWORD *)a5 + 16);
  v42 = v15;
  v16 = v14;
  v17 = *(int *)(a1 + 40);
  v18 = *(int *)(a1 + 44);
  v20 = *(int *)(*(_QWORD *)a2 + 8);
  v19 = *(int *)(*(_QWORD *)a2 + 12);
  v41 = a3;
  v21 = *a3;
  v22 = *(int *)(*a3 + 8);
  v23 = *(int *)(v21 + 12);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v24 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v25 = (int)v24;
  *((_QWORD *)&v25 + 1) = SHIDWORD(v24);
  __src = v25;
  v94 = v18;
  v95 = v17;
  v43 = v16;
  v44 = v17;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v90, (char *)&__src, v96, 4uLL);
  v26 = *(unsigned int *)(a1 + 116);
  if ((int)v26 >= 2)
    v90[2] = v18 / v26;
  v39 = a2;
  v40 = a4;
  v27 = operator new(0x18uLL);
  *v27 = v22;
  v27[1] = v23;
  v27[2] = v44;
  v28 = operator new(0x18uLL);
  v29 = v28;
  *v28 = v20;
  v28[1] = v19;
  v28[2] = v18;
  v30 = *(int *)(*v41 + 20);
  v31 = *(int *)(a1 + 40);
  v32 = *(int *)(a1 + 44);
  v33 = *(_QWORD *)(*v41 + 24);
  memset(v80, 0, sizeof(v80));
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  HIDWORD(v80[0]) = 196608;
  v34 = v27[2];
  *(_OWORD *)&v80[1] = *(_OWORD *)v27;
  v80[3] = v34;
  *((_QWORD *)&v87 + 1) = v33;
  LODWORD(v88) = 65552;
  DWORD1(v89) = 1065353216;
  if (*(_QWORD *)v39)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v39 + 24);
    memset(v70, 0, sizeof(v70));
    v77 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
    v75 = 0uLL;
    v76 = 0uLL;
    v73 = 0uLL;
    v74 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    HIDWORD(v70[0]) = 196608;
    *(_OWORD *)&v70[1] = *(_OWORD *)v28;
    v70[3] = v28[2];
    *((_QWORD *)&v77 + 1) = v35;
    LODWORD(v78) = 65552;
    DWORD1(v79) = 1065353216;
  }
  v36 = (int)v19 * (uint64_t)(int)v20 * v32;
  v37 = (int)v23 * (uint64_t)(int)v22 * v31;
  if (*(_QWORD *)v40)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v40 + 24);
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    DWORD1(v59) = 0x40000;
    if (v91 != (_BYTE *)v90)
      memmove((char *)&v59 + 8, v90, v91 - (_BYTE *)v90);
    *((_QWORD *)&v67 + 1) = v38;
    LODWORD(v68) = 65568;
    *(_QWORD *)((char *)&v69 + 4) = 1065353216;
  }
  if (v42)
  {
    *(_QWORD *)&v56 = 0;
    v57 = 0u;
    v58 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    *(_QWORD *)&v48 = 0x1000000000000;
    v49 = 0u;
    *((_QWORD *)&v48 + 1) = v44;
    *((_QWORD *)&v56 + 1) = v42;
    LODWORD(v57) = 65568;
    DWORD1(v58) = 1065353216;
  }
  (*((void (**)(id, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, _QWORD *, __int128 *, __int128 *))v43
   + 2))(v43, v30, v36, v37, 0, 0, v80, v70, &v59, &v48);
  operator delete(v29);
  operator delete(v27);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }

}

void sub_1918C6670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;

  operator delete(v17);
  operator delete(v16);
  v20 = *(void **)(v18 - 168);
  if (v20)
  {
    *(_QWORD *)(v18 - 160) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<unsigned char,4>,Espresso::blob<unsigned char,4>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  BOOL v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  _QWORD v45[8];
  BOOL v46;
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[4];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _QWORD v80[4];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _QWORD *v90;
  _BYTE *v91;
  uint64_t v92;
  __int128 __src;
  unint64_t v94;
  uint64_t v95;
  char v96[8];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v13 = *a6 != a6[1] || a6[2] != a6[3] || a6[4] != a6[5];
  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v82 = 0u;
  v83 = 0u;
  v81 = 0u;
  v79 = 0u;
  memset(v80, 0, sizeof(v80));
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  memset(v70, 0, sizeof(v70));
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v45[0] = MEMORY[0x1E0C809B0];
  v45[1] = 3221225472;
  v45[2] = ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke;
  v45[3] = &__block_descriptor_66_e120_v80__0Q8Q16Q24Q32Q40____II_8Q__8Q__vI_vIff_48____II_8Q__8Q__vI_vIff_56____II_8Q__8Q__vI_vIff_64____II_8Q__8Q__vI_vIff_72l;
  v45[4] = a8;
  v45[5] = a1;
  v46 = v13;
  v47 = 0;
  v45[6] = a6;
  v45[7] = a7;
  v14 = (void *)MEMORY[0x19401D648](v45);
  v15 = 0;
  if (*(_QWORD *)a5 && !*(_DWORD *)(a1 + 112))
    v15 = *(_QWORD *)(*(_QWORD *)a5 + 16);
  v42 = v15;
  v16 = v14;
  v17 = *(int *)(a1 + 40);
  v18 = *(int *)(a1 + 44);
  v20 = *(int *)(*(_QWORD *)a2 + 8);
  v19 = *(int *)(*(_QWORD *)a2 + 12);
  v41 = a3;
  v21 = *a3;
  v22 = *(int *)(*a3 + 8);
  v23 = *(int *)(v21 + 12);
  v90 = 0;
  v91 = 0;
  v92 = 0;
  v24 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v25 = (int)v24;
  *((_QWORD *)&v25 + 1) = SHIDWORD(v24);
  __src = v25;
  v94 = v18;
  v95 = v17;
  v43 = v16;
  v44 = v17;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v90, (char *)&__src, v96, 4uLL);
  v26 = *(unsigned int *)(a1 + 116);
  if ((int)v26 >= 2)
    v90[2] = v18 / v26;
  v39 = a2;
  v40 = a4;
  v27 = operator new(0x18uLL);
  *v27 = v22;
  v27[1] = v23;
  v27[2] = v44;
  v28 = operator new(0x18uLL);
  v29 = v28;
  *v28 = v20;
  v28[1] = v19;
  v28[2] = v18;
  v30 = *(int *)(*v41 + 20);
  v31 = *(int *)(a1 + 40);
  v32 = *(int *)(a1 + 44);
  v33 = *(_QWORD *)(*v41 + 24);
  memset(v80, 0, sizeof(v80));
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  HIDWORD(v80[0]) = 196608;
  v34 = v27[2];
  *(_OWORD *)&v80[1] = *(_OWORD *)v27;
  v80[3] = v34;
  *((_QWORD *)&v87 + 1) = v33;
  LODWORD(v88) = 65568;
  DWORD1(v89) = 1065353216;
  if (*(_QWORD *)v39)
  {
    v35 = *(_QWORD *)(*(_QWORD *)v39 + 24);
    memset(v70, 0, sizeof(v70));
    v77 = 0uLL;
    v78 = 0uLL;
    v79 = 0uLL;
    v75 = 0uLL;
    v76 = 0uLL;
    v73 = 0uLL;
    v74 = 0uLL;
    v71 = 0uLL;
    v72 = 0uLL;
    HIDWORD(v70[0]) = 196608;
    *(_OWORD *)&v70[1] = *(_OWORD *)v28;
    v70[3] = v28[2];
    *((_QWORD *)&v77 + 1) = v35;
    LODWORD(v78) = 131080;
    DWORD1(v79) = 1065353216;
  }
  v36 = (int)v19 * (uint64_t)(int)v20 * v32;
  v37 = (int)v23 * (uint64_t)(int)v22 * v31;
  if (*(_QWORD *)v40)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v40 + 24);
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    DWORD1(v59) = 0x40000;
    if (v91 != (_BYTE *)v90)
      memmove((char *)&v59 + 8, v90, v91 - (_BYTE *)v90);
    *((_QWORD *)&v67 + 1) = v38;
    LODWORD(v68) = 131080;
    *(_QWORD *)((char *)&v69 + 4) = 1065353216;
  }
  if (v42)
  {
    *(_QWORD *)&v56 = 0;
    v57 = 0u;
    v58 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    *(_QWORD *)&v48 = 0x1000000000000;
    v49 = 0u;
    *((_QWORD *)&v48 + 1) = v44;
    *((_QWORD *)&v56 + 1) = v42;
    LODWORD(v57) = 65568;
    DWORD1(v58) = 1065353216;
  }
  (*((void (**)(id, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, _QWORD *, __int128 *, __int128 *))v43
   + 2))(v43, v30, v36, v37, 0, 0, v80, v70, &v59, &v48);
  operator delete(v29);
  operator delete(v27);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }

}

void sub_1918C6AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;

  operator delete(v17);
  operator delete(v16);
  v20 = *(void **)(v18 - 168);
  if (v20)
  {
    *(_QWORD *)(v18 - 160) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void create_azden_conv_bnns_filter<Espresso::blob<int,4>,Espresso::blob<unsigned char,4>,Espresso::blob<unsigned char,4>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8)
{
  BOOL v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _QWORD v46[8];
  BOOL v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[4];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;
  _BYTE *v92;
  uint64_t v93;
  __int128 __src;
  unint64_t v95;
  uint64_t v96;
  char v97[8];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v13 = *a6 != a6[1] || a6[2] != a6[3] || a6[4] != a6[5];
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v82 = 0u;
  v80 = 0u;
  memset(v81, 0, sizeof(v81));
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  memset(v71, 0, sizeof(v71));
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIiLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke;
  v46[3] = &__block_descriptor_66_e120_v80__0Q8Q16Q24Q32Q40____II_8Q__8Q__vI_vIff_48____II_8Q__8Q__vI_vIff_56____II_8Q__8Q__vI_vIff_64____II_8Q__8Q__vI_vIff_72l;
  v46[4] = a8;
  v46[5] = a1;
  v47 = v13;
  v48 = 0;
  v46[6] = a6;
  v46[7] = a7;
  v14 = (void *)MEMORY[0x19401D648](v46);
  v15 = 0;
  if (*(_QWORD *)a5 && !*(_DWORD *)(a1 + 112))
    v15 = *(_QWORD *)(*(_QWORD *)a5 + 16);
  v43 = v15;
  v16 = v14;
  v17 = *(int *)(a1 + 40);
  v18 = *(int *)(a1 + 44);
  v20 = *(int *)(*(_QWORD *)a2 + 8);
  v19 = *(int *)(*(_QWORD *)a2 + 12);
  v42 = a3;
  v21 = *a3;
  v22 = *(int *)(*a3 + 8);
  v23 = *(int *)(v21 + 12);
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v24 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v25 = (int)v24;
  *((_QWORD *)&v25 + 1) = SHIDWORD(v24);
  __src = v25;
  v95 = v18;
  v96 = v17;
  v44 = v16;
  v45 = v17;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v91, (char *)&__src, v97, 4uLL);
  v26 = *(unsigned int *)(a1 + 116);
  if ((int)v26 >= 2)
    v91[2] = v18 / v26;
  v40 = a2;
  v41 = a4;
  v27 = operator new(0x18uLL);
  *v27 = v22;
  v27[1] = v23;
  v27[2] = v45;
  v28 = operator new(0x18uLL);
  v29 = v28;
  *v28 = v20;
  v28[1] = v19;
  v28[2] = v18;
  v30 = *(int *)(*v42 + 20);
  v31 = *(int *)(a1 + 40);
  v32 = *(int *)(a1 + 44);
  v33 = (int)v23 * (uint64_t)(int)v22;
  v34 = *(_QWORD *)(*v42 + 24);
  memset(v81, 0, sizeof(v81));
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  HIDWORD(v81[0]) = 196608;
  v35 = v27[2];
  *(_OWORD *)&v81[1] = *(_OWORD *)v27;
  v81[3] = v35;
  *((_QWORD *)&v88 + 1) = v34;
  LODWORD(v89) = 131104;
  DWORD1(v90) = 1065353216;
  if (*(_QWORD *)v40)
  {
    v36 = *(_QWORD *)(*(_QWORD *)v40 + 24);
    memset(v71, 0, sizeof(v71));
    v78 = 0uLL;
    v79 = 0uLL;
    v80 = 0uLL;
    v76 = 0uLL;
    v77 = 0uLL;
    v74 = 0uLL;
    v75 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    HIDWORD(v71[0]) = 196608;
    *(_OWORD *)&v71[1] = *(_OWORD *)v28;
    v71[3] = v28[2];
    *((_QWORD *)&v78 + 1) = v36;
    LODWORD(v79) = 131080;
    DWORD1(v80) = 1065353216;
  }
  v37 = (int)v19 * (uint64_t)(int)v20 * v32;
  v38 = v33 * v31;
  if (*(_QWORD *)v41)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v41 + 24);
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    DWORD1(v60) = 0x40000;
    if (v92 != (_BYTE *)v91)
      memmove((char *)&v60 + 8, v91, v92 - (_BYTE *)v91);
    *((_QWORD *)&v68 + 1) = v39;
    LODWORD(v69) = 131080;
    *(_QWORD *)((char *)&v70 + 4) = 1065353216;
  }
  if (v43)
  {
    *(_QWORD *)&v57 = 0;
    v58 = 0u;
    v59 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    *(_QWORD *)&v49 = 0x1000000000000;
    v50 = 0u;
    *((_QWORD *)&v49 + 1) = v45;
    *((_QWORD *)&v57 + 1) = v43;
    LODWORD(v58) = 65568;
    DWORD1(v59) = 1065353216;
  }
  (*((void (**)(id, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, _QWORD *, __int128 *, __int128 *))v44
   + 2))(v44, v30, v37, v38, 0, 0, v81, v71, &v60, &v49);
  operator delete(v29);
  operator delete(v27);
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }

}

void sub_1918C6EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;

  operator delete(v17);
  operator delete(v16);
  v20 = *(void **)(v18 - 168);
  if (v20)
  {
    *(_QWORD *)(v18 - 160) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::not_implemented_error,char const*&,char const*&,char const*&>(const char *a1, const char *a2, const char *a3)
{
  Espresso::throw_exception_with_format<Espresso::not_implemented_error>("convolution_kernel: bottom (%s), top (%s), weights (%s)", a1, a2, a3);
}

double Espresso::BNNSEngine::convolution_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::call_function_on_destructor_t::~call_function_on_destructor_t(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  double result;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  if (*(_BYTE *)a1)
  {
    v1 = *(uint64_t ***)(a1 + 16);
    v2 = ***(_QWORD ***)(a1 + 8);
    *(_DWORD *)(v2 + 28) = 3;
    *(_QWORD *)(v2 + 12) = *(_QWORD *)(v2 + 16);
    *(_QWORD *)&result = 0x100000001;
    *(_QWORD *)(v2 + 20) = 0x100000001;
    v4 = **v1;
    *(_DWORD *)(v4 + 28) = 3;
    v5 = *(_DWORD *)(v4 + 8);
    *(_QWORD *)(v4 + 12) = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 20) = 0x100000001;
    v6 = *(_QWORD **)(a1 + 24);
    v7 = **(_DWORD ***)(a1 + 32);
    v7[2] = v5;
    v7[3] = *(_DWORD *)(v4 + 12);
    v7[4] = *(_DWORD *)(v4 + 16);
    v7[5] = *(_DWORD *)(v4 + 20);
    v8 = (_DWORD *)*v6;
    v8[2] = *(_DWORD *)(v2 + 8);
    v8[3] = *(_DWORD *)(v2 + 12);
    v8[4] = *(_DWORD *)(v2 + 16);
    v8[5] = *(_DWORD *)(v2 + 20);
  }
  return result;
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::convolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6F88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::convolution_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6F88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::convolution_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 600);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 584);
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(v2);
}

uint64_t ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIiLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, _OWORD *a8, __int128 *a9, __int128 *a10)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t result;
  _QWORD v49[3];
  _OWORD v50[11];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(void **, size_t, size_t);
  uint64_t (*v96)(_QWORD);
  uint8_t buf[32];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v10 = a2;
  v11 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  v95 = bnns_alloc_capmem;
  v96 = MEMORY[0x1E0C834A8];
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v93 = 0;
  v94 = v13;
  if (*(_DWORD *)(v12 + 160))
  {
    v14 = 3145728;
  }
  else
  {
    LODWORD(v93) = 1;
    v14 = 3145729;
  }
  if (*(_DWORD *)(v12 + 144))
    LODWORD(v93) = v14;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v15 = a8[8];
  v16 = a8[9];
  v17 = a8[6];
  v50[7] = a8[7];
  v50[8] = v15;
  v18 = a8[10];
  v50[9] = v16;
  v50[10] = v18;
  v19 = a8[5];
  v50[4] = a8[4];
  v50[5] = v19;
  v50[6] = v17;
  v20 = a8[1];
  v50[0] = *a8;
  v50[1] = v20;
  v21 = a8[3];
  v50[2] = a8[2];
  v50[3] = v21;
  v22 = a7[8];
  v23 = a7[9];
  v24 = a7[6];
  v69 = a7[7];
  v70 = v22;
  v25 = a7[10];
  v71 = v23;
  v72 = v25;
  v26 = a7[4];
  v27 = a7[5];
  v28 = a7[2];
  v65 = a7[3];
  v66 = v26;
  v67 = v27;
  v68 = v24;
  v29 = *a7;
  v63 = a7[1];
  v64 = v28;
  v30 = a9[9];
  v59 = a9[8];
  v60 = v30;
  v61 = a9[10];
  v62 = v29;
  v31 = a9[5];
  v55 = a9[4];
  v56 = v31;
  v32 = a9[7];
  v57 = a9[6];
  v58 = v32;
  v33 = a9[1];
  v51 = *a9;
  v52 = v33;
  v34 = a9[3];
  v53 = a9[2];
  v54 = v34;
  v35 = a10[5];
  v77 = a10[4];
  v78 = v35;
  v36 = a10[10];
  v37 = a10[8];
  v82 = a10[9];
  v83 = v36;
  v38 = a10[7];
  v79 = a10[6];
  v80 = v38;
  v81 = v37;
  v39 = a10[1];
  v73 = *a10;
  v74 = v39;
  v40 = a10[3];
  v75 = a10[2];
  v76 = v40;
  *((_QWORD *)&v87 + 1) = *(__int16 *)(v12 + 92);
  *(_QWORD *)&v88 = *(__int16 *)(v12 + 94);
  *((_QWORD *)&v88 + 1) = *(__int16 *)(v12 + 96);
  *(_QWORD *)&v89 = *(__int16 *)(v12 + 98);
  *((_QWORD *)&v90 + 1) = *(int *)(v12 + 116);
  if (*(_BYTE *)(a1 + 64))
  {
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v43 = *(int **)(a1 + 48);
    v41 = *v43;
    v42 = v43[2];
  }
  *((_QWORD *)&v89 + 1) = v41;
  *(_QWORD *)&v90 = v42;
  v84 = 0x3F80000000000000;
  if (!*(_DWORD *)(v12 + 112))
  {
    v44 = *(_DWORD *)(v12 + 24);
    if (v44 == 2)
    {
      v84 = 0x3E80000000000002;
      goto LABEL_17;
    }
    if (v44 == 1)
    {
      v45 = 1;
LABEL_16:
      LODWORD(v84) = v45;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v12 + 28))
    {
      v45 = 4;
      goto LABEL_16;
    }
    a2 = (const char *)*(unsigned int *)(v12 + 60);
    if ((_DWORD)a2 != -1)
      a1 = Espresso::BNNSEngine::set_bnns_activation((uint64_t)&v84, a2, *(double *)(v12 + 64));
  }
LABEL_17:
  if (*(_BYTE *)(v11 + 65))
  {
    v106 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v49, 0, sizeof(v49));
    a1 = MEMORY[0x19401AB94](v50, buf, v49, v10, 0, 0, &v93);
    if ((_DWORD)a1)
      Espresso::throw_exception_selector<Espresso::generic_error>("BNNSNDArrayConvolutionSparsify failed (check BNNS logs)");
    v59 = v104;
    v60 = v105;
    v61 = v106;
    v55 = v100;
    v56 = v101;
    v57 = v102;
    v58 = v103;
    v51 = *(_OWORD *)buf;
    v52 = *(_OWORD *)&buf[16];
    v53 = v98;
    v54 = v99;
  }
  v46 = atomic_load((unsigned __int8 *)&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIiLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
  if ((v46 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIiLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    if ((_DWORD)a1)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      _ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIiLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
      __cxa_guard_release(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIiLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    }
  }
  if (_ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIiLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v93;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v94;
      _os_log_debug_impl(&dword_190DAF000, v47, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerConvolution: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = MEMORY[0x19401A9FC](v50, &v93);
  ***(_QWORD ***)(v11 + 56) = result;
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Convolution Layer (check BNNS logs)");
  return result;
}

uint64_t Espresso::BNNSEngine::set_bnns_activation(uint64_t result, unsigned int a2, double a3)
{
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  if (a2 >= 0x1B || ((0x50155CFu >> a2) & 1) == 0)
    Espresso::throw_exception_selector<Espresso::generic_error,int const&>(a2);
  *(_DWORD *)result = dword_191ACD194[a2];
  *(double *)(result + 4) = a3;
  return result;
}

void Espresso::throw_exception_selector<Espresso::generic_error,int const&>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("activation_grad for activation mode %d is not implemented", a1);
}

uint64_t ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, _OWORD *a8, __int128 *a9, __int128 *a10)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t result;
  _QWORD v49[3];
  _OWORD v50[11];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(void **, size_t, size_t);
  uint64_t (*v96)(_QWORD);
  uint8_t buf[32];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v10 = a2;
  v11 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  v95 = bnns_alloc_capmem;
  v96 = MEMORY[0x1E0C834A8];
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v93 = 0;
  v94 = v13;
  if (*(_DWORD *)(v12 + 160))
  {
    v14 = 3145728;
  }
  else
  {
    LODWORD(v93) = 1;
    v14 = 3145729;
  }
  if (*(_DWORD *)(v12 + 144))
    LODWORD(v93) = v14;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v15 = a8[8];
  v16 = a8[9];
  v17 = a8[6];
  v50[7] = a8[7];
  v50[8] = v15;
  v18 = a8[10];
  v50[9] = v16;
  v50[10] = v18;
  v19 = a8[5];
  v50[4] = a8[4];
  v50[5] = v19;
  v50[6] = v17;
  v20 = a8[1];
  v50[0] = *a8;
  v50[1] = v20;
  v21 = a8[3];
  v50[2] = a8[2];
  v50[3] = v21;
  v22 = a7[8];
  v23 = a7[9];
  v24 = a7[6];
  v69 = a7[7];
  v70 = v22;
  v25 = a7[10];
  v71 = v23;
  v72 = v25;
  v26 = a7[4];
  v27 = a7[5];
  v28 = a7[2];
  v65 = a7[3];
  v66 = v26;
  v67 = v27;
  v68 = v24;
  v29 = *a7;
  v63 = a7[1];
  v64 = v28;
  v30 = a9[9];
  v59 = a9[8];
  v60 = v30;
  v61 = a9[10];
  v62 = v29;
  v31 = a9[5];
  v55 = a9[4];
  v56 = v31;
  v32 = a9[7];
  v57 = a9[6];
  v58 = v32;
  v33 = a9[1];
  v51 = *a9;
  v52 = v33;
  v34 = a9[3];
  v53 = a9[2];
  v54 = v34;
  v35 = a10[5];
  v77 = a10[4];
  v78 = v35;
  v36 = a10[10];
  v37 = a10[8];
  v82 = a10[9];
  v83 = v36;
  v38 = a10[7];
  v79 = a10[6];
  v80 = v38;
  v81 = v37;
  v39 = a10[1];
  v73 = *a10;
  v74 = v39;
  v40 = a10[3];
  v75 = a10[2];
  v76 = v40;
  *((_QWORD *)&v87 + 1) = *(__int16 *)(v12 + 92);
  *(_QWORD *)&v88 = *(__int16 *)(v12 + 94);
  *((_QWORD *)&v88 + 1) = *(__int16 *)(v12 + 96);
  *(_QWORD *)&v89 = *(__int16 *)(v12 + 98);
  *((_QWORD *)&v90 + 1) = *(int *)(v12 + 116);
  if (*(_BYTE *)(a1 + 64))
  {
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v43 = *(int **)(a1 + 48);
    v41 = *v43;
    v42 = v43[2];
  }
  *((_QWORD *)&v89 + 1) = v41;
  *(_QWORD *)&v90 = v42;
  v84 = 0x3F80000000000000;
  if (!*(_DWORD *)(v12 + 112))
  {
    v44 = *(_DWORD *)(v12 + 24);
    if (v44 == 2)
    {
      v84 = 0x3E80000000000002;
      goto LABEL_17;
    }
    if (v44 == 1)
    {
      v45 = 1;
LABEL_16:
      LODWORD(v84) = v45;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v12 + 28))
    {
      v45 = 4;
      goto LABEL_16;
    }
    a2 = (const char *)*(unsigned int *)(v12 + 60);
    if ((_DWORD)a2 != -1)
      a1 = Espresso::BNNSEngine::set_bnns_activation((uint64_t)&v84, a2, *(double *)(v12 + 64));
  }
LABEL_17:
  if (*(_BYTE *)(v11 + 65))
  {
    v106 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v49, 0, sizeof(v49));
    a1 = MEMORY[0x19401AB94](v50, buf, v49, v10, 0, 0, &v93);
    if ((_DWORD)a1)
      Espresso::throw_exception_selector<Espresso::generic_error>("BNNSNDArrayConvolutionSparsify failed (check BNNS logs)");
    v59 = v104;
    v60 = v105;
    v61 = v106;
    v55 = v100;
    v56 = v101;
    v57 = v102;
    v58 = v103;
    v51 = *(_OWORD *)buf;
    v52 = *(_OWORD *)&buf[16];
    v53 = v98;
    v54 = v99;
  }
  v46 = atomic_load((unsigned __int8 *)&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
  if ((v46 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    if ((_DWORD)a1)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      _ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
      __cxa_guard_release(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    }
  }
  if (_ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEENS1_IhLi4EEES3_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v93;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v94;
      _os_log_debug_impl(&dword_190DAF000, v47, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerConvolution: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = MEMORY[0x19401A9FC](v50, &v93);
  ***(_QWORD ***)(v11 + 56) = result;
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Convolution Layer (check BNNS logs)");
  return result;
}

uint64_t ___Z29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_NS1_IfLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, _OWORD *a8, __int128 *a9, __int128 *a10)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t result;
  _QWORD v49[3];
  _OWORD v50[11];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(void **, size_t, size_t);
  uint64_t (*v96)(_QWORD);
  uint8_t buf[32];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v10 = a2;
  v11 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  v95 = bnns_alloc_capmem;
  v96 = MEMORY[0x1E0C834A8];
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v93 = 0;
  v94 = v13;
  if (*(_DWORD *)(v12 + 160))
  {
    v14 = 3145728;
  }
  else
  {
    LODWORD(v93) = 1;
    v14 = 3145729;
  }
  if (*(_DWORD *)(v12 + 144))
    LODWORD(v93) = v14;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v15 = a8[8];
  v16 = a8[9];
  v17 = a8[6];
  v50[7] = a8[7];
  v50[8] = v15;
  v18 = a8[10];
  v50[9] = v16;
  v50[10] = v18;
  v19 = a8[5];
  v50[4] = a8[4];
  v50[5] = v19;
  v50[6] = v17;
  v20 = a8[1];
  v50[0] = *a8;
  v50[1] = v20;
  v21 = a8[3];
  v50[2] = a8[2];
  v50[3] = v21;
  v22 = a7[8];
  v23 = a7[9];
  v24 = a7[6];
  v69 = a7[7];
  v70 = v22;
  v25 = a7[10];
  v71 = v23;
  v72 = v25;
  v26 = a7[4];
  v27 = a7[5];
  v28 = a7[2];
  v65 = a7[3];
  v66 = v26;
  v67 = v27;
  v68 = v24;
  v29 = *a7;
  v63 = a7[1];
  v64 = v28;
  v30 = a9[9];
  v59 = a9[8];
  v60 = v30;
  v61 = a9[10];
  v62 = v29;
  v31 = a9[5];
  v55 = a9[4];
  v56 = v31;
  v32 = a9[7];
  v57 = a9[6];
  v58 = v32;
  v33 = a9[1];
  v51 = *a9;
  v52 = v33;
  v34 = a9[3];
  v53 = a9[2];
  v54 = v34;
  v35 = a10[5];
  v77 = a10[4];
  v78 = v35;
  v36 = a10[10];
  v37 = a10[8];
  v82 = a10[9];
  v83 = v36;
  v38 = a10[7];
  v79 = a10[6];
  v80 = v38;
  v81 = v37;
  v39 = a10[1];
  v73 = *a10;
  v74 = v39;
  v40 = a10[3];
  v75 = a10[2];
  v76 = v40;
  *((_QWORD *)&v87 + 1) = *(__int16 *)(v12 + 92);
  *(_QWORD *)&v88 = *(__int16 *)(v12 + 94);
  *((_QWORD *)&v88 + 1) = *(__int16 *)(v12 + 96);
  *(_QWORD *)&v89 = *(__int16 *)(v12 + 98);
  *((_QWORD *)&v90 + 1) = *(int *)(v12 + 116);
  if (*(_BYTE *)(a1 + 64))
  {
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v43 = *(int **)(a1 + 48);
    v41 = *v43;
    v42 = v43[2];
  }
  *((_QWORD *)&v89 + 1) = v41;
  *(_QWORD *)&v90 = v42;
  v84 = 0x3F80000000000000;
  if (!*(_DWORD *)(v12 + 112))
  {
    v44 = *(_DWORD *)(v12 + 24);
    if (v44 == 2)
    {
      v84 = 0x3E80000000000002;
      goto LABEL_17;
    }
    if (v44 == 1)
    {
      v45 = 1;
LABEL_16:
      LODWORD(v84) = v45;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v12 + 28))
    {
      v45 = 4;
      goto LABEL_16;
    }
    a2 = (const char *)*(unsigned int *)(v12 + 60);
    if ((_DWORD)a2 != -1)
      a1 = Espresso::BNNSEngine::set_bnns_activation((uint64_t)&v84, a2, *(double *)(v12 + 64));
  }
LABEL_17:
  if (*(_BYTE *)(v11 + 65))
  {
    v106 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v49, 0, sizeof(v49));
    a1 = MEMORY[0x19401AB94](v50, buf, v49, v10, 0, 0, &v93);
    if ((_DWORD)a1)
      Espresso::throw_exception_selector<Espresso::generic_error>("BNNSNDArrayConvolutionSparsify failed (check BNNS logs)");
    v59 = v104;
    v60 = v105;
    v61 = v106;
    v55 = v100;
    v56 = v101;
    v57 = v102;
    v58 = v103;
    v51 = *(_OWORD *)buf;
    v52 = *(_OWORD *)&buf[16];
    v53 = v98;
    v54 = v99;
  }
  v46 = atomic_load((unsigned __int8 *)&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_NS1_IfLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
  if ((v46 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_NS1_IfLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    if ((_DWORD)a1)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      _ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_NS1_IfLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
      __cxa_guard_release(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_NS1_IfLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    }
  }
  if (_ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_NS1_IfLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v93;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v94;
      _os_log_debug_impl(&dword_190DAF000, v47, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerConvolution: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = MEMORY[0x19401A9FC](v50, &v93);
  ***(_QWORD ***)(v11 + 56) = result;
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Convolution Layer (check BNNS logs)");
  return result;
}

uint64_t ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_NS1_ItLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmb_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, _OWORD *a8, __int128 *a9, __int128 *a10)
{
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 v47;
  NSObject *v48;
  uint64_t result;
  _QWORD v50[3];
  _OWORD v51[11];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD v85[3];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[4];
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(void **, size_t, size_t);
  uint64_t (*v95)(_QWORD);
  uint8_t buf[32];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v10 = a2;
  v106 = *MEMORY[0x1E0C80C00];
  v94 = bnns_alloc_capmem;
  v95 = MEMORY[0x1E0C834A8];
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v92 = 0;
  v93 = v13;
  if (*(_DWORD *)(v12 + 160))
  {
    v14 = 3145728;
  }
  else
  {
    LODWORD(v92) = 1;
    v14 = 3145729;
  }
  if (*(_DWORD *)(v12 + 144))
    LODWORD(v92) = v14;
  memset(v91, 0, sizeof(v91));
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  *(_OWORD *)&v85[1] = 0u;
  v86 = 0u;
  v15 = a8[8];
  v16 = a8[9];
  v17 = a8[6];
  v51[7] = a8[7];
  v51[8] = v15;
  v18 = a8[10];
  v51[9] = v16;
  v51[10] = v18;
  v19 = a8[5];
  v51[4] = a8[4];
  v51[5] = v19;
  v51[6] = v17;
  v20 = a8[1];
  v51[0] = *a8;
  v51[1] = v20;
  v21 = a8[3];
  v51[2] = a8[2];
  v51[3] = v21;
  v22 = a7[8];
  v23 = a7[9];
  v24 = a7[6];
  v70 = a7[7];
  v71 = v22;
  v25 = a7[10];
  v72 = v23;
  v73 = v25;
  v26 = a7[4];
  v27 = a7[5];
  v28 = a7[2];
  v66 = a7[3];
  v67 = v26;
  v68 = v27;
  v69 = v24;
  v29 = *a7;
  v64 = a7[1];
  v65 = v28;
  v30 = a9[9];
  v60 = a9[8];
  v61 = v30;
  v62 = a9[10];
  v63 = v29;
  v31 = a9[5];
  v56 = a9[4];
  v57 = v31;
  v32 = a9[7];
  v58 = a9[6];
  v59 = v32;
  v33 = a9[1];
  v52 = *a9;
  v53 = v33;
  v34 = a9[3];
  v54 = a9[2];
  v55 = v34;
  v35 = a10[5];
  v78 = a10[4];
  v79 = v35;
  v36 = a10[10];
  v37 = a10[8];
  v83 = a10[9];
  v84 = v36;
  v38 = a10[7];
  v80 = a10[6];
  v81 = v38;
  v82 = v37;
  v39 = a10[1];
  v74 = *a10;
  v75 = v39;
  v40 = a10[3];
  v76 = a10[2];
  v77 = v40;
  *((_QWORD *)&v87 + 1) = *(__int16 *)(v12 + 92);
  *(_QWORD *)&v88 = *(__int16 *)(v12 + 94);
  *((_QWORD *)&v88 + 1) = *(__int16 *)(v12 + 96);
  *(_QWORD *)&v89 = *(__int16 *)(v12 + 98);
  *((_QWORD *)&v90 + 1) = *(int *)(v12 + 116);
  v41 = *(int **)(a1 + 48);
  if (*(_BYTE *)(a1 + 64))
  {
    v91[0] = *v41;
    v42 = *(_QWORD *)(v41 + 1);
    *(_QWORD *)&v43 = (int)v42;
    *((_QWORD *)&v43 + 1) = SHIDWORD(v42);
    *(_OWORD *)&v91[1] = v43;
    v91[3] = v41[3];
  }
  else
  {
    *((_QWORD *)&v89 + 1) = *v41;
    *(_QWORD *)&v90 = v41[2];
  }
  v44 = (uint64_t)v85;
  LODWORD(v85[0]) = 0;
  *(_QWORD *)((char *)v85 + 4) = 1065353216;
  if (!*(_DWORD *)(v12 + 112))
  {
    v45 = *(_DWORD *)(v12 + 24);
    if (v45 == 2)
    {
      v85[0] = 0x3E80000000000002;
      goto LABEL_17;
    }
    if (v45 == 1)
    {
      v46 = 1;
LABEL_16:
      LODWORD(v85[0]) = v46;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v12 + 28))
    {
      v46 = 4;
      goto LABEL_16;
    }
    a2 = (const char *)*(unsigned int *)(v12 + 60);
    if ((_DWORD)a2 != -1)
      v44 = Espresso::BNNSEngine::set_bnns_activation((uint64_t)v85, a2, *(double *)(v12 + 64));
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 65))
  {
    v105 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v50, 0, sizeof(v50));
    v44 = MEMORY[0x19401AB94](v51, buf, v50, v10, 0, 0, &v92);
    if ((_DWORD)v44)
      Espresso::throw_exception_selector<Espresso::generic_error>("BNNSNDArrayConvolutionSparsify failed (check BNNS logs)");
    v60 = v103;
    v61 = v104;
    v62 = v105;
    v56 = v99;
    v57 = v100;
    v58 = v101;
    v59 = v102;
    v52 = *(_OWORD *)buf;
    v53 = *(_OWORD *)&buf[16];
    v54 = v97;
    v55 = v98;
  }
  v47 = atomic_load((unsigned __int8 *)&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_NS1_ItLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
  if ((v47 & 1) == 0)
  {
    v44 = __cxa_guard_acquire(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_NS1_ItLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    if ((_DWORD)v44)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      _ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_NS1_ItLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
      __cxa_guard_release(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_NS1_ItLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested);
    }
  }
  if (_ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_NS1_ItLi4EEEEvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSJ_6vectorIPvNSJ_9allocatorISU_EEEEbmbEUb_E13log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v44, a2);
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v92;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v93;
      _os_log_debug_impl(&dword_190DAF000, v48, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerConvolution: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = MEMORY[0x19401A9FC](v51, &v92);
  ***(_QWORD ***)(a1 + 56) = result;
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Convolution Layer (check BNNS logs)");
  return result;
}

void create_azden_conv_bnns_filter<Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>,Espresso::blob<unsigned short,4>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, char a9)
{
  BOOL v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _QWORD v46[8];
  BOOL v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[4];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _QWORD v81[4];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD *v91;
  _BYTE *v92;
  uint64_t v93;
  __int128 __src;
  unint64_t v95;
  uint64_t v96;
  char v97[8];
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  v14 = *a6 != a6[1] || a6[2] != a6[3] || a6[4] != a6[5];
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v82 = 0u;
  v80 = 0u;
  memset(v81, 0, sizeof(v81));
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  memset(v71, 0, sizeof(v71));
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v46[0] = MEMORY[0x1E0C809B0];
  v46[1] = 3221225472;
  v46[2] = ___Z29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmb_block_invoke;
  v46[3] = &__block_descriptor_66_e120_v80__0Q8Q16Q24Q32Q40____II_8Q__8Q__vI_vIff_48____II_8Q__8Q__vI_vIff_56____II_8Q__8Q__vI_vIff_64____II_8Q__8Q__vI_vIff_72l;
  v46[4] = a8;
  v46[5] = a1;
  v47 = v14;
  v48 = a9;
  v46[6] = a6;
  v46[7] = a7;
  v15 = (void *)MEMORY[0x19401D648](v46);
  v16 = 0;
  if (*(_QWORD *)a5 && !*(_DWORD *)(a1 + 112))
    v16 = *(_QWORD *)(*(_QWORD *)a5 + 16);
  v43 = v16;
  v17 = v15;
  v18 = *(int *)(a1 + 40);
  v19 = *(int *)(a1 + 44);
  v21 = *(int *)(*(_QWORD *)a2 + 8);
  v20 = *(int *)(*(_QWORD *)a2 + 12);
  v42 = a3;
  v22 = *a3;
  v23 = *(int *)(*a3 + 8);
  v24 = *(int *)(v22 + 12);
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v26 = (int)v25;
  *((_QWORD *)&v26 + 1) = SHIDWORD(v25);
  __src = v26;
  v95 = v19;
  v96 = v18;
  v44 = v17;
  v45 = v18;
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&v91, (char *)&__src, v97, 4uLL);
  v27 = *(unsigned int *)(a1 + 116);
  if ((int)v27 >= 2)
    v91[2] = v19 / v27;
  v40 = a2;
  v41 = a4;
  v28 = operator new(0x18uLL);
  *v28 = v23;
  v28[1] = v24;
  v28[2] = v45;
  v29 = operator new(0x18uLL);
  v30 = v29;
  *v29 = v21;
  v29[1] = v20;
  v29[2] = v19;
  v31 = *(int *)(*v42 + 20);
  v32 = *(int *)(a1 + 40);
  v33 = *(int *)(a1 + 44);
  v34 = *(_QWORD *)(*v42 + 24);
  memset(v81, 0, sizeof(v81));
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  HIDWORD(v81[0]) = 196608;
  v35 = v28[2];
  *(_OWORD *)&v81[1] = *(_OWORD *)v28;
  v81[3] = v35;
  *((_QWORD *)&v88 + 1) = v34;
  LODWORD(v89) = 65552;
  DWORD1(v90) = 1065353216;
  if (*(_QWORD *)v40)
  {
    v36 = *(_QWORD *)(*(_QWORD *)v40 + 24);
    memset(v71, 0, sizeof(v71));
    v78 = 0uLL;
    v79 = 0uLL;
    v80 = 0uLL;
    v76 = 0uLL;
    v77 = 0uLL;
    v74 = 0uLL;
    v75 = 0uLL;
    v72 = 0uLL;
    v73 = 0uLL;
    HIDWORD(v71[0]) = 196608;
    *(_OWORD *)&v71[1] = *(_OWORD *)v29;
    v71[3] = v29[2];
    *((_QWORD *)&v78 + 1) = v36;
    LODWORD(v79) = 65552;
    DWORD1(v80) = 1065353216;
  }
  v37 = (int)v20 * (uint64_t)(int)v21 * v33;
  v38 = (int)v24 * (uint64_t)(int)v23 * v32;
  if (*(_QWORD *)v41)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v41 + 24);
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    DWORD1(v60) = 0x40000;
    if (v92 != (_BYTE *)v91)
      memmove((char *)&v60 + 8, v91, v92 - (_BYTE *)v91);
    *((_QWORD *)&v68 + 1) = v39;
    LODWORD(v69) = 65552;
    *(_QWORD *)((char *)&v70 + 4) = 1065353216;
  }
  if (v43)
  {
    *(_QWORD *)&v57 = 0;
    v58 = 0u;
    v59 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    *(_QWORD *)&v49 = 0x1000000000000;
    v50 = 0u;
    *((_QWORD *)&v49 + 1) = v45;
    *((_QWORD *)&v57 + 1) = v43;
    LODWORD(v58) = 65568;
    DWORD1(v59) = 1065353216;
  }
  (*((void (**)(id, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, _QWORD *, __int128 *, __int128 *))v44
   + 2))(v44, v31, v37, v38, 0, 0, v81, v71, &v60, &v49);
  operator delete(v30);
  operator delete(v28);
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }

}

void sub_1918C8460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  uint64_t v18;
  void *v20;

  operator delete(v17);
  operator delete(v16);
  v20 = *(void **)(v18 - 168);
  if (v20)
  {
    *(_QWORD *)(v18 - 160) = v20;
    operator delete(v20);
  }

  _Unwind_Resume(a1);
}

uint64_t ___Z29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmb_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, _OWORD *a8, __int128 *a9, __int128 *a10)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  int v44;
  int v45;
  unsigned __int8 v46;
  NSObject *v47;
  uint64_t result;
  _QWORD v49[3];
  _OWORD v50[11];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(void **, size_t, size_t);
  uint64_t (*v96)(_QWORD);
  uint8_t buf[32];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;

  v10 = a2;
  v11 = a1;
  v107 = *MEMORY[0x1E0C80C00];
  v95 = bnns_alloc_capmem;
  v96 = MEMORY[0x1E0C834A8];
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v93 = 0;
  v94 = v13;
  if (*(_DWORD *)(v12 + 160))
  {
    v14 = 3145728;
  }
  else
  {
    LODWORD(v93) = 1;
    v14 = 3145729;
  }
  if (*(_DWORD *)(v12 + 144))
    LODWORD(v93) = v14;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v15 = a8[8];
  v16 = a8[9];
  v17 = a8[6];
  v50[7] = a8[7];
  v50[8] = v15;
  v18 = a8[10];
  v50[9] = v16;
  v50[10] = v18;
  v19 = a8[5];
  v50[4] = a8[4];
  v50[5] = v19;
  v50[6] = v17;
  v20 = a8[1];
  v50[0] = *a8;
  v50[1] = v20;
  v21 = a8[3];
  v50[2] = a8[2];
  v50[3] = v21;
  v22 = a7[8];
  v23 = a7[9];
  v24 = a7[6];
  v69 = a7[7];
  v70 = v22;
  v25 = a7[10];
  v71 = v23;
  v72 = v25;
  v26 = a7[4];
  v27 = a7[5];
  v28 = a7[2];
  v65 = a7[3];
  v66 = v26;
  v67 = v27;
  v68 = v24;
  v29 = *a7;
  v63 = a7[1];
  v64 = v28;
  v30 = a9[9];
  v59 = a9[8];
  v60 = v30;
  v61 = a9[10];
  v62 = v29;
  v31 = a9[5];
  v55 = a9[4];
  v56 = v31;
  v32 = a9[7];
  v57 = a9[6];
  v58 = v32;
  v33 = a9[1];
  v51 = *a9;
  v52 = v33;
  v34 = a9[3];
  v53 = a9[2];
  v54 = v34;
  v35 = a10[5];
  v77 = a10[4];
  v78 = v35;
  v36 = a10[10];
  v37 = a10[8];
  v82 = a10[9];
  v83 = v36;
  v38 = a10[7];
  v79 = a10[6];
  v80 = v38;
  v81 = v37;
  v39 = a10[1];
  v73 = *a10;
  v74 = v39;
  v40 = a10[3];
  v75 = a10[2];
  v76 = v40;
  *((_QWORD *)&v87 + 1) = *(__int16 *)(v12 + 92);
  *(_QWORD *)&v88 = *(__int16 *)(v12 + 94);
  *((_QWORD *)&v88 + 1) = *(__int16 *)(v12 + 96);
  *(_QWORD *)&v89 = *(__int16 *)(v12 + 98);
  *((_QWORD *)&v90 + 1) = *(int *)(v12 + 116);
  if (*(_BYTE *)(a1 + 64))
  {
    v41 = 0;
    v42 = 0;
  }
  else
  {
    v43 = *(int **)(a1 + 48);
    v41 = *v43;
    v42 = v43[2];
  }
  *((_QWORD *)&v89 + 1) = v41;
  *(_QWORD *)&v90 = v42;
  v84 = 0x3F80000000000000;
  if (!*(_DWORD *)(v12 + 112))
  {
    v44 = *(_DWORD *)(v12 + 24);
    if (v44 == 2)
    {
      v84 = 0x3E80000000000002;
      goto LABEL_17;
    }
    if (v44 == 1)
    {
      v45 = 1;
LABEL_16:
      LODWORD(v84) = v45;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v12 + 28))
    {
      v45 = 4;
      goto LABEL_16;
    }
    a2 = (const char *)*(unsigned int *)(v12 + 60);
    if ((_DWORD)a2 != -1)
      a1 = Espresso::BNNSEngine::set_bnns_activation((uint64_t)&v84, a2, *(double *)(v12 + 64));
  }
LABEL_17:
  if (*(_BYTE *)(v11 + 65))
  {
    v106 = 0u;
    v104 = 0u;
    v105 = 0u;
    v102 = 0u;
    v103 = 0u;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v49, 0, sizeof(v49));
    a1 = MEMORY[0x19401AB94](v50, buf, v49, v10, 0, 0, &v93);
    if ((_DWORD)a1)
      Espresso::throw_exception_selector<Espresso::generic_error>("BNNSNDArrayConvolutionSparsify failed (check BNNS logs)");
    v59 = v104;
    v60 = v105;
    v61 = v106;
    v55 = v100;
    v56 = v101;
    v57 = v102;
    v58 = v103;
    v51 = *(_OWORD *)buf;
    v52 = *(_OWORD *)&buf[16];
    v53 = v98;
    v54 = v99;
  }
  v46 = atomic_load((unsigned __int8 *)&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested);
  if ((v46 & 1) == 0)
  {
    a1 = __cxa_guard_acquire(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested);
    if ((_DWORD)a1)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      _ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
      __cxa_guard_release(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested);
    }
  }
  if (_ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobItLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
    v47 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v93;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v94;
      _os_log_debug_impl(&dword_190DAF000, v47, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerConvolution: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = MEMORY[0x19401A9FC](v50, &v93);
  ***(_QWORD ***)(v11 + 56) = result;
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Convolution Layer (check BNNS logs)");
  return result;
}

void create_azden_conv_bnns_filter<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7, uint64_t a8, char a9)
{
  BOOL v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[8];
  BOOL v19;
  char v20;
  _OWORD v21[11];
  _BYTE v22[176];
  _BYTE v23[176];
  _BYTE v24[176];

  v14 = *a6 != a6[1] || a6[2] != a6[3] || a6[4] != a6[5];
  memset(v24, 0, sizeof(v24));
  memset(v23, 0, sizeof(v23));
  memset(v22, 0, sizeof(v22));
  memset(v21, 0, sizeof(v21));
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmb_block_invoke;
  v18[3] = &__block_descriptor_66_e120_v80__0Q8Q16Q24Q32Q40____II_8Q__8Q__vI_vIff_48____II_8Q__8Q__vI_vIff_56____II_8Q__8Q__vI_vIff_64____II_8Q__8Q__vI_vIff_72l;
  v18[4] = a8;
  v18[5] = a1;
  v19 = v14;
  v20 = a9;
  v18[6] = a6;
  v18[7] = a7;
  v15 = (void *)MEMORY[0x19401D648](v18);
  v16 = v15;
  v17 = 0;
  if (*(_QWORD *)a5 && !*(_DWORD *)(a1 + 112))
    v17 = *(_QWORD *)(*(_QWORD *)a5 + 16);
  Espresso::BNNSEngine::conv_groups<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(a1, a3, a2, a4, v17, 0, (uint64_t)v24, (uint64_t)v23, (uint64_t)v22, (uint64_t)v21, v15);

}

void sub_1918C8A0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___Z29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmb_block_invoke(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, _OWORD *a8, __int128 *a9, __int128 *a10)
{
  const char *v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned __int8 v47;
  NSObject *v48;
  uint64_t result;
  _QWORD v50[3];
  _OWORD v51[11];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _QWORD v85[3];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  _QWORD v91[4];
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(void **, size_t, size_t);
  uint64_t (*v95)(_QWORD);
  uint8_t buf[32];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v10 = a2;
  v106 = *MEMORY[0x1E0C80C00];
  v94 = bnns_alloc_capmem;
  v95 = MEMORY[0x1E0C834A8];
  v13 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v92 = 0;
  v93 = v13;
  if (*(_DWORD *)(v12 + 160))
  {
    v14 = 3145728;
  }
  else
  {
    LODWORD(v92) = 1;
    v14 = 3145729;
  }
  if (*(_DWORD *)(v12 + 144))
    LODWORD(v92) = v14;
  memset(v91, 0, sizeof(v91));
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  *(_OWORD *)&v85[1] = 0u;
  v86 = 0u;
  v15 = a8[8];
  v16 = a8[9];
  v17 = a8[6];
  v51[7] = a8[7];
  v51[8] = v15;
  v18 = a8[10];
  v51[9] = v16;
  v51[10] = v18;
  v19 = a8[5];
  v51[4] = a8[4];
  v51[5] = v19;
  v51[6] = v17;
  v20 = a8[1];
  v51[0] = *a8;
  v51[1] = v20;
  v21 = a8[3];
  v51[2] = a8[2];
  v51[3] = v21;
  v22 = a7[8];
  v23 = a7[9];
  v24 = a7[6];
  v70 = a7[7];
  v71 = v22;
  v25 = a7[10];
  v72 = v23;
  v73 = v25;
  v26 = a7[4];
  v27 = a7[5];
  v28 = a7[2];
  v66 = a7[3];
  v67 = v26;
  v68 = v27;
  v69 = v24;
  v29 = *a7;
  v64 = a7[1];
  v65 = v28;
  v30 = a9[9];
  v60 = a9[8];
  v61 = v30;
  v62 = a9[10];
  v63 = v29;
  v31 = a9[5];
  v56 = a9[4];
  v57 = v31;
  v32 = a9[7];
  v58 = a9[6];
  v59 = v32;
  v33 = a9[1];
  v52 = *a9;
  v53 = v33;
  v34 = a9[3];
  v54 = a9[2];
  v55 = v34;
  v35 = a10[5];
  v78 = a10[4];
  v79 = v35;
  v36 = a10[10];
  v37 = a10[8];
  v83 = a10[9];
  v84 = v36;
  v38 = a10[7];
  v80 = a10[6];
  v81 = v38;
  v82 = v37;
  v39 = a10[1];
  v74 = *a10;
  v75 = v39;
  v40 = a10[3];
  v76 = a10[2];
  v77 = v40;
  *((_QWORD *)&v87 + 1) = *(__int16 *)(v12 + 92);
  *(_QWORD *)&v88 = *(__int16 *)(v12 + 94);
  *((_QWORD *)&v88 + 1) = *(__int16 *)(v12 + 96);
  *(_QWORD *)&v89 = *(__int16 *)(v12 + 98);
  *((_QWORD *)&v90 + 1) = *(int *)(v12 + 116);
  v41 = *(int **)(a1 + 48);
  if (*(_BYTE *)(a1 + 64))
  {
    v91[0] = *v41;
    v42 = *(_QWORD *)(v41 + 1);
    *(_QWORD *)&v43 = (int)v42;
    *((_QWORD *)&v43 + 1) = SHIDWORD(v42);
    *(_OWORD *)&v91[1] = v43;
    v91[3] = v41[3];
  }
  else
  {
    *((_QWORD *)&v89 + 1) = *v41;
    *(_QWORD *)&v90 = v41[2];
  }
  v44 = (uint64_t)v85;
  LODWORD(v85[0]) = 0;
  *(_QWORD *)((char *)v85 + 4) = 1065353216;
  if (!*(_DWORD *)(v12 + 112))
  {
    v45 = *(_DWORD *)(v12 + 24);
    if (v45 == 2)
    {
      v85[0] = 0x3E80000000000002;
      goto LABEL_17;
    }
    if (v45 == 1)
    {
      v46 = 1;
LABEL_16:
      LODWORD(v85[0]) = v46;
      goto LABEL_17;
    }
    if (*(_DWORD *)(v12 + 28))
    {
      v46 = 4;
      goto LABEL_16;
    }
    a2 = (const char *)*(unsigned int *)(v12 + 60);
    if ((_DWORD)a2 != -1)
      v44 = Espresso::BNNSEngine::set_bnns_activation((uint64_t)v85, a2, *(double *)(v12 + 64));
  }
LABEL_17:
  if (*(_BYTE *)(a1 + 65))
  {
    v105 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    memset(buf, 0, sizeof(buf));
    memset(v50, 0, sizeof(v50));
    v44 = MEMORY[0x19401AB94](v51, buf, v50, v10, 0, 0, &v92);
    if ((_DWORD)v44)
      Espresso::throw_exception_selector<Espresso::generic_error>("BNNSNDArrayConvolutionSparsify failed (check BNNS logs)");
    v60 = v103;
    v61 = v104;
    v62 = v105;
    v56 = v99;
    v57 = v100;
    v58 = v101;
    v59 = v102;
    v52 = *(_OWORD *)buf;
    v53 = *(_OWORD *)&buf[16];
    v54 = v97;
    v55 = v98;
  }
  v47 = atomic_load((unsigned __int8 *)&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested);
  if ((v47 & 1) == 0)
  {
    v44 = __cxa_guard_acquire(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested);
    if ((_DWORD)v44)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      _ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
      __cxa_guard_release(&_ZGVZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested);
    }
  }
  if (_ZZZ29create_azden_conv_bnns_filterIN8Espresso4blobIfLi4EEES2_S2_EvRKNS0_20convolution_uniformsERKNT0_3ptrERKNT_3ptrERKNT1_3ptrERKNSt3__110shared_ptrINS1_IfLi1EEEEERKNS0_16padding_params_t4lrtbERNSI_6vectorIPvNSI_9allocatorIST_EEEEbmbEUb_E13log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v44, a2);
    v48 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v92;
      *(_WORD *)&buf[8] = 2048;
      *(_QWORD *)&buf[10] = v93;
      _os_log_debug_impl(&dword_190DAF000, v48, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerConvolution: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = MEMORY[0x19401A9FC](v51, &v92);
  ***(_QWORD ***)(a1 + 56) = result;
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Convolution Layer (check BNNS logs)");
  return result;
}

void Espresso::BNNSEngine::conv_groups<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v46;
  void *__p;
  _BYTE *v48;
  uint64_t v49;
  __int128 __src;
  uint64_t v51;
  uint64_t v52;
  char v53[16];

  *(_QWORD *)v53 = *MEMORY[0x1E0C80C00];
  v46 = a11;
  __p = 0;
  v17 = *(int *)(a1 + 40);
  v18 = *(int *)(a1 + 44);
  v42 = a2;
  v43 = a3;
  v19 = *(int *)(*(_QWORD *)a3 + 12);
  v41 = *(int *)(*(_QWORD *)a3 + 8);
  v21 = *(int *)(*(_QWORD *)a2 + 8);
  v20 = *(int *)(*(_QWORD *)a2 + 12);
  v48 = 0;
  v49 = 0;
  if (a6)
  {
    v22 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)&v23 = (int)v22;
    *((_QWORD *)&v23 + 1) = SHIDWORD(v22);
    __src = v23;
    v51 = v17;
    v52 = v18;
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&__p, (char *)&__src, v53, 4uLL);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)&v25 = (int)v24;
    *((_QWORD *)&v25 + 1) = SHIDWORD(v24);
    __src = v25;
    v51 = v18;
    v52 = v17;
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(&__p, (char *)&__src, v53, 4uLL);
    v26 = *(unsigned int *)(a1 + 116);
    if ((int)v26 >= 2)
      *((_QWORD *)__p + 2) = v18 / v26;
  }
  v40 = a6;
  v27 = operator new(0x18uLL);
  *v27 = v21;
  v27[1] = v20;
  v27[2] = v17;
  v28 = operator new(0x18uLL);
  v29 = v28;
  *v28 = v41;
  v28[1] = v19;
  v28[2] = v18;
  v30 = *(int *)(*(_QWORD *)v42 + 20);
  v31 = *(int *)(a1 + 40);
  v32 = *(int *)(a1 + 44);
  v33 = *(_QWORD *)(*(_QWORD *)v42 + 24);
  *(_OWORD *)(a7 + 144) = 0u;
  *(_OWORD *)(a7 + 160) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_DWORD *)(a7 + 4) = 196608;
  *(_OWORD *)(a7 + 8) = *(_OWORD *)v27;
  *(_QWORD *)(a7 + 24) = v27[2];
  *(_QWORD *)(a7 + 136) = v33;
  *(_DWORD *)(a7 + 144) = 65568;
  *(_DWORD *)(a7 + 164) = 1065353216;
  if (*(_QWORD *)v43)
  {
    v34 = *(_QWORD *)(*(_QWORD *)v43 + 24);
    *(_OWORD *)a8 = 0uLL;
    *(_OWORD *)(a8 + 16) = 0uLL;
    *(_OWORD *)(a8 + 128) = 0uLL;
    *(_OWORD *)(a8 + 144) = 0uLL;
    *(_OWORD *)(a8 + 160) = 0uLL;
    *(_OWORD *)(a8 + 96) = 0uLL;
    *(_OWORD *)(a8 + 112) = 0uLL;
    *(_OWORD *)(a8 + 64) = 0uLL;
    *(_OWORD *)(a8 + 80) = 0uLL;
    *(_OWORD *)(a8 + 32) = 0uLL;
    *(_OWORD *)(a8 + 48) = 0uLL;
    *(_DWORD *)(a8 + 4) = 196608;
    *(_OWORD *)(a8 + 8) = *(_OWORD *)v28;
    *(_QWORD *)(a8 + 24) = v28[2];
    *(_QWORD *)(a8 + 136) = v34;
    *(_DWORD *)(a8 + 144) = 65568;
    *(_DWORD *)(a8 + 164) = 1065353216;
  }
  v35 = (int)v19 * (uint64_t)(int)v41 * v32;
  v36 = (int)v20 * (uint64_t)(int)v21 * v31;
  if (*(_QWORD *)a4)
  {
    v37 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    *(_OWORD *)(a9 + 144) = 0u;
    *(_OWORD *)(a9 + 160) = 0u;
    *(_OWORD *)(a9 + 112) = 0u;
    *(_OWORD *)(a9 + 128) = 0u;
    *(_OWORD *)(a9 + 80) = 0u;
    *(_OWORD *)(a9 + 96) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)(a9 + 64) = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)a9 = 0u;
    if (v40)
      v38 = 262147;
    else
      v38 = 0x40000;
    *(_DWORD *)(a9 + 4) = v38;
    if (v48 != __p)
    {
      v39 = v30;
      memmove((void *)(a9 + 8), __p, v48 - (_BYTE *)__p);
      v30 = v39;
    }
    *(_QWORD *)(a9 + 136) = v37;
    *(_DWORD *)(a9 + 144) = 65568;
    *(_QWORD *)(a9 + 164) = 1065353216;
  }
  if (a5)
  {
    *(_OWORD *)(a10 + 128) = 0u;
    *(_OWORD *)(a10 + 144) = 0u;
    *(_OWORD *)(a10 + 160) = 0u;
    *(_OWORD *)(a10 + 96) = 0u;
    *(_OWORD *)(a10 + 112) = 0u;
    *(_OWORD *)(a10 + 64) = 0u;
    *(_OWORD *)(a10 + 80) = 0u;
    *(_OWORD *)(a10 + 32) = 0u;
    *(_OWORD *)(a10 + 48) = 0u;
    *(_OWORD *)a10 = 0u;
    *(_OWORD *)(a10 + 16) = 0u;
    *(_DWORD *)(a10 + 4) = 0x10000;
    *(_QWORD *)(a10 + 8) = v17;
    *(_QWORD *)(a10 + 136) = a5;
    *(_DWORD *)(a10 + 144) = 65568;
    *(_DWORD *)(a10 + 164) = 1065353216;
  }
  (*((void (**)(id, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))v46 + 2))(v46, v30, v35, v36, 0, 0, a7, a8, a9, a10);
  operator delete(v29);
  operator delete(v27);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }

}

void sub_1918C9150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::~deconvolution_kernel(void ***this)
{
  Espresso::BNNSEngine::deconvolution_kernel::~deconvolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  void **v2;
  void **v3;

  *this = (void **)&off_1E2D5DEB8;
  v2 = (void **)(this + 83);
  Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(this + 83);
  v3 = (void **)*v2;
  if (*v2)
  {
    this[84] = v3;
    operator delete(v3);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 81));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 77));
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_deconvolution_kernel>::~base_bnns_kernel((void **)this);
}

void Espresso::BNNSEngine::deconvolution_kernel::__launch(_QWORD *a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  vImagePixelCount v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  char *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *height;
  unint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  size_t v48;
  _QWORD *v49;
  int v50;
  void ***v51;
  void **v52;
  __int128 v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  float v67;
  float v68;
  float *v69;
  unsigned __int8 *v70;
  uint64_t v71;
  unsigned int v72;
  void **v73;
  unint64_t *v74;
  unint64_t v75;
  void **v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  void **v83;
  void **v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  void ***v101;
  int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v116;
  int v117;
  _QWORD *data;
  int v119;
  int v120;
  int i;
  __int128 v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  __int128 *v129;
  char *v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  void **v143;
  BOOL v144;
  void *v145;
  void *v146;
  uint64_t v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t v150;
  void *v151;
  uint64_t v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  _WORD *v166;
  uint64_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float *v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  float *v176;
  uint64_t v177;
  uint64_t j;
  int *v179;
  _WORD *v180;
  uint64_t v181;
  int v182;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  __int128 v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  vImagePixelCount v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  vImagePixelCount v202;
  unint64_t *v203;
  unint64_t v204;
  std::__shared_weak_count *v205;
  unint64_t *v206;
  unint64_t v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  vDSP_Length v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  float *v224;
  float *v225;
  float v226;
  float v227;
  float v228;
  float v229;
  int v230;
  float v231;
  int v232;
  vDSP_Length k;
  uint64_t v234;
  vDSP_Length v235;
  uint64_t v236;
  float v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  std::__shared_weak_count *v251;
  unint64_t *v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  std::__shared_weak_count *v257;
  unint64_t *v258;
  unint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  void **v270;
  unint64_t *v271;
  unint64_t v272;
  const char *v273;
  const char *v274;
  std::runtime_error *exception;
  uint64_t v276;
  _BOOL4 v277;
  int v278;
  uint64_t v279;
  char **v280;
  int v281;
  void ***v282;
  char *v283;
  size_t batch_size;
  __int128 v285;
  unint64_t v286;
  void **v287;
  std::__shared_weak_count *v288;
  void **v289;
  std::__shared_weak_count *v290;
  _QWORD v291[2];
  __int128 v292;
  uint64_t v293;
  std::__shared_weak_count *v294;
  uint64_t v295;
  std::__shared_weak_count *v296;
  uint64_t v297;
  std::__shared_weak_count *v298;
  char *v299;
  std::__shared_weak_count *v300;
  __int128 v301;
  _QWORD v302[8];
  BOOL v303;
  _BYTE v304[176];
  _QWORD v305[22];
  vImage_Buffer dest;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  vImage_Buffer src;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;

  v8 = a1[72];
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
    return;
  }
  v9 = a1[80];
  *(_QWORD *)&v301 = a1[79];
  *((_QWORD *)&v301 + 1) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = a4[1];
  if ((unint64_t)(v12 - *a4) >= 0x11)
  {
    v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v12, 1);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v301, v13[20], v13[21]);
  }
  v14 = (std::__shared_weak_count *)a1[78];
  v299 = (char *)a1[77];
  v300 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = a4[1];
  if ((unint64_t)(v17 - *a4) >= 0x21)
  {
    v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v17, 2);
    v20 = v18[20];
    v19 = v18[21];
    src.data = (void *)v20;
    src.height = v19;
    if (v19)
    {
      v21 = (unint64_t *)(v19 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = 0;
    v24 = *(_DWORD *)(v20 + 8);
    do
    {
      v24 *= *(_DWORD *)(v20 + 12 + v23);
      v23 += 4;
    }
    while (v23 != 12);
    v25 = (char *)operator new(0x58uLL);
    *((_QWORD *)v25 + 1) = 0;
    *((_QWORD *)v25 + 2) = 0;
    *(_QWORD *)v25 = &off_1E2DBEC00;
    v26 = *(_QWORD *)(v20 + 24);
    *((_QWORD *)v25 + 3) = &off_1E2DA1190;
    *(_OWORD *)(v25 + 72) = 0u;
    *(_OWORD *)(v25 + 56) = 0u;
    *((_DWORD *)v25 + 8) = v24;
    *((_QWORD *)v25 + 5) = v26;
    v25[48] = 0;
    v299 = v25 + 24;
    v300 = (std::__shared_weak_count *)v25;
    if (v14)
    {
      v27 = (unint64_t *)&v14->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    height = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v30 = (unint64_t *)(src.height + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
  }
  v32 = *a3;
  if (a3[1] == *a3 || !*v32 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v32 + 32))(*v32))
  {
    v33 = 0;
    v297 = 0;
    v298 = 0;
  }
  else
  {
    v134 = *v32;
    v33 = *(_QWORD *)(*v32 + 160);
    v135 = *(std::__shared_weak_count **)(v134 + 168);
    v297 = v33;
    v298 = v135;
    if (v135)
    {
      v136 = (unint64_t *)&v135->__shared_owners_;
      do
        v137 = __ldxr(v136);
      while (__stxr(v137 + 1, v136));
    }
  }
  v34 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v34 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v34 + 32))(*v34))
  {
    v35 = 0;
    v295 = 0;
    v296 = 0;
  }
  else
  {
    v138 = *v34;
    v35 = *(_QWORD *)(*v34 + 160);
    v139 = *(std::__shared_weak_count **)(v138 + 168);
    v295 = v35;
    v296 = v139;
    if (v139)
    {
      v140 = (unint64_t *)&v139->__shared_owners_;
      do
        v141 = __ldxr(v140);
      while (__stxr(v141 + 1, v140));
    }
  }
  v36 = *a3;
  if (a3[1] != *a3 && *v36 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v36 + 32))(*v36) == 1)
  {
    v37 = *v36;
    v39 = *(_QWORD *)(*v36 + 176);
    v38 = *(std::__shared_weak_count **)(v37 + 184);
    v293 = v39;
    v294 = v38;
    if (v38)
    {
      v40 = (unint64_t *)&v38->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
  }
  else
  {
    v39 = 0;
    v293 = 0;
    v294 = 0;
  }
  v42 = (_QWORD *)*a4;
  if (a4[1] != *a4 && *v42 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v42 + 32))(*v42) == 1)
  {
    v43 = *(_QWORD *)(*v42 + 176);
    v44 = *(_QWORD *)(*v42 + 184);
    *(_QWORD *)&v292 = v43;
    *((_QWORD *)&v292 + 1) = v44;
    if (v44)
    {
      v45 = (unint64_t *)(v44 + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
  }
  else
  {
    v43 = 0;
    v292 = 0uLL;
  }
  if (!(v33 | v39))
  {
    v273 = "Null output blobs";
    goto LABEL_347;
  }
  if (!(v35 | v43))
  {
    v273 = "Null input blobs";
LABEL_347:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v273);
  }
  if (v33)
    v47 = v33;
  else
    v47 = v39;
  v48 = *(int *)(v47 + 20);
  v277 = (unint64_t)(a4[1] - *a4) > 0x10;
  v49 = a1 + 1;
  v50 = *(_DWORD *)(a1[1] + 76);
  v51 = (void ***)a1;
  v52 = (void **)v301;
  v282 = v51;
  batch_size = v48;
  if ((_QWORD)v301)
  {
    if (v51[81])
    {
LABEL_92:
      v278 = 0;
LABEL_93:
      v289 = v52;
      v290 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
      if (*((_QWORD *)&v301 + 1))
      {
        v74 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      goto LABEL_96;
    }
  }
  else
  {
    if (v51[63] && v51[65])
    {
      ((void (*)(vImage_Buffer *__return_ptr, void ***))(*v51)[59])(&src, v51);
      v53 = *(_OWORD *)&src.data;
      src.height = 0;
      src.data = 0;
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
      v301 = v53;
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v57 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v58 = (unint64_t *)(src.height + 8);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
          std::__shared_weak_count::__release_weak(v57);
        }
      }
      v60 = *((unsigned int *)v51 + 86);
      v52 = (void **)v301;
      if ((int)v60 >= 1)
      {
        v61 = 0;
        v62 = 0;
        v63 = 0;
        v64 = *(int *)(v301 + 12) * (uint64_t)*(int *)(v301 + 8) * *(int *)(v301 + 16);
        v65 = (float *)v51[63][2];
        v66 = (*(_DWORD *)(v301 + 12) * *(_DWORD *)(v301 + 8) * *(_DWORD *)(v301 + 16));
        do
        {
          if ((int)v66 >= 1)
          {
            v67 = v65[v63];
            v68 = v65[v63 + v60] - v67;
            v69 = (float *)((char *)v52[3] + v62);
            v70 = (unsigned __int8 *)v51[65][3] + v61;
            v71 = v66;
            do
            {
              v72 = *v70++;
              *v69++ = v67 + (float)((float)((float)v72 * 0.0039216) * v68);
              --v71;
            }
            while (v71);
          }
          ++v63;
          v62 += 4 * v64;
          v61 += v64;
        }
        while (v63 != v60);
      }
      v277 = 1;
      v278 = 0;
      if (v52)
        goto LABEL_93;
      goto LABEL_81;
    }
    if (v51[81])
    {
      v278 = 0;
      goto LABEL_81;
    }
  }
  if (v51[79]
    || v50
    || (v73 = v51[59]) == 0
    || !*v73
    || !v73[4] && !v73[6] && !v73[8] && !v73[10]
    || v51[83] != v51[84])
  {
    if (!(_QWORD)v301)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Conv weights not set");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    goto LABEL_92;
  }
  ((void (*)(vImage_Buffer *__return_ptr, void ***))(*v51)[77])(&src, v51);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v51 + 81), (__int128 *)&src);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&src);
  v269 = (uint64_t)v51[59];
  v270 = v51[82];
  v291[0] = v51[81];
  v291[1] = v270;
  if (v270)
  {
    v271 = (unint64_t *)(v270 + 1);
    do
      v272 = __ldxr(v271);
    while (__stxr(v272 + 1, v271));
  }
  Espresso::quantized_weights_helper::dequantize_to_float16_4d(v269);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v291);
  v278 = 1;
  v52 = (void **)v301;
  if ((_QWORD)v301)
    goto LABEL_93;
LABEL_81:
  v52 = 0;
  v289 = 0;
  v290 = 0;
LABEL_96:
  v76 = v51[81];
  if (v76)
  {
    v77 = (std::__shared_weak_count *)v51[82];
    v287 = v51[81];
    v288 = v77;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldxr(v78);
      while (__stxr(v79 + 1, v78));
    }
  }
  else
  {
    v287 = 0;
    v288 = 0;
  }
  v80 = *(_QWORD *)*a4;
  v81 = *(_DWORD *)(v80 + 8);
  v82 = *(_DWORD *)(v80 + 12);
  if (v81 != *((_DWORD *)v282 + 148)
    || v82 != *((_DWORD *)v282 + 149)
    || v52 && (v83 = v282[86], v52[3] != v83) && v76 && v76[3] != v83)
  {
    Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters(v282 + 83);
    *((_DWORD *)v282 + 148) = v81;
    *((_DWORD *)v282 + 149) = v82;
    if (v76)
      v84 = v76;
    else
      v84 = v52;
    v282[86] = (void **)v84[3];
  }
  v85 = **a3;
  v86 = *(_DWORD *)(v85 + 8);
  v87 = *(_DWORD *)(v85 + 12);
  v88 = *((__int16 *)v282 + 200);
  v89 = *((_DWORD *)v282 + 88);
  v90 = *((__int16 *)v282 + 201);
  v91 = *((_DWORD *)v282 + 89);
  v92 = *((__int16 *)v282 + 198);
  v93 = *((__int16 *)v282 + 199);
  v94 = *((__int16 *)v282 + 192);
  v95 = *((__int16 *)v282 + 193);
  *(_QWORD *)&v285 = __PAIR64__(v95, v94);
  v96 = *((__int16 *)v282 + 194);
  v97 = *((__int16 *)v282 + 195);
  *((_QWORD *)&v285 + 1) = __PAIR64__(v97, v96);
  v98 = *((__int16 *)v282 + 196);
  v99 = *((__int16 *)v282 + 197);
  v286 = __PAIR64__(v98, v99);
  v100 = *((__int16 *)v282 + 188);
  v101 = v282;
  switch(v100)
  {
    case 4:
      goto LABEL_115;
    case 2:
      v285 = 0uLL;
      v286 = 0;
      goto LABEL_167;
    case 1:
LABEL_115:
      v98 = 0;
      v99 = 0;
      v102 = (v91 - 1) * v90 - v82 + (v87 - 1) * v93 + 1;
      v103 = (v89 - 1) * v88 - v81 + (v86 - 1) * v92 + 1;
      v104 = v102 & ~(v102 >> 31);
      v105 = v103 & ~(v103 >> 31);
      v106 = v105 >> 1;
      v107 = v105 - (v105 >> 1);
      v108 = v104 >> 1;
      v109 = v104 - (v104 >> 1);
      if (*((_WORD *)v282 + 188) == 1)
        v94 = v106;
      else
        v94 = v107;
      if (*((_WORD *)v282 + 188) == 1)
        v95 = v107;
      else
        v95 = v106;
      v110 = 12;
      if (*((_WORD *)v282 + 188) == 1)
        v111 = 8;
      else
        v111 = 12;
      if (*((_WORD *)v282 + 188) != 1)
        v110 = 8;
      *(_DWORD *)((char *)&v285 + v111) = v108;
      *(_DWORD *)((char *)&v285 + v110) = v109;
      if ((unsigned __int16)v100 == 1)
        v112 = 20;
      else
        v112 = 16;
      if ((unsigned __int16)v100 == 1)
        v113 = 16;
      else
        v113 = 20;
      if ((unsigned __int16)v100 == 1)
        v97 = v109;
      else
        v97 = v108;
      if ((unsigned __int16)v100 == 1)
        v96 = v108;
      else
        v96 = v109;
      *(_QWORD *)&v285 = __PAIR64__(v95, v94);
      *(_DWORD *)((char *)&v285 + v112) = 0;
      *(_DWORD *)((char *)&v285 + v113) = 0;
      break;
  }
  if (v94 != v95 || v96 != v97 || v99 != v98)
  {
    v116 = v292;
    if ((_QWORD)v292)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int &,int &,int &,int &,void>(&src, v95 + v94 + *(_DWORD *)(v292 + 8), v96 + *(_DWORD *)(v292 + 12) + v97, *(_DWORD *)(v292 + 16), *(_DWORD *)(v292 + 20));
      if (*(int *)(v116 + 20) >= 1)
      {
        v117 = 0;
        data = src.data;
        do
        {
          if (*(int *)(v116 + 16) >= 1)
          {
            v119 = 0;
            do
            {
              v120 = *(_DWORD *)(v116 + 12);
              if (v120 >= 1)
              {
                for (i = 0; i < v120; ++i)
                {
                  memcpy((void *)(data[3]+ 2 * *((_DWORD *)data + 3) * *((_DWORD *)data + 2) * v117 * *((_DWORD *)data + 4)+ 2 * *((_DWORD *)data + 3) * *((_DWORD *)data + 2) * v119+ 2 * (i + DWORD2(v285)) * *((_DWORD *)data + 2)+ 2 * (int)v285), (const void *)(*(_QWORD *)(v116 + 24)+ 2 * *(_DWORD *)(v116 + 8) * v120 * v117 * *(_DWORD *)(v116 + 16)+ 2 * *(_DWORD *)(v116 + 8) * v120 * v119+ 2 * *(_DWORD *)(v116 + 8) * i), 2 * *(int *)(v116 + 8));
                  v120 = *(_DWORD *)(v116 + 12);
                }
              }
              ++v119;
            }
            while (v119 < *(_DWORD *)(v116 + 16));
          }
          ++v117;
        }
        while (v117 < *(_DWORD *)(v116 + 20));
      }
      v122 = *(_OWORD *)&src.data;
      src.height = 0;
      src.data = 0;
      v123 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
      v292 = v122;
      v101 = v282;
      if (v123)
      {
        v124 = (unint64_t *)&v123->__shared_owners_;
        do
          v125 = __ldaxr(v124);
        while (__stlxr(v125 - 1, v124));
        if (!v125)
        {
          ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
          std::__shared_weak_count::__release_weak(v123);
        }
      }
      v126 = (std::__shared_weak_count *)src.height;
      if (src.height)
      {
        v127 = (unint64_t *)(src.height + 8);
        do
          v128 = __ldaxr(v127);
        while (__stlxr(v128 - 1, v127));
        if (!v128)
        {
          ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
          std::__shared_weak_count::__release_weak(v126);
        }
      }
    }
  }
LABEL_167:
  v129 = (__int128 *)(v101 + 38);
  v280 = (char **)(v101 + 83);
  if (v101[84] == v101[83])
  {
    std::vector<void *>::resize(v280, 1uLL);
    v130 = v299;
    if (v299)
    {
      v131 = v300;
      if (v300)
      {
        v132 = (unint64_t *)&v300->__shared_owners_;
        do
          v133 = __ldxr(v132);
        while (__stxr(v133 + 1, v132));
      }
    }
    else
    {
      v131 = 0;
    }
    LODWORD(v142) = *((_DWORD *)v282 + 105);
    if ((int)v142 <= 1)
      v142 = 1;
    else
      v142 = v142;
    if (v142 != v282[84] - v282[83])
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("bnns_filters_ref.size() != n_groups");
    v143 = v282[75];
    v144 = *(_QWORD *)((char *)&v285 + 4) != __PAIR64__(HIDWORD(v285), v285) || (_DWORD)v286 != HIDWORD(v286);
    v324 = 0u;
    v325 = 0u;
    v322 = 0u;
    v323 = 0u;
    v320 = 0u;
    v321 = 0u;
    v318 = 0u;
    v319 = 0u;
    v317 = 0u;
    v315 = 0u;
    memset(&src, 0, sizeof(src));
    v313 = 0u;
    v314 = 0u;
    v311 = 0u;
    v312 = 0u;
    v309 = 0u;
    v310 = 0u;
    v307 = 0u;
    v308 = 0u;
    memset(&dest, 0, sizeof(dest));
    memset(v305, 0, sizeof(v305));
    memset(v304, 0, sizeof(v304));
    v302[0] = MEMORY[0x1E0C809B0];
    v302[1] = 3221225472;
    v302[2] = ___ZN8Espresso10BNNSEngine20deconvolution_kernel18create_bnns_filterERKNS_20convolution_uniformsERKNSt3__110shared_ptrINS_4blobIfLi4EEEEESB_SB_RKNS6_INS7_IfLi1EEEEERKNS_16padding_params_t4lrtbERNS5_6vectorIPvNS5_9allocatorISL_EEEEbm_block_invoke;
    v302[3] = &__block_descriptor_65_e120_v80__0Q8Q16Q24Q32Q40____II_8Q__8Q__vI_vIff_48____II_8Q__8Q__vI_vIff_56____II_8Q__8Q__vI_vIff_64____II_8Q__8Q__vI_vIff_72l;
    v302[4] = v143;
    v302[5] = v129;
    v303 = v144;
    v302[6] = &v285;
    v302[7] = v280;
    v145 = (void *)MEMORY[0x19401D648](v302);
    v146 = v145;
    v147 = 0;
    if (v130 && !*((_DWORD *)v282 + 104))
      v147 = *((_QWORD *)v130 + 2);
    Espresso::BNNSEngine::conv_groups<Espresso::blob<float,4>,Espresso::blob<float,4>,Espresso::blob<float,4>>((uint64_t)v129, (uint64_t)&v297, (uint64_t)&v295, (uint64_t)&v289, v147, 1, (uint64_t)&src, (uint64_t)&dest, (uint64_t)v305, (uint64_t)v304, v145);

    if (v131)
    {
      v148 = (unint64_t *)&v131->__shared_owners_;
      do
        v149 = __ldaxr(v148);
      while (__stlxr(v149 - 1, v148));
      if (!v149)
      {
        ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
        std::__shared_weak_count::__release_weak(v131);
      }
    }
    v101 = v282;
  }
  v150 = v297;
  if (!v297)
  {
    v274 = "deconvolution_kernel: one fp32 output is required";
    goto LABEL_350;
  }
  if (!v295)
  {
    v274 = "deconvolution_kernel: one fp32 input is required";
LABEL_350:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v274);
  }
  v276 = (uint64_t)(v101 + 81);
  v151 = *(void **)*v280;
  if (!v151
    || BNNSFilterApplyBatch(v151, batch_size, *(const void **)(v295 + 24), *(_DWORD *)(v295 + 12) * *(_DWORD *)(v295 + 16) * *(_DWORD *)(v295 + 8), *(void **)(v297 + 24), *(int *)(v297 + 12) * (uint64_t)*(int *)(v297 + 8) * *(int *)(v297 + 16)) == -1)
  {
    v190 = operator new(0x288uLL);
    v190[1] = 0;
    v190[2] = 0;
    *v190 = &off_1E2DBD1F8;
    *(_QWORD *)&v192 = Espresso::deconvolution_kernel_cpu::deconvolution_kernel_cpu((uint64_t)(v190 + 3), v49, v191, v129);
    *((_QWORD *)&v192 + 1) = v190;
    v193 = (std::__shared_weak_count *)v101[73];
    *((_OWORD *)v101 + 36) = v192;
    if (v193)
    {
      v194 = (unint64_t *)&v193->__shared_owners_;
      do
        v195 = __ldaxr(v194);
      while (__stlxr(v195 - 1, v194));
      if (!v195)
      {
        ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
        std::__shared_weak_count::__release_weak(v193);
      }
    }
    v196 = (vImagePixelCount)v101[80];
    src.data = v101[79];
    src.height = v196;
    if (v196)
    {
      v197 = (unint64_t *)(v196 + 8);
      do
        v198 = __ldxr(v197);
      while (__stxr(v198 + 1, v197));
    }
    ((void (*)(void ***, vImage_Buffer *))(*v101)[50])(v101, &src);
    v199 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v200 = (unint64_t *)(src.height + 8);
      do
        v201 = __ldaxr(v200);
      while (__stlxr(v201 - 1, v200));
      if (!v201)
      {
        ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
        std::__shared_weak_count::__release_weak(v199);
      }
    }
    v202 = (vImagePixelCount)v101[78];
    dest.data = v101[77];
    dest.height = v202;
    if (v202)
    {
      v203 = (unint64_t *)(v202 + 8);
      do
        v204 = __ldxr(v203);
      while (__stxr(v204 + 1, v203));
    }
    ((void (*)(void ***, vImage_Buffer *))(*v101)[49])(v101, &dest);
    v205 = (std::__shared_weak_count *)dest.height;
    if (dest.height)
    {
      v206 = (unint64_t *)(dest.height + 8);
      do
        v207 = __ldaxr(v206);
      while (__stlxr(v207 - 1, v206));
      if (!v207)
      {
        ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
        std::__shared_weak_count::__release_weak(v205);
      }
    }
    (*((void (**)(void **, uint64_t, uint64_t **, uint64_t *))*v101[72] + 2))(v101[72], a2, a3, a4);
    Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters((void ***)v280);
    if (!v278)
      goto LABEL_299;
    src.height = 0;
    src.data = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v276, (__int128 *)&src);
    v208 = (std::__shared_weak_count *)src.height;
    if (!src.height)
      goto LABEL_299;
    v209 = (unint64_t *)(src.height + 8);
    do
      v210 = __ldaxr(v209);
    while (__stlxr(v210 - 1, v209));
    goto LABEL_297;
  }
  if (!*((_DWORD *)v101 + 104))
    goto LABEL_291;
  v152 = v293;
  if (v293)
  {
    v153 = *(_DWORD *)(v293 + 8);
    v154 = *(_DWORD *)(v293 + 12);
    v283 = v299;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,void>(v305, v153, v154, 1, 1);
    if (*(int *)(v152 + 20) < 1)
      goto LABEL_233;
    v155 = 0;
    v156 = (v154 * v153);
    LODWORD(v157) = *((_DWORD *)v101 + 86);
    v279 = v152;
    while (1)
    {
      if ((int)v157 < 1)
        goto LABEL_232;
      v158 = 0;
      v159 = *(_QWORD *)(v152 + 24);
      v160 = *(_DWORD *)(v152 + 8);
      v161 = *(_DWORD *)(v152 + 12);
      v162 = *(_DWORD *)(v152 + 16);
      v163 = v159 + 2 * v160 * v155 * v161 * v162;
      v164 = v305[0];
      v165 = *(void **)(v305[0] + 16);
      v281 = v155;
      v166 = (_WORD *)(v159 + 2 * v161 * v162 * v160 * v155);
      do
      {
        src.data = (void *)(v163 + 2 * v158 * (int)v156);
        src.height = 1;
        src.width = (int)v156;
        src.rowBytes = 2 * (int)v156;
        dest.data = v165;
        dest.height = 1;
        dest.width = (int)v156;
        dest.rowBytes = 4 * (int)v156;
        vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        if ((int)v156 >= 1)
        {
          v167 = *((_QWORD *)v283 + 2);
          v168 = *(float *)(v167 + 4 * (4 * v158));
          v169 = *(float *)(v167 + 4 * ((4 * (_DWORD)v158) | 1u));
          v170 = *(float *)(v167 + 4 * ((4 * (_DWORD)v158) | 2u));
          v171 = 1.0 / *(float *)(v167 + 4 * ((4 * (_DWORD)v158) | 3u));
          v172 = *(float **)(v164 + 16);
          v173 = v156;
          do
          {
            *v172 = v169 + (float)((float)(v171 * (float)(*v172 - v170)) * v168);
            ++v172;
            --v173;
          }
          while (v173);
        }
        v174 = *((_DWORD *)v101 + 82);
        if (v174 == 1)
        {
          LODWORD(src.data) = 0;
          vDSP_vthr(*(const float **)(v164 + 16), 1, (const float *)&src, *(float **)(v164 + 16), 1, *(int *)(v164 + 12) * (uint64_t)*(int *)(v164 + 8));
        }
        else if (v174 == 2)
        {
          v175 = *(int *)(v164 + 12) * (uint64_t)*(int *)(v164 + 8);
          if (v175)
          {
            v176 = *(float **)(v164 + 16);
            do
            {
              if (*v176 < 0.0)
                *v176 = *v176 * 0.25;
              ++v176;
              --v175;
            }
            while (v175);
          }
        }
        if (!*((_DWORD *)v101 + 83))
        {
          v165 = *(void **)(v164 + 16);
          if (!(_DWORD)v156)
            goto LABEL_230;
LABEL_228:
          v179 = (int *)v165;
          v180 = v166;
          v181 = (int)v156;
          do
          {
            v182 = *v179++;
            _S0 = v182;
            __asm { FCVT            H0, S0 }
            *v180++ = _S0;
            --v181;
          }
          while (v181);
          goto LABEL_230;
        }
        v177 = *(int *)(v164 + 12) * (uint64_t)*(int *)(v164 + 8);
        v165 = *(void **)(v164 + 16);
        if (v177)
        {
          for (j = 0; j != v177; ++j)
            *((float *)v165 + j) = tanhf(*((float *)v165 + j));
          v101 = v282;
        }
        if ((_DWORD)v156)
          goto LABEL_228;
LABEL_230:
        ++v158;
        v157 = *((int *)v101 + 86);
        v166 += (int)v156;
      }
      while (v158 < v157);
      v152 = v279;
      v155 = v281;
LABEL_232:
      if (++v155 >= *(_DWORD *)(v152 + 20))
      {
LABEL_233:
        v187 = (std::__shared_weak_count *)v305[1];
        if (v305[1])
        {
          v188 = (unint64_t *)(v305[1] + 8);
          do
            v189 = __ldaxr(v188);
          while (__stlxr(v189 - 1, v188));
          if (!v189)
          {
            ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
            std::__shared_weak_count::__release_weak(v187);
          }
        }
        goto LABEL_291;
      }
    }
  }
  v211 = *(int *)(v150 + 8);
  v212 = *(unsigned int *)(v150 + 20);
  if ((int)v212 >= 1)
  {
    v213 = 0;
    v214 = 0;
    v215 = *(_DWORD *)(v150 + 12);
    v216 = v215 * v211;
    v217 = *(_QWORD *)(v150 + 24);
    v218 = *((unsigned int *)v101 + 86);
    v219 = v299;
    v220 = v215 * *(_DWORD *)(v150 + 16) * v211;
    do
    {
      if ((int)v218 >= 1)
      {
        v221 = 0;
        v222 = 0;
        v223 = *((_QWORD *)v219 + 2);
        do
        {
          if (v216 >= 1)
          {
            v224 = (float *)(v217 + 4 * v222);
            v225 = (float *)(v223 + 16 * v221);
            v226 = *v225;
            v227 = v225[1];
            v228 = v225[2];
            v229 = v225[3];
            v230 = v216;
            v231 = 1.0 / v229;
            do
            {
              v224[v213] = v227 + (float)((float)(v231 * (float)(*v224 - v228)) * v226);
              ++v224;
              --v230;
            }
            while (v230);
          }
          ++v221;
          v222 += v216;
        }
        while (v221 != v218);
      }
      ++v214;
      v213 += v220;
    }
    while (v214 != v212);
  }
  v232 = *((_DWORD *)v101 + 82);
  if (v232 == 1)
  {
    v238 = 0;
    LODWORD(src.data) = 0;
    do
    {
      v211 *= *(int *)(v150 + 12 + v238);
      v238 += 4;
    }
    while (v238 != 12);
    vDSP_vthr(*(const float **)(v150 + 24), 1, (const float *)&src, *(float **)(v150 + 24), 1, v211);
  }
  else if (v232 == 2)
  {
    for (k = 0; ; ++k)
    {
      v234 = 0;
      v235 = v211;
      do
      {
        v235 *= *(int *)(v150 + 12 + v234);
        v234 += 4;
      }
      while (v234 != 12);
      if (v235 <= k)
        break;
      v236 = *(_QWORD *)(v150 + 24);
      v237 = *(float *)(v236 + 4 * k);
      if (v237 < 0.0)
        *(float *)(v236 + 4 * k) = v237 * 0.25;
    }
  }
  if (*((_DWORD *)v101 + 83))
  {
    v239 = 0;
    v240 = *(int *)(v150 + 8);
    while (1)
    {
      v241 = 0;
      v242 = v240;
      do
      {
        v242 *= *(int *)(v150 + 12 + v241);
        v241 += 4;
      }
      while (v241 != 12);
      if (v242 <= v239)
        break;
      v243 = *(_QWORD *)(v150 + 24);
      *(float *)(v243 + 4 * v239) = tanhf(*(float *)(v243 + 4 * v239));
      ++v239;
    }
  }
LABEL_291:
  if (v277)
    Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters((void ***)v280);
  if (v278)
  {
    Espresso::BNNSEngine::convolution_kernel::cleanup_bnns_filters((void ***)v280);
    src.height = 0;
    src.data = 0;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v276, (__int128 *)&src);
    v208 = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v244 = (unint64_t *)(src.height + 8);
      do
        v210 = __ldaxr(v244);
      while (__stlxr(v210 - 1, v244));
LABEL_297:
      if (!v210)
      {
        ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
        std::__shared_weak_count::__release_weak(v208);
      }
    }
  }
LABEL_299:
  v245 = v288;
  if (v288)
  {
    v246 = (unint64_t *)&v288->__shared_owners_;
    do
      v247 = __ldaxr(v246);
    while (__stlxr(v247 - 1, v246));
    if (!v247)
    {
      ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
      std::__shared_weak_count::__release_weak(v245);
    }
  }
  v248 = v290;
  if (v290)
  {
    v249 = (unint64_t *)&v290->__shared_owners_;
    do
      v250 = __ldaxr(v249);
    while (__stlxr(v250 - 1, v249));
    if (!v250)
    {
      ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
      std::__shared_weak_count::__release_weak(v248);
    }
  }
  v251 = (std::__shared_weak_count *)*((_QWORD *)&v292 + 1);
  if (*((_QWORD *)&v292 + 1))
  {
    v252 = (unint64_t *)(*((_QWORD *)&v292 + 1) + 8);
    do
      v253 = __ldaxr(v252);
    while (__stlxr(v253 - 1, v252));
    if (!v253)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
    }
  }
  v254 = v294;
  if (v294)
  {
    v255 = (unint64_t *)&v294->__shared_owners_;
    do
      v256 = __ldaxr(v255);
    while (__stlxr(v256 - 1, v255));
    if (!v256)
    {
      ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
      std::__shared_weak_count::__release_weak(v254);
    }
  }
  v257 = v296;
  if (v296)
  {
    v258 = (unint64_t *)&v296->__shared_owners_;
    do
      v259 = __ldaxr(v258);
    while (__stlxr(v259 - 1, v258));
    if (!v259)
    {
      ((void (*)(std::__shared_weak_count *))v257->__on_zero_shared)(v257);
      std::__shared_weak_count::__release_weak(v257);
    }
  }
  v260 = v298;
  if (v298)
  {
    v261 = (unint64_t *)&v298->__shared_owners_;
    do
      v262 = __ldaxr(v261);
    while (__stlxr(v262 - 1, v261));
    if (!v262)
    {
      ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
      std::__shared_weak_count::__release_weak(v260);
    }
  }
  v263 = v300;
  if (v300)
  {
    v264 = (unint64_t *)&v300->__shared_owners_;
    do
      v265 = __ldaxr(v264);
    while (__stlxr(v265 - 1, v264));
    if (!v265)
    {
      ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
      std::__shared_weak_count::__release_weak(v263);
    }
  }
  v266 = (std::__shared_weak_count *)*((_QWORD *)&v301 + 1);
  if (*((_QWORD *)&v301 + 1))
  {
    v267 = (unint64_t *)(*((_QWORD *)&v301 + 1) + 8);
    do
      v268 = __ldaxr(v267);
    while (__stlxr(v268 - 1, v267));
    if (!v268)
    {
      ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
      std::__shared_weak_count::__release_weak(v266);
    }
  }
}

void sub_1918CA620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,char a41)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a41);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::share_weights(uint64_t a1, const void **a2)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;

  v4 = *(const void **)(a1 + 576);
  if (v4
  {
    v5 = *(std::__shared_weak_count **)(a1 + 584);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v10 = *(std::__shared_weak_count **)(a1 + 584);
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    (*(void (**)(void *, const void **))(*(_QWORD *)v9 + 48))(v9, a2);
    if (v10)
    {
      v13 = (unint64_t *)&v10->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    Espresso::generic_convolution_kernel::share_weights((_QWORD *)a1, a2);
    if (*a2)
    {
      if (v15)
      {
        v16 = v15;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 616), v16[77], v16[78]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 632), v16[79], v16[80]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 648), v16[81], v16[82]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 472), v16[59], v16[60]);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 520), v16[65], v16[66]);
      }
    }
  }
}

void sub_1918CA8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::clear_weights(Espresso::BNNSEngine::deconvolution_kernel *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 160);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 20));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 45);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 59);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 61);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v1 + 39);
}

uint64_t Espresso::BNNSEngine::deconvolution_kernel::tmp_aux_buffer_size(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 576);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 96))(result);
  return result;
}

uint64_t Espresso::BNNSEngine::deconvolution_kernel::tmp_aux_buffer_create(Espresso::BNNSEngine::deconvolution_kernel *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 72);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

void Espresso::BNNSEngine::deconvolution_kernel::tmp_aux_buffer_share(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 576);
  if (v2)
  {
    if (*(_QWORD *)a2
    {
      v6 = *(std::__shared_weak_count **)(a2 + 8);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v2 = *(_QWORD *)(a1 + 576);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, (uint64_t)v5 + 576);
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 120))(v2, a2);
    }
  }
}

void sub_1918CAA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t *a2, uint64_t a3, void *a4, unint64_t a5, uint64_t *a6)
{
  int v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  double v16;
  double v17;
  int32x2_t v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26[2];
  __int128 v27[2];
  void *__p;
  void *v29;

  v12 = *(char *)(a3 + 23);
  if ((v12 & 0x80000000) == 0)
  {
    v13 = (_BYTE *)a3;
    if (v12 != 1)
      goto LABEL_7;
LABEL_6:
    if (*v13 == 87)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (*(_QWORD *)(a3 + 8) == 1)
  {
    v13 = *(_BYTE **)a3;
    goto LABEL_6;
  }
LABEL_7:
  Espresso::BNNSEngine::deconvolution_kernel::__create_fallback(a1, (uint64_t)a2);
LABEL_8:
  v14 = a1[72];
  if (v14)
  {
    (*(void (**)(uint64_t, uint64_t *, uint64_t, void *, unint64_t, uint64_t *))(*(_QWORD *)v14 + 160))(v14, a2, a3, a4, a5, a6);
  }
  else
  {
    Espresso::generic_convolution_kernel::__set_weight_raw_blob((uint64_t)a1, a2, (unsigned __int8 *)a3, a4, a5, a6);
    v15 = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD *))(*a1 + 464))(v27, a1);
    v19 = (uint64_t)(a1 + 59);
    v20 = a1[1];
    v21 = (std::__shared_weak_count *)a1[2];
    v26[0] = v20;
    v26[1] = (uint64_t)v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    Espresso::set_conv_quantized_weight_helper(v16, v17, v18, (uint64_t)v15, (unsigned __int8 **)a3, (char *)a4, a5, a6, v19, v27, v26, 1, 1);
    if (v21)
    {
      v24 = (unint64_t *)&v21->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    if (__p)
    {
      v29 = __p;
      operator delete(__p);
    }
  }
}

void sub_1918CABF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::__set_weights_finalize(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v2 = a1[72];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 176))(v2);
  v3 = a1[59];
  if (v3 && *(_QWORD *)v3)
  {
    if (*(_QWORD *)(v3 + 32))
    {
      if (!*(_DWORD *)(a1[1] + 76))
      {
LABEL_19:
        Espresso::quantized_weights_helper::make_fp16_lut_from_fp32((Espresso::quantized_weights_helper *)v3);
        v3 = a1[59];
LABEL_20:
        if (*(int *)(v3 + 156) <= 7)
          Espresso::quantized_weights_helper::make_uint8_weight_from_raw((Espresso::quantized_weights_helper *)v3);
        return;
      }
    }
    else
    {
      if (!*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64) && !*(_QWORD *)(v3 + 80))
        return;
      if (!*(_DWORD *)(a1[1] + 76))
      {
        if (!*(_QWORD *)(v3 + 48) && !*(_QWORD *)(v3 + 64))
          goto LABEL_20;
        goto LABEL_19;
      }
    }
    Espresso::quantized_weights_helper::dequantize_to_float32_4d((Espresso::quantized_weights_helper *)v3, &v7);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 79), &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

uint64_t Espresso::BNNSEngine::deconvolution_kernel::supports_weight_key(uint64_t a1, uint64_t a2)
{
  int v3;
  _BYTE *v4;
  int v5;
  _QWORD *v6;
  __int128 *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v14;

  v3 = *(char *)(a2 + 23);
  if (v3 < 0)
  {
    if (*(_QWORD *)(a2 + 8) != 1)
      goto LABEL_8;
    v4 = *(_BYTE **)a2;
  }
  else
  {
    v4 = (_BYTE *)a2;
    if (v3 != 1)
      goto LABEL_8;
  }
  if (*v4 == 87)
  {
    v5 = 0;
    goto LABEL_12;
  }
LABEL_8:
  v6 = (_QWORD *)(a1 + 8);
  v7 = (__int128 *)(a1 + 304);
  v8 = (std::__shared_weak_count *)operator new(0x288uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD1F8;
  v14 = Espresso::deconvolution_kernel_cpu::deconvolution_kernel_cpu((uint64_t)&v8[1], v6, v10, v7);
  a1 = ((uint64_t (*)(uint64_t, uint64_t))v8[1].__vftable[5].~__shared_weak_count_0)(v14, a2);
  v5 = a1;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_12:
  v12 = v5 | Espresso::generic_convolution_kernel::supports_weight_key(a1, (_DWORD *)a2);
  return v12 | Espresso::weight_key_supported_by_conv_quantized_weights_helper((_BYTE *)a2, 1);
}

void sub_1918CAE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "not implemented");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1918CAE94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::deconvolution_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 624);
  *a2 = *(_QWORD *)(this + 616);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::BNNSEngine::deconvolution_kernel::get_weights(Espresso::BNNSEngine::deconvolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = (const void *)*((_QWORD *)this + 72);
  if (v4)
  {
    if (!v5)
      Espresso::throw_exception_selector<Espresso::generic_error>("Error downcasting fallback kernel");
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(void *))(*(_QWORD *)v5 + 456))(v5);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 80);
    *a2 = *((_QWORD *)this + 79);
    a2[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
}

void sub_1918CAFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::deconvolution_kernel::get_f16_weights(Espresso::BNNSEngine::deconvolution_kernel *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = (const void *)*((_QWORD *)this + 72);
  if (v4)
  {
    if (!v5)
      Espresso::throw_exception_selector<Espresso::generic_error>("Error downcasting fallback kernel");
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 73);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(void *))(*(_QWORD *)v5 + 552))(v5);
    if (v6)
    {
      v9 = (unint64_t *)&v6->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  else
  {
    v11 = *((_QWORD *)this + 82);
    *a2 = *((_QWORD *)this + 81);
    a2[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
}

void sub_1918CB0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_deconvolution_kernel>::~base_bnns_kernel(void **a1)
{
  *a1 = off_1E2D5D5B0;
  BNNSFilterDestroy(a1[71]);
  a1[71] = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 72));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(a1);
}

void Espresso::BNNSEngine::pool_kernel::~pool_kernel(void **this)
{
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_pool_kernel>::~base_bnns_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::BNNSEngine::pool_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  BNNSImageStackDescriptor *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  void *bnns_filter;
  int v31;
  int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int32x4_t v40;
  uint64_t v41;
  BNNSImageStackDescriptor *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  int v46;
  void **v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  std::__shared_weak_count *v52;
  unint64_t *p_shared_owners;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::runtime_error *exception;
  uint64_t v71;
  int32x4_t v72;
  _OWORD v73[3];
  uint64_t v74;
  _OWORD v75[3];
  uint64_t v76;
  _OWORD v77[7];
  _OWORD v78[3];
  uint64_t v79;
  _OWORD v80[3];
  uint64_t v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88;
  std::__shared_weak_count *v89;

  if (*(_DWORD *)(a1 + 304) == 2)
  {
    v8 = *(_QWORD *)(a1 + 448);
    if (!v8)
      Espresso::throw_exception_selector<Espresso::generic_error>("fallback kernel not available");
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v8 + 16))(v8, a2, a3, a4);
    return;
  }
  v9 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v9 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v88 = 0;
    v89 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v9 + 160);
    v52 = *(std::__shared_weak_count **)(*v9 + 168);
    v88 = v10;
    v89 = v52;
    if (v52)
    {
      p_shared_owners = (unint64_t *)&v52->__shared_owners_;
      do
        v54 = __ldxr(p_shared_owners);
      while (__stxr(v54 + 1, p_shared_owners));
    }
  }
  v11 = (_QWORD *)*a4;
  if (a4[1] == *a4 || !*v11 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v11 + 32))(*v11))
  {
    v71 = 0;
    v86 = 0;
    v87 = 0;
  }
  else
  {
    v55 = *(std::__shared_weak_count **)(*v11 + 168);
    v71 = *(_QWORD *)(*v11 + 160);
    v86 = v71;
    v87 = v55;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
  }
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v12)
  {
    v14 = v12[22];
    v13 = (std::__shared_weak_count *)v12[23];
    v84 = v14;
    v85 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
  }
  else
  {
    v14 = 0;
    v84 = 0;
    v85 = 0;
  }
  v17 = *a4;
  v18 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v18)
  {
    v22 = *((_QWORD *)v18 + 22);
    v21 = (std::__shared_weak_count *)*((_QWORD *)v18 + 23);
    v82 = v22;
    v83 = v21;
    if (v21)
    {
      v23 = (unint64_t *)&v21->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v17 = *a4;
    }
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v82 = 0;
    v83 = 0;
  }
  v25 = *(_QWORD *)v17;
  v26 = *(_DWORD *)(*(_QWORD *)v17 + 8);
  v27 = *(_DWORD *)(v25 + 12);
  if (v26 == *(_DWORD *)(a1 + 464)
    && v27 == *(_DWORD *)(a1 + 468)
    && (v28 = *(_DWORD *)(a1 + 484), v28 == *(_DWORD *)(a1 + 308))
    && (v29 = *(_DWORD *)(a1 + 488), v29 == *(_DWORD *)(a1 + 312)))
  {
    bnns_filter = *(void **)(a1 + 440);
    *(_DWORD *)(a1 + 464) = v26;
    *(_DWORD *)(a1 + 468) = v27;
    if (bnns_filter)
      goto LABEL_40;
  }
  else
  {
    BNNSFilterDestroy(*(void **)(a1 + 440));
    *(_QWORD *)(a1 + 440) = 0;
    *(_DWORD *)(a1 + 464) = v26;
    *(_DWORD *)(a1 + 468) = v27;
    v28 = *(_DWORD *)(a1 + 308);
    v29 = *(_DWORD *)(a1 + 312);
  }
  *(_DWORD *)(a1 + 484) = v28;
  *(_DWORD *)(a1 + 488) = v29;
  v31 = *(__int16 *)(a1 + 340);
  switch(v31)
  {
    case 4:
      goto LABEL_34;
    case 2:
      v40 = 0uLL;
      break;
    case 1:
LABEL_34:
      v32 = v29 - v27 + *(_DWORD *)(a1 + 324) * (*(_DWORD *)(*(_QWORD *)*a3 + 12) - 1);
      v33 = v32 & ~(v32 >> 31);
      v34 = v28 - v26 + *(_DWORD *)(a1 + 320) * (*(_DWORD *)(*(_QWORD *)*a3 + 8) - 1);
      v35 = v34 & ~(v34 >> 31);
      v36 = v35 >> 1;
      v37 = v35 - (v35 >> 1);
      v38 = v33 >> 1;
      v39 = v33 - (v33 >> 1);
      if (*(_WORD *)(a1 + 340) == 1)
      {
        v40.i64[0] = __PAIR64__(v37, v36);
        v40.i64[1] = __PAIR64__(v39, v38);
      }
      else
      {
        v40.i64[0] = __PAIR64__(v36, v37);
        v40.i64[1] = __PAIR64__(v38, v39);
      }
      break;
    default:
      v40 = vmovl_s16(*(int16x4_t *)(a1 + 348));
      break;
  }
  v72 = v40;
  Espresso::BNNSEngine::bnns_descriptor_for_layer_data((Espresso::BNNSEngine *)a4, (Espresso::layer_data *)v80, v19, v20);
  Espresso::BNNSEngine::bnns_descriptor_for_layer_data((Espresso::BNNSEngine *)a3, (Espresso::layer_data *)v78, v41, v42);
  v43 = *(_OWORD *)(a1 + 384);
  v77[4] = *(_OWORD *)(a1 + 368);
  v77[5] = v43;
  v77[6] = *(_OWORD *)(a1 + 400);
  v44 = *(_OWORD *)(a1 + 320);
  v77[0] = *(_OWORD *)(a1 + 304);
  v77[1] = v44;
  v45 = *(_OWORD *)(a1 + 352);
  v77[2] = *(_OWORD *)(a1 + 336);
  v77[3] = v45;
  v76 = v81;
  v75[1] = v80[1];
  v75[2] = v80[2];
  v75[0] = v80[0];
  v74 = v79;
  v73[1] = v78[1];
  v73[2] = v78[2];
  v73[0] = v78[0];
  bnns_filter = (void *)Espresso::BNNSEngine::pool_kernel::create_bnns_filter((uint64_t)v77, (uint64_t)v75, (uint64_t)v73, v72.i32[0], v72.i32[2], *(_QWORD *)(a1 + 472));
  *(_QWORD *)(a1 + 440) = bnns_filter;
  if (!bnns_filter)
  {
    v48 = *(_QWORD *)(a1 + 448);
    if (!v48)
      Espresso::throw_exception_selector<Espresso::generic_error>("fallback kernel not available");
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v48 + 16))(v48, a2, a3, a4);
    goto LABEL_63;
  }
LABEL_40:
  if (!v10)
  {
    v46 = *(_DWORD *)(v14 + 20);
    if (v46 == 1)
    {
      v47 = (void **)(v14 + 24);
      goto LABEL_47;
    }
    v10 = v14;
LABEL_59:
    v58 = v71;
    if (!v71)
      v58 = v22;
    v51 = BNNSFilterApplyBatch(bnns_filter, v46, *(const void **)(v58 + 24), *(int *)(v58 + 12) * (uint64_t)*(int *)(v58 + 8) * *(int *)(v58 + 16), *(void **)(v10 + 24), *(int *)(v10 + 12) * (uint64_t)*(int *)(v10 + 8) * *(int *)(v10 + 16));
    goto LABEL_62;
  }
  v46 = *(_DWORD *)(v10 + 20);
  if (v46 != 1)
    goto LABEL_59;
  v47 = (void **)(v10 + 24);
LABEL_47:
  v49 = *v47;
  v50 = v71;
  if (!v71)
    v50 = v22;
  v51 = BNNSFilterApply(bnns_filter, *(const void **)(v50 + 24), v49);
LABEL_62:
  if (v51 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bnns failure");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_63:
  if (v21)
  {
    v59 = (unint64_t *)&v21->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v61 = v85;
  if (v85)
  {
    v62 = (unint64_t *)&v85->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v87;
  if (v87)
  {
    v65 = (unint64_t *)&v87->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v89;
  if (v89)
  {
    v68 = (unint64_t *)&v89->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_1918CBA28(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 144);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 112);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::pool_kernel::on_resized(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 448);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 80))(result);
  return result;
}

void Espresso::BNNSEngine::bnns_descriptor_for_layer_data(Espresso::BNNSEngine *this, Espresso::layer_data *a2, uint64_t a3, BNNSImageStackDescriptor *a4)
{
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;

  v6 = *(_QWORD **)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this
    || !*v6
    || (*(unsigned int (**)(_QWORD, Espresso::layer_data *, uint64_t, BNNSImageStackDescriptor *))(*(_QWORD *)*v6 + 32))(*v6, a2, a3, a4))
  {
    v33 = 0;
  }
  else
  {
    v23 = *(_QWORD *)(*v6 + 160);
    v9 = *(std::__shared_weak_count **)(*v6 + 168);
    v33 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v25 = __ldxr(p_shared_owners);
      while (__stxr(v25 + 1, p_shared_owners));
    }
    if (v23)
    {
      if (v9)
      {
        v26 = (unint64_t *)&v9->__shared_owners_;
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v28 = *(int *)(v23 + 8);
      *(_QWORD *)a2 = v28;
      v29 = *(_QWORD *)(v23 + 12);
      *(_QWORD *)&v30 = (int)v29;
      *((_QWORD *)&v30 + 1) = SHIDWORD(v29);
      *(_OWORD *)((char *)a2 + 8) = v30;
      *((_QWORD *)a2 + 3) = v28;
      *((_QWORD *)a2 + 4) = (int)v29 * (uint64_t)(int)v28;
      *((_DWORD *)a2 + 10) = 65568;
      *((_DWORD *)a2 + 11) = 1065353216;
      *((_QWORD *)a2 + 6) = 0;
      if (v9)
      {
        v31 = (unint64_t *)&v9->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
          goto LABEL_22;
      }
      goto LABEL_23;
    }
  }
  v7 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*(_QWORD *)this, *((_QWORD *)this + 1), 0);
  if (!v7)
    goto LABEL_41;
  v8 = *((_QWORD *)v7 + 22);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v7 + 23);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (!v8)
LABEL_41:
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Only fp32 and fp16 are supported");
  if (v9)
  {
    v12 = (unint64_t *)&v9->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(int *)(v8 + 8);
  *(_QWORD *)a2 = v14;
  v15 = *(_QWORD *)(v8 + 12);
  *(_QWORD *)&v16 = (int)v15;
  *((_QWORD *)&v16 + 1) = SHIDWORD(v15);
  *(_OWORD *)((char *)a2 + 8) = v16;
  *((_QWORD *)a2 + 3) = v14;
  *((_QWORD *)a2 + 4) = (int)v15 * (uint64_t)(int)v14;
  *((_QWORD *)a2 + 5) = 0x3F80000000010010;
  *((_QWORD *)a2 + 6) = 0;
  if (v9)
  {
    v17 = (unint64_t *)&v9->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v9)
  {
    v19 = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
LABEL_22:
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_23:
  if (v33)
  {
    v21 = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1918CBCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::pool_kernel::create_bnns_filter(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  NSObject *v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[4];
  uint8_t buf[16];

  v29[2] = bnns_alloc_capmem;
  v29[3] = MEMORY[0x1E0C834A8];
  v29[0] = 0;
  v29[1] = a6;
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)&v9 = (int)v8;
  *((_QWORD *)&v9 + 1) = SHIDWORD(v8);
  v17 = v9;
  v18 = a4;
  v19 = a5;
  v10 = *(_QWORD *)(a1 + 4);
  *(_QWORD *)&v9 = (int)v10;
  *((_QWORD *)&v9 + 1) = SHIDWORD(v10);
  v23 = 0u;
  v20 = v9;
  v11 = *(int *)(a1 + 104);
  if ((_DWORD)v11)
  {
    v12 = *(int *)(a1 + 104);
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)(a3 + 16);
  }
  v21 = v11;
  v22 = v12;
  LODWORD(v24) = 65568;
  if (*(_DWORD *)a1)
  {
    if (*(_DWORD *)a1 == 2)
      Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("L2 pooling is not supported on BNNS engine");
  }
  else
  {
    if (*(_DWORD *)(a1 + 28))
      v13 = 2;
    else
      v13 = 1;
    LODWORD(v23) = v13;
  }
  if ((v14 & 1) == 0)
  {
    if ((_DWORD)a1)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      Espresso::BNNSEngine::create_bnns_pooling(BNNSImageStackDescriptor const*,BNNSImageStackDescriptor const*,BNNSPoolingLayerParameters const*,BNNSFilterParameters const*)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
    }
  }
  if (Espresso::BNNSEngine::create_bnns_pooling(BNNSImageStackDescriptor const*,BNNSImageStackDescriptor const*,BNNSPoolingLayerParameters const*,BNNSFilterParameters const*)::log_requested)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)a1, (const char *)a2);
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_190DAF000, v15, OS_LOG_TYPE_DEBUG, "BNNSFilterCreatePoolingLayer", buf, 2u);
    }

  }
  return MEMORY[0x19401AA2C](a2, a3, &v17, v29);
}

void Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_pool_kernel>::~base_bnns_kernel(void **a1)
{
  *a1 = off_1E2D5D198;
  BNNSFilterDestroy(a1[55]);
  a1[55] = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 56));
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)a1);
}

void Espresso::BNNSEngine::softmax_kernel::~softmax_kernel(void **this)
{
  Espresso::BNNSEngine::softmax_kernel::~softmax_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D5D040;
  BNNSFilterDestroy(this[44]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 42));
  *this = &off_1E2D84120;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 39));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::BNNSEngine::softmax_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  Espresso *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  vImagePixelCount v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned __int8 v28;
  NSObject *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  std::__shared_weak_count *height;
  unint64_t *v44;
  unint64_t v45;
  vImage_Buffer src;
  void *__p;
  void *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  vImage_Buffer dest;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3);
  v9 = *a3;
  if (a3[1] == *a3 || !*v9 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v10 = 0;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v9 + 160);
    v36 = *(std::__shared_weak_count **)(*v9 + 168);
    v51 = v10;
    v52 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(p_shared_owners);
      while (__stxr(v38 + 1, p_shared_owners));
    }
  }
  v11 = *a4;
  if (a4[1] == *a4 || !*v11 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11))
  {
    v49 = 0;
    v50 = 0;
  }
  else
  {
    v39 = *(std::__shared_weak_count **)(*v11 + 168);
    v49 = *(_QWORD *)(*v11 + 160);
    v50 = v39;
    if (v39)
    {
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
  }
  Espresso::abstract_blob_container::shape((char *)&src, **a4);
  v12 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&src);
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  Espresso::abstract_blob_container::shape((char *)&src, **a3);
  v14 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)&src);
  v15 = (Espresso *)__p;
  if (__p)
  {
    v48 = __p;
    operator delete(__p);
  }
  if (v12 && v14)
  {
    if (v7 == 1 && v8 == 1 || !v7 && v8 == 1)
      Espresso::throw_exception_selector<Espresso::not_implemented_error>("BNNS FP16 not implemented");
    if (v7 != 1 || v8)
    {
      if (v7 | v8)
        Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,Espresso::compute_path &,Espresso::compute_path &>(v7, v8);
      Espresso::BNNSEngine::softmax_kernel::__launch_fp32(a1, (uint64_t)a3, (uint64_t)a4, &v49);
    }
    else
    {
      v16 = *(_QWORD *)(a1 + 336);
      if (!v16)
      {
        v42 = *(_DWORD *)(v10 + 8);
        do
        {
          v42 *= *(_DWORD *)(v10 + 12 + v16);
          v16 += 4;
        }
        while (v16 != 12);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, v42, 1, 1, 1);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 336, (__int128 *)&src);
        height = (std::__shared_weak_count *)src.height;
        if (src.height)
        {
          v44 = (unint64_t *)(src.height + 8);
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
            std::__shared_weak_count::__release_weak(height);
          }
        }
      }
      v17 = *a4;
      (*(void (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4);
      v18 = *(_QWORD *)(*v17 + 176);
      v19 = *(std::__shared_weak_count **)(*v17 + 184);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = 0;
      v23 = *(void **)(v18 + 24);
      v24 = *(void **)(*(_QWORD *)(a1 + 336) + 24);
      v25 = *(int *)(v51 + 8);
      do
      {
        v25 *= *(int *)(v51 + 12 + v22);
        v22 += 4;
      }
      while (v22 != 12);
      src.data = v23;
      src.height = 1;
      src.width = v25;
      src.rowBytes = 2 * v25;
      dest.data = v24;
      dest.height = 1;
      dest.width = v25;
      dest.rowBytes = 4 * v25;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      Espresso::BNNSEngine::softmax_kernel::__launch_fp32(a1, (uint64_t)a3, (uint64_t)a4, (uint64_t *)(a1 + 336));
      if (v19)
      {
        v26 = (unint64_t *)&v19->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  else
  {
    if ((v28 & 1) == 0)
    {
      if ((_DWORD)v15)
      {
        if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
          dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
        Espresso::BNNSEngine::softmax_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested = byte_1EE219BFC;
      }
    }
    if (Espresso::BNNSEngine::softmax_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::log_requested)
    {
      Espresso::espresso_os_log_subsystem(v15, v13);
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(src.data) = 0;
        _os_log_debug_impl(&dword_190DAF000, v29, OS_LOG_TYPE_DEBUG, "softmax_kernel: Zero shaped input or output so skipping computation", (uint8_t *)&src, 2u);
      }

    }
  }
  v30 = v50;
  if (v50)
  {
    v31 = (unint64_t *)&v50->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v52;
  if (v52)
  {
    v34 = (unint64_t *)&v52->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1918CC37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::softmax_kernel::on_resized(uint64_t a1)
{
  BNNSFilterDestroy(*(void **)(a1 + 352));
  *(_QWORD *)(a1 + 352) = 0;
}

void Espresso::BNNSEngine::softmax_kernel::__launch_fp32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const BNNSActivation *v15;
  const BNNSFilterParameters *v16;
  int v17;
  size_t v18;
  int v19;
  unsigned int v20;
  void *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  std::__shared_weak_count_vtbl *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  _QWORD *v36;
  float v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  BNNSVectorDescriptor v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[32];
  __int128 v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v8 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2
    || !*v8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v61 = 0;
    v62 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v8 + 160);
    v12 = *(std::__shared_weak_count **)(*v8 + 168);
    v61 = v9;
    v62 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
  }
  Espresso::abstract_blob_container::shape(v52, **(_QWORD **)a2);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v55, (const Espresso::layer_shape *)v52, 0);
  if (*((_QWORD *)&v53 + 1))
  {
    v54 = *((_QWORD *)&v53 + 1);
    operator delete(*((void **)&v53 + 1));
  }
  if (*(_BYTE *)(a1 + 307) || v60 <= 3)
  {
    switch(v60)
    {
      case 1u:
        v10 = 1;
        if (!v60)
          goto LABEL_30;
        break;
      case 2u:
        v10 = v55;
        if (!v60)
          goto LABEL_30;
        break;
      case 3u:
        v10 = v56 * (uint64_t)v55;
        if (!v60)
          goto LABEL_30;
        break;
      case 4u:
        v10 = v56 * (uint64_t)v55 * v57;
        if (!v60)
          goto LABEL_30;
        break;
      case 5u:
        v10 = v56 * (uint64_t)v55 * v57 * v58;
        if (!v60)
          goto LABEL_30;
        break;
      default:
        v10 = 0;
        if (!v60)
          goto LABEL_30;
        break;
    }
    v11 = *(&v55 + (int)v60 - 1);
  }
  else if (v60 == 5)
  {
    v10 = v56 * (uint64_t)v55;
    v11 = v58 * (uint64_t)v59 * v57;
  }
  else if (v60 == 4)
  {
    v10 = v55;
    v11 = v57 * (uint64_t)v58 * v56;
  }
  else
  {
    v10 = 0;
LABEL_30:
    v11 = 0;
  }
  Espresso::abstract_blob_container::shape(v52, **(_QWORD **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v49, (const Espresso::layer_shape *)v52, 0);
  if (*(_BYTE *)(a1 + 307) || HIDWORD(v51) <= 3)
  {
    switch(HIDWORD(v51))
    {
      case 1:
        v17 = 1;
        if (!HIDWORD(v51))
          goto LABEL_50;
        break;
      case 2:
        v17 = v49;
        if (!HIDWORD(v51))
          goto LABEL_50;
        break;
      case 3:
        v17 = HIDWORD(v49) * v49;
        if (!HIDWORD(v51))
          goto LABEL_50;
        break;
      case 4:
        v17 = HIDWORD(v49) * v49 * v50;
        if (!HIDWORD(v51))
          goto LABEL_50;
        break;
      case 5:
        v17 = HIDWORD(v49) * v49 * v50 * HIDWORD(v50);
        if (!HIDWORD(v51))
          goto LABEL_50;
        break;
      default:
        v17 = 0;
        if (!HIDWORD(v51))
          goto LABEL_50;
        break;
    }
    v18 = *((int *)&v49 + SHIDWORD(v51) - 1);
  }
  else if (SHIDWORD(v51) == 5)
  {
    v17 = HIDWORD(v49) * v49;
    v18 = SHIDWORD(v50) * (uint64_t)(int)v51 * (int)v50;
  }
  else if (SHIDWORD(v51) == 4)
  {
    v17 = v49;
    v18 = (int)v50 * (uint64_t)SHIDWORD(v50) * SHIDWORD(v49);
  }
  else
  {
    v17 = 0;
LABEL_50:
    v18 = 0;
  }
  if (*((_QWORD *)&v53 + 1))
  {
    v54 = *((_QWORD *)&v53 + 1);
    operator delete(*((void **)&v53 + 1));
  }
  v19 = *(_DWORD *)(a1 + 300);
  v47 = a1;
  if (v19)
  {
    v20 = v60;
    if (*(_BYTE *)(a1 + 307))
    {
LABEL_68:
      v22 = v17;
      v23 = operator new(0x60uLL);
      v23[1] = 0;
      v23[2] = 0;
      *v23 = &off_1E2DBECA8;
      v23[3] = &off_1E2DA11F0;
      v24 = (uint64_t)(v23 + 3);
      v25 = *(_QWORD *)(v9 + 24);
      *((_OWORD *)v23 + 4) = 0u;
      *((_OWORD *)v23 + 5) = 0u;
      v23[4] = 0x100000001;
      *((_DWORD *)v23 + 10) = v11;
      *((_DWORD *)v23 + 11) = v10;
      v23[6] = v25;
      *((_BYTE *)v23 + 56) = 0;
      *(_QWORD *)v52 = v23 + 3;
      *(_QWORD *)&v52[8] = v23;
      v26 = *a4;
      v27 = (std::__shared_weak_count *)operator new(0x60uLL);
      v27->__shared_owners_ = 0;
      v28 = (unint64_t *)&v27->__shared_owners_;
      v27->__shared_weak_owners_ = 0;
      v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECA8;
      v29 = *(std::__shared_weak_count_vtbl **)(v26 + 24);
      v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA11F0;
      *(_OWORD *)&v27[2].__shared_weak_owners_ = 0u;
      *(_OWORD *)&v27[3].__shared_owners_ = 0u;
      v27[1].__shared_owners_ = 0x100000001;
      LODWORD(v27[1].__shared_weak_owners_) = v18;
      HIDWORD(v27[1].__shared_weak_owners_) = v22;
      v27[2].__vftable = v29;
      LOBYTE(v27[2].__shared_owners_) = 0;
      Espresso::compute_softmax_cpu(v24, (uint64_t)&v27[1], v19, *(_BYTE *)(v47 + 306));
      do
        v30 = __ldaxr(v28);
      while (__stlxr(v30 - 1, v28));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
      v31 = *(std::__shared_weak_count **)&v52[8];
      if (*(_QWORD *)&v52[8])
      {
        v32 = (unint64_t *)(*(_QWORD *)&v52[8] + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      goto LABEL_77;
    }
LABEL_58:
    if (v20 > 3)
    {
      Espresso::compute_softmax_cpu(v9, *a4, v19, *(_BYTE *)(a1 + 306));
      goto LABEL_77;
    }
    goto LABEL_68;
  }
  v20 = v60;
  if (*(_BYTE *)(a1 + 306))
  {
    if (*(_BYTE *)(a1 + 307))
      goto LABEL_68;
    goto LABEL_58;
  }
  if (!*(_BYTE *)(a1 + 307) && v60 >= 4 && (*(_DWORD *)(v9 + 8) != 1 || *(_DWORD *)(v9 + 12) != 1))
    goto LABEL_58;
  v21 = *(void **)(a1 + 352);
  if (!v21)
  {
    *(_QWORD *)&v48.data_bias = 0;
    v49 = v18;
    v50 = 0x3F80000000010020;
    v51 = 0;
    v48.size = v18;
    *(_QWORD *)&v48.data_type = 0x3F80000000010020;
    v53 = 0u;
    memset(v52, 0, sizeof(v52));
    *(_DWORD *)v52 = 11;
    v21 = (void *)Espresso::BNNSEngine::create_bnns_activation((Espresso::BNNSEngine *)&v49, &v48, (const BNNSVectorDescriptor *)v52, v15, v16);
    *(_QWORD *)(a1 + 352) = v21;
  }
  BNNSFilterApplyBatch(v21, v10, *(const void **)(*a4 + 24), v18, *(void **)(v9 + 24), v11);
LABEL_77:
  v34 = *(uint64_t **)a2;
  if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 == 32)
  {
    v35 = *(uint64_t **)a3;
    if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 32)
    {
      v52[8] = 1;
      v52[0] = *(_BYTE *)(v47 + 307);
      *(_DWORD *)&v52[4] = 1;
      v36 = v34 + 2;
      v37 = Espresso::compute_cross_entropy_cpu(v34, v35 + 2, v34 + 2, v52);
      (*(void (**)(_QWORD, float))(*(_QWORD *)*v36 + 32))(*v36, v37);
      v38 = *(_QWORD *)(*v36 + 160);
      v39 = *(std::__shared_weak_count **)(*v36 + 168);
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
        *(_DWORD *)(v47 + 308) = **(_DWORD **)(v38 + 24);
        v42 = (unint64_t *)&v39->__shared_owners_;
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      else
      {
        *(_DWORD *)(v47 + 308) = **(_DWORD **)(v38 + 24);
      }
    }
  }
  v44 = v62;
  if (v62)
  {
    v45 = (unint64_t *)&v62->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1918CC9E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 120);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,Espresso::compute_path &,Espresso::compute_path &>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::unsupported_configuration_error>("Unsupported compute path: %d %d", a1, a2);
}

void Espresso::BNNSEngine::inner_product_kernel::clear_weights(Espresso::BNNSEngine::inner_product_kernel *this)
{
  Espresso::inner_product_kernel_cpu::clear_weights(this);
  *((_QWORD *)this + 115) = 0;
}

void Espresso::BNNSEngine::inner_product_kernel::get_runtime_type_config(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;

  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_DWORD *)(v4 + 116) && !*(_BYTE *)(v4 + 122))
    goto LABEL_17;
  v5 = *a2;
  v6 = a2[1];
  v7 = *a2;
  if (*a2 == v6)
  {
LABEL_7:
    if (v7 != v6)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Input blobs have different types");
  }
  else
  {
    v7 = v5 - 40;
    while (v7 + 80 != v6)
    {
      v8 = *(_DWORD *)(v7 + 48);
      v9 = *(_DWORD *)(v7 + 88);
      v7 += 40;
      if (v8 != v9)
        goto LABEL_7;
    }
  }
  v10 = *a3;
  v11 = a3[1];
  v12 = *a3;
  if (*a3 == v11)
  {
LABEL_12:
    if (v12 != v11)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Output blobs have different types");
  }
  else
  {
    v12 = v10 - 40;
    while (v12 + 80 != v11)
    {
      v13 = *(_DWORD *)(v12 + 48);
      v14 = *(_DWORD *)(v12 + 88);
      v12 += 40;
      if (v13 != v14)
        goto LABEL_12;
    }
  }
  v15 = *(_DWORD *)(v5 + 8);
  if (!*(_DWORD *)(a1 + 336))
  {
    v16 = *(_DWORD *)(v10 + 8);
    if (v15 != v16)
      Espresso::throw_exception_selector<Espresso::invalid_state_error,int const&,int const&>(v15, v16);
  }
  if (v15 == 1)
    std::pair<std::vector<Espresso::blob_numerical_properties>,std::vector<Espresso::blob_numerical_properties>>::pair[abi:ne180100]<true,0>(a4, a2, a3);
  else
LABEL_17:
    Espresso::base_kernel::get_runtime_type_config((_QWORD *)a1, a2, a3, a4);
}

_QWORD *Espresso::BNNSEngine::inner_product_kernel::set_f16_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 720), *a2, a2[1]);
  *(_DWORD *)(a1 + 312) = *a2 != 0;
  return result;
}

void Espresso::BNNSEngine::inner_product_kernel::__launch_quantized_8bit_clipinput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BNNSFilterParameters *a5, size_t a6, size_t a7)
{
  float *v13;
  float v14;
  float v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  float v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const float *v36;
  float *v37;
  vDSP_Length v38;
  uint64_t j;
  uint64_t k;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::runtime_error *exception;
  std::runtime_error *v48;
  float __B;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _BYTE v54[140];
  __int128 v55;
  int v56;
  BNNSVectorDescriptor v57;
  _QWORD v58[3];

  if (*(_DWORD *)(a1 + 336))
  {
    Espresso::inner_product_kernel_cpu::__launch_quantized_8bit_clipinput(a1, a2, a3, a4, a5, a6, a7);
    return;
  }
  v13 = *(float **)(*(_QWORD *)(a1 + 608) + 16);
  v14 = *v13;
  v15 = v13[1];
  v16 = *(unsigned int *)(a1 + 308);
  v58[1] = 0x3F80000000020008;
  v58[2] = 0;
  *(_QWORD *)&v57.data_bias = 0;
  v58[0] = v16;
  v17 = *(unsigned int *)(a1 + 304);
  v57.size = v17;
  *(_QWORD *)&v57.data_type = 0x3F80000000010020;
  if (*(_DWORD *)(a1 + 312))
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 544) + 16);
  else
    v18 = 0;
  v19 = *(_DWORD *)(a1 + 316);
  v20 = 0.0;
  if (v19 == 1)
    goto LABEL_10;
  if (v19 != 2)
  {
    v19 = 0;
LABEL_10:
    v21 = 0.0;
    goto LABEL_11;
  }
  v21 = 0.25;
LABEL_11:
  if (*(_DWORD *)(a1 + 320))
  {
    v22 = *(float *)(a1 + 324);
    v20 = *(float *)(a1 + 328);
    if (v22 == 1.0 && v20 == 1.0)
    {
      v19 = 4;
      v22 = v21;
      v20 = 0.0;
    }
    else
    {
      v19 = 5;
    }
  }
  else
  {
    v22 = v21;
  }
  if (*(_DWORD *)(a1 + 332))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Leaky relu not supported with quant weights");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 16);
  *(_QWORD *)&v54[32] = v16;
  *(_QWORD *)&v54[40] = v17;
  *(_QWORD *)&v54[48] = v23;
  *(_DWORD *)&v54[56] = 131080;
  *(_DWORD *)&v54[60] = 1065353216;
  *(_QWORD *)&v54[64] = 0;
  *(_QWORD *)&v54[72] = 0;
  *(_QWORD *)&v54[80] = v18;
  *(_DWORD *)&v54[88] = 65568;
  *(_DWORD *)&v54[92] = 1065353216;
  *(_QWORD *)&v54[96] = 0;
  *(_QWORD *)&v54[104] = 0;
  *(_DWORD *)&v54[112] = v19;
  *(float *)&v54[116] = v22;
  *(float *)&v54[120] = v20;
  *(_OWORD *)&v54[124] = 0u;
  v55 = 0u;
  v56 = 0;
  *(_QWORD *)&v54[16] = bnns_alloc_capmem;
  *(_QWORD *)&v54[24] = MEMORY[0x1E0C834A8];
  v24 = *(_QWORD *)(a1 + 976);
  *(_QWORD *)v54 = 0;
  *(_QWORD *)&v54[8] = v24;
  if (!*(_DWORD *)(a1 + 432))
    *(_DWORD *)v54 = 1;
  v25 = Espresso::BNNSEngine::create_bnns_fully_connect((Espresso::BNNSEngine *)v58, &v57, (const BNNSVectorDescriptor *)&v54[32], (const BNNSFullyConnectedLayerParameters *)v54, a5);
  if (!v25)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Fully Connected Layer");
  v26 = (void *)v25;
  std::allocate_shared[abi:ne180100]<Espresso::blob<char,4>,std::allocator<Espresso::blob<char,4>>,int (&)[4],void>(&v52, *(_QWORD *)a4 + 8);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int (&)[4],void>(&v50, *(_QWORD *)a3 + 8);
  v27 = 0;
  v28 = v52;
  v29 = *(int *)(v52 + 8);
  do
  {
    v29 *= *(int *)(v52 + 12 + v27);
    v27 += 4;
  }
  while (v27 != 12);
  if (*(_DWORD *)(a1 + 340) != 2)
  {
    v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "inconsistent state! Expected inner product with 8bit clip input quantization");
    __cxa_throw(v48, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v29)
  {
    for (i = 0; i != v29; ++i)
    {
      v31 = *(float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 4 * i);
      if (v31 < v14)
        v31 = v14;
      if (v31 > v15)
        v31 = v15;
      v32 = llroundf((float)(1.0 / (float)(v15 * 0.0078125)) * v31);
      if (v32 <= -127)
        v32 = -127;
      if (v32 >= 127)
        LOBYTE(v32) = 127;
      *(_BYTE *)(*(_QWORD *)(v28 + 24) + i) = v32;
    }
  }
  v33 = v50;
  if (a5 == (BNNSFilterParameters *)1)
    v34 = BNNSFilterApply(v26, *(const void **)(v28 + 24), *(void **)(v50 + 24));
  else
    v34 = BNNSFilterApplyBatch(v26, (size_t)a5, *(const void **)(v28 + 24), a7, *(void **)(v50 + 24), a6);
  v35 = v34;
  __B = (float)(v15 * 0.0078125) * (float)(v15 * 0.0078125);
  v36 = *(const float **)(v33 + 24);
  v37 = *(float **)(*(_QWORD *)a3 + 24);
  v38 = *(int *)(v33 + 8);
  if (*(_DWORD *)(a1 + 348))
  {
    for (j = 0; j != 12; j += 4)
      v38 *= *(int *)(v33 + 12 + j);
    vDSP_vsma(v36, 1, &__B, v37, 1, *(float **)(*(_QWORD *)a3 + 24), 1, v38);
  }
  else
  {
    for (k = 0; k != 12; k += 4)
      v38 *= *(int *)(v33 + 12 + k);
    vDSP_vsmul(v36, 1, &__B, v37, 1, v38);
  }
  BNNSFilterDestroy(v26);
  if ((_DWORD)v35)
    Espresso::throw_exception_selector<Espresso::generic_error,int &>("BNNS Runtime Error ", v35);
  v41 = v51;
  if (v51)
  {
    p_shared_owners = (unint64_t *)&v51->__shared_owners_;
    do
      v43 = __ldaxr(p_shared_owners);
    while (__stlxr(v43 - 1, p_shared_owners));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v53;
  if (v53)
  {
    v45 = (unint64_t *)&v53->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_1918CD0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::inner_product_kernel::__launch_f16(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  void *v13;
  const BNNSFilterParameters *v14;
  uint64_t v15;
  uint64_t *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  _WORD *v28;
  uint64_t v29;
  Espresso *v30;
  const char *v31;
  size_t v32;
  int v33;
  uint32_t v34;
  unsigned __int8 v35;
  NSObject *v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  vDSP_Length v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::runtime_error *exception;
  std::string *v50;
  __int128 v51;
  BNNSVectorDescriptor v52;
  BNNSFilterParameters filter_params;
  BNNSLayerParametersFullyConnected layer_params;
  uint8_t buf[8];
  __int128 v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 336))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, size_t, size_t, size_t))(*(_QWORD *)a1 + 544))(a1, a2, a3, a4, a5, a6, a7);
    return;
  }
  v13 = *(void **)(a1 + 912);
  if (!v13)
  {
    if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)) == 100
      && (*(_DWORD *)(a1 + 420) || *(_DWORD *)(*(_QWORD *)(a1 + 8) + 68)))
    {
      v15 = *(_QWORD *)(a1 + 704);
      if (!v15)
      {
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,void>(&layer_params, *(_DWORD *)(*(_QWORD *)(a1 + 688) + 12), *(_DWORD *)(*(_QWORD *)(a1 + 688) + 8), 1, 1);
        v16 = (uint64_t *)(a1 + 704);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 704, (__int128 *)&layer_params);
        v17 = (std::__shared_weak_count *)layer_params.i_desc.size[0];
        if (layer_params.i_desc.size[0])
        {
          v18 = (unint64_t *)(layer_params.i_desc.size[0] + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = (_QWORD *)(a1 + 688);
        v21 = *v16;
        v22 = *(unsigned int *)(*v16 + 12);
        if ((int)v22 >= 1)
        {
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = *(unsigned int *)(v21 + 8);
          do
          {
            if ((int)v26 >= 1)
            {
              v27 = (_WORD *)(*(_QWORD *)(v21 + 16) + v24);
              v28 = (_WORD *)(*(_QWORD *)(*v20 + 16) + v23);
              v29 = v26;
              do
              {
                *v27++ = *v28;
                v28 += v22;
                --v29;
              }
              while (v29);
            }
            ++v25;
            v24 += 2 * (int)v26;
            v23 += 2;
          }
          while (v25 != v22);
        }
        std::shared_ptr<Espresso::blob<unsigned short,4>>::reset[abi:ne180100](v20);
        v15 = *v16;
      }
      bzero(&layer_params, 0x2F0uLL);
      layer_params.i_desc.layout = BNNSDataLayoutVector;
      layer_params.i_desc.size[0] = a7;
      layer_params.i_desc.stride[0] = 1;
      layer_params.o_desc.layout = BNNSDataLayoutVector;
      layer_params.i_desc.data_type = BNNSDataTypeFloat32;
      layer_params.w_desc.layout = BNNSDataLayoutColumnMajorMatrix;
      layer_params.w_desc.size[0] = a6;
      layer_params.w_desc.size[1] = a7;
      layer_params.w_desc.stride[0] = 1;
      layer_params.w_desc.stride[1] = a6;
      layer_params.w_desc.data = *(void **)(v15 + 16);
      layer_params.w_desc.data_type = BNNSDataTypeFloat16;
      layer_params.bias.layout = BNNSDataLayoutVector;
      layer_params.o_desc.size[0] = a6;
      layer_params.o_desc.stride[0] = 1;
      layer_params.o_desc.data_type = BNNSDataTypeFloat32;
      memset(&layer_params.activation, 0, sizeof(layer_params.activation));
      filter_params.alloc_memory = (BNNSAlloc)bnns_alloc_capmem;
      filter_params.free_memory = (BNNSFree)MEMORY[0x1E0C834A8];
      v32 = *(_QWORD *)(a1 + 976);
      v33 = *(_DWORD *)(a1 + 432);
      *(_QWORD *)&filter_params.flags = 0;
      filter_params.n_threads = v32;
      if (v33)
        v34 = 3145728;
      else
        v34 = 3145729;
      filter_params.flags = v34;
      if ((v35 & 1) == 0)
      {
        if ((_DWORD)v30)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
          Espresso::BNNSEngine::inner_product_kernel::__launch_f16(std::shared_ptr<Espresso::abstract_batch> const&,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&,unsigned long,unsigned long,unsigned long)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
        }
      }
      if (Espresso::BNNSEngine::inner_product_kernel::__launch_f16(std::shared_ptr<Espresso::abstract_batch> const&,std::shared_ptr<Espresso::blob<float,4>> const&,std::shared_ptr<Espresso::blob<float,4>> const&,unsigned long,unsigned long,unsigned long)::log_requested)
      {
        Espresso::espresso_os_log_subsystem(v30, v31);
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = filter_params.flags;
          LOWORD(v56) = 2048;
          *(_QWORD *)((char *)&v56 + 2) = filter_params.n_threads;
          _os_log_debug_impl(&dword_190DAF000, v36, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerFullyConnected: flags=%d, n_threads=%zu", buf, 0x12u);
        }

      }
      v13 = BNNSFilterCreateLayerFullyConnected(&layer_params, &filter_params);
      *(_QWORD *)(a1 + 912) = v13;
      if (v13)
        goto LABEL_34;
      goto LABEL_31;
    }
    v13 = *(void **)(a1 + 912);
    if (!v13)
    {
LABEL_31:
      *(_QWORD *)buf = *(unsigned int *)(a1 + 308);
      v56 = 0x3F80000000010020uLL;
      *(_QWORD *)&v52.data_type = 0x3F80000000010020;
      *(_QWORD *)&v52.data_bias = 0;
      v52.size = *(unsigned int *)(a1 + 304);
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 688) + 16);
      *(_QWORD *)&layer_params.i_desc.flags = *(_QWORD *)buf;
      layer_params.i_desc.size[0] = v52.size;
      layer_params.i_desc.size[1] = v37;
      layer_params.i_desc.size[2] = 0x3F80000000010010;
      layer_params.i_desc.size[3] = 0;
      layer_params.i_desc.size[4] = 0;
      *(_OWORD *)&layer_params.i_desc.size[5] = xmmword_191ACCAB0;
      memset(&layer_params.i_desc.size[7], 0, 64);
      filter_params.alloc_memory = (BNNSAlloc)bnns_alloc_capmem;
      filter_params.free_memory = (BNNSFree)MEMORY[0x1E0C834A8];
      v38 = *(_QWORD *)(a1 + 976);
      *(_QWORD *)&filter_params.flags = 0;
      filter_params.n_threads = v38;
      if (!*(_DWORD *)(a1 + 432))
        filter_params.flags = 1;
      v13 = (void *)Espresso::BNNSEngine::create_bnns_fully_connect((Espresso::BNNSEngine *)buf, &v52, (const BNNSVectorDescriptor *)&layer_params, (const BNNSFullyConnectedLayerParameters *)&filter_params, v14);
      *(_QWORD *)(a1 + 912) = v13;
      if (!v13)
        Espresso::throw_exception_selector<Espresso::generic_error>("BNNS Error");
    }
  }
LABEL_34:
  *(_QWORD *)buf = 0;
  *(_QWORD *)&v56 = 0;
  if (*(_DWORD *)(a1 + 348))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&layer_params, *(_QWORD *)a3 + 8);
    v39 = 0;
    v41 = *(_QWORD *)&layer_params.i_desc.flags;
    v40 = (std::__shared_weak_count *)layer_params.i_desc.size[0];
    *(_QWORD *)buf = *(_QWORD *)&layer_params.i_desc.flags;
    *(_QWORD *)&v56 = layer_params.i_desc.size[0];
    v42 = *(int *)(*(_QWORD *)a3 + 8);
    do
    {
      v42 *= *(int *)(*(_QWORD *)a3 + 12 + v39);
      v39 += 4;
    }
    while (v39 != 12);
    memcpy(*(void **)(*(_QWORD *)&layer_params.i_desc.flags + 24), *(const void **)(*(_QWORD *)a3 + 24), 4 * v42);
    v13 = *(void **)(a1 + 912);
  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  if (a5 == 1)
    v43 = BNNSFilterApply(v13, *(const void **)(*(_QWORD *)a4 + 24), *(void **)(*(_QWORD *)a3 + 24));
  else
    v43 = BNNSFilterApplyBatch(v13, a5, *(const void **)(*(_QWORD *)a4 + 24), a7, *(void **)(*(_QWORD *)a3 + 24), a6);
  v44 = v43;
  if (v43)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string((std::string *)&filter_params, v44);
    v50 = std::string::insert((std::string *)&filter_params, 0, "BNNS Error ");
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    layer_params.i_desc.size[1] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&layer_params.i_desc.flags = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&layer_params);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (*(_DWORD *)(a1 + 348))
  {
    v45 = 0;
    v46 = *(int *)(*(_QWORD *)a3 + 8);
    do
    {
      v46 *= *(int *)(*(_QWORD *)a3 + 12 + v45);
      v45 += 4;
    }
    while (v45 != 12);
    vDSP_vadd(*(const float **)(v41 + 24), 1, *(const float **)(*(_QWORD *)a3 + 24), 1, *(float **)(*(_QWORD *)a3 + 24), 1, v46);
  }
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_1918CD6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  void *v25;
  int v26;
  uint64_t v27;

  if (a25 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 112);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void Espresso::BNNSEngine::inner_product_kernel::__launch_transposed(uint64_t a1, uint64_t a2, size_t a3, size_t a4, size_t a5, _QWORD **a6, _QWORD **a7)
{
  uint64_t v13;
  _OWORD *v14;
  size_t v15;
  size_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  void *bnns;
  _QWORD *v30;
  _QWORD **v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  std::__shared_weak_count *v48;
  _OWORD v49[8];
  int v50;
  _OWORD v51[8];
  int v52;

  if (!*(_QWORD *)(a1 + 912))
  {
    v13 = *(_QWORD *)(a1 + 528);
    v14 = (_OWORD *)(a1 + 304);
    v15 = *(unsigned int *)(a1 + 308);
    v16 = *(unsigned int *)(a1 + 304);
    if (v13)
    {
      v17 = *(_OWORD *)(a1 + 416);
      v51[6] = *(_OWORD *)(a1 + 400);
      v51[7] = v17;
      v52 = *(_DWORD *)(a1 + 432);
      v18 = *(_OWORD *)(a1 + 352);
      v51[2] = *(_OWORD *)(a1 + 336);
      v51[3] = v18;
      v19 = *(_OWORD *)(a1 + 384);
      v51[4] = *(_OWORD *)(a1 + 368);
      v51[5] = v19;
      v20 = *(_OWORD *)(a1 + 320);
      v51[0] = *v14;
      v51[1] = v20;
      v21 = *(_QWORD *)(a1 + 544);
      if (v21)
        v22 = *(void **)(v21 + 16);
      else
        v22 = 0;
      bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v15, v16, (uint64_t)v51, *(void **)(v13 + 16), v22, BNNSDataTypeFloat32, BNNSDataTypeFloat16, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
    }
    else
    {
      v23 = *(_OWORD *)(a1 + 416);
      v49[6] = *(_OWORD *)(a1 + 400);
      v49[7] = v23;
      v50 = *(_DWORD *)(a1 + 432);
      v24 = *(_OWORD *)(a1 + 352);
      v49[2] = *(_OWORD *)(a1 + 336);
      v49[3] = v24;
      v25 = *(_OWORD *)(a1 + 384);
      v49[4] = *(_OWORD *)(a1 + 368);
      v49[5] = v25;
      v26 = *(_OWORD *)(a1 + 320);
      v49[0] = *v14;
      v49[1] = v26;
      v27 = *(_QWORD *)(a1 + 544);
      if (v27)
        v28 = *(void **)(v27 + 16);
      else
        v28 = 0;
      bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(v15, v16, (uint64_t)v49, *(void **)(*(_QWORD *)(a1 + 512) + 16), v28, BNNSDataTypeFloat32, BNNSDataTypeFloat32, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
    }
    *(_QWORD *)(a1 + 912) = bnns;
  }
  v31 = a7;
  v30 = *a7;
  if (v31[1] == v30 || !*v30 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v30 + 32))(*v30))
  {
    v32 = 0;
    v48 = 0;
  }
  else
  {
    v44 = *v30;
    v32 = *(_QWORD *)(*v30 + 160);
    v45 = *(std::__shared_weak_count **)(v44 + 168);
    v48 = v45;
    if (v45)
    {
      p_shared_owners = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(p_shared_owners);
      while (__stxr(v47 + 1, p_shared_owners));
    }
  }
  v33 = *a6;
  (*(void (**)(_QWORD))(*(_QWORD *)*v33 + 32))(*v33);
  v34 = *(_QWORD *)(*v33 + 160);
  v35 = *(std::__shared_weak_count **)(*v33 + 168);
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
  }
  v38 = *(void **)(a1 + 912);
  if (a3 == 1)
    v39 = BNNSFilterApply(v38, *(const void **)(v34 + 24), *(void **)(v32 + 24));
  else
    v39 = BNNSFilterApplyBatch(v38, a3, *(const void **)(v34 + 24), a5, *(void **)(v32 + 24), a4);
  if ((_DWORD)v39)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,int &>("BNNS Error %d", v39);
  if (v35)
  {
    v40 = (unint64_t *)&v35->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  if (v48)
  {
    v42 = (unint64_t *)&v48->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
}

void sub_1918CDA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::inner_product_kernel::__launch_quantized_int8_int8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  uint64_t v8;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float *v30;
  unsigned int v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *exception;
  __int128 v51;

  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 672))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQrow_sums");
    goto LABEL_51;
  }
  v8 = *(_QWORD *)(a1 + 576);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: weights_8bit");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 912))
    *(_QWORD *)(a1 + 912) = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 420), *(_DWORD *)(a1 + 432), *(void **)(v8 + 16), 0, BNNSDataTypeInt8, BNNSDataTypeInt8, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
  v14 = 0;
  v15 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  do
  {
    v15 *= *(_DWORD *)(*(_QWORD *)a4 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  if (!*(_QWORD *)(a1 + 752))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 752, &v51);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 768, &v51);
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 784, &v51);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v51, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 800, &v51);
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  if (a5)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      vDSP_sve((const float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 4 * (*(_DWORD *)(a1 + 308) * v17++)), 1, (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 16) + v16), *(unsigned int *)(a1 + 308));
      v16 += 4;
    }
    while (a5 != v17);
  }
  Espresso::range_quantizer<signed char>::quantize_chunks(*(_QWORD *)(*(_QWORD *)a4 + 24), v15, *(_DWORD *)(a1 + 308), *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 800) + 16));
  v18 = *(void **)(a1 + 912);
  if (a5 == 1)
    result = BNNSFilterApply(v18, *(const void **)(*(_QWORD *)(a1 + 800) + 16), *(void **)(*a3 + 24));
  else
    result = BNNSFilterApplyBatch(v18, a5, *(const void **)(*(_QWORD *)(a1 + 800) + 16), a7, *(void **)(*a3 + 24), a6);
  if ((_DWORD)result == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNS Error");
LABEL_51:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a6)
  {
    v20 = 0;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16);
    v23 = *(unsigned int *)(a1 + 304);
    v24 = *a3;
    do
    {
      if ((_DWORD)v23)
      {
        v25 = *(float *)(v21 + 4 * v20);
        v26 = *(float *)(v22 + 4 * v20);
        v27 = *(float **)(*(_QWORD *)(a1 + 640) + 16);
        v28 = *(float **)(*(_QWORD *)(a1 + 656) + 16);
        v29 = *(_QWORD *)(v24 + 24);
        v30 = *(float **)(*(_QWORD *)(a1 + 672) + 16);
        v31 = *(_DWORD *)(a1 + 308) * v20;
        result = v23;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 752) + 16);
        do
        {
          v33 = *v27++;
          v34 = v33;
          v35 = *v28++;
          v36 = v35;
          v37 = *v30++;
          *(float *)(v29 + 4 * v31) = (float)((float)((float)(v26 * v34) * v37)
                                              + (float)((float)(v25 * v34) * *(float *)(v29 + 4 * v31)))
                                      + (float)(v36 * *(float *)(v32 + 4 * v20));
          ++v31;
          --result;
        }
        while (result);
      }
      ++v20;
    }
    while (v20 != a6);
  }
  return result;
}

void sub_1918CDEB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::inner_product_kernel::__launch_dynamic_quantized_s8_s8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4, size_t a5, size_t a6, size_t a7)
{
  uint64_t *v12;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  void *bnns;
  BNNSDataType v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  size_t v47;
  size_t v48;
  int v49;
  void *v50;
  Espresso *v51;
  const char *v52;
  uint32_t v53;
  unsigned __int8 v54;
  NSObject *v55;
  const char *v56;
  size_t v57;
  int v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  BNNSFilterParameters filter_params;
  BNNSLayerParametersFullyConnected layer_params;
  uint8_t buf[4];
  uint32_t flags;
  __int16 v71;
  size_t n_threads;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v12 = a4[1];
  if (v12 == *a4)
  {
    v65 = 0;
    v66 = 0;
    v14 = v12;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v65, *a4);
    v12 = *a4;
    v14 = a4[1];
  }
  if ((unint64_t)((char *)v14 - (char *)v12) <= 0x10)
  {
    v63 = 0;
    v64 = 0;
  }
  else
  {
    Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v63, v12 + 2);
  }
  v15 = *(_QWORD **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3
    && *v15
    && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v15 + 32))(*v15) == 3)
  {
    v16 = *v15;
    v18 = *(_QWORD *)(*v15 + 208);
    v17 = *(std::__shared_weak_count **)(v16 + 216);
    v61 = v18;
    v62 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v20 = __ldxr(p_shared_owners);
      while (__stxr(v20 + 1, p_shared_owners));
    }
  }
  else
  {
    v18 = 0;
    v61 = 0;
    v62 = 0;
  }
  v22 = a3;
  v21 = *(_QWORD **)a3;
  if (*(_QWORD **)(v22 + 8) == v21 || !*v21 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v21 + 32))(*v21))
  {
    v23 = 0;
    v59 = 0;
    v60 = 0;
  }
  else
  {
    v30 = *v21;
    v23 = *(_QWORD *)(*v21 + 160);
    v31 = *(std::__shared_weak_count **)(v30 + 168);
    v59 = v23;
    v60 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
  }
  v24 = v65;
  if (v65)
    v25 = (v18 | v23) == 0;
  else
    v25 = 1;
  if (v25)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Atleast one bottom and one top required");
  bnns = *(void **)(a1 + 912);
  if (!bnns)
  {
    if (v23)
      v27 = BNNSDataTypeFloat32;
    else
      v27 = BNNSDataTypeInt32;
    v28 = *(_QWORD *)(a1 + 576);
    if (v28)
    {
      v29 = (void **)(v28 + 16);
    }
    else
    {
      if (!v63)
      {
        v46 = *(_QWORD *)(a1 + 896);
        if (!v46)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("inner_product_kernel: Int8 weights not set");
        v47 = *(unsigned int *)(a1 + 308);
        v48 = *(unsigned int *)(a1 + 304);
        v49 = *(_DWORD *)(a1 + 420);
        v58 = *(_DWORD *)(a1 + 432);
        v50 = *(void **)(v46 + 16);
        v57 = *(_QWORD *)(a1 + 976);
        bzero(&layer_params, 0x2F0uLL);
        layer_params.i_desc.layout = BNNSDataLayoutVector;
        layer_params.i_desc.size[0] = v47;
        layer_params.i_desc.stride[0] = 1;
        layer_params.i_desc.data_type = BNNSDataTypeInt8;
        layer_params.i_desc.data_scale = 1.0;
        layer_params.o_desc.layout = BNNSDataLayoutVector;
        layer_params.o_desc.size[0] = v48;
        layer_params.o_desc.stride[0] = 1;
        layer_params.o_desc.data_type = v27;
        layer_params.o_desc.data_scale = 1.0;
        layer_params.w_desc.data = v50;
        layer_params.w_desc.data_type = BNNSDataTypeInt8;
        layer_params.w_desc.data_scale = 1.0;
        layer_params.w_desc.layout = BNNSDataLayoutColumnMajorMatrix;
        layer_params.w_desc.size[0] = v48;
        layer_params.w_desc.size[1] = v47;
        layer_params.w_desc.stride[0] = 1;
        layer_params.w_desc.stride[1] = v48;
        filter_params.alloc_memory = (BNNSAlloc)bnns_alloc_capmem;
        filter_params.free_memory = (BNNSFree)MEMORY[0x1E0C834A8];
        *(_QWORD *)&filter_params.flags = 0;
        filter_params.n_threads = v57;
        if (!v58 || v49)
        {
          v53 = 3145729;
          if (v58)
            v53 = 3145728;
          if (!v49)
            v53 = 1;
          filter_params.flags = v53;
        }
        if ((v54 & 1) == 0)
        {
          if ((_DWORD)v51)
          {
            if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
              dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
            Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,false>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
          }
        }
        if (Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,false>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested)
        {
          Espresso::espresso_os_log_subsystem(v51, v52);
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109376;
            flags = filter_params.flags;
            v71 = 2048;
            n_threads = filter_params.n_threads;
            _os_log_debug_impl(&dword_190DAF000, v55, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerFullyConnected: flags=%d, n_threads=%zu", buf, 0x12u);
          }

        }
        bnns = BNNSFilterCreateLayerFullyConnected(&layer_params, &filter_params);
        if (!bnns)
          Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Fully Connected Layer");
        v18 = v61;
        v24 = v65;
        v23 = v59;
        goto LABEL_36;
      }
      v29 = (void **)(v63 + 24);
    }
    bnns = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 420), *(_DWORD *)(a1 + 432), *v29, 0, BNNSDataTypeInt8, BNNSDataTypeInt8, 131080, v27, *(_QWORD *)(a1 + 976));
LABEL_36:
    *(_QWORD *)(a1 + 912) = bnns;
  }
  if (v18)
    v34 = v18;
  else
    v34 = v23;
  if (a5 == 1)
    v35 = BNNSFilterApply(bnns, *(const void **)(v24 + 24), *(void **)(v34 + 24));
  else
    v35 = BNNSFilterApplyBatch(bnns, a5, *(const void **)(v24 + 24), a7, *(void **)(v34 + 24), a6);
  if (*(_DWORD *)(a1 + 316) || *(_DWORD *)(a1 + 320) || *(_DWORD *)(a1 + 332))
  {
    v56 = "inner_product_kernel: A dynamic quantized inner product layer's activation function should be moved to the fol"
          "owing dynamic_dequantize layer";
    goto LABEL_86;
  }
  if (v35 == -1)
  {
    v56 = "inner_product_kernel: Int8 * Int8 BNNSFilterApply error";
LABEL_86:
    Espresso::throw_exception_selector<Espresso::generic_error>(v56);
  }
  if (v60)
  {
    v36 = (unint64_t *)&v60->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  if (v62)
  {
    v38 = (unint64_t *)&v62->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v40 = v64;
  if (v64)
  {
    v41 = (unint64_t *)&v64->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v66;
  if (v66)
  {
    v44 = (unint64_t *)&v66->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1918CE430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  uint64_t v11;
  uint64_t v12;
  va_list va2;
  uint64_t v14;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v12 = va_arg(va3, _QWORD);
  v14 = va_arg(va3, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t Espresso::BNNSEngine::inner_product_kernel::__launch_quantized_int16_int16(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, size_t a5, size_t a6, size_t a7)
{
  uint64_t v8;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  float v26;
  float *v27;
  float *v28;
  uint64_t v29;
  float *v30;
  unsigned int v31;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *exception;
  __int128 v51;

  if (*(_DWORD *)(a1 + 336))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Not implemented");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 640))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQscale");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 656))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQbias");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 672))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: wQrow_sums");
    goto LABEL_51;
  }
  v8 = *(_QWORD *)(a1 + 592);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "missing param: weights_int16");
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 912))
    *(_QWORD *)(a1 + 912) = Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(*(unsigned int *)(a1 + 308), *(unsigned int *)(a1 + 304), *(_DWORD *)(a1 + 420), *(_DWORD *)(a1 + 432), *(void **)(v8 + 16), 0, BNNSDataTypeInt16, BNNSDataTypeInt16, 65568, BNNSDataTypeFloat32, *(_QWORD *)(a1 + 976));
  v14 = 0;
  v15 = *(_DWORD *)(*(_QWORD *)a4 + 8);
  do
  {
    v15 *= *(_DWORD *)(*(_QWORD *)a4 + 12 + v14);
    v14 += 4;
  }
  while (v14 != 12);
  if (!*(_QWORD *)(a1 + 752))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 752, &v51);
    v38 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 768, &v51);
    v41 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v42 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v51, a5, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 784, &v51);
    v44 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<short,1>,std::allocator<Espresso::blob<short,1>>,int &,int &,int &,int &,void>(&v51, v15, 1, 1, 1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 816, &v51);
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v48 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  if (a5)
  {
    v16 = 0;
    v17 = 0;
    do
    {
      vDSP_sve((const float *)(*(_QWORD *)(*(_QWORD *)a4 + 24) + 4 * (*(_DWORD *)(a1 + 308) * v17++)), 1, (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 752) + 16) + v16), *(unsigned int *)(a1 + 308));
      v16 += 4;
    }
    while (a5 != v17);
  }
  Espresso::range_quantizer<short>::quantize_chunks(*(_QWORD *)(*(_QWORD *)a4 + 24), v15, *(_DWORD *)(a1 + 308), *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 816) + 16));
  v18 = *(void **)(a1 + 912);
  if (a5 == 1)
    result = BNNSFilterApply(v18, *(const void **)(*(_QWORD *)(a1 + 816) + 16), *(void **)(*a3 + 24));
  else
    result = BNNSFilterApplyBatch(v18, a5, *(const void **)(*(_QWORD *)(a1 + 816) + 16), a7, *(void **)(*a3 + 24), a6);
  if ((_DWORD)result == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "BNNS Error");
LABEL_51:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (a5)
  {
    v20 = 0;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 768) + 16);
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 784) + 16);
    v23 = *(unsigned int *)(a1 + 304);
    v24 = *a3;
    do
    {
      if ((_DWORD)v23)
      {
        v25 = *(float *)(v21 + 4 * v20);
        v26 = *(float *)(v22 + 4 * v20);
        v27 = *(float **)(*(_QWORD *)(a1 + 640) + 16);
        v28 = *(float **)(*(_QWORD *)(a1 + 656) + 16);
        v29 = *(_QWORD *)(v24 + 24);
        v30 = *(float **)(*(_QWORD *)(a1 + 672) + 16);
        v31 = *(_DWORD *)(a1 + 308) * v20;
        result = v23;
        v32 = *(_QWORD *)(*(_QWORD *)(a1 + 752) + 16);
        do
        {
          v33 = *v27++;
          v34 = v33;
          v35 = *v28++;
          v36 = v35;
          v37 = *v30++;
          *(float *)(v29 + 4 * v31) = (float)((float)((float)(v26 * v34) * v37)
                                              + (float)((float)(v25 * v34) * *(float *)(v29 + 4 * v31)))
                                      + (float)(v36 * *(float *)(v32 + 4 * v20));
          ++v31;
          --result;
        }
        while (result);
      }
      ++v20;
    }
    while (v20 != a5);
  }
  return result;
}

void sub_1918CE904(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<float,unsigned short>(uint64_t a1, uint64_t *a2, __int16 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  float *v8;
  __int16 *v9;
  float *v10;
  uint64_t v11;
  __int16 v12;
  int v19;
  uint64_t v20;
  vDSP_Length v21;
  uint64_t v22;
  uint64_t v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float __B;

  if (a4)
  {
    v7 = 0;
    v8 = *(float **)(*a2 + 24);
    do
    {
      if (a5)
      {
        v9 = a3;
        v10 = v8;
        v11 = a5;
        do
        {
          v12 = *v9++;
          _H0 = v12;
          __asm { FCVT            S0, H0 }
          *v10 = *v10 + _S0;
          ++v10;
          --v11;
        }
        while (v11);
      }
      ++v7;
      v8 += a5;
    }
    while (v7 != a4);
  }
  v19 = *(_DWORD *)(a1 + 316);
  if (v19 == 1)
  {
    v20 = 0;
    __B = 0.0;
    v21 = *(int *)(*a2 + 8);
    do
    {
      v21 *= *(int *)(*a2 + 12 + v20);
      v20 += 4;
    }
    while (v20 != 12);
    vDSP_vthr(*(const float **)(*a2 + 24), 1, &__B, *(float **)(*a2 + 24), 1, v21);
  }
  else if (v19 == 2)
  {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("has_relu = 2 isn't implemented for non float outputs");
  }
  if (*(_DWORD *)(a1 + 320))
  {
    v22 = 0;
    v23 = *a2;
    v24 = *(float **)(*a2 + 24);
    v25 = *(int *)(v23 + 8);
    v26 = v23 + 12;
    do
    {
      v25 *= *(int *)(v26 + v22);
      v22 += 4;
    }
    while (v22 != 12);
    for (; v25; --v25)
    {
      v27 = *(float *)(a1 + 324);
      *v24 = v27 * tanhf(*(float *)(a1 + 328) * *v24);
      ++v24;
    }
  }
  if (*(_DWORD *)(a1 + 332))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("has_prelu isn't implemented for non float outputs");
}

void *Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(size_t a1, size_t a2, uint64_t a3, void *a4, void *a5, BNNSDataType a6, BNNSDataType a7, int a8, BNNSDataType a9, size_t a10)
{
  Espresso *v18;
  const char *v19;
  int v20;
  uint32_t v21;
  unsigned __int8 v22;
  NSObject *v23;
  void *result;
  BNNSFilterParameters filter_params;
  BNNSLayerParametersFullyConnected layer_params;
  uint8_t buf[4];
  uint32_t flags;
  __int16 v29;
  size_t n_threads;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  bzero(&layer_params, 0x2F0uLL);
  layer_params.i_desc.layout = BNNSDataLayoutVector;
  layer_params.i_desc.size[0] = a1;
  layer_params.i_desc.stride[0] = 1;
  layer_params.i_desc.data_type = a6;
  layer_params.i_desc.data_scale = 1.0;
  layer_params.o_desc.layout = BNNSDataLayoutVector;
  layer_params.o_desc.size[0] = a2;
  layer_params.o_desc.stride[0] = 1;
  layer_params.o_desc.data_type = a9;
  layer_params.o_desc.data_scale = 1.0;
  layer_params.w_desc.data = a4;
  layer_params.w_desc.data_type = a7;
  layer_params.w_desc.data_scale = 1.0;
  layer_params.w_desc.layout = BNNSDataLayoutColumnMajorMatrix;
  layer_params.w_desc.size[0] = a2;
  layer_params.w_desc.size[1] = a1;
  layer_params.w_desc.stride[0] = 1;
  layer_params.w_desc.stride[1] = a2;
  if (a8 == 65568 && a9 == BNNSDataTypeFloat32)
  {
    layer_params.bias.layout = BNNSDataLayoutVector;
    layer_params.bias.size[0] = a2;
    layer_params.bias.stride[0] = 1;
    layer_params.bias.data_type = BNNSDataTypeFloat32;
    layer_params.bias.data = a5;
    *(_QWORD *)&layer_params.activation.function = 0;
    layer_params.activation.beta = 0.0;
    v20 = *(_DWORD *)(a3 + 12);
    if (v20 == 2)
    {
      *(_QWORD *)&layer_params.activation.function = 0x3E80000000000002;
    }
    else if (v20 == 1)
    {
      layer_params.activation.function = BNNSActivationFunctionRectifiedLinear;
    }
    if (*(_DWORD *)(a3 + 16))
    {
      layer_params.activation.function = BNNSActivationFunctionScaledTanh;
      *(_QWORD *)&layer_params.activation.alpha = *(_QWORD *)(a3 + 20);
    }
    if (*(_DWORD *)(a3 + 28))
      layer_params.activation.function = BNNSActivationFunctionPReLUPerChannel;
  }
  filter_params.alloc_memory = (BNNSAlloc)bnns_alloc_capmem;
  filter_params.free_memory = (BNNSFree)MEMORY[0x1E0C834A8];
  *(_QWORD *)&filter_params.flags = 0;
  filter_params.n_threads = a10;
  if (*(_DWORD *)(a3 + 128))
  {
    v21 = 3145728;
  }
  else
  {
    filter_params.flags = 1;
    v21 = 3145729;
  }
  if (*(_DWORD *)(a3 + 116))
    filter_params.flags = v21;
  if ((v22 & 1) == 0)
  {
    if ((_DWORD)v18)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
    }
  }
  if (Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<true,true>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested)
  {
    Espresso::espresso_os_log_subsystem(v18, v19);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      flags = filter_params.flags;
      v29 = 2048;
      n_threads = filter_params.n_threads;
      _os_log_debug_impl(&dword_190DAF000, v23, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerFullyConnected: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = BNNSFilterCreateLayerFullyConnected(&layer_params, &filter_params);
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Fully Connected Layer");
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int (&)[4],void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;

  v4 = operator new(0x60uLL);
  v5 = v4;
  v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBF060;
  v4[3] = &off_1E2DA1410;
  v7 = (char *)(v4 + 3);
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v8 = 1;
  do
  {
    v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  v10 = 2 * v8;
  v11 = Espresso::kern_alloc_uninitialized((Espresso *)(2 * v8));
  bzero(v11, v10);
  v5[6] = v11;
  *((_BYTE *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_1918CEE00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,float>(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __int16 *v7;
  float *v8;
  __int16 *v9;
  uint64_t v10;
  float v11;
  int v19;
  uint64_t v20;
  __int16 *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v26;
  __int16 *v27;
  uint64_t v28;
  float v29;
  float v30;

  if (a3 && a4)
  {
    v6 = 0;
    v7 = *(__int16 **)(a2 + 24);
    do
    {
      if (a5)
      {
        v8 = a3;
        v9 = v7;
        v10 = a5;
        do
        {
          v11 = *v8++;
          _H1 = *v9;
          __asm { FCVT            S1, H1 }
          _S0 = v11 + _S1;
          __asm { FCVT            H0, S0 }
          *v9++ = LOWORD(_S0);
          --v10;
        }
        while (v10);
      }
      ++v6;
      v7 += a5;
    }
    while (v6 != a4);
  }
  v19 = *(_DWORD *)(a1 + 316);
  if (v19 == 1)
  {
    v20 = 0;
    v21 = *(__int16 **)(a2 + 24);
    v22 = *(int *)(a2 + 8);
    do
    {
      v22 *= *(int *)(a2 + 12 + v20);
      v20 += 4;
    }
    while (v20 != 12);
    for (; v22; --v22)
    {
      v23 = *v21;
      _H0 = *v21;
      __asm { FCVT            S0, H0 }
      if (_S0 < 0.0)
        v23 = 0;
      *v21++ = v23;
    }
  }
  else if (v19 == 2)
  {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("has_relu = 2 isn't implemented for non float outputs");
  }
  if (*(_DWORD *)(a1 + 320))
  {
    v26 = 0;
    v27 = *(__int16 **)(a2 + 24);
    v28 = *(int *)(a2 + 8);
    do
    {
      v28 *= *(int *)(a2 + 12 + v26);
      v26 += 4;
    }
    while (v26 != 12);
    if (v28)
    {
      v29 = *(float *)(a1 + 324);
      v30 = *(float *)(a1 + 328);
      do
      {
        _H0 = *v27;
        __asm { FCVT            S0, H0 }
        _S0 = v29 * tanhf(v30 * _S0);
        __asm { FCVT            H0, S0 }
        *v27++ = LOWORD(_S0);
        --v28;
      }
      while (v28);
    }
  }
  if (*(_DWORD *)(a1 + 332))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("has_prelu isn't implemented for non float outputs");
}

void Espresso::BNNSEngine::inner_product_kernel::__fused_nonlinearity<unsigned short,unsigned short>(uint64_t a1, uint64_t a2, __int16 *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __int16 *v7;
  __int16 *v8;
  __int16 *v9;
  uint64_t v10;
  __int16 v11;
  int v21;
  uint64_t v22;
  __int16 *v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v28;
  __int16 *v29;
  uint64_t v30;
  float v31;
  float v32;

  if (a4)
  {
    v6 = 0;
    v7 = *(__int16 **)(a2 + 24);
    do
    {
      if (a5)
      {
        v8 = a3;
        v9 = v7;
        v10 = a5;
        do
        {
          v11 = *v8++;
          _H0 = v11;
          _H1 = *v9;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 + _S1;
          __asm { FCVT            H0, S0 }
          *v9++ = LOWORD(_S0);
          --v10;
        }
        while (v10);
      }
      ++v6;
      v7 += a5;
    }
    while (v6 != a4);
  }
  v21 = *(_DWORD *)(a1 + 316);
  if (v21 == 1)
  {
    v22 = 0;
    v23 = *(__int16 **)(a2 + 24);
    v24 = *(int *)(a2 + 8);
    do
    {
      v24 *= *(int *)(a2 + 12 + v22);
      v22 += 4;
    }
    while (v22 != 12);
    for (; v24; --v24)
    {
      v25 = *v23;
      _H0 = *v23;
      __asm { FCVT            S0, H0 }
      if (_S0 < 0.0)
        v25 = 0;
      *v23++ = v25;
    }
  }
  else if (v21 == 2)
  {
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("has_relu = 2 isn't implemented for non float outputs");
  }
  if (*(_DWORD *)(a1 + 320))
  {
    v28 = 0;
    v29 = *(__int16 **)(a2 + 24);
    v30 = *(int *)(a2 + 8);
    do
    {
      v30 *= *(int *)(a2 + 12 + v28);
      v28 += 4;
    }
    while (v28 != 12);
    if (v30)
    {
      v31 = *(float *)(a1 + 324);
      v32 = *(float *)(a1 + 328);
      do
      {
        _H0 = *v29;
        __asm { FCVT            S0, H0 }
        _S0 = v31 * tanhf(v32 * _S0);
        __asm { FCVT            H0, S0 }
        *v29++ = LOWORD(_S0);
        --v30;
      }
      while (v30);
    }
  }
  if (*(_DWORD *)(a1 + 332))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("has_prelu isn't implemented for non float outputs");
}

void *Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(size_t a1, size_t a2, int a3, int a4, void *a5, void *a6, BNNSDataType a7, BNNSDataType a8, int a9, BNNSDataType a10, size_t a11)
{
  Espresso *v17;
  const char *v18;
  uint32_t v19;
  unsigned __int8 v20;
  NSObject *v21;
  void *result;
  BNNSFilterParameters filter_params;
  BNNSLayerParametersFullyConnected layer_params;
  uint8_t buf[4];
  uint32_t flags;
  __int16 v29;
  size_t n_threads;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  bzero(&layer_params, 0x2F0uLL);
  layer_params.i_desc.layout = BNNSDataLayoutVector;
  layer_params.i_desc.size[0] = a1;
  layer_params.i_desc.stride[0] = 1;
  layer_params.i_desc.data_type = a7;
  layer_params.i_desc.data_scale = 1.0;
  layer_params.o_desc.layout = BNNSDataLayoutVector;
  layer_params.o_desc.size[0] = a2;
  layer_params.o_desc.stride[0] = 1;
  layer_params.o_desc.data_type = a10;
  layer_params.o_desc.data_scale = 1.0;
  layer_params.w_desc.data = a5;
  layer_params.w_desc.data_type = a8;
  layer_params.w_desc.data_scale = 1.0;
  layer_params.w_desc.layout = BNNSDataLayoutRowMajorMatrix;
  layer_params.w_desc.size[0] = a1;
  layer_params.w_desc.size[1] = a2;
  layer_params.w_desc.stride[0] = 1;
  layer_params.w_desc.stride[1] = a1;
  if (a9 == 65568 && a10 == BNNSDataTypeFloat32)
  {
    layer_params.bias.layout = BNNSDataLayoutVector;
    layer_params.bias.size[0] = a2;
    layer_params.bias.stride[0] = 1;
    layer_params.bias.data_type = BNNSDataTypeFloat32;
    layer_params.bias.data = a6;
    layer_params.activation.function = BNNSActivationFunctionIdentity;
    *(_QWORD *)&layer_params.activation.alpha = 0;
  }
  filter_params.alloc_memory = (BNNSAlloc)bnns_alloc_capmem;
  filter_params.free_memory = (BNNSFree)MEMORY[0x1E0C834A8];
  *(_QWORD *)&filter_params.flags = 0;
  filter_params.n_threads = a11;
  if (!a4 || a3)
  {
    if (a4)
      v19 = 3145728;
    else
      v19 = 3145729;
    if (!a3)
      v19 = 1;
    filter_params.flags = v19;
  }
  if ((v20 & 1) == 0)
  {
    if ((_DWORD)v17)
    {
      if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
        dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
      Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested[0];
    }
  }
  if (Espresso::BNNSEngine::inner_product_kernel::create_bnns_filter<false,false>(unsigned long,unsigned long,Espresso::inner_product_uniforms,void *,void *,BNNSDataType,BNNSDataType,BNNSDataType,BNNSDataType,unsigned long)::log_requested)
  {
    Espresso::espresso_os_log_subsystem(v17, v18);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109376;
      flags = filter_params.flags;
      v29 = 2048;
      n_threads = filter_params.n_threads;
      _os_log_debug_impl(&dword_190DAF000, v21, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerFullyConnected: flags=%d, n_threads=%zu", buf, 0x12u);
    }

  }
  result = BNNSFilterCreateLayerFullyConnected(&layer_params, &filter_params);
  if (!result)
    Espresso::throw_exception_selector<Espresso::generic_error>("Failed to create BNNS Filter for Fully Connected Layer");
  return result;
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,int const&,int const&>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("inner_product_kernel: Input blob type %d and output blob type %d don't match", a1, a2);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::bnns_auto_sparse_helper_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::bnns_auto_sparse_helper_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::bnns_auto_sparse_helper_t>::__on_zero_shared(uint64_t a1)
{
  free(*(void **)(a1 + 160));
}

void *Espresso::blob<unsigned short,2>::make_uninitialized(_QWORD *a1, int a2, int a3)
{
  return std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,2>,std::allocator<Espresso::blob<unsigned short,2>>,int &,int &,int &,int &,Espresso::blob<unsigned short,2>::UnitializedBlobType,void>(a1, a2, a3, 1, 1);
}

void Espresso::BNNSEngine::elementwise_kernel::__launch_n_ary(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t *v5;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  Espresso *v60;
  const char *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  NSObject *v70;
  _QWORD *v71;
  __int128 v72;
  int v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _OWORD *v88;
  __int128 v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  _OWORD *v96;
  __int128 v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  __int128 v107;
  _QWORD *v108;
  int v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  _OWORD *v116;
  __int128 v117;
  uint64_t v118;
  unint64_t *v119;
  unint64_t v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  void *v125;
  int v126;
  void *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *p_shared_owners;
  unint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  const char *v151;
  uint64_t *v152;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(void **, size_t, size_t);
  uint64_t (*v157)(_QWORD);
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  _BYTE v191[24];
  __int128 __p;
  uint64_t v193;
  char v194[12];
  int v195;
  int v196;
  int v197;
  void *v198;
  void *v199;
  char v200[12];
  int v201;
  int v202;
  int v203;
  void *v204;
  void *v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  uint8_t buf[4];
  int v213;
  __int16 v214;
  uint64_t v215;
  void *in[2];
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  size_t in_stride[2];
  __int128 v228;
  _BYTE v229[32];
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  int v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  int v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  int v261;
  uint64_t v262;

  v5 = a2;
  v262 = *MEMORY[0x1E0C80C00];
  v7 = (_QWORD *)*a2;
  if (a2[1] == *a2 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v211 = 0uLL;
  }
  else
  {
    v8 = *(std::__shared_weak_count **)(*v7 + 168);
    *(_QWORD *)&v211 = *(_QWORD *)(*v7 + 160);
    *((_QWORD *)&v211 + 1) = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v147 = __ldxr(p_shared_owners);
      while (__stxr(v147 + 1, p_shared_owners));
    }
  }
  v9 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v9 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9))
  {
    v210 = 0uLL;
  }
  else
  {
    v148 = *(_QWORD *)(*v9 + 168);
    *(_QWORD *)&v210 = *(_QWORD *)(*v9 + 160);
    *((_QWORD *)&v210 + 1) = v148;
    if (v148)
    {
      v149 = (unint64_t *)(v148 + 8);
      do
        v150 = __ldxr(v149);
      while (__stxr(v150 + 1, v149));
    }
  }
  v209 = 0uLL;
  v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*v5, v5[1], 0);
  if (v10)
  {
    v11 = v10[23];
    *(_QWORD *)&v208 = v10[22];
    *((_QWORD *)&v208 + 1) = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v208 = 0uLL;
  }
  v14 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v14)
  {
    v15 = v14[23];
    *(_QWORD *)&v207 = v14[22];
    *((_QWORD *)&v207 + 1) = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 + 8);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
  }
  else
  {
    v207 = 0uLL;
  }
  v206 = 0uLL;
  Espresso::abstract_blob_container::shape(v200, *(_QWORD *)*v5);
  Espresso::abstract_blob_container::shape(v194, *(_QWORD *)*a3);
  v193 = 0;
  __p = 0u;
  *(_OWORD *)&v191[8] = 0u;
  v190 = xmmword_191A8AA80;
  *(_QWORD *)v191 = 0xFFFFFFFF00000001;
  v18 = (_QWORD *)(a1 + 352);
  v20 = *(_QWORD *)(a1 + 352);
  v19 = *(_QWORD *)(a1 + 360);
  if (v19 == v20)
    std::vector<void *>::resize((char **)(a1 + 352), ((a3[1] - *a3) >> 4) - 1);
  v21 = *a3;
  v22 = a3[1];
  if ((unint64_t)(v22 - *a3) >= 0x11)
  {
    v152 = v5;
    v151 = "Elementwise kernel only supports FP32 or FP16 output";
    v23 = 1;
    while (1)
    {
      v24 = 0uLL;
      if (v23 < (v22 - v21) >> 4)
      {
        v25 = (_QWORD *)(v21 + 16 * v23);
        if (*v25)
        {
          v26 = (*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*v25 + 32))(*v25, (__n128)0);
          v24 = 0uLL;
          if (!v26)
          {
            v24 = *(_OWORD *)(*v25 + 160);
            v27 = *(_QWORD *)(*v25 + 168);
            if (v27)
            {
              v28 = (unint64_t *)(v27 + 8);
              do
                v29 = __ldxr(v28);
              while (__stxr(v29 + 1, v28));
            }
          }
        }
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      v209 = v24;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v23);
      if (v33)
      {
        v34 = v33[11];
        v35 = *((_QWORD *)v33 + 23);
        if (v35)
        {
          v36 = (unint64_t *)(v35 + 8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
      }
      else
      {
        v34 = 0uLL;
      }
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
      v206 = v34;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      Espresso::abstract_blob_container::shape((char *)in_stride, *(_QWORD *)(*a3 + 16 * v23));
      v190 = *(_OWORD *)in_stride;
      *(_OWORD *)v191 = v228;
      *(_QWORD *)&v191[16] = *(_QWORD *)v229;
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      __p = *(_OWORD *)&v229[8];
      v193 = *(_QWORD *)&v229[24];
      if ((v197 == -1 || v197 >= 3)
        && (*(_DWORD *)&v191[4] == -1 || *(int *)&v191[4] >= 3)
        && (v203 == -1 || v203 >= 3)
        && v196 == 1
        && *(_DWORD *)v191 == 1
        && v202 == 1
        && v195 == 1
        && HIDWORD(v190) == 1
        && v201 == 1)
      {
        v197 = 3;
        *(_DWORD *)&v191[4] = 3;
        v203 = 3;
      }
      if (v19 != v20)
        goto LABEL_124;
      bzero(in_stride, 0x228uLL);
      v237 = 1;
      v249 = 1;
      v261 = 1;
      v226 = 0u;
      v225 = 0u;
      v224 = 0u;
      v222 = 0u;
      v223 = 0u;
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      *(_OWORD *)in = 0u;
      v217 = 0u;
      v188 = 0u;
      v189 = 0u;
      v186 = 0u;
      v187 = 0u;
      v184 = 0u;
      v185 = 0u;
      v182 = 0u;
      v183 = 0u;
      v180 = 0u;
      v181 = 0u;
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      v174 = 0u;
      v175 = 0u;
      v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      v169 = 0u;
      if ((_QWORD)v210)
      {
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
        v167 = v210;
        if (*((_QWORD *)&v210 + 1))
        {
          v42 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v158, (const Espresso::layer_shape *)v194, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)in, (uint64_t)&v167, (uint64_t)&v158, 1);
        if (v41)
        {
          v44 = (unint64_t *)&v41->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          goto LABEL_78;
        }
      }
      else
      {
        if (!(_QWORD)v207)
          goto LABEL_256;
        v41 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
        v166 = v207;
        if (*((_QWORD *)&v207 + 1))
        {
          v46 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v158, (const Espresso::layer_shape *)v194, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)in, (uint64_t)&v166, (uint64_t)&v158, 1);
        if (v41)
        {
          v48 = (unint64_t *)&v41->__shared_owners_;
          do
            v45 = __ldaxr(v48);
          while (__stlxr(v45 - 1, v48));
LABEL_78:
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
      }
      if ((_QWORD)v209)
      {
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
        v165 = v209;
        if (*((_QWORD *)&v209 + 1))
        {
          v50 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v158, (const Espresso::layer_shape *)&v190, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v179, (uint64_t)&v165, (uint64_t)&v158, 1);
        if (v49)
        {
          v52 = (unint64_t *)&v49->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          goto LABEL_95;
        }
      }
      else
      {
        if (!(_QWORD)v206)
          goto LABEL_256;
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
        v164 = v206;
        if (*((_QWORD *)&v206 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v158, (const Espresso::layer_shape *)&v190, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v179, (uint64_t)&v164, (uint64_t)&v158, 1);
        if (v49)
        {
          v56 = (unint64_t *)&v49->__shared_owners_;
          do
            v53 = __ldaxr(v56);
          while (__stlxr(v53 - 1, v56));
LABEL_95:
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
            std::__shared_weak_count::__release_weak(v49);
          }
        }
      }
      if ((_QWORD)v211)
      {
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
        v163 = v211;
        if (*((_QWORD *)&v211 + 1))
        {
          v58 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v158, (const Espresso::layer_shape *)v200, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v168, (uint64_t)&v163, (uint64_t)&v158, 1);
        if (!v57)
          goto LABEL_114;
        v62 = (unint64_t *)&v57->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
      }
      else
      {
        if (!(_QWORD)v208)
        {
          v151 = "Elementwise kernel only supports FP32 or FP16 inputs";
LABEL_256:
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v151);
        }
        v57 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
        v162 = v208;
        if (*((_QWORD *)&v208 + 1))
        {
          v64 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
        }
        Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v158, (const Espresso::layer_shape *)v200, 0);
        Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v168, (uint64_t)&v162, (uint64_t)&v158, 1);
        if (!v57)
          goto LABEL_114;
        v66 = (unint64_t *)&v57->__shared_owners_;
        do
          v63 = __ldaxr(v66);
        while (__stlxr(v63 - 1, v66));
      }
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
LABEL_114:
      v234 = v224;
      v235 = v225;
      v236 = v226;
      v230 = v220;
      v231 = v221;
      v233 = v223;
      v232 = v222;
      *(_OWORD *)in_stride = *(_OWORD *)in;
      v228 = v217;
      *(_OWORD *)&v229[16] = v219;
      *(_OWORD *)v229 = v218;
      v246 = v187;
      v247 = v188;
      v248 = v189;
      v242 = v183;
      v243 = v184;
      v244 = v185;
      v245 = v186;
      v238 = v179;
      v239 = v180;
      v240 = v181;
      v241 = v182;
      v258 = v176;
      v259 = v177;
      v260 = v178;
      v254 = v172;
      v255 = v173;
      v256 = v174;
      v257 = v175;
      v250 = v168;
      v251 = v169;
      v252 = v170;
      v253 = v171;
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v159 = 0u;
      v67 = a3[1] - *a3;
      *((_QWORD *)&v158 + 1) = in_stride;
      LODWORD(v158) = a4;
      if ((v67 >> 4) - 1 == v23)
      {
        v68 = *(_DWORD *)(a1 + 284);
        if (v68)
        {
          if (v68 != 1)
            Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Elementwise kernel only supports fused relu activation");
          LODWORD(v159) = 1;
        }
      }
      v156 = bnns_alloc_capmem;
      v157 = MEMORY[0x1E0C834A8];
      v69 = *(_QWORD *)(a1 + 376);
      v154 = 0;
      v155 = v69;
      if ((v69 & 1) == 0)
      {
        if ((_DWORD)v60)
        {
          if (Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken != -1)
            dispatch_once(&Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::onceToken, &__block_literal_global_49_4727);
          Espresso::BNNSEngine::elementwise_kernel::__launch_n_ary(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &,BNNSArithmeticFunction)::log_requested = Espresso::is_espresso_os_log_requested(Espresso::espresso_os_log_flag)::logs_requested;
        }
      }
      if (Espresso::BNNSEngine::elementwise_kernel::__launch_n_ary(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &,BNNSArithmeticFunction)::log_requested)
      {
        Espresso::espresso_os_log_subsystem(v60, v61);
        v70 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109376;
          v213 = v154;
          v214 = 2048;
          v215 = v155;
          _os_log_debug_impl(&dword_190DAF000, v70, OS_LOG_TYPE_DEBUG, "BNNSFilterCreateLayerArithmetic: flags=%d, n_threads=%zu", buf, 0x12u);
        }

      }
      *(_QWORD *)(*v18 + 8 * v23 - 8) = MEMORY[0x19401A9E4](&v158, &v154);
LABEL_124:
      v8 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v210, v211, *((uint64_t *)&v211 + 1));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v207, v208, *((uint64_t *)&v208 + 1));
      ++v23;
      v21 = *a3;
      v22 = a3[1];
      if (v23 >= (v22 - *a3) >> 4)
      {
        v5 = v152;
        break;
      }
    }
  }
  v71 = (_QWORD *)*v5;
  v72 = 0uLL;
  if (v5[1] != *v5)
  {
    if (*v71)
    {
      v73 = (*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*v71 + 32))(*v71, (__n128)0);
      v72 = 0uLL;
      if (!v73)
      {
        v72 = *(_OWORD *)(*v71 + 160);
        v74 = *(_QWORD *)(*v71 + 168);
        if (v74)
        {
          v75 = (unint64_t *)(v74 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
      }
    }
  }
  v211 = v72;
  if (v8)
  {
    v77 = (unint64_t *)&v8->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v79 = (_QWORD *)*a3;
  v80 = 0uLL;
  if (a3[1] != *a3)
  {
    if (*v79)
    {
      v81 = (*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*v79 + 32))(*v79, (__n128)0);
      v80 = 0uLL;
      if (!v81)
      {
        v80 = *(_OWORD *)(*v79 + 160);
        v82 = *(_QWORD *)(*v79 + 168);
        if (v82)
        {
          v83 = (unint64_t *)(v82 + 8);
          do
            v84 = __ldxr(v83);
          while (__stxr(v84 + 1, v83));
        }
      }
    }
  }
  v85 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
  v210 = v80;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*v5, v5[1], 0);
  if (v88)
  {
    v89 = v88[11];
    v90 = *((_QWORD *)v88 + 23);
    if (v90)
    {
      v91 = (unint64_t *)(v90 + 8);
      do
        v92 = __ldxr(v91);
      while (__stxr(v92 + 1, v91));
    }
  }
  else
  {
    v89 = 0uLL;
  }
  v93 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  v208 = v89;
  if (v93)
  {
    v94 = (unint64_t *)&v93->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v96)
  {
    v97 = v96[11];
    v98 = *((_QWORD *)v96 + 23);
    if (v98)
    {
      v99 = (unint64_t *)(v98 + 8);
      do
        v100 = __ldxr(v99);
      while (__stxr(v100 + 1, v99));
    }
  }
  else
  {
    v97 = 0uLL;
  }
  v101 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  v207 = v97;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v104 = *a3;
  v105 = a3[1];
  if ((unint64_t)(v105 - *a3) >= 0x11)
  {
    v106 = 1;
    do
    {
      v107 = 0uLL;
      if (v106 < (v105 - v104) >> 4)
      {
        v108 = (_QWORD *)(v104 + 16 * v106);
        if (*v108)
        {
          v109 = (*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)*v108 + 32))(*v108, (__n128)0);
          v107 = 0uLL;
          if (!v109)
          {
            v107 = *(_OWORD *)(*v108 + 160);
            v110 = *(_QWORD *)(*v108 + 168);
            if (v110)
            {
              v111 = (unint64_t *)(v110 + 8);
              do
                v112 = __ldxr(v111);
              while (__stxr(v112 + 1, v111));
            }
          }
        }
      }
      v113 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
      v209 = v107;
      if (v113)
      {
        v114 = (unint64_t *)&v113->__shared_owners_;
        do
          v115 = __ldaxr(v114);
        while (__stlxr(v115 - 1, v114));
        if (!v115)
        {
          ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
          std::__shared_weak_count::__release_weak(v113);
        }
      }
      v116 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], v106);
      if (v116)
      {
        v117 = v116[11];
        v118 = *((_QWORD *)v116 + 23);
        if (v118)
        {
          v119 = (unint64_t *)(v118 + 8);
          do
            v120 = __ldxr(v119);
          while (__stxr(v120 + 1, v119));
        }
      }
      else
      {
        v117 = 0uLL;
      }
      v121 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
      v206 = v117;
      if (v121)
      {
        v122 = (unint64_t *)&v121->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (!v123)
        {
          ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
          std::__shared_weak_count::__release_weak(v121);
        }
      }
      v124 = v211;
      *(_OWORD *)in_stride = xmmword_191A87020;
      if ((_QWORD)v211 && (_QWORD)v210 && (_QWORD)v209)
      {
        v125 = *(void **)(v209 + 24);
        in[0] = *(void **)(v210 + 24);
        in[1] = v125;
        v126 = BNNSArithmeticFilterApplyBatch(*(void **)(*v18 + 8 * v106 - 8), 1uLL, 2uLL, (const void **)in, in_stride, *(void **)(v211 + 24), 1uLL);
      }
      else
      {
        if (!(_QWORD)v208 || !(_QWORD)v207 || !(_QWORD)v206)
          Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Elementwise kernel only supports all FP32 or FP16 inputs");
        v127 = *(void **)(v206 + 24);
        in[0] = *(void **)(v207 + 24);
        in[1] = v127;
        v126 = BNNSArithmeticFilterApplyBatch(*(void **)(*v18 + 8 * v106 - 8), 1uLL, 2uLL, (const void **)in, in_stride, *(void **)(v208 + 24), 1uLL);
      }
      if (v126 == -1)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Binary elementwise kernel failed in BNNS");
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v210, v124, *((uint64_t *)&v211 + 1));
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v207, v208, *((uint64_t *)&v208 + 1));
      ++v106;
      v104 = *a3;
      v105 = a3[1];
    }
    while (v106 < (v105 - *a3) >> 4);
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  if (v198)
  {
    v199 = v198;
    operator delete(v198);
  }
  if (v204)
  {
    v205 = v204;
    operator delete(v204);
  }
  v128 = (std::__shared_weak_count *)*((_QWORD *)&v206 + 1);
  if (*((_QWORD *)&v206 + 1))
  {
    v129 = (unint64_t *)(*((_QWORD *)&v206 + 1) + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  v131 = (std::__shared_weak_count *)*((_QWORD *)&v207 + 1);
  if (*((_QWORD *)&v207 + 1))
  {
    v132 = (unint64_t *)(*((_QWORD *)&v207 + 1) + 8);
    do
      v133 = __ldaxr(v132);
    while (__stlxr(v133 - 1, v132));
    if (!v133)
    {
      ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
      std::__shared_weak_count::__release_weak(v131);
    }
  }
  v134 = (std::__shared_weak_count *)*((_QWORD *)&v208 + 1);
  if (*((_QWORD *)&v208 + 1))
  {
    v135 = (unint64_t *)(*((_QWORD *)&v208 + 1) + 8);
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
      std::__shared_weak_count::__release_weak(v134);
    }
  }
  v137 = (std::__shared_weak_count *)*((_QWORD *)&v209 + 1);
  if (*((_QWORD *)&v209 + 1))
  {
    v138 = (unint64_t *)(*((_QWORD *)&v209 + 1) + 8);
    do
      v139 = __ldaxr(v138);
    while (__stlxr(v139 - 1, v138));
    if (!v139)
    {
      ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
      std::__shared_weak_count::__release_weak(v137);
    }
  }
  v140 = (std::__shared_weak_count *)*((_QWORD *)&v210 + 1);
  if (*((_QWORD *)&v210 + 1))
  {
    v141 = (unint64_t *)(*((_QWORD *)&v210 + 1) + 8);
    do
      v142 = __ldaxr(v141);
    while (__stlxr(v142 - 1, v141));
    if (!v142)
    {
      ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
      std::__shared_weak_count::__release_weak(v140);
    }
  }
  v143 = (std::__shared_weak_count *)*((_QWORD *)&v211 + 1);
  if (*((_QWORD *)&v211 + 1))
  {
    v144 = (unint64_t *)(*((_QWORD *)&v211 + 1) + 8);
    do
      v145 = __ldaxr(v144);
    while (__stlxr(v145 - 1, v144));
    if (!v145)
    {
      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
      std::__shared_weak_count::__release_weak(v143);
    }
  }
}

void sub_1918D0414(_Unwind_Exception *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v2;
    operator delete(v2);
  }
  v3 = (void *)STACK[0x2B8];
  if (STACK[0x2B8])
  {
    STACK[0x2C0] = (unint64_t)v3;
    operator delete(v3);
  }
  v4 = (void *)STACK[0x2F8];
  if (STACK[0x2F8])
  {
    STACK[0x300] = (unint64_t)v4;
    operator delete(v4);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x310]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x320]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x330]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x340]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      v7 = a4 == 0;
      v8 = 98305;
      v9 = 0x10000;
      goto LABEL_6;
    case 2:
      v8 = 163841;
      v7 = a4 == 0;
      v9 = 0x20000;
      goto LABEL_6;
    case 3:
      v8 = 229377;
      v7 = a4 == 0;
      v9 = 196608;
      goto LABEL_6;
    case 4:
      v8 = 294913;
      v7 = a4 == 0;
      v9 = 0x40000;
LABEL_6:
      if (v7)
        v10 = v8;
      else
        v10 = v9;
      break;
    case 5:
      if (a4)
        v10 = 360448;
      else
        v10 = 360449;
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("Unsupported rank %zu", *(int *)(a3 + 20));
  }
  Espresso::layer_nd_shape::shape_vector_size_t((Espresso::layer_nd_shape *)&v18, a3);
  v12 = (_BYTE *)v18;
  v11 = v19;
  if (a4)
  {
    if ((char *)v18 != v19)
    {
      v13 = v19 - 8;
      if ((unint64_t)(v19 - 8) > v18)
      {
        v14 = v18 + 8;
        do
        {
          v15 = *(_QWORD *)(v14 - 8);
          *(_QWORD *)(v14 - 8) = *(_QWORD *)v13;
          *(_QWORD *)v13 = v15;
          v13 -= 8;
          v16 = v14 >= (unint64_t)v13;
          v14 += 8;
        }
        while (!v16);
      }
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 4) = v10;
  if (v11 != v12)
    memmove((void *)(a1 + 8), v12, v11 - v12);
  *(_QWORD *)(a1 + 136) = v17;
  *(_DWORD *)(a1 + 144) = 65552;
  *(_QWORD *)(a1 + 164) = 1065353216;
  if (v12)
  {
    v19 = v12;
    operator delete(v12);
  }
}

void Espresso::BNNSEngine::reduce_kernel::~reduce_kernel(void **this)
{
  Espresso::BNNSEngine::reduce_kernel::~reduce_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  __int128 v5;

  *this = &off_1E2D5CEE8;
  BNNSFilterDestroy(this[43]);
  this[43] = 0;
  v5 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(this + 41), &v5);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  if (*((_QWORD *)&v5 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 41));
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void Espresso::BNNSEngine::batch_matmul_kernel::~batch_matmul_kernel(void **this)
{
  Espresso::BNNSEngine::batch_matmul_kernel::~batch_matmul_kernel(this);
  JUMPOUT(0x19401CD90);
}

{
  *this = &off_1E2D5DD60;
  BNNSFilterDestroy(this[36]);
  this[36] = 0;
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

void *Espresso::BNNSEngine::batch_matmul_kernel::create_bnns_filter<Espresso::blob<unsigned short,4>>(BOOL a1, BOOL a2, uint64_t *a3, uint64_t *a4, uint64_t a5, std::__shared_weak_count *a6, const Espresso::layer_shape *a7, const Espresso::layer_shape *a8, const Espresso::layer_shape *a9, char a10, uint64_t a11)
{
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  const BNNSFilterParameters *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD v37[4];
  _QWORD v38[2];
  _QWORD v39[2];
  _QWORD v40[2];
  BNNSNDArrayDescriptor v41[3];
  BNNSLayerParametersBroadcastMatMul layer_params;

  bzero(&layer_params.transA, 0x218uLL);
  *(_QWORD *)&layer_params.alpha = 1065353216;
  layer_params.transA = a1;
  layer_params.transB = a2;
  memset(v41, 0, sizeof(v41));
  v40[0] = a5;
  v40[1] = a6;
  if (a6)
  {
    p_shared_owners = (unint64_t *)&a6->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v37, a9, 0);
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v41[2], (uint64_t)v40, (uint64_t)v37, 0);
  if (a6)
  {
    v21 = (unint64_t *)&a6->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))a6->__on_zero_shared)(a6);
      std::__shared_weak_count::__release_weak(a6);
    }
  }
  v23 = *a3;
  v24 = (std::__shared_weak_count *)a3[1];
  v39[0] = v23;
  v39[1] = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v37, a7, 0);
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v41[1], (uint64_t)v39, (uint64_t)v37, 0);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v29 = *a4;
  v30 = (std::__shared_weak_count *)a4[1];
  v38[0] = v29;
  v38[1] = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v37, a8, 0);
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)v41, (uint64_t)v38, (uint64_t)v37, 0);
  if (v30)
  {
    v34 = (unint64_t *)&v30->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  layer_params.o_desc = v41[2];
  layer_params.iA_desc = v41[1];
  layer_params.iB_desc = v41[0];
  v37[2] = bnns_alloc_capmem;
  v37[3] = MEMORY[0x1E0C834A8];
  v37[0] = 0;
  v37[1] = a11;
  if ((a10 & 1) == 0)
    LODWORD(v37[0]) = 1;
  return Espresso::BNNSEngine::create_bnns_batch_matmul(&layer_params, (const BNNSLayerParametersBroadcastMatMul *)v37, v33);
}

void sub_1918D0AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned char,4>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  BOOL v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;

  switch(*(_DWORD *)(a3 + 20))
  {
    case 1:
      v7 = a4 == 0;
      v8 = 98305;
      v9 = 0x10000;
      goto LABEL_6;
    case 2:
      v7 = a4 == 0;
      v8 = 163841;
      v9 = 0x20000;
      goto LABEL_6;
    case 3:
      v8 = 229377;
      v7 = a4 == 0;
      v9 = 196608;
      goto LABEL_6;
    case 4:
      v8 = 294913;
      v7 = a4 == 0;
      v9 = 0x40000;
LABEL_6:
      if (v7)
        v10 = v8;
      else
        v10 = v9;
      break;
    case 5:
      if (a4)
        v10 = 360448;
      else
        v10 = 360449;
      break;
    default:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,unsigned long &>("Unsupported rank %zu", *(int *)(a3 + 20));
  }
  Espresso::layer_nd_shape::shape_vector_size_t((Espresso::layer_nd_shape *)&v18, a3);
  v12 = (_BYTE *)v18;
  v11 = v19;
  if (a4)
  {
    if ((char *)v18 != v19)
    {
      v13 = v19 - 8;
      if ((unint64_t)(v19 - 8) > v18)
      {
        v14 = v18 + 8;
        do
        {
          v15 = *(_QWORD *)(v14 - 8);
          *(_QWORD *)(v14 - 8) = *(_QWORD *)v13;
          *(_QWORD *)v13 = v15;
          v13 -= 8;
          v16 = v14 >= (unint64_t)v13;
          v14 += 8;
        }
        while (!v16);
      }
    }
  }
  v17 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 4) = v10;
  if (v11 != v12)
    memmove((void *)(a1 + 8), v12, v11 - v12);
  *(_QWORD *)(a1 + 136) = v17;
  *(_DWORD *)(a1 + 144) = 131080;
  *(_QWORD *)(a1 + 164) = 1065353216;
  if (v12)
  {
    v19 = v12;
    operator delete(v12);
  }
}

void Espresso::BNNSEngine::transpose_kernel::~transpose_kernel(Espresso::BNNSEngine::transpose_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::BNNSEngine::dynamic_quantize_kernel::~dynamic_quantize_kernel(Espresso::BNNSEngine::dynamic_quantize_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::BNNSEngine::dynamic_quantize_kernel::__launch(_DWORD *a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  char v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  vDSP_Length v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const float *v31;
  int v32;
  float *v33;
  float *v34;
  float *v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  float v42;
  float v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  void *v73;
  void *v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  int v85;
  int32x4_t v86;
  int v87;
  void *__p;
  void *v89;
  float __B;
  float v91;
  float __A;
  float v93;
  float __C;
  float v95;
  int v96[3];

  Espresso::abstract_blob_container::shape((char *)&v85, **a3);
  v8 = vmaxv_u16((uint16x4_t)vmovn_s32(vcgtq_s32((int32x4_t)xmmword_191A93320, v86)));
  if (v87 == -1)
    v9 = v86.i32[3] != 1;
  else
    v9 = v87 == 5;
  if (v86.i32[3])
    v9 = 0;
  if ((v8 & 1) == 0 && v85 >= 1 && !v9)
  {
    if (a1[71])
    {
      (*(void (**)(_DWORD *, uint64_t, uint64_t **, uint64_t **))(*(_QWORD *)a1 + 328))(a1, a2, a3, a4);
      goto LABEL_11;
    }
    Espresso::get_cpu_blob_8((uint64_t)*a3, &v83);
    v10 = *a4;
    v11 = **a4;
    if (v11 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
    {
      v12 = *(_QWORD *)(*v10 + 160);
      v15 = *(std::__shared_weak_count **)(*v10 + 168);
      v81 = v12;
      v82 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
    }
    else
    {
      v12 = 0;
      v81 = 0;
      v82 = 0;
    }
    Espresso::abstract_blob_container::shape((char *)&v71, **a4);
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v75, (const Espresso::layer_shape *)&v71, 0);
    if (v73)
    {
      v74 = v73;
      operator delete(v73);
    }
    if (v80 > 3)
    {
      if (v80 == 5)
      {
        v13 = v76 * (uint64_t)v75;
        v14 = v78 * (uint64_t)v79 * v77;
        goto LABEL_39;
      }
      if (v80 == 4)
      {
        v13 = v75;
        v14 = v77 * (uint64_t)v78 * v76;
        goto LABEL_39;
      }
      v13 = 0;
    }
    else
    {
      switch(v80)
      {
        case 1u:
          v13 = 1;
          break;
        case 2u:
          v13 = v75;
          break;
        case 3u:
          v13 = v76 * (uint64_t)v75;
          break;
        case 4u:
          v13 = v76 * (uint64_t)v75 * v77;
          break;
        case 5u:
          v13 = v76 * (uint64_t)v75 * v77 * v78;
          break;
        default:
          v13 = 0;
          break;
      }
      if (v80)
      {
        v14 = *(&v75 + (int)v80 - 1);
        goto LABEL_39;
      }
    }
    v14 = 0;
LABEL_39:
    v18 = *a3;
    v19 = (*a3)[2];
    if (v19 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v19 + 32))(v19))
    {
      v57 = v18[2];
      v20 = *(_QWORD *)(v57 + 160);
      v58 = *(std::__shared_weak_count **)(v57 + 168);
      v71 = v20;
      v72 = v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
    }
    else
    {
      v20 = 0;
      v71 = 0;
      v72 = 0;
    }
    v21 = *a3;
    v22 = (*a3)[6];
    if (v22 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22))
    {
      v61 = v21[6];
      v23 = *(_QWORD *)(v61 + 160);
      v62 = *(std::__shared_weak_count **)(v61 + 168);
      v70 = v62;
      if (v62)
      {
        v63 = (unint64_t *)&v62->__shared_owners_;
        do
          v64 = __ldxr(v63);
        while (__stxr(v64 + 1, v63));
      }
    }
    else
    {
      v23 = 0;
      v70 = 0;
    }
    v24 = *a3;
    v25 = v24[4];
    if (v25 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25))
    {
      v65 = v24[4];
      v27 = *(_QWORD *)(v65 + 160);
      v26 = *(std::__shared_weak_count **)(v65 + 168);
      if (v26)
      {
        v66 = (unint64_t *)&v26->__shared_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    if (v13)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        vDSP_sve((const float *)(*(_QWORD *)(v12 + 24) + v28), 1, (float *)(*(_QWORD *)(v23 + 24) + v29), v14);
        v29 += 4;
        v28 += 4 * v14;
        --v13;
      }
      while (v13);
    }
    v68 = v26;
    v30 = 0;
    v31 = *(const float **)(v12 + 24);
    v32 = *(_DWORD *)(v12 + 8);
    do
    {
      v32 *= *(_DWORD *)(v12 + 12 + v30);
      v30 += 4;
    }
    while (v30 != 12);
    v33 = *(float **)(v27 + 24);
    v34 = *(float **)(v20 + 24);
    v69 = *(_QWORD *)(v83 + 24);
    v35 = (float *)malloc_type_malloc(4 * v14, 0x100004052888210uLL);
    v36 = (v32 - 1) / (int)v14;
    if ((v36 & 0x80000000) == 0)
    {
      v37 = 0;
      v38 = 0;
      v39 = (v36 + 1);
      v40 = v14;
      do
      {
        if (v40 >= v32)
          v41 = v32;
        else
          v41 = v40;
        v96[0] = v41 + v37;
        __C = *v31;
        v95 = __C;
        vDSP_maxv(v31, 1, &__C, v41 + v37);
        vDSP_minv(v31, 1, &v95, v96[0]);
        v42 = (float)(__C - v95) / 255.0;
        v43 = v95 + (float)(v42 * 128.0);
        __A = -128.0;
        v93 = 127.0;
        v91 = 1.0 / v42;
        if (fabsf(1.0 / v42) == INFINITY)
        {
          vDSP_vfill(&__A, v35, 1, v96[0]);
        }
        else
        {
          __B = -v43;
          vDSP_vasm(v31, 1, &__B, 0, &v91, v35, 1, v96[0]);
          vvnintf(v35, v35, v96);
          vDSP_vclip(v35, 1, &__A, &v93, v35, 1, v96[0]);
        }
        vDSP_vfix8(v35, 1, (char *)(v69 + v38), 1, v96[0]);
        *v33++ = v42;
        *v34++ = v43;
        v38 += v14;
        v31 += v14;
        v40 += v14;
        v37 -= v14;
        --v39;
      }
      while (v39);
    }
    free(v35);
    if (v68)
    {
      v44 = (unint64_t *)&v68->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
        std::__shared_weak_count::__release_weak(v68);
      }
    }
    if (v70)
    {
      v46 = (unint64_t *)&v70->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v48 = v72;
    if (v72)
    {
      v49 = (unint64_t *)&v72->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v82;
    if (v82)
    {
      v52 = (unint64_t *)&v82->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = v84;
    if (v84)
    {
      v55 = (unint64_t *)&v84->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
LABEL_11:
  if (__p)
  {
    v89 = __p;
    operator delete(__p);
  }
}

void sub_1918D134C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::linear_quantize_kernel::~linear_quantize_kernel(Espresso::BNNSEngine::linear_quantize_kernel *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D94528;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D94528;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_quantize_kernel::~generic_linear_quantize_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::BNNSEngine::linear_quantize_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  size_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t j;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BNNSDataType v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  vDSP_Length v49;
  vDSP_Length v50;
  uint64_t v51;
  const float *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t k;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  size_t v61;
  uint64_t v62;
  size_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t *p_shared_owners;
  unint64_t v79;
  void *v80;
  std::__shared_weak_count *v81;
  BNNSDataType v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  _QWORD v87[2];
  BNNSNDArrayDescriptor v88;
  _QWORD v89[2];
  _QWORD v90[2];
  BNNSNDArrayDescriptor v91;
  char v92;
  _DWORD v93[2];
  int v94;
  BNNSLayerParametersQuantization layer_params;
  uint64_t v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;

  if (a3[1] == *a3)
  {
    v100 = 0;
    v101 = 0;
LABEL_117:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("linear_quantize kernel only supports int8/uint8 outputs");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v100, *a3);
  v7 = v100;
  if (!v100)
    goto LABEL_117;
  v8 = *(uint64_t **)a4;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v10 = 0;
    v98 = 0;
    v99 = 0;
  }
  else
  {
    v10 = *(_QWORD *)(*v8 + 160);
    v9 = *(std::__shared_weak_count **)(*v8 + 168);
    v98 = v10;
    v99 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v79 = __ldxr(p_shared_owners);
      while (__stxr(v79 + 1, p_shared_owners));
    }
  }
  v11 = *(uint64_t **)a4;
  v81 = v9;
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4
    || !*v11
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v11 + 32))(*v11) != 1)
  {
    v12 = 0;
    v13 = 0;
    v96 = 0;
    v97 = 0;
    if (v10)
      goto LABEL_14;
LABEL_19:
    if (!v13)
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("linear_quantize kernel only supports fp32 or fp16 inputs");
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(*v11 + 176);
  v12 = *(std::__shared_weak_count **)(*v11 + 184);
  v96 = v13;
  v97 = v12;
  if (v12)
  {
    v14 = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (!v10)
    goto LABEL_19;
LABEL_14:
  if (!v13)
  {
    v16 = *(int *)(v10 + 8);
    for (i = 12; i != 24; i += 4)
      v16 *= *(int *)(v10 + i);
    v18 = v10;
    goto LABEL_23;
  }
LABEL_20:
  v16 = *(int *)(v13 + 8);
  for (j = 12; j != 24; j += 4)
    v16 *= *(int *)(v13 + j);
  v18 = v13;
LABEL_23:
  v80 = *(void **)(v18 + 24);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)**a3 + 32))(**a3);
  v21 = 0;
  v22 = a1;
  v23 = *(_QWORD *)(a1 + 288);
  v24 = *(int *)(v23 + 8);
  do
  {
    v24 *= *(int *)(v23 + 12 + v21);
    v21 += 4;
  }
  while (v21 != 12);
  if (v20 == 2)
    v25 = 131080;
  else
    v25 = 262152;
  v82 = v25;
  if (v13)
    v26 = BNNSDataTypeFloat16;
  else
    v26 = BNNSDataTypeFloat32;
  if (v24 == 1)
  {
    v27 = 0;
    v28 = *(_QWORD *)(a1 + 304);
    v29 = *(int *)(v28 + 8);
    do
    {
      v29 *= *(int *)(v28 + 12 + v27);
      v27 += 4;
    }
    while (v27 != 12);
    if (v29 == 1)
    {
      *(float *)&v91.flags = 1.0 / **(float **)(v23 + 24);
      bzero(&layer_params, 0x2D0uLL);
      layer_params.i_desc.layout = BNNSDataLayoutVector;
      layer_params.i_desc.size[0] = v16;
      layer_params.i_desc.stride[0] = 1;
      layer_params.i_desc.data = v80;
      layer_params.i_desc.data_type = v26;
      layer_params.o_desc.layout = BNNSDataLayoutVector;
      layer_params.o_desc.size[0] = v16;
      layer_params.o_desc.stride[0] = 1;
      layer_params.o_desc.data = *(void **)(v7 + 24);
      layer_params.o_desc.data_type = v82;
      layer_params.scale.layout = BNNSDataLayoutVector;
      layer_params.scale.size[0] = 1;
      layer_params.scale.stride[0] = 1;
      layer_params.scale.data = &v91;
      layer_params.scale.data_type = BNNSDataTypeFloat32;
      layer_params.bias.layout = BNNSDataLayoutVector;
      layer_params.bias.size[0] = 1;
      layer_params.bias.stride[0] = 1;
      layer_params.bias.data = *(void **)(v28 + 24);
      layer_params.bias.data_type = BNNSDataTypeInt32;
      BNNSDirectApplyQuantizer(&layer_params, 0, 1uLL, 1uLL, 1uLL);
      if (!v12)
        goto LABEL_101;
      goto LABEL_97;
    }
  }
  Espresso::abstract_blob_container::shape((char *)&layer_params, **(_QWORD **)a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v93, (const Espresso::layer_shape *)&layer_params, 0);
  if (layer_params.i_desc.size[2])
  {
    layer_params.i_desc.size[3] = layer_params.i_desc.size[2];
    operator delete((void *)layer_params.i_desc.size[2]);
  }
  Espresso::abstract_blob_container::shape((char *)&layer_params, **a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v92, (const Espresso::layer_shape *)&layer_params, 0);
  if (layer_params.i_desc.size[2])
  {
    layer_params.i_desc.size[3] = layer_params.i_desc.size[2];
    operator delete((void *)layer_params.i_desc.size[2]);
  }
  if (v13)
  {
    v90[0] = v13;
    v90[1] = v12;
    if (v12)
    {
      v30 = (unint64_t *)&v12->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v91, (uint64_t)v90, (uint64_t)v93, 1);
    if (v12)
    {
      v32 = (unint64_t *)&v12->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      goto LABEL_55;
    }
  }
  else
  {
    v12 = v81;
    v89[0] = v10;
    v89[1] = v81;
    if (v81)
    {
      v34 = (unint64_t *)&v81->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v91, (uint64_t)v89, (uint64_t)v93, 1);
    if (v81)
    {
      v36 = (unint64_t *)&v81->__shared_owners_;
      do
        v33 = __ldaxr(v36);
      while (__stlxr(v33 - 1, v36));
LABEL_55:
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v37 = v101;
  v87[0] = v100;
  v87[1] = v101;
  if (v101)
  {
    v38 = (unint64_t *)&v101->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned char,4>>((uint64_t)&v88, (uint64_t)v87, (uint64_t)&v92, 1);
  if (v37)
  {
    v40 = (unint64_t *)&v37->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v88.data_type = v82;
  v42 = *(_DWORD *)(v22 + 280);
  v43 = v94;
  if (v42 >= 0)
    v44 = *(unsigned int *)(v22 + 280);
  else
    v44 = v94 + (uint64_t)v42;
  v45 = v93[v44];
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v85, v45, 1, 1, 1);
  v46 = 0;
  v47 = 1 << (v43 + ~(_BYTE)v44);
  v48 = *(_QWORD *)(v22 + 288);
  v49 = *(int *)(v48 + 8);
  v50 = v49;
  do
  {
    v50 *= *(int *)(v48 + 12 + v46);
    v46 += 4;
  }
  while (v46 != 12);
  if (v50 == 1)
  {
    *(float *)&layer_params.axis_mask = 1.0 / **(float **)(v48 + 24);
    vDSP_vfill((const float *)&layer_params, *(float **)(v85 + 24), 1, v45);
  }
  else
  {
    v51 = 0;
    LODWORD(layer_params.axis_mask) = 1065353216;
    v52 = *(const float **)(v48 + 24);
    v53 = v48 + 12;
    do
    {
      v49 *= *(int *)(v53 + v51);
      v51 += 4;
    }
    while (v51 != 12);
    vDSP_svdiv((const float *)&layer_params, v52, 1, *(float **)(v85 + 24), 1, v49);
  }
  v54 = *(_QWORD *)(v22 + 304);
  v55 = *(int *)(v54 + 8);
  for (k = 12; k != 24; k += 4)
    v55 *= *(int *)(v54 + k);
  if (v55 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v83, v45, 1, 1, 1);
    vDSP_vfilli(*(const int **)(*(_QWORD *)(v22 + 304) + 24), *(int **)(v83 + 24), 1, v45);
  }
  else
  {
    v57 = *(std::__shared_weak_count **)(v22 + 312);
    v83 = *(_QWORD *)(v22 + 304);
    v84 = v57;
    if (v57)
    {
      v58 = (unint64_t *)&v57->__shared_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
    }
  }
  v60 = 0;
  layer_params.i_desc = v91;
  layer_params.o_desc = v88;
  layer_params.axis_mask = v47;
  *(_QWORD *)&layer_params.function = 0;
  memset(&layer_params.scale, 0, sizeof(layer_params.scale));
  layer_params.scale.layout = BNNSDataLayoutVector;
  v61 = *(int *)(v85 + 8);
  do
  {
    v61 *= *(int *)(v85 + 12 + v60);
    v60 += 4;
  }
  while (v60 != 12);
  v62 = 0;
  layer_params.scale.size[0] = v61;
  layer_params.scale.stride[0] = 1;
  layer_params.scale.data = *(void **)(v85 + 24);
  layer_params.scale.data_type = BNNSDataTypeFloat32;
  memset(&layer_params.bias, 0, sizeof(layer_params.bias));
  layer_params.bias.layout = BNNSDataLayoutVector;
  v63 = *(int *)(v83 + 8);
  do
  {
    v63 *= *(int *)(v83 + 12 + v62);
    v62 += 4;
  }
  while (v62 != 12);
  layer_params.bias.size[0] = v63;
  layer_params.bias.stride[0] = 1;
  layer_params.bias.data = *(void **)(v83 + 24);
  layer_params.bias.data_type = BNNSDataTypeInt32;
  BNNSDirectApplyQuantizer(&layer_params, 0, 1uLL, 1uLL, 1uLL);
  v64 = v84;
  if (v84)
  {
    v65 = (unint64_t *)&v84->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v86;
  if (v86)
  {
    v68 = (unint64_t *)&v86->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v12 = v97;
  if (v97)
  {
LABEL_97:
    v70 = (unint64_t *)&v12->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
LABEL_101:
  v72 = v99;
  if (v99)
  {
    v73 = (unint64_t *)&v99->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v101;
  if (v101)
  {
    v76 = (unint64_t *)&v101->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_1918D1E44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void Espresso::BNNSEngine::linear_dequantize_kernel::~linear_dequantize_kernel(Espresso::BNNSEngine::linear_dequantize_kernel *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D98A30;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(this);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E2D98A30;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  v2 = (void *)*((_QWORD *)this + 53);
  if (v2)
  {
    *((_QWORD *)this + 54) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 45);
  if (v3)
  {
    *((_QWORD *)this + 46) = v3;
    operator delete(v3);
  }
  Espresso::generic_linear_dequantize_kernel::~generic_linear_dequantize_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::BNNSEngine::linear_dequantize_kernel::__launch(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  BNNSDataType v15;
  BNNSDataType v16;
  size_t v17;
  uint64_t i;
  uint64_t j;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  int v40;
  char v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  size_t v45;
  uint64_t v46;
  vDSP_Length v47;
  vDSP_Length v48;
  uint64_t v49;
  const float *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t k;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  size_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  _QWORD v83[2];
  _QWORD v84[2];
  BNNSNDArrayDescriptor v85;
  _QWORD v86[2];
  BNNSNDArrayDescriptor v87;
  char v88;
  _DWORD v89[2];
  int v90;
  BNNSLayerParametersQuantization layer_params;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;

  if (a4[1] == *a4)
  {
    v96 = 0;
    v97 = 0;
LABEL_117:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("linear_dequantize kernel only supports int8/uint8 input");
  }
  Espresso::inline_get_cpu_blob<Espresso::blob<unsigned char,4>,false>(&v96, *a4);
  v7 = v96;
  if (!v96)
    goto LABEL_117;
  v8 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) == *(_QWORD *)a3
    || !*v8
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v8 + 32))(*v8))
  {
    v9 = 0;
    v94 = 0;
    v95 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(*v8 + 160);
    v76 = *(std::__shared_weak_count **)(*v8 + 168);
    v94 = v9;
    v95 = v76;
    if (v76)
    {
      p_shared_owners = (unint64_t *)&v76->__shared_owners_;
      do
        v78 = __ldxr(p_shared_owners);
      while (__stxr(v78 + 1, p_shared_owners));
    }
  }
  v10 = *(uint64_t **)a3;
  if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3
    && *v10
    && (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v10 + 32))(*v10) == 1)
  {
    v12 = *(_QWORD *)(*v10 + 176);
    v11 = *(std::__shared_weak_count **)(*v10 + 184);
    v92 = v12;
    v93 = v11;
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v92 = 0;
    v93 = 0;
  }
  if (!(v9 | v12))
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("linear_dequantize kernel only supports fp32 or fp16 outputs");
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4) == 4)
    v15 = BNNSDataTypeUInt8;
  else
    v15 = BNNSDataTypeInt8;
  if (v12)
    v16 = BNNSDataTypeFloat16;
  else
    v16 = BNNSDataTypeFloat32;
  if (v12)
  {
    v17 = *(int *)(v12 + 8);
    for (i = 12; i != 24; i += 4)
      v17 *= *(int *)(v12 + i);
  }
  else
  {
    v17 = *(int *)(v9 + 8);
    for (j = 12; j != 24; j += 4)
      v17 *= *(int *)(v9 + j);
    v12 = v9;
  }
  v20 = 0;
  v21 = *(void **)(v12 + 24);
  v22 = *(_QWORD *)(a1 + 288);
  v23 = *(int *)(v22 + 8);
  do
  {
    v23 *= *(int *)(v22 + 12 + v20);
    v20 += 4;
  }
  while (v20 != 12);
  if (v23 == 1)
  {
    v24 = 0;
    v25 = *(_QWORD *)(a1 + 304);
    v26 = *(int *)(v25 + 8);
    do
    {
      v26 *= *(int *)(v25 + 12 + v24);
      v24 += 4;
    }
    while (v24 != 12);
    if (v26 == 1)
    {
      *(float *)&v87.flags = 1.0 / **(float **)(v22 + 24);
      bzero(&layer_params, 0x2D0uLL);
      layer_params.function = BNNSQuantizerFunctionDequantize;
      layer_params.i_desc.layout = BNNSDataLayoutVector;
      layer_params.i_desc.size[0] = v17;
      layer_params.i_desc.stride[0] = 1;
      layer_params.i_desc.data = *(void **)(v7 + 24);
      layer_params.i_desc.data_type = v15;
      layer_params.o_desc.layout = BNNSDataLayoutVector;
      layer_params.o_desc.size[0] = v17;
      layer_params.o_desc.stride[0] = 1;
      layer_params.o_desc.data = v21;
      layer_params.o_desc.data_type = v16;
      layer_params.scale.layout = BNNSDataLayoutVector;
      layer_params.scale.size[0] = 1;
      layer_params.scale.stride[0] = 1;
      layer_params.scale.data = &v87;
      layer_params.scale.data_type = BNNSDataTypeFloat32;
      layer_params.bias.layout = BNNSDataLayoutVector;
      layer_params.bias.size[0] = 1;
      layer_params.bias.stride[0] = 1;
      layer_params.bias.data = *(void **)(v25 + 24);
      layer_params.bias.data_type = BNNSDataTypeInt32;
      BNNSDirectApplyQuantizer(&layer_params, 0, 1uLL, 1uLL, 1uLL);
      if (!v11)
        goto LABEL_101;
      goto LABEL_97;
    }
  }
  Espresso::abstract_blob_container::shape((char *)&layer_params, **a4);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v89, (const Espresso::layer_shape *)&layer_params, 0);
  if (layer_params.i_desc.size[2])
  {
    layer_params.i_desc.size[3] = layer_params.i_desc.size[2];
    operator delete((void *)layer_params.i_desc.size[2]);
  }
  Espresso::abstract_blob_container::shape((char *)&layer_params, **(_QWORD **)a3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v88, (const Espresso::layer_shape *)&layer_params, 0);
  if (layer_params.i_desc.size[2])
  {
    layer_params.i_desc.size[3] = layer_params.i_desc.size[2];
    operator delete((void *)layer_params.i_desc.size[2]);
  }
  v27 = v97;
  v86[0] = v7;
  v86[1] = v97;
  if (v97)
  {
    v28 = (unint64_t *)&v97->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned char,4>>((uint64_t)&v87, (uint64_t)v86, (uint64_t)v89, 1);
  if (v27)
  {
    v30 = (unint64_t *)&v27->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v87.data_type = v15;
  if (v92)
  {
    v32 = v93;
    v84[0] = v92;
    v84[1] = v93;
    if (v93)
    {
      v33 = (unint64_t *)&v93->__shared_owners_;
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<unsigned short,4>>((uint64_t)&v85, (uint64_t)v84, (uint64_t)&v88, 1);
    if (v32)
    {
      v35 = (unint64_t *)&v32->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      goto LABEL_63;
    }
  }
  else
  {
    v32 = v95;
    v83[0] = v94;
    v83[1] = v95;
    if (v95)
    {
      v37 = (unint64_t *)&v95->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    Espresso::BNNSEngine::bnns_array_descriptor_for_blob<Espresso::blob<float,4>>((uint64_t)&v85, (uint64_t)v83, (uint64_t)&v88, 1);
    if (v32)
    {
      v39 = (unint64_t *)&v32->__shared_owners_;
      do
        v36 = __ldaxr(v39);
      while (__stlxr(v36 - 1, v39));
LABEL_63:
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  v40 = *(_DWORD *)(a1 + 280);
  v41 = v90;
  if (v40 >= 0)
    v42 = *(unsigned int *)(a1 + 280);
  else
    v42 = v90 + (uint64_t)v40;
  v43 = v89[v42];
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v81, v43, 1, 1, 1);
  v44 = 0;
  v45 = 1 << (v41 + ~(_BYTE)v42);
  v46 = *(_QWORD *)(a1 + 288);
  v47 = *(int *)(v46 + 8);
  v48 = v47;
  do
  {
    v48 *= *(int *)(v46 + 12 + v44);
    v44 += 4;
  }
  while (v44 != 12);
  if (v48 == 1)
  {
    *(float *)&layer_params.axis_mask = 1.0 / **(float **)(v46 + 24);
    vDSP_vfill((const float *)&layer_params, *(float **)(v81 + 24), 1, v43);
  }
  else
  {
    v49 = 0;
    LODWORD(layer_params.axis_mask) = 1065353216;
    v50 = *(const float **)(v46 + 24);
    v51 = v46 + 12;
    do
    {
      v47 *= *(int *)(v51 + v49);
      v49 += 4;
    }
    while (v49 != 12);
    vDSP_svdiv((const float *)&layer_params, v50, 1, *(float **)(v81 + 24), 1, v47);
  }
  v52 = *(_QWORD *)(a1 + 304);
  v53 = *(int *)(v52 + 8);
  for (k = 12; k != 24; k += 4)
    v53 *= *(int *)(v52 + k);
  if (v53 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,4>,std::allocator<Espresso::blob<int,4>>,int &,int &,int &,int &,void>(&v79, v43, 1, 1, 1);
    vDSP_vfilli(*(const int **)(*(_QWORD *)(a1 + 304) + 24), *(int **)(v79 + 24), 1, v43);
  }
  else
  {
    v55 = *(std::__shared_weak_count **)(a1 + 312);
    v79 = *(_QWORD *)(a1 + 304);
    v80 = v55;
    if (v55)
    {
      v56 = (unint64_t *)&v55->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
  }
  v58 = 0;
  layer_params.i_desc = v87;
  layer_params.o_desc = v85;
  layer_params.axis_mask = v45;
  *(_QWORD *)&layer_params.function = 1;
  memset(&layer_params.scale, 0, sizeof(layer_params.scale));
  layer_params.scale.layout = BNNSDataLayoutVector;
  v59 = *(int *)(v81 + 8);
  do
  {
    v59 *= *(int *)(v81 + 12 + v58);
    v58 += 4;
  }
  while (v58 != 12);
  v60 = 0;
  layer_params.scale.size[0] = v59;
  layer_params.scale.stride[0] = 1;
  layer_params.scale.data = *(void **)(v81 + 24);
  layer_params.scale.data_type = BNNSDataTypeFloat32;
  memset(&layer_params.bias, 0, sizeof(layer_params.bias));
  layer_params.bias.layout = BNNSDataLayoutVector;
  v61 = *(int *)(v79 + 8);
  do
  {
    v61 *= *(int *)(v79 + 12 + v60);
    v60 += 4;
  }
  while (v60 != 12);
  layer_params.bias.size[0] = v61;
  layer_params.bias.stride[0] = 1;
  layer_params.bias.data = *(void **)(v79 + 24);
  layer_params.bias.data_type = BNNSDataTypeInt32;
  BNNSDirectApplyQuantizer(&layer_params, 0, 1uLL, 1uLL, 1uLL);
  v62 = v80;
  if (v80)
  {
    v63 = (unint64_t *)&v80->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v65 = v82;
  if (v82)
  {
    v66 = (unint64_t *)&v82->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v11 = v93;
  if (v93)
  {
LABEL_97:
    v68 = (unint64_t *)&v11->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_101:
  v70 = v95;
  if (v95)
  {
    v71 = (unint64_t *)&v95->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v97;
  if (v97)
  {
    v74 = (unint64_t *)&v97->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1918D2954(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 104);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::pool_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6E70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::pool_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6E70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::pool_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel((Espresso::generic_pool_kernel *)(a1 + 24));
}

void Espresso::MPSGraphEngine::Kernels::inner_product_kernel::~inner_product_kernel(Espresso::MPSGraphEngine::Kernels::inner_product_kernel *this)
{
  *(_QWORD *)this = &off_1E2D66430;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 544);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
}

{
  *(_QWORD *)this = &off_1E2D66430;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 544);
  Espresso::generic_inner_product_kernel::~generic_inner_product_kernel(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::MPSGraphEngine::Kernels::inner_product_kernel::share_weights(uint64_t a1, _QWORD **a2)
{
  _QWORD *result;
  uint64_t *v4;

  result = *a2;
  if (*a2)
  {
    if (result)
    {
      v4 = result;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), v4[68], v4[69]);
      return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), v4[70], v4[71]);
    }
  }
  return result;
}

void Espresso::MPSGraphEngine::Kernels::inner_product_kernel::clear_weights(Espresso::MPSGraphEngine::Kernels::inner_product_kernel *this)
{
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;

  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 560, &v8);
  v2 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v3 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v8 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this + 544, &v8);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void Espresso::MPSGraphEngine::Kernels::inner_product_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, unsigned __int8 **a3, char *a4, unint64_t a5, uint64_t *a6, double a7, double a8, int32x2_t a9)
{
  uint64_t v13;
  int v15;
  unsigned __int8 *v18;
  int *v19;
  int v21;
  int v22;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  int v32;
  BOOL v33;
  unsigned __int8 **v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  int v48;
  int v49;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *p_shared_owners;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  int v98;
  int v99;
  __int128 v100;
  std::string v101;
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104[2];
  __int128 v105;
  uint64_t v106[2];
  uint64_t v107;
  std::__shared_weak_count *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  uint64_t v111[2];
  __int128 v112;
  uint64_t v113[2];
  __int128 v114;
  uint64_t v115;
  uint64_t v116;

  v13 = a2;
  v115 = 0;
  v116 = 0;
  if (a6)
  {
    a2 = *a6;
    if (*a6)
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v115, a2, a6[1]);
  }
  if (*((char *)a3 + 23) < 0)
  {
    v18 = a3[1];
    if (v18 != (unsigned __int8 *)1)
    {
      if (v18 != (unsigned __int8 *)5)
      {
        if (v18 == (unsigned __int8 *)7)
        {
          v19 = (int *)*a3;
          if (*(_DWORD *)*a3 != 828792695 || *(_DWORD *)(*a3 + 3) != 1952396849)
          {
            v21 = *v19;
            v22 = *(int *)((char *)v19 + 3);
            if (v21 != 862347127 || v22 != 1952395827)
              goto LABEL_82;
            goto LABEL_30;
          }
          goto LABEL_90;
        }
LABEL_82:
        v51 = *(_QWORD *)(a1 + 440);
        if (!v51)
        {
          v98 = 1;
          v99 = 1;
          std::allocate_shared[abi:ne180100]<Espresso::quantized_weights_helper,std::allocator<Espresso::quantized_weights_helper>,std::shared_ptr<Espresso::abstract_context> &,int,int,unsigned int &,unsigned int &,void>(&v114, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), &v99, &v98, (int *)(a1 + 308), (int *)(a1 + 304));
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 440, &v114);
          v52 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
          if (*((_QWORD *)&v114 + 1))
          {
            v53 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
            do
              v54 = __ldaxr(v53);
            while (__stlxr(v54 - 1, v53));
            if (!v54)
            {
              ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
              std::__shared_weak_count::__release_weak(v52);
            }
          }
          v51 = *(_QWORD *)(a1 + 440);
        }
        Espresso::quantized_weights_helper::__set_weight_raw_blob(v51, a7, a8, a9, a2, (uint64_t)a3, a4, a5, a6);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v13);
        goto LABEL_168;
      }
      if (*(_DWORD *)*a3 != 828792663 || (*a3)[4] != 54)
      {
        v34 = (unsigned __int8 **)*a3;
LABEL_78:
        v48 = *(_DWORD *)v34;
        v49 = *((unsigned __int8 *)v34 + 4);
        if (v48 != 828792674 || v49 != 54)
          goto LABEL_82;
        v78 = (std::__shared_weak_count *)v116;
        v104[0] = v115;
        v104[1] = v116;
        if (v116)
        {
          v79 = (unint64_t *)(v116 + 8);
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,1>(&v114, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v104, *(_DWORD *)(a1 + 304) << (*(_DWORD *)(a1 + 332) != 0), (a4 & 0x3F) == 0);
        if (v78)
        {
          p_shared_owners = (unint64_t *)&v78->__shared_owners_;
          do
            v82 = __ldaxr(p_shared_owners);
          while (__stlxr(v82 - 1, p_shared_owners));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v83 = *(std::__shared_weak_count **)(a1 + 16);
        v102 = *(_QWORD *)(a1 + 8);
        v103 = v83;
        if (v83)
        {
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldxr(v84);
          while (__stxr(v85 + 1, v84));
        }
        if (*((char *)a3 + 23) < 0)
          std::string::__init_copy_ctor_external(&v101, (const std::string::value_type *)*a3, (std::string::size_type)a3[1]);
        else
          v101 = *(std::string *)a3;
        v100 = v114;
        if (*((_QWORD *)&v114 + 1))
        {
          v86 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
          do
            v87 = __ldxr(v86);
          while (__stxr(v87 + 1, v86));
        }
        Espresso::base_kernel::set_parameter_blob<unsigned short,1>(a1, &v102, (__int128 *)&v101, (uint64_t *)&v100);
        v88 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1))
        {
          v89 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v101.__r_.__value_.__l.__data_);
        v91 = v103;
        if (v103)
        {
          v92 = (unint64_t *)&v103->__shared_owners_;
          do
            v93 = __ldaxr(v92);
          while (__stlxr(v93 - 1, v92));
          if (!v93)
          {
            ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
            std::__shared_weak_count::__release_weak(v91);
          }
        }
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
        if (!*((_QWORD *)&v114 + 1))
          goto LABEL_168;
        v94 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v31 = __ldaxr(v94);
        while (__stlxr(v31 - 1, v94));
LABEL_166:
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
        goto LABEL_168;
      }
LABEL_102:
      v61 = (std::__shared_weak_count *)v116;
      v111[0] = v115;
      v111[1] = v116;
      if (v116)
      {
        v62 = (unint64_t *)(v116 + 8);
        do
          v63 = __ldxr(v62);
        while (__stxr(v63 + 1, v62));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v114, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v111, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v61)
      {
        v64 = (unint64_t *)&v61->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 576), v114, *((uint64_t *)&v114 + 1));
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_168;
      v66 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v31 = __ldaxr(v66);
      while (__stlxr(v31 - 1, v66));
      goto LABEL_166;
    }
    v35 = **a3;
    if (v35 == 87)
    {
LABEL_114:
      v67 = (std::__shared_weak_count *)v116;
      v113[0] = v115;
      v113[1] = v116;
      if (v116)
      {
        v68 = (unint64_t *)(v116 + 8);
        do
          v69 = __ldxr(v68);
        while (__stxr(v69 + 1, v68));
      }
      Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v114, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v113, *(_DWORD *)(a1 + 308), *(_DWORD *)(a1 + 304), (a4 & 0x3F) == 0);
      if (v67)
      {
        v70 = (unint64_t *)&v67->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v112 = v114;
      if (*((_QWORD *)&v114 + 1))
      {
        v72 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 400))(a1, &v112);
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v75 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_168;
      v77 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v31 = __ldaxr(v77);
      while (__stlxr(v31 - 1, v77));
      goto LABEL_166;
    }
    if (v35 != 98)
      goto LABEL_82;
LABEL_53:
    v36 = (std::__shared_weak_count *)v116;
    v106[0] = v115;
    v106[1] = v116;
    if (v116)
    {
      v37 = (unint64_t *)(v116 + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,1>(&v114, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, v106, *(_DWORD *)(a1 + 304) << (*(_DWORD *)(a1 + 332) != 0), (a4 & 0x3F) == 0);
    if (v36)
    {
      v39 = (unint64_t *)&v36->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v105 = v114;
    if (*((_QWORD *)&v114 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 392))(a1, &v105);
    v43 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
    if (*((_QWORD *)&v105 + 1))
    {
      v44 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
    if (!*((_QWORD *)&v114 + 1))
      goto LABEL_168;
    v46 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v31 = __ldaxr(v46);
    while (__stlxr(v31 - 1, v46));
    goto LABEL_166;
  }
  v15 = *((unsigned __int8 *)a3 + 23);
  if (v15 == 1)
  {
    v32 = *(unsigned __int8 *)a3;
    if (v32 != 98)
    {
      if (v32 != 87)
        goto LABEL_82;
      goto LABEL_114;
    }
    goto LABEL_53;
  }
  if (v15 == 5)
  {
    v33 = *(_DWORD *)a3 == 828792663 && *((_BYTE *)a3 + 4) == 54;
    v34 = a3;
    if (!v33)
      goto LABEL_78;
    goto LABEL_102;
  }
  if (v15 != 7)
    goto LABEL_82;
  if (*(_DWORD *)a3 == 828792695 && *(_DWORD *)((char *)a3 + 3) == 1952396849)
  {
LABEL_90:
    v109 = v115;
    v110 = (std::__shared_weak_count *)v116;
    if (v116)
    {
      v55 = (unint64_t *)(v116 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<unsigned short,2>(&v114, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v109, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 528, &v114);
    v57 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
    if (*((_QWORD *)&v114 + 1))
    {
      v58 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v29 = v110;
    if (!v110)
      goto LABEL_168;
    v60 = (unint64_t *)&v110->__shared_owners_;
    do
      v31 = __ldaxr(v60);
    while (__stlxr(v31 - 1, v60));
    goto LABEL_166;
  }
  if (*(_DWORD *)a3 != 862347127 || *(_DWORD *)((char *)a3 + 3) != 1952395827)
    goto LABEL_82;
LABEL_30:
  v107 = v115;
  v108 = (std::__shared_weak_count *)v116;
  if (v116)
  {
    v24 = (unint64_t *)(v116 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  Espresso::base_kernel::zero_copy_or_copy_ptr_to_blob<float,2>(&v114, *(_QWORD *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16), a4, a5, &v107, *(_DWORD *)(a1 + 304), *(_DWORD *)(a1 + 308), (a4 & 0x3F) == 0);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 512, &v114);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v108;
  if (v108)
  {
    v30 = (unint64_t *)&v108->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    goto LABEL_166;
  }
LABEL_168:
  v95 = (std::__shared_weak_count *)v116;
  if (v116)
  {
    v96 = (unint64_t *)(v116 + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
}

void sub_1918D34D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 96);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphEngine::Kernels::inner_product_kernel::is_valid_for_engine(_DWORD *a1, int64x2_t **a2, uint64_t a3)
{
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::string *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  _BOOL8 v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  void *v48;
  int v49;
  int64x2_t *v50;
  unint64_t *v51;
  unint64_t v52;
  int64x2_t *v53;
  unint64_t *v54;
  unint64_t v55;
  int64x2_t **v56;
  int64x2_t *v57;
  unint64_t *v58;
  unint64_t v59;
  int64x2_t *v60;
  unint64_t *v61;
  unint64_t v62;
  int64x2_t *v63;
  unint64_t *v64;
  unint64_t v65;
  int64x2_t *v66;
  unint64_t *v67;
  unint64_t v68;
  int64x2_t *v69;
  unint64_t *v70;
  unint64_t v71;
  int64x2_t *v72[2];
  int64x2_t *v73[2];
  int64x2_t *v74[2];
  int64x2_t *v75[2];
  int64x2_t *v76[2];
  int64x2_t *v77[2];
  int64x2_t *v78;
  std::__shared_weak_count *v79;
  void *__p[2];
  char v81;
  int64x2_t *v82[2];
  int64x2_t *v83;
  std::__shared_weak_count *v84;
  int64x2_t *v85;
  std::__shared_weak_count *v86;
  std::string v87;
  int64x2_t *v88;
  std::__shared_weak_count *v89;
  std::string v90;
  std::string v91;
  _BYTE v92[24];
  _BYTE v93[32];
  std::__shared_weak_count *v94;
  int64x2_t *v95;
  std::__shared_weak_count *v96;

  v5 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v5 >= 0xC1)
  {
    v6 = (std::__shared_weak_count *)a2[1];
    v95 = *a2;
    v96 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: more than 3 inputs. ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
    Espresso::emit_kernel_validation_warning(&v95, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
    v9 = v94;
    if (v94)
    {
      v10 = (unint64_t *)&v94->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    v12 = v96;
    if (!v96)
      return 0;
    v13 = (unint64_t *)&v96->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    goto LABEL_37;
  }
  v15 = a1[85];
  if (v15)
  {
    v16 = (std::__shared_weak_count *)a2[1];
    v88 = *a2;
    v89 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v15 = a1[85];
    }
    std::to_string(&v87, v15);
    v19 = std::string::insert(&v87, 0, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: quantization_mode ");
    v90 = *v19;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
    Espresso::emit_kernel_validation_warning(&v88, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
    v20 = v94;
    if (v94)
    {
      v21 = (unint64_t *)&v94->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    __p[0] = v93;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v92;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    v12 = v89;
    if (!v89)
      return 0;
    v23 = (unint64_t *)&v89->__shared_owners_;
    do
      v14 = __ldaxr(v23);
    while (__stlxr(v14 - 1, v23));
    goto LABEL_37;
  }
  if (!a1[84])
  {
    if (!a1[83])
    {
      if (a1[87])
      {
        v53 = a2[1];
        v77[0] = *a2;
        v77[1] = v53;
        if (v53)
        {
          v54 = &v53->u64[1];
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: add_to_output");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
        Espresso::emit_kernel_validation_warning(v77, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        v56 = v77;
      }
      else if (a1[89] == -1)
      {
        if (a1[101] || a1[102])
        {
          v60 = a2[1];
          v75[0] = *a2;
          v75[1] = v60;
          if (v60)
          {
            v61 = &v60->u64[1];
            do
              v62 = __ldxr(v61);
            while (__stxr(v62 + 1, v61));
          }
          std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: argmax_tree_n_clusters or argmax_tree_n_clusters_keep");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
          Espresso::emit_kernel_validation_warning(v75, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v91.__r_.__value_.__l.__data_);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          v56 = v75;
        }
        else if ((int)a1[106] < 1)
        {
          if (a1[107])
          {
            v66 = a2[1];
            v73[0] = *a2;
            v73[1] = v66;
            if (v66)
            {
              v67 = &v66->u64[1];
              do
                v68 = __ldxr(v67);
              while (__stxr(v68 + 1, v67));
            }
            std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: is_lookup_rounds_to_nearest");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
            Espresso::emit_kernel_validation_warning(v73, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v91.__r_.__value_.__l.__data_);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v90.__r_.__value_.__l.__data_);
            v56 = v73;
          }
          else
          {
            if (!a1[103] && !a1[104])
              return 1;
            v69 = a2[1];
            v72[0] = *a2;
            v72[1] = v69;
            if (v69)
            {
              v70 = &v69->u64[1];
              do
                v71 = __ldxr(v70);
              while (__stxr(v71 + 1, v70));
            }
            std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: sparse_block_size_x or sparse_block_size_y");
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
            Espresso::emit_kernel_validation_warning(v72, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
            Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v91.__r_.__value_.__l.__data_);
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v90.__r_.__value_.__l.__data_);
            v56 = v72;
          }
        }
        else
        {
          v63 = a2[1];
          v74[0] = *a2;
          v74[1] = v63;
          if (v63)
          {
            v64 = &v63->u64[1];
            do
              v65 = __ldxr(v64);
            while (__stxr(v65 + 1, v64));
          }
          std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: compute_every > 0");
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
          Espresso::emit_kernel_validation_warning(v74, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
          Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v91.__r_.__value_.__l.__data_);
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          v56 = v74;
        }
      }
      else
      {
        v57 = a2[1];
        v76[0] = *a2;
        v76[1] = v57;
        if (v57)
        {
          v58 = &v57->u64[1];
          do
            v59 = __ldxr(v58);
          while (__stxr(v59 + 1, v58));
        }
        std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: fused_activation_mode");
        Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
        Espresso::emit_kernel_validation_warning(v76, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
        Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        v56 = v76;
      }
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v56);
      return 0;
    }
    v34 = (std::__shared_weak_count *)a2[1];
    v78 = *a2;
    v79 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: has_prelu");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
    Espresso::emit_kernel_validation_warning(&v78, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
    v37 = v94;
    if (v94)
    {
      v38 = (unint64_t *)&v94->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    v12 = v79;
    if (!v79)
      return 0;
    v40 = (unint64_t *)&v79->__shared_owners_;
    do
      v14 = __ldaxr(v40);
    while (__stlxr(v14 - 1, v40));
LABEL_37:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return 0;
  }
  if (v5 != 64)
  {
    v41 = (std::__shared_weak_count *)a2[1];
    v85 = *a2;
    v86 = v41;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldxr(v42);
      while (__stxr(v43 + 1, v42));
    }
    std::string::basic_string[abi:ne180100]<0>(&v90, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: lookup with more than 1 input. ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v90, a3, 0);
    Espresso::emit_kernel_validation_warning(&v85, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
    v44 = v94;
    if (v94)
    {
      v45 = (unint64_t *)&v94->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v93;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v87);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v90.__r_.__value_.__l.__data_);
    v12 = v86;
    if (!v86)
      return 0;
    v47 = (unint64_t *)&v86->__shared_owners_;
    do
      v14 = __ldaxr(v47);
    while (__stlxr(v14 - 1, v47));
    goto LABEL_37;
  }
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)&v90, *(const Espresso::layer_shape **)a3, 0);
  v26 = SHIDWORD(v90.__r_.__value_.__r.__words[2]);
  if (HIDWORD(v90.__r_.__value_.__r.__words[2]) <= 1)
  {
    v27 = (std::__shared_weak_count *)a2[1];
    v83 = *a2;
    v84 = v27;
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    std::string::basic_string[abi:ne180100]<0>(&v87, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: is_lookup: bottom must have rank >= 2 ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)&v87, a3, 0);
    Espresso::emit_kernel_validation_warning(&v83, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
    v30 = v94;
    if (v94)
    {
      v31 = (unint64_t *)&v94->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    __p[0] = v93;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v92;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v91.__r_.__value_.__l.__data_);
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v87.__r_.__value_.__l.__data_);
    v12 = v84;
    if (!v84)
      return 0;
    v33 = (unint64_t *)&v84->__shared_owners_;
    do
      v14 = __ldaxr(v33);
    while (__stlxr(v14 - 1, v33));
    goto LABEL_37;
  }
  Espresso::layer_nd_shape::shape_vector((std::vector<int> *)&v87, (uint64_t)&v90);
  v48 = (void *)v87.__r_.__value_.__r.__words[0];
  v49 = *(_DWORD *)(v87.__r_.__value_.__r.__words[0] + 4 * v26 - 4);
  v24 = v49 == 1;
  if (v49 == 1)
    goto LABEL_100;
  v50 = a2[1];
  v82[0] = *a2;
  v82[1] = v50;
  if (v50)
  {
    v51 = &v50->u64[1];
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "[Dispatch::MPSGraph::inner_product_kernel] unsupported: is_lookup: last dimension must be equal to 1");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v91, (__int128 *)__p, a3, 0);
  Espresso::emit_kernel_validation_warning(v82, (Espresso::base_kernel::validate_for_engine_warning_t *)&v91);
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)&v91.__r_.__value_.__l.__data_);
  if (v81 < 0)
    operator delete(__p[0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v82);
  v48 = (void *)v87.__r_.__value_.__r.__words[0];
  if (v87.__r_.__value_.__r.__words[0])
  {
LABEL_100:
    v87.__r_.__value_.__l.__size_ = (std::string::size_type)v48;
    operator delete(v48);
  }
  return v24;
}

void sub_1918D3EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41)
{
  uint64_t v41;

  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t((void **)(v41 - 160));
  if (*(char *)(v41 - 169) < 0)
    operator delete(*(void **)(v41 - 192));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *Espresso::MPSGraphEngine::Kernels::inner_product_kernel::set_biases(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), *a2, a2[1]);
}

_QWORD *Espresso::MPSGraphEngine::Kernels::inner_product_kernel::set_weights(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 544), *a2, a2[1]);
}

uint64_t Espresso::MPSGraphEngine::Kernels::inner_product_kernel::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 568);
  *a2 = *(_QWORD *)(this + 560);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *Espresso::MPSGraphEngine::Kernels::inner_product_kernel::get_weights@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = this[68];
  if (v2)
  {
    v3 = this[69];
  }
  else
  {
    v2 = this[64];
    v3 = this[65];
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

_QWORD *Espresso::MPSGraphEngine::Kernels::inner_product_kernel::get_f16_weights@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = this[72];
  if (v2)
  {
    v3 = this[73];
  }
  else
  {
    v2 = this[66];
    v3 = this[67];
  }
  *a2 = v2;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return this;
}

void sub_1918D4A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  Espresso::zephyr::function_t::~function_t((Espresso::zephyr::function_t *)&a30);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::general_concat_kernel::~general_concat_kernel(Espresso::MPSGraphEngine::Kernels::general_concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::general_concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::string *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  int64x2_t *v23;
  std::__shared_weak_count *v24;
  std::string v25;
  std::string v26;
  std::string __p;
  _BYTE v28[24];
  _BYTE v29[32];
  std::__shared_weak_count *v30;
  int64x2_t *v31;
  std::__shared_weak_count *v32;
  void **v33;

  v4 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
  if (v4 != 64)
  {
    v6 = *(std::__shared_weak_count **)(a2 + 8);
    v31 = *(int64x2_t **)a2;
    v32 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v4 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    }
    std::to_string(&v25, v4 >> 6);
    v9 = std::string::insert(&v25, 0, "[Dispatch::MPSGraph::general_concat_kernel] unsupported: number of outputs must be 1, received ");
    v26 = *v9;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v26, a3, 0);
    Espresso::emit_kernel_validation_warning(&v31, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v10 = v30;
    if (v30)
    {
      v11 = (unint64_t *)&v30->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v33 = (void **)v29;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v33);
    v33 = (void **)v28;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v33);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v13 = v32;
    if (!v32)
      return 0;
    v14 = (unint64_t *)&v32->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    goto LABEL_38;
  }
  if (*(_BYTE *)(a1 + 284))
    return 1;
  v16 = *(std::__shared_weak_count **)(a2 + 8);
  v23 = *(int64x2_t **)a2;
  v24 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, "[Dispatch::MPSGraph::general_concat_kernel] unsupported: nd_mode is false");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v26, a3, 0);
  Espresso::emit_kernel_validation_warning(&v23, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v19 = v30;
  if (v30)
  {
    v20 = (unint64_t *)&v30->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v13 = v24;
  if (v24)
  {
    v22 = (unint64_t *)&v24->__shared_owners_;
    do
      v15 = __ldaxr(v22);
    while (__stlxr(v15 - 1, v22));
LABEL_38:
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return 0;
}

void sub_1918D4E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a24);
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1918D5074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v18;

  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::SerDes::layer_io<Espresso::brick_kernel>::~layer_io()
{
  JUMPOUT(0x19401CD90);
}

void Espresso::SerDes::layer_io<Espresso::brick_kernel>::read(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  void *__p[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  void *v14[2];
  void *v15[2];
  __int128 v16;
  int v17;

  v17 = a4;
  *(_OWORD *)v15 = 0u;
  v16 = 0u;
  *(_OWORD *)v14 = 0u;
  Espresso::SerDes::params_io<Espresso::brick_params>(a2, (uint64_t)v14, 0);
  Espresso::abstract_engine_factory::shared(&v12);
  v5 = v12;
  std::string::basic_string[abi:ne180100]<0>(__p, "brick");
  v9 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v5, a3, (uint64_t)__p, (uint64_t)v14, &v9);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
}

void sub_1918D51E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a18);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::brick_kernel>::write(int a1, uint64_t a2, void *lpsrc)
{
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p;
  char v14;

  if (!v4)
    Espresso::SerDes::layer_io_base::throw_inconstistent_state(0);
  v5 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 384))(v4);
  Espresso::SerDes::params_io<Espresso::brick_params>(a2, v5, 1);
  std::string::basic_string[abi:ne180100]<0>(v9, "type");
  Espresso::SerDes::generic_serdes_object::operator[](a2, (uint64_t)v9, &v11);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v11, "brick");
  if (v14 < 0)
    operator delete(__p);
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1918D5310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::brick_kernel>::default_params(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *__p;
  char v12;
  void *v13[2];
  void *v14[2];
  __int128 v15;

  *(_OWORD *)v14 = 0u;
  v15 = 0u;
  *(_OWORD *)v13 = 0u;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(a2, a1);
  v3 = *a2;
  Espresso::SerDes::params_io<Espresso::brick_params>(*a2, (uint64_t)v13, 1);
  std::string::basic_string[abi:ne180100]<0>(v7, "type");
  Espresso::SerDes::generic_serdes_object::operator[](v3, (uint64_t)v7, &v9);
  Espresso::SerDes::generic_serdes_object_key_proxy::operator<<(&v9, "brick");
  if (v12 < 0)
    operator delete(__p);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[1]);
  if (SHIBYTE(v14[0]) < 0)
    operator delete(v13[0]);
}

void sub_1918D543C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v20;

  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20);
  Espresso::cf_branch_params_t::~cf_branch_params_t(&a20);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::layer_io<Espresso::brick_kernel>::reinstantiate(int a1, void *lpsrc, uint64_t a3, int a4)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  int v11;
  void *__p[2];
  char v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  int v16;

  v16 = a4;
  if (!v5)
    Espresso::SerDes::layer_io_base::throw_inconstistent_state(0);
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  Espresso::abstract_engine_factory::shared(&v14);
  v7 = v14;
  std::string::basic_string[abi:ne180100]<0>(__p, "brick");
  v11 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)a3 + 8))(*(_QWORD *)(*(_QWORD *)a3 + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v7, a3, (uint64_t)__p, v6, &v11);
  if (v13 < 0)
    operator delete(__p[0]);
  v8 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1918D5590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void Espresso::SerDes::params_io<Espresso::brick_params>(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  void *v16[2];
  char v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;

  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "class_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 232))(v18, __p, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v5 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (v17 < 0)
      operator delete(v16[0]);
    std::string::basic_string[abi:ne180100]<0>(v16, "parameters_json");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v18 + 232))(v18, __p, a2 + 24);
    if (v21 < 0)
      operator delete(__p[0]);
    v8 = v19;
    if (v19)
    {
      v9 = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      goto LABEL_31;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "class_name");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    v11.n128_f64[0] = Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v18, a2);
    if (v21 < 0)
      operator delete(__p[0]);
    v12 = v19;
    if (v19)
    {
      v13 = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v17 < 0)
      operator delete(v16[0]);
    std::string::basic_string[abi:ne180100]<0>(v16, "parameters_json");
    Espresso::SerDes::generic_serdes_object::operator[](a1, (uint64_t)v16, &v18);
    Espresso::SerDes::generic_serdes_object_key_proxy::operator>>(&v18, a2 + 24);
    if (v21 < 0)
      operator delete(__p[0]);
    v8 = v19;
    if (v19)
    {
      v15 = (unint64_t *)&v19->__shared_owners_;
      do
        v10 = __ldaxr(v15);
      while (__stlxr(v10 - 1, v15));
LABEL_31:
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_1918D57EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  Espresso::SerDes::generic_serdes_object_key_proxy::~generic_serdes_object_key_proxy(&a15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::brick_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::brick_kernel>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::SerDes::layer_io<Espresso::brick_kernel>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::brick_kernel::~brick_kernel(Espresso::brick_kernel *this)
{
  *(_QWORD *)this = &off_1E2D5FAA0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 49));

  Espresso::abstract_kernel_with_named_weights<Espresso::brick_params>::~abstract_kernel_with_named_weights((uint64_t)this);
}

{
  *(_QWORD *)this = &off_1E2D5FAA0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*((_QWORD **)this + 49));

  Espresso::abstract_kernel_with_named_weights<Espresso::brick_params>::~abstract_kernel_with_named_weights((uint64_t)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::brick_kernel::__launch(uint64_t a1, _QWORD *a2, uint64_t **a3, uint64_t **a4)
{
  _BOOL4 v7;
  const void *v8;
  void *v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  char v18;
  void *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  void **v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  void *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  unint64_t i;
  void *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  __int128 v72;
  int64x2_t v73;
  char *v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  void *v87;
  unint64_t j;
  void *v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  int v100;
  void **v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  void *v105;
  void *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  void *v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t v127;
  void *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t *v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  _OWORD *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t *v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  char *v161;
  __int128 v162;
  int64x2_t v163;
  char *v164;
  unint64_t *v165;
  unint64_t v166;
  void *v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  void **v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  void **v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  std::runtime_error *v203;
  std::runtime_error *exception;
  uint64_t v205;
  void *v206;
  void *v207;
  void *v208;
  void *v209;
  uint64_t v211;
  std::__shared_weak_count *v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  void **v215;
  std::__shared_weak_count *v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  void **v219;
  std::__shared_weak_count *v220;
  unsigned int v221[10];
  void *v222;
  void *v223;
  __int128 v224;
  uint64_t v225;
  std::__shared_weak_count *v226;
  void **v227;
  int64x2_t v228;
  __int128 v229;
  __int128 __p;
  uint64_t v231;
  unsigned int v232[10];
  void *v233;
  void *v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;
  std::__shared_weak_count *v238;
  int64x2_t v239;
  char *v240;
  int64x2_t v241;
  char *v242;
  void *v243;
  std::__shared_weak_count *v244;

  if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)))
    v7 = (***(uint64_t (****)(_QWORD))(*(_QWORD *)(a1 + 8) + 8))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)) == 100;
  else
    v7 = 1;
  v8 = *(const void **)(a1 + 8);
  if (v8
  {
    v10 = v9;
    v11 = *(std::__shared_weak_count **)(a1 + 16);
    v243 = v9;
    v244 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = 0;
    v243 = 0;
    v244 = 0;
  }
  v14 = objc_msgSend(*(id *)(a1 + 360), "hasGPUSupport", a1);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v15 = objc_msgSend(*(id *)(v205 + 360), "hasDynamicOutputShape:", ((char *)a4[1] - (char *)*a4) >> 4);
  else
    v15 = 0;
  if (v10)
    v16 = v14 ^ 1;
  else
    v16 = 0;
  if (a4[1] == *a4)
  {
    if (v7)
    {
      v17 = *(_DWORD *)(v205 + 408) == 0;
LABEL_22:
      if (v17)
        v18 = v16;
      else
        v18 = 1;
      if ((v18 & 1) == 0)
      {
        v19 = (void *)objc_opt_new();
        v208 = v19;
        v20 = objc_opt_new();
        v21 = (char *)*a4;
        v22 = a4[1];
        v206 = (void *)v20;
        if (*a4 != v22)
        {
          do
          {
            v23 = *(void ***)v21;
            v24 = (std::__shared_weak_count *)*((_QWORD *)v21 + 1);
            v227 = *(void ***)v21;
            v228.i64[0] = (uint64_t)v24;
            if (v24)
            {
              v25 = (unint64_t *)&v24->__shared_owners_;
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 1, v25));
              v220 = v24;
              do
                v27 = __ldxr(v25);
              while (__stxr(v27 + 1, v25));
            }
            else
            {
              v220 = 0;
            }
            v219 = v23;
            Espresso::brick_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()((uint64_t)&v219);
            v28 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v208, "addObject:", v28);

            v29 = v220;
            v19 = v208;
            if (v220)
            {
              v30 = (unint64_t *)&v220->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            v32 = (std::__shared_weak_count *)v228.i64[0];
            if (v228.i64[0])
            {
              v33 = (unint64_t *)(v228.i64[0] + 8);
              do
                v34 = __ldaxr(v33);
              while (__stlxr(v34 - 1, v33));
              if (!v34)
              {
                ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
            }
            v21 += 16;
          }
          while (v21 != (char *)v22);
        }
        if ((v15 & 1) != 0)
        {
          objc_msgSend(*(id *)(v205 + 360), "computeDynamicOutputShape:", v19);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          for (i = 0; objc_msgSend(v35, "count") > i; ++i)
          {
            objc_msgSend(v35, "objectAtIndexedSubscript:", i);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
            v38 = objc_msgSend(v37, "width");
            v39 = objc_msgSend(v37, "height");
            v40 = objc_msgSend(v37, "channels");
            v41 = objc_msgSend(v37, "batch");
            v42 = objc_msgSend(v37, "sequence");
            v231 = 0;
            v229 = 0u;
            __p = 0u;
            v227 = (void **)__PAIR64__(v39, v38);
            v228.i64[0] = __PAIR64__(v41, v40);
            v228.i64[1] = v42 | 0xFFFFFFFF00000000;
            if ((int)objc_msgSend(v37, "rank") < 1)
              v43 = -1;
            else
              v43 = objc_msgSend(v37, "rank");
            v228.i32[3] = v43;
            v44 = (*a3)[2 * i];
            v217 = 0;
            v218 = 0;
            (*(void (**)(uint64_t, void ***, uint64_t *))(*(_QWORD *)v44 + 16))(v44, &v227, &v217);
            v45 = v218;
            if (v218)
            {
              v46 = (unint64_t *)&v218->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            if ((_QWORD)__p)
            {
              *((_QWORD *)&__p + 1) = __p;
              operator delete((void *)__p);
            }

          }
          v19 = v208;
        }
        v186 = *a3;
        v187 = a3[1];
        while (v186 != v187)
        {
          v188 = (void **)*v186;
          v189 = (std::__shared_weak_count *)v186[1];
          v227 = (void **)*v186;
          v228.i64[0] = (uint64_t)v189;
          if (v189)
          {
            v190 = (unint64_t *)&v189->__shared_owners_;
            do
              v191 = __ldxr(v190);
            while (__stxr(v191 + 1, v190));
            v216 = v189;
            do
              v192 = __ldxr(v190);
            while (__stxr(v192 + 1, v190));
          }
          else
          {
            v216 = 0;
          }
          v215 = v188;
          Espresso::brick_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_1::operator()((uint64_t)&v215);
          v193 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v206, "addObject:", v193);

          v194 = v216;
          if (v216)
          {
            v195 = (unint64_t *)&v216->__shared_owners_;
            do
              v196 = __ldaxr(v195);
            while (__stlxr(v196 - 1, v195));
            if (!v196)
            {
              ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
              std::__shared_weak_count::__release_weak(v194);
            }
          }
          v197 = (std::__shared_weak_count *)v228.i64[0];
          if (v228.i64[0])
          {
            v198 = (unint64_t *)(v228.i64[0] + 8);
            do
              v199 = __ldaxr(v198);
            while (__stlxr(v199 - 1, v198));
            if (!v199)
            {
              ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
              std::__shared_weak_count::__release_weak(v197);
            }
          }
          v186 += 2;
        }
        objc_msgSend(*(id *)(v205 + 360), "computeOnCPUWithInputTensors:outputTensors:", v19, v206);

        goto LABEL_253;
      }
      goto LABEL_60;
    }
  }
  else if (v7)
  {
    v17 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)**a4 + 32))(**a4) == 0;
    goto LABEL_22;
  }
  if (v16)
  {
LABEL_60:
    v241 = 0uLL;
    v242 = 0;
    v239 = 0uLL;
    v240 = 0;
    v209 = (void *)objc_opt_new();
    v207 = (void *)objc_opt_new();
    v48 = *a4;
    v49 = a4[1];
    if (*a4 != v49)
    {
      do
      {
        v51 = *v48;
        v50 = v48[1];
        v237 = *v48;
        v238 = (std::__shared_weak_count *)v50;
        if (v50)
        {
          v52 = (unint64_t *)(v50 + 8);
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v51 + 56))(&v236, v51);
        v54 = v241.i64[1];
        if (v241.i64[1] >= (unint64_t)v242)
        {
          v59 = (v241.i64[1] - v241.i64[0]) >> 4;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v61 = (uint64_t)&v242[-v241.i64[0]];
          if ((uint64_t)&v242[-v241.i64[0]] >> 3 > v60)
            v60 = v61 >> 3;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF0)
            v62 = 0xFFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          *((_QWORD *)&v229 + 1) = &v242;
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v62);
          v65 = &v63[16 * v59];
          v66 = *((_QWORD *)&v236 + 1);
          *(_OWORD *)v65 = v236;
          if (v66)
          {
            v67 = (unint64_t *)(v66 + 8);
            do
              v68 = __ldxr(v67);
            while (__stxr(v68 + 1, v67));
          }
          v69 = (_QWORD *)v241.i64[1];
          v70 = (_QWORD *)v241.i64[0];
          if (v241.i64[1] == v241.i64[0])
          {
            v73 = vdupq_n_s64(v241.u64[1]);
            v71 = &v63[16 * v59];
          }
          else
          {
            v71 = &v63[16 * v59];
            do
            {
              v72 = *((_OWORD *)v69 - 1);
              v69 -= 2;
              *((_OWORD *)v71 - 1) = v72;
              v71 -= 16;
              *v69 = 0;
              v69[1] = 0;
            }
            while (v69 != v70);
            v73 = v241;
          }
          v58 = v65 + 16;
          v241.i64[0] = (uint64_t)v71;
          v241.i64[1] = (uint64_t)(v65 + 16);
          v228 = v73;
          v74 = v242;
          v242 = &v63[16 * v64];
          *(_QWORD *)&v229 = v74;
          v227 = (void **)v73.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v227);
        }
        else
        {
          *(_QWORD *)v241.i64[1] = v236;
          v55 = *((_QWORD *)&v236 + 1);
          *(_QWORD *)(v54 + 8) = *((_QWORD *)&v236 + 1);
          if (v55)
          {
            v56 = (unint64_t *)(v55 + 8);
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v58 = (_OWORD *)(v54 + 16);
        }
        v241.i64[1] = (uint64_t)v58;
        (*(void (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)v51 + 40))(v51, a2, &v236);
        v235 = v236;
        if (*((_QWORD *)&v236 + 1))
        {
          v75 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        Espresso::abstract_blob_container::shape((char *)v232, v51);
        Espresso::brick_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2::operator()((uint64_t)&v235, v232);
        v77 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v209, "addObject:", v77);

        if (v233)
        {
          v234 = v233;
          operator delete(v233);
        }
        v78 = (std::__shared_weak_count *)*((_QWORD *)&v235 + 1);
        if (*((_QWORD *)&v235 + 1))
        {
          v79 = (unint64_t *)(*((_QWORD *)&v235 + 1) + 8);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (!v80)
          {
            ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
            std::__shared_weak_count::__release_weak(v78);
          }
        }
        v81 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
        if (*((_QWORD *)&v236 + 1))
        {
          v82 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v84 = v238;
        if (v238)
        {
          v85 = (unint64_t *)&v238->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v48 += 2;
      }
      while (v48 != v49);
    }
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    if (v15)
    {
      objc_msgSend(*(id *)(v205 + 360), "computeDynamicOutputShape:", v209);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      for (j = 0; objc_msgSend(v87, "count") > j; ++j)
      {
        objc_msgSend(v87, "objectAtIndexedSubscript:", j);
        v89 = (void *)objc_claimAutoreleasedReturnValue();
        v90 = objc_msgSend(v89, "width");
        v91 = objc_msgSend(v89, "height");
        v92 = objc_msgSend(v89, "channels");
        v93 = objc_msgSend(v89, "batch");
        v94 = objc_msgSend(v89, "sequence");
        v231 = 0;
        v229 = 0u;
        __p = 0u;
        v227 = (void **)__PAIR64__(v91, v90);
        v228.i64[0] = __PAIR64__(v93, v92);
        v228.i64[1] = v94 | 0xFFFFFFFF00000000;
        if ((int)objc_msgSend(v89, "rank") < 1)
          v95 = -1;
        else
          v95 = objc_msgSend(v89, "rank");
        v228.i32[3] = v95;
        v96 = (*a3)[2 * j];
        v225 = 0;
        v226 = 0;
        (*(void (**)(uint64_t, void ***, uint64_t *))(*(_QWORD *)v96 + 16))(v96, &v227, &v225);
        v97 = v226;
        if (v226)
        {
          v98 = (unint64_t *)&v226->__shared_owners_;
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }

      }
    }
    v138 = *a3;
    v139 = a3[1];
    if (*a3 != v139)
    {
      do
      {
        v141 = *v138;
        v140 = v138[1];
        v237 = *v138;
        v238 = (std::__shared_weak_count *)v140;
        if (v140)
        {
          v142 = (unint64_t *)(v140 + 8);
          do
            v143 = __ldxr(v142);
          while (__stxr(v143 + 1, v142));
        }
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v141 + 56))(&v236, v141);
        v144 = v239.i64[1];
        if (v239.i64[1] >= (unint64_t)v240)
        {
          v149 = (v239.i64[1] - v239.i64[0]) >> 4;
          v150 = v149 + 1;
          if ((unint64_t)(v149 + 1) >> 60)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v151 = (uint64_t)&v240[-v239.i64[0]];
          if ((uint64_t)&v240[-v239.i64[0]] >> 3 > v150)
            v150 = v151 >> 3;
          if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0)
            v152 = 0xFFFFFFFFFFFFFFFLL;
          else
            v152 = v150;
          *((_QWORD *)&v229 + 1) = &v240;
          v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v152);
          v155 = &v153[16 * v149];
          v156 = *((_QWORD *)&v236 + 1);
          *(_OWORD *)v155 = v236;
          if (v156)
          {
            v157 = (unint64_t *)(v156 + 8);
            do
              v158 = __ldxr(v157);
            while (__stxr(v158 + 1, v157));
          }
          v159 = (_QWORD *)v239.i64[1];
          v160 = (_QWORD *)v239.i64[0];
          if (v239.i64[1] == v239.i64[0])
          {
            v163 = vdupq_n_s64(v239.u64[1]);
            v161 = &v153[16 * v149];
          }
          else
          {
            v161 = &v153[16 * v149];
            do
            {
              v162 = *((_OWORD *)v159 - 1);
              v159 -= 2;
              *((_OWORD *)v161 - 1) = v162;
              v161 -= 16;
              *v159 = 0;
              v159[1] = 0;
            }
            while (v159 != v160);
            v163 = v239;
          }
          v148 = v155 + 16;
          v239.i64[0] = (uint64_t)v161;
          v239.i64[1] = (uint64_t)(v155 + 16);
          v228 = v163;
          v164 = v240;
          v240 = &v153[16 * v154];
          *(_QWORD *)&v229 = v164;
          v227 = (void **)v163.i64[0];
          std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v227);
        }
        else
        {
          *(_QWORD *)v239.i64[1] = v236;
          v145 = *((_QWORD *)&v236 + 1);
          *(_QWORD *)(v144 + 8) = *((_QWORD *)&v236 + 1);
          if (v145)
          {
            v146 = (unint64_t *)(v145 + 8);
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
          }
          v148 = (_OWORD *)(v144 + 16);
        }
        v239.i64[1] = (uint64_t)v148;
        v224 = v236;
        if (*((_QWORD *)&v236 + 1))
        {
          v165 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v166 = __ldxr(v165);
          while (__stxr(v166 + 1, v165));
        }
        Espresso::abstract_blob_container::shape((char *)v221, v141);
        Espresso::brick_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_2::operator()((uint64_t)&v224, v221);
        v167 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v207, "addObject:", v167);

        if (v222)
        {
          v223 = v222;
          operator delete(v222);
        }
        v168 = (std::__shared_weak_count *)*((_QWORD *)&v224 + 1);
        if (*((_QWORD *)&v224 + 1))
        {
          v169 = (unint64_t *)(*((_QWORD *)&v224 + 1) + 8);
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          if (!v170)
          {
            ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
            std::__shared_weak_count::__release_weak(v168);
          }
        }
        v171 = (std::__shared_weak_count *)*((_QWORD *)&v236 + 1);
        if (*((_QWORD *)&v236 + 1))
        {
          v172 = (unint64_t *)(*((_QWORD *)&v236 + 1) + 8);
          do
            v173 = __ldaxr(v172);
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
            std::__shared_weak_count::__release_weak(v171);
          }
        }
        v174 = v238;
        if (v238)
        {
          v175 = (unint64_t *)&v238->__shared_owners_;
          do
            v176 = __ldaxr(v175);
          while (__stlxr(v176 - 1, v175));
          if (!v176)
          {
            ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
            std::__shared_weak_count::__release_weak(v174);
          }
        }
        v138 += 2;
      }
      while (v138 != v139);
    }
    objc_msgSend(*(id *)(v205 + 360), "computeOnCPUWithInputTensors:outputTensors:", v209, v207);
    v177 = *a3;
    v178 = a3[1];
    if (*a3 != v178)
    {
      v179 = 0;
      do
      {
        v180 = (void **)*v177;
        v181 = (std::__shared_weak_count *)v177[1];
        v227 = (void **)*v177;
        v228.i64[0] = (uint64_t)v181;
        if (v181)
        {
          v182 = (unint64_t *)&v181->__shared_owners_;
          do
            v183 = __ldxr(v182);
          while (__stxr(v183 + 1, v182));
        }
        (*((void (**)(void **, _QWORD *, uint64_t))*v180 + 6))(v180, a2, v239.i64[0] + 16 * v179);
        if (v181)
        {
          v184 = (unint64_t *)&v181->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
            std::__shared_weak_count::__release_weak(v181);
          }
        }
        ++v179;
        v177 += 2;
      }
      while (v177 != v178);
    }

    v227 = (void **)&v239;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v227);
    v227 = (void **)&v241;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v227);
    goto LABEL_253;
  }
  if (v10)
    v100 = v14;
  else
    v100 = 0;
  if (v100 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Don't know what to do.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!*a2
  {
    v227 = 0;
    v228.i64[0] = 0;
    v203 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v203, "Inconsistent.");
    __cxa_throw(v203, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v102 = a2[1];
  v227 = v101;
  v228.i64[0] = v102;
  if (v102)
  {
    v103 = (unint64_t *)(v102 + 8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 1, v103));
  }
  v105 = (void *)objc_opt_new();
  v106 = (void *)objc_opt_new();
  v107 = *a4;
  v108 = a4[1];
  while (v107 != v108)
  {
    v109 = *v107;
    v110 = (std::__shared_weak_count *)v107[1];
    v241.i64[0] = *v107;
    v241.i64[1] = (uint64_t)v110;
    if (v110)
    {
      v111 = (unint64_t *)&v110->__shared_owners_;
      do
        v112 = __ldxr(v111);
      while (__stxr(v112 + 1, v111));
      v214 = v110;
      do
        v113 = __ldxr(v111);
      while (__stxr(v113 + 1, v111));
    }
    else
    {
      v214 = 0;
    }
    v213 = v109;
    Espresso::brick_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()((uint64_t)&v213);
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v105, "addObject:", v114);

    v115 = v214;
    if (v214)
    {
      v116 = (unint64_t *)&v214->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = (std::__shared_weak_count *)v241.i64[1];
    if (v241.i64[1])
    {
      v119 = (unint64_t *)(v241.i64[1] + 8);
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v107 += 2;
  }
  v121 = *a3;
  v122 = a3[1];
  while (v121 != v122)
  {
    v123 = *v121;
    v124 = (std::__shared_weak_count *)v121[1];
    v241.i64[0] = *v121;
    v241.i64[1] = (uint64_t)v124;
    if (v124)
    {
      v125 = (unint64_t *)&v124->__shared_owners_;
      do
        v126 = __ldxr(v125);
      while (__stxr(v126 + 1, v125));
      v212 = v124;
      do
        v127 = __ldxr(v125);
      while (__stxr(v127 + 1, v125));
    }
    else
    {
      v212 = 0;
    }
    v211 = v123;
    Espresso::brick_kernel::__launch(std::shared_ptr<Espresso::abstract_batch> const&,Espresso::layer_data &,Espresso::layer_data &)::$_0::operator()((uint64_t)&v211);
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v106, "addObject:", v128);

    v129 = v212;
    if (v212)
    {
      v130 = (unint64_t *)&v212->__shared_owners_;
      do
        v131 = __ldaxr(v130);
      while (__stlxr(v131 - 1, v130));
      if (!v131)
      {
        ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
        std::__shared_weak_count::__release_weak(v129);
      }
    }
    v132 = (std::__shared_weak_count *)v241.i64[1];
    if (v241.i64[1])
    {
      v133 = (unint64_t *)(v241.i64[1] + 8);
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
        std::__shared_weak_count::__release_weak(v132);
      }
    }
    v121 += 2;
  }
  objc_msgSend(*(id *)(v205 + 360), "encodeToMetalCommandBuffer:inputTensors:outputTensors:", v227[18], v105, v106);

  v135 = (std::__shared_weak_count *)v228.i64[0];
  if (v228.i64[0])
  {
    v136 = (unint64_t *)(v228.i64[0] + 8);
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
LABEL_253:
  v200 = v244;
  if (v244)
  {
    v201 = (unint64_t *)&v244->__shared_owners_;
    do
      v202 = __ldaxr(v201);
    while (__stlxr(v202 - 1, v201));
    if (!v202)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
}

