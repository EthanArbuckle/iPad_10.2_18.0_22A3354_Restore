void sub_1913D1B88()
{
  uint64_t v0;

  if (*(char *)(v0 - 73) < 0)
    operator delete(*(void **)(v0 - 96));
  JUMPOUT(0x1913D1B4CLL);
}

void sub_1913D1BA4()
{
  JUMPOUT(0x1913D1B4CLL);
}

void sub_1913D1BB0()
{
  JUMPOUT(0x1913D1B54);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, std::string **a2)
{
  std::string *v3;
  std::string *v4;
  int v5;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = (std::string *)((char *)v3 - 1);
  do
  {
    v5 = v4->__r_.__value_.__s.__data_[1];
    v4 = (std::string *)((char *)v4 + 1);
  }
  while (v5);
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_1913D1BFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t espresso_upgrade_net_to_mil_program(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  void *__p;
  char v20;
  void *v21[2];
  __int128 v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;

  v4 = (std::__shared_weak_count *)a1[1];
  v25 = *a1;
  v26 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = a2[1];
  *(_QWORD *)&v24 = *a2;
  *((_QWORD *)&v24 + 1) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ios15");
  Espresso::MILTranslator::TranslateNetwork((MIL::Attributes::FlexibleShapeInfo *)&v27, (const Espresso::net *)&v25, &v24, (uint64_t *)v21);
  if (v20 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node((_QWORD *)v22);
  v10 = v21[0];
  v21[0] = 0;
  if (v10)
    operator delete(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v26;
  if (v26)
  {
    v15 = (unint64_t *)&v26->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = *a3;
  *a3 = v27;
  v27 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return 0;
}

void sub_1913D1D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  EspressoLight *v19;
  std::exception *v20;

  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::~__hash_table((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 40);
  if (a2 == 1)
  {
    v19 = (EspressoLight *)__cxa_begin_catch(a1);
    EspressoLight::handle_ex_(v19, v20);
    __cxa_end_catch();
    JUMPOUT(0x1913D1D68);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_compile_mil_to_eir(char *a1, std::string *a2)
{
  const std::__fs::filesystem::path *v4;
  BOOL v5;
  int v6;
  std::__shared_weak_count *size;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  std::string __str;
  __int128 v21;
  std::string __p;
  std::__fs::filesystem::path v23;
  std::string v24;
  std::string *v25;
  unsigned __int8 v26;

  v25 = a2;
  v4 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v24, &v25);
  if (std::__fs::filesystem::path::__parent_path(v4).__size_)
  {
    std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v25);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v23, (std::__fs::filesystem::path *)&__p);
    std::__fs::filesystem::__status(&v23, 0);
    if (v26)
      v5 = v26 == 255;
    else
      v5 = 1;
    v6 = v5;
    if (SHIBYTE(v23.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v6 = 0;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v6)
    Espresso::throw_exception_selector<Espresso::io_error>("The output directory does not exist.");
  std::string::basic_string[abi:ne180100]<0>(&v24, a1);
  std::string::basic_string[abi:ne180100]<0>(&v23, "main");
  Espresso::MILTranslator::TranslateProgram((uint64_t *)&__p, (uint64_t)&v24, (uint64_t)&v23);
  if (SHIBYTE(v23.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  MEMORY[0x19401C808](__p.__r_.__value_.__r.__words[0] + 592, a2);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v8 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)a2);
  std::string::basic_string[abi:ne180100]<0>(v18, "");
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  Espresso::dump_network((uint64_t *)&v21, &__str, (uint64_t)v18, (uint64_t)v16);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v12 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  return 0;
}

void sub_1913D201C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  EspressoLight *v37;
  std::exception *v38;

  if (*(char *)(v34 - 73) < 0)
    operator delete(*(void **)(v34 - 96));
  if (a34 < 0)
    operator delete(__p);
  if (*(char *)(v34 - 49) < 0)
    operator delete(*(void **)(v34 - 72));
  if (a2 == 1)
  {
    v37 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v37, v38);
    __cxa_end_catch();
    JUMPOUT(0x1913D1FF4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t espresso_plan_add_cpp_net_from_mil_program_and_reload(const void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  Espresso *v8;
  const char *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27[2];
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  _BYTE buf[12];
  __int16 v34;
  int v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  if (!v8)
    return 0xFFFFFFFFLL;
  Espresso::espresso_os_log_subsystem(v8, v9);
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)&buf[4] = a1;
    v34 = 1024;
    v35 = a3;
    _os_log_impl(&dword_190DAF000, v10, OS_LOG_TYPE_INFO, "espresso_plan_add_cpp_net_from_mil_program_and_reload plan=%zu cp=%d", buf, 0x12u);
  }

  v11 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "main");
  Espresso::MILTranslator::TranslateProgram((MIL::PassManager *)&v28, (uint64_t)buf, 1, 1, 1, 0, &v30);
  if (v36 < 0)
    operator delete(*(void **)buf);
  v14 = v29;
  if (v29)
  {
    v15 = (unint64_t *)&v29->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v30;
  std::string::basic_string[abi:ne180100]<0>(buf, "in_memory_model");
  v32 = buf;
  v18 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v17 + 472), buf, (uint64_t)&std::piecewise_construct, &v32);
  MEMORY[0x19401C808]((char *)v18 + 56, "1");
  if (v36 < 0)
    operator delete(*(void **)buf);
  v19 = (std::__shared_weak_count *)v31;
  v27[0] = v30;
  v27[1] = v31;
  v30 = 0;
  v31 = 0;
  v20 = espresso_plan_add_cpp_net_and_reload(a1, v27, a3, a4);
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v23 = (std::__shared_weak_count *)v31;
  if (v31)
  {
    v24 = (unint64_t *)(v31 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v20;
}

void sub_1913D23C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  char *v22;
  uint64_t v23;
  std::exception *v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a2 == 1)
  {
    v26 = (std::exception *)__cxa_begin_catch(a1);
    if (v23)
    {
      *(_DWORD *)(v23 + 8) = -1;
      *(_QWORD *)v23 = 0;
    }
    handle_ex_plan(v22, v26);
    __cxa_end_catch();
    JUMPOUT(0x1913D238CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t espresso_set_compilation_platform(EspressoLight::espresso_aot_plan *a1, int a2)
{
  EspressoLight::espresso_aot_plan::set_platform(a1, a2);
  return 0;
}

uint64_t espresso_gpu_prefer_integrated()
{
  return 0;
}

uint64_t espresso_network_pin_weights_blob_storage(const void *a1, int a2)
{
}

uint64_t `anonymous namespace'::network_weights_pin_unpin(const void *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;

  if (!a1
  {
    return 4294967290;
  }
  Espresso::get_internal_network((uint64_t)a1, a2, (uint64_t)&v13);
  if (v13)
  {
    v6 = *(_QWORD *)(v13 + 16);
    if (v6)
    {
      if ((_DWORD)a3)
      {
        if (!*(_BYTE *)(v6 + 72) || (v7 = *(_QWORD *)(v13 + 576)) == 0)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Context has not kept weights blob storage alive. Cannot pin it now.");
      }
      else
      {
        v7 = *(_QWORD *)(v13 + 576);
        if (!v7)
        {
LABEL_13:
          v8 = 0;
          goto LABEL_14;
        }
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a3);
      goto LABEL_13;
    }
  }
  v8 = 4294967291;
LABEL_14:
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

uint64_t espresso_network_unpin_weights_blob_storage(const void *a1, int a2)
{
}

uint64_t EspressoLight::abstract_espresso_plan::set_function_name()
{
  return 4294967287;
}

void EspressoLight::abstract_espresso_plan::bind_external_input()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_external_input");
}

void EspressoLight::abstract_espresso_plan::bind_external_output()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_external_output");
}

void EspressoLight::abstract_espresso_plan::input_raw_ptr(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("input_raw_ptr");
}

void EspressoLight::abstract_espresso_plan::output_raw_ptr(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("output_raw_ptr");
}

void EspressoLight::abstract_espresso_plan::set_input_raw_ptr()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("set_input_raw_ptr");
}

void EspressoLight::abstract_espresso_plan::set_output_raw_ptr()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("set_output_raw_ptr");
}

void EspressoLight::abstract_espresso_plan::bind_dyn_output(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3)
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_dyn_output");
}

void EspressoLight::abstract_espresso_plan::unbind()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("unbind");
}

uint64_t EspressoLight::abstract_espresso_plan::is_valid_for_submit(EspressoLight::abstract_espresso_plan *this)
{
  return 0;
}

uint64_t EspressoLight::abstract_espresso_plan::is_in_flight(EspressoLight::abstract_espresso_plan *this)
{
  return 0;
}

void EspressoLight::abstract_espresso_plan::submit(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v6;
  id v7;

  v6 = a2;
  v7 = a5;
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("submit");
}

void sub_1913D274C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void EspressoLight::abstract_espresso_plan::bind_input_vimagebuffer_XYZA8()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_input_vimagebuffer_XYZA8");
}

void EspressoLight::abstract_espresso_plan::bind_input_vimagebuffer_argb8()
{
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_input_vimagebuffer_argb8");
}

uint64_t EspressoLight::abstract_espresso_plan::bind_direct_cvpixelbuffer(EspressoLight::abstract_espresso_plan *this, int a2, const char *a3, __CVBuffer *a4)
{
  return 4294967287;
}

void EspressoLight::abstract_espresso_plan::bind_input_cvpixelbuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v6;

  v6 = a6;
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_input_cvpixelbuffer");
}

void sub_1913D27B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EspressoLight::abstract_espresso_plan::bind_cvpixelbuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v6;

  v6 = a6;
  Espresso::throw_exception_selector<Espresso::not_implemented_error>("bind_cvpixelbuffer");
}

void sub_1913D27E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EspressoLight::espresso_error::~espresso_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x19401CD90);
}

EspressoLight::abstract_espresso_plan *EspressoLight::abstract_espresso_plan::abstract_espresso_plan(EspressoLight::abstract_espresso_plan *this, EspressoLight::espresso_context *a2, int a3)
{
  *(_QWORD *)this = off_1E2D59730;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = a3;
  bzero((char *)this + 20, 0x414uLL);
  return this;
}

void EspressoLight::abstract_espresso_plan::~abstract_espresso_plan(id *this)
{
  *this = off_1E2D59730;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 131));

}

uint64_t EspressoLight::abstract_espresso_plan::set_breakpoint_block(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = MEMORY[0x19401D648](a2);
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;

  return 0;
}

int *NDShapeUtils::ravel_multi_index(int *result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v6 = (a4 - a3) >> 2;
  if (v6 != (a2 - (uint64_t)result) >> 2)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid multi_index");
  *a6 = 0;
  if (a4 != a3)
  {
    v7 = 0;
    if (v6 <= 1)
      v6 = 1;
    do
    {
      v9 = *a5++;
      v8 = v9;
      v10 = *result++;
      v7 += v10 * v8;
      *a6 = v7;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t NDShapeUtils::unravel_index(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5;

  v5 = (a3 - a2) >> 2;
  if (v5 != (a5 - (uint64_t)a4) >> 2)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid multi_index");
  while (--v5)
  {
    a4[v5] = (int)result % *(_DWORD *)(a2 + 4 * v5);
    result = ((int)result / *(_DWORD *)(a2 + 4 * v5));
  }
  *a4 = result;
  return result;
}

void NDLayers::slice_nd_shape_computation(const void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, std::vector<int> *a9, char a10, int **a11)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  std::vector<int>::size_type v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;
  int v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  std::vector<int>::pointer begin;
  const char *v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  std::vector<int>::pointer v50;
  std::vector<int>::pointer v51;
  const char *v52;
  std::vector<int> v53;
  void *__p;
  _BYTE *v55;
  uint64_t v56;
  void *v57;
  _BYTE *v58;
  uint64_t v59;

  v57 = 0;
  v58 = 0;
  v59 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v57, a1, a2, (a2 - (uint64_t)a1) >> 2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 2;
  v55 = 0;
  v56 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v17, v18, v19);
  v20 = a8[1] - *a8;
  v21 = (int)((uint64_t)v20 >> 2);
  std::vector<int>::vector(&v53, v21);
  v22 = v57;
  if (v21 != (v58 - (_BYTE *)v57) >> 2)
  {
    v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in begin_ids";
    goto LABEL_67;
  }
  v23 = __p;
  if (v21 != (v55 - (_BYTE *)__p) >> 2)
  {
    v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in end_ids";
    goto LABEL_67;
  }
  if (a5[1] != v21)
  {
    v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in begin_masks";
    goto LABEL_67;
  }
  if (a6[1] != v21)
  {
    v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in end_masks";
    goto LABEL_67;
  }
  if (a7[1] != v21)
  {
    v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in squeeze_masks";
    goto LABEL_67;
  }
  v24 = *a4;
  if (v21 != (a4[1] - *a4) >> 2)
  {
    v52 = "generic_general_slice: Mismatch between the input rank and the number of elements in strides";
LABEL_67:
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error>(v52);
  }
  if ((int)(v20 >> 2) < 1)
  {
    v48 = 0;
    goto LABEL_50;
  }
  v25 = 0;
  v26 = *a5;
  v27 = (v20 >> 2);
  v28 = *a8;
  do
  {
    if (((*(_QWORD *)(v26 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
    {
      if (*(int *)(v24 + 4 * v25) <= 0)
        v29 = *(_DWORD *)(v28 + 4 * v25) - 1;
      else
        v29 = 0;
    }
    else
    {
      v29 = v22[v25];
      if ((v29 & 0x80000000) == 0)
        goto LABEL_16;
      v29 += *(_DWORD *)(v28 + 4 * v25);
    }
    v22[v25] = v29;
    if (v29 < 0)
      goto LABEL_57;
LABEL_16:
    if (v29 >= *(_DWORD *)(v28 + 4 * v25))
LABEL_57:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int const&>(v29, *(_DWORD *)(*a8 + 4 * v25));
    ++v25;
  }
  while (v27 != v25);
  if (a10)
  {
    v30 = *a11;
    v31 = v22;
    v32 = v23;
    v33 = (v20 >> 2);
    do
    {
      v35 = *v30++;
      v34 = v35;
      if (v35 >= 1)
        *v32 = *v31 + v34;
      ++v32;
      ++v31;
      --v33;
    }
    while (v33);
  }
  v36 = 0;
  v37 = *a7;
  v38 = *a6;
  v39 = *a8;
  do
  {
    if ((*(_QWORD *)(v37 + 8 * (v36 >> 6)) & (1 << v36)) != 0)
    {
      v40 = v22[v36] + 1;
LABEL_26:
      v23[v36] = v40;
      goto LABEL_27;
    }
    if ((*(_QWORD *)(v38 + 8 * (v36 >> 6)) & (1 << v36)) != 0)
    {
      if (*(int *)(v24 + 4 * v36) < 1)
        v40 = -1;
      else
        v40 = *(_DWORD *)(v39 + 4 * v36);
      goto LABEL_26;
    }
    v40 = v23[v36];
    if (v40 < 0)
    {
      v40 += *(_DWORD *)(v39 + 4 * v36);
      v23[v36] = v40;
      if (v40 < 0)
LABEL_58:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("generic_general_slice: Invalid values in end_ids");
    }
LABEL_27:
    if (v40 > *(_DWORD *)(v39 + 4 * v36))
      goto LABEL_58;
    ++v36;
  }
  while (v27 != v36);
  v41 = 0;
  v42 = *a7;
  begin = v53.__begin_;
  v44 = "generic_general_slice: Invalid values in strides";
  do
  {
    v45 = *(_DWORD *)(v24 + 4 * v41);
    if (!v45)
      goto LABEL_60;
    if (((*(_QWORD *)(v42 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
    {
      begin[v41] = 1;
    }
    else
    {
      v46 = (v23[v41] - v22[v41]) / v45;
      begin[v41] = v46;
      if ((v23[v41] - v22[v41]) % *(_DWORD *)(v24 + 4 * v41))
        begin[v41] = ++v46;
      if (v46 <= 0)
      {
        v44 = "generic_general_slice: Invalid values in arguments (begin_ids, end_ids, strides)";
LABEL_60:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>(v44);
      }
    }
    ++v41;
  }
  while (v27 != v41);
  v47 = 0;
  v48 = 0;
  v49 = *a7;
  v50 = v53.__begin_;
  v51 = a9->__begin_;
  do
  {
    if (((*(_QWORD *)(v49 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v47) & 1) == 0)
      v51[v48++] = v50[v47];
    ++v47;
  }
  while (v27 != v47);
LABEL_50:
  std::vector<int>::resize(a9, v48);
  if (v53.__begin_)
  {
    v53.__end_ = v53.__begin_;
    operator delete(v53.__begin_);
  }
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
}

void sub_1913D2D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1913D2E20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::invalid_argument_error,int &,int const&>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::invalid_argument_error>("generic_general_slice: Invalid values %d in begin_ids for input_shape %d", a1, a2);
}

void apply_func_on_nd_slice(const void *a1, uint64_t a2, uint64_t a3, int **a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13)
{
  const void *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  char *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  int v56;
  char *v57;
  char *v58;
  int v59;
  char *v60;
  char *v61;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  _BYTE *v67;
  char *v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  std::vector<int>::pointer begin;
  uint64_t v77;
  std::vector<int>::pointer v78;
  uint64_t v79;
  int *v80;
  int *v81;
  int *v82;
  std::vector<int>::pointer v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v97;
  uint64_t v99;
  void *v100;
  void *v101;
  uint64_t v102;
  void *__p;
  char *v104;
  unint64_t v105;
  std::vector<int> v106;
  std::vector<int> v107;
  std::vector<int> v108;
  std::vector<int> v109;
  int v110;
  _DWORD *v111;
  void *v112;
  uint64_t v113;
  _DWORD *v114;
  void *v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;

  v114 = 0;
  v115 = 0;
  v116 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v114, a1, a2, (a2 - (uint64_t)a1) >> 2);
  v17 = *(const void **)a3;
  v18 = *(_QWORD *)(a3 + 8);
  v19 = (v18 - *(_QWORD *)a3) >> 2;
  v112 = 0;
  v113 = 0;
  v111 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v111, v17, v18, v19);
  v110 = 0;
  v20 = a12[1] - *a12;
  std::vector<int>::vector(&v109, (int)(v20 >> 2));
  std::vector<int>::vector(&v108, (int)(v20 >> 2));
  std::vector<int>::vector(&v107, (int)(v20 >> 2));
  std::vector<int>::vector(&v106, (int)(v20 >> 2));
  v21 = (unint64_t)v20 >> 2;
  v99 = ((unint64_t)v20 >> 2);
  if ((int)((unint64_t)v20 >> 2) < 1)
  {
    v97 = 0;
    LODWORD(v63) = 0;
    v64 = 0;
    __p = 0;
    v104 = 0;
    v65 = 1;
    v105 = 0;
    goto LABEL_81;
  }
  v22 = 0;
  v23 = *a5;
  v24 = *a4;
  v25 = *a12;
  v26 = v114;
  do
  {
    if (((*(_QWORD *)(v23 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
    {
      if (v24[v22] <= 0)
        v27 = *(_DWORD *)(v25 + 4 * v22) - 1;
      else
        v27 = 0;
    }
    else
    {
      v27 = v26[v22];
      if ((v27 & 0x80000000) == 0)
        goto LABEL_10;
      v27 += *(_DWORD *)(v25 + 4 * v22);
    }
    v26[v22] = v27;
    if (v27 < 0)
      goto LABEL_116;
LABEL_10:
    if (v27 >= *(_DWORD *)(v25 + 4 * v22))
LABEL_116:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: Invalid values in begin_ids");
    ++v22;
  }
  while (v99 != v22);
  v28 = 0;
  v29 = *a7;
  v30 = v114;
  v31 = v111;
  v32 = *a4;
  v33 = *a6;
  v34 = *a12;
  do
  {
    if ((*(_QWORD *)(v29 + 8 * (v28 >> 6)) & (1 << v28)) != 0)
    {
      v35 = v30[v28];
      v31[v28] = v35;
      if (v32[v28] >= 1)
        v36 = v35 + 1;
      else
        v36 = v35 - 1;
LABEL_17:
      v31[v28] = v36;
      goto LABEL_18;
    }
    if ((*(_QWORD *)(v33 + 8 * (v28 >> 6)) & (1 << v28)) != 0)
    {
      if (v32[v28] < 1)
        v36 = -1;
      else
        v36 = *(_DWORD *)(v34 + 4 * v28);
      goto LABEL_17;
    }
    v36 = v31[v28];
    if (v36 < 0)
    {
      v36 += *(_DWORD *)(v34 + 4 * v28);
      v31[v28] = v36;
      if (v36 < 0)
LABEL_117:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: Invalid values in end_ids");
    }
LABEL_18:
    if (v36 > *(_DWORD *)(v34 + 4 * v28))
      goto LABEL_117;
    ++v28;
  }
  while (v99 != v28);
  v37 = 0;
  v38 = 0;
  v39 = 0;
  __p = 0;
  v104 = 0;
  v105 = 0;
  do
  {
    if (((*(_QWORD *)(*a7 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v38) & 1) != 0)
    {
      if ((unint64_t)v37 >= v105)
      {
        v42 = (char *)__p;
        v43 = (v37 - (_BYTE *)__p) >> 2;
        v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v45 = v105 - (_QWORD)__p;
        if ((uint64_t)(v105 - (_QWORD)__p) >> 1 > v44)
          v44 = v45 >> 1;
        if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
          v46 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v46);
          v42 = (char *)__p;
          v37 = v104;
        }
        else
        {
          v47 = 0;
        }
        v54 = (char *)(v46 + 4 * v43);
        *(_DWORD *)v54 = 1;
        v55 = v54 + 4;
        while (v37 != v42)
        {
          v56 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v54 - 1) = v56;
          v54 -= 4;
        }
        __p = v54;
        v104 = v55;
        v105 = v46 + 4 * v47;
        if (v42)
          operator delete(v42);
        v37 = v55;
      }
      else
      {
        *(_DWORD *)v37 = 1;
        v37 += 4;
      }
    }
    else
    {
      v40 = v39 + 1;
      v41 = *a9;
      if ((unint64_t)v37 >= v105)
      {
        v48 = (char *)__p;
        v49 = (v37 - (_BYTE *)__p) >> 2;
        v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v51 = v105 - (_QWORD)__p;
        if ((uint64_t)(v105 - (_QWORD)__p) >> 1 > v50)
          v50 = v51 >> 1;
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL)
          v52 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v52 = v50;
        if (v52)
        {
          v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v52);
          v48 = (char *)__p;
          v37 = v104;
        }
        else
        {
          v53 = 0;
        }
        v57 = (char *)(v52 + 4 * v49);
        *(_DWORD *)v57 = *(_DWORD *)(v41 + 4 * v39);
        v58 = v57 + 4;
        while (v37 != v48)
        {
          v59 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v57 - 1) = v59;
          v57 -= 4;
        }
        __p = v57;
        v104 = v58;
        v105 = v52 + 4 * v53;
        if (v48)
          operator delete(v48);
        v37 = v58;
      }
      else
      {
        *(_DWORD *)v37 = *(_DWORD *)(v41 + 4 * v39);
        v37 += 4;
      }
      v39 = v40;
    }
    v104 = v37;
    ++v38;
  }
  while (v38 != v99);
  v60 = (char *)__p;
  v61 = (char *)__p + 4;
  if (__p == v37 || v61 == v37)
  {
    LODWORD(v63) = 0;
    v97 = 0;
    if (__p != v37)
    {
      v64 = 0;
      goto LABEL_79;
    }
    v65 = 1;
    v64 = 0;
  }
  else
  {
    v66 = *(_DWORD *)__p;
    v67 = __p;
    v68 = (char *)__p + 4;
    do
    {
      v70 = *(_DWORD *)v68;
      v68 += 4;
      v69 = v70;
      v71 = v66 < v70;
      if (v66 <= v70)
        v66 = v69;
      if (v71)
        v67 = v61;
      v61 = v68;
    }
    while (v68 != v37);
    v64 = v67 - (_BYTE *)__p;
    v63 = (v67 - (_BYTE *)__p) >> 2;
    v97 = v63;
LABEL_79:
    v65 = 1;
    do
    {
      v72 = *(_DWORD *)v60;
      v60 += 4;
      v65 *= v72;
    }
    while (v60 != v37);
  }
LABEL_81:
  NDShapeUtils::compute_strides(*a12, a12[1], (uint64_t)v109.__begin_, (uint64_t)v109.__end_);
  NDShapeUtils::compute_strides((uint64_t)__p, (uint64_t)v104, (uint64_t)v108.__begin_, (uint64_t)v108.__end_);
  if (v65 >= 1)
  {
    v73 = 0;
    v74 = (int)(v64 >> 2);
    v75 = *(int *)((char *)*a4 + (v64 << 30 >> 30))
        * *(std::vector<int>::pointer)((char *)v109.__begin_ + (v64 << 30 >> 30));
    begin = v108.__begin_;
    v95 = v65;
    do
    {
      if (begin[v74] >= 1)
      {
        v77 = 0;
        do
        {
          NDShapeUtils::unravel_index((v73 + v77), (uint64_t)__p, (uint64_t)v104, v106.__begin_, (uint64_t)v106.__end_);
          if ((int)v21 >= 1)
          {
            v78 = v106.__begin_;
            v79 = v99;
            v80 = *a4;
            v81 = v114;
            v82 = (int *)*a12;
            v83 = v107.__begin_;
            do
            {
              v85 = *v78++;
              v84 = v85;
              v87 = *v80++;
              v86 = v87;
              v88 = *v81++;
              v89 = v88 + v86 * v84;
              if (v89 < 0 || v89 >= *v82)
                Espresso::throw_exception_selector<Espresso::invalid_argument_error>("general_slice_kernel_cpu: Invalid values in arguments (begin_ids, end_ids, strides)");
              *v83++ = v89;
              ++v82;
              --v79;
            }
            while (v79);
          }
          v100 = 0;
          v101 = 0;
          v102 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v100, v109.__begin_, (uint64_t)v109.__end_, v109.__end_ - v109.__begin_);
          NDShapeUtils::ravel_multi_index(v107.__begin_, (uint64_t)v107.__end_, *a12, a12[1], (int *)v100, &v110);
          if (v100)
          {
            v101 = v100;
            operator delete(v100);
          }
          v90 = *((_DWORD *)__p + v74);
          v91 = v110 + (((v90 - 1) * v75) & (v75 >> 31));
          v92 = v108.__begin_[v74];
          v121 = a11 + 4 * v91;
          v122 = a10 + 4 * v91;
          v120 = v75;
          v119 = a8 + 4 * v73 + 4 * v77;
          v117 = v90;
          v118 = v92;
          v93 = *(_QWORD *)(a13 + 24);
          if (!v93)
            std::__throw_bad_function_call[abi:ne180100]();
          (*(void (**)(uint64_t, uint64_t *, uint64_t *, int *, uint64_t *, int *, int *))(*(_QWORD *)v93 + 48))(v93, &v122, &v121, &v120, &v119, &v118, &v117);
          ++v77;
          begin = v108.__begin_;
        }
        while (v77 < v108.__begin_[v74]);
        v65 = v95;
      }
      v94 = v65;
      if (v97 > 0)
        v94 = begin[(v63 - 1)];
      v73 += v94;
    }
    while (v73 < v65);
  }
  if (__p)
  {
    v104 = (char *)__p;
    operator delete(__p);
  }
  if (v106.__begin_)
  {
    v106.__end_ = v106.__begin_;
    operator delete(v106.__begin_);
  }
  if (v107.__begin_)
  {
    v107.__end_ = v107.__begin_;
    operator delete(v107.__begin_);
  }
  if (v108.__begin_)
  {
    v108.__end_ = v108.__begin_;
    operator delete(v108.__begin_);
  }
  if (v109.__begin_)
  {
    v109.__end_ = v109.__begin_;
    operator delete(v109.__begin_);
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
}

void sub_1913D353C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  uint64_t v32;
  void *v34;
  void *v35;

  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  v34 = *(void **)(v32 - 176);
  if (v34)
  {
    *(_QWORD *)(v32 - 168) = v34;
    operator delete(v34);
  }
  v35 = *(void **)(v32 - 152);
  if (v35)
  {
    *(_QWORD *)(v32 - 144) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3600;
  return result;
}

void std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3600;
}

void std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, uint64_t a3, const int *a4, float **a5, const int *a6, const int *a7)
{
  cblas_scopy(*a7, *a2, *a4, *a5, *a6);
}

uint64_t std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8NDLayers8slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfS6_PfS6_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0,std::allocator<NDLayers::slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,std::vector<int> const&,float *,std::vector<int> const&)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

_QWORD *std::__function::__value_func<void ()(float const*,float *,int,float *,int,int)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1913D3840(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void Espresso::throw_exception_selector<Espresso::unsupported_configuration_error,int const&>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::unsupported_configuration_error>("Unsupported update operation code %d", a1);
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB35A8;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB35A8;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
  vDSP_vdiv(*a5, *a6, *a2, *a4, *a3, *a4, *a7);
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_4>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3550;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3550;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
  vDSP_vmul(*a2, *a4, *a5, *a6, *a3, *a4, *a7);
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_3>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB34F8;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB34F8;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
  vDSP_vsub(*a2, *a4, *a5, *a6, *a3, *a4, *a7);
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_2>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB34A0;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB34A0;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, const float **a2, float **a3, int *a4, const float **a5, int *a6, int *a7)
{
  vDSP_vadd(*a2, *a4, *a5, *a6, *a3, *a4, *a7);
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_1>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DB3448;
  return result;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DB3448;
}

void std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::operator()(uint64_t a1, uint64_t a2, float **a3, const int *a4, const float **a5, const int *a6, const int *a7)
{
  cblas_scopy(*a7, *a5, *a6, *a3, *a4);
}

uint64_t std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8NDLayers15update_slice_ndERKNSt3__16vectorIiNS0_9allocatorIiEEEES6_S6_RKNS1_IbNS2_IbEEEESA_SA_PKfPfS6_SD_S6_iE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0,std::allocator<NDLayers::update_slice_nd(std::vector<int> const&,std::vector<int> const&,std::vector<int> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,std::vector<BOOL> const&,float const*,float *,std::vector<int> const&,float *,std::vector<int> const&,int)::$_0>,void ()(float const*,float *,int,float *,int,int)>::target_type()
{
}

void Espresso::analysis_tag_dynamic_blobs::~analysis_tag_dynamic_blobs(Espresso::analysis_tag_dynamic_blobs *this)
{
  char *v1;

  *(_QWORD *)this = &off_1E2D933B0;
  v1 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_1E2D933B0;
  v1 = (char *)this + 8;
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_tag_dynamic_blobs::~pass_tag_dynamic_blobs(Espresso::pass_tag_dynamic_blobs *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_tag_dynamic_blobs::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 1;
}

void Espresso::pass_tag_dynamic_blobs::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unsigned __int8 *v11;
  char *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD v67[5];
  std::__shared_weak_count *v68;
  std::string __p;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  __int128 *v78;

  v5 = (std::__shared_weak_count *)operator new(0x70uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D933B0;
  v6 = v5 + 1;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD770;
  *(_OWORD *)&v5[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v5[3].__shared_owners_ = 0u;
  v5[4].std::__shared_count = 0u;
  *(_OWORD *)&v5[1].__shared_owners_ = 0u;
  v5[2].std::__shared_count = 0u;
  LODWORD(v5[2].__shared_weak_owners_) = 1065353216;
  v5[3].std::__shared_count = 0u;
  *(_OWORD *)&v5[3].__shared_weak_owners_ = 0u;
  LODWORD(v5[4].__shared_owners_) = 1065353216;
  v76 = v5 + 1;
  v77 = v5;
  v7 = *((_QWORD *)a1 + 121);
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 122);
  v74 = v7;
  v75 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (!v7)
    goto LABEL_85;
  Espresso::net::get_analysis_if_existing<Espresso::control_flow_graph>(&v72, (uint64_t)a1);
  Espresso::net::get_analysis_if_existing<Espresso::analysis_make_ssa>(&v70, (uint64_t)a1);
  if (v72)
  {
    Espresso::control_flow_graph::blob_defined_in_block((char *)&__p, v72);
    v11 = *(unsigned __int8 **)(v70 + 104);
    if (v11)
    {
      while (1)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v11 + 6) - *((_QWORD *)v11 + 5)) >> 3) >= 2)
        {
          v78 = (__int128 *)(v11 + 16);
          v12 = std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&__p, v11 + 16, &v78);
          v13 = (unsigned __int8 *)*((_QWORD *)v11 + 5);
          v14 = (unsigned __int8 *)*((_QWORD *)v11 + 6);
          if (v13 != v14)
            break;
        }
LABEL_41:
        v11 = *(unsigned __int8 **)v11;
        if (!v11)
          goto LABEL_42;
      }
      v15 = *((_QWORD *)v12 + 5);
      while (1)
      {
        v78 = (__int128 *)v13;
        if (*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)&__p, v13, &v78)+ 5) == v15)
        {
          v16 = v11[39];
          if ((v16 & 0x80u) == 0)
            v17 = v11[39];
          else
            v17 = *((_QWORD *)v11 + 3);
          v18 = v13[23];
          v19 = (char)v18;
          if ((v18 & 0x80u) != 0)
            v18 = *((_QWORD *)v13 + 1);
          if (v17 == v18)
          {
            if (v19 >= 0)
              v20 = v13;
            else
              v20 = *(unsigned __int8 **)v13;
            if ((v16 & 0x80) != 0)
            {
              if (!memcmp(*((const void **)v11 + 2), v20, *((_QWORD *)v11 + 3)))
                goto LABEL_38;
            }
            else
            {
              if (!v11[39])
                goto LABEL_38;
              v21 = v11 + 16;
              while (*v21 == *v20)
              {
                ++v21;
                ++v20;
                if (!--v16)
                  goto LABEL_38;
              }
            }
          }
        }
        if (!v15)
          goto LABEL_40;
        v22 = **(_QWORD **)(*(_QWORD *)(v15 + 8) + 16);
        v23 = (_QWORD *)(v22 + 40);
        v24 = *(char *)(v22 + 63);
        if (v24 < 0)
        {
          if (*(_QWORD *)(v22 + 48) != 16)
            goto LABEL_40;
          v23 = (_QWORD *)*v23;
        }
        else if (v24 != 16)
        {
          goto LABEL_40;
        }
        v26 = (_QWORD *)*v23;
        v25 = v23[1];
        if (v26 != (_QWORD *)0x5F747865746E6F63 || v25 != 0x726566736E617274)
        {
LABEL_40:
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v76->__shared_owners_, (uint64_t)(v11 + 16), (uint64_t)(v11 + 16));
          goto LABEL_41;
        }
LABEL_38:
        v13 += 24;
        if (v13 == v14)
          goto LABEL_41;
      }
    }
LABEL_42:
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)__p.__r_.__value_.__r.__words[2]);
    v28 = (void *)__p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v28)
      operator delete(v28);
  }
  v66 = a2;
  v78 = 0;
  if (*((_QWORD *)a1 + 5) != *((_QWORD *)a1 + 4))
  {
    v29 = MEMORY[0x1E0C809B0];
    do
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, (unint64_t *)&v78, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
      v31 = v30;
      v32 = v30[3];
      v33 = v30[4];
      if (v32 == v33)
      {
        v36 = v30[3];
      }
      else
      {
        v34 = (_QWORD *)(v74 + 184);
        do
        {
          Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&__p, v34, v32, v32);
          v35 = v76;
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(&v76->__shared_owners_, (uint64_t)&__p))
          {
            std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)&v35[2], (unint64_t *)&v78, &v78);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v32 += 24;
        }
        while (v32 != v33);
        v32 = v31[3];
        v36 = v31[4];
      }
      v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * (_QWORD)v78) + 64);
      if (((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v37 + 264))(v37, 0xAAAAAAAAAAAAAAABLL * ((v36 - v32) >> 3)) & 1) != 0|| std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(&v76[2].__vftable, (unint64_t)v78))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
        v38 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 96, (unint64_t *)&v78, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v39 = v38[3];
        v40 = v38[4];
        if (v39 != v40)
        {
          v41 = (uint64_t)&v76->__shared_owners_;
          do
          {
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v41, v39, v39);
            v39 += 24;
          }
          while (v39 != v40);
          v42 = v38[3];
          v43 = v38[4];
          while (v42 != v43)
          {
            v44 = v74;
            Espresso::map_const_get<std::unordered_map<std::string,std::string>>(&__p, (_QWORD *)(v74 + 184), v42, v42);
            v67[0] = v29;
            v67[1] = 3321888768;
            v67[2] = ___ZN8Espresso22pass_tag_dynamic_blobs14run_on_networkERNS_3netE_block_invoke;
            v67[3] = &__block_descriptor_48_ea8_32c65_ZTSNSt3__110shared_ptrIN8Espresso26analysis_tag_dynamic_blobsEEE_e10_v16__0r_v8l;
            v67[4] = v76;
            v68 = v77;
            if (v77)
            {
              v45 = (unint64_t *)&v77->__shared_owners_;
              do
                v46 = __ldxr(v45);
              while (__stxr(v46 + 1, v45));
            }
            Espresso::interpreter_t::iterate_all_ssa_versions(v44, (uint64_t)&__p, v67);
            v47 = v68;
            if (v68)
            {
              v48 = (unint64_t *)&v68->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v42 += 24;
          }
        }
      }
      v78 = (__int128 *)((char *)v78 + 1);
    }
    while ((unint64_t)v78 < (uint64_t)(*((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4)) >> 4);
  }
  v50 = v71;
  a2 = v66;
  if (v71)
  {
    v51 = (unint64_t *)&v71->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v73;
  if (v73)
  {
    v54 = (unint64_t *)&v73->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v6 = v76;
  v5 = v77;
  if (!v77)
  {
    *(_BYTE *)v66 = 1;
    *(_QWORD *)(v66 + 8) = v6;
    *(_QWORD *)(v66 + 16) = 0;
  }
  else
  {
LABEL_85:
    v56 = (unint64_t *)&v5->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v5;
    do
      v58 = __ldxr(v56);
    while (__stxr(v58 + 1, v56));
    do
      v59 = __ldaxr(v56);
    while (__stlxr(v59 - 1, v56));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v60 = v75;
  if (v75)
  {
    v61 = (unint64_t *)&v75->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = v77;
  if (v77)
  {
    v64 = (unint64_t *)&v77->__shared_owners_;
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 - 1, v64));
    if (!v65)
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
    }
  }
}

void sub_1913D4314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 136);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<std::string,Espresso::basic_block *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::basic_block *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::basic_block *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  std::string *v15;
  __int128 *v16;
  __int128 v17;
  _QWORD *v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  int8x8_t prime;
  void *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint8x8_t v30;
  unint64_t v31;
  uint8x8_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  void *v40;

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  v8 = v7;
  v9 = a1[1];
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(void ***)(*a1 + 8 * v3);
    if (v12)
    {
      v13 = (char *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v8)
          {
            if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v13 + 16, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3)
              break;
          }
          v13 = *(char **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (char *)operator new(0x30uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v8;
  v15 = (std::string *)(v13 + 16);
  v16 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v17 = *v16;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v17;
  }
  v18 = a1 + 2;
  *((_QWORD *)v13 + 5) = 0;
  v19 = (float)(unint64_t)(a1[3] + 1);
  v20 = *((float *)a1 + 8);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    v21 = 1;
    if (v9 >= 3)
      v21 = (v9 & (v9 - 1)) != 0;
    v22 = v21 | (2 * v9);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      prime = (int8x8_t)v23;
    else
      prime = (int8x8_t)v22;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = a1[1];
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v31 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v9 < 3 || (v32 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        v31 = std::__next_prime(v31);
      }
      else
      {
        v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2)
          v31 = v33;
      }
      if (*(_QWORD *)&prime <= v31)
        prime = (int8x8_t)v31;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v25 = operator new(8 * *(_QWORD *)&prime);
          v26 = (void *)*a1;
          *a1 = (uint64_t)v25;
          if (v26)
            operator delete(v26);
          v27 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v27++) = 0;
          while (*(_QWORD *)&prime != v27);
          v28 = (_QWORD *)*v18;
          if (*v18)
          {
            v29 = v28[1];
            v30 = (uint8x8_t)vcnt_s8(prime);
            v30.i16[0] = vaddlv_u8(v30);
            if (v30.u32[0] > 1uLL)
            {
              if (v29 >= *(_QWORD *)&prime)
                v29 %= *(_QWORD *)&prime;
            }
            else
            {
              v29 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v29) = v18;
            v34 = (_QWORD *)*v28;
            if (*v28)
            {
              do
              {
                v35 = v34[1];
                if (v30.u32[0] > 1uLL)
                {
                  if (v35 >= *(_QWORD *)&prime)
                    v35 %= *(_QWORD *)&prime;
                }
                else
                {
                  v35 &= *(_QWORD *)&prime - 1;
                }
                if (v35 != v29)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v35))
                  {
                    *(_QWORD *)(*a1 + 8 * v35) = v28;
                    goto LABEL_58;
                  }
                  *v28 = *v34;
                  *v34 = **(_QWORD **)(*a1 + 8 * v35);
                  **(_QWORD **)(*a1 + 8 * v35) = v34;
                  v34 = v28;
                }
                v35 = v29;
LABEL_58:
                v28 = v34;
                v34 = (_QWORD *)*v34;
                v29 = v35;
              }
              while (v34);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v40 = (void *)*a1;
        *a1 = 0;
        if (v40)
          operator delete(v40);
        v9 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v36 = *a1;
  v37 = *(_QWORD **)(*a1 + 8 * v3);
  if (v37)
  {
    *(_QWORD *)v13 = *v37;
LABEL_75:
    *v37 = v13;
    goto LABEL_76;
  }
  *(_QWORD *)v13 = *v18;
  *v18 = v13;
  *(_QWORD *)(v36 + 8 * v3) = v18;
  if (*(_QWORD *)v13)
  {
    v38 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9)
        v38 %= v9;
    }
    else
    {
      v38 &= v9 - 1;
    }
    v37 = (_QWORD *)(*a1 + 8 * v38);
    goto LABEL_75;
  }
LABEL_76:
  ++a1[3];
  return v13;
}

void sub_1913D47B8(_Unwind_Exception *a1)
{
  void **v1;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c65_ZTSNSt3__110shared_ptrIN8Espresso26analysis_tag_dynamic_blobsEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c65_ZTSNSt3__110shared_ptrIN8Espresso26analysis_tag_dynamic_blobsEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Espresso::analysis_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_tag_dynamic_blobs>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_tag_dynamic_blobs>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::~convolution_kernel_cpu(void **this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
}

{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 72));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 70));
  Espresso::generic_convolution_kernel::~generic_convolution_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  _DWORD *v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t __ldb;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  int v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  void *v65;
  int v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  int v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t i;
  uint64_t v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  void *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float v97;
  float *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  float *v116;
  float *v117;
  int v118;
  float v119;
  int v120;
  int v121;
  float v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  float v129;
  float *v130;
  int v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  float *v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  float *v146;
  uint64_t v147;
  float *v148;
  int shared_owners_high;
  uint64_t shared_owners_low;
  int *v151;
  uint64_t v152;
  _WORD *v153;
  int v154;
  int v159;
  int v160;
  uint64_t v161;
  int v162;
  int v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t j;
  unint64_t *v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  unint64_t *v188;
  unint64_t v189;
  std::runtime_error *exception;
  int v191;
  std::__shared_weak_count *height;
  std::__shared_weak_count *v193;
  std::__shared_weak_count *v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  unint64_t *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  BOOL v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  std::__shared_weak_count *v220;
  int v221;
  uint64_t v222;
  int v223[2];
  int v224;
  int v225;
  int v226;
  int v227;
  int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *data;
  std::__shared_weak_count *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  int v237[2];
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  uint64_t v246;
  std::__shared_weak_count *v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v252;

  v252 = *MEMORY[0x1E0C80C00];
  v5 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v5)
  {
    v7 = v5[22];
    v6 = (std::__shared_weak_count *)v5[23];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  v194 = v6;
  if (v10)
  {
    v12 = v10[22];
    v11 = (std::__shared_weak_count *)v10[23];
    if (v11)
    {
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v193 = v11;
      goto LABEL_14;
    }
  }
  else
  {
    v12 = 0;
  }
  v193 = 0;
LABEL_14:
  v229 = *(_DWORD *)(v12 + 8);
  v198 = v12 + 8;
  v228 = *(_DWORD *)(v12 + 12);
  v15 = *(_DWORD *)(v7 + 8);
  v16 = *(_DWORD *)(v7 + 12);
  v17 = *(_DWORD *)(a1 + 352);
  v18 = *(_DWORD *)(a1 + 356);
  v19 = *(__int16 *)(a1 + 376);
  switch(v19)
  {
    case 4:
      goto LABEL_17;
    case 2:
      *(_QWORD *)v223 = 0;
      v20 = (_DWORD *)a1;
      break;
    case 1:
LABEL_17:
      v20 = (_DWORD *)a1;
      v21 = v18 - v228 + (v16 - 1) * *(__int16 *)(a1 + 398);
      v22 = v17 - v229 + (v15 - 1) * *(__int16 *)(a1 + 396);
      v23 = v21 & ~(v21 >> 31);
      v24 = v22 & ~(v22 >> 31);
      v25 = *(unsigned __int16 *)(a1 + 376);
      v26 = v24 >> 1;
      v27 = v24 - (v24 >> 1);
      v28 = v23 >> 1;
      v29 = v23 - (v23 >> 1);
      _ZF = v25 == 1;
      if (v25 == 1)
        v31 = v28;
      else
        v31 = v29;
      v223[1] = v31;
      if (_ZF)
        v32 = v26;
      else
        v32 = v27;
      v223[0] = v32;
      break;
    default:
      v20 = (_DWORD *)a1;
      v223[0] = *(__int16 *)(a1 + 384);
      v223[1] = *(__int16 *)(a1 + 388);
      break;
  }
  v33 = v20[105];
  if (v33 <= 1)
    v34 = 1;
  else
    v34 = v33;
  v35 = (v20[87] - 1) / (int)v34;
  v204 = v34;
  v199 = (v20[86] - 1) / (int)v34;
  if (v35 + 1 < 8)
    v36 = v35 + 1;
  else
    v36 = 8;
  if (v15 < 65)
    v37 = 1;
  else
    v37 = 2;
  if (v15 >= 129)
    v38 = 4;
  else
    v38 = v37;
  if (v16 < 65)
    v39 = 1;
  else
    v39 = 2;
  if (v16 >= 129)
    v40 = 4;
  else
    v40 = v39;
  v236 = v35 + 1;
  v214 = v199 + 1;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v248, v17, v18, v35 + 1, v199 + 1);
  v196 = v38;
  v41 = (v15 - 1) / (int)v38;
  v42 = (v41 + 1);
  v195 = v40;
  v221 = (v16 - 1) / v40;
  v225 = v36;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v246, v41 + 1, v221 + 1, v20[88] * v36 * v20[89], 1);
  *(_QWORD *)v237 = (v221 + 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&v244, v41 + 1, v237[0], v199 + 1, 1);
  v43 = v7;
  v227 = v16;
  if (*(_DWORD *)(a1 + 412))
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,3>,std::allocator<Espresso::blob<float,3>>,int &,int &,int &,int &,void>(&src, v41 + 1, v237[0], 2, 1);
    data = src.data;
    height = (std::__shared_weak_count *)src.height;
  }
  else
  {
    data = 0;
    height = 0;
  }
  v44 = v221 + 1;
  v211 = 0;
  v45 = 0;
  v224 = v15;
  v46 = (v237[0] * v42);
  __ldb = (int)v46;
  v49 = v15 < 65 && v227 < 65;
  v213 = v49;
  v50 = 4 * (int)v46;
  v51 = 8;
  if (v236 < 8)
    v51 = v236;
  v222 = v51;
  v203 = v12;
  v52 = v12 + 8;
  v53 = 4 * (int)v42;
  v197 = v52;
  v54 = v36;
  v235 = v54 + v54 * (v35 / v36);
  v55 = a1;
  v56 = v196;
  v57 = v195;
  do
  {
    v58 = 0;
    v230 = 0;
    v226 = v45;
    v210 = v45 * v44;
    v209 = v45 * v44 + v44;
    do
    {
      if (*(int *)(v43 + 20) >= 1)
      {
        v202 = 0;
        v215 = v58;
        do
        {
          v59 = 0;
          v60 = *(void **)(v43 + 8);
          LODWORD(src.height) = *(_DWORD *)(v43 + 16);
          src.data = v60;
          v61 = 1;
          do
          {
            v61 *= *(_DWORD *)(v43 + 8 + v59);
            v59 += 4;
          }
          while (v59 != 12);
          v200 = v43;
          v62 = *(_QWORD *)(v43 + 24);
          v63 = (char *)operator new(0x60uLL);
          v64 = 0;
          v65 = src.data;
          *((_DWORD *)v63 + 10) = src.height;
          *((_QWORD *)v63 + 1) = 0;
          v201 = (unint64_t *)(v63 + 8);
          *(_QWORD *)v63 = &off_1E2DBF028;
          *((_QWORD *)v63 + 2) = 0;
          *((_QWORD *)v63 + 3) = &off_1E2DA13F0;
          *((_QWORD *)v63 + 4) = v65;
          *((_OWORD *)v63 + 4) = 0u;
          *((_OWORD *)v63 + 5) = 0u;
          *((_QWORD *)v63 + 6) = v62 + 2 * v61 * v202;
          v220 = (std::__shared_weak_count *)v63;
          v63[56] = 0;
          src.data = *(void **)v198;
          LODWORD(src.height) = *(_DWORD *)(v198 + 8);
          v66 = 1;
          do
          {
            v66 *= *(_DWORD *)(v197 + v64);
            v64 += 4;
          }
          while (v64 != 12);
          v67 = *(_QWORD *)(v203 + 24);
          v68 = (std::__shared_weak_count *)operator new(0x60uLL);
          v206 = 0;
          v207 = 0;
          v68->__shared_owners_ = 0;
          v205 = (unint64_t *)&v68->__shared_owners_;
          v68->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF028;
          v68->__shared_weak_owners_ = 0;
          v68[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA13F0;
          *(_OWORD *)&v68[2].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v68[3].__shared_owners_ = 0u;
          v68[1].__shared_owners_ = (uint64_t)src.data;
          LODWORD(v68[1].__shared_weak_owners_) = src.height;
          v68[2].__vftable = (std::__shared_weak_count_vtbl *)(v67 + 2 * v66 * v202);
          v233 = v68;
          LOBYTE(v68[2].__shared_owners_) = 0;
          v69 = v199 + 1;
          v58 = v215;
          v216 = v69 + v69 * (v199 / v214);
          v70 = v244;
          v241 = v248;
          v231 = v246;
          v71 = data;
          v238 = v244;
          do
          {
            if ((int)v216 >= 1)
            {
              v72 = *(_DWORD *)(v55 + 352) * *(_DWORD *)(v55 + 356);
              v218 = v206 * v214;
              v212 = v72 * v236 * (int)v206 * v214;
              v234 = v236 * (int)v206 * *(_DWORD *)(v203 + 8) * *(_DWORD *)(v203 + 12);
              v73 = 0;
              v208 = v72 * (int)v207;
              v219 = HIDWORD(v207);
              do
              {
                v217 = v73 & ~((int)v73 >> 31);
                v74 = (v69 - v217);
                v239 = v73;
                v240 = v74;
                if (*(_DWORD *)(v55 + 416) || (v76 = *(_QWORD *)(v55 + 560)) == 0)
                {
                  v75 = v206 * v214;
                  if ((int)v74 * (uint64_t)(int)__ldb)
                  {
                    bzero(*(void **)(v70 + 24), v50 * (v214 - v217));
                    v74 = v240;
                  }
                }
                else
                {
                  v75 = v206 * v214;
                  if ((int)v74 >= 1)
                  {
                    v77 = 0;
                    for (i = 0; i != v74; ++i)
                    {
                      if ((_DWORD)__ldb)
                      {
                        v79 = *(_QWORD *)(v76 + 16);
                        v80 = (_DWORD *)(*(_QWORD *)(v70 + 24) + v77);
                        v81 = v46;
                        do
                        {
                          *v80++ = *(_DWORD *)(v79 + 4 * (v239 + v218 + i));
                          --v81;
                        }
                        while (v81);
                      }
                      v77 += v50;
                    }
                  }
                }
                v82 = *(_QWORD *)(v55 + 576);
                if (v82)
                {
                  v83 = *(_DWORD *)(v55 + 352);
                  v84 = *(_DWORD *)(v55 + 356);
                  v85 = *(void **)(v241 + 24);
                  src.data = (void *)(*(_QWORD *)(v82 + 24) + 2 * v212 + 2 * v236 * (int)v239 * v83 * v84);
                  src.height = 1;
                  src.width = (int)v74 * v236 * v83 * v84;
                  src.rowBytes = 2 * src.width;
                  dest.data = v85;
                  dest.height = 1;
                  dest.width = src.width;
                  dest.rowBytes = 4 * src.width;
                  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                  v86 = v221 + 1;
                  v74 = v240;
                }
                else
                {
                  v87 = *(_QWORD *)(v55 + 504);
                  v86 = v221 + 1;
                  if (!v87 || (v88 = *(_QWORD *)(v55 + 520)) == 0)
                  {
                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(exception, "Conv fp16 weights not set");
                    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                  }
                  if ((int)v74 >= 1)
                  {
                    v89 = 0;
                    v90 = v239;
                    v91 = *(int *)(v55 + 352) * (uint64_t)v236 * *(int *)(v55 + 356);
                    v92 = *(_QWORD *)(v87 + 16);
                    v93 = *(int *)(v55 + 344);
                    v94 = (*(_DWORD *)(v55 + 352) * v236 * *(_DWORD *)(v55 + 356));
                    v95 = v208 + v239 * v91;
                    do
                    {
                      if ((int)v94 >= 1)
                      {
                        v96 = *(float *)(v92 + 4 * (v90 + v75));
                        v97 = *(float *)(v92 + 4 * (v90 + v75 + v93)) - v96;
                        v98 = (float *)(*(_QWORD *)(v241 + 24) + v89);
                        v99 = (unsigned __int8 *)(*(_QWORD *)(v88 + 24) + v95);
                        v100 = v94;
                        do
                        {
                          v101 = *v99++;
                          *v98++ = v96 + (float)((float)((float)v101 * 0.0039216) * v97);
                          --v100;
                        }
                        while (v100);
                      }
                      ++v90;
                      v89 += 4 * v91;
                      v95 += v91;
                    }
                    while (v90 < v239 + (int)v74);
                  }
                }
                v102 = *(_DWORD *)(v55 + 412);
                if (v102)
                {
                  v103 = *((_DWORD *)v71 + 2);
                  v104 = *((_DWORD *)v71 + 3);
                  v105 = *((int *)v71 + 4);
                  if (v104 * (uint64_t)v103 * v105)
                  {
                    bzero((void *)v71[3], 4 * v103 * (uint64_t)v104 * v105);
                    v74 = v240;
                    v86 = v221 + 1;
                  }
                }
                if ((int)v235 >= 1)
                {
                  v106 = 0;
                  do
                  {
                    v243 = v106 + v222;
                    if (v106 + v222 <= v236)
                      v107 = v54;
                    else
                      v107 = (v236 - v106);
                    Espresso::CPUFP16Engine::image2colbuffer_f32_partitioned(*(_QWORD *)(v231 + 24), (float *)((char *)v233[2].__vftable + 2 * v234 + 2 * v106 * v228 * v229), (const unsigned __int16 *)v107, v228, v229, v227, v224, *(_DWORD *)(a1 + 356), *(_DWORD *)(a1 + 352), v223[1], v223[0], *(__int16 *)(a1 + 398), *(__int16 *)(a1 + 396), v42, v86, v230, v226, v191);
                    v108 = *(int *)(a1 + 356) * (uint64_t)*(int *)(a1 + 352);
                    v109 = v108 * v107;
                    v46 = (v237[0] * v42);
                    cblas_sgemm(CblasRowMajor, CblasNoTrans, CblasNoTrans, v240, v237[0] * v42, v109, 1.0, (const float *)(*(_QWORD *)(v241 + 24) + 4 * v106 * v108), v108 * v236, *(const float **)(v231 + 24), __ldb, 1.0, *(float **)(v238 + 24), v237[0] * v42);
                    v54 = v225;
                    v86 = v221 + 1;
                    v71 = data;
                    if (!v239 && *(_DWORD *)(a1 + 412) && (v221 & 0x80000000) == 0)
                    {
                      v110 = 0;
                      v111 = 0;
                      LODWORD(v112) = 0;
                      v113 = *(_DWORD *)(a1 + 352) * v225 * *(_DWORD *)(a1 + 356);
                      do
                      {
                        if ((v41 & 0x80000000) == 0)
                        {
                          v114 = 0;
                          v115 = data[3];
                          v112 = (int)v112;
                          v116 = (float *)(*(_QWORD *)(v231 + 24) + v110);
                          do
                          {
                            v117 = v116;
                            v118 = v113;
                            if (v113 >= 1)
                            {
                              do
                              {
                                v119 = *v117;
                                *(float *)(v115 + 4 * v112) = *v117 + *(float *)(v115 + 4 * v112);
                                *(float *)(v115 + 4 * (v112 + __ldb)) = *(float *)(v115 + 4 * (v112 + __ldb))
                                                                      + (float)(v119 * v119);
                                v117 = (float *)((char *)v117 + v50);
                                --v118;
                              }
                              while (v118);
                            }
                            ++v112;
                            ++v114;
                            ++v116;
                          }
                          while (v114 != v42);
                        }
                        ++v111;
                        v110 += v53;
                      }
                      while (v111 != *(_QWORD *)v237);
                    }
                    v106 += v222;
                  }
                  while (v243 < v235);
                  v55 = a1;
                  v102 = *(_DWORD *)(a1 + 412);
                  v74 = v240;
                }
                if (v102 && (v221 & 0x80000000) == 0)
                {
                  v120 = 0;
                  v121 = 0;
                  v122 = 1.0 / (float)(*(_DWORD *)(v55 + 352) * v236 * *(_DWORD *)(v55 + 356));
                  do
                  {
                    if ((v41 & 0x80000000) == 0)
                    {
                      v123 = 0;
                      v124 = v71[3];
                      v125 = *(_DWORD *)(v55 + 344);
                      v126 = v121;
                      v127 = 4 * v121;
                      do
                      {
                        v128 = *(float *)(v124 + 4 * (v126 + __ldb))
                             + (float)((float)-(float)(*(float *)(v124 + 4 * v126) * *(float *)(v124 + 4 * v126)) * v122);
                        if (v128 < 0.000001)
                          v128 = 0.000001;
                        if (v125 >= 1)
                        {
                          v129 = 1.0 / sqrtf(v128);
                          v130 = (float *)(*(_QWORD *)(v238 + 24) + v127);
                          v131 = v125;
                          do
                          {
                            *v130 = v129 * *v130;
                            v130 = (float *)((char *)v130 + v50);
                            --v131;
                          }
                          while (v131);
                        }
                        ++v126;
                        v127 += 4;
                        _ZF = v123++ == v41;
                      }
                      while (!_ZF);
                      v121 = v126;
                    }
                    _ZF = v120++ == v221;
                  }
                  while (!_ZF);
                }
                if (*(_DWORD *)(v55 + 416))
                  v132 = (int)v74 < 1;
                else
                  v132 = 1;
                if (!v132)
                {
                  v133 = 0;
                  v134 = 0;
                  v135 = v239 + v218;
                  v136 = *(_QWORD *)(*(_QWORD *)(v55 + 560) + 16);
                  do
                  {
                    if ((int)v46 >= 1)
                    {
                      v137 = (float *)(v136 + 16 * (v135 + (int)v134));
                      v138 = *v137;
                      v139 = *(float *)(v136 + 16 * (v135 + (int)v134) + 4);
                      v140 = v137[2];
                      v141 = 1.0 / v137[3];
                      v142 = (float *)(*(_QWORD *)(v238 + 24) + v133);
                      v143 = v46;
                      do
                      {
                        *v142 = v139 + (float)((float)(v141 * (float)(*v142 - v140)) * v138);
                        ++v142;
                        --v143;
                      }
                      while (v143);
                    }
                    ++v134;
                    v133 += v50;
                  }
                  while (v134 != v74);
                }
                v144 = *(_DWORD *)(v55 + 328);
                if (v144 == 1)
                {
                  LODWORD(src.data) = 0;
                  vDSP_vthr(*(const float **)(v238 + 24), 1, (const float *)&src, *(float **)(v238 + 24), 1, *(int *)(v238 + 12) * (uint64_t)*(int *)(v238 + 8) * *(int *)(v238 + 16));
                }
                else if (v144 == 2)
                {
                  v145 = *(int *)(v238 + 12) * (uint64_t)*(int *)(v238 + 8) * *(int *)(v238 + 16);
                  if (v145)
                  {
                    v146 = *(float **)(v238 + 24);
                    do
                    {
                      if (*v146 < 0.0)
                        *v146 = *v146 * 0.25;
                      ++v146;
                      --v145;
                    }
                    while (v145);
                  }
                }
                if (*(_DWORD *)(v55 + 332))
                {
                  v147 = *(int *)(v238 + 12) * (uint64_t)*(int *)(v238 + 8) * *(int *)(v238 + 16);
                  if (v147)
                  {
                    v148 = *(float **)(v238 + 24);
                    do
                    {
                      *v148 = tanhf(*v148);
                      ++v148;
                      --v147;
                    }
                    while (v147);
                  }
                }
                shared_owners_high = HIDWORD(v220[1].__shared_owners_);
                shared_owners_low = SLODWORD(v220[1].__shared_owners_);
                if (v213)
                {
                  v69 = v199 + 1;
                  v58 = v215;
                  v46 = (v237[0] * v42);
                  v70 = v238;
                  if (shared_owners_high * (_DWORD)shared_owners_low * (_DWORD)v240)
                  {
                    v151 = *(int **)(v238 + 24);
                    v152 = shared_owners_high * (int)shared_owners_low * (v199 + 1 - (int)v217);
                    v153 = (_WORD *)((char *)v220[2].__vftable + 2 * shared_owners_high * (int)shared_owners_low * v219);
                    do
                    {
                      v154 = *v151++;
                      _S0 = v154;
                      __asm { FCVT            H0, S0 }
                      *v153++ = _S0;
                      --v152;
                    }
                    while (v152);
                  }
                }
                else
                {
                  v69 = v199 + 1;
                  v58 = v215;
                  v46 = (v237[0] * v42);
                  v70 = v238;
                  if ((int)v240 >= 1)
                  {
                    v159 = 0;
                    v160 = 0;
                    v161 = 0;
                    v162 = shared_owners_high - v210;
                    if (v209 <= shared_owners_high)
                      v162 = v221 + 1;
                    v163 = shared_owners_high * shared_owners_low;
                    v164 = 2 * v163 * v219 + 2 * v211 * (int)shared_owners_low;
                    v165 = shared_owners_low - v230 * v42;
                    if (v230 * (int)v42 + (int)v42 <= shared_owners_low)
                      v165 = v41 + 1;
                    v166 = 2 * shared_owners_low;
                    do
                    {
                      if (v162 >= 1)
                      {
                        v167 = 0;
                        v168 = (uint64_t)v220[2].__vftable + 2 * v160 + v215 + v164;
                        v169 = *(_QWORD *)(v238 + 24) + 4 * v159;
                        do
                        {
                          if (v165)
                          {
                            for (j = 0; j != v165; *(_WORD *)(v168 + 2 * j++) = _S0)
                            {
                              _S0 = *(_DWORD *)(v169 + 4 * j);
                              __asm { FCVT            H0, S0 }
                            }
                          }
                          ++v167;
                          v168 += v166;
                          v169 += v53;
                        }
                        while (v167 < v162);
                      }
                      ++v161;
                      v160 += v163;
                      v159 += __ldb;
                    }
                    while (v161 != v240);
                  }
                }
                v73 = v239 + v214;
                v219 += v69;
              }
              while (v73 < v216);
            }
            LODWORD(v207) = v207 + v214 * v236;
            HIDWORD(v207) += v69;
            ++v206;
          }
          while (v206 != v204);
          do
          {
            v172 = v205;
            v173 = __ldaxr(v205);
          }
          while (__stlxr(v173 - 1, v172));
          if (!v173)
          {
            ((void (*)(std::__shared_weak_count *))v233->__on_zero_shared)(v233);
            std::__shared_weak_count::__release_weak(v233);
          }
          v43 = v200;
          do
            v174 = __ldaxr(v201);
          while (__stlxr(v174 - 1, v201));
          v44 = v221 + 1;
          if (!v174)
          {
            ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
            v58 = v215;
            std::__shared_weak_count::__release_weak(v220);
            v44 = v221 + 1;
          }
          ++v202;
        }
        while (v202 < *(_DWORD *)(v200 + 20));
        v56 = v196;
        v57 = v195;
      }
      v58 += 2 * (int)v42;
      ++v230;
    }
    while (v230 != v56);
    v45 = v226 + 1;
    v211 += v44;
  }
  while (v226 + 1 != v57);
  if (height)
  {
    v175 = (unint64_t *)&height->__shared_owners_;
    do
      v176 = __ldaxr(v175);
    while (__stlxr(v176 - 1, v175));
    if (!v176)
    {
      ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
      std::__shared_weak_count::__release_weak(height);
    }
  }
  v177 = v245;
  if (v245)
  {
    v178 = (unint64_t *)&v245->__shared_owners_;
    do
      v179 = __ldaxr(v178);
    while (__stlxr(v179 - 1, v178));
    if (!v179)
    {
      ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
      std::__shared_weak_count::__release_weak(v177);
    }
  }
  v180 = v247;
  if (v247)
  {
    v181 = (unint64_t *)&v247->__shared_owners_;
    do
      v182 = __ldaxr(v181);
    while (__stlxr(v182 - 1, v181));
    if (!v182)
    {
      ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
      std::__shared_weak_count::__release_weak(v180);
    }
  }
  v183 = v249;
  if (v249)
  {
    v184 = (unint64_t *)&v249->__shared_owners_;
    do
      v185 = __ldaxr(v184);
    while (__stlxr(v185 - 1, v184));
    if (!v185)
    {
      ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
      std::__shared_weak_count::__release_weak(v183);
    }
  }
  if (v193)
  {
    v186 = (unint64_t *)&v193->__shared_owners_;
    do
      v187 = __ldaxr(v186);
    while (__stlxr(v187 - 1, v186));
    if (!v187)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  if (v194)
  {
    v188 = (unint64_t *)&v194->__shared_owners_;
    do
      v189 = __ldaxr(v188);
    while (__stlxr(v189 - 1, v188));
    if (!v189)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
}

void sub_1913D58DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;

  v61 = *(std::__shared_weak_count **)(v59 - 232);
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v63 = __ldaxr(p_shared_owners);
    while (__stlxr(v63 - 1, p_shared_owners));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = *(std::__shared_weak_count **)(v59 - 216);
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = *(std::__shared_weak_count **)(v59 - 200);
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (a15)
  {
    v70 = (unint64_t *)&a15->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))a15->__on_zero_shared)(a15);
      std::__shared_weak_count::__release_weak(a15);
    }
  }
  if (a16)
  {
    v72 = (unint64_t *)&a16->__shared_owners_;
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))a16->__on_zero_shared)(a16);
      std::__shared_weak_count::__release_weak(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

_QWORD *Espresso::CPUFP16Engine::convolution_kernel_cpu::share_weights(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a2;
  if (*a2)
  {
    if (*(void (***)(Espresso::CPUFP16Engine::convolution_kernel_cpu *__hidden))v2 == &off_1E2D60A48)
    {
      v3 = result;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](result + 72, *(_QWORD *)(v2 + 576), *(_QWORD *)(v2 + 584));
      return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v3 + 70, *(_QWORD *)(v2 + 560), *(_QWORD *)(v2 + 568));
    }
  }
  return result;
}

_QWORD *Espresso::CPUFP16Engine::convolution_kernel_cpu::set_biases(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;

  result = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 560), *a2, a2[1]);
  *(_DWORD *)(a1 + 336) = *a2 != 0;
  return result;
}

__int16 Espresso::CPUFP16Engine::convolution_kernel_cpu::set_weights@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>)
{
  uint64_t v4;
  __int16 result;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  int *v10;
  _WORD *v11;
  uint64_t v12;
  int v13;
  __int128 v19;

  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned short,4>,std::allocator<Espresso::blob<unsigned short,4>>,int const*&,void>(&v19, *(_QWORD *)a2 + 8);
  v4 = a1 + 576;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v4, &v19);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = 0;
  v10 = *(int **)(*(_QWORD *)a2 + 24);
  v11 = *(_WORD **)(*(_QWORD *)v4 + 24);
  v12 = *(int *)(*(_QWORD *)v4 + 8);
  do
  {
    v12 *= *(int *)(*(_QWORD *)v4 + 12 + v9);
    v9 += 4;
  }
  while (v9 != 12);
  for (; v12; --v12)
  {
    v13 = *v10++;
    _S0 = v13;
    __asm { FCVT            H0, S0 }
    *v11++ = result;
  }
  return result;
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::set_weights()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "shuffled weights not supported");
  __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
}

void sub_1913D5CB8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::CPUFP16Engine::convolution_kernel_cpu::get_biases@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 568);
  *a2 = *(_QWORD *)(this + 560);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Espresso::CPUFP16Engine::convolution_kernel_cpu::get_weights(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t Espresso::CPUFP16Engine::convolution_kernel_cpu::get_f16_weights@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 584);
  *a2 = *(_QWORD *)(this + 576);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t Espresso::blob<unsigned short,3>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA13F0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  return a1;
}

void Espresso::blob<unsigned short,3>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA13F0;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 24), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 24) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 40);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,3>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<unsigned short,3>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<unsigned short,3>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::CPUFP16Engine::pool_kernel_cpu::~pool_kernel_cpu(Espresso::CPUFP16Engine::pool_kernel_cpu *this)
{
  Espresso::generic_pool_kernel::~generic_pool_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::pool_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  vImagePixelCount v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  float *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  float v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  float *v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  float v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  float *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  float v102;
  int v103;
  int v104;
  int v105;
  char v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _WORD *v111;
  int v112;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  int v151;
  int v152;
  int v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  std::__shared_weak_count *v157;
  uint64_t v158;
  std::__shared_weak_count *v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  vImage_Buffer dest;
  vImage_Buffer src;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v8 = v6[22];
    v7 = (std::__shared_weak_count *)v6[23];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  v128 = v7;
  if (!v11)
  {
    v13 = 0;
    goto LABEL_13;
  }
  v13 = v11[22];
  v12 = (std::__shared_weak_count *)v11[23];
  if (!v12)
  {
LABEL_13:
    v127 = 0;
    goto LABEL_14;
  }
  v14 = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldxr(v14);
  while (__stxr(v15 + 1, v14));
  v127 = v12;
LABEL_14:
  v16 = 0;
  v17 = *(_DWORD *)(a1 + 304);
  v18 = *(_DWORD *)(a1 + 308);
  v19 = *(unsigned int *)(a1 + 312);
  v20 = *(_DWORD *)(a1 + 320);
  v21 = *(_DWORD *)(a1 + 324);
  v22 = *(_DWORD *)(a1 + 332);
  v23 = *(__int16 *)(a1 + 340);
  v24 = *(__int16 *)(a1 + 348);
  v155 = *(__int16 *)(a1 + 352);
  v139 = *(unsigned __int16 *)(a1 + 364);
  v134 = *(unsigned __int16 *)(a1 + 366);
  v131 = *(unsigned __int16 *)(a1 + 372);
  v25 = 1;
  v163 = 0u;
  v164 = 0u;
  do
  {
    *((_QWORD *)&v163 + v16) = (int)v25;
    v25 *= *(int *)(v13 + 8 + 4 * v16++);
  }
  while (v16 != 4);
  v26 = 0;
  v165 = v25;
  v160 = 0u;
  v161 = 0u;
  v27 = 1;
  do
  {
    *((_QWORD *)&v160 + v26) = (int)v27;
    v27 *= *(int *)(v8 + 4 * v26++ + 8);
  }
  while (v26 != 4);
  v162 = v27;
  if (v23 != 4)
  {
    if (v23 == 2)
    {
      v155 = 0;
      v24 = 0;
      goto LABEL_28;
    }
    if (v23 != 1)
      goto LABEL_28;
  }
  v28 = v19 - *(_DWORD *)(v13 + 12) + (*(_DWORD *)(v8 + 12) - 1) * v21;
  v29 = v18 - *(_DWORD *)(v13 + 8) + (*(_DWORD *)(v8 + 8) - 1) * v20;
  v30 = v28 & ~(v28 >> 31);
  v31 = v29 & ~(v29 >> 31);
  v32 = v31 >> 1;
  v33 = v31 - (v31 >> 1);
  v34 = v30 >> 1;
  v35 = v30 - (v30 >> 1);
  _ZF = v23 == 1;
  if (v23 == 1)
    v37 = v34;
  else
    v37 = v35;
  v155 = v37;
  if (_ZF)
    v24 = v32;
  else
    v24 = v33;
LABEL_28:
  v153 = v21;
  if (!v131)
    v131 = *(_DWORD *)(v8 + 16);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v158, *(_DWORD *)(v13 + 8), *(_DWORD *)(v13 + 12));
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v156, *(_DWORD *)(v8 + 8), *(_DWORD *)(v8 + 12));
  if (*(int *)(v8 + 20) >= 1)
  {
    v38 = 0;
    v39 = 0;
    v129 = *((_QWORD *)&v164 + 1);
    v138 = v164;
    v137 = v158;
    v130 = 2 * *((_QWORD *)&v161 + 1);
    v135 = 2 * v161;
    v149 = v13;
    v136 = v17;
    do
    {
      if (v131 >= 1)
      {
        v40 = 0;
        v132 = v39;
        v133 = v38;
        v148 = v156;
        v140 = v158;
        v141 = v129 * v39;
        v145 = v8;
        do
        {
          v146 = v38;
          v147 = v40;
          v41 = (void *)(*(_QWORD *)(v13 + 24)
                       + 2 * v141
                       + 2 * v138 * v40
                       + 2 * *(_DWORD *)(v13 + 8) * v139 * *(_DWORD *)(v13 + 12));
          v144 = *(_QWORD *)(v8 + 24);
          v142 = *(_DWORD *)(v8 + 12);
          v143 = *(_DWORD *)(v8 + 8);
          v42 = *(void **)(v137 + 16);
          v43 = *(int *)(v137 + 12) * (uint64_t)*(int *)(v137 + 8);
          src.data = v41;
          src.height = 1;
          src.width = v43;
          src.rowBytes = 2 * v43;
          dest.data = v42;
          dest.height = 1;
          dest.width = v43;
          dest.rowBytes = 4 * v43;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          v44 = *(int **)(v148 + 16);
          v154 = *(_QWORD *)(v140 + 16);
          if (v17)
          {
            if (v17 == 1)
            {
              v89 = *(_DWORD *)(v8 + 12);
              if (v89 >= 1)
              {
                v90 = 0;
                v91 = *(_DWORD *)(v13 + 12);
                v92 = *(_DWORD *)(v145 + 8);
                v93 = 4 * *((_QWORD *)&v163 + 1);
                v94 = -v155;
                v95 = *(float **)(v148 + 16);
                do
                {
                  v96 = v90 * v153 - v155;
                  v97 = v96 + v19;
                  if (v96 + (int)v19 >= v91)
                    v97 = v91;
                  if (v92 >= 1)
                  {
                    v98 = 0;
                    v99 = v96 & ~(v96 >> 31);
                    v100 = *(_DWORD *)(v13 + 8);
                    v101 = -v24;
                    do
                    {
                      v102 = 0.0;
                      if (v99 < v97)
                      {
                        v103 = v98 * v20 - v24;
                        if (v103 + v18 >= v100)
                          v104 = v100;
                        else
                          v104 = v103 + v18;
                        v105 = v103 & ~(v103 >> 31);
                        v106 = 1;
                        v107 = v154 + v93 * (v94 & ~(v94 >> 31));
                        v108 = v99;
                        do
                        {
                          v109 = v101 & ~(v101 >> 31);
                          if (v105 < v104)
                          {
                            do
                            {
                              if ((*(float *)(v107 + 4 * v109) > v102) | v106 & 1)
                                v102 = *(float *)(v107 + 4 * v109);
                              ++v109;
                              v106 = 0;
                            }
                            while (v109 < v104);
                          }
                          ++v108;
                          v107 += v93;
                        }
                        while (v108 < v97);
                      }
                      *v95++ = v102;
                      ++v98;
                      v101 += v20;
                    }
                    while (v98 != v92);
                  }
                  ++v90;
                  v94 += v153;
                }
                while (v90 != v89);
              }
            }
            else if (v17 == 2)
            {
              v45 = *(_DWORD *)(v145 + 12);
              if (v45 >= 1)
              {
                v46 = 0;
                v47 = *(_DWORD *)(v13 + 12);
                v48 = *(_DWORD *)(v145 + 8);
                v49 = 4 * *((_QWORD *)&v163 + 1);
                v50 = -v155;
                v51 = *(float **)(v148 + 16);
                do
                {
                  v52 = v46 * v153 - v155;
                  v53 = v52 + v19;
                  if (v52 + (int)v19 >= v47)
                    v53 = v47;
                  if (v48 >= 1)
                  {
                    v54 = 0;
                    v55 = v52 & ~(v52 >> 31);
                    v56 = *(_DWORD *)(v13 + 8);
                    v57 = -v24;
                    do
                    {
                      v58 = 0.0;
                      if (v55 < v53)
                      {
                        v59 = v54 * v20 - v24;
                        if (v59 + v18 >= v56)
                          v60 = v56;
                        else
                          v60 = v59 + v18;
                        v61 = v59 & ~(v59 >> 31);
                        v62 = v154 + v49 * (v50 & ~(v50 >> 31));
                        v63 = v55;
                        do
                        {
                          v64 = v57 & ~(v57 >> 31);
                          if (v61 < v60)
                          {
                            do
                            {
                              v58 = v58 + (float)(*(float *)(v62 + 4 * v64) * *(float *)(v62 + 4 * v64));
                              ++v64;
                            }
                            while (v64 < v60);
                          }
                          ++v63;
                          v62 += v49;
                        }
                        while (v63 < v53);
                      }
                      if (v58 < 0.0001)
                        v58 = 0.0001;
                      *v51++ = sqrtf(v58);
                      ++v54;
                      v57 += v20;
                    }
                    while (v54 != v48);
                  }
                  ++v46;
                  v50 += v153;
                }
                while (v46 != v45);
              }
            }
          }
          else
          {
            v152 = *(_DWORD *)(v8 + 12);
            v65 = v153;
            if (v152 >= 1)
            {
              v66 = 0;
              v150 = *(_DWORD *)(v13 + 12) + v155;
              v151 = *(_DWORD *)(v13 + 12);
              v67 = *(_DWORD *)(v145 + 8);
              v68 = 4 * *((_QWORD *)&v163 + 1);
              v69 = -v155;
              v70 = *(float **)(v148 + 16);
              do
              {
                v71 = v66 * v65 - v155;
                v72 = v19;
                if (v71 + (int)v19 >= v150)
                  v73 = v150;
                else
                  v73 = v71 + v19;
                if (v73 >= v151)
                  v74 = v151;
                else
                  v74 = v73;
                if (v67 >= 1)
                {
                  v75 = 0;
                  v76 = v71 & ~(v71 >> 31);
                  v77 = *(_DWORD *)(v13 + 8);
                  v78 = v73 - v71;
                  v79 = -v24;
                  do
                  {
                    v80 = v75 * v20 - v24;
                    if (v80 + v18 >= (int)(v77 + v24))
                      v81 = v77 + v24;
                    else
                      v81 = v80 + v18;
                    v82 = v80 & ~(v80 >> 31);
                    if (v81 >= v77)
                      v83 = v77;
                    else
                      v83 = v81;
                    v84 = 0.0;
                    if (v74 > v76)
                    {
                      v85 = v154 + v68 * (v69 & ~(v69 >> 31));
                      v86 = v76;
                      do
                      {
                        v87 = v79 & ~(v79 >> 31);
                        if (v83 > v82)
                        {
                          do
                            v84 = v84 + *(float *)(v85 + 4 * v87++);
                          while (v87 < v83);
                        }
                        ++v86;
                        v85 += v68;
                      }
                      while (v86 < v74);
                    }
                    v88 = (v81 - v80) * v78;
                    if (v22)
                      v88 = (v83 - v82) * (v74 - v76);
                    *v70++ = (float)(1.0 / (float)v88) * v84;
                    ++v75;
                    v79 += v20;
                  }
                  while (v75 != v67);
                }
                ++v66;
                v65 = v153;
                v69 += v153;
                v13 = v149;
                v19 = v72;
              }
              while (v66 != v152);
            }
          }
          v110 = *(int *)(v148 + 12) * (uint64_t)*(int *)(v148 + 8);
          if (v110)
          {
            v111 = (_WORD *)(v144 + v146 + 2 * v143 * v134 * v142);
            do
            {
              v112 = *v44++;
              _S0 = v112;
              __asm { FCVT            H0, S0 }
              *v111++ = _S0;
              --v110;
            }
            while (v110);
          }
          v40 = v147 + 1;
          v38 = v146 + v135;
          v8 = v145;
          v17 = v136;
        }
        while (v147 + 1 != v131);
        v39 = v132;
        v38 = v133;
      }
      ++v39;
      v38 += v130;
    }
    while (v39 < *(int *)(v8 + 20));
  }
  v117 = v157;
  if (v157)
  {
    v118 = (unint64_t *)&v157->__shared_owners_;
    do
      v119 = __ldaxr(v118);
    while (__stlxr(v119 - 1, v118));
    if (!v119)
    {
      ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
      std::__shared_weak_count::__release_weak(v117);
    }
  }
  v120 = v159;
  if (v159)
  {
    v121 = (unint64_t *)&v159->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (v127)
  {
    v123 = (unint64_t *)&v127->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
  if (v128)
  {
    v125 = (unint64_t *)&v128->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
}

void sub_1913D66A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;

  if (a40)
  {
    p_shared_owners = (unint64_t *)&a40->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
      std::__shared_weak_count::__release_weak(a40);
    }
  }
  if (a9)
  {
    v43 = (unint64_t *)&a9->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  if (a10)
  {
    v45 = (unint64_t *)&a10->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void Espresso::CPUFP16Engine::lrn_kernel_cpu::~lrn_kernel_cpu(Espresso::CPUFP16Engine::lrn_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::lrn_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  _QWORD *v25;
  int v26;
  int v27;
  size_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  vImagePixelCount v39;
  char *v40;
  uint64_t v41;
  void *v42;
  float *v43;
  void *v44;
  float *v45;
  int v46;
  int v47;
  vImagePixelCount v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  uint64_t v52;
  float *v53;
  float *v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float *v65;
  uint64_t v66;
  float *v67;
  float *v68;
  float *v69;
  float *v70;
  float *v71;
  float *v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  int *v78;
  _WORD *v79;
  int v80;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  _WORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  float v115;
  __int16 *v116;
  int v117;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  std::__shared_weak_count *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _WORD *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float *v172;
  int v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  char *v176;
  std::__shared_weak_count *v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  vImage_Buffer dest;
  vImage_Buffer src;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)v6[23];
    v158 = v6[22];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v158 = 0;
  }
  v10 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v10)
  {
    v12 = v10[22];
    v11 = (std::__shared_weak_count *)v10[23];
    v13 = v158;
    if (v11)
    {
      v14 = (unint64_t *)&v11->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
  }
  else
  {
    v12 = 0;
    v11 = 0;
    v13 = v158;
  }
  v16 = 0;
  v17 = *(float *)(a1 + 280);
  v18 = *(float *)(a1 + 284);
  v19 = *(_DWORD *)(a1 + 288);
  v181 = 0u;
  v182 = 0u;
  v20 = 1;
  do
  {
    *((_QWORD *)&v181 + v16) = (int)v20;
    v20 *= *(int *)(v12 + 8 + 4 * v16++);
  }
  while (v16 != 4);
  v21 = 0;
  v183 = v20;
  v178 = 0u;
  v179 = 0u;
  v22 = 1;
  do
  {
    *((_QWORD *)&v178 + v21) = (int)v22;
    v22 *= *(int *)(v13 + 4 * v21++ + 8);
  }
  while (v21 != 4);
  v180 = v22;
  if (v19)
    v23 = v19;
  else
    v23 = 3;
  v24 = v17 / (float)v23;
  v127 = v7;
  v128 = v11;
  v143 = v12;
  if (v19 != 3 && v19)
  {
    v92 = v19 + (v19 < 0);
    if (*(int *)(v13 + 20) >= 1)
    {
      v93 = 0;
      v94 = 0;
      v163 = v92 >> 1;
      v130 = *((_QWORD *)&v179 + 1);
      v95 = -v18;
      v140 = v179;
      v142 = v182;
      v153 = *((_QWORD *)&v178 + 1);
      v155 = *((_QWORD *)&v181 + 1);
      v132 = *((_QWORD *)&v182 + 1);
      v134 = 2 * *((_QWORD *)&v182 + 1);
      v96 = 2 * v182;
      v165 = 2 * *((_QWORD *)&v181 + 1);
      do
      {
        v136 = v94;
        v138 = v93;
        if (*(int *)(v13 + 16) >= 1)
        {
          v97 = 0;
          v98 = v132 * v94;
          v149 = v130 * v94;
          v99 = *(_QWORD *)(v143 + 24);
          v145 = v99 + v93;
          v147 = v99 + 2 * v98;
          do
          {
            v151 = v97;
            if (*(int *)(v13 + 12) >= 1)
            {
              v100 = 0;
              v101 = *(_QWORD *)(v13 + 24) + 2 * v149 + 2 * v140 * v97;
              v102 = v147 + 2 * v142 * v97;
              if ((int)v97 - v163 >= 1)
                v103 = v163;
              else
                v103 = v97;
              v104 = -v103;
              v161 = v163 + v97;
              v157 = ~(_DWORD)v97;
              v173 = ~v103;
              v105 = (_WORD *)(v145 + v96 * ((int)v97 - v103));
              do
              {
                if (*(int *)(v13 + 8) >= 1)
                {
                  v106 = 0;
                  v107 = v155 * v100;
                  v168 = v105;
                  v170 = v100;
                  v108 = v153 * v100;
                  v109 = *(_DWORD *)(v13 + 16);
                  v110 = v109 - 1;
                  v111 = v109 + v157;
                  if (v161 >= v110)
                    v112 = v111;
                  else
                    v112 = v163;
                  v159 = v13;
                  v113 = *(_DWORD *)(v13 + 8);
                  if (v113 <= 1)
                    v114 = 1;
                  else
                    v114 = v113;
                  do
                  {
                    v115 = 0.0;
                    if (v112 >= v104)
                    {
                      v116 = v105;
                      v117 = v173;
                      do
                      {
                        _H1 = *v116;
                        __asm { FCVT            S1, H1 }
                        v115 = v115 + (float)(_S1 * _S1);
                        ++v117;
                        v116 = (__int16 *)((char *)v116 + v96);
                      }
                      while (v117 < v112);
                    }
                    _H1 = *(_WORD *)(v102 + 2 * (v107 + v106));
                    __asm { FCVT            S11, H1 }
                    _S0 = powf((float)(v24 * v115) + 1.0, v95) * _S11;
                    __asm { FCVT            H0, S0 }
                    *(_WORD *)(v101 + 2 * (v108 + v106++)) = LOWORD(_S0);
                    ++v105;
                  }
                  while (v106 != v114);
                  v13 = v159;
                  v105 = v168;
                  v100 = v170;
                }
                ++v100;
                v105 = (_WORD *)((char *)v105 + v165);
              }
              while (v100 < *(int *)(v13 + 12));
            }
            v97 = v151 + 1;
          }
          while (v151 + 1 < *(int *)(v13 + 16));
        }
        v94 = v136 + 1;
        v93 = v138 + v134;
      }
      while (v136 + 1 < *(int *)(v13 + 20));
    }
  }
  else
  {
    v25 = operator new(0x60uLL);
    v25[1] = 0;
    v25[2] = 0;
    *v25 = &off_1E2DBEC70;
    v25[3] = &off_1E2DA11D0;
    v26 = *(_DWORD *)(v12 + 8);
    v27 = *(_DWORD *)(v12 + 12);
    *((_OWORD *)v25 + 4) = 0u;
    *((_OWORD *)v25 + 5) = 0u;
    *((_DWORD *)v25 + 8) = v26;
    *((_DWORD *)v25 + 9) = v27;
    *((_DWORD *)v25 + 10) = 3;
    v28 = 12 * v26 * (uint64_t)v27;
    v29 = Espresso::kern_alloc_uninitialized((Espresso *)v28);
    bzero(v29, v28);
    v25[6] = v29;
    *((_BYTE *)v25 + 56) = 1;
    v176 = (char *)(v25 + 3);
    v177 = (std::__shared_weak_count *)v25;
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,void>(&v174, *(_DWORD *)(v13 + 8), *(_DWORD *)(v13 + 12));
    if (*(int *)(v13 + 20) >= 1)
    {
      v30 = 0;
      v31 = 0;
      v131 = *((_QWORD *)&v182 + 1);
      v32 = v182;
      v33 = -v18;
      v34 = *(_DWORD *)(v13 + 16);
      v162 = 4 * *((_QWORD *)&v181 + 1);
      v164 = 4 * *((_QWORD *)&v178 + 1);
      v129 = 2 * *((_QWORD *)&v179 + 1);
      v137 = 2 * v179;
      v139 = v182;
      v141 = v25;
      do
      {
        v35 = 0;
        v133 = v31;
        v135 = v30;
        v144 = v131 * v31;
        v36 = v30;
        while (v35 < v34)
        {
          v37 = *(_QWORD *)(v12 + 24) + 2 * v144;
          v154 = v35 + 1;
          v38 = (float *)v25[6];
          v39 = *(int *)(v12 + 12) * (uint64_t)*(int *)(v12 + 8);
          if (v35)
            v40 = (char *)v25[6];
          else
            v40 = 0;
          v41 = (v34 - 1);
          if (v35 == v41)
            v42 = 0;
          else
            v42 = (void *)(v37 + 2 * v32 * (v35 + 1));
          if (v35 == v41)
            v43 = 0;
          else
            v43 = &v38[v39];
          if (v40)
          {
            v44 = (void *)(v37 + 2 * v32 * (v35 - 1));
            if (!v35)
              v44 = 0;
            src.data = v44;
            src.height = 1;
            src.width = v39;
            src.rowBytes = 2 * v39;
            dest.data = v40;
            dest.height = 1;
            dest.width = v39;
            dest.rowBytes = 4 * v39;
            vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          }
          v45 = &v38[2 * (_DWORD)v39];
          if (v38)
          {
            v46 = *(_DWORD *)(v12 + 8);
            v47 = *(_DWORD *)(v12 + 12);
            src.data = (void *)(v37 + 2 * v32 * v35);
            src.height = 1;
            src.width = v47 * (uint64_t)v46;
            src.rowBytes = 2 * src.width;
            dest.data = v45;
            dest.height = 1;
            dest.width = src.width;
            dest.rowBytes = 4 * src.width;
            vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          }
          if (v43)
          {
            v48 = *(int *)(v12 + 12) * (uint64_t)*(int *)(v12 + 8);
            src.data = v42;
            src.height = 1;
            src.width = v48;
            src.rowBytes = 2 * v48;
            dest.data = v43;
            dest.height = 1;
            dest.width = v48;
            dest.rowBytes = 4 * v48;
            vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          }
          v152 = v36;
          v49 = (*(_DWORD *)(v158 + 16) - 1);
          v150 = *(_DWORD *)(v158 + 16);
          v156 = *(int **)(v174 + 16);
          v146 = *(_QWORD *)(v158 + 24);
          v148 = v174;
          if (v35)
          {
            v50 = *(unsigned int *)(v158 + 12);
            v51 = v45;
            if (v35 != v49)
            {
              if ((int)v50 >= 1)
              {
                v52 = 0;
                v53 = *(float **)(v174 + 16);
                v171 = *(unsigned int *)(v158 + 8);
                v166 = *(unsigned int *)(v158 + 12);
                do
                {
                  v54 = v51;
                  v55 = v51;
                  v56 = (float *)v40;
                  v57 = v43;
                  v58 = v53;
                  v59 = v171;
                  if ((int)v171 >= 1)
                  {
                    do
                    {
                      v60 = *v55++;
                      v61 = v60;
                      v62 = *v56++;
                      v63 = (float)((float)(v62 * v62) + 0.0) + (float)(v61 * v61);
                      v64 = *v57++;
                      *v58++ = v61 * powf((float)(v24 * (float)(v63 + (float)(v64 * v64))) + 1.0, v33);
                      --v59;
                    }
                    while (v59);
                  }
                  ++v52;
                  v53 = (float *)((char *)v53 + v164);
                  v43 = (float *)((char *)v43 + v162);
                  v40 += v162;
                  v51 = &v54[(unint64_t)v162 / 4];
                }
                while (v52 != v166);
              }
              goto LABEL_65;
            }
          }
          else
          {
            v38 = 0;
            v50 = *(unsigned int *)(v158 + 12);
            v51 = v45;
          }
          if (v35 == v49)
            v65 = 0;
          else
            v65 = v43;
          if ((int)v50 >= 1)
          {
            v66 = 0;
            v67 = *(float **)(v174 + 16);
            v160 = *(unsigned int *)(v158 + 8);
            v68 = v38;
            v69 = v65;
            v167 = v50;
            do
            {
              v169 = v66;
              v172 = v51;
              v70 = v68;
              v71 = v69;
              v72 = v67;
              v73 = v160;
              if ((int)v160 >= 1)
              {
                do
                {
                  if (v38)
                    v74 = (float)(*v70 * *v70) + 0.0;
                  else
                    v74 = 0.0;
                  v75 = *v51;
                  v76 = v74 + (float)(v75 * v75);
                  if (v65)
                    v76 = v76 + (float)(*v71 * *v71);
                  *v72++ = v75 * powf((float)(v24 * v76) + 1.0, v33);
                  ++v71;
                  ++v70;
                  ++v51;
                  --v73;
                }
                while (v73);
              }
              v66 = v169 + 1;
              v67 = (float *)((char *)v67 + v164);
              v69 = (float *)((char *)v69 + v162);
              v68 = (float *)((char *)v68 + v162);
              v51 = &v172[(unint64_t)v162 / 4];
            }
            while (v169 + 1 != v167);
          }
LABEL_65:
          v77 = *(int *)(v148 + 12) * (uint64_t)*(int *)(v148 + 8);
          v78 = v156;
          if (v77)
          {
            v79 = (_WORD *)(v146 + v152);
            do
            {
              v80 = *v78++;
              _S0 = v80;
              __asm { FCVT            H0, S0 }
              *v79++ = _S0;
              --v77;
            }
            while (v77);
          }
          v32 = v139;
          v36 = v152 + v137;
          v35 = v154;
          v13 = v158;
          v25 = v141;
          v12 = v143;
          v34 = v150;
        }
        v31 = v133 + 1;
        v30 = v135 + v129;
      }
      while (v133 + 1 < *(int *)(v13 + 20));
    }
    v86 = v175;
    if (v175)
    {
      v87 = (unint64_t *)&v175->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
    v89 = v177;
    if (v177)
    {
      v90 = (unint64_t *)&v177->__shared_owners_;
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
  }
  if (v128)
  {
    v123 = (unint64_t *)&v128->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  if (v127)
  {
    v125 = (unint64_t *)&v127->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
}

void sub_1913D707C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  unint64_t *p_shared_owners;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  if (a10)
  {
    p_shared_owners = (unint64_t *)&a10->__shared_owners_;
    do
      v37 = __ldaxr(p_shared_owners);
    while (__stlxr(v37 - 1, p_shared_owners));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
      std::__shared_weak_count::__release_weak(a10);
    }
  }
  if (a9)
  {
    v38 = (unint64_t *)&a9->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))a9->__on_zero_shared)(a9);
      std::__shared_weak_count::__release_weak(a9);
    }
  }
  _Unwind_Resume(a1);
}

void Espresso::CPUFP16Engine::softmax_kernel_cpu::~softmax_kernel_cpu(Espresso::CPUFP16Engine::softmax_kernel_cpu *this)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  Espresso::base_kernel::~base_kernel(this);
}

{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 312);
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::softmax_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  vImagePixelCount v16;
  uint64_t i;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  _QWORD *data;
  uint64_t v37;
  int *v38;
  _WORD *v39;
  uint64_t v40;
  int v41;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *height;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  vImage_Buffer dest;
  vImage_Buffer src;

  v7 = (_QWORD *)*a3;
  if (a3[1] == *a3 || !*v7 || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*v7 + 32))(*v7))
  {
    v8 = 0;
    v56 = 0;
    v57 = 0;
  }
  else
  {
    v32 = *v7;
    v8 = *(_QWORD *)(*v7 + 160);
    v33 = *(std::__shared_weak_count **)(v32 + 168);
    v56 = v8;
    v57 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
  }
  v9 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v9)
  {
    v11 = v9[22];
    v10 = (std::__shared_weak_count *)v9[23];
    v54 = v11;
    v55 = v10;
    if (v10)
    {
      v12 = (unint64_t *)&v10->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v11 = 0;
    v54 = 0;
    v55 = 0;
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v52, *(_DWORD *)(v11 + 8), *(_DWORD *)(v11 + 12), *(_DWORD *)(v11 + 16), *(_DWORD *)(v11 + 20));
  v14 = v52;
  v15 = *(void **)(v52 + 24);
  v16 = *(int *)(v52 + 8);
  for (i = 12; i != 24; i += 4)
    v16 *= *(int *)(v52 + i);
  src.data = *(void **)(v11 + 24);
  src.height = 1;
  src.width = v16;
  src.rowBytes = 2 * v16;
  dest.data = v15;
  dest.height = 1;
  dest.width = v16;
  dest.rowBytes = 4 * v16;
  vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
  if (v8)
  {
    Espresso::compute_softmax_cpu(v8, v14, *(_DWORD *)(a1 + 300), *(_BYTE *)(a1 + 306));
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(v11 + 8), *(_DWORD *)(v11 + 12), *(_DWORD *)(v11 + 16), *(_DWORD *)(v11 + 20));
    v27 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
    if (v27)
    {
      v29 = *((_QWORD *)v27 + 22);
      v28 = (std::__shared_weak_count *)*((_QWORD *)v27 + 23);
      if (v28)
      {
        v30 = (unint64_t *)&v28->__shared_owners_;
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
    data = src.data;
    Espresso::compute_softmax_cpu((uint64_t)src.data, v14, *(_DWORD *)(a1 + 300), *(_BYTE *)(a1 + 306));
    v37 = 0;
    v38 = (int *)data[3];
    v39 = *(_WORD **)(v29 + 24);
    v40 = *(int *)(v29 + 8);
    do
    {
      v40 *= *(int *)(v29 + 12 + v37);
      v37 += 4;
    }
    while (v37 != 12);
    for (; v40; --v40)
    {
      v41 = *v38++;
      _S0 = v41;
      __asm { FCVT            H0, S0 }
      *v39++ = _S0;
    }
    if (v28)
    {
      v47 = (unint64_t *)&v28->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    height = (std::__shared_weak_count *)src.height;
    if (src.height)
    {
      v50 = (unint64_t *)(src.height + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
        std::__shared_weak_count::__release_weak(height);
      }
    }
  }
  v18 = v53;
  if (v53)
  {
    v19 = (unint64_t *)&v53->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v55;
  if (v55)
  {
    v22 = (unint64_t *)&v55->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v57;
  if (v57)
  {
    v25 = (unint64_t *)&v57->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1913D74A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void Espresso::CPUFP16Engine::softmax_kernel_cpu::__reset_temporal_state(uint64_t a1)
{
  Espresso::prediction_smoothing_cpu_impl::reset((Espresso::prediction_smoothing_cpu_impl *)(a1 + 312));
}

void Espresso::prediction_smoothing_cpu_impl::reset(Espresso::prediction_smoothing_cpu_impl *this)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  v4 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void Espresso::CPUFP16Engine::concat_kernel_cpu::~concat_kernel_cpu(Espresso::CPUFP16Engine::concat_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::concat_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v33;
  uint64_t v35;

  v4 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (!v4)
  {
    v33 = 0;
    goto LABEL_7;
  }
  v33 = *((_QWORD *)v4 + 22);
  v5 = *((_QWORD *)v4 + 23);
  if (!v5)
  {
LABEL_7:
    v31 = 0;
    goto LABEL_8;
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)v4 + 23);
  v6 = (unint64_t *)(v5 + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
LABEL_8:
  v8 = *a4;
  v9 = a4[1];
  if (v9 != *a4)
  {
    v10 = 0;
    v11 = 0;
    v12 = 2 * *(_DWORD *)(v33 + 12) * *(_DWORD *)(v33 + 8) * *(_DWORD *)(v33 + 16);
    do
    {
      v13 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v8, v9, v10);
      v14 = *((_QWORD *)v13 + 22);
      v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 23);
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = *(_DWORD *)(v14 + 16);
      if (!v10)
      {
        v18 = *(unsigned __int16 *)(a1 + 320);
        if (!*(_WORD *)(a1 + 320))
          v18 = *(_DWORD *)(v14 + 16);
      }
      v19 = *(_DWORD *)(v14 + 12) * *(_DWORD *)(v14 + 8);
      v20 = v19 * v18;
      if (*(int *)(v14 + 20) <= 0)
      {
        v26 = v20;
        if (v15)
          goto LABEL_22;
      }
      else
      {
        v21 = 0;
        v22 = *(char **)(v14 + 24);
        v23 = (char *)(*(_QWORD *)(v33 + 24) + 2 * v11);
        v35 = v20;
        v24 = 2 * v20;
        v25 = 2 * v19 * *(_DWORD *)(v14 + 16);
        do
        {
          memcpy(v23, v22, v24);
          ++v21;
          v22 += v25;
          v23 += v12;
        }
        while (v21 < *(_DWORD *)(v14 + 20));
        v26 = v35;
        if (v15)
        {
LABEL_22:
          v27 = (unint64_t *)&v15->__shared_owners_;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 - 1, v27));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
      v11 += v26;
      ++v10;
      v8 = *a4;
      v9 = a4[1];
    }
    while (v10 < (v9 - *a4) >> 4);
  }
  if (v31)
  {
    v29 = (unint64_t *)&v31->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void Espresso::CPUFP16Engine::elementwise_kernel_cpu::~elementwise_kernel_cpu(Espresso::CPUFP16Engine::elementwise_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::elementwise_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  void *v36;
  vImagePixelCount v37;
  int v38;
  int v39;
  const float *v40;
  const float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  vImagePixelCount v45;
  uint64_t v46;
  void *v47;
  float **v48;
  __n128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  float *v56;
  _WORD *v57;
  uint64_t v58;
  int v59;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  void *v77;
  vImagePixelCount v78;
  int v79;
  int v80;
  const float *v81;
  const float *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  vImagePixelCount v86;
  uint64_t v87;
  void *v88;
  float **v89;
  __n128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  float *v97;
  _WORD *v98;
  uint64_t v99;
  int v100;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  _WORD *v109;
  __int16 *v110;
  uint64_t v111;
  uint64_t v112;
  vDSP_Length v113;
  __int16 *v114;
  uint64_t v115;
  __int16 v116;
  __int16 v118;
  std::__shared_weak_count *height;
  int v124;
  const float *v125;
  int v126;
  int v127;
  uint64_t v128;
  vImagePixelCount v129;
  uint64_t v130;
  void *v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  vImagePixelCount v136;
  float *v137;
  uint64_t v138;
  __n128 v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  float *v145;
  float *v146;
  uint64_t v147;
  float v148;
  float *v149;
  float *v150;
  uint64_t v151;
  float v152;
  float *v153;
  float *v154;
  uint64_t v155;
  float v156;
  vImagePixelCount v157;
  float *v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  vImagePixelCount v163;
  float *v164;
  uint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  unint64_t *v168;
  float *v169;
  float *v170;
  uint64_t v171;
  float v172;
  float *v173;
  float *v174;
  uint64_t v175;
  float v176;
  vImagePixelCount v177;
  float *v178;
  uint64_t v179;
  unint64_t *v180;
  unint64_t v181;
  unint64_t *v182;
  float *v183;
  float *v184;
  uint64_t v185;
  float v186;
  vImagePixelCount v187;
  float *v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  unint64_t *v192;
  int v193;
  int *v194;
  uint64_t v195;
  _WORD *v196;
  int v197;
  unint64_t *v199;
  unint64_t v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  __int16 *v205;
  uint64_t v206;
  __int16 v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  __int16 *v222;
  void *v223;
  uint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  __int16 *v228;
  vDSP_Length v229;
  __int16 v231;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  void *v240;
  vImagePixelCount v241;
  const float *v242;
  std::__shared_weak_count *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  int *v249;
  _WORD *v250;
  int v251;
  unint64_t *v253;
  std::runtime_error *exception;
  std::string *v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int __val;
  int __vala;
  int __valb;
  float *__B;
  float **data;
  vImagePixelCount v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  uint64_t v269;
  std::__shared_weak_count *v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  vImage_Buffer dest;
  vImage_Buffer src;
  uint64_t v275;
  std::__shared_weak_count *v276;
  uint64_t v277;
  std::__shared_weak_count *v278;
  uint64_t v279;
  std::__shared_weak_count *v280;

  v5 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v5)
  {
    v7 = v5[22];
    v6 = (std::__shared_weak_count *)v5[23];
    v279 = v7;
    v280 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v279 = 0;
    v280 = 0;
  }
  v10 = *a4;
  v11 = a4[1];
  v12 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, v11, 0);
  if (v12)
  {
    v14 = v12[22];
    v13 = (std::__shared_weak_count *)v12[23];
    v277 = v14;
    v278 = v13;
    if (v13)
    {
      v15 = (unint64_t *)&v13->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v10 = *a4;
      v11 = a4[1];
    }
  }
  else
  {
    v14 = 0;
    v277 = 0;
    v278 = 0;
  }
  v17 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v10, v11, 1);
  if (v17)
  {
    v19 = v17[22];
    v18 = (std::__shared_weak_count *)v17[23];
    v275 = v19;
    v276 = v18;
    if (v18)
    {
      v20 = (unint64_t *)&v18->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
  }
  else
  {
    v19 = 0;
    v275 = 0;
    v276 = 0;
  }
  v22 = 12;
  v23 = *(unsigned int *)(v7 + 8);
  do
  {
    v23 *= *(unsigned int *)(v7 + v22);
    v22 += 4;
  }
  while (v22 != 24);
  v24 = *(_DWORD *)(a1 + 280);
  v25 = (uint64_t *)*a4;
  v26 = a4[1];
  v27 = v26 - *a4;
  if (v27 == 16)
  {
    if (!v24)
      v24 = 2;
    if (v24 == 1)
    {
      v24 = 3;
      goto LABEL_133;
    }
    goto LABEL_48;
  }
  v28 = *(_DWORD *)(v14 + 8);
  v29 = *(_DWORD *)(v19 + 8);
  if (v28 == v29
    && *(_DWORD *)(v14 + 12) == *(_DWORD *)(v19 + 12)
    && *(_DWORD *)(v14 + 16) == *(_DWORD *)(v19 + 16)
    && *(_DWORD *)(v14 + 20) == *(_DWORD *)(v19 + 20))
  {
    goto LABEL_48;
  }
  if (v29 == 1
    && *(_DWORD *)(v19 + 12) == 1
    && *(_DWORD *)(v19 + 20) == 1
    && *(_DWORD *)(v14 + 16) == *(_DWORD *)(v19 + 16))
  {
    if (!v24)
    {
      v24 = 5;
      goto LABEL_133;
    }
    if (v24 == 1)
    {
      v24 = 8;
      goto LABEL_133;
    }
  }
  else
  {
    if (*(_DWORD *)(v19 + 20) != 1)
      goto LABEL_304;
    if (v28 != v29)
      goto LABEL_304;
    v30 = *(_DWORD *)(v14 + 12);
    v31 = *(_DWORD *)(v19 + 12);
    if (v30 != v31)
      goto LABEL_304;
    v32 = *(_DWORD *)(v19 + 16);
    if (*(_DWORD *)(v14 + 16) == v32)
    {
      if (!v24)
      {
        v24 = 6;
        goto LABEL_133;
      }
      if (v24 == 1)
      {
        v24 = 9;
        goto LABEL_133;
      }
      goto LABEL_48;
    }
    if (v32 != 1 || v30 != v31)
    {
LABEL_304:
      Espresso::abstract_blob_container::shape((char *)&src, *v25);
      Espresso::abstract_blob_container::shape((char *)&dest, *(_QWORD *)(*a4 + 16));
      Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int &,int &,int &,int &,int &,int &,int &,int &,int &,int &>("[%d,%d,%d,%d,%d], [%d,%d,%d,%d,%d]", LODWORD(src.data), HIDWORD(src.data), HIDWORD(src.height), LODWORD(src.height), LODWORD(src.width), LODWORD(dest.data), HIDWORD(dest.data), HIDWORD(dest.height), dest.height, dest.width);
    }
    if (!v24)
      goto LABEL_52;
    if (v24 == 1)
      goto LABEL_90;
  }
LABEL_48:
  switch(v24)
  {
    case 0:
      v109 = *(_WORD **)(v7 + 24);
      v110 = *(__int16 **)(v14 + 24);
      v111 = v23 << 32;
      v112 = v23;
      v113 = (int)v23;
      if (v27 < 0x11)
      {
        v219 = 0;
        v220 = *(int *)(v14 + 8);
        do
        {
          v220 *= *(int *)(v14 + 12 + v219);
          v219 += 4;
        }
        while (v219 != 12);
        memcpy(*(void **)(v7 + 24), *(const void **)(v14 + 24), 2 * v220);
        v25 = (uint64_t *)*a4;
        v26 = a4[1];
        v27 = v26 - *a4;
      }
      else if (v111)
      {
        v114 = *(__int16 **)(v19 + 24);
        v115 = (int)v23;
        do
        {
          v116 = *v110++;
          _H0 = v116;
          v118 = *v114++;
          _H1 = v118;
          __asm
          {
            FCVT            S1, H1
            FCVT            S0, H0
          }
          _S0 = _S0 + _S1;
          __asm { FCVT            H0, S0 }
          *v109++ = LOWORD(_S0);
          --v115;
        }
        while (v115);
      }
      if (v27 >= 0x21)
      {
        v221 = 2;
        do
        {
          v222 = *(__int16 **)(v279 + 24);
          v223 = Espresso::layer_data::get_blob<Espresso::blob_cpu>((uint64_t)v25, v26, v221);
          v224 = *((_QWORD *)v223 + 22);
          v225 = (std::__shared_weak_count *)*((_QWORD *)v223 + 23);
          if (v225)
          {
            v226 = (unint64_t *)&v225->__shared_owners_;
            do
              v227 = __ldxr(v226);
            while (__stxr(v227 + 1, v226));
          }
          if (v111)
          {
            v228 = *(__int16 **)(v224 + 24);
            v229 = v113;
            do
            {
              _H0 = *v222;
              v231 = *v228++;
              _H1 = v231;
              __asm
              {
                FCVT            S1, H1
                FCVT            S0, H0
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *v222++ = LOWORD(_S0);
              --v229;
            }
            while (v229);
          }
          if (v225)
          {
            v236 = (unint64_t *)&v225->__shared_owners_;
            do
              v237 = __ldaxr(v236);
            while (__stlxr(v237 - 1, v236));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
              std::__shared_weak_count::__release_weak(v225);
            }
          }
          ++v221;
          v25 = (uint64_t *)*a4;
          v26 = a4[1];
        }
        while (v221 < (v26 - *a4) >> 4);
      }
      v23 = v112;
      if (*(float *)(a1 + 288) == 1.0 && *(float *)(a1 + 292) == 0.0)
        goto LABEL_242;
      v238 = v279;
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v271, *(_DWORD *)(v279 + 8), *(_DWORD *)(v279 + 12), *(_DWORD *)(v279 + 16), *(_DWORD *)(v279 + 20));
      v239 = v271;
      v240 = *(void **)(v271 + 24);
      v241 = *(int *)(v238 + 12) * (uint64_t)*(int *)(v238 + 8) * *(int *)(v238 + 16) * *(int *)(v238 + 20);
      src.data = *(void **)(v238 + 24);
      src.height = 1;
      src.width = v241;
      src.rowBytes = 2 * v241;
      dest.data = v240;
      dest.height = 1;
      dest.width = v241;
      dest.rowBytes = 4 * v241;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      v242 = (const float *)(a1 + 288);
      v243 = v272;
      v269 = v239;
      v270 = v272;
      if (v272)
      {
        v244 = (unint64_t *)&v272->__shared_owners_;
        do
          v245 = __ldxr(v244);
        while (__stxr(v245 + 1, v244));
      }
      if (*v242 != 1.0)
        vDSP_vsmul(*(const float **)(v239 + 24), 1, v242, *(float **)(v239 + 24), 1, v113);
      if (*(float *)(a1 + 292) != 0.0)
        vDSP_vsadd(*(const float **)(v239 + 24), 1, (const float *)(a1 + 292), *(float **)(v239 + 24), 1, v113);
      if (v243)
      {
        v246 = (unint64_t *)&v243->__shared_owners_;
        do
          v247 = __ldaxr(v246);
        while (__stlxr(v247 - 1, v246));
        if (!v247)
        {
          ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
          std::__shared_weak_count::__release_weak(v243);
        }
      }
      v248 = *(int *)(v279 + 12) * (uint64_t)*(int *)(v279 + 8) * *(int *)(v279 + 16) * *(int *)(v279 + 20);
      if ((_DWORD)v248)
      {
        v249 = *(int **)(v271 + 24);
        v250 = *(_WORD **)(v279 + 24);
        do
        {
          v251 = *v249++;
          _S0 = v251;
          __asm { FCVT            H0, S0 }
          *v250++ = _S0;
          --v248;
        }
        while (v248);
      }
      v71 = v272;
      if (!v272)
        goto LABEL_242;
      v253 = (unint64_t *)&v272->__shared_owners_;
      do
        v73 = __ldaxr(v253);
      while (__stlxr(v73 - 1, v253));
LABEL_240:
      if (!v73)
      {
        ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
        std::__shared_weak_count::__release_weak(v71);
      }
      goto LABEL_242;
    case 7:
      v28 = *(_DWORD *)(v19 + 8);
      v30 = *(_DWORD *)(v19 + 12);
LABEL_90:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v271, v28, v30, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v267, *(_DWORD *)(v14 + 8), *(_DWORD *)(v14 + 12), 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&data, *(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), 1, 1);
      v74 = 0;
      v75 = *(_DWORD *)(v7 + 8);
      v76 = *(_DWORD *)(v7 + 12);
      v77 = *(void **)(v271 + 24);
      v78 = *(int *)(v271 + 8);
      do
      {
        v78 *= *(int *)(v271 + 12 + v74);
        v74 += 4;
      }
      while (v74 != 12);
      v258 = v23;
      src.data = *(void **)(v19 + 24);
      src.height = 1;
      src.width = v78;
      src.rowBytes = 2 * v78;
      dest.data = v77;
      dest.height = 1;
      dest.width = v78;
      dest.rowBytes = 4 * v78;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (*(int *)(v7 + 20) >= 1)
      {
        __vala = 0;
        v79 = 0;
        v80 = v76 * v75;
        v81 = (const float *)(a1 + 288);
        v82 = (const float *)(a1 + 292);
        do
        {
          if (*(int *)(v7 + 16) >= 1)
          {
            v83 = 0;
            v84 = 0;
            do
            {
              v85 = v277;
              v86 = *(int *)(v85 + 12) * (uint64_t)*(int *)(v85 + 8);
              v87 = v267;
              v88 = *(void **)(v267 + 24);
              src.data = (void *)(*(_QWORD *)(v85 + 24) + 2 * *(_DWORD *)(v85 + 16) * v79 * (int)v86 + 2 * v84 * v86);
              src.height = 1;
              src.width = v86;
              src.rowBytes = 2 * v86;
              dest.data = v88;
              dest.height = 1;
              dest.width = v86;
              dest.rowBytes = 4 * v86;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v89 = data;
              vDSP_vmul(*(const float **)(v87 + 24), 1, *(const float **)(v271 + 24), 1, data[3], 1, v80);
              v91 = (std::__shared_weak_count *)v266;
              if (v266)
              {
                v92 = (unint64_t *)(v266 + 8);
                do
                  v93 = __ldxr(v92);
                while (__stxr(v93 + 1, v92));
              }
              if (*v81 != 1.0)
                vDSP_vsmul(v89[3], 1, v81, v89[3], 1, v80);
              v90.n128_f32[0] = *v82;
              if (*v82 != 0.0)
                vDSP_vsadd(v89[3], 1, v82, v89[3], 1, v80);
              if (v91)
              {
                v94 = (unint64_t *)&v91->__shared_owners_;
                do
                  v95 = __ldaxr(v94);
                while (__stlxr(v95 - 1, v94));
                if (!v95)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v91->__on_zero_shared)(v91, v90);
                  std::__shared_weak_count::__release_weak(v91);
                }
              }
              v7 = v279;
              v96 = *(int *)(v279 + 16);
              if (v80)
              {
                v97 = data[3];
                v98 = (_WORD *)(*(_QWORD *)(v279 + 24) + v83 + 2 * __vala * (int)v96);
                v99 = v80;
                do
                {
                  v100 = *(_DWORD *)v97++;
                  _S0 = v100;
                  __asm { FCVT            H0, S0 }
                  *v98++ = _S0;
                  --v99;
                }
                while (v99);
              }
              ++v84;
              v83 += 2 * v80;
            }
            while (v84 < v96);
          }
          ++v79;
          __vala += v80;
        }
        while (v79 < *(_DWORD *)(v7 + 20));
      }
      v102 = (std::__shared_weak_count *)v266;
      v23 = v258;
      if (v266)
      {
        v103 = (unint64_t *)(v266 + 8);
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        if (!v104)
        {
          ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
          std::__shared_weak_count::__release_weak(v102);
        }
      }
      v105 = v268;
      if (v268)
      {
        v106 = (unint64_t *)&v268->__shared_owners_;
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 - 1, v106));
        if (!v107)
        {
          ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
          std::__shared_weak_count::__release_weak(v105);
        }
      }
      v71 = v272;
      if (!v272)
        goto LABEL_242;
      v108 = (unint64_t *)&v272->__shared_owners_;
      do
        v73 = __ldaxr(v108);
      while (__stlxr(v73 - 1, v108));
      goto LABEL_240;
    case 4:
      v28 = *(_DWORD *)(v19 + 8);
      v30 = *(_DWORD *)(v19 + 12);
LABEL_52:
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v271, v28, v30, 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v267, *(_DWORD *)(v14 + 8), *(_DWORD *)(v14 + 12), 1, 1);
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&data, *(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), 1, 1);
      v33 = 0;
      v34 = *(_DWORD *)(v7 + 8);
      v35 = *(_DWORD *)(v7 + 12);
      v36 = *(void **)(v271 + 24);
      v37 = *(int *)(v271 + 8);
      do
      {
        v37 *= *(int *)(v271 + 12 + v33);
        v33 += 4;
      }
      while (v33 != 12);
      v257 = v23;
      src.data = *(void **)(v19 + 24);
      src.height = 1;
      src.width = v37;
      src.rowBytes = 2 * v37;
      dest.data = v36;
      dest.height = 1;
      dest.width = v37;
      dest.rowBytes = 4 * v37;
      vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
      if (*(int *)(v7 + 20) >= 1)
      {
        __val = 0;
        v38 = 0;
        v39 = v35 * v34;
        v40 = (const float *)(a1 + 288);
        v41 = (const float *)(a1 + 292);
        do
        {
          if (*(int *)(v7 + 16) >= 1)
          {
            v42 = 0;
            v43 = 0;
            do
            {
              v44 = v277;
              v45 = *(int *)(v44 + 12) * (uint64_t)*(int *)(v44 + 8);
              v46 = v267;
              v47 = *(void **)(v267 + 24);
              src.data = (void *)(*(_QWORD *)(v44 + 24) + 2 * *(_DWORD *)(v44 + 16) * v38 * (int)v45 + 2 * v43 * v45);
              src.height = 1;
              src.width = v45;
              src.rowBytes = 2 * v45;
              dest.data = v47;
              dest.height = 1;
              dest.width = v45;
              dest.rowBytes = 4 * v45;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v48 = data;
              vDSP_vadd(*(const float **)(v46 + 24), 1, *(const float **)(v271 + 24), 1, data[3], 1, v39);
              v50 = (std::__shared_weak_count *)v266;
              if (v266)
              {
                v51 = (unint64_t *)(v266 + 8);
                do
                  v52 = __ldxr(v51);
                while (__stxr(v52 + 1, v51));
              }
              if (*v40 != 1.0)
                vDSP_vsmul(v48[3], 1, v40, v48[3], 1, v39);
              v49.n128_f32[0] = *v41;
              if (*v41 != 0.0)
                vDSP_vsadd(v48[3], 1, v41, v48[3], 1, v39);
              if (v50)
              {
                v53 = (unint64_t *)&v50->__shared_owners_;
                do
                  v54 = __ldaxr(v53);
                while (__stlxr(v54 - 1, v53));
                if (!v54)
                {
                  ((void (*)(std::__shared_weak_count *, __n128))v50->__on_zero_shared)(v50, v49);
                  std::__shared_weak_count::__release_weak(v50);
                }
              }
              v7 = v279;
              v55 = *(int *)(v279 + 16);
              if (v39)
              {
                v56 = data[3];
                v57 = (_WORD *)(*(_QWORD *)(v279 + 24) + v42 + 2 * __val * (int)v55);
                v58 = v39;
                do
                {
                  v59 = *(_DWORD *)v56++;
                  _S0 = v59;
                  __asm { FCVT            H0, S0 }
                  *v57++ = _S0;
                  --v58;
                }
                while (v58);
              }
              ++v43;
              v42 += 2 * v39;
            }
            while (v43 < v55);
          }
          ++v38;
          __val += v39;
        }
        while (v38 < *(_DWORD *)(v7 + 20));
      }
      v65 = (std::__shared_weak_count *)v266;
      v23 = v257;
      if (v266)
      {
        v66 = (unint64_t *)(v266 + 8);
        do
          v67 = __ldaxr(v66);
        while (__stlxr(v67 - 1, v66));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
          std::__shared_weak_count::__release_weak(v65);
        }
      }
      v68 = v268;
      if (v268)
      {
        v69 = (unint64_t *)&v268->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v71 = v272;
      if (!v272)
        goto LABEL_242;
      v72 = (unint64_t *)&v272->__shared_owners_;
      do
        v73 = __ldaxr(v72);
      while (__stlxr(v73 - 1, v72));
      goto LABEL_240;
  }
LABEL_133:
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v271, *(_DWORD *)(v7 + 8), *(_DWORD *)(v7 + 12), 1, 1);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v267, *(_DWORD *)(v14 + 8), *(_DWORD *)(v14 + 12), 1, 1);
  data = 0;
  v266 = 0;
  if (v19)
  {
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&src, *(_DWORD *)(v19 + 8), *(_DWORD *)(v19 + 12), 1, 1);
    height = (std::__shared_weak_count *)src.height;
    data = (float **)src.data;
    v266 = src.height;
  }
  else
  {
    height = 0;
  }
  if (*(int *)(v7 + 20) >= 1)
  {
    v259 = v23;
    v124 = 0;
    v125 = (const float *)(a1 + 288);
    __B = (float *)(a1 + 292);
    __valb = v24;
    v126 = v24 - 1;
    do
    {
      if (*(int *)(v7 + 16) >= 1)
      {
        v127 = 0;
        do
        {
          v128 = v277;
          v129 = *(int *)(v128 + 12) * (uint64_t)*(int *)(v128 + 8);
          v130 = v267;
          v131 = *(void **)(v267 + 24);
          src.data = (void *)(*(_QWORD *)(v128 + 24)
                            + 2 * *(_DWORD *)(v128 + 16) * v124 * (int)v129
                            + 2 * (int)v129 * v127);
          src.height = 1;
          src.width = v129;
          src.rowBytes = 2 * v129;
          dest.data = v131;
          dest.height = 1;
          dest.width = v129;
          dest.rowBytes = 4 * v129;
          vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
          v133 = *(_DWORD *)(v7 + 8);
          v132 = *(_DWORD *)(v7 + 12);
          v134 = v132 * v133;
          switch(v126)
          {
            case 0:
              v135 = v275;
              v136 = *(int *)(v135 + 12) * (uint64_t)*(int *)(v135 + 8);
              v137 = data[3];
              src.data = (void *)(*(_QWORD *)(v135 + 24)
                                + 2 * *(_DWORD *)(v135 + 16) * v124 * (int)v136
                                + 2 * (int)v136 * v127);
              src.height = 1;
              src.width = v136;
              src.rowBytes = 2 * v136;
              dest.data = v137;
              dest.height = 1;
              dest.width = v136;
              dest.rowBytes = 4 * v136;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v138 = v271;
              vDSP_vmul(*(const float **)(v130 + 24), 1, data[3], 1, *(float **)(v271 + 24), 1, v134);
              v140 = v272;
              if (v272)
              {
                v141 = (unint64_t *)&v272->__shared_owners_;
                do
                  v142 = __ldxr(v141);
                while (__stxr(v142 + 1, v141));
              }
              if (*v125 != 1.0)
                vDSP_vsmul(*(const float **)(v138 + 24), 1, v125, *(float **)(v138 + 24), 1, v134);
              v139.n128_f32[0] = *__B;
              if (*__B != 0.0)
                vDSP_vsadd(*(const float **)(v138 + 24), 1, __B, *(float **)(v138 + 24), 1, v134);
              if (!v140)
                goto LABEL_221;
              v143 = (unint64_t *)&v140->__shared_owners_;
              do
                v144 = __ldaxr(v143);
              while (__stlxr(v144 - 1, v143));
              break;
            case 1:
              if (v134 >= 1)
              {
                v183 = *(float **)(v130 + 24);
                v184 = *(float **)(v271 + 24);
                v185 = (v132 * v133);
                do
                {
                  v186 = *v183++;
                  *v184++ = v186 + *v125;
                  --v185;
                }
                while (v185);
              }
              goto LABEL_221;
            case 2:
              if (v134 >= 1)
              {
                v169 = *(float **)(v130 + 24);
                v170 = *(float **)(v271 + 24);
                v171 = (v132 * v133);
                do
                {
                  v172 = *v169++;
                  *v170++ = v172 * *v125;
                  --v171;
                }
                while (v171);
              }
              goto LABEL_221;
            case 4:
              v177 = *(int *)(v275 + 12) * (uint64_t)*(int *)(v275 + 8);
              v178 = data[3];
              src.data = (void *)(*(_QWORD *)(v275 + 24) + 2 * (int)v177 * v127);
              src.height = 1;
              src.width = v177;
              src.rowBytes = 2 * v177;
              dest.data = v178;
              dest.height = 1;
              dest.width = v177;
              dest.rowBytes = 4 * v177;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v179 = v271;
              vDSP_vsadd(*(const float **)(v130 + 24), 1, data[3], *(float **)(v271 + 24), 1, v134);
              v140 = v272;
              if (v272)
              {
                v180 = (unint64_t *)&v272->__shared_owners_;
                do
                  v181 = __ldxr(v180);
                while (__stxr(v181 + 1, v180));
              }
              if (*v125 != 1.0)
                vDSP_vsmul(*(const float **)(v179 + 24), 1, v125, *(float **)(v179 + 24), 1, v134);
              v139.n128_f32[0] = *__B;
              if (*__B != 0.0)
                vDSP_vsadd(*(const float **)(v179 + 24), 1, __B, *(float **)(v179 + 24), 1, v134);
              if (!v140)
                goto LABEL_221;
              v182 = (unint64_t *)&v140->__shared_owners_;
              do
                v144 = __ldaxr(v182);
              while (__stlxr(v144 - 1, v182));
              break;
            case 5:
              v157 = *(int *)(v275 + 12) * (uint64_t)*(int *)(v275 + 8);
              v158 = data[3];
              src.data = (void *)(*(_QWORD *)(v275 + 24) + 2 * (int)v157 * v127);
              src.height = 1;
              src.width = v157;
              src.rowBytes = 2 * v157;
              dest.data = v158;
              dest.height = 1;
              dest.width = v157;
              dest.rowBytes = 4 * v157;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v159 = v271;
              vDSP_vadd(*(const float **)(v130 + 24), 1, data[3], 1, *(float **)(v271 + 24), 1, v134);
              v140 = v272;
              if (v272)
              {
                v160 = (unint64_t *)&v272->__shared_owners_;
                do
                  v161 = __ldxr(v160);
                while (__stxr(v161 + 1, v160));
              }
              if (*v125 != 1.0)
                vDSP_vsmul(*(const float **)(v159 + 24), 1, v125, *(float **)(v159 + 24), 1, v134);
              v139.n128_f32[0] = *__B;
              if (*__B != 0.0)
                vDSP_vsadd(*(const float **)(v159 + 24), 1, __B, *(float **)(v159 + 24), 1, v134);
              if (!v140)
                goto LABEL_221;
              v162 = (unint64_t *)&v140->__shared_owners_;
              do
                v144 = __ldaxr(v162);
              while (__stlxr(v144 - 1, v162));
              break;
            case 7:
              v163 = *(int *)(v275 + 12) * (uint64_t)*(int *)(v275 + 8);
              v164 = data[3];
              src.data = (void *)(*(_QWORD *)(v275 + 24) + 2 * (int)v163 * v127);
              src.height = 1;
              src.width = v163;
              src.rowBytes = 2 * v163;
              dest.data = v164;
              dest.height = 1;
              dest.width = v163;
              dest.rowBytes = 4 * v163;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v165 = v271;
              vDSP_vsmul(*(const float **)(v130 + 24), 1, data[3], *(float **)(v271 + 24), 1, v134);
              v140 = v272;
              if (v272)
              {
                v166 = (unint64_t *)&v272->__shared_owners_;
                do
                  v167 = __ldxr(v166);
                while (__stxr(v167 + 1, v166));
              }
              if (*v125 != 1.0)
                vDSP_vsmul(*(const float **)(v165 + 24), 1, v125, *(float **)(v165 + 24), 1, v134);
              v139.n128_f32[0] = *__B;
              if (*__B != 0.0)
                vDSP_vsadd(*(const float **)(v165 + 24), 1, __B, *(float **)(v165 + 24), 1, v134);
              if (!v140)
                goto LABEL_221;
              v168 = (unint64_t *)&v140->__shared_owners_;
              do
                v144 = __ldaxr(v168);
              while (__stlxr(v144 - 1, v168));
              break;
            case 8:
              v187 = *(int *)(v275 + 12) * (uint64_t)*(int *)(v275 + 8);
              v188 = data[3];
              src.data = (void *)(*(_QWORD *)(v275 + 24) + 2 * (int)v187 * v127);
              src.height = 1;
              src.width = v187;
              src.rowBytes = 2 * v187;
              dest.data = v188;
              dest.height = 1;
              dest.width = v187;
              dest.rowBytes = 4 * v187;
              vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
              v189 = v271;
              vDSP_vmul(*(const float **)(v130 + 24), 1, data[3], 1, *(float **)(v271 + 24), 1, v134);
              v140 = v272;
              if (v272)
              {
                v190 = (unint64_t *)&v272->__shared_owners_;
                do
                  v191 = __ldxr(v190);
                while (__stxr(v191 + 1, v190));
              }
              if (*v125 != 1.0)
                vDSP_vsmul(*(const float **)(v189 + 24), 1, v125, *(float **)(v189 + 24), 1, v134);
              v139.n128_f32[0] = *__B;
              if (*__B != 0.0)
                vDSP_vsadd(*(const float **)(v189 + 24), 1, __B, *(float **)(v189 + 24), 1, v134);
              if (!v140)
                goto LABEL_221;
              v192 = (unint64_t *)&v140->__shared_owners_;
              do
                v144 = __ldaxr(v192);
              while (__stlxr(v144 - 1, v192));
              break;
            case 9:
              if (v134 >= 1)
              {
                v173 = *(float **)(v130 + 24);
                v174 = *(float **)(v271 + 24);
                v175 = (v132 * v133);
                do
                {
                  v176 = *v173++;
                  *v174++ = 1.0 / (float)(v176 + *(float *)(a1 + 296));
                  --v175;
                }
                while (v175);
              }
              goto LABEL_221;
            case 10:
              if (v134 >= 1)
              {
                v153 = *(float **)(v130 + 24);
                v154 = *(float **)(v271 + 24);
                v155 = (v132 * v133);
                do
                {
                  v156 = *v153++;
                  *v154++ = sqrtf(v156);
                  --v155;
                }
                while (v155);
              }
              goto LABEL_221;
            case 11:
              if (v134 >= 1)
              {
                v145 = *(float **)(v130 + 24);
                v146 = *(float **)(v271 + 24);
                v147 = (v132 * v133);
                do
                {
                  v148 = *v145++;
                  *v146++ = 1.0 / sqrtf(v148 + *(float *)(a1 + 296));
                  --v147;
                }
                while (v147);
              }
              goto LABEL_221;
            case 12:
              if (v134 >= 1)
              {
                v149 = *(float **)(v130 + 24);
                v150 = *(float **)(v271 + 24);
                v151 = (v132 * v133);
                do
                {
                  v152 = *v149++;
                  *v150++ = powf(v152, *v125);
                  --v151;
                }
                while (v151);
              }
              goto LABEL_221;
            default:
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::to_string((std::string *)&dest, __valb);
              v255 = std::string::insert((std::string *)&dest, 0, "Elwise Op not implemented");
              v256 = *(_OWORD *)&v255->__r_.__value_.__l.__data_;
              src.width = v255->__r_.__value_.__r.__words[2];
              *(_OWORD *)&src.data = v256;
              v255->__r_.__value_.__l.__size_ = 0;
              v255->__r_.__value_.__r.__words[2] = 0;
              v255->__r_.__value_.__r.__words[0] = 0;
              std::runtime_error::runtime_error(exception, (const std::string *)&src);
              __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          if (!v144)
          {
            ((void (*)(std::__shared_weak_count *, __n128))v140->__on_zero_shared)(v140, v139);
            std::__shared_weak_count::__release_weak(v140);
          }
LABEL_221:
          v7 = v279;
          v193 = *(_DWORD *)(v279 + 16);
          if (v134)
          {
            v194 = *(int **)(v271 + 24);
            v195 = v134;
            v196 = (_WORD *)(*(_QWORD *)(v279 + 24) + 2 * v124 * v132 * v193 * v133 + 2 * v134 * v127);
            do
            {
              v197 = *v194++;
              _S0 = v197;
              __asm { FCVT            H0, S0 }
              *v196++ = _S0;
              --v195;
            }
            while (v195);
          }
          ++v127;
        }
        while (v127 < v193);
      }
      ++v124;
    }
    while (v124 < *(_DWORD *)(v7 + 20));
    height = (std::__shared_weak_count *)v266;
    v23 = v259;
  }
  if (height)
  {
    v199 = (unint64_t *)&height->__shared_owners_;
    do
      v200 = __ldaxr(v199);
    while (__stlxr(v200 - 1, v199));
    if (!v200)
    {
      ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
      std::__shared_weak_count::__release_weak(height);
    }
  }
  v201 = v268;
  if (v268)
  {
    v202 = (unint64_t *)&v268->__shared_owners_;
    do
      v203 = __ldaxr(v202);
    while (__stlxr(v203 - 1, v202));
    if (!v203)
    {
      ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
      std::__shared_weak_count::__release_weak(v201);
    }
  }
  v71 = v272;
  if (v272)
  {
    v204 = (unint64_t *)&v272->__shared_owners_;
    do
      v73 = __ldaxr(v204);
    while (__stlxr(v73 - 1, v204));
    goto LABEL_240;
  }
LABEL_242:
  if (*(_DWORD *)(a1 + 284) == 1 && v23 << 32)
  {
    v205 = *(__int16 **)(v279 + 24);
    v206 = (int)v23;
    do
    {
      _H0 = *v205;
      __asm { FCVT            S1, H0 }
      v209 = *v205;
      if (_S1 < 0.0)
        v209 = 0;
      *v205++ = v209;
      --v206;
    }
    while (v206);
  }
  v210 = v276;
  if (v276)
  {
    v211 = (unint64_t *)&v276->__shared_owners_;
    do
      v212 = __ldaxr(v211);
    while (__stlxr(v212 - 1, v211));
    if (!v212)
    {
      ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
      std::__shared_weak_count::__release_weak(v210);
    }
  }
  v213 = v278;
  if (v278)
  {
    v214 = (unint64_t *)&v278->__shared_owners_;
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  v216 = v280;
  if (v280)
  {
    v217 = (unint64_t *)&v280->__shared_owners_;
    do
      v218 = __ldaxr(v217);
    while (__stlxr(v218 - 1, v217));
    if (!v218)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
}

void sub_1913D8D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  uint64_t v46;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 - 120);
  _Unwind_Resume(a1);
}

void Espresso::CPUFP16Engine::split_kernel_cpu::~split_kernel_cpu(Espresso::CPUFP16Engine::split_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::split_kernel_cpu::__launch(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  void *v6;
  std::__shared_weak_count *v7;
  int *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  int v33;
  int *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  int *v65;
  std::__shared_weak_count *v66;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v6)
  {
    v8 = (int *)*((_QWORD *)v6 + 22);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 23);
    v65 = v8;
    v66 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v65 = 0;
    v66 = 0;
  }
  v11 = v8[3] * (uint64_t)v8[2];
  v12 = (int)v11 * (uint64_t)v8[4];
  if (a1[74])
  {
    v13 = *a3;
    v14 = a3[1];
    v15 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, v14, 0);
    if (v15)
    {
      v17 = v15[22];
      v16 = (std::__shared_weak_count *)v15[23];
      if (v16)
      {
        v18 = (unint64_t *)&v16->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
        v13 = *a3;
        v14 = a3[1];
      }
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v28 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(v13, v14, 1);
    if (v28)
    {
      v30 = v28[22];
      v29 = (std::__shared_weak_count *)v28[23];
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v30 = 0;
      v29 = 0;
    }
    v60 = v29;
    v61 = v16;
    v33 = a1[73];
    if (v33 <= 0)
      v33 = v8[4] / 2;
    if (v8[5] >= 1)
    {
      v34 = v8;
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v62 = 2 * v33 * (int)v11;
      v38 = 2 * (int)v12;
      do
      {
        v39 = (char *)(*((_QWORD *)v34 + 3) + v35);
        v40 = (void *)(*(_QWORD *)(v30 + 24) + 2 * v36 * *(int *)(v30 + 16));
        memcpy((void *)(*(_QWORD *)(v17 + 24) + 2 * v36 * *(int *)(v17 + 16)), v39, 2 * *(_DWORD *)(v17 + 16) * (int)v11);
        memcpy(v40, &v39[v62], 2 * *(_DWORD *)(v30 + 16) * (int)v11);
        ++v37;
        v36 += (int)v11;
        v35 += v38;
      }
      while (v37 < v34[5]);
    }
    if (v60)
    {
      v41 = (unint64_t *)&v60->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (v61)
    {
      v43 = (unint64_t *)&v61->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
        std::__shared_weak_count::__release_weak(v61);
      }
    }
  }
  else
  {
    v20 = *a3;
    v21 = a3[1];
    if (a1[71] == 3)
    {
      if (v21 != v20)
      {
        v22 = 0;
        v23 = 0;
        do
        {
          Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v63, *(void **)(v20 + 16 * v22), *(std::__shared_weak_count **)(v20 + 16 * v22 + 8));
          v24 = *(int *)(v63 + 20);
          memcpy(*(void **)(v63 + 24), (const void *)(*((_QWORD *)v65 + 3) + 2 * v23 * v12), 2 * (int)v24 * (int)v12);
          v25 = v64;
          if (v64)
          {
            v26 = (unint64_t *)&v64->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            if (!v27)
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
          }
          v23 += v24;
          ++v22;
          v20 = *a3;
        }
        while (v22 < (a3[1] - *a3) >> 4);
      }
    }
    else if (v21 != v20)
    {
      v45 = 0;
      v46 = 0;
      v47 = 2 * (int)v12;
      do
      {
        Espresso::inline_get_cpu_blob<Espresso::blob<unsigned short,4>,true>(&v63, *(void **)(v20 + 16 * v45), *(std::__shared_weak_count **)(v20 + 16 * v45 + 8));
        v48 = v65;
        v49 = v63;
        if (v65[5] >= 1)
        {
          v50 = 0;
          v51 = 0;
          v52 = 2 * v11 * v46;
          do
          {
            memcpy((void *)(*(_QWORD *)(v49 + 24) + 2 * v50 * *(int *)(v49 + 16)), (const void *)(*((_QWORD *)v48 + 3) + v52), 2 * *(_DWORD *)(v49 + 16) * (int)v11);
            ++v51;
            v50 += v11;
            v52 += v47;
          }
          while (v51 < v48[5]);
        }
        v53 = *(int *)(v49 + 16);
        v54 = v64;
        if (v64)
        {
          v55 = (unint64_t *)&v64->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        v46 += v53;
        ++v45;
        v20 = *a3;
      }
      while (v45 < (a3[1] - *a3) >> 4);
    }
  }
  v57 = v66;
  if (v66)
  {
    v58 = (unint64_t *)&v66->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_1913D9350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::CPUFP16Engine::upsample_kernel_cpu::~upsample_kernel_cpu(Espresso::CPUFP16Engine::upsample_kernel_cpu *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::CPUFP16Engine::upsample_kernel_cpu::__launch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  _WORD *v60;
  _WORD *v61;
  uint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;

  v6 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a4, a4[1], 0);
  if (v6)
  {
    v8 = v6[22];
    v7 = (std::__shared_weak_count *)v6[23];
    v77 = v8;
    v78 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v8 = 0;
    v77 = 0;
    v78 = 0;
  }
  v11 = Espresso::layer_data::get_blob<Espresso::blob_cpu>(*a3, a3[1], 0);
  if (v11)
  {
    v15 = v11[22];
    v16 = (std::__shared_weak_count *)v11[23];
    v75 = v15;
    v76 = v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    v16 = 0;
    v15 = 0;
    v75 = 0;
    v76 = 0;
  }
  v19 = 0;
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v20 = 1;
  do
  {
    *((_QWORD *)&v72 + v19) = (int)v20;
    v20 *= *(unsigned int *)(v8 + 8 + 4 * v19++);
  }
  while (v19 != 4);
  v21 = 0;
  v71 = 0;
  v22 = 0uLL;
  v69 = 0u;
  v70 = 0u;
  v23 = 1;
  do
  {
    *((_QWORD *)&v69 + v21) = (int)v23;
    v23 *= *(unsigned int *)(v15 + 8 + 4 * v21++);
  }
  while (v21 != 4);
  if (*(_DWORD *)(a1 + 292))
    goto LABEL_61;
  v68 = v16;
  if (*(_BYTE *)(a1 + 304))
  {
    if (!*(_DWORD *)(a1 + 300))
    {
      v24 = *(unsigned int *)(v15 + 20);
      if ((int)v24 >= 1)
      {
        v25 = 0;
        v26 = 0;
        v28 = *(unsigned int *)(v15 + 8);
        v27 = *(unsigned int *)(v15 + 12);
        v22.n128_f32[0] = (float)*(int *)(v8 + 12) / (float)(int)v27;
        v29 = *(unsigned int *)(v15 + 16);
        v30 = v73;
        v31 = *((_QWORD *)&v72 + 1);
        v32 = 2 * *((_QWORD *)&v70 + 1);
        v12 = 2 * v70;
        v13 = 2 * *((_QWORD *)&v69 + 1);
        v14.n128_f32[0] = (float)*(int *)(v8 + 8) / (float)(int)v28;
        do
        {
          if ((int)v29 >= 1)
          {
            v33 = 0;
            v34 = *(_QWORD *)(v8 + 24) + 2 * *((_QWORD *)&v30 + 1) * v26;
            v35 = *(_QWORD *)(v15 + 24) + v25;
            do
            {
              if ((int)v27 >= 1)
              {
                v36 = 0;
                v37 = v35;
                do
                {
                  if ((int)v28 >= 1)
                  {
                    v38 = 0;
                    v39 = v31 * (int)vcvtms_s32_f32(v22.n128_f32[0] * (float)(int)v36);
                    do
                    {
                      *(_WORD *)(v37 + 2 * v38) = *(_WORD *)(v34
                                                           + 2 * v30 * v33
                                                           + 2
                                                           * (v39
                                                            + (int)vcvtms_s32_f32(v14.n128_f32[0] * (float)(int)v38)));
                      ++v38;
                    }
                    while (v28 != v38);
                  }
                  ++v36;
                  v37 += v13;
                }
                while (v36 != v27);
              }
              ++v33;
              v35 += v12;
            }
            while (v33 != v29);
          }
          ++v26;
          v25 += v32;
        }
        while (v26 != v24);
      }
      goto LABEL_50;
    }
LABEL_61:
    Espresso::throw_exception_selector<Espresso::generic_error>("Nearest neighbor sampling mode with fractional scale factors cannot be used in legacy mode in kernel upsample_kernel_cpu.");
  }
  v40 = *(unsigned int *)(v15 + 20);
  if ((int)v40 >= 1)
  {
    v41 = 0;
    v42 = 0;
    v43 = *(unsigned int *)(v15 + 16);
    v44 = v73;
    v45 = *((_QWORD *)&v69 + 1);
    v46 = 2 * *((_QWORD *)&v70 + 1);
    v47 = *((_QWORD *)&v72 + 1);
    v48 = 2 * v70;
    v12 = 2 * *((_QWORD *)&v69 + 1);
    do
    {
      if ((int)v43 >= 1)
      {
        v13 = 0;
        v49 = *(_QWORD *)(v8 + 24) + 2 * *((_QWORD *)&v44 + 1) * v42;
        v50 = *(_DWORD *)(v8 + 12);
        v51 = *(_QWORD *)(v15 + 24) + v41;
        do
        {
          if (v50 >= 1)
          {
            v52 = 0;
            v53 = v49 + 2 * v44 * v13;
            v54 = *(unsigned int *)(v8 + 8);
            do
            {
              if ((int)v54 >= 1)
              {
                v55 = 0;
                v56 = *(unsigned int *)(a1 + 288);
                do
                {
                  if ((int)v56 >= 1)
                  {
                    v57 = 0;
                    v58 = *(_WORD *)(v53 + 2 * v55);
                    v59 = *(unsigned int *)(a1 + 284);
                    v60 = (_WORD *)(v51 + 2 * (v45 * (int)v56 * v52 + (int)v59 * (int)v55));
                    do
                    {
                      v61 = v60;
                      v62 = v59;
                      if ((int)v59 >= 1)
                      {
                        do
                        {
                          *v61++ = v58;
                          --v62;
                        }
                        while (v62);
                      }
                      ++v57;
                      v60 = (_WORD *)((char *)v60 + v12);
                    }
                    while (v57 != v56);
                  }
                  ++v55;
                }
                while (v55 != v54);
              }
              v53 += 2 * v47;
              ++v52;
            }
            while (v52 != v50);
          }
          ++v13;
          v51 += v48;
        }
        while (v13 != v43);
      }
      ++v42;
      v41 += v46;
    }
    while (v42 != v40);
  }
LABEL_50:
  if (v68)
  {
    v63 = (unint64_t *)&v68->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, __n128, __n128))v68->__on_zero_shared)(v68, v12, v13, v22, v14);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v65 = v78;
  if (v78)
  {
    v66 = (unint64_t *)&v78->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, __n128, __n128))v65->__on_zero_shared)(v65, v12, v13, v22, v14);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
}

void sub_1913D979C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 - 96);
  _Unwind_Resume(a1);
}

void Espresso::batch_cpu::~batch_cpu(Espresso::batch_cpu *this)
{
  Espresso::abstract_batch::~abstract_batch(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::context_cpu::get_device_model_name@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "CPU");
}

void Espresso::abstract_context::compute_batch_sync_retry(void (***a1)(uint64_t *__return_ptr, _QWORD), void *a2, uint64_t a3, int a4)
{
  id v6;

  v6 = a2;
  if (a4 >= 1)
    Espresso::abstract_context::compute_batch_sync(a1, v6);

}

void sub_1913D98C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1913D98C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::runtime_error a11)
{
  std::runtime_error::~runtime_error(&a11);
  __cxa_end_catch();
  JUMPOUT(0x1913D98D8);
}

void Espresso::abstract_context::compute_batch_sync_or_enqueue(void (***a1)(uint64_t *__return_ptr, _QWORD), _QWORD *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  v6 = v5;
  if (*a2)
    (*((void (**)(id, _QWORD *))v5 + 2))(v5, a2);
  else
    Espresso::abstract_context::compute_batch_sync(a1, v5);

}

void sub_1913D9944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Espresso::context_cpu::create_compiler_for_network(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _DWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  unsigned int v16;
  _DWORD *v17[2];

  v16 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = operator new(0x80uLL);
  v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E2DB6BD0;
  v5 = v3 + 3;
  v6 = *(_DWORD **)(a2 + 8);
  v17[0] = *(_DWORD **)a2;
  v17[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 2);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    Espresso::compiler_cpu::compiler_cpu((uint64_t)(v3 + 3), (uint64_t *)v17);
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 1, v7));
    if (!v9)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  else
  {
    Espresso::compiler_cpu::compiler_cpu((uint64_t)(v3 + 3), (uint64_t *)v17);
  }
  *(_QWORD *)&v15 = v5;
  *((_QWORD *)&v15 + 1) = v4;
  v10 = *(_QWORD *)a2 + 528;
  v17[0] = &v16;
  v11 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v10, &v16, (uint64_t)&std::piecewise_construct, v17);
  v12 = (std::__shared_weak_count *)v11[4];
  *(_OWORD *)(v11 + 3) = v15;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1913D9B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_context::get_arg_a(Espresso::abstract_context *this)
{
  return 0;
}

void Espresso::abstract_context::get_internal_fallback_context(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

BOOL Espresso::context_cpu::set_platform_specific_option(Espresso::context_cpu *this, const char *__s1, int a3)
{
  int v5;

  v5 = strcmp(__s1, "use_sequential_cblas");
  if (!v5)
    *((_BYTE *)this + 125) = a3 != 0;
  return v5 == 0;
}

void Espresso::context_cpu::network_transform_post_load(Espresso::context_cpu *this, Espresso::net *a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13[2];
  uint64_t v14;
  std::__shared_weak_count *v15;

  if ((***((unsigned int (****)(_QWORD))this + 1))(*((_QWORD *)this + 1)) != 80000 && *((_BYTE *)this + 54))
  {
    Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(&v14, (uint64_t)a2);
    v4 = v14;
    if (!v14
      || (v5 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1)),
          !Espresso::analysis_pass_insert_casts::has_platform(v4, v5)))
    {
      v6 = (***((uint64_t (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
      v7 = (std::__shared_weak_count *)operator new(0x28uLL);
      v7->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      v7->__shared_weak_owners_ = 0;
      v7->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD348;
      v7[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D92010;
      LODWORD(v7[1].__shared_owners_) = v6;
      v13[0] = (uint64_t)&v7[1];
      v13[1] = (uint64_t)v7;
      Espresso::run_pass_on_network<Espresso::pass_insert_casts,Espresso::pass_params_insert_casts>((uint64_t)a2, v13);
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1913D9CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void Espresso::net::get_analysis_if_existing<Espresso::analysis_pass_insert_casts>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  void *v14;

  v3 = std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)(a2 + 1120), (uint64_t)&v14);
  v4 = v3;
  if (v3)
  {
    v5 = (const void *)v3[3];
    v6 = (std::__shared_weak_count *)v4[4];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5
    {
      *a1 = v9;
      a1[1] = v6;
      if (!v6)
        return;
      v10 = (unint64_t *)&v6->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      if (!v6)
        return;
    }
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
}

void sub_1913D9DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Espresso::run_pass_on_network<Espresso::pass_insert_casts,Espresso::pass_params_insert_casts>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  Espresso *v10;
  const char *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char v19;
  uint8_t buf[4];
  unint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  v5 = v4;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2D82578;
  v6 = *a2;
  v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v10 = (Espresso *)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 1, v6, (uint64_t)v7);
    v12 = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    v10 = (Espresso *)std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4 + 1, v6, 0);
  }
  Espresso::espresso_os_log_subsystem(v10, v11);
  v14 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v21 = (unint64_t)"N8Espresso17pass_insert_castsE" & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_debug_impl(&dword_190DAF000, v14, OS_LOG_TYPE_DEBUG, "run_pass_on_network %s", buf, 0xCu);
  }

  (*(void (**)(uint8_t *__return_ptr, _QWORD *, uint64_t))(*v5 + 24))(buf, v5, a1);
  v19 = 0;
  (*(void (**)(_QWORD *, char *))(*v5 + 16))(v5, &v19);
  if (v19)
  {
    if (buf[0])
      Espresso::net::set_analysis<Espresso::analysis_result>(a1, (uint64_t *)((char *)&v21 + 4));
    else
      std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>((uint64_t *)(a1 + 1120), (uint64_t)"N8Espresso26analysis_pass_insert_castsE");
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
}

void sub_1913D9FEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_params_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_params_insert_casts>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_insert_casts>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::compiler_cpu::compiler_cpu(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)a1 = &off_1E2D5FC38;
  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = v4;
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v3;
    *(_QWORD *)(a1 + 16) = 0;
  }
  return a1;
}

void Espresso::compiler_cpu::~compiler_cpu(Espresso::compiler_cpu *this)
{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(_QWORD *)this = off_1E2D94680;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v4 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(_QWORD *)this = off_1E2D5FD08;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  void *v2;
  std::__shared_weak_count *v3;
  void **v4;

  *(_QWORD *)this = off_1E2D94680;
  v2 = (void *)*((_QWORD *)this + 10);
  if (v2)
  {
    *((_QWORD *)this + 11) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  v4 = (void **)((char *)this + 32);
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  *(_QWORD *)this = off_1E2D5FD08;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x19401CD90);
}

void Espresso::compiler_cpu::dump_ir(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  std::string __str;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v14 = v5;
    if (v5)
      v13 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v5 = 0;
  }
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  std::string::basic_string[abi:ne180100]<0>(v10, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::dump_network(&v13, &__str, (uint64_t)v10, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1913DA310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v26 - 48);
  _Unwind_Resume(a1);
}

void Espresso::compiler_cpu::build_segment()
{
  Espresso::throw_exception_selector<Espresso::generic_error>("Build method of AOT compiler should never been called");
}

void Espresso::compiler_cpu::__forward_segment()
{
  Espresso::throw_exception_selector<Espresso::generic_error>("Build method of AOT compiler should never been called");
}

void std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<Espresso::net_compiler_segment_based::segment_t>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<Espresso::compiler_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6BD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::compiler_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6BD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::compiler_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::batch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC25C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::batch_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC25C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void Espresso::engine_cpu::~engine_cpu(Espresso::engine_cpu *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_139@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBDDC8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D98A30;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_QWORD *)v6 + 50) = 0;
  *(_OWORD *)(v6 + 344) = xmmword_191A8AA80;
  *((_QWORD *)v6 + 45) = 0xFFFFFFFF00000001;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *(_OWORD *)(v6 + 408) = xmmword_191A8AA80;
  *((_QWORD *)v6 + 53) = 0xFFFFFFFF00000001;
  *((_QWORD *)v6 + 59) = 0;
  *((_QWORD *)v6 + 60) = 0;
  *((_QWORD *)v6 + 58) = 0;
  *((_QWORD *)v6 + 38) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DA5B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::linear_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDDC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::linear_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDDC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::linear_dequantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_138@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD888;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D94528;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_QWORD *)v6 + 50) = 0;
  *(_OWORD *)(v6 + 344) = xmmword_191A8AA80;
  *((_QWORD *)v6 + 45) = 0xFFFFFFFF00000001;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *(_OWORD *)(v6 + 408) = xmmword_191A8AA80;
  *((_QWORD *)v6 + 53) = 0xFFFFFFFF00000001;
  *((_QWORD *)v6 + 59) = 0;
  *((_QWORD *)v6 + 60) = 0;
  *((_QWORD *)v6 + 58) = 0;
  *((_QWORD *)v6 + 38) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DA6D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::linear_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD888;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::linear_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD888;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::linear_quantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_137@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x138uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBB940;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D83128;
  *((_DWORD *)v8 + 76) = *a2;
  *((_DWORD *)v8 + 77) = a3;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913DA7BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::degamma_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB940;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::degamma_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB940;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::degamma_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_136@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DB6D90;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D5FEB8;
  v8[38] = *a2;
  *((_DWORD *)v8 + 78) = a3;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913DA8A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::plane_rw_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::plane_rw_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::plane_rw_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_135@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDF50;
  v7 = Espresso::generic_tunneled_ane_unit_kernel::generic_tunneled_ane_unit_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D99060;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DA978(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_unit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDF50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_unit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDF50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::tunneled_ane_unit_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_134@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x248uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDA80;
  v7 = Espresso::generic_tunneled_ane_op_kernel::generic_tunneled_ane_op_kernel((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2D94F58;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DAA4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDA80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::tunneled_ane_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDA80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::tunneled_ane_op_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_133@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  __n128 result;

  v8 = operator new(0x140uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBE5A8;
  result.n128_u64[0] = Espresso::furthest_point_sampling_kernel_cpu::furthest_point_sampling_kernel_cpu((uint64_t)(v8 + 3), a1, a3, a2);
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913DAB24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::furthest_point_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE5A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::furthest_point_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE5A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::furthest_point_sampling_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_132@<Q0>(_QWORD *a1@<X1>, const std::string *a2@<X2>, __n128 *a3@<X8>)
{
  void *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x190uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB630;
  result.n128_u64[0] = (unint64_t)Espresso::einsum_kernel_cpu::einsum_kernel_cpu((char *)v6 + 24, a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DABEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::einsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::einsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB630;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::einsum_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_131@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE650;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D9E940;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DACC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::resize_nearest_neighbor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::resize_nearest_neighbor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::resize_nearest_neighbor_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_130@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v6 = (char *)operator new(0x228uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE340;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D9B800;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  v8 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v8;
  *((_QWORD *)v6 + 50) = *(_QWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DADD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::general_slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE340;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::general_slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE340;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::general_slice_update_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_129@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  __n128 result;

  v6 = (char *)operator new(0x1E0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBBD30;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D845E8;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v9;
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DAED0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::deconv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBD30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::deconv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBD30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::deconv3d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_128@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  __n128 result;

  v6 = operator new(0x1B8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE6C0;
  Espresso::kernel_with_uniforms_<Espresso::fused_inner_product_grad_params_t,Espresso::base_kernel>::kernel_with_uniforms_((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D9ED88;
  v7 = *(_OWORD *)(a2 + 112);
  *((_OWORD *)v6 + 25) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v6 + 26) = v7;
  *(_QWORD *)((char *)v6 + 431) = *(_QWORD *)(a2 + 127);
  v8 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v8;
  v9 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v11;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DAFCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::fused_inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE6C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::fused_inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE6C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::fused_inner_product_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_127@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;

  v6 = operator new(0x1E0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE4C8;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 38));
  v6[3] = &off_1E2D9D340;
  v7 = a2[9];
  *((_OWORD *)v6 + 27) = a2[8];
  *((_OWORD *)v6 + 28) = v7;
  *(_OWORD *)(v8 + 156) = *(_OWORD *)((char *)a2 + 156);
  v9 = a2[5];
  *((_OWORD *)v6 + 23) = a2[4];
  *((_OWORD *)v6 + 24) = v9;
  v10 = a2[7];
  *((_OWORD *)v6 + 25) = a2[6];
  *((_OWORD *)v6 + 26) = v10;
  v11 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v11;
  v12 = a2[3];
  *((_OWORD *)v6 + 21) = a2[2];
  *((_OWORD *)v6 + 22) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB0E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::fused_convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::fused_convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::fused_convolution_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_126@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBDF18;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 45) = 0;
  *((_QWORD *)v6 + 46) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D98EC8;
  v8 = a2[1];
  *(_OWORD *)(v6 + 328) = *a2;
  *(_OWORD *)(v6 + 344) = v8;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB1D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::static_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDF18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::static_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDF18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::static_dequantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_125@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDA10;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D94CA8;
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB2B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::static_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::static_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDA10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::static_quantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_124@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x150uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD0E0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D905F0;
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)((char *)a2 + 12);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB394(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD0E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::slice_update_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD0E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::slice_update_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_123@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB7B8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D82888;
  *((_QWORD *)v6 + 49) = 0;
  *((_QWORD *)v6 + 50) = 0;
  *((_QWORD *)v6 + 48) = 0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  v6[308] = *(_BYTE *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB48C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::argsort_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB7B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::argsort_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB7B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::argsort_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_122@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  __n128 result;

  v6 = (char *)operator new(0x1E0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB550;
  Espresso::kernel_with_uniforms_<Espresso::conv3d_params_t,Espresso::abstract_kernel_with_weights_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 54) = 0;
  *((_QWORD *)v6 + 55) = 0;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2D81B18;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 392) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 408) = v7;
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v6 + 328) = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 344) = v8;
  v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v6 + 360) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v6 + 376) = v9;
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB58C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::conv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB550;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::conv3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB550;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::conv3d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_121@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __n128 result;

  v6 = (char *)operator new(0x280uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE7A0;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D9F660;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  *(_OWORD *)(v6 + 552) = 0u;
  *(_OWORD *)(v6 + 568) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *((_QWORD *)v6 + 79) = 0;
  v7 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  v8 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = v9;
  *((_OWORD *)v6 + 20) = v7;
  v10 = *(_OWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 112);
  *((_DWORD *)v6 + 108) = *(_DWORD *)(a2 + 128);
  *((_OWORD *)v6 + 26) = v11;
  *((_OWORD *)v6 + 25) = v10;
  *((_OWORD *)v6 + 24) = v8;
  v12 = *((int *)v6 + 101);
  if ((_DWORD)v12)
  {
    if ((v12 & 0x80000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = (char *)operator new(16 * v12);
    bzero(v13, 16 * v12);
    *((_QWORD *)v6 + 58) = v13;
    *((_QWORD *)v6 + 59) = &v13[16 * v12];
    *((_QWORD *)v6 + 60) = &v13[16 * v12];
    v14 = (char *)operator new(16 * v12);
    bzero(v14, 16 * v12);
    *((_QWORD *)v6 + 55) = v14;
    *((_QWORD *)v6 + 56) = &v14[16 * v12];
    *((_QWORD *)v6 + 57) = &v14[16 * v12];
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::hierarchical_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::hierarchical_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::hierarchical_inner_product_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_120@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB748;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D825D8;
  v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = a2[2];
  *(_OWORD *)(v6 + 348) = *(_OWORD *)((char *)a2 + 44);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DB8FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pool3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pool3d_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB748;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pool3d_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_119@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::loopkit_kernel_cpu,std::allocator<Espresso::loopkit_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::loopkit_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::allocate_shared[abi:ne180100]<Espresso::loopkit_kernel_cpu,std::allocator<Espresso::loopkit_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::loopkit_params_t const&,void>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  void **v17;
  void *v18;
  void **v19;
  _QWORD *v20;
  __int128 v21;
  void *v22[2];
  char v23;
  void *__p[2];
  char v25;

  v6 = (char *)operator new(0x230uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBBA20;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D839A8;
  *((_QWORD *)v6 + 52) = 0;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_DWORD *)v6 + 106) = 1;
  *((_QWORD *)v6 + 60) = 0;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *((_QWORD *)v6 + 65) = 0;
  *((_DWORD *)v6 + 132) = 1065353216;
  *((_QWORD *)v6 + 69) = 0;
  *(_OWORD *)(v6 + 536) = 0u;
  std::string::operator=((std::string *)(v6 + 304), (const std::string *)a3);
  if (v6 + 304 == (char *)a3)
  {
    std::string::operator=((std::string *)(v6 + 352), (const std::string *)(a3 + 48));
    std::string::operator=((std::string *)(v6 + 376), (const std::string *)(a3 + 72));
  }
  else
  {
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 328, *(char **)(a3 + 24), *(_QWORD *)(a3 + 32), (uint64_t)(*(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24)) >> 2);
    std::string::operator=((std::string *)(v6 + 352), (const std::string *)(a3 + 48));
    std::string::operator=((std::string *)(v6 + 376), (const std::string *)(a3 + 72));
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v6 + 400, *(char **)(a3 + 96), *(_QWORD *)(a3 + 104), (uint64_t)(*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 2);
  }
  *((_DWORD *)v6 + 106) = *(_DWORD *)(a3 + 120);
  Espresso::func_argv_name((uint64_t)v22, (const void **)v6 + 38, 0);
  if (v6[399] < 0)
  {
    if (*((_QWORD *)v6 + 48))
      goto LABEL_42;
  }
  else if (v6[399])
  {
    goto LABEL_42;
  }
  if (Espresso::loopkit_kernel_cpu::loopkit_kernel_cpu(std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path,Espresso::loopkit_params_t const&)::onceToken != -1)
    dispatch_once(&Espresso::loopkit_kernel_cpu::loopkit_kernel_cpu(std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path,Espresso::loopkit_params_t const&)::onceToken, &__block_literal_global_3_12489);
  if (!getenv("ESPRESSO_LK_CUSTOM_DYLIB"))
  {
    if (v6[375] < 0)
    {
      if (*((_QWORD *)v6 + 45))
        goto LABEL_22;
    }
    else if (v6[375])
    {
LABEL_22:
      if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1)
        dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_12479);
      Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)__p, Espresso::loopkit_dylib_cache::shared(void)::ret, (uint64_t)(v6 + 352));
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 432), (__int128 *)__p);
      v12 = (std::__shared_weak_count *)__p[1];
      if (!__p[1])
        goto LABEL_38;
      v13 = (unint64_t *)((char *)__p[1] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      goto LABEL_36;
    }
    if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1)
      dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_12479);
    v15 = Espresso::loopkit_dylib_cache::shared(void)::ret;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)&v21, v15, (uint64_t)__p);
    if (v25 < 0)
      operator delete(__p[0]);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 432), &v21);
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (!*((_QWORD *)&v21 + 1))
      goto LABEL_38;
    v16 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v14 = __ldaxr(v16);
    while (__stlxr(v14 - 1, v16));
LABEL_36:
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    goto LABEL_38;
  }
  if (Espresso::loopkit_dylib_cache::shared(void)::onceToken != -1)
    dispatch_once(&Espresso::loopkit_dylib_cache::shared(void)::onceToken, &__block_literal_global_12479);
  v7 = Espresso::loopkit_dylib_cache::shared(void)::ret;
  v8 = getenv("ESPRESSO_LK_CUSTOM_DYLIB");
  std::string::basic_string[abi:ne180100]<0>(__p, v8);
  Espresso::loopkit_dylib_cache::get_dylib((uint64_t **)&v21, v7, (uint64_t)__p);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v6 + 432), &v21);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v25 < 0)
    operator delete(__p[0]);
LABEL_38:
  if (v23 >= 0)
    v17 = v22;
  else
    v17 = (void **)v22[0];
  v18 = dlsym(**((void ***)v6 + 54), (const char *)v17);
  *((_QWORD *)v6 + 61) = v18;
  if (!v18)
  {
    v19 = v22;
    if (v23 < 0)
      v19 = (void **)v22[0];
    __p[0] = v19;
    v20 = v6 + 352;
    if (v6[375] < 0)
      v20 = (_QWORD *)*v20;
    *(_QWORD *)&v21 = v20;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*,char const*>("Fail to load function '%s' from dylib %s", __p, &v21);
  }
LABEL_42:
  if (v23 < 0)
    operator delete(v22[0]);
  *a1 = v6 + 24;
  a1[1] = v6;
}

void sub_1913DBDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  void **v23;
  uint64_t v24;
  void *v26;
  void *v27;

  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  v26 = *(void **)(v24 + 512);
  if (v26)
  {
    v22[22].__shared_weak_owners_ = (uint64_t)v26;
    operator delete(v26);
  }
  std::__hash_table<std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Espresso::lk_buffer_generator>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Espresso::lk_buffer_generator>>>::~__hash_table((uint64_t)&v22[20].__shared_weak_owners_);
  Espresso::generic_loopkit_kernel::~generic_loopkit_kernel(v23);
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v27);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::loopkit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBA20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::loopkit_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBA20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::loopkit_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_118@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v8 = (char *)operator new(0x208uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBD690;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 3) = &off_1E2D92F38;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  v8[336] = *((_BYTE *)a2 + 8);
  v10 = *a2;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 41) = v10;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913DBF58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::self_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::self_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::self_attention_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_117@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v8 = (char *)operator new(0x1E8uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBDF88;
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
  *((_QWORD *)v8 + 38) = v8 + 312;
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 3) = &off_1E2D99348;
  *(_OWORD *)(v8 + 344) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *((_DWORD *)v8 + 94) = 1065353216;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  *((_DWORD *)v8 + 104) = 1065353216;
  *((_DWORD *)v8 + 85) = a3;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 456) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  v10 = *a2;
  *((_DWORD *)v8 + 84) = *((_DWORD *)a2 + 2);
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 41) = v10;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913DC074(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::bahdanau_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDF88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::bahdanau_attention_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDF88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::bahdanau_attention_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_116@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDE00;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D98B88;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC14C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::local_correlation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::local_correlation_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::local_correlation_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_115@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x150uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBBE10;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D85580;
  *((_OWORD *)v6 + 19) = *a2;
  *(_OWORD *)(v6 + 313) = *(_OWORD *)((char *)a2 + 9);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC230(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::resample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBE10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::resample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBE10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::resample_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_114@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD268;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D91BA0;
  *((_DWORD *)v6 + 76) = *(_DWORD *)a2;
  *((_WORD *)v6 + 154) = *(_WORD *)(a2 + 4);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC310(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::grid_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD268;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::grid_sampling_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD268;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::grid_sampling_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_113@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCE40;
  v8 = *a2;
  v7 = a2[1];
  v9 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D8F658;
  v6[38] = v8;
  v6[39] = v7;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC3F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dropout_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCE40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dropout_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCE40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::dropout_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_112@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int v12;

  v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDBD0;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = *((_DWORD *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D95A20;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_DWORD *)v6 + 88) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC4F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::elementwise_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDBD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::elementwise_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDBD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::elementwise_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_111@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  v6 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE7D8;
  v15 = a2[6];
  v16 = a2[7];
  v17 = *((_DWORD *)a2 + 32);
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D9F7B8;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC624(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::inner_product_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE7D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::inner_product_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE7D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::inner_product_weights_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_110@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  int v17;

  v6 = (char *)operator new(0x1D0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE068;
  v15 = a2[6];
  v16 = a2[7];
  v17 = *((_DWORD *)a2 + 32);
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v9 = *a2;
  v10 = a2[1];
  Espresso::kernel_with_uniforms_<Espresso::inner_product_uniforms,Espresso::abstract_kernel_with_weights_grad_>::kernel_with_uniforms_((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D99F00;
  *((_DWORD *)v6 + 114) = v17;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC750(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::inner_product_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::inner_product_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_109@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDD90;
  v7 = *a2;
  LODWORD(a2) = *((_DWORD *)a2 + 2);
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D988D8;
  v6[38] = v7;
  *((_DWORD *)v6 + 78) = (_DWORD)a2;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC838(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDD90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDD90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::l2_normalize_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_108@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];

  v6 = (char *)operator new(0x198uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD508;
  v11 = a2[2];
  *(_OWORD *)v12 = a2[3];
  *(_OWORD *)&v12[12] = *(__int128 *)((char *)a2 + 60);
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D922F0;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = *(_OWORD *)v12;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 388) = *(_OWORD *)&v12[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DC950(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::batchnorm_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::batchnorm_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::batchnorm_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_107@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBBF98;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[38] = 0;
  v6[39] = 0;
  v6[40] = 0;
  v6[3] = &off_1E2D85DC8;
  *((_DWORD *)v6 + 82) = v7;
  *((_BYTE *)v6 + 332) = BYTE4(v7);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DCA38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::bias_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBF98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::bias_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBF98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::bias_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_106@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8290;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[39] = 0;
  v6[40] = 0;
  v6[38] = v6 + 39;
  v6[42] = 0;
  v6[43] = 0;
  v6[3] = &off_1E2D678B0;
  v6[44] = 0;
  v6[45] = 0;
  *((_DWORD *)v6 + 82) = v7;
  *((_BYTE *)v6 + 332) = BYTE4(v7);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DCB2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::bias_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::bias_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::bias_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_105@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x150uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBDEE0;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D98D70;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 316) = *(_OWORD *)&v9[12];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DCC28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::softmax_loss_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDEE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::softmax_loss_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDEE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::softmax_loss_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_104@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  v6 = (char *)operator new(0x170uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBCA18;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)v11 = a2[2];
  *(_OWORD *)&v11[16] = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D8CA40;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = *(_OWORD *)v11;
  *(_OWORD *)(v6 + 349) = *(_OWORD *)&v11[13];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DCD2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::concat_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCA18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::concat_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCA18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::concat_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_103@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::nonlinearity_grad_cpu,std::allocator<Espresso::nonlinearity_grad_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::nonlinearity_grad_cpu,std::allocator<Espresso::nonlinearity_grad_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 result;
  __n128 v9;
  __n128 v10;
  unsigned __int32 v11;

  v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DBC778;
  v9 = *a3;
  v10 = a3[1];
  v11 = a3[2].n128_u32[0];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D8C088;
  v6[21].n128_u64[1] = 0;
  v6[22].n128_u64[0] = 0;
  result = v9;
  v6[19] = v9;
  v6[20] = v10;
  v6[21].n128_u32[0] = v11;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913DCE54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::nonlinearity_grad_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC778;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::nonlinearity_grad_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC778;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::nonlinearity_grad_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_102@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::nonlinearity_grad_cpu,std::allocator<Espresso::nonlinearity_grad_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_101@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = operator new(0x1A0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC270;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D877D0;
  *((_OWORD *)v6 + 23) = v13;
  *((_OWORD *)v6 + 24) = v14;
  *((_OWORD *)v6 + 25) = v15;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  *((_OWORD *)v6 + 21) = v11;
  *((_OWORD *)v6 + 22) = v12;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DCFA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pool_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pool_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pool_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_100@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE688;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 3) = &off_1E2D9EC28;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD0F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::convolution_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::convolution_weights_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::convolution_weights_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_99@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x1F0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBDB28;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = 0;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 3) = &off_1E2D95238;
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD250(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDB28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::convolution_grad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDB28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::convolution_grad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_98@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = (char *)operator new(0x1A0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBE3B0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D9C700;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 392) = 0u;
  v8 = *a2;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 41) = v8;
  *((_DWORD *)v6 + 84) = *((_DWORD *)a2 + 2);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD34C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::sparse_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE3B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::sparse_inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE3B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::sparse_inner_product_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::dev_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dev_op_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_96@<Q0>(_QWORD *a1@<X1>, _WORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB588;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D81CF8;
  *((_WORD *)v6 + 152) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD464(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cumsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cumsum_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cumsum_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_95@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBBA90;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D83C58;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD53C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::one_hot_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBA90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::one_hot_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBA90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::one_hot_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_94@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBE1B8;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D9B228;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1913DD608(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::precompiled_segment_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE1B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::precompiled_segment_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE1B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::precompiled_segment_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_93@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x150uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBBA58;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D83B00;
  v4[40] = 0;
  v4[41] = 0;
  v4[39] = 0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1913DD6DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::nonzero_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBA58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::nonzero_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBA58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::nonzero_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_92@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC7B0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D8C210;
  v6[41] = 0;
  v6[42] = 0;
  v6[40] = 0;
  v6[38] = *a2;
  *(_QWORD *)((char *)v6 + 310) = *(_QWORD *)((char *)a2 + 6);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD7C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::scatter_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC7B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::scatter_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC7B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::scatter_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_91@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC158;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D86598;
  v6[41] = 0;
  v6[42] = 0;
  v6[40] = 0;
  v6[38] = *a2;
  *(_QWORD *)((char *)v6 + 310) = *(_QWORD *)((char *)a2 + 6);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD8B4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::gather_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::gather_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::gather_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_90@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x1F8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE5E0;
  result.n128_u64[0] = Espresso::non_maximum_suppression_kernel_cpu::non_maximum_suppression_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DD97C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::non_maximum_suppression_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::non_maximum_suppression_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::non_maximum_suppression_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_89@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8258;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D67728;
  *((_OWORD *)v6 + 19) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DDA54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::adam_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::adam_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::adam_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_88@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::sgd_kernel_cpu,std::allocator<Espresso::sgd_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::sgd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_87@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD1C0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D909F8;
  v6[38] = *(_QWORD *)a2;
  *((_BYTE *)v6 + 312) = *(_BYTE *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DDB68(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cross_entropy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD1C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cross_entropy_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD1C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cross_entropy_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_86@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCC80;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D8EF60;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DDC40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::reverse_seq_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCC80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::reverse_seq_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCC80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::reverse_seq_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_85@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD9D8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D94B50;
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DDD20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::sliding_windows_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD9D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::sliding_windows_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD9D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::sliding_windows_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_83@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;

  v6 = (char *)operator new(0x368uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBBE48;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D856D8;
  *(_OWORD *)(v6 + 824) = 0u;
  *(_OWORD *)(v6 + 840) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  memcpy(v6 + 304, a2, 0x208uLL);
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DDE20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::split_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBE48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::split_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBE48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::split_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_82@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x180uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBBE80;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D85830;
  *((_QWORD *)v6 + 47) = 0;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = 0u;
  *(_OWORD *)(v6 + 344) = 0u;
  *(_OWORD *)(v6 + 360) = 0u;
  *((_DWORD *)v6 + 76) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DDF0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::stack_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBE80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::stack_nd_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBE80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::stack_nd_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_81@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;

  v6 = (char *)operator new(0x228uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD230;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D90DD0;
  *(_OWORD *)(v6 + 408) = 0u;
  *(_OWORD *)(v6 + 424) = 0u;
  *(_OWORD *)(v6 + 440) = 0u;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 488) = 0u;
  *(_OWORD *)(v6 + 504) = 0u;
  *(_OWORD *)(v6 + 520) = 0u;
  *(_OWORD *)(v6 + 536) = 0u;
  v8 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v6 + 23) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v6 + 24) = v8;
  *((_DWORD *)v6 + 100) = *(_DWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v6 + 22) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE018(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::general_slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD230;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::general_slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD230;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::general_slice_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_80@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::transplant_kernel_cpu,std::allocator<Espresso::transplant_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transplant_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_79@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x1F8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB7F0;
  result.n128_u64[0] = Espresso::builtin_kernel_cpu::builtin_kernel_cpu((uint64_t)(v6 + 3), a1, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE114(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::builtin_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::builtin_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::builtin_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_78@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC740;
  result.n128_u64[0] = Espresso::gumbel_max_kernel_cpu::gumbel_max_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE1DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::gumbel_max_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::gumbel_max_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::gumbel_max_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_77@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::generic_phi_virtual_kernel,std::allocator<Espresso::generic_phi_virtual_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::phi_virtual_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_76@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::instancenorm_1d_kernel_cpu,std::allocator<Espresso::instancenorm_1d_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::instancenorm_1d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_75@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCBD8;
  result.n128_u64[0] = Espresso::multinomial_kernel_cpu::multinomial_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE30C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::multinomial_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCBD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::multinomial_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCBD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::multinomial_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_74@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  _BYTE v9[28];

  v6 = (char *)operator new(0x150uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBCD98;
  *(_OWORD *)v9 = *a2;
  *(_OWORD *)&v9[12] = *(_OWORD *)((char *)a2 + 12);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D8F248;
  *((_OWORD *)v6 + 19) = *(_OWORD *)v9;
  *(_OWORD *)(v6 + 313) = *(_OWORD *)&v9[9];
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE408(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::array_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCD98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::array_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCD98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::array_gather_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_71@<Q0>(_QWORD *a1@<X1>, const void *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;

  v6 = operator new(0x240uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDA48;
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D94E00;
  memcpy(v6 + 38, a2, 0x109uLL);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE4F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::tensor_zero_pad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDA48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::tensor_zero_pad_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDA48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::tensor_zero_pad_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_70@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB8370;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D67E50;
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_BYTE *)v6 + 336) = *(_BYTE *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE5D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::fill_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::fill_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8370;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::fill_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_69@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::matrix_band_part_kernel_cpu,std::allocator<Espresso::matrix_band_part_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::matrix_band_part_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_68@<Q0>(_QWORD *a1@<X1>, unsigned __int16 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  int v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCDD0;
  v7 = *((unsigned __int8 *)a2 + 2);
  LODWORD(a2) = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D8F3A0;
  *((_WORD *)v6 + 152) = (_WORD)a2;
  *((_BYTE *)v6 + 306) = (a2 | (v7 << 16)) >> 16;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE6FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::batch_matmul_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCDD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::batch_matmul_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCDD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::batch_matmul_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_67@<D0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::range_kernel_cpu,std::allocator<Espresso::range_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::range_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_66@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x170uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCBA0;
  result.n128_u64[0] = Espresso::load_random_kernel_cpu::load_random_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE7F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::load_random_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::load_random_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::load_random_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_65@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBBBA8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D83FC8;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *(_QWORD *)((char *)v6 + 319) = *(_QWORD *)(a2 + 15);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DE8DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::scatter_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBBA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::scatter_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBBA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::scatter_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_63@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 result;

  v4 = operator new(0x160uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBB860;
  v5 = Espresso::generic_cf_else_kernel::generic_cf_else_kernel(v4 + 3, a1);
  v4[3] = &off_1E2D82C90;
  v4[39] = &unk_1E2D82DE8;
  result.n128_u64[0] = (unint64_t)v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1913DE9B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_else_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_else_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB860;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_else_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_62@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>((uint64_t *)&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

double std::allocate_shared[abi:ne180100]<Espresso::cf_end_kernel_cpu,std::allocator<Espresso::cf_end_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_end_params_t const&,void>(uint64_t *a1, _QWORD *a2)
{
  char *v4;
  uint64_t v5;
  double result;

  v4 = (char *)operator new(0x160uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DBB4A8;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 24), a2);
  v4[305] = 0;
  *((_QWORD *)v4 + 43) = 0;
  result = 0.0;
  *((_QWORD *)v4 + 3) = &off_1E2D816F0;
  *(_OWORD *)(v4 + 312) = 0u;
  *(_OWORD *)(v4 + 328) = 0u;
  *a1 = v5;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1913DEABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_end_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB4A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_end_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB4A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_end_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_61@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;

  v8 = operator new(0x1A0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBB4E0;
  v9 = *a2;
  v10 = Espresso::generic_cf_for_kernel::generic_cf_for_kernel((uint64_t)(v8 + 3), a1);
  v8[3] = &off_1E2D81848;
  v8[48] = 0;
  v8[49] = 0;
  *((_DWORD *)v8 + 100) = a3;
  *(_QWORD *)((char *)v8 + 404) = 0;
  v8[38] = v9;
  v8[39] = &unk_1E2D819A0;
  result.n128_u64[0] = v10;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913DEBB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_for_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB4E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_for_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB4E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_for_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_60@<D0>(_QWORD *a1@<X1>, int *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::cf_loop_kernel_cpu,std::allocator<Espresso::cf_loop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_loop_params_t const&,void>(&v5, a1, *a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<Espresso::cf_loop_kernel_cpu,std::allocator<Espresso::cf_loop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_loop_params_t const&,void>(_QWORD *a1, _QWORD *a2, int a3)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB8D0;
  result = Espresso::generic_cf_loop_kernel::generic_cf_loop_kernel(v6 + 3, a2);
  v6[3] = &off_1E2D82F80;
  v6[39] = &unk_1E2D830D8;
  *((_DWORD *)v6 + 76) = a3;
  *a1 = result;
  a1[1] = v6;
  return result;
}

void sub_1913DECC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_loop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB8D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_loop_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB8D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_loop_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_59@<D0>(_QWORD *a1@<X1>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  std::allocate_shared[abi:ne180100]<Espresso::cf_if_kernel_cpu,std::allocator<Espresso::cf_if_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_if_params_t const&,void>(&v4, a1);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<Espresso::cf_if_kernel_cpu,std::allocator<Espresso::cf_if_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cf_if_params_t const&,void>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x160uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DB9AA0;
  result = Espresso::generic_cf_if_kernel::generic_cf_if_kernel(v4 + 3, a2);
  v4[3] = &off_1E2D73070;
  v4[39] = &unk_1E2D731C8;
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_1913DEDC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_if_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9AA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_if_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9AA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_if_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_58@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::store_global_kernel_cpu,std::allocator<Espresso::store_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::store_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_57@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::load_global_kernel_cpu,std::allocator<Espresso::load_global_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_global_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_56@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::dynamic_dequantize_kernel_cpu,std::allocator<Espresso::dynamic_dequantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_dequantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::dynamic_dequantize_kernel_cpu,std::allocator<Espresso::dynamic_dequantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_dequantize_params_t const&,void>(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;

  v6 = operator new(0x190uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDFC0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  v6[3] = &off_1E2D99508;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a3;
  *((_OWORD *)v6 + 20) = v9;
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913DEF38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dynamic_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDFC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dynamic_dequantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDFC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::dynamic_dequantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_55@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::dynamic_quantize_kernel_cpu,std::allocator<Espresso::dynamic_quantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_quantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t std::allocate_shared[abi:ne180100]<Espresso::dynamic_quantize_kernel_cpu,std::allocator<Espresso::dynamic_quantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_quantize_params_t const&,void>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBDB98;
  result = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a2);
  v6[3] = &off_1E2D958C0;
  v6[38] = *a3;
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913DF03C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dynamic_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDB98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dynamic_quantize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDB98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::dynamic_quantize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_54@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9A30;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D72DB8;
  *((_DWORD *)v6 + 76) = v7;
  *((_BYTE *)v6 + 308) = BYTE4(v7);
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF11C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::alloc_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::alloc_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::alloc_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::general_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::general_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_52@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB668;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D82100;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF23C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB668;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB668;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::gather_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_51@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB84F8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D68328;
  v6[38] = *a2;
  *(_QWORD *)((char *)v6 + 311) = *(_QWORD *)((char *)a2 + 7);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF320(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::topk_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB84F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::topk_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB84F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::topk_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_50@<Q0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC190;
  v7 = *a2;
  v8 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D86F28;
  v6[38] = v7;
  result.n128_u64[0] = v8;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF3F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::get_shape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::get_shape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC190;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::get_shape_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_49@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBC078;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D86360;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1913DF4C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_return_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_return_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_return_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;
  std::string __p;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB828;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  Espresso::cf_call_kernel_cpu::cf_call_kernel_cpu(v6 + 3, a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count *v14;
  void *v16;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_call_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_call_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_call_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  __n128 result;

  v6 = operator new(0x160uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB898;
  LODWORD(a2) = *a2;
  v7 = Espresso::generic_cf_jump_kernel::generic_cf_jump_kernel(v6 + 3, a1);
  v6[3] = &off_1E2D82E08;
  v6[39] = &unk_1E2D82F60;
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  result.n128_u64[0] = (unint64_t)v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF6CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cf_jump_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_jump_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_jump_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  __n128 result;
  std::string v8;
  std::string __p;
  int v10;

  v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC040;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  if (*(char *)(a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    __p = *(std::string *)(a2 + 24);
  v10 = *(_DWORD *)(a2 + 48);
  Espresso::cf_branch_kernel_cpu::cf_branch_kernel_cpu((uint64_t)(v6 + 3), a1, (uint64_t)&v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  result.n128_u64[0] = (unint64_t)(v6 + 3);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void *v22;

  if (a14 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v22);
  _Unwind_Resume(a1);
}

void Espresso::cf_branch_params_t::~cf_branch_params_t(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__shared_ptr_emplace<Espresso::cf_branch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC040;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cf_branch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC040;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cf_branch_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE1F0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D9B380;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  v6[40] = *(_QWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DF97C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::spatial_transformer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE1F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::spatial_transformer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE1F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::spatial_transformer_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;

  v6 = (char *)operator new(0x188uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBDCE8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 43) = 0;
  *((_QWORD *)v6 + 44) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D96698;
  *(_OWORD *)(v6 + 360) = 0u;
  *(_OWORD *)(v6 + 376) = 0u;
  *(_OWORD *)(v6 + 328) = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DFA70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::quantized_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDCE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::quantized_gather_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDCE8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::quantized_gather_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::dynamic_dequantize_kernel_cpu,std::allocator<Espresso::dynamic_dequantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_dequantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::dynamic_quantize_kernel_cpu,std::allocator<Espresso::dynamic_quantize_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dynamic_quantize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __n128 result;

  v6 = (char *)operator new(0x180uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD7A8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D933E0;
  v8 = a2[3];
  *((_OWORD *)v6 + 21) = a2[2];
  *((_OWORD *)v6 + 22) = v8;
  *(_OWORD *)(v6 + 365) = *(_OWORD *)((char *)a2 + 61);
  v9 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v9;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DFBC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::crop_and_resize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD7A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::crop_and_resize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD7A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::crop_and_resize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x160uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD930;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D94740;
  v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *(_OWORD *)(v6 + 329) = *(_OWORD *)((char *)a2 + 25);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DFCA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::patch_extractor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::patch_extractor_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD930;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::patch_extractor_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<Q0>(uint64_t *a1@<X1>, const std::string *a2@<X2>, unsigned int a3@<W3>, __n128 *a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  __n128 result;
  unsigned int v11;

  v8 = operator new(0x170uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E2DBB6A0;
  v11 = a3;
  v9 = Espresso::generic_lambda_kernel::generic_lambda_kernel((uint64_t)(v8 + 3), a1, &v11, a2);
  v8[3] = &off_1E2D82278;
  result.n128_u64[0] = v9;
  result.n128_u64[1] = (unint64_t)v8;
  *a4 = result;
  return result;
}

void sub_1913DFD98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::lambda_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB6A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::lambda_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB6A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::lambda_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBD188;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D908A0;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1913DFE64(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::compute_stats_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD188;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::compute_stats_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD188;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::compute_stats_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB82C8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D67A48;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913DFF3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::cast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB82C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::cast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB82C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::cast_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC008;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D860B0;
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_BYTE *)v6 + 336) = *(_BYTE *)(a2 + 32);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E001C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::broadcast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC008;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::broadcast_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC008;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::broadcast_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9C60;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D735A8;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  v6[40] = *(_QWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E00FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9C60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::slice_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9C60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::slice_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD700;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D93228;
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E01DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::space_to_depth_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::space_to_depth_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::space_to_depth_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD6C8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D930D0;
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *(_QWORD *)((char *)v6 + 333) = *(_QWORD *)(a2 + 29);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E02C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::space_to_batch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD6C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::space_to_batch_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD6C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::space_to_batch_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB9B0;
  result.n128_u64[0] = Espresso::dropout_kernel_cpu::dropout_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E0388(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB9B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB9B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::dropout_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x150uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBE378;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D9C5A8;
  v6[40] = 0;
  v6[41] = 0;
  v6[38] = *a2;
  v6[39] = 0;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E0464(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::prediction_smoothing_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE378;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::prediction_smoothing_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE378;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::prediction_smoothing_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::crop_kernel_cpu,std::allocator<Espresso::crop_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD9A0;
  LODWORD(a2) = *a2;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D949F8;
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E0570(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::sequence_repeat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::sequence_repeat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::sequence_repeat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<Q0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD968;
  LODWORD(a2) = *a2;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D948A0;
  *((_DWORD *)v6 + 76) = (_DWORD)a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E0648(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::sequence_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::sequence_concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD968;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::sequence_concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x138uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBDD20;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  v4[3] = &off_1E2D96848;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_1913E0714(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::sequence_reverse_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::sequence_reverse_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDD20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::sequence_reverse_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x140uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBCEB0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D90250;
  v6[38] = *(_QWORD *)a2;
  *((_DWORD *)v6 + 78) = *(_DWORD *)(a2 + 8);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E07F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCEB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::l2_normalize_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCEB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::l2_normalize_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<Q0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x138uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBB9E8;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D833D8;
  v6[38] = *a2;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E08CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::flatten_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB9E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::flatten_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB9E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::flatten_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x148uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB84C0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D681D0;
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_DWORD *)v6 + 80) = *(_DWORD *)(a2 + 16);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E09AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::tile_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB84C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::tile_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB84C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::tile_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<Q0>(_QWORD *a1@<X1>, _OWORD *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = (char *)operator new(0x160uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBD038;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2D90448;
  v8 = a2[1];
  *((_OWORD *)v6 + 19) = *a2;
  *((_OWORD *)v6 + 20) = v8;
  *(_OWORD *)(v6 + 333) = *(_OWORD *)((char *)a2 + 29);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E0A90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::reshape_like_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD038;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::reshape_like_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD038;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::reshape_like_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::reshape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBB70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::reshape_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBB70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::reshape_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::transpose_kernel_cpu,std::allocator<Espresso::transpose_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::general_padding_kernel_cpu,std::allocator<Espresso::general_padding_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::rnn_arch_cpu,std::allocator<Espresso::rnn_arch_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::context_transfer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDAF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::context_transfer_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBDAF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::context_transfer_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::reduce_kernel_cpu,std::allocator<Espresso::reduce_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::reduce_kernel_cpu,std::allocator<Espresso::reduce_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  _BYTE v10[28];

  v6 = (char *)operator new(0x160uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DBB780;
  v9 = *a3;
  *(_OWORD *)v10 = a3[1];
  *(_OWORD *)&v10[12] = *(__int128 *)((char *)a3 + 28);
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a2);
  *((_QWORD *)v6 + 3) = &off_1E2D82730;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = *(_OWORD *)v10;
  result = *(__n128 *)&v10[9];
  *(_OWORD *)(v6 + 329) = *(_OWORD *)&v10[9];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913E0CF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::reduce_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB780;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::reduce_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB780;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::reduce_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  __n128 result;
  std::runtime_error *exception;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v6 = (char *)operator new(0x380uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DB8140;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_OWORD *)v6 + 52) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  *((_OWORD *)v6 + 26) = 0u;
  *((_OWORD *)v6 + 27) = 0u;
  *((_OWORD *)v6 + 28) = 0u;
  *((_OWORD *)v6 + 29) = 0u;
  *((_OWORD *)v6 + 30) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 39) = 0u;
  *((_OWORD *)v6 + 40) = 0u;
  *((_OWORD *)v6 + 41) = 0u;
  *((_OWORD *)v6 + 42) = 0u;
  *((_OWORD *)v6 + 43) = 0u;
  *((_OWORD *)v6 + 44) = 0u;
  *((_OWORD *)v6 + 45) = 0u;
  *((_OWORD *)v6 + 46) = 0u;
  *((_OWORD *)v6 + 47) = 0u;
  *((_OWORD *)v6 + 48) = 0u;
  *((_OWORD *)v6 + 49) = 0u;
  *((_OWORD *)v6 + 50) = 0u;
  *(_OWORD *)(v6 + 856) = 0u;
  *((_OWORD *)v6 + 55) = 0u;
  *(_OWORD *)(v6 + 312) = 0u;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_DWORD *)v6 + 98) = 0;
  *((_QWORD *)v6 + 102) = 0;
  *((_QWORD *)v6 + 103) = v6 + 832;
  *((_QWORD *)v6 + 106) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2D67278;
  *((_QWORD *)v6 + 109) = v6 + 880;
  *(_OWORD *)(v6 + 376) = v12;
  if (*((_DWORD *)v6 + 82) == 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "GRU Not implemented");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E0EA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  Espresso::generic_rnn_kernel *v2;
  _QWORD **v3;
  void *v5;

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v3);
  Espresso::generic_rnn_kernel::~generic_rnn_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::rnn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8140;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::rnn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8140;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::rnn_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::batchnorm_kernel_cpu,std::allocator<Espresso::batchnorm_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::activation_kernel_cpu,std::allocator<Espresso::activation_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;

  v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB9A68;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 3), a1);
  v6[3] = &off_1E2D72F10;
  v8 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v6 + 19) = *(_OWORD *)a2;
  *((_OWORD *)v6 + 20) = v8;
  *((_OWORD *)v6 + 21) = *(_OWORD *)(a2 + 32);
  v6[44] = *(_QWORD *)(a2 + 48);
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E1020(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::axpby_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::axpby_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB9A68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::axpby_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

double ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::deconvolution_kernel_cpu,std::allocator<Espresso::deconvolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::split_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::split_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8(_QWORD *a1@<X1>, __n128 *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  __int128 v5;

  if (a3 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::CPUFP16Engine::elementwise_kernel_cpu,std::allocator<Espresso::CPUFP16Engine::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::elementwise_kernel_cpu,std::allocator<Espresso::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
LABEL_5:
    *(_OWORD *)a4 = v5;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::elementwise_kernel_cpu,std::allocator<Espresso::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 result;

  v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DBCAC0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D8D208;
  v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913E11D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 std::allocate_shared[abi:ne180100]<Espresso::CPUFP16Engine::elementwise_kernel_cpu,std::allocator<Espresso::CPUFP16Engine::elementwise_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>(uint64_t *a1, _QWORD *a2, __n128 *a3)
{
  __n128 *v6;
  uint64_t v7;
  __n128 v8;
  __n128 result;

  v6 = (__n128 *)operator new(0x168uLL);
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  v6->n128_u64[0] = (unint64_t)&off_1E2DB6FC0;
  v7 = Espresso::base_kernel::base_kernel((uint64_t)&v6[1].n128_i64[1], a2);
  v6[1].n128_u64[1] = (unint64_t)&off_1E2D60CC8;
  v8 = a3[1];
  v6[19] = *a3;
  v6[20] = v8;
  result = a3[2];
  v6[21] = result;
  v6[22].n128_u32[0] = a3[3].n128_u32[0];
  *a1 = v7;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1913E1264(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::elementwise_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::elementwise_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7(_QWORD *a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (a3 == 1)
  {
    v8 = operator new(0x178uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &off_1E2DB6F50;
    v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 3), a1);
    v8[3] = &off_1E2D608F0;
    v10 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v8 + 21) = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v8 + 22) = v10;
    v8[46] = *(_QWORD *)(a2 + 64);
    v11 = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v8 + 19) = *(_OWORD *)a2;
    *((_OWORD *)v8 + 20) = v11;
    *(_QWORD *)&v7 = v9;
    *((_QWORD *)&v7 + 1) = v8;
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::upsample_kernel_cpu,std::allocator<Espresso::upsample_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v12, a1, (__n128 *)a2);
    v7 = v12;
LABEL_5:
    *(_OWORD *)a4 = v7;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void sub_1913E13BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::upsample_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::upsample_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6EE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6EE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void std::__shared_ptr_emplace<Espresso::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::concat_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::concat_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x3D0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBD2A0;
  result.n128_u64[0] = Espresso::inner_product_kernel_cpu::inner_product_kernel_cpu((uint64_t)(v6 + 3), a1, v7, a2);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_1913E151C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD2A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::inner_product_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD2A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::inner_product_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void (**v10)(Espresso::CPUFP16Engine::softmax_kernel_cpu *__hidden);
  __int128 v11;

  if (a3 == 1)
  {
    v7 = operator new(0x168uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E2DB6F18;
    v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    v9 = (char *)(v7 + 38);
    *((_DWORD *)v7 + 83) = 0;
    v10 = &off_1E2D60798;
    goto LABEL_5;
  }
  if (!a3)
  {
    v7 = operator new(0x168uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E2DBBC18;
    v8 = Espresso::base_kernel::base_kernel((uint64_t)(v7 + 3), a1);
    v9 = (char *)(v7 + 38);
    *((_DWORD *)v7 + 83) = 0;
    v10 = &off_1E2D84120;
LABEL_5:
    v7[3] = v10;
    v7[43] = 0;
    v7[44] = 0;
    v7[42] = 0;
    *((_OWORD *)v7 + 19) = *a2;
    *(_OWORD *)(v9 + 12) = *(_OWORD *)((char *)a2 + 12);
    *(_QWORD *)&v11 = v8;
    *((_QWORD *)&v11 + 1) = v7;
    *(_OWORD *)a4 = v11;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void sub_1913E1658(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6F18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6F18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::softmax_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(a1 + 24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 336);
  Espresso::base_kernel::~base_kernel(v1);
}

void std::__shared_ptr_emplace<Espresso::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBC18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::softmax_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBC18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::softmax_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3(_QWORD *a1@<X1>, _OWORD *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  __int128 v7;
  char *v8;
  uint64_t v9;
  __int128 v10;

  if (a3 == 1)
  {
    v8 = (char *)operator new(0x150uLL);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = &off_1E2DB6E38;
    v9 = Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a1);
    *((_QWORD *)v8 + 3) = &off_1E2D601F8;
    *((_OWORD *)v8 + 19) = *a2;
    *(_OWORD *)(v8 + 316) = *(_OWORD *)((char *)a2 + 12);
    *(_QWORD *)&v7 = v9;
    *((_QWORD *)&v7 + 1) = v8;
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::lrn_kernel_cpu,std::allocator<Espresso::lrn_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v10, a1, (uint64_t)a2);
    v7 = v10;
LABEL_5:
    *(_OWORD *)a4 = v7;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void sub_1913E17E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::lrn_kernel_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CPUFP16Engine::lrn_kernel_cpu>::__on_zero_shared(uint64_t a1)
{
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)(a1 + 24));
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2(uint64_t *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v5[3];
  int v6;

  v6 = a3;
  if (a3 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::pool_kernel,std::allocator<Espresso::BNNSEngine::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(v5, a1, &v6, a2);
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::pool_kernel_cpu,std::allocator<Espresso::pool_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(v5, a1, (uint64_t)a2);
LABEL_5:
    *(_OWORD *)a4 = *(_OWORD *)v5;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::pool_kernel,std::allocator<Espresso::BNNSEngine::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>(_QWORD *a1, uint64_t *a2, int *a3, __int128 *a4)
{
  char *v8;
  int v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v8 = (char *)operator new(0x208uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB63F0;
  v25 = a4[4];
  v26 = a4[5];
  v27 = a4[6];
  v21 = *a4;
  v22 = a4[1];
  v23 = a4[2];
  v24 = a4[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a2);
  *((_QWORD *)v8 + 3) = off_1E2D5D198;
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  *(_OWORD *)(v8 + 328) = xmmword_191A934F0;
  *(_OWORD *)(v8 + 344) = xmmword_191A93320;
  *((_DWORD *)v8 + 90) = 2;
  *((_WORD *)v8 + 182) = 1;
  *(_OWORD *)(v8 + 366) = 0u;
  *(_OWORD *)(v8 + 382) = 0u;
  *((_QWORD *)v8 + 50) = 0;
  *((_QWORD *)v8 + 51) = 0;
  *((_QWORD *)v8 + 52) = 0x100000001;
  *(_OWORD *)(v8 + 424) = 0u;
  *(_OWORD *)(v8 + 440) = 0u;
  *(_OWORD *)(v8 + 489) = 0u;
  *((_OWORD *)v8 + 30) = 0u;
  *((_OWORD *)v8 + 29) = 0u;
  v9 = *a3;
  *((_DWORD *)v8 + 114) = *a3;
  v10 = *a2;
  if (*a2 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v10 == &off_1E2D5E820)
  {
    v8[504] = *(_BYTE *)(v10 + 160);
    *((_QWORD *)v8 + 62) = *(_QWORD *)(v10 + 168);
  }
  *((_QWORD *)v8 + 3) = &off_1E2D5CD50;
  *(_QWORD *)(v8 + 508) = 0;
  *(_OWORD *)(v8 + 392) = v25;
  *(_OWORD *)(v8 + 408) = v26;
  *(_OWORD *)(v8 + 424) = v27;
  *(_OWORD *)(v8 + 328) = v21;
  *(_OWORD *)(v8 + 344) = v22;
  *(_OWORD *)(v8 + 360) = v23;
  *(_OWORD *)(v8 + 376) = v24;
  if (v9 == 1)
  {
    v11 = (char *)operator new(0x1C8uLL);
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *(_QWORD *)v11 = &off_1E2DB6E70;
    v12 = Espresso::base_kernel::base_kernel((uint64_t)(v11 + 24), a2);
    *((_QWORD *)v11 + 39) = 0;
    *((_QWORD *)v11 + 40) = 0;
    *((_QWORD *)v11 + 38) = v11 + 312;
    *((_QWORD *)v11 + 55) = 0;
    *((_QWORD *)v11 + 56) = 0;
    *((_QWORD *)v11 + 3) = &off_1E2D60350;
    *(_OWORD *)(v11 + 392) = v25;
    *(_OWORD *)(v11 + 408) = v26;
    *(_OWORD *)(v11 + 424) = v27;
    *(_OWORD *)(v11 + 328) = v21;
    *(_OWORD *)(v11 + 344) = v22;
    *(_OWORD *)(v11 + 360) = v23;
    *(_OWORD *)(v11 + 376) = v24;
    *(_QWORD *)&v13 = v12;
    *((_QWORD *)&v13 + 1) = v11;
    v14 = (std::__shared_weak_count *)*((_QWORD *)v8 + 60);
    *(_OWORD *)(v8 + 472) = v13;
    if (!v14)
      goto LABEL_14;
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
  }
  else
  {
    v17 = (char *)operator new(0x1C8uLL);
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *(_QWORD *)v17 = &off_1E2DB8450;
    v18 = Espresso::base_kernel::base_kernel((uint64_t)(v17 + 24), a2);
    *((_QWORD *)v17 + 39) = 0;
    *((_QWORD *)v17 + 40) = 0;
    *((_QWORD *)v17 + 38) = v17 + 312;
    *((_QWORD *)v17 + 55) = 0;
    *((_QWORD *)v17 + 56) = 0;
    *((_QWORD *)v17 + 3) = &off_1E2D68038;
    *(_OWORD *)(v17 + 392) = v25;
    *(_OWORD *)(v17 + 408) = v26;
    *(_OWORD *)(v17 + 424) = v27;
    *(_OWORD *)(v17 + 328) = v21;
    *(_OWORD *)(v17 + 344) = v22;
    *(_OWORD *)(v17 + 360) = v23;
    *(_OWORD *)(v17 + 376) = v24;
    *(_QWORD *)&v19 = v18;
    *((_QWORD *)&v19 + 1) = v17;
    v14 = (std::__shared_weak_count *)*((_QWORD *)v8 + 60);
    *(_OWORD *)(v8 + 472) = v19;
    if (!v14)
      goto LABEL_14;
    v20 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v20);
    while (__stlxr(v16 - 1, v20));
  }
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_14:
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_1913E1B58(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  std::__shared_weak_count *v3;
  void *v5;
  void *v6;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v5);
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_pool_kernel>::~base_bnns_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB63F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB63F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::BNNSEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___ZN8Espresso10engine_cpu16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke(uint64_t *a1@<X1>, __int128 *a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v5[3];
  int v6;

  v6 = a3;
  if (a3 == 1)
  {
    std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::convolution_kernel,std::allocator<Espresso::BNNSEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(v5, a1, &v6, (uint64_t)a2);
    goto LABEL_5;
  }
  if (!a3)
  {
    std::allocate_shared[abi:ne180100]<Espresso::convolution_kernel_cpu,std::allocator<Espresso::convolution_kernel_cpu>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(v5, a1, a2);
LABEL_5:
    *(_OWORD *)a4 = *(_OWORD *)v5;
    return;
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
}

void std::allocate_shared[abi:ne180100]<Espresso::BNNSEngine::convolution_kernel,std::allocator<Espresso::BNNSEngine::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(_QWORD *a1, uint64_t *a2, int *a3, uint64_t a4)
{
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[24];
  __int128 v45;

  v8 = (char *)operator new(0x308uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DB64D0;
  v9 = *(_OWORD *)(a4 + 144);
  v43 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)v44 = v9;
  *(_QWORD *)&v44[16] = *(_QWORD *)(a4 + 160);
  v10 = *(_OWORD *)(a4 + 80);
  v39 = *(_OWORD *)(a4 + 64);
  v40 = v10;
  v11 = *(_OWORD *)(a4 + 112);
  v41 = *(_OWORD *)(a4 + 96);
  v42 = v11;
  v12 = *(_OWORD *)(a4 + 16);
  v35 = *(_OWORD *)a4;
  v36 = v12;
  v13 = *(_OWORD *)(a4 + 48);
  v37 = *(_OWORD *)(a4 + 32);
  v38 = v13;
  Espresso::base_kernel::base_kernel((uint64_t)(v8 + 24), a2);
  *((_QWORD *)v8 + 39) = 0;
  *((_QWORD *)v8 + 40) = 0;
  *((_QWORD *)v8 + 38) = v8 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v8 + 328));
  *((_QWORD *)v8 + 72) = 0;
  *((_OWORD *)v8 + 34) = 0u;
  *((_OWORD *)v8 + 35) = 0u;
  *((_OWORD *)v8 + 32) = 0u;
  *((_OWORD *)v8 + 33) = 0u;
  *((_OWORD *)v8 + 31) = 0u;
  *((_QWORD *)v8 + 3) = off_1E2D5D330;
  *((_OWORD *)v8 + 37) = 0u;
  *((_OWORD *)v8 + 38) = 0u;
  *(_OWORD *)(v8 + 617) = 0u;
  v15 = *a3;
  *((_DWORD *)v8 + 146) = *a3;
  v16 = *a2;
  if (*a2 && *(uint64_t (***)(Espresso::context_cpu *__hidden))v16 == &off_1E2D5E820)
  {
    v8[632] = *(_BYTE *)(v16 + 160);
    *((_QWORD *)v8 + 78) = *(_QWORD *)(v16 + 168);
  }
  *((_QWORD *)v8 + 3) = &off_1E2D5D988;
  *((_OWORD *)v8 + 40) = 0uLL;
  *((_OWORD *)v8 + 41) = 0uLL;
  *((_OWORD *)v8 + 42) = 0uLL;
  *((_OWORD *)v8 + 43) = 0uLL;
  *((_OWORD *)v8 + 44) = 0uLL;
  *((_OWORD *)v8 + 45) = 0uLL;
  *((_OWORD *)v8 + 46) = 0uLL;
  *((_OWORD *)v8 + 47) = 0uLL;
  v8[768] = 0;
  v17 = *(_OWORD *)v44;
  *(_OWORD *)(v14 + 128) = v43;
  *(_OWORD *)(v14 + 144) = v17;
  *(_QWORD *)(v14 + 157) = *(_QWORD *)&v44[13];
  v18 = v40;
  *(_OWORD *)(v14 + 64) = v39;
  *(_OWORD *)(v14 + 80) = v18;
  v19 = v42;
  *(_OWORD *)(v14 + 96) = v41;
  *(_OWORD *)(v14 + 112) = v19;
  v20 = v36;
  *(_OWORD *)v14 = v35;
  *(_OWORD *)(v14 + 16) = v20;
  v21 = v38;
  *(_OWORD *)(v14 + 32) = v37;
  *(_OWORD *)(v14 + 48) = v21;
  if (*((_DWORD *)v8 + 109) == 1)
  {
    if (v15 == 1)
    {
      v22 = (char *)operator new(0x268uLL);
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = 0;
      *(_QWORD *)v22 = &off_1E2DB6F88;
      Espresso::base_kernel::base_kernel((uint64_t)(v22 + 24), a2);
      *((_QWORD *)v22 + 39) = 0;
      *((_QWORD *)v22 + 40) = 0;
      *((_QWORD *)v22 + 38) = v22 + 312;
      Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v22 + 328));
      *((_QWORD *)v22 + 72) = 0;
      *((_OWORD *)v22 + 34) = 0u;
      *((_OWORD *)v22 + 35) = 0u;
      *((_OWORD *)v22 + 32) = 0u;
      *((_OWORD *)v22 + 33) = 0u;
      *((_OWORD *)v22 + 31) = 0u;
      *((_QWORD *)v22 + 3) = &off_1E2D60A48;
      *(_OWORD *)(v22 + 584) = 0u;
      *(_OWORD *)(v22 + 600) = 0u;
      v23 = *(_OWORD *)v44;
      *(_OWORD *)(v22 + 456) = v43;
      *(_OWORD *)(v22 + 472) = v23;
      *(_QWORD *)(v24 + 157) = *(_QWORD *)&v44[13];
      v25 = v40;
      *(_OWORD *)(v22 + 392) = v39;
      *(_OWORD *)(v22 + 408) = v25;
      v26 = v42;
      *(_OWORD *)(v22 + 424) = v41;
      *(_OWORD *)(v22 + 440) = v26;
      v27 = v36;
      *(_OWORD *)(v22 + 328) = v35;
      *(_OWORD *)(v22 + 344) = v27;
      v28 = v38;
      *(_OWORD *)(v22 + 360) = v37;
      *(_OWORD *)(v22 + 376) = v28;
      *(_QWORD *)&v45 = v22 + 24;
      *((_QWORD *)&v45 + 1) = v22;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v8 + 600), &v45);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (!*((_QWORD *)&v45 + 1))
        goto LABEL_15;
      v30 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
    }
    else
    {
      v32 = operator new(0x298uLL);
      v32[1] = 0;
      v32[2] = 0;
      *v32 = &off_1E2DBCA50;
      *(_QWORD *)&v45 = Espresso::convolution_kernel_cpu::convolution_kernel_cpu((uint64_t)(v32 + 3), a2, v33, &v35);
      *((_QWORD *)&v45 + 1) = v32;
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v8 + 600), &v45);
      v29 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (!*((_QWORD *)&v45 + 1))
        goto LABEL_15;
      v34 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
      do
        v31 = __ldaxr(v34);
      while (__stlxr(v31 - 1, v34));
    }
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_15:
  if (!*((_DWORD *)v8 + 122))
    *((_DWORD *)v8 + 122) = v8[632];
  *a1 = v8 + 24;
  a1[1] = v8;
}

void sub_1913E1F1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void **v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  void *v6;
  std::__shared_weak_count_vtbl *shared_weak_owners;
  void *v8;

  std::__shared_weak_count::~__shared_weak_count(v3);
  operator delete(v6);
  *(_QWORD *)(v4 - 80) = v1 + 31;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 80));
  *(_QWORD *)(v4 - 80) = v1 + 30;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 80));
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v1[28].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v1[29].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[28]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[27].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[26].__shared_weak_owners_);
  Espresso::BNNSEngine::base_bnns_kernel<Espresso::generic_convolution_kernel>::~base_bnns_kernel(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v8);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB64D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::BNNSEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB64D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::context_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6B28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::context_cpu>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6B28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

double Espresso::batch_cpu::batch_cpu(Espresso::batch_cpu *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_BYTE *)this + 40) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_WORD *)this + 48) = 256;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)this = &off_1E2DAC840;
  return result;
}

{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_BYTE *)this + 40) = 1;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_WORD *)this + 48) = 256;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)this = &off_1E2DAC840;
  return result;
}

void Espresso::ANECompilerEngine::mix_gather_kernel::~mix_gather_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 38);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_gather_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 304), a3, a4, a5);
}

std::__shared_weak_count *Espresso::ANECompilerEngine::mix_gather_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, Espresso::ANECompilerEngine *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const Espresso::net *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  const Espresso::net *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  Espresso::ANECompilerEngine *v27;
  NSString *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unsigned int v41;
  unint64_t *v42;
  unint64_t v43;
  Espresso::ANECompilerEngine *v44;
  int32x4_t *v45;
  uint64_t v46;
  char *v47;
  const __CFString *v48;
  const __CFString *v49;
  BOOL v50;
  const __CFString *v51;
  char *v52;
  BOOL v53;
  char *v54;
  BOOL v55;
  char *v56;
  int32x4_t v57;
  uint16x4_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v74;
  __int128 v75;
  int v76;
  std::string *v77;
  void *v78;
  char v79;
  int64x2_t *v80;
  std::__shared_weak_count *v81;
  void **v82;
  void *v83;
  _BYTE v84[15];
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  int64x2_t *v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  _OWORD v92[2];
  uint64_t v93;
  void *v94;
  void *v95;
  uint64_t v96;
  const Espresso::net *v97;
  std::__shared_weak_count *v98;
  _DWORD v99[6];
  unsigned int v100;
  _OWORD v101[2];
  uint64_t v102;
  void *__p;
  void *v104;
  uint64_t v105;
  const Espresso::net *v106;
  std::__shared_weak_count *v107;
  _DWORD v108[8];
  std::string v109;
  std::string v110;
  __int128 v111;
  uint64_t v112;
  _QWORD v113[4];
  std::__shared_weak_count *v114;
  int64x2_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  char v121;
  _QWORD v122[5];

  v122[2] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)a3 + 6);
  v106 = 0;
  v107 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7)
  {
    v8 = std::__shared_weak_count::lock(v7);
    v107 = v8;
    if (v8)
    {
      v9 = *(const Espresso::net **)(v6 + 72);
      v106 = v9;
      goto LABEL_6;
    }
  }
  else
  {
    v8 = 0;
  }
  v9 = 0;
LABEL_6:
  v10 = *((_QWORD *)a3 + 3);
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_OWORD *)(v10 + 16);
  v101[0] = *(_OWORD *)v10;
  v101[1] = v12;
  v102 = v11;
  __p = 0;
  v104 = 0;
  v105 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)(v10 + 40), *(_QWORD *)(v10 + 48), (uint64_t)(*(_QWORD *)(v10 + 48) - *(_QWORD *)(v10 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v108, v9, (const Espresso::layer_shape *)v101, 1);
  if (__p)
  {
    v104 = __p;
    operator delete(__p);
  }
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v15 = *((_QWORD *)a3 + 6);
  v97 = 0;
  v98 = 0;
  v16 = *(std::__shared_weak_count **)(v15 + 80);
  if (v16)
  {
    v17 = std::__shared_weak_count::lock(v16);
    v98 = v17;
    if (v17)
    {
      v18 = *(const Espresso::net **)(v15 + 72);
      v97 = v18;
      goto LABEL_18;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = 0;
LABEL_18:
  v19 = *(_QWORD *)a3;
  v20 = *(_QWORD *)(*(_QWORD *)a3 + 32);
  v21 = *(_OWORD *)(*(_QWORD *)a3 + 16);
  v92[0] = *(_OWORD *)*(_QWORD *)a3;
  v92[1] = v21;
  v93 = v20;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v94, *(const void **)(v19 + 40), *(_QWORD *)(v19 + 48), (uint64_t)(*(_QWORD *)(v19 + 48) - *(_QWORD *)(v19 + 40)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v99, v18, (const Espresso::layer_shape *)v92, 1);
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  if (v17)
  {
    v22 = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v24 = *((_QWORD *)a3 + 6);
  v90 = 0;
  v91 = 0;
  v25 = *(std::__shared_weak_count **)(v24 + 80);
  if (v25 && (v91 = std::__shared_weak_count::lock(v25)) != 0)
  {
    v26 = *(_QWORD *)(v24 + 72);
    v90 = v26;
  }
  else
  {
    v26 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v26 + 472);
  v27 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v27, v28))
  {
    v29 = *(std::__shared_weak_count **)(a2 + 8);
    v88 = *(int64x2_t **)a2;
    v89 = v29;
    if (v29)
    {
      v30 = (unint64_t *)&v29->__shared_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    std::string::basic_string[abi:ne180100]<0>(&v120, "gather_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v110, &v120, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v88, (Espresso::base_kernel::validate_for_engine_warning_t *)&v110);
    v32 = v114;
    if (v114)
    {
      v33 = (unint64_t *)&v114->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v82 = (void **)v113;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v82);
    v82 = (void **)&v111;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v82);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    if (v121 < 0)
      operator delete((void *)v120);
    v35 = v89;
    if (v89)
    {
      v36 = (unint64_t *)&v89->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      v35 = 0;
    }
    goto LABEL_116;
  }
  v38 = *(unsigned __int8 *)(v90 + 1281);
  v39 = *((_QWORD *)a3 + 6);
  v40 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v39 + 80));
  v110.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 72);
  v110.__r_.__value_.__l.__size_ = (std::string::size_type)v40;
  v41 = Espresso::ANECompilerEngine::bottom_compute_path(a3, (const Espresso::base_kernel::validate_for_engine_args_t *)v110.__r_.__value_.__l.__data_, 0);
  v42 = (unint64_t *)&v40->__shared_owners_;
  do
    v43 = __ldaxr(v42);
  while (__stlxr(v43 - 1, v42));
  if (!v43)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v86, (NSString *)(a1 + 304), v27);
  v44 = v27;
  v45 = (int32x4_t *)(a1 + 280);
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v99, v44))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v108, v44))
    {
      ANECGatherLayerDescInitialize();
      if (v45->i32[0] == -1)
      {
        v46 = 0;
      }
      else
      {
        if (v100 > 5)
          goto LABEL_126;
        *((_QWORD *)&v120 + 1) = CFSTR("Width");
        v46 = 1;
      }
      if (*(_DWORD *)(a1 + 284) != -1)
      {
        if (v100 > 5)
          goto LABEL_126;
        v47 = (char *)&v120 + 8 * v46++;
        *((_QWORD *)v47 + 1) = CFSTR("Height");
      }
      v48 = CFSTR("Channel");
      v49 = CFSTR("Depth");
      if (*(_DWORD *)(a1 + 288) != -1)
      {
        if (v100 > 5)
          goto LABEL_126;
        if (v38)
          v50 = v100 == 5;
        else
          v50 = 0;
        if (v50)
          v51 = CFSTR("Depth");
        else
          v51 = CFSTR("Channel");
        v52 = (char *)&v120 + 8 * v46++;
        *((_QWORD *)v52 + 1) = v51;
      }
      if (*(_DWORD *)(a1 + 292) != -1)
      {
        if (v100 > 5)
          goto LABEL_126;
        if (v38)
          v53 = v100 == 5;
        else
          v53 = 0;
        if (!v53)
          v48 = CFSTR("Batch");
        v54 = (char *)&v120 + 8 * v46++;
        *((_QWORD *)v54 + 1) = v48;
      }
      if (*(_DWORD *)(a1 + 296) == -1)
      {
LABEL_88:
        v119 = 0;
        *(_QWORD *)&v120 = v46;
        v118 = 0;
        ANECTensorDescInitialize();
        ANECTensorDescInitialize();
        if (v41 < 8 && ((0x97u >> v41) & 1) != 0)
        {
          *(_QWORD *)&v74 = v99[3];
          *((_QWORD *)&v74 + 1) = v99[4];
          v75 = v74;
          v110.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E2DD2AD0[v41];
          v112 = v99[2];
          *(_QWORD *)&v74 = v99[0];
          *((_QWORD *)&v74 + 1) = v99[1];
          *(_OWORD *)&v110.__r_.__value_.__r.__words[1] = v74;
          v111 = v75;
          v115 = vdupq_n_s64(1uLL);
          v113[3] = 1;
          v114 = (std::__shared_weak_count *)v46;
          v116 = 1;
          v113[2] = CFSTR("Float16");
          v117 = 1;
          v76 = ANECValidateGatherLayer();
          if (v76)
          {
            std::to_string(&v109, v76);
            v77 = std::string::insert(&v109, 0, "gather_kernel: ANECValidateGatherLayer rejected operation with status ");
            v78 = (void *)v77->__r_.__value_.__r.__words[0];
            v122[0] = v77->__r_.__value_.__l.__size_;
            *(_QWORD *)((char *)v122 + 7) = *(std::string::size_type *)((char *)&v77->__r_.__value_.__r.__words[1] + 7);
            v79 = HIBYTE(v77->__r_.__value_.__r.__words[2]);
            v77->__r_.__value_.__l.__size_ = 0;
            v77->__r_.__value_.__r.__words[2] = 0;
            v77->__r_.__value_.__r.__words[0] = 0;
            LOBYTE(v82) = 0;
            *(_QWORD *)&v84[7] = *(_QWORD *)((char *)v122 + 7);
            v83 = v78;
            *(_QWORD *)v84 = v122[0];
            v85 = v79;
            if (SHIBYTE(v109.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v109.__r_.__value_.__l.__data_);
          }
          else
          {
            LOBYTE(v82) = 1;
            std::string::basic_string[abi:ne180100]<0>(&v83, "Success");
          }
        }
        else
        {
          LOBYTE(v82) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v83, "gather_kernel: invalid compute path for input");
        }
        goto LABEL_91;
      }
      if (v100 <= 5)
      {
        if (v38)
          v55 = v100 == 5;
        else
          v55 = 0;
        if (v55)
          v49 = CFSTR("Batch");
        v56 = (char *)&v120 + 8 * v46++;
        *((_QWORD *)v56 + 1) = v49;
        goto LABEL_88;
      }
LABEL_126:
      Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
    }
    LOBYTE(v82) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v83, "gather_kernel: output blob dimensions exceed ANE limit.");
  }
  else
  {
    LOBYTE(v82) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v83, "gather_kernel: input blob dimensions exceed ANE limit.");
  }
LABEL_91:

  if ((_BYTE)v82)
  {
    v57.i64[0] = 0x100000001;
    v57.i64[1] = 0x100000001;
    v58 = (uint16x4_t)vmovn_s32(vceqq_s32(*v45, v57));
    v58.i16[0] = vmaxv_u16(v58);
    v35 = (std::__shared_weak_count *)((*(_DWORD *)(a1 + 296) != -2) & ~v58.i32[0]);
  }
  else
  {
    v59 = *(std::__shared_weak_count **)(a2 + 8);
    v80 = *(int64x2_t **)a2;
    v81 = v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&v110, (__int128 *)&v83, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v80, (Espresso::base_kernel::validate_for_engine_warning_t *)&v110);
    v62 = v114;
    if (v114)
    {
      v63 = (unint64_t *)&v114->__shared_owners_;
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    *(_QWORD *)&v120 = v113;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    *(_QWORD *)&v120 = &v111;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v120);
    if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v110.__r_.__value_.__l.__data_);
    v35 = v81;
    if (v81)
    {
      v65 = (unint64_t *)&v81->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      v35 = 0;
    }
  }
  if (v85 < 0)
    operator delete(v83);
  v67 = v87;
  if (v87)
  {
    v68 = (unint64_t *)&v87->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
LABEL_116:

  v70 = v91;
  if (v91)
  {
    v71 = (unint64_t *)&v91->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  return v35;
}

void sub_1913E2964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,char a58)
{
  void *v58;
  void *v59;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

const char *Espresso::generic_gather_kernel::kernel_type_str(Espresso::generic_gather_kernel *this)
{
  return "gather";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::gather_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::mix_gather_kernel::compile(Espresso::ANECompilerEngine::mix_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  const __CFString *v22;
  BOOL v23;
  const __CFString *v24;
  BOOL v25;
  const __CFString *v26;
  __CFString *v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  size_t v34;
  std::string *p_str;
  void **v36;
  char *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string *v41;
  std::string *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  float v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  int *v72;
  _WORD *v73;
  int v74;
  __int128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  int *v87;
  _WORD *v88;
  int v89;
  uint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  void *v98;
  id v99;
  void *v100;
  void *v101;
  void *v102;
  void *v103;
  uint64_t weights_file_index;
  void *v105;
  void *v106;
  __int128 v107;
  unint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  void *v114;
  void *v115;
  uint64_t v116;
  void *v117;
  void *v118;
  std::string *v119;
  std::string *v120;
  uint64_t v121;
  char v122;
  std::string::size_type size;
  std::string::size_type v124;
  uint64_t v125;
  unsigned __int8 *v126;
  std::string *v127;
  const std::string::value_type *data;
  __int128 v129;
  __CFString *v130;
  std::string *v131;
  std::string *v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  std::__shared_weak_count *v155;
  unint64_t *v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  int *v170;
  uint64_t i;
  float v172;
  int v173;
  _WORD *v174;
  int v175;
  std::runtime_error *exception;
  int *v178;
  uint64_t j;
  int v180;
  int v181;
  unsigned int v182;
  unsigned int v183;
  int v184;
  Espresso *v185;
  const char *v186;
  float v187;
  NSObject *v189;
  double v190;
  uint64_t v191;
  _WORD *v192;
  int v193;
  uint64_t v195;
  int v196;
  id obj;
  void *v198;
  std::__shared_weak_count *v199;
  std::__shared_weak_count *v200;
  std::string __str;
  uint64_t v202;
  std::__shared_weak_count *v203;
  _BYTE v204[32];
  std::__shared_weak_count *v205;
  void *v206[2];
  char v207;
  uint64_t v208;
  std::string *v209;
  std::string *v210;
  unint64_t v211;
  void *v212;
  char v213;
  id v214;
  __CFString *v215;
  id v216;
  uint64_t v217;
  std::string *v218;
  _QWORD v219[2];
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  __int128 v225;
  uint64_t v226;
  std::__shared_weak_count *v227;
  __int128 v228;
  uint64_t v229;
  std::__shared_weak_count *v230;
  uint64_t v231[2];
  uint64_t v232;
  std::__shared_weak_count *v233;
  uint64_t v234;
  std::__shared_weak_count *v235;
  uint64_t v236;
  std::__shared_weak_count *v237;
  unsigned int v238;
  unsigned int v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  void *v242;
  std::string *v243;
  std::string *v244;
  _QWORD v245[2];
  void *__p;
  _QWORD v247[6];
  char v248;
  id v249;
  id v250;
  id v251;
  uint64_t v252;
  _BYTE buf[18];
  __int16 v254;
  int v255;
  __int16 v256;
  double v257;
  std::vector<std::string> v258;
  void *v259;
  char v260;
  id v261;
  __CFString *v262;
  id v263;
  std::string v264;
  __int128 v265;
  uint64_t v266;

  v266 = *MEMORY[0x1E0C80C00];
  v223 = 0;
  v224 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (v6 && (v224 = std::__shared_weak_count::lock(v6)) != 0)
  {
    v7 = *((_QWORD *)a2 + 1);
    v223 = v7;
  }
  else
  {
    v7 = 0;
  }
  v242 = a3;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)&v242);
  v9 = *((_QWORD *)v8 + 5);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v221 = v9;
  v222 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = v223;
  v242 = a3[6];
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v223 + 136, (unsigned __int8 *)v242, (__int128 **)&v242);
  v16 = *((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v219[1] = v16;
  v220 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v217 = 0;
  v218 = 0;
  v219[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v206, a3);
  obj = (id)objc_opt_new();
  v198 = (void *)objc_opt_new();
  Espresso::abstract_blob_container::shape((char *)&v242, v16);
  if ((_DWORD)v244 == 1)
    v19 = 4;
  else
    v19 = 5;
  if (HIDWORD(v244) == -1)
    v20 = v19;
  else
    v20 = HIDWORD(v244);
  if (__p)
  {
    v247[0] = __p;
    operator delete(__p);
  }
  if (*((_DWORD *)this + 70) != -1)
  {
    if (v20 > 5)
      goto LABEL_285;
    objc_msgSend(v198, "addObject:", CFSTR("Width"));
  }
  if (*((_DWORD *)this + 71) != -1)
  {
    if (v20 > 5)
      goto LABEL_285;
    objc_msgSend(v198, "addObject:", CFSTR("Height"));
  }
  if (*((_DWORD *)this + 72) != -1)
  {
    if (v20 > 5)
      goto LABEL_285;
    if (*(_BYTE *)(v13 + 1281))
      _ZF = v20 == 5;
    else
      _ZF = 0;
    if (_ZF)
      v22 = CFSTR("Depth");
    else
      v22 = CFSTR("Channel");
    objc_msgSend(v198, "addObject:", v22);
  }
  if (*((_DWORD *)this + 73) != -1)
  {
    if (v20 > 5)
      goto LABEL_285;
    if (*(_BYTE *)(v13 + 1281))
      v23 = v20 == 5;
    else
      v23 = 0;
    if (v23)
      v24 = CFSTR("Channel");
    else
      v24 = CFSTR("Batch");
    objc_msgSend(v198, "addObject:", v24);
  }
  if (*((_DWORD *)this + 74) == -1)
    goto LABEL_52;
  if (v20 > 5)
LABEL_285:
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Invalid axis or rank specified.");
  if (*(_BYTE *)(v13 + 1281))
    v25 = v20 == 5;
  else
    v25 = 0;
  if (v25)
    v26 = CFSTR("Batch");
  else
    v26 = CFSTR("Depth");
  objc_msgSend(v198, "addObject:", v26);
LABEL_52:
  v27 = v215;
  v215 = CFSTR("Gather");

  objc_msgSend(obj, "setObject:forKeyedSubscript:", v198, CFSTR("GatherNDAxes"));
  v205 = 0;
  memset(v204, 0, sizeof(v204));
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v202, 1, 1, objc_msgSend(v198, "count"), 1);
  v28 = *((_DWORD *)this + 70);
  if (v28 < 0)
  {
    v29 = 0;
  }
  else
  {
    **(float **)(v202 + 24) = (float)v28;
    v29 = 1;
  }
  v30 = *((_DWORD *)this + 71);
  if ((v30 & 0x80000000) == 0)
    *(float *)(*(_QWORD *)(v202 + 24) + 4 * v29++) = (float)v30;
  v31 = *((_DWORD *)this + 72);
  if ((v31 & 0x80000000) == 0)
    *(float *)(*(_QWORD *)(v202 + 24) + 4 * v29++) = (float)v31;
  v32 = *((_DWORD *)this + 73);
  if ((v32 & 0x80000000) == 0)
    *(float *)(*(_QWORD *)(v202 + 24) + 4 * v29++) = (float)v32;
  v33 = *((_DWORD *)this + 74);
  if ((v33 & 0x80000000) == 0)
    *(float *)(*(_QWORD *)(v202 + 24) + 4 * v29) = (float)v33;
  if (*((char *)a3 + 23) >= 0)
    v34 = *((unsigned __int8 *)a3 + 23);
  else
    v34 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v34 + 9);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v34)
  {
    if (*((char *)a3 + 23) >= 0)
      v36 = a3;
    else
      v36 = (void **)*a3;
    memmove(p_str, v36, v34);
  }
  strcpy((char *)p_str + v34, "@__indice");
  std::string::operator=((std::string *)v204, &__str);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v204[24], v202, (uint64_t)v203);
  v242 = &__str;
  v37 = std::__tree<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::ANECompilerEngine::compiler::build_state_t::constant_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 34, &__str, (__int128 **)&v242);
  std::string::operator=((std::string *)(v37 + 56), (const std::string *)v204);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v37 + 10, *(uint64_t *)&v204[24], (uint64_t)v205);
  objc_storeStrong(&v216, obj);
  v38 = v210;
  if ((char *)v210 - (char *)v209 == 24)
  {
    if ((unint64_t)v210 >= v211)
    {
      v40 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v209, (uint64_t)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v210, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v39 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v210->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
      }
      v40 = v38 + 1;
    }
    v210 = v40;
  }
  else if (0xAAAAAAAAAAAAAAABLL * (((char *)v210 - (char *)v209) >> 3) >= 2)
  {
    std::string::operator=(v209 + 1, &__str);
  }
  v41 = v218;
  if ((unint64_t)v218 >= v219[0])
  {
    v43 = 0x8E38E38E38E38E39 * (((uint64_t)v218 - v217) >> 4);
    if (v43 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v44 = 0x1C71C71C71C71C72 * ((v219[0] - v217) >> 4);
    if (v44 <= v43 + 1)
      v44 = v43 + 1;
    if (0x8E38E38E38E38E39 * ((v219[0] - v217) >> 4) >= 0xE38E38E38E38E3)
      v45 = 0x1C71C71C71C71C7;
    else
      v45 = v44;
    v245[1] = v219;
    if (v45)
      v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v45);
    else
      v46 = 0;
    v242 = (void *)v45;
    v243 = (std::string *)(v45 + 144 * v43);
    v244 = v243;
    v245[0] = v45 + 144 * v46;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v243, (uint64_t)v206);
    v244 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v217, &v242);
    v42 = v218;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v242);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v218, (uint64_t)v206);
    v42 = v41 + 6;
  }
  v218 = v42;
  v200 = v224;
  if (v224)
  {
    v47 = (unint64_t *)&v224->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
  }
  v199 = v10;
  if (v10)
  {
    v49 = (unint64_t *)&v10->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v242);
  v251 = 0;
  v250 = 0;
  v252 = 0x100000000;
  v51 = *((_QWORD *)this + 46);
  v52 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
  v240 = v51;
  v241 = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
  }
  if (v51 && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 38) + 104))((char *)this + 304) + 40))
  {
    v55 = *(float *)(v9 + 112);
    v232 = v51;
    v233 = v52;
    if (v52)
    {
      v56 = (unint64_t *)&v52->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v58 = (std::__shared_weak_count *)*((_QWORD *)this + 49);
    v231[0] = *((_QWORD *)this + 48);
    v231[1] = (uint64_t)v58;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldxr(v59);
      while (__stxr(v60 + 1, v59));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v232, v231, (uint64_t)&v234, v55);
    if (v58)
    {
      v61 = (unint64_t *)&v58->__shared_owners_;
      do
        v62 = __ldaxr(v61);
      while (__stlxr(v62 - 1, v61));
      if (!v62)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    v63 = v233;
    if (v233)
    {
      v64 = (unint64_t *)&v233->__shared_owners_;
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    v66 = v240;
    v67 = *(unsigned int *)(v240 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v229, 2 * v67, 1, 1, 1);
    v68 = (int)v67;
    v228 = 0uLL;
    v69 = v67;
    v70 = *((_QWORD *)this + 48);
    if (v70)
      v69 = *(_DWORD *)(v70 + 8);
    if (!*((_BYTE *)a2 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v264, 4 * v67);
      v170 = *(int **)(v264.__r_.__value_.__r.__words[0] + 16);
      if ((int)v67 >= 1)
      {
        for (i = 0; i != v67; ++i)
        {
          v172 = *(float *)(*(_QWORD *)(v66 + 16) + i * 4);
          *(float *)&v173 = ldexp(1.0, -v238) * v172;
          v170[i] = v173;
        }
      }
      if ((_DWORD)v67)
      {
        v174 = *(_WORD **)(v229 + 16);
        do
        {
          v175 = *v170++;
          _S0 = v175;
          __asm { FCVT            H0, S0 }
          *v174++ = _S0;
          --v68;
        }
        while (v68);
      }
      v226 = 0;
      v227 = 0;
      if (*((_QWORD *)this + 48))
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v69);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v226, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v69);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v228, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v178 = *(int **)(v226 + 16);
        if (v69 >= 1)
        {
          for (j = 0; j != v69; ++j)
          {
            if ((int)v67 - 1 >= (int)j)
              v180 = j;
            else
              v180 = v67 - 1;
            *(float *)&v181 = *(float *)(*(_QWORD *)(v236 + 16) + 4 * j)
                            * *(float *)(*(_QWORD *)(v234 + 16) + 4 * v180);
            v178[j] = v181;
            v182 = v239;
            v183 = v238;
            *(float *)&v184 = ldexp(1.0, v239 - v238) * *(float *)&v181;
            v178[j] = v184;
            v187 = ldexp(1.0, v183 - v182) * *(float *)&v184;
            if (v187 < -127.0 || v187 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v185, v186);
              v189 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
              {
                v190 = *(float *)&v178[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v187;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v239;
                v254 = 1024;
                v255 = v238;
                v256 = 2048;
                v257 = v190;
                _os_log_error_impl(&dword_190DAF000, v189, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v69)
        {
          v191 = v69;
          v192 = *(_WORD **)(v228 + 16);
          do
          {
            v193 = *v178++;
            _S0 = v193;
            __asm { FCVT            H0, S0 }
            *v192++ = _S0;
            --v191;
          }
          while (v191);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v71 = v239;
    if ((_DWORD)v67)
    {
      v72 = *(int **)(v234 + 16);
      v73 = *(_WORD **)(v229 + 16);
      do
      {
        v74 = *v72++;
        _S0 = v74;
        __asm { FCVT            H0, S0 }
        *v73++ = _S0;
        --v68;
      }
      while (v68);
    }
    if (v70)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v69, 1, 1, 1);
      v79 = *(_OWORD *)buf;
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v80 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
      v228 = v79;
      if (v80)
      {
        v81 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 - 1, v81));
        if (!v82)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v83 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v84 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (v69)
      {
        v86 = v69;
        v87 = *(int **)(v236 + 16);
        v88 = *(_WORD **)(v228 + 16);
        do
        {
          v89 = *v87++;
          _S0 = v89;
          __asm { FCVT            H0, S0 }
          *v88++ = _S0;
          --v86;
        }
        while (v86);
      }
    }
    v196 = *((unsigned __int8 *)a2 + 552);
    v91 = v229;
    v92 = v230;
    v226 = v229;
    v227 = v230;
    if (v230)
    {
      v93 = (unint64_t *)&v230->__shared_owners_;
      do
        v94 = __ldxr(v93);
      while (__stxr(v94 + 1, v93));
    }
    v95 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v91 + 16), *(int *)(v91 + 8));
    if (v92)
    {
      v96 = (unint64_t *)&v92->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v98 = (void *)objc_opt_new();
    if (*((_BYTE *)a2 + 121))
    {
      v99 = *(id *)(v217 + 128);

      v98 = v99;
    }
    v100 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v67);
    v101 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setObject:forKeyedSubscript:", v101, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v95);
    v102 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setObject:forKeyedSubscript:", v102, CFSTR("ScaleOffset"));

    v103 = (void *)MEMORY[0x1E0CB37E8];
    if (v196)
      weights_file_index = 0;
    else
    objc_msgSend(v103, "numberWithUnsignedLong:", weights_file_index, v219);
    v105 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v100, "setObject:forKeyedSubscript:", v105, CFSTR("ScaleIndex"));

    objc_msgSend(v100, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v238);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v98, "setObject:forKeyedSubscript:", v106, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 48))
    {
      v107 = v228;
      v225 = v228;
      if (*((_QWORD *)&v228 + 1))
      {
        v108 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
        do
          v109 = __ldxr(v108);
        while (__stxr(v109 + 1, v108));
      }
      v110 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v107 + 16), *(int *)(v107 + 8));
      if (*((_QWORD *)&v107 + 1))
      {
        v111 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 - 1, v111));
        if (!v112)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v107 + 1) + 16))(*((_QWORD *)&v107 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v107 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 48) + 8));
      v113 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "setObject:forKeyedSubscript:", v113, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v110);
      v114 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "setObject:forKeyedSubscript:", v114, CFSTR("BiasOffset"));

      v115 = (void *)MEMORY[0x1E0CB37E8];
      if (v196)
        v116 = 0;
      else
      objc_msgSend(v115, "numberWithUnsignedLong:", v116);
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v100, "setObject:forKeyedSubscript:", v117, CFSTR("BiasIndex"));

      objc_msgSend(v100, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v71);
      v118 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v98, "setObject:forKeyedSubscript:", v118, CFSTR("BiasShift"));

    }
    objc_msgSend(v98, "setObject:forKeyedSubscript:", v100, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v119 = v218;
    if (v218 == (std::string *)v217)
      goto LABEL_193;
    v120 = v218 - 6;
    v121 = HIBYTE(v218[-6].__r_.__value_.__r.__words[2]);
    v122 = v121;
    size = v218[-6].__r_.__value_.__l.__size_;
    if ((v121 & 0x80u) == 0)
      v124 = HIBYTE(v218[-6].__r_.__value_.__r.__words[2]);
    else
      v124 = v218[-6].__r_.__value_.__l.__size_;
    v125 = HIBYTE(v255);
    if (v255 < 0)
      v125 = *(_QWORD *)&buf[8];
    if (v124 != v125)
      goto LABEL_187;
    if (v255 >= 0)
      v126 = buf;
    else
      v126 = *(unsigned __int8 **)buf;
    if ((char)v121 < 0)
    {
      data = (const std::string::value_type *)v120->__r_.__value_.__r.__words[0];
      if (memcmp(v120->__r_.__value_.__l.__data_, v126, v218[-6].__r_.__value_.__l.__size_))
        goto LABEL_190;
    }
    else if ((_BYTE)v121)
    {
      v127 = v218 - 6;
      while (v127->__r_.__value_.__s.__data_[0] == *v126)
      {
        v127 = (std::string *)((char *)v127 + 1);
        ++v126;
        if (!--v121)
          goto LABEL_186;
      }
      goto LABEL_187;
    }
LABEL_186:
    std::string::append(v119 - 6, "__@pre_scale_bias");
    v122 = HIBYTE(v119[-6].__r_.__value_.__r.__words[2]);
LABEL_187:
    if ((v122 & 0x80) == 0)
    {
      v129 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v264.__r_.__value_.__r.__words[2] = v119[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v264.__r_.__value_.__l.__data_ = v129;
      goto LABEL_191;
    }
    data = v119[-6].__r_.__value_.__l.__data_;
    size = v119[-6].__r_.__value_.__l.__size_;
LABEL_190:
    std::string::__init_copy_ctor_external(&v264, data, size);
LABEL_191:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v258, &v264, &v265, 1uLL);
    if (SHIBYTE(v264.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v264.__r_.__value_.__l.__data_);
LABEL_193:
    v130 = v262;
    v262 = CFSTR("GOC");

    objc_storeStrong(&v263, v98);
    if (!*((_BYTE *)a2 + 121))
    {
      v131 = v218;
      if ((unint64_t)v218 >= v219[0])
      {
        v133 = 0x8E38E38E38E38E39 * (((uint64_t)v218 - v217) >> 4);
        if (v133 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v134 = 0x1C71C71C71C71C72 * ((v219[0] - v217) >> 4);
        if (v134 <= v133 + 1)
          v134 = v133 + 1;
        if (0x8E38E38E38E38E39 * ((v219[0] - v217) >> 4) >= 0xE38E38E38E38E3)
          v135 = 0x1C71C71C71C71C7;
        else
          v135 = v134;
        *((_QWORD *)&v265 + 1) = v195;
        if (v135)
          v135 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v135);
        else
          v136 = 0;
        v264.__r_.__value_.__r.__words[0] = v135;
        v264.__r_.__value_.__l.__size_ = v135 + 144 * v133;
        v264.__r_.__value_.__r.__words[2] = v264.__r_.__value_.__l.__size_;
        *(_QWORD *)&v265 = v135 + 144 * v136;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v264.__r_.__value_.__l.__size_, (uint64_t)buf);
        v264.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v217, &v264);
        v132 = v218;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v264);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v218, (uint64_t)buf);
        v132 = v131 + 6;
      }
      v218 = v132;
    }

    if (v260 < 0)
      operator delete(v259);
    v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&v258;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v264);
    v264.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v264);
    if (SHIBYTE(v255) < 0)
      operator delete(*(void **)buf);

    v137 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
    if (*((_QWORD *)&v228 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
      do
        v139 = __ldaxr(v138);
      while (__stlxr(v139 - 1, v138));
      if (!v139)
      {
        ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
        std::__shared_weak_count::__release_weak(v137);
      }
    }
    v140 = v230;
    if (v230)
    {
      v141 = (unint64_t *)&v230->__shared_owners_;
      do
        v142 = __ldaxr(v141);
      while (__stlxr(v142 - 1, v141));
      if (!v142)
      {
        ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
        std::__shared_weak_count::__release_weak(v140);
      }
    }
    v143 = v237;
    if (v237)
    {
      v144 = (unint64_t *)&v237->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
    v146 = v235;
    if (v235)
    {
      v147 = (unint64_t *)&v235->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v52 = v241;
  }
  if (v52)
  {
    v149 = (unint64_t *)&v52->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }

  if (v248 < 0)
    operator delete((void *)v247[4]);
  *(_QWORD *)buf = v247;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = v245;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (SHIBYTE(v244) < 0)
    operator delete(v242);
  if (v199)
  {
    v151 = (unint64_t *)&v199->__shared_owners_;
    do
      v152 = __ldaxr(v151);
    while (__stlxr(v152 - 1, v151));
    if (!v152)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  if (v200)
  {
    v153 = (unint64_t *)&v200->__shared_owners_;
    do
      v154 = __ldaxr(v153);
    while (__stlxr(v154 - 1, v153));
    if (!v154)
    {
      ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
      std::__shared_weak_count::__release_weak(v200);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 38) + 32))((char *)this + 304, a2, &v217);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v155 = v203;
  if (v203)
  {
    v156 = (unint64_t *)&v203->__shared_owners_;
    do
      v157 = __ldaxr(v156);
    while (__stlxr(v157 - 1, v156));
    if (!v157)
    {
      ((void (*)(std::__shared_weak_count *))v155->__on_zero_shared)(v155);
      std::__shared_weak_count::__release_weak(v155);
    }
  }
  v158 = v205;
  if (v205)
  {
    v159 = (unint64_t *)&v205->__shared_owners_;
    do
      v160 = __ldaxr(v159);
    while (__stlxr(v160 - 1, v159));
    if (!v160)
    {
      ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
      std::__shared_weak_count::__release_weak(v158);
    }
  }
  if ((v204[23] & 0x80000000) != 0)
    operator delete(*(void **)v204);

  if (v213 < 0)
    operator delete(v212);
  v242 = &v209;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
  v242 = &v208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
  if (v207 < 0)
    operator delete(v206[0]);
  v242 = &v217;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v242);
  v161 = v220;
  if (v220)
  {
    v162 = (unint64_t *)&v220->__shared_owners_;
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  v164 = v222;
  if (v222)
  {
    v165 = (unint64_t *)&v222->__shared_owners_;
    do
      v166 = __ldaxr(v165);
    while (__stlxr(v166 - 1, v165));
    if (!v166)
    {
      ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
      std::__shared_weak_count::__release_weak(v164);
    }
  }
  v167 = v224;
  if (v224)
  {
    v168 = (unint64_t *)&v224->__shared_owners_;
    do
      v169 = __ldaxr(v168);
    while (__stlxr(v169 - 1, v168));
    if (!v169)
    {
      ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
      std::__shared_weak_count::__release_weak(v167);
    }
  }
}

void sub_1913E3EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, char a16, uint64_t a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,char a56,uint64_t a57,char a58)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>>::~pair((uint64_t)&a28);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a33);
  STACK[0x2B0] = (unint64_t)&a51;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2B0]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a54);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a58);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_gather_kernel::compile(Espresso::ANECompilerEngine::mix_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_gather_kernel::compile((Espresso::ANECompilerEngine::mix_gather_kernel *)((char *)this - 304), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_gather_kernel::~mix_gather_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 38);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_array_gather_kernel::~mix_array_gather_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 39);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_array_gather_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 312), a3, a4, a5);
}

uint64_t Espresso::ANECompilerEngine::mix_array_gather_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  _OWORD *v6;
  std::__shared_weak_count *v7;
  char *v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  const Espresso::net *v21;
  unint64_t *v22;
  unint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  const Espresso::net *v30;
  unint64_t *v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  __int128 v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  const Espresso::net *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  __int128 v43;
  const void *v44;
  unint64_t *v45;
  unint64_t v46;
  Espresso::ANECompilerEngine *v47;
  int v48;
  const Espresso::net *v49;
  __CFString *ANECAxisForNDAxis;
  int *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int32x4_t v60;
  uint16x4_t v61;
  unsigned __int32 v62;
  uint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  int64x2_t *v102;
  uint64_t v103;
  int64x2_t *v104;
  std::__shared_weak_count *v105;
  char v106[8];
  __int128 v107;
  char v108;
  _OWORD v109[2];
  uint64_t v110;
  void *v111;
  void *v112;
  uint64_t v113;
  const Espresso::net *v114;
  std::__shared_weak_count *v115;
  void **v116[4];
  void *__p[2];
  __int128 v118;
  uint64_t v119;
  void *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  int v128;
  int64x2_t *v129;
  uint64_t v130;
  char v131;
  void *v132[2];
  char v133;
  _OWORD v134[2];
  uint64_t v135;
  void *v136;
  void *v137;
  uint64_t v138;
  char *v139;
  std::__shared_weak_count *v140;
  _DWORD v141[6];
  int v142;
  _OWORD v143[2];
  uint64_t v144;
  void *v145;
  void *v146;
  uint64_t v147;
  char *v148;
  std::__shared_weak_count *v149;
  _DWORD v150[6];
  int v151;
  int v152;
  _OWORD v153[2];
  uint64_t v154;
  void *v155;
  void *v156;
  uint64_t v157;
  char *v158;
  std::__shared_weak_count *v159;
  void **v160[3];
  int v161;
  _BYTE v162[28];
  int v163;
  _BYTE v164[32];
  std::__shared_weak_count *v165;
  int64x2_t *v166;
  uint64_t v167;
  char *v168;
  std::__shared_weak_count *v169;
  void **v170;

  v6 = a3[6];
  v168 = 0;
  v169 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 10);
  if (v7 && (v169 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = (char *)*((_QWORD *)v6 + 9);
    v168 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)(v8 + 472));
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v9, v10))
  {
    v11 = *(_QWORD *)(a2 + 8);
    v166 = *(int64x2_t **)a2;
    v167 = v11;
    if (v11)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "array_gather_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v162, (__int128 *)__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v166, (Espresso::base_kernel::validate_for_engine_warning_t *)v162);
    v14 = v165;
    if (v165)
    {
      p_shared_owners = (unint64_t *)&v165->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v160[0] = (void **)v164;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v160);
    v160[0] = (void **)&v162[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v160);
    if ((v162[23] & 0x80000000) != 0)
      operator delete(*(void **)v162);
    if (SBYTE7(v118) < 0)
      operator delete(__p[0]);
    v17 = v167;
    if (v167)
    {
      v18 = (unint64_t *)(v167 + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
      }
      v17 = 0;
    }
    goto LABEL_178;
  }
  v21 = (const Espresso::net *)v168;
  v20 = v169;
  v158 = v168;
  v159 = v169;
  if (v169)
  {
    v22 = (unint64_t *)&v169->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = a3[3];
  v25 = *((_QWORD *)v24 + 4);
  v26 = v24[1];
  v153[0] = *v24;
  v153[1] = v26;
  v154 = v25;
  v155 = 0;
  v157 = 0;
  v156 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v155, *((const void **)v24 + 5), *((_QWORD *)v24 + 6), (uint64_t)(*((_QWORD *)v24 + 6) - *((_QWORD *)v24 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v160, v21, (const Espresso::layer_shape *)v153, 1);
  if (v155)
  {
    v156 = v155;
    operator delete(v155);
  }
  if (v20)
  {
    v27 = (unint64_t *)&v20->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v30 = (const Espresso::net *)v168;
  v29 = v169;
  v148 = v168;
  v149 = v169;
  if (v169)
  {
    v31 = (unint64_t *)&v169->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *a3;
  v34 = *((_QWORD *)*a3 + 4);
  v35 = (*a3)[1];
  v143[0] = **a3;
  v143[1] = v35;
  v144 = v34;
  v145 = 0;
  v147 = 0;
  v146 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v145, *((const void **)v33 + 5), *((_QWORD *)v33 + 6), (uint64_t)(*((_QWORD *)v33 + 6) - *((_QWORD *)v33 + 5)) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v150, v30, (const Espresso::layer_shape *)v143, 1);
  if (v145)
  {
    v146 = v145;
    operator delete(v145);
  }
  if (v29)
  {
    v36 = (unint64_t *)&v29->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v39 = (const Espresso::net *)v168;
  v38 = v169;
  v139 = v168;
  v140 = v169;
  if (v169)
  {
    v40 = (unint64_t *)&v169->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = *a3;
  v43 = (*a3)[5];
  v134[0] = (*a3)[4];
  v134[1] = v43;
  v44 = (const void *)v42[13];
  v135 = v42[12];
  v136 = 0;
  v137 = 0;
  v138 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v136, v44, v42[14], (uint64_t)(v42[14] - (_QWORD)v44) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v141, v39, (const Espresso::layer_shape *)v134, 1);
  if (v136)
  {
    v137 = v136;
    operator delete(v136);
  }
  if (v38)
  {
    v45 = (unint64_t *)&v38->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v47 = v9;
  if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v150, v47))
  {
    if (Espresso::ANECompilerEngine::blob_shape_ane_compatible(v160, v47))
    {
      v131 = 1;
      std::string::basic_string[abi:ne180100]<0>(v132, "Success");
    }
    else
    {
      v131 = 0;
      std::string::basic_string[abi:ne180100]<0>(v132, "array_gather_kernel: output blob dimensions exceed ANE limit.");
    }
  }
  else
  {
    v131 = 0;
    std::string::basic_string[abi:ne180100]<0>(v132, "array_gather_kernel: input blob dimensions exceed ANE limit.");
  }

  if (!v131)
  {
    v52 = *(_QWORD *)(a2 + 8);
    v129 = *(int64x2_t **)a2;
    v130 = v52;
    if (v52)
    {
      v53 = (unint64_t *)(v52 + 8);
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v162, (__int128 *)v132, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v129, (Espresso::base_kernel::validate_for_engine_warning_t *)v162);
    v55 = v165;
    if (v165)
    {
      v56 = (unint64_t *)&v165->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    __p[0] = v164;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = &v162[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if ((v162[23] & 0x80000000) != 0)
      operator delete(*(void **)v162);
    v17 = v130;
    if (!v130)
      goto LABEL_176;
    v58 = (unint64_t *)(v130 + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    goto LABEL_173;
  }
  if (!*(_BYTE *)(a1 + 304))
  {
    v60.i64[0] = 0x100000001;
    v60.i64[1] = 0x100000001;
    v61 = (uint16x4_t)vmovn_s32(vceqq_s32(*(int32x4_t *)(a1 + 280), v60));
    v61.i16[0] = vmaxv_u16(v61);
    v17 = (*(_DWORD *)(a1 + 296) != -2) & ~v61.i32[0];
    goto LABEL_176;
  }
  v48 = v151;
  v49 = (const Espresso::net *)v168;
  ANECAxisForNDAxis = (__CFString *)Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)*(unsigned int *)(a1 + 300), v151, v168[1281]);
  if (v142 != 1 || ANECAxisForNDAxis == CFSTR("Width"))
    goto LABEL_119;
  v51 = (int *)&v127 + 1;
  v127 = xmmword_191A761E0;
  v128 = 4;
  if (v152)
  {
    if (ANECAxisForNDAxis != CFSTR("Height"))
    {
      if (ANECAxisForNDAxis != CFSTR("Channel"))
      {
        if (ANECAxisForNDAxis != CFSTR("Batch"))
        {
          if (ANECAxisForNDAxis == CFSTR("Depth"))
            goto LABEL_91;
          goto LABEL_93;
        }
        goto LABEL_90;
      }
LABEL_88:
      v62 = 2;
      v51 = (int *)&v127 + 2;
LABEL_92:
      LODWORD(v127) = v62;
      *v51 = 0;
      goto LABEL_93;
    }
LABEL_89:
    v62 = 1;
    goto LABEL_92;
  }
  if (ANECAxisForNDAxis == CFSTR("Height"))
    goto LABEL_89;
  if (ANECAxisForNDAxis == CFSTR("Channel"))
  {
LABEL_90:
    v62 = 3;
    v51 = (int *)((unint64_t)&v127 | 0xC);
    goto LABEL_92;
  }
  if (ANECAxisForNDAxis == CFSTR("Batch"))
  {
LABEL_91:
    v62 = 4;
    v51 = &v128;
    goto LABEL_92;
  }
  if (ANECAxisForNDAxis == CFSTR("Depth"))
    goto LABEL_88;
LABEL_93:
  Espresso::abstract_engine_factory::shared(&v125);
  std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(&v123, (_QWORD *)v49 + 2, (__n128 *)&v127);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, _OWORD **))(*(_QWORD *)v123 + 64))(v162, v123, a3);
  v63 = *(_QWORD *)(*(_QWORD *)v162 + 32);
  v64 = *(_OWORD *)(*(_QWORD *)v162 + 16);
  *(_OWORD *)__p = **(_OWORD **)v162;
  v118 = v64;
  v119 = v63;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v120, *(const void **)(*(_QWORD *)v162 + 40), *(_QWORD *)(*(_QWORD *)v162 + 48), (uint64_t)(*(_QWORD *)(*(_QWORD *)v162 + 48) - *(_QWORD *)(*(_QWORD *)v162 + 40)) >> 2);
  v116[0] = (void **)v162;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v116);
  v65 = v169;
  v114 = v49;
  v115 = v169;
  if (v169)
  {
    v66 = (unint64_t *)&v169->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  v109[0] = *(_OWORD *)__p;
  v109[1] = v118;
  v110 = v119;
  v111 = 0;
  v112 = 0;
  v113 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v111, v120, (uint64_t)v121, (v121 - (_BYTE *)v120) >> 2);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v116, v49, (const Espresso::layer_shape *)v109, 1);
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v65)
  {
    v68 = (unint64_t *)&v65->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)v106, v47, v141, v116);
  if (!v106[0])
  {
    v85 = *(std::__shared_weak_count **)(a2 + 8);
    v104 = *(int64x2_t **)a2;
    v105 = v85;
    if (v85)
    {
      v86 = (unint64_t *)&v85->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v162, &v107, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v104, (Espresso::base_kernel::validate_for_engine_warning_t *)v162);
    v88 = v165;
    if (v165)
    {
      v89 = (unint64_t *)&v165->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v170 = (void **)v164;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v170);
    v170 = (void **)&v162[24];
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v170);
    if ((v162[23] & 0x80000000) != 0)
      operator delete(*(void **)v162);
    v91 = v105;
    if (v105)
    {
      v92 = (unint64_t *)&v105->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    if (v108 < 0)
      operator delete((void *)v107);
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
    v94 = v124;
    if (v124)
    {
      v95 = (unint64_t *)&v124->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v17 = (uint64_t)v126;
    if (!v126)
      goto LABEL_175;
    v97 = (unint64_t *)&v126->__shared_owners_;
    do
      v59 = __ldaxr(v97);
    while (__stlxr(v59 - 1, v97));
LABEL_173:
    if (!v59)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v17);
    }
LABEL_175:
    v17 = 0;
    goto LABEL_176;
  }
  if (v108 < 0)
    operator delete((void *)v107);
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  v70 = v124;
  if (v124)
  {
    v71 = (unint64_t *)&v124->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = v126;
  if (v126)
  {
    v74 = (unint64_t *)&v126->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v48 = v151;
LABEL_119:
  if (v161 == v48)
  {
    v17 = 1;
    goto LABEL_176;
  }
  v77 = v161 == 3 && v48 == 2 && v142 == 2;
  if (v77 && !*(_DWORD *)(a1 + 300))
  {
    *(_QWORD *)v162 = 0x100000001;
    *(_QWORD *)&v162[20] = 0xFFFFFFFF00000001;
    v163 = -1;
    *(_DWORD *)&v162[8] = 1;
    *(_DWORD *)&v162[12] = v141[3];
    *(_DWORD *)&v162[16] = v150[4];
    Espresso::ANECompilerEngine::transpose_kernel::supported_by_hw((uint64_t)__p, v47, v162, v160);
    v17 = LOBYTE(__p[0]) != 0;
    if (SHIBYTE(v118) < 0)
      operator delete(__p[1]);
    goto LABEL_176;
  }
  v78 = *(_QWORD *)(a2 + 8);
  v102 = *(int64x2_t **)a2;
  v103 = v78;
  if (v78)
  {
    v79 = (unint64_t *)(v78 + 8);
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "array_gather_kernel: unsupported operation array_gather");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v162, (__int128 *)__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v102, (Espresso::base_kernel::validate_for_engine_warning_t *)v162);
  v81 = v165;
  if (v165)
  {
    v82 = (unint64_t *)&v165->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v116[0] = (void **)v164;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v116);
  v116[0] = (void **)&v162[24];
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](v116);
  if ((v162[23] & 0x80000000) != 0)
    operator delete(*(void **)v162);
  if (SBYTE7(v118) < 0)
    operator delete(__p[0]);
  v17 = v103;
  if (v103)
  {
    v84 = (unint64_t *)(v103 + 8);
    do
      v59 = __ldaxr(v84);
    while (__stlxr(v59 - 1, v84));
    goto LABEL_173;
  }
LABEL_176:
  if (v133 < 0)
    operator delete(v132[0]);
LABEL_178:

  v98 = v169;
  if (v169)
  {
    v99 = (unint64_t *)&v169->__shared_owners_;
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  return v17;
}

void sub_1913E4D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  void *v55;
  uint64_t v56;

  if (a55 < 0)
    operator delete(__p);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v56 - 88);
  _Unwind_Resume(a1);
}

void sub_1913E4F58()
{
  JUMPOUT(0x1913E4F48);
}

const char *Espresso::generic_array_gather_kernel::kernel_type_str(Espresso::generic_array_gather_kernel *this)
{
  return "array_gather";
}

uint64_t Espresso::kernel_with_uniforms_<Espresso::array_gather_params_t,Espresso::base_kernel>::get_params(uint64_t a1)
{
  return a1 + 280;
}

void Espresso::ANECompilerEngine::mix_array_gather_kernel::compile(Espresso::ANECompilerEngine::mix_array_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _DWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  __n128 v29;
  std::string::size_type v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  _DWORD *v33;
  std::__shared_weak_count *v34;
  Espresso::ANECompilerEngine::compiler *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  _DWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  const __CFString *ANECAxisForNDAxis;
  __CFString *v49;
  _BOOL4 v51;
  Espresso::ANECompilerEngine::compiler *v52;
  _BOOL4 v53;
  uint64_t v54;
  int *v55;
  unsigned __int32 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  size_t v63;
  std::string *v64;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v65;
  void *v66;
  void *v67;
  __CFString *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::string v87;
  _BYTE v88[24];
  std::vector<std::string> v89;
  void *__p;
  char v91;
  id v92;
  __CFString *v93;
  id v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  __int128 v99;
  int v100;
  std::string __str;
  const void *v102;
  std::__shared_weak_count *v103;
  int *v104;
  std::__shared_weak_count *v105;
  const void *v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  __CFString *v110;
  std::string v111;
  __int128 v112;

  *((_QWORD *)&v112 + 1) = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 304))
  {
    v108 = 0;
    v109 = 0;
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6 && (v109 = std::__shared_weak_count::lock(v6)) != 0)
    {
      v7 = *((_QWORD *)a2 + 1);
      v108 = v7;
    }
    else
    {
      v7 = 0;
    }
    v87.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
    v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)a3, (__int128 **)&v87);
    v10 = (const void *)*((_QWORD *)v8 + 5);
    v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
    v106 = v10;
    v107 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = v108 + 136;
    v87.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
    v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v108 + 136, (unsigned __int8 *)v87.__r_.__value_.__l.__data_, (__int128 **)&v87);
    v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
    v104 = (int *)*((_QWORD *)v14 + 5);
    v105 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v87.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6) + 24;
    v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)v87.__r_.__value_.__l.__data_, (__int128 **)&v87);
    v19 = (std::__shared_weak_count *)*((_QWORD *)v18 + 6);
    v102 = (const void *)*((_QWORD *)v18 + 5);
    v103 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    if (v9)
    {
      v23 = (unint64_t *)&v9->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = v22[46];
      do
        v26 = __ldaxr(v23);
      while (__stlxr(v26 - 1, v23));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      v25 = v22[46];
    }
    v34 = v105;
    if (v105)
    {
      v35 = a2;
      v36 = (unint64_t *)&v105->__shared_owners_;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      v39 = v33[46];
      v38 = v33[47];
      do
        v40 = __ldaxr(v36);
      while (__stlxr(v40 - 1, v36));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    else
    {
      v35 = a2;
      v39 = v33[46];
      v38 = v33[47];
    }
    v42 = v103;
    if (v103)
    {
      v43 = (unint64_t *)&v103->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      v45 = v41[46];
      do
        v46 = __ldaxr(v43);
      while (__stlxr(v46 - 1, v43));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    else
    {
      v45 = v41[46];
    }
    v47 = v108;
    ANECAxisForNDAxis = Espresso::ANECompilerEngine::GetANECAxisForNDAxis((Espresso::ANECompilerEngine *)*((unsigned int *)this + 75), v104[7], *(_BYTE *)(v108 + 1281));
    v49 = (__CFString *)ANECAxisForNDAxis;
    v51 = *((_DWORD *)v102 + 7) == 1 && ANECAxisForNDAxis != CFSTR("Width");
    if (v25 == 3 && v39 == 2)
    {
      v52 = v35;
      v53 = 0;
      if (v45 == 2)
        v53 = *((_DWORD *)this + 75) == 0;
    }
    else
    {
      v52 = v35;
      v53 = 0;
    }
    v54 = *((_QWORD *)a3 + 6);
    if (*(char *)(v54 + 47) < 0)
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v54 + 24), *(_QWORD *)(v54 + 32));
    else
      __str = *(std::string *)(v54 + 24);
    if (!v51)
    {
LABEL_92:
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v87.__r_.__value_.__l.__data_, (id *)a3);
      std::string::operator=(v89.__begin_ + 1, &__str);
      if (v53)
      {
        if (*((char *)a3 + 23) >= 0)
          v63 = *((unsigned __int8 *)a3 + 23);
        else
          v63 = *((_QWORD *)a3 + 1);
        std::string::basic_string[abi:ne180100]((uint64_t)&v111, v63 + 16);
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v64 = &v111;
        else
          v64 = (std::string *)v111.__r_.__value_.__r.__words[0];
        if (v63)
        {
          if (*((char *)a3 + 23) >= 0)
            v65 = a3;
          else
            v65 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
          memmove(v64, v65, v63);
        }
        strcpy((char *)v64 + v63, "@__transpose_out");
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v111;
        std::string::operator=(&v87, &__str);
      }
      v66 = (void *)objc_opt_new();
      v110 = v49;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v110, 1);
      v67 = (void *)objc_claimAutoreleasedReturnValue();
      v68 = v93;
      v93 = CFSTR("Gather");

      objc_msgSend(v66, "setObject:forKeyedSubscript:", v67, CFSTR("GatherNDAxes"));
      objc_storeStrong(&v94, v66);
      Espresso::ANECompilerEngine::compiler::add_unit(v52, (const Espresso::ANECompilerEngine::compiler::unit_t *)&v87);

      if (v91 < 0)
        operator delete(__p);
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v87.__r_.__value_.__l.__data_);
        if (!v53)
          goto LABEL_132;
      }
      else if (!v53)
      {
        goto LABEL_132;
      }
      v100 = 4;
      v99 = xmmword_191A93500;
      Espresso::abstract_engine_factory::shared(&v97);
      std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(&v95, (_QWORD *)(v108 + 16), (__n128 *)&v99);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v87.__r_.__value_.__l.__data_, (id *)a3);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v111, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v111 = __str;
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v89, &v111, &v112, 1uLL);
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v111.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, std::string *))(*(_QWORD *)v95 + 328))(v95, v52, &v87);

      if (v91 < 0)
        operator delete(__p);
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
      v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      v69 = v96;
      if (v96)
      {
        v70 = (unint64_t *)&v96->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = v98;
      if (v98)
      {
        v73 = (unint64_t *)&v98->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
LABEL_132:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v75 = v103;
      if (v103)
      {
        v76 = (unint64_t *)&v103->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      v78 = v105;
      if (v105)
      {
        v79 = (unint64_t *)&v105->__shared_owners_;
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = v107;
      if (v107)
      {
        v82 = (unint64_t *)&v107->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = v109;
      if (v109)
      {
        v85 = (unint64_t *)&v109->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          v32 = v84;
          goto LABEL_154;
        }
      }
      return;
    }
    v55 = (int *)&v99 + 1;
    v99 = xmmword_191A761E0;
    v100 = 4;
    if (v38)
    {
      if (v49 != CFSTR("Height"))
      {
        if (v49 != CFSTR("Channel"))
        {
          if (v49 != CFSTR("Batch"))
          {
            if (v49 == CFSTR("Depth"))
              goto LABEL_71;
            goto LABEL_73;
          }
          goto LABEL_70;
        }
LABEL_68:
        v56 = 2;
        v55 = (int *)&v99 + 2;
LABEL_72:
        LODWORD(v99) = v56;
        *v55 = 0;
        goto LABEL_73;
      }
    }
    else if (v49 != CFSTR("Height"))
    {
      if (v49 == CFSTR("Channel"))
      {
LABEL_70:
        v56 = 3;
        v55 = (int *)((unint64_t)&v99 | 0xC);
        goto LABEL_72;
      }
      if (v49 == CFSTR("Batch"))
      {
LABEL_71:
        v56 = 4;
        v55 = &v100;
        goto LABEL_72;
      }
      if (v49 != CFSTR("Depth"))
      {
LABEL_73:
        Espresso::abstract_engine_factory::shared(&v97);
        std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(&v95, (_QWORD *)(v47 + 16), (__n128 *)&v99);
        Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v87.__r_.__value_.__l.__data_, (id *)a3);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v111, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v111 = __str;
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v89, &v111, &v112, 1uLL);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        std::string::append(&__str, "@__transpose_in");
        std::string::operator=(&v87, &__str);
        (*(void (**)(uint64_t, Espresso::ANECompilerEngine::compiler *, std::string *))(*(_QWORD *)v95 + 328))(v95, v52, &v87);

        if (v91 < 0)
          operator delete(__p);
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        v111.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
        if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v87.__r_.__value_.__l.__data_);
        v57 = v96;
        if (v96)
        {
          v58 = (unint64_t *)&v96->__shared_owners_;
          do
            v59 = __ldaxr(v58);
          while (__stlxr(v59 - 1, v58));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = v98;
        if (v98)
        {
          v61 = (unint64_t *)&v98->__shared_owners_;
          do
            v62 = __ldaxr(v61);
          while (__stlxr(v62 - 1, v61));
          if (!v62)
          {
            ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
            std::__shared_weak_count::__release_weak(v60);
          }
        }
        goto LABEL_92;
      }
      goto LABEL_68;
    }
    v56 = 1;
    goto LABEL_72;
  }
  *(_OWORD *)&v87.__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 280);
  LODWORD(v87.__r_.__value_.__r.__words[2]) = *((_DWORD *)this + 74);
  v27 = (std::__shared_weak_count *)operator new(0x220uLL);
  v27->__shared_owners_ = 0;
  v28 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA130;
  v29 = Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel((uint64_t)&v27[1], (_QWORD *)this + 1, (__n128 *)&v87);
  __str.__r_.__value_.__r.__words[0] = v30;
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
  ((void (*)(__n128))v27[1].__vftable[8].~__shared_weak_count_0)(v29);
  do
    v31 = __ldaxr(v28);
  while (__stlxr(v31 - 1, v28));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    v32 = v27;
LABEL_154:
    std::__shared_weak_count::__release_weak(v32);
  }
}

void sub_1913E5998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  if (a40 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 152);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_array_gather_kernel::compile(Espresso::ANECompilerEngine::mix_array_gather_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::mix_array_gather_kernel::compile((Espresso::ANECompilerEngine::mix_array_gather_kernel *)((char *)this - 312), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_array_gather_kernel::~mix_array_gather_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 39);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

void std::allocate_shared[abi:ne180100]<Espresso::ANECompilerEngine::transpose_kernel,std::allocator<Espresso::ANECompilerEngine::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> &,Espresso::compute_path const&,Espresso::transpose_params_t &,void>(_QWORD *a1, _QWORD *a2, __n128 *a3)
{
  _QWORD *v6;
  uint64_t v7;

  v6 = operator new(0x230uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBA0C0;
  Espresso::ANECompilerEngine::transpose_kernel::transpose_kernel((uint64_t)(v6 + 3), a2, a3);
  *a1 = v7;
  a1[1] = v6;
}

void sub_1913E5B70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::ANECompilerEngine::mix_gather_kernel::mix_gather_kernel(uint64_t a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  __n128 result;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&_Q0 = 0x100000001;
  *((_QWORD *)&_Q0 + 1) = 0x100000001;
  *(_OWORD *)v5 = _Q0;
  *(_DWORD *)(v6 + 296) = -2;
  v8 = *(_BYTE *)(*a2 + 123);
  LOBYTE(_Q0) = 0;
  BYTE4(_Q0) = 0;
  BYTE8(_Q0) = 0;
  BYTE12(_Q0) = 0;
  *(_OWORD *)(v6 + 440) = _Q0;
  *(_OWORD *)(v6 + 456) = _Q0;
  *(_OWORD *)(v6 + 312) = _Q0;
  *(_OWORD *)(v6 + 328) = _Q0;
  *(_OWORD *)(v6 + 344) = _Q0;
  *(_BYTE *)(v6 + 360) = 0;
  *(_OWORD *)(v6 + 368) = _Q0;
  *(_OWORD *)(v6 + 384) = _Q0;
  *(_OWORD *)(v6 + 400) = _Q0;
  *(_OWORD *)(v6 + 416) = _Q0;
  *(_BYTE *)(v6 + 432) = 0;
  *(_DWORD *)(v6 + 472) = 1065353216;
  *(_WORD *)(v6 + 480) = 0;
  *(_BYTE *)(v6 + 482) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 204) = _Q0;
  *(_BYTE *)(v6 + 492) = 0;
  *(_QWORD *)(v6 + 496) = 0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_BYTE *)(v6 + 512) = v8;
  *(_QWORD *)v6 = &off_1E2D775B8;
  *(_QWORD *)(v6 + 304) = &unk_1E2D77718;
  result = *a3;
  *(_DWORD *)(v6 + 296) = a3[1].n128_u32[0];
  *(__n128 *)v5 = result;
  return result;
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA130;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_gather_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA130;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::mix_gather_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA0C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::ANECompilerEngine::transpose_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBA0C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::ANECompilerEngine::transpose_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::ANECompilerEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(void **this)
{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
}

{
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this + 37);
  Espresso::base_kernel::~base_kernel((Espresso::base_kernel *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::stir_gather_nd_kernel::__set_weight_raw_blob(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4, size_t a5)
{
  Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob((_QWORD *)(a1 + 296), a3, a4, a5);
}

std::__shared_weak_count *Espresso::ANECompilerEngine::stir_gather_nd_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  Espresso::ANECompilerEngine *v9;
  NSString *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  const Espresso::net *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  const Espresso::net *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  __int128 v34;
  const void *v35;
  unint64_t *v36;
  unint64_t v37;
  const Espresso::net *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 *v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t **v65;
  _QWORD *v66;
  char *v67;
  unsigned int v68;
  char *v69;
  int v70;
  Espresso::ANECompilerEngine *v71;
  int v72;
  int v73;
  int v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  int64x2_t *v90;
  std::__shared_weak_count *v91;
  void **v92;
  std::__shared_weak_count *v93;
  std::string *v94;
  void *v95[2];
  char v96;
  std::string v97;
  std::string v98;
  _OWORD v99[2];
  uint64_t v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  _OWORD v112[2];
  uint64_t v113;
  void *v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  __int128 v119;
  int v120;
  unsigned int v121;
  int v122;
  _OWORD v123[2];
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 __p;
  int v131;
  char v132;
  unsigned int v133;
  int64x2_t *v134;
  std::__shared_weak_count *v135;
  int64x2_t *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  int __src;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  int v150[3];

  v6 = *((_QWORD *)a3 + 6);
  v139 = 0;
  v138 = 0;
  v7 = *(std::__shared_weak_count **)(v6 + 80);
  if (v7 && (v139 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = *(_QWORD *)(v6 + 72);
    v138 = v8;
  }
  else
  {
    v8 = 0;
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v9 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix_e(v9, v10))
  {
    v11 = *(std::__shared_weak_count **)(a2 + 8);
    v136 = *(int64x2_t **)a2;
    v137 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "gather_nd_kernel: not enabled on requested architecture.");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v141, &__p, (uint64_t)a3, 0);
    Espresso::emit_kernel_validation_warning(&v136, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
    v14 = (std::__shared_weak_count *)v146;
    if ((_QWORD)v146)
    {
      v15 = (unint64_t *)(v146 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    *(_QWORD *)&v119 = &v144;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    *(_QWORD *)&v119 = (char *)&v142 + 8;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
    if (SBYTE7(v142) < 0)
      operator delete((void *)v141);
    if (v132 < 0)
      operator delete((void *)__p);
    v17 = v137;
    if (v137)
    {
      v18 = (unint64_t *)&v137->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
LABEL_72:
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v17 = 0;
      goto LABEL_75;
    }
    goto LABEL_75;
  }
  v20 = *(_QWORD **)a3;
  if (*((_QWORD *)a3 + 1) - *(_QWORD *)a3 == 128 && *((_QWORD *)a3 + 3) != *((_QWORD *)a3 + 4))
  {
    v21 = (const Espresso::net *)v138;
    v22 = v139;
    v128 = v138;
    v129 = v139;
    if (v139)
    {
      v23 = (unint64_t *)&v139->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v20 = *(_QWORD **)a3;
    }
    v25 = *((_OWORD *)v20 + 1);
    v26 = v20[4];
    v123[0] = *(_OWORD *)v20;
    v123[1] = v25;
    v124 = v26;
    v125 = 0;
    v126 = 0;
    v127 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v125, (const void *)v20[5], v20[6], (uint64_t)(v20[6] - v20[5]) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&__p, v21, (const Espresso::layer_shape *)v123, 1);
    if (v125)
    {
      v126 = v125;
      operator delete(v125);
    }
    if (v22)
    {
      v27 = (unint64_t *)&v22->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v29 = (const Espresso::net *)v138;
    v30 = v139;
    v117 = v138;
    v118 = v139;
    if (v139)
    {
      v31 = (unint64_t *)&v139->__shared_owners_;
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    v33 = *(_QWORD **)a3;
    v34 = *(_OWORD *)(*(_QWORD *)a3 + 80);
    v112[0] = *(_OWORD *)(*(_QWORD *)a3 + 64);
    v112[1] = v34;
    v35 = (const void *)v33[13];
    v113 = v33[12];
    v114 = 0;
    v115 = 0;
    v116 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v114, v35, v33[14], (uint64_t)(v33[14] - (_QWORD)v35) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v119, v29, (const Espresso::layer_shape *)v112, 1);
    if (v114)
    {
      v115 = v114;
      operator delete(v114);
    }
    if (v30)
    {
      v36 = (unint64_t *)&v30->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    v38 = (const Espresso::net *)v138;
    v39 = v139;
    v104 = v138;
    v105 = v139;
    if (v139)
    {
      v40 = (unint64_t *)&v139->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = *((_QWORD *)a3 + 3);
    v43 = *(_QWORD *)(v42 + 32);
    v44 = *(_OWORD *)(v42 + 16);
    v99[0] = *(_OWORD *)v42;
    v99[1] = v44;
    v100 = v43;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v101, *(const void **)(v42 + 40), *(_QWORD *)(v42 + 48), (uint64_t)(*(_QWORD *)(v42 + 48) - *(_QWORD *)(v42 + 40)) >> 2);
    Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v106, v38, (const Espresso::layer_shape *)v99, 1);
    if (v101)
    {
      v102 = v101;
      operator delete(v101);
    }
    if (v39)
    {
      v45 = (unint64_t *)&v39->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v47 = (_QWORD *)*((_QWORD *)a3 + 6);
    v48 = *((_QWORD *)a3 + 9);
    v49 = *(__int128 **)(*v47 + 224 * v48 + 136);
    if (*((char *)v49 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v98, *(const std::string::value_type **)v49, *((_QWORD *)v49 + 1));
      v47 = (_QWORD *)*((_QWORD *)a3 + 6);
      v48 = *((_QWORD *)a3 + 9);
    }
    else
    {
      v50 = *v49;
      v98.__r_.__value_.__r.__words[2] = *((_QWORD *)v49 + 2);
      *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v50;
    }
    v62 = *(_QWORD *)(*v47 + 224 * v48 + 136);
    if (*(char *)(v62 + 47) < 0)
      std::string::__init_copy_ctor_external(&v97, *(const std::string::value_type **)(v62 + 24), *(_QWORD *)(v62 + 32));
    else
      v97 = *(std::string *)(v62 + 24);
    v63 = a3[16];
    v64 = v138;
    v65 = (uint64_t **)(v138 + 352);
    v66 = *(_QWORD **)(v138 + 360);
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v66, &v98))
    {
      v94 = &v98;
      v67 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65, &v98, (uint64_t)&std::piecewise_construct, (__int128 **)&v94);
      v141 = *(_OWORD *)(v67 + 56);
      *(_QWORD *)&v143 = 0;
      v142 = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v142, *((const void **)v67 + 9), *((_QWORD *)v67 + 10), (uint64_t)(*((_QWORD *)v67 + 10) - *((_QWORD *)v67 + 9)) >> 2);
      if (DWORD2(v141) == -1)
        v68 = 1;
      else
        v68 = DWORD2(v141);
      if ((_QWORD)v142)
      {
        *((_QWORD *)&v142 + 1) = v142;
        operator delete((void *)v142);
      }
      v66 = *(_QWORD **)(v64 + 360);
    }
    else
    {
      v68 = v63;
    }
    if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v66, &v97))
    {
      v94 = &v97;
      v69 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v65, &v97, (uint64_t)&std::piecewise_construct, (__int128 **)&v94);
      v141 = *(_OWORD *)(v69 + 56);
      *(_QWORD *)&v143 = 0;
      v142 = 0uLL;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v142, *((const void **)v69 + 9), *((_QWORD *)v69 + 10), (uint64_t)(*((_QWORD *)v69 + 10) - *((_QWORD *)v69 + 9)) >> 2);
      v63 = DWORD2(v141) == -1 ? 1 : DWORD2(v141);
      if ((_QWORD)v142)
      {
        *((_QWORD *)&v142 + 1) = v142;
        operator delete((void *)v142);
      }
    }
    Espresso::ANECompilerEngine::ane_kernel::get_ane_validator((Espresso::ANECompilerEngine::ane_kernel *)&v92, (NSString *)(a1 + 296), v9);
    v70 = *(unsigned __int8 *)(v64 + 1281);
    v71 = v9;
    if (v68 > 4 || v68 == 3 || v63 > 4 || v63 == 3)
    {
      LOBYTE(v94) = 0;
      std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: unsupported compute path for ANE.");
      goto LABEL_137;
    }
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&__p, v71))
    {
      LOBYTE(v94) = 0;
      std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: input tensor dimensions exceed ANE limit.");
      goto LABEL_137;
    }
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v119, v71))
    {
      LOBYTE(v94) = 0;
      std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: indexes tensor dimensions exceed ANE limit.");
      goto LABEL_137;
    }
    if (!Espresso::ANECompilerEngine::blob_shape_ane_compatible(&v106, v71))
    {
      LOBYTE(v94) = 0;
      std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: output tensor dimensions exceed ANE limit.");
      goto LABEL_137;
    }
    v72 = *(_DWORD *)(a1 + 280);
    if (v72)
    {
      if (v72 != 1)
      {
        if (v72 != 2)
        {
          LOBYTE(v94) = 0;
          std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: Unknown GATHER_ND mode.");
          goto LABEL_137;
        }
        if (v121 != v133)
        {
          LOBYTE(v94) = 0;
          std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: Torch gather expects same number of dimensions for data and index tensor.");
          goto LABEL_137;
        }
        if ((_DWORD)v119 != v106
          || *(_QWORD *)((char *)&v119 + 4) != v107
          || HIDWORD(v119) != v108
          || (v73 = v120, v120 != v109)
          || v122 != v111
          || v121 != v110)
        {
          LOBYTE(v94) = 0;
          std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: Torch gather expects indexes to be the same shape as the output.");
          goto LABEL_137;
        }
        v89 = v119;
        v87 = HIDWORD(v119);
        v88 = *(_QWORD *)((char *)&v119 + 4);
        v150[0] = 0;
        {
          LOBYTE(v94) = 0;
          std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: Invalid gather axis with torch gather.");
          goto LABEL_137;
        }
        v74 = v150[0];
        if (v150[0])
        {
          if ((_DWORD)__p != v89)
            goto LABEL_172;
          if (v150[0] != 1)
          {
            if (DWORD2(__p) != HIDWORD(v88))
              goto LABEL_172;
            if (v150[0] == 2)
            {
              if (HIDWORD(__p) != v87)
                goto LABEL_172;
              goto LABEL_171;
            }
          }
        }
        else if (DWORD2(__p) != HIDWORD(v88))
        {
          goto LABEL_172;
        }
        if (DWORD1(__p) != (_DWORD)v88)
          goto LABEL_172;
        if (v150[0] != 3)
        {
          if (HIDWORD(__p) != v87)
            goto LABEL_172;
          if (v150[0] == 4)
          {
LABEL_176:
            v148 = 0u;
            v149 = 0u;
            v146 = 0u;
            v147 = 0u;
            v144 = 0u;
            v145 = 0u;
            v142 = 0u;
            v143 = 0u;
            v141 = 0u;
            __src = v74;
            std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>((_QWORD *)&v145 + 1, &__src, &v141);
            goto LABEL_136;
          }
        }
LABEL_171:
        if (v131 != v73)
        {
LABEL_172:
          LOBYTE(v94) = 0;
          std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: Indexes shape can only differ from input shape on gather axis for torch mode.");
LABEL_137:

          v75 = v93;
          if (v93)
          {
            v76 = (unint64_t *)&v93->__shared_owners_;
            do
              v77 = __ldaxr(v76);
            while (__stlxr(v77 - 1, v76));
            if (!v77)
            {
              ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
              std::__shared_weak_count::__release_weak(v75);
            }
          }
          if (!(_BYTE)v94)
          {
            v78 = *(std::__shared_weak_count **)(a2 + 8);
            v90 = *(int64x2_t **)a2;
            v91 = v78;
            if (v78)
            {
              v79 = (unint64_t *)&v78->__shared_owners_;
              do
                v80 = __ldxr(v79);
              while (__stxr(v80 + 1, v79));
            }
            Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v141, (__int128 *)v95, (uint64_t)a3, 0);
            Espresso::emit_kernel_validation_warning(&v90, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
            v81 = (std::__shared_weak_count *)v146;
            if ((_QWORD)v146)
            {
              v82 = (unint64_t *)(v146 + 8);
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                std::__shared_weak_count::__release_weak(v81);
              }
            }
            v92 = (void **)&v144;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
            v92 = (void **)&v142 + 1;
            std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v92);
            if (SBYTE7(v142) < 0)
              operator delete((void *)v141);
            v84 = v91;
            if (v91)
            {
              v85 = (unint64_t *)&v91->__shared_owners_;
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
          }
          v17 = (std::__shared_weak_count *)((_BYTE)v94 != 0);
          if (v96 < 0)
            operator delete(v95[0]);
          if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v97.__r_.__value_.__l.__data_);
          if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v98.__r_.__value_.__l.__data_);
          goto LABEL_75;
        }
        goto LABEL_176;
      }
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v141 = 0u;
      {
        LOBYTE(v94) = 0;
        std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: Failed generating gather plan for TF_GATHER_ND");
        goto LABEL_136;
      }
    }
    else
    {
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v141 = 0u;
      {
        LOBYTE(v94) = 0;
        std::string::basic_string[abi:ne180100]<0>(v95, "gather_nd_kernel: Generating transposes failed for TF gather.");
        goto LABEL_136;
      }
    }
LABEL_136:
    goto LABEL_137;
  }
  v51 = *(std::__shared_weak_count **)(a2 + 8);
  v134 = *(int64x2_t **)a2;
  v135 = v51;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "gather_nd_kernel: has to have 2 bottom tensors");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v141, &__p, (uint64_t)a3, 0);
  Espresso::emit_kernel_validation_warning(&v134, (Espresso::base_kernel::validate_for_engine_warning_t *)&v141);
  v54 = (std::__shared_weak_count *)v146;
  if ((_QWORD)v146)
  {
    v55 = (unint64_t *)(v146 + 8);
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  *(_QWORD *)&v119 = &v144;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  *(_QWORD *)&v119 = (char *)&v142 + 8;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v119);
  if (SBYTE7(v142) < 0)
    operator delete((void *)v141);
  if (v132 < 0)
    operator delete((void *)__p);
  v17 = v135;
  if (v135)
  {
    v57 = (unint64_t *)&v135->__shared_owners_;
    do
      v19 = __ldaxr(v57);
    while (__stlxr(v19 - 1, v57));
    goto LABEL_72;
  }
LABEL_75:

  v58 = v139;
  if (v139)
  {
    v59 = (unint64_t *)&v139->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  return v17;
}

void sub_1913E69FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  void *v34;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a26 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

void sub_1913E6BC8()
{
  JUMPOUT(0x1913E6BB8);
}

void Espresso::ANECompilerEngine::stir_gather_nd_kernel::compile(Espresso::ANECompilerEngine::stir_gather_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  const Espresso::net *v6;
  std::__shared_weak_count *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  char *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  char *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  const Espresso::net *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  const Espresso::net *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  const Espresso::net *v44;
  __int128 *v45;
  __int128 v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  __int128 *v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  std::string *v56;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v57;
  std::string *v58;
  std::string *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  size_t v64;
  std::string *v65;
  const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *v66;
  std::string *v67;
  std::string *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  size_t size;
  std::string *v74;
  std::string *v75;
  const std::string::value_type *v76;
  std::string::size_type v77;
  std::string *v78;
  __int128 v79;
  std::string *v80;
  std::string *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int *v86;
  size_t v87;
  std::string *v88;
  std::string *v89;
  const std::string::value_type *v90;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  std::string *v95;
  size_t v96;
  std::string *v97;
  std::string *v98;
  const std::string::value_type *v99;
  std::string::size_type v100;
  std::string *v101;
  __int128 v102;
  int v103;
  int v104;
  void *v105;
  id v106;
  size_t v107;
  std::string *v108;
  std::string *v109;
  const std::string::value_type *v110;
  std::string::size_type v111;
  std::string *v112;
  __int128 v113;
  int v114;
  int v115;
  void *v116;
  id v117;
  size_t v118;
  std::string *v119;
  std::string *v120;
  const std::string::value_type *v121;
  std::string::size_type v122;
  std::string *v123;
  __int128 v124;
  int v125;
  int v126;
  void *v127;
  id v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  void *v133;
  void *v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  id v139;
  std::string *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  void *v144;
  void *v145;
  id v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  std::string::size_type v150;
  std::string *v151;
  unint64_t v152;
  void *v153;
  uint64_t data_low;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  signed int v159;
  signed int v160;
  signed int v161;
  signed int v162;
  void *v163;
  void *v164;
  void *v165;
  void *v166;
  void *v167;
  void *v168;
  id v169;
  unint64_t v170;
  char *v171;
  std::string *v172;
  uint64_t v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  std::string::size_type v177;
  void *v178;
  uint64_t i;
  void *v180;
  unsigned int *v181;
  unsigned int *j;
  uint64_t v183;
  __CFString *v184;
  void *v185;
  void *v186;
  size_t v187;
  _BYTE *v188;
  std::string *v189;
  std::string *v190;
  std::string::size_type v191;
  std::string *v192;
  __int128 v193;
  std::string *v194;
  std::string *v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  std::string *v200;
  std::string *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t v208;
  unint64_t *v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t v214;
  float v215;
  unint64_t *v216;
  unint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  int *v232;
  _WORD *v233;
  int v234;
  __int128 v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  std::__shared_weak_count *v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  int *v248;
  _WORD *v249;
  int v250;
  int v252;
  Espresso::ANECompilerEngine::compiler::build_state_t *v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t *v259;
  unint64_t v260;
  void *v261;
  id v262;
  void *v263;
  void *v264;
  void *v265;
  void *v266;
  uint64_t weights_file_index;
  void *v268;
  void *v269;
  uint64_t v270;
  unint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  void *v277;
  void *v278;
  void *v279;
  uint64_t v280;
  void *v281;
  void *v282;
  std::string *v283;
  std::string *v284;
  uint64_t v285;
  char v286;
  std::string::size_type v287;
  std::string::size_type v288;
  uint64_t v289;
  unsigned __int8 *v290;
  std::string *v291;
  const std::string::value_type *data;
  __int128 v293;
  __CFString *v294;
  std::string *v295;
  std::string *v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  uint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  std::__shared_weak_count *v307;
  unint64_t *v308;
  unint64_t v309;
  std::__shared_weak_count *v310;
  unint64_t *v311;
  unint64_t v312;
  unint64_t *v313;
  unint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t *v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  std::__shared_weak_count *v325;
  unint64_t *v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  std::__shared_weak_count *v331;
  unint64_t *v332;
  unint64_t v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  const char *v337;
  int *v338;
  int v339;
  uint64_t k;
  float v341;
  int v342;
  _WORD *v343;
  int v344;
  std::runtime_error *exception;
  int *v347;
  uint64_t m;
  int v349;
  int v350;
  unsigned int v351;
  unsigned int v352;
  int v353;
  Espresso *v354;
  const char *v355;
  float v356;
  NSObject *v358;
  double v359;
  uint64_t v360;
  _WORD *v361;
  int v362;
  void *v364;
  Espresso::ANECompilerEngine::compiler *v365;
  std::string *v367;
  unsigned int *v368;
  id obj;
  int __val;
  std::__shared_weak_count *v372;
  std::__shared_weak_count *v373;
  void *v374;
  void *v375;
  std::string __str[2];
  std::vector<std::string> v377;
  void *v378;
  char v379;
  id v380;
  __CFString *v381;
  id v382;
  std::string v383;
  std::string v384;
  std::string v385;
  uint64_t v386;
  std::string *v387;
  unint64_t v388;
  std::string v389;
  std::string v390;
  char v391[40];
  void *v392;
  void *v393;
  const Espresso::net *v394;
  std::__shared_weak_count *v395;
  _BYTE v396[24];
  int v397;
  char v398[40];
  void *v399;
  void *v400;
  const Espresso::net *v401;
  std::__shared_weak_count *v402;
  __int128 v403;
  __int128 v404;
  char v405[40];
  void *__p;
  void *v407;
  const Espresso::net *v408;
  std::__shared_weak_count *v409;
  _BYTE v410[24];
  unsigned int v411;
  uint64_t v412;
  std::__shared_weak_count *v413;
  uint64_t v414;
  std::__shared_weak_count *v415;
  uint64_t v416;
  std::__shared_weak_count *v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  uint64_t v427;
  std::__shared_weak_count *v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  const Espresso::net *v431;
  std::__shared_weak_count *v432;
  __int128 v433;
  uint64_t v434;
  std::__shared_weak_count *v435;
  __int128 v436;
  uint64_t v437;
  std::__shared_weak_count *v438;
  uint64_t v439[2];
  uint64_t v440;
  std::__shared_weak_count *v441;
  std::string v442;
  std::__shared_weak_count *v443;
  unsigned int v444;
  unsigned int v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  _BYTE __src[40];
  std::vector<std::string> v449;
  int v450;
  void *v451;
  char v452;
  int v453;
  id v454;
  __CFString *v455;
  id v456;
  std::string v457;
  std::string v458;
  __int128 v459;
  std::string::size_type v460;
  int v461;
  __int128 v462;
  std::string::size_type v463;
  int v464;
  __int128 v465;
  id v466;
  uint64_t v467;
  std::string v468;
  __int128 v469;
  uint64_t v470;

  v470 = *MEMORY[0x1E0C80C00];
  v432 = 0;
  v431 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v3
    || (v5 = std::__shared_weak_count::lock(v3), (v432 = v5) == 0)
    || (v6 = (const Espresso::net *)*((_QWORD *)a2 + 1), (v431 = v6) == 0))
  {
    v337 = "Inconsistent state: null network";
    goto LABEL_629;
  }
  if (!*((_QWORD *)v6 + 72))
  {
    v337 = "Inconsistent state: blob_storage";
LABEL_629:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v337);
  }
  v7 = v5;
  v457.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6 + 136, (unsigned __int8 *)v457.__r_.__value_.__l.__data_, (__int128 **)&v457);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v8 + 6);
  v429 = *((_QWORD *)v8 + 5);
  v430 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6 + 136, (unsigned __int8 *)a3, (__int128 **)&v457);
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v427 = *((_QWORD *)v12 + 5);
  v428 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override((uint64_t)v6 + 472);
  v364 = (void *)objc_claimAutoreleasedReturnValue();
  v365 = a2;
  v425 = 0u;
  v426 = 0u;
  v423 = 0u;
  v424 = 0u;
  v421 = 0u;
  v422 = 0u;
  v419 = 0u;
  v420 = 0u;
  v418 = 0u;
  v457.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6 + 136, (unsigned __int8 *)v457.__r_.__value_.__l.__data_, (__int128 **)&v457);
  v18 = *((_QWORD *)v16 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  v416 = v18;
  v417 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v457.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6) + 24;
  v21 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6 + 136, (unsigned __int8 *)v457.__r_.__value_.__l.__data_, (__int128 **)&v457);
  v22 = (std::__shared_weak_count *)*((_QWORD *)v21 + 6);
  v414 = *((_QWORD *)v21 + 5);
  v415 = v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6 + 136, (unsigned __int8 *)a3, (__int128 **)&v457);
  v26 = (std::__shared_weak_count *)*((_QWORD *)v25 + 6);
  v412 = *((_QWORD *)v25 + 5);
  v413 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v408 = v6;
  v409 = v7;
  v29 = (unint64_t *)&v7->__shared_owners_;
  do
    v30 = __ldxr(v29);
  while (__stxr(v30 + 1, v29));
  Espresso::abstract_blob_container::shape(v405, v18);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v410, v6, (const Espresso::layer_shape *)v405, 1);
  if (__p)
  {
    v407 = __p;
    operator delete(__p);
  }
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  v32 = v431;
  v33 = v432;
  v401 = v431;
  v402 = v432;
  if (v432)
  {
    v34 = (unint64_t *)&v432->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  Espresso::abstract_blob_container::shape(v398, v414);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)&v403, v32, (const Espresso::layer_shape *)v398, 1);
  if (v399)
  {
    v400 = v399;
    operator delete(v399);
  }
  if (v33)
  {
    v36 = (unint64_t *)&v33->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v38 = v431;
  v39 = v432;
  v394 = v431;
  v395 = v432;
  if (v432)
  {
    v40 = (unint64_t *)&v432->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  Espresso::abstract_blob_container::shape(v391, v412);
  Espresso::ANECompilerEngine::blob_container::get_ane_mapped_shape((Espresso::ANECompilerEngine::blob_container *)v396, v38, (const Espresso::layer_shape *)v391, 1);
  if (v392)
  {
    v393 = v392;
    operator delete(v392);
  }
  if (v39)
  {
    v42 = (unint64_t *)&v39->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v44 = v431;
  v45 = (__int128 *)*((_QWORD *)a3 + 6);
  if (*((char *)v45 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v390, *(const std::string::value_type **)v45, *((_QWORD *)v45 + 1));
  }
  else
  {
    v46 = *v45;
    v390.__r_.__value_.__r.__words[2] = *((_QWORD *)v45 + 2);
    *(_OWORD *)&v390.__r_.__value_.__l.__data_ = v46;
  }
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v44 + 45), &v390))
  {
    std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v44 + 352, &v390);
  }
  if (SHIBYTE(v390.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v390.__r_.__value_.__l.__data_);
  v47 = *((_DWORD *)a3 + 26);
  v48 = *((_QWORD *)a3 + 6);
  if (*(char *)(v48 + 47) < 0)
    std::string::__init_copy_ctor_external(&v389, *(const std::string::value_type **)(v48 + 24), *(_QWORD *)(v48 + 32));
  else
    v389 = *(std::string *)(v48 + 24);
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v44 + 45), &v389))
  {
    v49 = *(_DWORD *)(std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v44 + 352, &v389) + 8);
    if (v49 == -1)
      v47 = 1;
    else
      v47 = v49;
  }
  if (SHIBYTE(v389.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v389.__r_.__value_.__l.__data_);
  v50 = *((_DWORD *)this + 70);
  if (v50)
  {
    if (v50 == 1)
    {
    }
    else
    {
      if (v50 != 2)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Unexpected gather nd mode. Should have been prohibited by valid_for_engine.");
      LODWORD(v457.__r_.__value_.__l.__data_) = 0;
      *(_QWORD *)&v420 = *((_QWORD *)&v419 + 1);
      *(_DWORD *)__src = v457.__r_.__value_.__l.__data_;
      std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>((_QWORD *)&v422 + 1, __src, &__src[4]);
    }
  }
  {
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("gather_nd_kernel: bad tf.gather mode data transpose. Should have been prohibited by gather_nd valid_for_engine.");
  }
  v386 = 0;
  v387 = 0;
  v388 = 0;
  v51 = (__int128 *)*((_QWORD *)a3 + 6);
  if (*((char *)v51 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v385, *(const std::string::value_type **)v51, *((_QWORD *)v51 + 1));
  }
  else
  {
    v52 = *v51;
    v385.__r_.__value_.__r.__words[2] = *((_QWORD *)v51 + 2);
    *(_OWORD *)&v385.__r_.__value_.__l.__data_ = v52;
  }
  if (*((char *)a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v384, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  else
    v384 = *(std::string *)a3;
  v53 = *((_QWORD *)a3 + 6);
  if (*(char *)(v53 + 47) < 0)
    std::string::__init_copy_ctor_external(&v383, *(const std::string::value_type **)(v53 + 24), *(_QWORD *)(v53 + 32));
  else
    v383 = *(std::string *)(v53 + 24);
  v54 = v418;
  if (*((_QWORD *)&v418 + 1) - (_QWORD)v418 != 48)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Gather ND plan did not check for rank 5 3d transposes.");
  if (*(_QWORD *)(v418 + 8) != *(_QWORD *)v418)
  {
    if (*((char *)a3 + 23) >= 0)
      v55 = *((unsigned __int8 *)a3 + 23);
    else
      v55 = *((_QWORD *)a3 + 1);
    v56 = __str;
    std::string::basic_string[abi:ne180100]((uint64_t)__str, v55 + 44);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v56 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if (v55)
    {
      if (*((char *)a3 + 23) >= 0)
        v57 = a3;
      else
        v57 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      memmove(v56, v57, v55);
    }
    strcpy((char *)v56 + v55, "__rank5_3d_input_tensor_pre_gather_transpose");
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v457, (uint64_t)&v385, __str, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)v418, (std::string *)((char *)a3 + 80));
    v58 = v387;
    if ((unint64_t)v387 >= v388)
    {
      v60 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
      if (v60 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v61 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
      if (v61 <= v60 + 1)
        v61 = v60 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
        v62 = 0x1C71C71C71C71C7;
      else
        v62 = v61;
      *(_QWORD *)&__src[32] = &v388;
      if (v62)
        v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v62);
      else
        v63 = 0;
      *(_QWORD *)__src = v62;
      *(_QWORD *)&__src[8] = v62 + 144 * v60;
      *(_QWORD *)&__src[16] = *(_QWORD *)&__src[8];
      *(_QWORD *)&__src[24] = v62 + 144 * v63;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v457);
      *(_QWORD *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, __src);
      v59 = v387;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v387, (uint64_t)&v457);
      v59 = v58 + 6;
    }
    v387 = v59;
    std::string::operator=(&v385, __str);

    if (SHIBYTE(v463) < 0)
      operator delete((void *)v462);
    *(_QWORD *)__src = &v459;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(_QWORD *)__src = &v458;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v457.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    v54 = v418;
  }
  if (*(_QWORD *)(v54 + 32) != *(_QWORD *)(v54 + 24))
  {
    if (*((char *)a3 + 23) >= 0)
      v64 = *((unsigned __int8 *)a3 + 23);
    else
      v64 = *((_QWORD *)a3 + 1);
    v65 = __str;
    std::string::basic_string[abi:ne180100]((uint64_t)__str, v64 + 44);
    if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v65 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
    if (v64)
    {
      if (*((char *)a3 + 23) >= 0)
        v66 = a3;
      else
        v66 = *(const Espresso::ANECompilerEngine::compiler::layer_graph_info_t **)a3;
      memmove(v65, v66, v64);
    }
    strcpy((char *)v65 + v64, "__rank5_3d_index_tensor_pre_gather_transpose");
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v457, (uint64_t)&v383, __str, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)(v418 + 24), (std::string *)((char *)a3 + 80));
    v67 = v387;
    if ((unint64_t)v387 >= v388)
    {
      v69 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
      if (v69 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v70 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
      if (v70 <= v69 + 1)
        v70 = v69 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
        v71 = 0x1C71C71C71C71C7;
      else
        v71 = v70;
      *(_QWORD *)&__src[32] = &v388;
      if (v71)
        v71 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v71);
      else
        v72 = 0;
      *(_QWORD *)__src = v71;
      *(_QWORD *)&__src[8] = v71 + 144 * v69;
      *(_QWORD *)&__src[16] = *(_QWORD *)&__src[8];
      *(_QWORD *)&__src[24] = v71 + 144 * v72;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v457);
      *(_QWORD *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, __src);
      v68 = v387;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v387, (uint64_t)&v457);
      v68 = v67 + 6;
    }
    v387 = v68;
    std::string::operator=(&v383, __str);

    if (SHIBYTE(v463) < 0)
      operator delete((void *)v462);
    *(_QWORD *)__src = &v459;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(_QWORD *)__src = &v458;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v457.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)&v419 + 1) == (_QWORD)v420)
  {
    __val = 0;
  }
  else
  {
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v384.__r_.__value_.__r.__words[2]);
    else
      size = v384.__r_.__value_.__l.__size_;
    v74 = &v457;
    std::string::basic_string[abi:ne180100]((uint64_t)&v457, size + 16);
    if ((v457.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v74 = (std::string *)v457.__r_.__value_.__r.__words[0];
    if (size)
    {
      if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v75 = &v384;
      else
        v75 = (std::string *)v384.__r_.__value_.__r.__words[0];
      memmove(v74, v75, size);
    }
    strcpy((char *)v74 + size, "__gnd_generated_");
    std::to_string((std::string *)__src, 0);
    if (__src[23] >= 0)
      v76 = __src;
    else
      v76 = *(const std::string::value_type **)__src;
    if (__src[23] >= 0)
      v77 = __src[23];
    else
      v77 = *(_QWORD *)&__src[8];
    v78 = std::string::append(&v457, v76, v77);
    v79 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
    __str[0].__r_.__value_.__r.__words[2] = v78->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v79;
    v78->__r_.__value_.__l.__size_ = 0;
    v78->__r_.__value_.__r.__words[2] = 0;
    v78->__r_.__value_.__r.__words[0] = 0;
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v457.__r_.__value_.__l.__data_);
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v457, (uint64_t)&v385, __str, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)&v419 + 1, (std::string *)((char *)a3 + 80));
    v80 = v387;
    if ((unint64_t)v387 >= v388)
    {
      v82 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
      if (v82 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v83 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
      if (v83 <= v82 + 1)
        v83 = v82 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
        v84 = 0x1C71C71C71C71C7;
      else
        v84 = v83;
      *(_QWORD *)&__src[32] = &v388;
      if (v84)
        v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v84);
      else
        v85 = 0;
      *(_QWORD *)__src = v84;
      *(_QWORD *)&__src[8] = v84 + 144 * v82;
      *(_QWORD *)&__src[16] = *(_QWORD *)&__src[8];
      *(_QWORD *)&__src[24] = v84 + 144 * v85;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v457);
      *(_QWORD *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, __src);
      v81 = v387;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v387, (uint64_t)&v457);
      v81 = v80 + 6;
    }
    v387 = v81;
    std::string::operator=(&v385, __str);

    if (SHIBYTE(v463) < 0)
      operator delete((void *)v462);
    *(_QWORD *)__src = &v459;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(_QWORD *)__src = &v458;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v457.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str[0].__r_.__value_.__l.__data_);
    __val = 1;
  }
  v368 = (unsigned int *)*((_QWORD *)&v421 + 1);
  v86 = (unsigned int *)v421;
  if ((_QWORD)v421 != *((_QWORD *)&v421 + 1))
  {
    v367 = (std::string *)((char *)a3 + 80);
    *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = v403;
    *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = v404;
    while (2)
    {
      switch(v86[6])
      {
        case 0u:
          if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v87 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
          else
            v87 = v384.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v457, v87 + 16);
          if ((v457.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v88 = &v457;
          else
            v88 = (std::string *)v457.__r_.__value_.__r.__words[0];
          if (v87)
          {
            if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v89 = &v384;
            else
              v89 = (std::string *)v384.__r_.__value_.__r.__words[0];
            memmove(v88, v89, v87);
          }
          strcpy((char *)v88 + v87, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0)
            v90 = __src;
          else
            v90 = *(const std::string::value_type **)__src;
          if (__src[23] >= 0)
            v91 = __src[23];
          else
            v91 = *(_QWORD *)&__src[8];
          v92 = std::string::append(&v457, v90, v91);
          v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
          v468.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v468.__r_.__value_.__l.__data_ = v93;
          v92->__r_.__value_.__l.__size_ = 0;
          v92->__r_.__value_.__r.__words[2] = 0;
          v92->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
          if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v457.__r_.__value_.__l.__data_);
          Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v457, (uint64_t)&v383, &v468, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)v86, v367);
          v94 = v387;
          if ((unint64_t)v387 >= v388)
          {
            v129 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
            v130 = v129 + 1;
            if (v129 + 1 > 0x1C71C71C71C71C7)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4) > v130)
              v130 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
              v131 = 0x1C71C71C71C71C7;
            else
              v131 = v130;
            *(_QWORD *)&__src[32] = &v388;
            if (v131)
              v131 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v131);
            else
              v132 = 0;
            *(_QWORD *)__src = v131;
            *(_QWORD *)&__src[8] = v131 + 144 * v129;
            *(_QWORD *)&__src[16] = *(_QWORD *)&__src[8];
            *(_QWORD *)&__src[24] = v131 + 144 * v132;
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v457);
            *(_QWORD *)&__src[16] += 144;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, __src);
            v95 = v387;
            std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
          }
          else
          {
            std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v387, (uint64_t)&v457);
            v95 = v94 + 6;
          }
          v387 = v95;
          std::string::operator=(&v383, &v468);
          *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)__src;
          *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&__src[16];

          if (SHIBYTE(v463) < 0)
            operator delete((void *)v462);
          *(_QWORD *)__src = &v459;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          *(_QWORD *)__src = &v458;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v457.__r_.__value_.__l.__data_);
          if ((SHIBYTE(v468.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_349;
          v178 = (void *)v468.__r_.__value_.__r.__words[0];
          goto LABEL_348;
        case 1u:
          if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v118 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
          else
            v118 = v384.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v457, v118 + 16);
          if ((v457.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v119 = &v457;
          else
            v119 = (std::string *)v457.__r_.__value_.__r.__words[0];
          if (v118)
          {
            if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v120 = &v384;
            else
              v120 = (std::string *)v384.__r_.__value_.__r.__words[0];
            memmove(v119, v120, v118);
          }
          strcpy((char *)v119 + v118, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0)
            v121 = __src;
          else
            v121 = *(const std::string::value_type **)__src;
          if (__src[23] >= 0)
            v122 = __src[23];
          else
            v122 = *(_QWORD *)&__src[8];
          v123 = std::string::append(&v457, v121, v122);
          v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
          v442.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v442.__r_.__value_.__l.__data_ = v124;
          v123->__r_.__value_.__l.__size_ = 0;
          v123->__r_.__value_.__r.__words[2] = 0;
          v123->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
          if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v457.__r_.__value_.__l.__data_);
          v125 = *((_DWORD *)a3 + 18);
          v126 = *((_DWORD *)a3 + 26);
          v127 = (void *)*((_QWORD *)a3 + 14);
          v128 = v127;
          Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)__src, v367);
          if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v468, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
          else
            v468 = v383;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v449, &v468, &v469, 1uLL);
          if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v468.__r_.__value_.__l.__data_);
          std::string::operator=((std::string *)__src, &v442);
          v450 = v125;
          v453 = v126;
          objc_storeStrong(&v454, v127);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v457.__r_.__value_.__l.__data_, (id *)__src);
          v153 = (void *)objc_opt_new();
          data_low = LODWORD(__str[0].__r_.__value_.__l.__data_);
          v155 = HIDWORD(__str[0].__r_.__value_.__r.__words[0]);
          v156 = LODWORD(__str[0].__r_.__value_.__r.__words[1]);
          v157 = HIDWORD(__str[0].__r_.__value_.__r.__words[1]);
          v158 = LODWORD(__str[0].__r_.__value_.__r.__words[2]);
          switch(v86[1])
          {
            case 1u:
              v159 = v86[2];
              data_low = (v159 * LODWORD(__str[0].__r_.__value_.__l.__data_));
              v156 = (SLODWORD(__str[0].__r_.__value_.__r.__words[1]) / v159);
              break;
            case 2u:
              v162 = v86[2];
              v156 = (v162 * LODWORD(__str[0].__r_.__value_.__r.__words[1]));
              v155 = (SHIDWORD(__str[0].__r_.__value_.__r.__words[0]) / v162);
              break;
            case 3u:
              v160 = v86[2];
              v155 = (v160 * HIDWORD(__str[0].__r_.__value_.__r.__words[0]));
              v157 = (SHIDWORD(__str[0].__r_.__value_.__r.__words[1]) / v160);
              break;
            case 4u:
              v161 = v86[2];
              v157 = (v161 * HIDWORD(__str[0].__r_.__value_.__r.__words[1]));
              v158 = (SLODWORD(__str[0].__r_.__value_.__r.__words[2]) / v161);
              break;
            default:
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Contracting batch for width interleave doesn't make sense.");
          }
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", data_low);
          v163 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v153, "setObject:forKeyedSubscript:", v163, CFSTR("ReshapedBatch"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v156);
          v164 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v153, "setObject:forKeyedSubscript:", v164, CFSTR("ReshapedDepth"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v155);
          v165 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v153, "setObject:forKeyedSubscript:", v165, CFSTR("ReshapedChannel"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v157);
          v166 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v153, "setObject:forKeyedSubscript:", v166, CFSTR("ReshapedHeight"));

          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v158);
          v167 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v153, "setObject:forKeyedSubscript:", v167, CFSTR("ReshapedWidth"));

          v168 = (void *)*((_QWORD *)&v465 + 1);
          *((_QWORD *)&v465 + 1) = CFSTR("Reshape");

          v169 = v466;
          v466 = v153;

          if (v452 < 0)
            operator delete(v451);
          v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&v449;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
          v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);

          *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)__src;
          *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&__src[16];
          std::string::operator=(&v383, &v442);
          v140 = v387;
          if ((unint64_t)v387 < v388)
            goto LABEL_306;
          v141 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
          v170 = v141 + 1;
          if (v141 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4) > v170)
            v170 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
          if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
            v143 = 0x1C71C71C71C71C7;
          else
            v143 = v170;
          goto LABEL_333;
        case 2u:
          if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v96 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
          else
            v96 = v384.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v457, v96 + 16);
          if ((v457.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v97 = &v457;
          else
            v97 = (std::string *)v457.__r_.__value_.__r.__words[0];
          if (v96)
          {
            if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v98 = &v384;
            else
              v98 = (std::string *)v384.__r_.__value_.__r.__words[0];
            memmove(v97, v98, v96);
          }
          strcpy((char *)v97 + v96, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0)
            v99 = __src;
          else
            v99 = *(const std::string::value_type **)__src;
          if (__src[23] >= 0)
            v100 = __src[23];
          else
            v100 = *(_QWORD *)&__src[8];
          v101 = std::string::append(&v457, v99, v100);
          v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
          v442.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v442.__r_.__value_.__l.__data_ = v102;
          v101->__r_.__value_.__l.__size_ = 0;
          v101->__r_.__value_.__r.__words[2] = 0;
          v101->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
          if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v457.__r_.__value_.__l.__data_);
          v103 = *((_DWORD *)a3 + 18);
          v104 = *((_DWORD *)a3 + 26);
          v105 = (void *)*((_QWORD *)a3 + 14);
          v106 = v105;
          Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)__src, v367);
          if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v468, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
          else
            v468 = v383;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v449, &v468, &v469, 1uLL);
          if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v468.__r_.__value_.__l.__data_);
          std::string::operator=((std::string *)__src, &v442);
          v450 = v103;
          v453 = v104;
          objc_storeStrong(&v454, v105);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v457.__r_.__value_.__l.__data_, (id *)__src);
          v133 = (void *)objc_opt_new();
          objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", 1);
          v134 = (void *)objc_claimAutoreleasedReturnValue();
          v135 = (void *)objc_opt_new();
          objc_msgSend(v135, "setObject:forKeyedSubscript:", CFSTR("Width"), CFSTR("Coordinate"));
          objc_msgSend(v135, "setObject:forKeyedSubscript:", CFSTR("Replication"), CFSTR("PaddingMode"));
          objc_msgSend(v134, "setObject:atIndexedSubscript:", v135, 0);
          objc_msgSend(v133, "setObject:forKeyedSubscript:", v134, CFSTR("PaddingInfo"));
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
          v136 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v133, "setObject:forKeyedSubscript:", v136, CFSTR("BackgroundValue"));

          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadLeft"));
          objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *v86);
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v133, "setObject:forKeyedSubscript:", v137, CFSTR("PadRight"));

          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadTop"));
          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadBot"));
          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadFront"));
          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadBack"));
          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadChannelFront"));
          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadChannelBack"));
          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadBatchFront"));
          objc_msgSend(v133, "setObject:forKeyedSubscript:", &unk_1E2DEDAA8, CFSTR("PadBatchBack"));
          v138 = (void *)*((_QWORD *)&v465 + 1);
          *((_QWORD *)&v465 + 1) = CFSTR("Padding");

          v139 = v466;
          v466 = v133;

          if (v452 < 0)
            operator delete(v451);
          v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&v449;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
          v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);

          LODWORD(__str[0].__r_.__value_.__r.__words[2]) += *v86;
          std::string::operator=(&v383, &v442);
          v140 = v387;
          if ((unint64_t)v387 < v388)
            goto LABEL_306;
          v141 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
          v142 = v141 + 1;
          if (v141 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4) > v142)
            v142 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
          if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
            v143 = 0x1C71C71C71C71C7;
          else
            v143 = v142;
          goto LABEL_333;
        case 3u:
          if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v107 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
          else
            v107 = v384.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v457, v107 + 16);
          if ((v457.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v108 = &v457;
          else
            v108 = (std::string *)v457.__r_.__value_.__r.__words[0];
          if (v107)
          {
            if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v109 = &v384;
            else
              v109 = (std::string *)v384.__r_.__value_.__r.__words[0];
            memmove(v108, v109, v107);
          }
          strcpy((char *)v108 + v107, "__gnd_generated_");
          std::to_string((std::string *)__src, __val);
          if (__src[23] >= 0)
            v110 = __src;
          else
            v110 = *(const std::string::value_type **)__src;
          if (__src[23] >= 0)
            v111 = __src[23];
          else
            v111 = *(_QWORD *)&__src[8];
          v112 = std::string::append(&v457, v110, v111);
          v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v442.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v442.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
          if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v457.__r_.__value_.__l.__data_);
          v114 = *((_DWORD *)a3 + 18);
          v115 = *((_DWORD *)a3 + 26);
          v116 = (void *)*((_QWORD *)a3 + 14);
          v117 = v116;
          Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((uint64_t)__src, v367);
          if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v468, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
          else
            v468 = v383;
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v449, &v468, &v469, 1uLL);
          if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v468.__r_.__value_.__l.__data_);
          std::string::operator=((std::string *)__src, &v442);
          v450 = v114;
          v453 = v115;
          objc_storeStrong(&v454, v116);
          Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v457.__r_.__value_.__l.__data_, (id *)__src);
          v144 = (void *)objc_opt_new();
          objc_msgSend(v144, "setObject:forKeyedSubscript:", CFSTR("RoundNearest"), CFSTR("Type"));
          v145 = (void *)*((_QWORD *)&v465 + 1);
          *((_QWORD *)&v465 + 1) = CFSTR("Neuron");

          v146 = v466;
          v466 = v144;

          if (v452 < 0)
            operator delete(v451);
          v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&v449;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
          v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);

          std::string::operator=(&v383, &v442);
          v140 = v387;
          if ((unint64_t)v387 >= v388)
          {
            v141 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
            v152 = v141 + 1;
            if (v141 + 1 > 0x1C71C71C71C71C7)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4) > v152)
              v152 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
            if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
              v143 = 0x1C71C71C71C71C7;
            else
              v143 = v152;
LABEL_333:
            *(_QWORD *)&__src[32] = &v388;
            v171 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v143);
            v172 = (std::string *)&v171[144 * v141];
            *(_QWORD *)__src = v171;
            *(_QWORD *)&__src[8] = v172;
            *(_QWORD *)&__src[24] = &v171[144 * v173];
            v174 = *(_OWORD *)&v457.__r_.__value_.__l.__data_;
            v172->__r_.__value_.__r.__words[2] = v457.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v172->__r_.__value_.__l.__data_ = v174;
            memset(&v457, 0, sizeof(v457));
            v172[1].__r_.__value_.__r.__words[0] = 0;
            v172[1].__r_.__value_.__l.__size_ = 0;
            v172[1].__r_.__value_.__r.__words[2] = 0;
            v172[1] = v458;
            memset(&v458, 0, sizeof(v458));
            v172[2].__r_.__value_.__r.__words[0] = 0;
            v172[2].__r_.__value_.__l.__size_ = 0;
            v172[2].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v172[2].__r_.__value_.__l.__data_ = v459;
            v172[2].__r_.__value_.__r.__words[2] = v460;
            v459 = 0uLL;
            v460 = 0;
            LODWORD(v172[3].__r_.__value_.__l.__data_) = v461;
            v175 = v462;
            v172[4].__r_.__value_.__r.__words[0] = v463;
            *(_OWORD *)&v172[3].__r_.__value_.__r.__words[1] = v175;
            v463 = 0;
            v462 = 0uLL;
            LODWORD(v172[4].__r_.__value_.__r.__words[1]) = v464;
            v176 = v465;
            v465 = 0uLL;
            *(_OWORD *)&v172[4].__r_.__value_.__r.__words[2] = v176;
            v177 = (std::string::size_type)v466;
            v466 = 0;
            v172[5].__r_.__value_.__l.__size_ = v177;
            v172[5].__r_.__value_.__r.__words[2] = v467;
            *(_QWORD *)&__src[16] = v172 + 6;
            std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, __src);
            v151 = v387;
            std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
          }
          else
          {
LABEL_306:
            v147 = *(_OWORD *)&v457.__r_.__value_.__l.__data_;
            v387->__r_.__value_.__r.__words[2] = v457.__r_.__value_.__r.__words[2];
            v140[1].__r_.__value_.__r.__words[0] = 0;
            *(_OWORD *)&v140->__r_.__value_.__l.__data_ = v147;
            *(_OWORD *)&v457.__r_.__value_.__l.__data_ = 0uLL;
            v140[1].__r_.__value_.__l.__size_ = 0;
            v140[1].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v140[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v458.__r_.__value_.__l.__data_;
            *(_OWORD *)&v458.__r_.__value_.__l.__data_ = 0uLL;
            v140[1].__r_.__value_.__r.__words[2] = v458.__r_.__value_.__r.__words[2];
            v140[2].__r_.__value_.__r.__words[0] = 0;
            v458.__r_.__value_.__r.__words[2] = 0;
            v140[2].__r_.__value_.__l.__size_ = 0;
            v140[2].__r_.__value_.__r.__words[2] = 0;
            *(_OWORD *)&v140[2].__r_.__value_.__l.__data_ = v459;
            v140[2].__r_.__value_.__r.__words[2] = v460;
            v459 = 0uLL;
            v460 = 0;
            LODWORD(v140[3].__r_.__value_.__l.__data_) = v461;
            v148 = v462;
            v140[4].__r_.__value_.__r.__words[0] = v463;
            *(_OWORD *)&v140[3].__r_.__value_.__r.__words[1] = v148;
            v463 = 0;
            v462 = 0uLL;
            LODWORD(v140[4].__r_.__value_.__r.__words[1]) = v464;
            v149 = v465;
            v457.__r_.__value_.__r.__words[2] = 0;
            v465 = 0uLL;
            *(_OWORD *)&v140[4].__r_.__value_.__r.__words[2] = v149;
            v150 = (std::string::size_type)v466;
            v466 = 0;
            v140[5].__r_.__value_.__l.__size_ = v150;
            v140[5].__r_.__value_.__r.__words[2] = v467;
            v151 = v140 + 6;
          }
          v387 = v151;

          if (SHIBYTE(v463) < 0)
            operator delete((void *)v462);
          *(_QWORD *)__src = &v459;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          *(_QWORD *)__src = &v458;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
          if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v457.__r_.__value_.__l.__data_);
          if (SHIBYTE(v442.__r_.__value_.__r.__words[2]) < 0)
          {
            v178 = (void *)v442.__r_.__value_.__r.__words[0];
LABEL_348:
            operator delete(v178);
          }
LABEL_349:
          ++__val;
LABEL_350:
          v86 += 8;
          if (v86 == v368)
            break;
          continue;
        default:
          goto LABEL_350;
      }
      break;
    }
  }
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__str[0].__r_.__value_.__l.__data_, (id *)a3);
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v457, v385.__r_.__value_.__l.__data_, v385.__r_.__value_.__l.__size_);
  else
    v457 = v385;
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v458, v383.__r_.__value_.__l.__data_, v383.__r_.__value_.__l.__size_);
  else
    v458 = v383;
  std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v377, &v457, &v459, 2uLL);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v458.__r_.__value_.__r.__words[i + 2]) < 0)
      operator delete(*(void **)((char *)&v457 + i * 8 + 24));
  }
  obj = (id)objc_opt_new();
  v180 = (void *)objc_opt_new();
  v181 = (unsigned int *)*((_QWORD *)&v422 + 1);
  for (j = (unsigned int *)v423; v181 != j; ++v181)
  {
    v183 = *v181;
    if (v183 >= 5)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
    objc_msgSend(v180, "addObject:", off_1E2DD2AA8[v183]);
  }
  objc_msgSend(obj, "setObject:forKeyedSubscript:", v180, CFSTR("GatherNDAxes"));
  v184 = v381;
  v381 = CFSTR("Gather");

  objc_storeStrong(&v382, obj);
  v186 = v374;
  v185 = v375;
  if (v375 != v374)
  {
    if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v187 = HIBYTE(v384.__r_.__value_.__r.__words[2]);
    else
      v187 = v384.__r_.__value_.__l.__size_;
    v188 = __src;
    std::string::basic_string[abi:ne180100]((uint64_t)__src, v187 + 16);
    if (__src[23] < 0)
      v188 = *(_BYTE **)__src;
    if (v187)
    {
      if ((v384.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v189 = &v384;
      else
        v189 = (std::string *)v384.__r_.__value_.__r.__words[0];
      memmove(v188, v189, v187);
    }
    strcpy(&v188[v187], "__gnd_generated_");
    std::to_string(&v468, __val);
    if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v190 = &v468;
    else
      v190 = (std::string *)v468.__r_.__value_.__r.__words[0];
    if ((v468.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v191 = HIBYTE(v468.__r_.__value_.__r.__words[2]);
    else
      v191 = v468.__r_.__value_.__l.__size_;
    v192 = std::string::append((std::string *)__src, (const std::string::value_type *)v190, v191);
    v193 = *(_OWORD *)&v192->__r_.__value_.__l.__data_;
    v457.__r_.__value_.__r.__words[2] = v192->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v457.__r_.__value_.__l.__data_ = v193;
    v192->__r_.__value_.__l.__size_ = 0;
    v192->__r_.__value_.__r.__words[2] = 0;
    v192->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v468.__r_.__value_.__l.__data_);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);
    std::string::operator=(__str, &v457);
    if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v457.__r_.__value_.__l.__data_);
  }
  v194 = v387;
  if ((unint64_t)v387 >= v388)
  {
    v196 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
    if (v196 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v197 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
    if (v197 <= v196 + 1)
      v197 = v196 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
      v198 = 0x1C71C71C71C71C7;
    else
      v198 = v197;
    v458.__r_.__value_.__l.__size_ = (std::string::size_type)&v388;
    if (v198)
      v198 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v198);
    else
      v199 = 0;
    v457.__r_.__value_.__r.__words[0] = v198;
    v457.__r_.__value_.__l.__size_ = v198 + 144 * v196;
    v457.__r_.__value_.__r.__words[2] = v457.__r_.__value_.__l.__size_;
    v458.__r_.__value_.__r.__words[0] = v198 + 144 * v199;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v457.__r_.__value_.__l.__size_, (uint64_t)__str);
    v457.__r_.__value_.__r.__words[2] += 144;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, &v457);
    v195 = v387;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v457);
    v186 = v374;
    v185 = v375;
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v387, (uint64_t)__str);
    v195 = v194 + 6;
  }
  v387 = v195;
  if (v185 != v186)
  {
    Espresso::ANECompilerEngine::transpose_unit_from_axis_pairs((uint64_t)&v457, (uint64_t)__str, (const std::string *)a3, *((_DWORD *)a3 + 18), *((_DWORD *)a3 + 26), *((void **)a3 + 14), (unsigned int **)&v374, (std::string *)((char *)a3 + 80));
    v200 = v387;
    if ((unint64_t)v387 >= v388)
    {
      v202 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
      if (v202 + 1 > 0x1C71C71C71C71C7)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v203 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
      if (v203 <= v202 + 1)
        v203 = v202 + 1;
      if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
        v204 = 0x1C71C71C71C71C7;
      else
        v204 = v203;
      *(_QWORD *)&__src[32] = &v388;
      if (v204)
        v204 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v204);
      else
        v205 = 0;
      *(_QWORD *)__src = v204;
      *(_QWORD *)&__src[8] = v204 + 144 * v202;
      *(_QWORD *)&__src[16] = *(_QWORD *)&__src[8];
      *(_QWORD *)&__src[24] = v204 + 144 * v205;
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*(std::string **)&__src[8], (uint64_t)&v457);
      *(_QWORD *)&__src[16] += 144;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, __src);
      v201 = v387;
      std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)__src);
    }
    else
    {
      std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v387, (uint64_t)&v457);
      v201 = v200 + 6;
    }
    v387 = v201;

    if (SHIBYTE(v463) < 0)
      operator delete((void *)v462);
    *(_QWORD *)__src = &v459;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    *(_QWORD *)__src = &v458;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
    if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v457.__r_.__value_.__l.__data_);
  }
  v373 = v432;
  if (v432)
  {
    v206 = (unint64_t *)&v432->__shared_owners_;
    do
      v207 = __ldxr(v206);
    while (__stxr(v207 + 1, v206));
  }
  v208 = v427;
  v372 = v428;
  if (v428)
  {
    v209 = (unint64_t *)&v428->__shared_owners_;
    do
      v210 = __ldxr(v209);
    while (__stxr(v210 + 1, v209));
  }
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v457);
  v466 = 0;
  *((_QWORD *)&v465 + 1) = 0;
  v467 = 0x100000000;
  v212 = *((_QWORD *)this + 45);
  v211 = (std::__shared_weak_count *)*((_QWORD *)this + 46);
  v446 = v212;
  v447 = v211;
  if (v211)
  {
    v213 = (unint64_t *)&v211->__shared_owners_;
    do
      v214 = __ldxr(v213);
    while (__stxr(v214 + 1, v213));
  }
  if (v212
    && !*(_BYTE *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 37) + 104))((char *)this + 296) + 40))
  {
    v215 = *(float *)(v208 + 112);
    v440 = v212;
    v441 = v211;
    if (v211)
    {
      v216 = (unint64_t *)&v211->__shared_owners_;
      do
        v217 = __ldxr(v216);
      while (__stxr(v217 + 1, v216));
    }
    v218 = (std::__shared_weak_count *)*((_QWORD *)this + 48);
    v439[0] = *((_QWORD *)this + 47);
    v439[1] = (uint64_t)v218;
    if (v218)
    {
      v219 = (unint64_t *)&v218->__shared_owners_;
      do
        v220 = __ldxr(v219);
      while (__stxr(v220 + 1, v219));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v440, v439, (uint64_t)&v442, v215);
    if (v218)
    {
      v221 = (unint64_t *)&v218->__shared_owners_;
      do
        v222 = __ldaxr(v221);
      while (__stlxr(v222 - 1, v221));
      if (!v222)
      {
        ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
        std::__shared_weak_count::__release_weak(v218);
      }
    }
    v223 = v441;
    if (v441)
    {
      v224 = (unint64_t *)&v441->__shared_owners_;
      do
        v225 = __ldaxr(v224);
      while (__stlxr(v225 - 1, v224));
      if (!v225)
      {
        ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
        std::__shared_weak_count::__release_weak(v223);
      }
    }
    v226 = v446;
    v227 = *(unsigned int *)(v446 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v437, 2 * v227, 1, 1, 1);
    v228 = (int)v227;
    v436 = 0uLL;
    v229 = v227;
    v230 = *((_QWORD *)this + 47);
    if (v230)
      v229 = *(_DWORD *)(v230 + 8);
    if (!*((_BYTE *)v365 + 384))
    {
      Espresso::blob<unsigned char,1>::make(&v468, 4 * v227);
      v338 = *(int **)(v468.__r_.__value_.__r.__words[0] + 16);
      v339 = v227 - 1;
      if ((int)v227 >= 1)
      {
        for (k = 0; k != v227; ++k)
        {
          v341 = *(float *)(*(_QWORD *)(v226 + 16) + k * 4);
          *(float *)&v342 = ldexp(1.0, -v444) * v341;
          v338[k] = v342;
        }
      }
      if ((_DWORD)v227)
      {
        v343 = *(_WORD **)(v437 + 16);
        do
        {
          v344 = *v338++;
          _S0 = v344;
          __asm { FCVT            H0, S0 }
          *v343++ = _S0;
          --v228;
        }
        while (v228);
      }
      v435 = 0;
      v434 = 0;
      if (*((_QWORD *)this + 47))
      {
        Espresso::blob<unsigned char,1>::make(__src, 4 * v229);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v434, (__int128 *)__src);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__src);
        Espresso::blob<unsigned char,1>::make(__src, 2 * v229);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v436, (__int128 *)__src);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)__src);
        v347 = *(int **)(v434 + 16);
        if (v229 >= 1)
        {
          for (m = 0; m != v229; ++m)
          {
            if (v339 >= (int)m)
              v349 = m;
            else
              v349 = v339;
            *(float *)&v350 = *(float *)(*(_QWORD *)(v442.__r_.__value_.__r.__words[2] + 16) + 4 * m)
                            * *(float *)(*(_QWORD *)(v442.__r_.__value_.__r.__words[0] + 16) + 4 * v349);
            v347[m] = v350;
            v351 = v445;
            v352 = v444;
            *(float *)&v353 = ldexp(1.0, v445 - v444) * *(float *)&v350;
            v347[m] = v353;
            v356 = ldexp(1.0, v352 - v351) * *(float *)&v353;
            if (v356 < -127.0 || v356 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v354, v355);
              v358 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v358, OS_LOG_TYPE_ERROR))
              {
                v359 = *(float *)&v347[m];
                *(_DWORD *)__src = 134218752;
                *(double *)&__src[4] = v356;
                *(_WORD *)&__src[12] = 1024;
                *(_DWORD *)&__src[14] = v445;
                *(_WORD *)&__src[18] = 1024;
                *(_DWORD *)&__src[20] = v444;
                *(_WORD *)&__src[24] = 2048;
                *(double *)&__src[26] = v359;
                _os_log_error_impl(&dword_190DAF000, v358, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", __src, 0x22u);
              }

            }
          }
        }
        if (v229)
        {
          v360 = v229;
          v361 = *(_WORD **)(v436 + 16);
          do
          {
            v362 = *v347++;
            _S0 = v362;
            __asm { FCVT            H0, S0 }
            *v361++ = _S0;
            --v360;
          }
          while (v360);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v231 = v445;
    if ((_DWORD)v227)
    {
      v232 = *(int **)(v442.__r_.__value_.__r.__words[0] + 16);
      v233 = *(_WORD **)(v437 + 16);
      do
      {
        v234 = *v232++;
        _S0 = v234;
        __asm { FCVT            H0, S0 }
        *v233++ = _S0;
        --v228;
      }
      while (v228);
    }
    if (v230)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(__src, 2 * v229, 1, 1, 1);
      v240 = *(_OWORD *)__src;
      *(_OWORD *)__src = 0uLL;
      v241 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
      v436 = v240;
      if (v241)
      {
        v242 = (unint64_t *)&v241->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      v244 = *(std::__shared_weak_count **)&__src[8];
      if (*(_QWORD *)&__src[8])
      {
        v245 = (unint64_t *)(*(_QWORD *)&__src[8] + 8);
        do
          v246 = __ldaxr(v245);
        while (__stlxr(v246 - 1, v245));
        if (!v246)
        {
          ((void (*)(std::__shared_weak_count *))v244->__on_zero_shared)(v244);
          std::__shared_weak_count::__release_weak(v244);
        }
      }
      if (v229)
      {
        v247 = v229;
        v248 = *(int **)(v442.__r_.__value_.__r.__words[2] + 16);
        v249 = *(_WORD **)(v436 + 16);
        do
        {
          v250 = *v248++;
          _S0 = v250;
          __asm { FCVT            H0, S0 }
          *v249++ = _S0;
          --v247;
        }
        while (v247);
      }
    }
    v252 = *((unsigned __int8 *)v365 + 552);
    v253 = (Espresso::ANECompilerEngine::compiler *)((char *)v365 + 128);
    v254 = v437;
    v255 = v438;
    v434 = v437;
    v435 = v438;
    if (v438)
    {
      v256 = (unint64_t *)&v438->__shared_owners_;
      do
        v257 = __ldxr(v256);
      while (__stxr(v257 + 1, v256));
    }
    v258 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v253, *(const unsigned __int8 **)(v254 + 16), *(int *)(v254 + 8));
    if (v255)
    {
      v259 = (unint64_t *)&v255->__shared_owners_;
      do
        v260 = __ldaxr(v259);
      while (__stlxr(v260 - 1, v259));
      if (!v260)
      {
        ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
        std::__shared_weak_count::__release_weak(v255);
      }
    }
    v261 = (void *)objc_opt_new();
    if (*((_BYTE *)v365 + 121))
    {
      v262 = *(id *)(v386 + 128);

      v261 = v262;
    }
    v263 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v227);
    v264 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v263, "setObject:forKeyedSubscript:", v264, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v258);
    v265 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v263, "setObject:forKeyedSubscript:", v265, CFSTR("ScaleOffset"));

    v266 = (void *)MEMORY[0x1E0CB37E8];
    if (v252)
      weights_file_index = 0;
    else
    objc_msgSend(v266, "numberWithUnsignedLong:", weights_file_index);
    v268 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v263, "setObject:forKeyedSubscript:", v268, CFSTR("ScaleIndex"));

    objc_msgSend(v263, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v444);
    v269 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v261, "setObject:forKeyedSubscript:", v269, CFSTR("ScaleShift"));

    if (*((_QWORD *)this + 47))
    {
      v270 = v436;
      v433 = v436;
      if (*((_QWORD *)&v436 + 1))
      {
        v271 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
        do
          v272 = __ldxr(v271);
        while (__stxr(v272 + 1, v271));
      }
      v273 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob(v253, *(const unsigned __int8 **)(v270 + 16), *(int *)(v270 + 8));
      v274 = (std::__shared_weak_count *)*((_QWORD *)&v433 + 1);
      if (*((_QWORD *)&v433 + 1))
      {
        v275 = (unint64_t *)(*((_QWORD *)&v433 + 1) + 8);
        do
          v276 = __ldaxr(v275);
        while (__stlxr(v276 - 1, v275));
        if (!v276)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(*((_QWORD *)this + 47) + 8));
      v277 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v263, "setObject:forKeyedSubscript:", v277, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v273);
      v278 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v263, "setObject:forKeyedSubscript:", v278, CFSTR("BiasOffset"));

      v279 = (void *)MEMORY[0x1E0CB37E8];
      if (v252)
        v280 = 0;
      else
      objc_msgSend(v279, "numberWithUnsignedLong:", v280);
      v281 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v263, "setObject:forKeyedSubscript:", v281, CFSTR("BiasIndex"));

      objc_msgSend(v263, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v231);
      v282 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v261, "setObject:forKeyedSubscript:", v282, CFSTR("BiasShift"));

    }
    objc_msgSend(v261, "setObject:forKeyedSubscript:", v263, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)__src, (id *)a3);
    v283 = v387;
    if (v387 == (std::string *)v386)
      goto LABEL_513;
    v284 = v387 - 6;
    v285 = HIBYTE(v387[-6].__r_.__value_.__r.__words[2]);
    v286 = v285;
    v287 = v387[-6].__r_.__value_.__l.__size_;
    if ((v285 & 0x80u) == 0)
      v288 = HIBYTE(v387[-6].__r_.__value_.__r.__words[2]);
    else
      v288 = v387[-6].__r_.__value_.__l.__size_;
    v289 = __src[23];
    if (__src[23] < 0)
      v289 = *(_QWORD *)&__src[8];
    if (v288 != v289)
      goto LABEL_507;
    if (__src[23] >= 0)
      v290 = __src;
    else
      v290 = *(unsigned __int8 **)__src;
    if ((char)v285 < 0)
    {
      data = (const std::string::value_type *)v284->__r_.__value_.__r.__words[0];
      if (memcmp(v284->__r_.__value_.__l.__data_, v290, v387[-6].__r_.__value_.__l.__size_))
        goto LABEL_510;
    }
    else if ((_BYTE)v285)
    {
      v291 = v387 - 6;
      while (v291->__r_.__value_.__s.__data_[0] == *v290)
      {
        v291 = (std::string *)((char *)v291 + 1);
        ++v290;
        if (!--v285)
          goto LABEL_506;
      }
      goto LABEL_507;
    }
LABEL_506:
    std::string::append(v283 - 6, "__@pre_scale_bias");
    v286 = HIBYTE(v283[-6].__r_.__value_.__r.__words[2]);
LABEL_507:
    if ((v286 & 0x80) == 0)
    {
      v293 = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
      v468.__r_.__value_.__r.__words[2] = v283[-6].__r_.__value_.__r.__words[2];
      *(_OWORD *)&v468.__r_.__value_.__l.__data_ = v293;
      goto LABEL_511;
    }
    data = v283[-6].__r_.__value_.__l.__data_;
    v287 = v283[-6].__r_.__value_.__l.__size_;
LABEL_510:
    std::string::__init_copy_ctor_external(&v468, data, v287);
LABEL_511:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v449, &v468, &v469, 1uLL);
    if (SHIBYTE(v468.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v468.__r_.__value_.__l.__data_);
LABEL_513:
    v294 = v455;
    v455 = CFSTR("GOC");

    objc_storeStrong(&v456, v261);
    if (!*((_BYTE *)v365 + 121))
    {
      v295 = v387;
      if ((unint64_t)v387 >= v388)
      {
        v297 = 0x8E38E38E38E38E39 * (((uint64_t)v387 - v386) >> 4);
        if (v297 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v298 = 0x1C71C71C71C71C72 * ((uint64_t)(v388 - v386) >> 4);
        if (v298 <= v297 + 1)
          v298 = v297 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v388 - v386) >> 4) >= 0xE38E38E38E38E3)
          v299 = 0x1C71C71C71C71C7;
        else
          v299 = v298;
        *((_QWORD *)&v469 + 1) = &v388;
        if (v299)
          v299 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v299);
        else
          v300 = 0;
        v468.__r_.__value_.__r.__words[0] = v299;
        v468.__r_.__value_.__l.__size_ = v299 + 144 * v297;
        v468.__r_.__value_.__r.__words[2] = v468.__r_.__value_.__l.__size_;
        *(_QWORD *)&v469 = v299 + 144 * v300;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)v468.__r_.__value_.__l.__size_, (uint64_t)__src);
        v468.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v386, &v468);
        v296 = v387;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v468);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v387, (uint64_t)__src);
        v296 = v295 + 6;
      }
      v387 = v296;
    }

    if (v452 < 0)
      operator delete(v451);
    v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&v449;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
    v468.__r_.__value_.__r.__words[0] = (std::string::size_type)&__src[24];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v468);
    if ((__src[23] & 0x80000000) != 0)
      operator delete(*(void **)__src);

    v301 = (std::__shared_weak_count *)*((_QWORD *)&v436 + 1);
    if (*((_QWORD *)&v436 + 1))
    {
      v302 = (unint64_t *)(*((_QWORD *)&v436 + 1) + 8);
      do
        v303 = __ldaxr(v302);
      while (__stlxr(v303 - 1, v302));
      if (!v303)
      {
        ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
        std::__shared_weak_count::__release_weak(v301);
      }
    }
    v304 = v438;
    if (v438)
    {
      v305 = (unint64_t *)&v438->__shared_owners_;
      do
        v306 = __ldaxr(v305);
      while (__stlxr(v306 - 1, v305));
      if (!v306)
      {
        ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
        std::__shared_weak_count::__release_weak(v304);
      }
    }
    v307 = v443;
    if (v443)
    {
      v308 = (unint64_t *)&v443->__shared_owners_;
      do
        v309 = __ldaxr(v308);
      while (__stlxr(v309 - 1, v308));
      if (!v309)
      {
        ((void (*)(std::__shared_weak_count *))v307->__on_zero_shared)(v307);
        std::__shared_weak_count::__release_weak(v307);
      }
    }
    v310 = (std::__shared_weak_count *)v442.__r_.__value_.__l.__size_;
    if (v442.__r_.__value_.__l.__size_)
    {
      v311 = (unint64_t *)(v442.__r_.__value_.__l.__size_ + 8);
      do
        v312 = __ldaxr(v311);
      while (__stlxr(v312 - 1, v311));
      if (!v312)
      {
        ((void (*)(std::__shared_weak_count *))v310->__on_zero_shared)(v310);
        std::__shared_weak_count::__release_weak(v310);
      }
    }
    v211 = v447;
  }
  if (v211)
  {
    v313 = (unint64_t *)&v211->__shared_owners_;
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
      std::__shared_weak_count::__release_weak(v211);
    }
  }

  if (SHIBYTE(v463) < 0)
    operator delete((void *)v462);
  *(_QWORD *)__src = &v459;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  *(_QWORD *)__src = &v458;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  if (SHIBYTE(v457.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v457.__r_.__value_.__l.__data_);
  if (v372)
  {
    v315 = (unint64_t *)&v372->__shared_owners_;
    do
      v316 = __ldaxr(v315);
    while (__stlxr(v316 - 1, v315));
    if (!v316)
    {
      ((void (*)(std::__shared_weak_count *))v372->__on_zero_shared)(v372);
      std::__shared_weak_count::__release_weak(v372);
    }
  }
  if (v373)
  {
    v317 = (unint64_t *)&v373->__shared_owners_;
    do
      v318 = __ldaxr(v317);
    while (__stlxr(v318 - 1, v317));
    if (!v318)
    {
      ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
      std::__shared_weak_count::__release_weak(v373);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 37) + 24))((char *)this + 296, v365, &v386);
  if (v374)
    operator delete(v374);

  if (v379 < 0)
    operator delete(v378);
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)&v377;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v457);
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v457);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v383.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v383.__r_.__value_.__l.__data_);
  if (SHIBYTE(v384.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v384.__r_.__value_.__l.__data_);
  if (SHIBYTE(v385.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v385.__r_.__value_.__l.__data_);
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)&v386;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v457);
  v319 = v413;
  if (v413)
  {
    v320 = (unint64_t *)&v413->__shared_owners_;
    do
      v321 = __ldaxr(v320);
    while (__stlxr(v321 - 1, v320));
    if (!v321)
    {
      ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
      std::__shared_weak_count::__release_weak(v319);
    }
  }
  v322 = v415;
  if (v415)
  {
    v323 = (unint64_t *)&v415->__shared_owners_;
    do
      v324 = __ldaxr(v323);
    while (__stlxr(v324 - 1, v323));
    if (!v324)
    {
      ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
      std::__shared_weak_count::__release_weak(v322);
    }
  }
  v325 = v417;
  if (v417)
  {
    v326 = (unint64_t *)&v417->__shared_owners_;
    do
      v327 = __ldaxr(v326);
    while (__stlxr(v327 - 1, v326));
    if (!v327)
    {
      ((void (*)(std::__shared_weak_count *))v325->__on_zero_shared)(v325);
      std::__shared_weak_count::__release_weak(v325);
    }
  }
  if (*((_QWORD *)&v425 + 1))
  {
    *(_QWORD *)&v426 = *((_QWORD *)&v425 + 1);
    operator delete(*((void **)&v425 + 1));
  }
  if ((_QWORD)v424)
  {
    *((_QWORD *)&v424 + 1) = v424;
    operator delete((void *)v424);
  }
  if (*((_QWORD *)&v422 + 1))
  {
    *(_QWORD *)&v423 = *((_QWORD *)&v422 + 1);
    operator delete(*((void **)&v422 + 1));
  }
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)&v421;
  if (*((_QWORD *)&v419 + 1))
  {
    *(_QWORD *)&v420 = *((_QWORD *)&v419 + 1);
    operator delete(*((void **)&v419 + 1));
  }
  v457.__r_.__value_.__r.__words[0] = (std::string::size_type)&v418;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v457);

  v328 = v428;
  if (v428)
  {
    v329 = (unint64_t *)&v428->__shared_owners_;
    do
      v330 = __ldaxr(v329);
    while (__stlxr(v330 - 1, v329));
    if (!v330)
    {
      ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
      std::__shared_weak_count::__release_weak(v328);
    }
  }
  v331 = v430;
  if (v430)
  {
    v332 = (unint64_t *)&v430->__shared_owners_;
    do
      v333 = __ldaxr(v332);
    while (__stlxr(v333 - 1, v332));
    if (!v333)
    {
      ((void (*)(std::__shared_weak_count *))v331->__on_zero_shared)(v331);
      std::__shared_weak_count::__release_weak(v331);
    }
  }
  v334 = v432;
  if (v432)
  {
    v335 = (unint64_t *)&v432->__shared_owners_;
    do
      v336 = __ldaxr(v335);
    while (__stlxr(v336 - 1, v335));
    if (!v336)
    {
      ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
      std::__shared_weak_count::__release_weak(v334);
    }
  }
}

void sub_1913EA140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  void *a65;
  char a70;
  char a71;
  void *v71;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (__p)
    operator delete(__p);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a33);
  if (a56 < 0)
    operator delete(a51);
  if (a63 < 0)
    operator delete(a58);
  if (a70 < 0)
    operator delete(a65);
  a33 = &a71;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x350]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x360]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x370]);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x410]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x420]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x430]);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::stir_gather_nd_kernel::compile(Espresso::ANECompilerEngine::stir_gather_nd_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3)
{
  Espresso::ANECompilerEngine::stir_gather_nd_kernel::compile((Espresso::ANECompilerEngine::stir_gather_nd_kernel *)((char *)this - 296), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::stir_gather_nd_kernel::~stir_gather_nd_kernel(void **this)
{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
}

{
  Espresso::base_kernel *v1;

  v1 = (Espresso::base_kernel *)(this - 37);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(this);
  Espresso::base_kernel::~base_kernel(v1);
  JUMPOUT(0x19401CD90);
}

uint64_t `anonymous namespace'::torch_mode_gather_axis(unsigned int a1, int a2, int a3, int *a4)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  int v7;

  v4 = 0;
  v5 = (a1 & (a3 >> 31)) + a3;
  if ((v5 & 0x80000000) == 0 && v5 < (int)a1)
  {
    if (a1 <= 5 && (v6 = ~(_DWORD)v5 + a1, v6 <= 4))
    {
      v7 = 4;
      switch(v6)
      {
        case 0u:
          break;
        case 1u:
          v7 = 3;
          break;
        case 2u:
          if (((a1 == 5) & a2) != 0)
            v7 = 1;
          else
            v7 = 2;
          break;
        case 3u:
          if (((a1 == 5) & a2) != 0)
            v7 = 2;
          else
            v7 = 0;
          break;
        case 4u:
          v7 = a2 ^ 1;
          if (a1 != 5)
            v7 = 1;
          break;
        default:
          return 0;
      }
      *a4 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

unsigned int **std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>::operator=[abi:ne180100](unsigned int **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v27;

  v3 = a2;
  v5 = a2 + 32 * a3;
  v6 = 32 * a3;
  v7 = (32 * a3) >> 5;
  v8 = (uint64_t)a1[2];
  v9 = *a1;
  if (v7 > (v8 - (uint64_t)*a1) >> 5)
  {
    if (v9)
    {
      v10 = (uint64_t)a1[1];
      v11 = v9;
      if ((unsigned int *)v10 != v9)
      {
        do
        while ((unsigned int *)v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (v6 < 0)
      goto LABEL_38;
    v12 = v8 >> 4;
    if (v8 >> 4 <= v7)
      v12 = v7;
    v13 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v12;
    if (v13 >> 59)
LABEL_38:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v13);
    *a1 = (unsigned int *)v14;
    a1[1] = (unsigned int *)v14;
    a1[2] = (unsigned int *)&v14[32 * v15];
    v16 = (uint64_t)a1;
    v17 = v3;
    goto LABEL_25;
  }
  v18 = (uint64_t)a1[1];
  v19 = (v18 - (uint64_t)v9) >> 5;
  if (v19 < v7)
  {
    if ((unsigned int *)v18 == v9)
    {
LABEL_24:
      v17 = v3 + 32 * v19;
      v16 = (uint64_t)a1;
LABEL_25:
      return a1;
    }
    v20 = 32 * v19;
    v21 = a2;
    while (1)
    {
      v22 = v9[6];
      v23 = *(unsigned int *)(v21 + 24);
      if ((_DWORD)v22 == -1)
      {
        if ((_DWORD)v23 != -1)
        {
LABEL_22:
          v27 = v9;
          ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E2DD2A88[v23])(&v27, v9, v21);
        }
      }
      else
      {
        if ((_DWORD)v23 != -1)
          goto LABEL_22;
        ((void (*)(unsigned int **, unsigned int *))off_1E2DD2A28[v22])(&v27, v9);
        v9[6] = -1;
      }
      v21 += 32;
      v9 += 8;
      v20 -= 32;
      if (!v20)
        goto LABEL_24;
    }
  }
  if (!a3)
    goto LABEL_35;
  do
  {
    v24 = v9[6];
    v25 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v24 == -1)
    {
      if ((_DWORD)v25 == -1)
        goto LABEL_32;
    }
    else if ((_DWORD)v25 == -1)
    {
      ((void (*)(unsigned int **, unsigned int *))off_1E2DD2A28[v24])(&v27, v9);
      v9[6] = -1;
      goto LABEL_32;
    }
    v27 = v9;
    ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E2DD2A88[v25])(&v27, v9, v3);
LABEL_32:
    v3 += 32;
    v9 += 8;
    v6 -= 32;
  }
  while (v6);
  v18 = (uint64_t)a1[1];
LABEL_35:
  while ((unsigned int *)v18 != v9)
  a1[1] = v9;
  return a1;
}

uint64_t `anonymous namespace'::maybe_round_index_tensor(uint64_t result, int a2)
{
  _DWORD v2[8];

  if (a2 != 2 && a2 != 4)
  {
    v2[6] = 3;
  }
  return result;
}

void sub_1913EABF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _Unwind_Resume(a1);
}

void *std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>(_QWORD *a1, _BYTE *__src, _BYTE *a3)
{
  void *result;
  char *v7;
  _QWORD *v8;
  char *v9;
  size_t v10;
  char *v11;

  result = (void *)a1[2];
  v7 = (char *)*a1;
  if (result == (void *)*a1)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    result = std::vector<Espresso::ANECompilerEngine::NamedAxis>::__vallocate[abi:ne180100](a1, 1uLL);
    v11 = (char *)a1[1];
    v8 = a1 + 1;
    v7 = v11;
    v10 = a3 - __src;
    if (a3 != __src)
      goto LABEL_4;
  }
  else
  {
    v9 = (char *)a1[1];
    v8 = a1 + 1;
    v10 = a3 - __src;
    if (v9 == v7)
    {
      if (__src == a3)
        goto LABEL_5;
      goto LABEL_4;
    }
    if (a3 != __src)
LABEL_4:
      result = memmove(v7, __src, v10);
  }
LABEL_5:
  *v8 = &v7[v10];
  return result;
}

uint64_t `anonymous namespace'::tf_gather_mode_plan(void *a1, unsigned int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9)
{
  id v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v24;
  int v25;
  unsigned int v26;
  signed int v27;
  unsigned int v28;
  signed int v29;
  BOOL v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  signed int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t *v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  unsigned int v81;
  unint64_t v82;
  unsigned int v83;
  unsigned int v84;
  void *v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  int64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  signed int v94;
  id v95;
  int v96;
  int v97;
  _BOOL4 v98;
  uint64_t *v99;
  unint64_t v100;
  void *__p;
  uint64_t *v102;
  unint64_t v103;
  void *__src[2];
  uint64_t v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  if (a8 < 0
    || ((v17 = (uint64_t)a9,
         v18 = a3 - a8,
         a3 != a8)
      ? (v19 = a3)
      : (v19 = a3 + 1),
        (v20 = v19 + ~a8, v20 < 0) || (v21 = v20 + a2, (int)(v20 + a2) > 5)))
  {
    v22 = 0;
    goto LABEL_8;
  }
  v97 = a5;
  v98 = a3 == a8;
  v96 = a4;
  v22 = 0;
  v24 = 0;
  __p = 0;
  v102 = 0;
  v103 = 0;
  v25 = ~((a2 & (a7 >> 31)) + a7);
  v26 = v21 + v25;
  v99 = (uint64_t *)(v19 + ~a8);
  v27 = v21 + v25 - (_DWORD)v99;
  if ((v27 & 0x80000000) == 0 && v27 + v19 <= 5)
  {
    v28 = v21;
    v29 = v21 - a3;
    if (a8 && v29 < v27 || a8 && (int)(v28 + v98) > 5)
    {
LABEL_15:
      v24 = 0;
      goto LABEL_16;
    }
    v87 = v28;
    v88 = (a2 & (a7 >> 31)) + a7;
    if (a8)
      v30 = v28 == a3;
    else
      v30 = 1;
    v31 = !v30;
    v32 = (int)v99;
    v95 = v16;
    if (v26 != (_DWORD)v99 || v31)
    {
      v86 = ~((a2 & (a7 >> 31)) + a7);
      v62 = 0;
      v63 = 0;
      if (a3 <= 1)
        v64 = 1;
      else
        v64 = a3;
      v65 = v18;
      v94 = v29;
      v90 = v18;
      v92 = v64;
      while (1)
      {
        if (v62 <= 4)
          v66 = dword_191A9CB74[v62];
        else
          v66 = 0;
        if ((uint64_t)v62 >= v65)
          v67 = v29;
        else
          v67 = v27;
        if (!a8)
          v67 = v27;
        v68 = v67 + v62;
        if (v68 > 4 || v62 == 5)
          goto LABEL_15;
        v69 = qword_191A9CBB0[v68];
        if ((unint64_t)v63 >= v103)
        {
          v71 = __p;
          v72 = ((char *)v63 - (_BYTE *)__p) >> 3;
          v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v74 = v103 - (_QWORD)__p;
          if ((uint64_t)(v103 - (_QWORD)__p) >> 2 > v73)
            v73 = v74 >> 2;
          if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
            v75 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v75 = v73;
          if (v75)
            v75 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v75);
          else
            v76 = 0;
          v77 = (uint64_t *)(v75 + 8 * v72);
          *v77 = v69 | v66;
          v70 = v77 + 1;
          if (v63 == v71)
          {
            v17 = (uint64_t)a9;
          }
          else
          {
            v17 = (uint64_t)a9;
            do
            {
              v78 = *--v63;
              *--v77 = v78;
            }
            while (v63 != v71);
            v63 = __p;
          }
          __p = v77;
          v103 = v75 + 8 * v76;
          v16 = v95;
          if (v63)
            operator delete(v63);
          v29 = v94;
          v65 = v90;
          v64 = v92;
        }
        else
        {
          *v63 = v69 | v66;
          v70 = v63 + 1;
        }
        v102 = v70;
        ++v62;
        v63 = v70;
        if (v62 == v64)
        {
          Espresso::ANECompilerEngine::fill_unpaired_transposes((uint64_t)&__p);
          v79 = v102;
          v32 = (int)v99;
          v25 = v86;
          if (v79 != v80)
            v102 = v80;
          break;
        }
      }
    }
    if (v32 >= 1)
    {
      v33 = 0;
      v24 = 0;
      v34 = 0;
      v35 = 0;
      v36 = v25 + a2;
      v37 = a2;
      if (a2 <= 5)
        v38 = 5 - a2;
      else
        v38 = 0;
      v91 = v36;
      v93 = a2;
      v89 = v38;
      while (v33 != v38 && v33 + v36 <= 4)
      {
        v39 = dword_191A9CB74[v33 + v37];
        v40 = qword_191A9CBB0[v33 + v36];
        if ((unint64_t)v34 >= v35)
        {
          v42 = v34 - v24;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 61)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if ((uint64_t)(v35 - (_QWORD)v24) >> 2 > v43)
            v43 = (uint64_t)(v35 - (_QWORD)v24) >> 2;
          if (v35 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v44);
          else
            v45 = 0;
          v46 = (uint64_t *)(v44 + 8 * v42);
          *v46 = v40 | v39;
          v47 = v46 + 1;
          if (v34 == v24)
          {
            v41 = v99;
          }
          else
          {
            v41 = v99;
            do
            {
              v48 = *--v34;
              *--v46 = v48;
            }
            while (v34 != v24);
          }
          v35 = v44 + 8 * v45;
          if (v24)
          {
            v49 = v24;
            v50 = v35;
            operator delete(v49);
            v35 = v50;
          }
          v24 = v46;
          v34 = v47;
          v16 = v95;
          v36 = v91;
          v37 = a2;
          v38 = v89;
        }
        else
        {
          *v34++ = v40 | v39;
          v41 = v99;
        }
        if ((uint64_t *)++v33 == v41)
        {
          if ((int)v36 >= (int)a2)
          {
            v53 = v34;
            goto LABEL_118;
          }
          while (v36 <= 4 && ((_DWORD)v41 + v36) <= 4)
          {
            v51 = dword_191A9CB74[v36];
            v52 = qword_191A9CBB0[((_DWORD)v41 + v36)];
            if ((unint64_t)v34 >= v35)
            {
              v54 = v34 - v24;
              v55 = v54 + 1;
              if ((unint64_t)(v54 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v56 = v36;
              if ((uint64_t)(v35 - (_QWORD)v24) >> 2 > v55)
                v55 = (uint64_t)(v35 - (_QWORD)v24) >> 2;
              if (v35 - (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
                v57 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v57 = v55;
              if (v57)
                v57 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v57);
              else
                v58 = 0;
              v41 = (uint64_t *)(v57 + 8 * v54);
              *v41 = v52 | v51;
              v53 = v41 + 1;
              if (v34 == v24)
              {
                v17 = (uint64_t)a9;
                v16 = v95;
              }
              else
              {
                v17 = (uint64_t)a9;
                v16 = v95;
                do
                {
                  v59 = *--v34;
                  *--v41 = v59;
                }
                while (v34 != v24);
              }
              v35 = v57 + 8 * v58;
              if (v24)
              {
                v60 = v24;
                v61 = v35;
                operator delete(v60);
                v35 = v61;
              }
              v24 = v41;
              LODWORD(v41) = (_DWORD)v99;
              v36 = v56;
              v37 = v93;
            }
            else
            {
              *v34 = v52 | v51;
              v53 = v34 + 1;
              v16 = v95;
            }
            ++v36;
            v34 = v53;
            if (v36 == v37)
              goto LABEL_118;
          }
          goto LABEL_16;
        }
      }
      goto LABEL_16;
    }
    v24 = 0;
    v53 = 0;
LABEL_118:
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((_QWORD *)(v17 + 24), v24, v53, v53 - v24);
    if (v102 == __p)
    {
    }
    else
    {
      __src[0] = 0;
      __src[1] = 0;
      v105 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)__src, (uint64_t *)__p, v102, ((char *)v102 - (_BYTE *)__p) >> 3);
      v106 = 0;
    }
    if (v87 - v98 != v97)
    {
LABEL_16:
      v22 = 0;
      goto LABEL_17;
    }
    v81 = v98 + v97 - 1;
    v82 = v81 - v88;
    if (v82 <= 4)
    {
      v83 = dword_191A9CB74[v82];
      LODWORD(__src[0]) = v83;
      std::vector<Espresso::ANECompilerEngine::NamedAxis>::__assign_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis const*,Espresso::ANECompilerEngine::NamedAxis const*>(a9 + 9, __src, (_BYTE *)__src + 4);
      v22 = 1;
      if (a3 != a8 || !v88)
        goto LABEL_124;
      __src[0] = 0;
      __src[1] = 0;
      v105 = 0;
      if (v81 <= 4)
      {
        v100 = __PAIR64__(dword_191A9CB74[v81], v83);
        std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](__src, &v100);
        if (v88 < 1)
        {
LABEL_131:
          v85 = (void *)a9[12];
          if (v85)
          {
            a9[13] = v85;
            operator delete(v85);
            a9[12] = 0;
            a9[13] = 0;
            a9[14] = 0;
          }
          *((_OWORD *)a9 + 6) = *(_OWORD *)__src;
          a9[14] = v105;
          v22 = 1;
          goto LABEL_124;
        }
        while (v82 <= 3)
        {
          v84 = dword_191A9CB74[v82];
          LODWORD(v100) = dword_191A93A30[v82];
          HIDWORD(v100) = v84;
          std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](__src, &v100);
          if ((uint64_t)++v82 >= (int)v81)
            goto LABEL_131;
        }
        if (__src[0])
          operator delete(__src[0]);
      }
    }
    v22 = 0;
LABEL_124:
    v16 = v95;
  }
LABEL_17:
  if (__p)
    operator delete(__p);
  if (v24)
    operator delete(v24);
LABEL_8:

  return v22;
}

void sub_1913EB3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p)
{
  void *v23;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  if (v23)
    operator delete(v23);

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::tf_gather_nd_plan(void *a1, int a2, int a3, uint64_t a4, int *a5, uint64_t a6, int a7, _QWORD *a8)
{
  id v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  int v44;
  BOOL v46;
  uint64_t v47;
  int v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  BOOL v61;
  BOOL v62;
  int v63;
  int v64;
  int v65;
  char v66;
  int v67;
  int *v68;
  int v69;
  char v70;
  void *v71;
  uint64_t *v72;
  uint64_t i;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t *v95;
  uint64_t v96;
  int *v97;
  int *v98;
  unint64_t v99;
  unsigned int v100;
  signed int v101;
  _BOOL4 v102;
  int v103;
  BOOL v104;
  int v105;
  int v106;
  int v107;
  _DWORD *j;
  int *v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  int *v114;
  int v115;
  void *v116;
  std::runtime_error *exception;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  int *v123;
  void **v124;
  id v125;
  id v126;
  id v127;
  unsigned int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v136;
  _QWORD *v137;
  unsigned int v138;
  __int128 v139;
  unint64_t v140;
  int *v141;
  int *v142;
  uint64_t v143;
  char *v144;
  char *v145;
  char *v146;
  void *__p;
  uint64_t *v148;
  unint64_t v149;
  __int128 v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  int v154;
  int v155;
  _QWORD v156[3];
  int v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v14 = a1;
  if (a2 < 0)
    goto LABEL_45;
  v15 = a5[4];
  v16 = v15;
  if (v15 == 5)
  {
    LODWORD(v150) = 3;
    LODWORD(v152) = 2;
    v16 = 8;
  }
  v131 = a2;
  v133 = v16;
  v17 = a5[6];
  v138 = *(_DWORD *)(a4 + 24);
  v130 = v15;
  v18 = v17 + v138 - a2 - v15 - 1;
  v123 = a5 + 4;
  v124 = (void **)(a8 + 3);
  a8[4] = a8[3];
  v137 = a8;
  if (a2)
  {
    v19 = v17 + -a2 - v15 - 1;
    if (v18 != v138)
    {
      if (v18 <= 5)
      {
        if (v19 < 0)
        {
          v20 = 0;
          if ((int)(v138 - a2) < 1 - ((int)v17 + -a2 - v15))
            goto LABEL_209;
        }
        v120 = v17;
        v121 = a3;
        v125 = v14;
        v21 = v138 - 1 - a2;
        v119 = v17 + v138 - a2 - v15 - 1;
        if ((int)(v138 - 1) <= (int)(v17 + v138 - a2 - v15 - 2))
          v22 = v17 + v138 - a2 - v15 - 2;
        else
          v22 = v138 - 1;
        v23 = v19 + v21;
        if (v19 + v21 >= v21)
          v23 = v138 - 1 - a2;
        v24 = v22 - v23;
        v150 = 0uLL;
        v151 = 0;
        std::vector<Espresso::net *>::reserve((void **)&v150, (int)v24);
        if ((int)v24 >= 1)
        {
          v25 = 0;
          v128 = v22;
          do
          {
            if (v22 - v25 > 4
              || (v26 = v22 - ((int)v25 - v19) % (int)v24 - (v24 & ((((int)v25 - v19) % (int)v24) >> 31)), v26 >= 5))
            {
              Espresso::throw_exception_selector<Espresso::invalid_state_error>("Logic error in transpose rotation.");
            }
            v27 = qword_191A9CB88[v22 - v25];
            v28 = qword_191A9CBB0[v26];
            v29 = (char *)*((_QWORD *)&v150 + 1);
            if (*((_QWORD *)&v150 + 1) >= v151)
            {
              v31 = (char *)v150;
              v32 = (uint64_t)(*((_QWORD *)&v150 + 1) - v150) >> 3;
              v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v34 = v151 - v150;
              if ((uint64_t)(v151 - v150) >> 2 > v33)
                v33 = v34 >> 2;
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
                v35 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v35 = v33;
              if (v35)
                v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v35);
              else
                v36 = 0;
              v37 = (uint64_t *)(v35 + 8 * v32);
              *v37 = v28 | v27;
              v30 = v37 + 1;
              if (v29 != v31)
              {
                do
                {
                  v38 = *((_QWORD *)v29 - 1);
                  v29 -= 8;
                  *--v37 = v38;
                }
                while (v29 != v31);
                v29 = (char *)v150;
              }
              *(_QWORD *)&v150 = v37;
              v151 = v35 + 8 * v36;
              v22 = v128;
              if (v29)
                operator delete(v29);
            }
            else
            {
              **((_QWORD **)&v150 + 1) = v28 | v27;
              v30 = v29 + 8;
            }
            *((_QWORD *)&v150 + 1) = v30;
            ++v25;
          }
          while (v25 != v24);
        }
        v39 = *v124;
        a8 = v137;
        if (*v124)
        {
          v137[4] = v39;
          operator delete(v39);
          *v124 = 0;
          v124[1] = 0;
          v124[2] = 0;
        }
        *(_OWORD *)(v137 + 3) = v150;
        v137[5] = v151;
        v14 = v125;
        a3 = v121;
        v17 = v120;
        v18 = v119;
        goto LABEL_38;
      }
LABEL_45:
      v20 = 0;
      goto LABEL_209;
    }
  }
LABEL_38:
  v40 = 0;
  __p = 0;
  v148 = 0;
  v149 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  if ((_DWORD)v17 == 1 || v18 == (_DWORD)v17)
    goto LABEL_87;
  v44 = v18 - v17;
  if (v18 > 5 || v44 < -1)
    goto LABEL_45;
  v46 = (int)v17 < 2;
  if ((v17 - 6) < 0xFFFFFFFC)
  {
    if ((int)v17 < 2)
    {
      v40 = 0;
      v41 = 0;
      v42 = 0;
      v43 = 0;
      goto LABEL_87;
    }
    goto LABEL_45;
  }
  v122 = a3;
  v126 = v14;
  v41 = 0;
  v47 = 1;
  v48 = 1;
  v129 = v18 - v17;
  while (1)
  {
    if (v47 == 5)
    {
      v40 = (int *)__p;
      if (v46)
        goto LABEL_76;
LABEL_73:
      v20 = 0;
      v14 = v126;
      goto LABEL_207;
    }
    if ((v48 + v44) > 4)
      break;
    v49 = a5;
    v50 = dword_191A93A30[v47 - 1];
    v51 = qword_191A9CBB0[v48 + v44];
    if ((unint64_t)v41 >= v149)
    {
      v52 = (int *)__p;
      v53 = ((char *)v41 - (_BYTE *)__p) >> 3;
      v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v55 = v149 - (_QWORD)__p;
      if ((uint64_t)(v149 - (_QWORD)__p) >> 2 > v54)
        v54 = v55 >> 2;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
        v56 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v56 = v54;
      if (v56)
        v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v56);
      else
        v57 = 0;
      v58 = (uint64_t *)(v56 + 8 * v53);
      *v58 = v51 | v50;
      v59 = v58 + 1;
      a5 = v49;
      if (v41 != v52)
      {
        do
        {
          v60 = *((_QWORD *)v41 - 1);
          v41 -= 2;
          *--v58 = v60;
        }
        while (v41 != v52);
        v41 = (int *)__p;
      }
      __p = v58;
      v148 = v59;
      v149 = v56 + 8 * v57;
      if (v41)
        operator delete(v41);
      v41 = (int *)v59;
      v44 = v129;
    }
    else
    {
      *(_QWORD *)v41 = v51 | v50;
      v41 += 2;
      a5 = v49;
    }
    v148 = (uint64_t *)v41;
    v61 = ++v47 >= v17;
    a8 = v137;
    if (v17 <= 5)
    {
      v46 = 0;
      ++v48;
      if (v47 < v17)
        continue;
    }
    goto LABEL_75;
  }
  v61 = v46;
LABEL_75:
  v40 = (int *)__p;
  if (!v61)
    goto LABEL_73;
LABEL_76:
  v14 = v126;
  a3 = v122;
  if (v40 == v41)
  {
    v40 = v41;
    v42 = v41;
LABEL_86:
    v43 = v41;
  }
  else
  {
    v42 = v40;
    while (v42[1] != 2)
    {
      v42 += 2;
      if (v42 == v41)
      {
        v42 = v41;
        break;
      }
    }
    v43 = v40;
    while (*v43 != 2)
    {
      v43 += 2;
      if (v43 == v41)
        goto LABEL_86;
    }
  }
LABEL_87:
  v62 = v43 == v41;
  if (a5[1] < 2)
    v62 = 0;
  if (v42 != v41)
    v62 = 0;
  v127 = v14;
  if (v42 != v41)
  {
    v63 = *v42;
    switch(*v42)
    {
      case 0:
        break;
      case 1:
        a5 += 2;
        break;
      case 2:
        ++a5;
        break;
      case 3:
        a5 += 3;
        break;
      case 4:
        a5 = v123;
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
        Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
    }
    if (*a5 > 1)
    {
      v64 = v133;
      if (v133 != 1)
      {
        v65 = a3;
        v66 = 0;
        v67 = 1;
        switch(v63)
        {
          case 0:
            goto LABEL_111;
          case 1:
            v66 = 0;
            v67 = 2;
            goto LABEL_111;
          case 2:
            goto LABEL_110;
          case 3:
            v67 = 4;
            v66 = 1;
            goto LABEL_111;
          case 4:
            v144 = 0;
            v145 = 0;
            v146 = 0;
            goto LABEL_134;
          default:
            Espresso::throw_exception_selector<Espresso::invalid_state_error>("Nothing to the right of width in NDCHW order.");
        }
      }
      goto LABEL_156;
    }
    v68 = v42 + 2;
    if (v42 + 2 == v41)
    {
      v41 = v42;
    }
    else
    {
      do
      {
        v69 = v68[1];
        *(v68 - 2) = *v68;
        *(v68 - 1) = v69;
        v68 += 2;
      }
      while (v68 != v41);
      v41 = v68 - 2;
    }
    v148 = (uint64_t *)v41;
  }
  v70 = !v62;
  if (v133 == 1)
    v70 = 1;
  if ((v70 & 1) != 0)
  {
    if (v133 != 1)
    {
      if ((unint64_t)v41 >= v149)
      {
        v89 = ((char *)v41 - (char *)v40) >> 3;
        v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v91 = v149 - (_QWORD)v40;
        if ((uint64_t)(v149 - (_QWORD)v40) >> 2 > v90)
          v90 = v91 >> 2;
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8)
          v92 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v92 = v90;
        if (v92)
          v92 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v92);
        else
          v93 = 0;
        v95 = (uint64_t *)(v92 + 8 * v89);
        *v95 = 0x200000004;
        v72 = v95 + 1;
        if (v41 != v40)
        {
          do
          {
            v96 = *((_QWORD *)v41 - 1);
            v41 -= 2;
            *--v95 = v96;
          }
          while (v41 != v40);
          v40 = (int *)__p;
        }
        __p = v95;
        v148 = v72;
        v149 = v92 + 8 * v93;
        if (v40)
          operator delete(v40);
      }
      else
      {
        *(_QWORD *)v41 = 0x200000004;
        v72 = (uint64_t *)(v41 + 2);
      }
      v148 = v72;
    }
LABEL_156:
    Espresso::ANECompilerEngine::fill_unpaired_transposes((uint64_t)&__p);
    v88 = v130;
    v86 = v131;
    if (v148 != __p)
    {
      v150 = 0uLL;
      v151 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v150, (uint64_t *)__p, v148, ((char *)v148 - (_BYTE *)__p) >> 3);
      LODWORD(v152) = 0;
    }
  }
  else
  {
    v65 = a3;
    v64 = v133;
LABEL_110:
    v66 = 0;
    v67 = 3;
    v63 = 2;
LABEL_111:
    v71 = operator new(0x10uLL);
    *(_DWORD *)v71 = 4;
    *((_DWORD *)v71 + 1) = v67;
    *((_DWORD *)v71 + 2) = v67;
    *((_DWORD *)v71 + 3) = 4;
    if ((v66 & 1) != 0)
    {
      *(_QWORD *)&v150 = __PAIR64__(v67, v63);
      DWORD2(v150) = v64;
      LODWORD(v152) = 1;
      v145 = 0;
      v146 = 0;
      v144 = 0;
      v141 = (int *)&v144;
      LOBYTE(v142) = 0;
      v144 = (char *)operator new(0x20uLL);
      v145 = v144;
      v146 = v144 + 32;
    }
    else
    {
      v150 = 0uLL;
      v151 = 0;
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v150, (uint64_t *)v71, (uint64_t *)v71 + 2, 2uLL);
      LODWORD(v152) = 0;
      v153 = __PAIR64__(v67, v63);
      v154 = v64;
      v155 = 1;
      memset(v156, 0, sizeof(v156));
      std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)v156, (uint64_t *)v71, (uint64_t *)v71 + 2, 2uLL);
      v157 = 0;
      v145 = 0;
      v146 = 0;
      v144 = 0;
      v141 = (int *)&v144;
      LOBYTE(v142) = 0;
      v144 = (char *)operator new(0x60uLL);
      v145 = v144;
      v146 = v144 + 96;
      for (i = 64; i != -32; i -= 32)
      a8 = v137;
    }
    operator delete(v71);
    v75 = (uint64_t)v144;
    v74 = v145;
    if (v144 != v145)
    {
      v76 = a8 + 6;
      v77 = a8 + 8;
      v78 = a8[7];
      do
      {
        if (v78 >= *v77)
        {
          v79 = (uint64_t)(v78 - *v76) >> 5;
          if ((unint64_t)(v79 + 1) >> 59)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v80 = *v77 - *v76;
          v81 = v80 >> 4;
          if (v80 >> 4 <= (unint64_t)(v79 + 1))
            v81 = v79 + 1;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFE0)
            v82 = 0x7FFFFFFFFFFFFFFLL;
          else
            v82 = v81;
          v153 = (unint64_t)v77;
          if (v82)
            v82 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v82);
          else
            v83 = 0;
          *(_QWORD *)&v150 = v82;
          *((_QWORD *)&v150 + 1) = v82 + 32 * v79;
          v151 = *((_QWORD *)&v150 + 1);
          v152 = v82 + 32 * v83;
          v151 += 32;
          a8 = v137;
          v78 = v137[7];
        }
        else
        {
          v78 += 32;
          a8[7] = v78;
        }
        a8[7] = v78;
        v75 += 32;
      }
      while ((char *)v75 != v74);
    }
LABEL_134:
    Espresso::ANECompilerEngine::fill_unpaired_transposes((uint64_t)&__p);
    v85 = __p;
    v84 = v148;
    a3 = v65;
    v86 = v131;
    if (v148 != __p)
    {
      v87 = a8[7];
      if (v87 == a8[6] || *(_DWORD *)(v87 - 8))
      {
        v150 = 0uLL;
        v151 = 0;
        std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v150, (uint64_t *)__p, v148, ((char *)v148 - (_BYTE *)__p) >> 3);
        LODWORD(v152) = 0;
      }
      else
      {
        v141 = 0;
        v142 = 0;
        v143 = 0;
        std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v141, *(uint64_t **)(v87 - 32), *(uint64_t **)(v87 - 24), (uint64_t)(*(_QWORD *)(v87 - 24) - *(_QWORD *)(v87 - 32)) >> 3);
        v94 = v141;
        if ((_QWORD)v139 == *((_QWORD *)&v139 + 1))
        {
          if ((_QWORD)v139)
            operator delete((void *)v139);
        }
        else
        {
          v150 = v139;
          v151 = v140;
          LODWORD(v152) = 0;
        }
        if (v94)
          operator delete(v94);
      }
    }
    *(_QWORD *)&v150 = &v144;
    v88 = v130;
  }
  if (v88 < 1)
  {
    v97 = 0;
    v109 = 0;
    v99 = 0;
LABEL_200:
    v116 = (void *)a8[9];
    if (v116)
    {
      a8[10] = v116;
      operator delete(v116);
      a8[9] = 0;
      a8[10] = 0;
      a8[11] = 0;
    }
    a8[9] = v97;
    a8[10] = v109;
    v20 = 1;
    a8[11] = v99;
  }
  else
  {
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = v138 + ~v86;
    v101 = v100 - v88;
    v102 = v138 == 5;
    v103 = a3 ^ 1;
    if (v138 != 5)
      v103 = 1;
    v104 = (v102 & a3) == 0;
    if ((v102 & a3) != 0)
      v105 = 2;
    else
      v105 = 0;
    v134 = v105;
    v136 = v103;
    if (v104)
      v106 = 2;
    else
      v106 = 1;
    v132 = v106;
    while (v138 <= 5 && v100 <= 4)
    {
      v107 = 4;
      switch(v100)
      {
        case 0u:
          break;
        case 1u:
          v107 = 3;
          break;
        case 2u:
          v107 = v132;
          break;
        case 3u:
          v107 = v134;
          break;
        case 4u:
          v107 = v136;
          break;
        default:
          goto LABEL_203;
      }
      for (j = (_DWORD *)a8[3]; j != (_DWORD *)a8[4]; j += 2)
      {
        if (v107 == *j)
          v107 = j[1];
      }
      if ((unint64_t)v98 >= v99)
      {
        v110 = v98 - v97;
        v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v99 - (_QWORD)v97) >> 1 > v111)
          v111 = (uint64_t)(v99 - (_QWORD)v97) >> 1;
        if (v99 - (unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
          v112 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v112 = v111;
        if (v112)
          v112 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v112);
        else
          v113 = 0;
        v114 = (int *)(v112 + 4 * v110);
        *v114 = v107;
        v109 = v114 + 1;
        while (v98 != v97)
        {
          v115 = *--v98;
          *--v114 = v115;
        }
        v99 = v112 + 4 * v113;
        if (v97)
          operator delete(v97);
        v97 = v114;
        a8 = v137;
      }
      else
      {
        *v98 = v107;
        v109 = v98 + 1;
      }
      --v100;
      v98 = v109;
      if ((int)v100 <= v101)
        goto LABEL_200;
    }
LABEL_203:
    if (v97)
      operator delete(v97);
    v20 = 0;
  }
  v14 = v127;
  v40 = (int *)__p;
LABEL_207:
  if (v40)
  {
    v148 = (uint64_t *)v40;
    operator delete(v40);
  }
LABEL_209:

  return v20;
}

void sub_1913EC120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;

  if (v33)
    operator delete(v33);
  a24 = &a27;
  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_OWORD *`anonymous namespace'::infer_shape_from_transpose(_OWORD *result, _OWORD *a2, _DWORD *a3, _DWORD *a4)
{
  __int128 v4;
  _DWORD *v5;
  _DWORD *v6;
  std::runtime_error *exception;

  v4 = a2[1];
  *result = *a2;
  result[1] = v4;
  if (a3 != a4)
  {
    while (2)
    {
      v5 = a2;
      switch(*a3)
      {
        case 0:
          break;
        case 1:
          v5 = (_DWORD *)a2 + 2;
          break;
        case 2:
          v5 = (_DWORD *)a2 + 1;
          break;
        case 3:
          v5 = (_DWORD *)a2 + 3;
          break;
        case 4:
          v5 = a2 + 1;
          break;
        default:
LABEL_14:
          exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
          Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
      }
      v6 = result;
      switch(a3[1])
      {
        case 0:
          goto LABEL_12;
        case 1:
          v6 = (_DWORD *)result + 2;
          goto LABEL_12;
        case 2:
          v6 = (_DWORD *)result + 1;
          goto LABEL_12;
        case 3:
          v6 = (_DWORD *)result + 3;
          goto LABEL_12;
        case 4:
          v6 = result + 1;
LABEL_12:
          *v6 = *v5;
          a3 += 2;
          if (a3 == a4)
            return result;
          continue;
        default:
          goto LABEL_14;
      }
    }
  }
  return result;
}

void sub_1913EC3F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *`anonymous namespace'::infer_shape_from_reshape_adjacent(int *result, _OWORD *a2, _DWORD *a3)
{
  __int128 v3;
  int *v4;
  int v5;
  std::runtime_error *exception;

  v3 = a2[1];
  *(_OWORD *)result = *a2;
  *((_OWORD *)result + 1) = v3;
  v4 = result;
  switch(a3[1])
  {
    case 0:
      goto LABEL_6;
    case 1:
      v4 = result + 2;
      goto LABEL_6;
    case 2:
      v4 = result + 1;
      goto LABEL_6;
    case 3:
      v4 = result + 3;
      goto LABEL_6;
    case 4:
      v4 = result + 4;
LABEL_6:
      v5 = a3[2];
      *v4 /= v5;
      switch(*a3)
      {
        case 0:
          goto LABEL_11;
        case 1:
          result += 2;
          goto LABEL_11;
        case 2:
          ++result;
          goto LABEL_11;
        case 3:
          result += 3;
          goto LABEL_11;
        case 4:
          result += 4;
LABEL_11:
          *result *= v5;
          return result;
        default:
          goto LABEL_12;
      }
    default:
      break;
  }
LABEL_12:
  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::invalid_state_error::invalid_state_error(exception, "Bad axis.");
}

void sub_1913EC514(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::compose_transpose_permutations(uint64_t **a1, int *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  int *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;

  v6 = 1;
  v57 = 1;
  v58 = 0;
  v7 = 2;
  v8 = 3;
  v55 = 3;
  v56 = 2;
  v9 = 4;
  v54 = 4;
  if (a2 == a3)
  {
    v11 = 0;
  }
  else
  {
    while (2)
    {
      if (*a2 >= 5)
LABEL_99:
        Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Unknown axis enum value.");
      v10 = (int *)&v58;
      switch(a2[1])
      {
        case 0:
          goto LABEL_8;
        case 1:
          v10 = &v57;
          goto LABEL_8;
        case 2:
          v10 = &v56;
          goto LABEL_8;
        case 3:
          v10 = &v55;
          goto LABEL_8;
        case 4:
          v10 = &v54;
LABEL_8:
          *v10 = *a2;
          a2 += 2;
          if (a2 != a3)
            continue;
          v6 = v57;
          v11 = v58;
          v8 = v55;
          v7 = v56;
          v9 = v54;
          break;
        default:
          goto LABEL_99;
      }
      break;
    }
  }
  if (a4 != a5)
  {
    while (2)
    {
      v12 = v11;
      switch(*a4)
      {
        case 0:
          goto LABEL_17;
        case 1:
          v12 = v6;
          goto LABEL_17;
        case 2:
          v12 = v7;
          goto LABEL_17;
        case 3:
          v12 = v8;
          goto LABEL_17;
        case 4:
          v12 = v9;
LABEL_17:
          v13 = (int *)&v58;
          switch(a4[1])
          {
            case 0:
              goto LABEL_22;
            case 1:
              v13 = &v57;
              goto LABEL_22;
            case 2:
              v13 = &v56;
              goto LABEL_22;
            case 3:
              v13 = &v55;
              goto LABEL_22;
            case 4:
              v13 = &v54;
LABEL_22:
              *v13 = v12;
              a4 += 2;
              if (a4 != a5)
                continue;
              v6 = v57;
              v11 = v58;
              v8 = v55;
              v7 = v56;
              v9 = v54;
              break;
            default:
              goto LABEL_99;
          }
          goto LABEL_24;
        default:
          goto LABEL_99;
      }
    }
  }
LABEL_24:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (v11)
  {
    v14 = (uint64_t *)operator new(8uLL);
    *v14 = v11;
    v15 = v14 + 1;
    *a1 = v14;
    a1[1] = v14 + 1;
    a1[2] = v14 + 1;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  if (v6 == 1)
  {
    v16 = v15;
  }
  else
  {
    v17 = (char *)v15 - (char *)v14;
    v18 = v15 - v14;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    if (v17 >> 2 > v19)
      v19 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    if (v20)
      v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v20);
    else
      v21 = 0;
    v22 = (uint64_t *)(v20 + 8 * v18);
    *v22 = v6 | 0x100000000;
    v16 = v22 + 1;
    if (v15 != v14)
    {
      do
      {
        v23 = *--v15;
        *--v22 = v23;
      }
      while (v15 != v14);
      v14 = *a1;
    }
    *a1 = v22;
    a1[1] = v16;
    a1[2] = (uint64_t *)(v20 + 8 * v21);
    if (v14)
      operator delete(v14);
    a1[1] = v16;
  }
  if (v7 != 2)
  {
    v24 = (unint64_t)a1[2];
    if ((unint64_t)v16 >= v24)
    {
      v26 = *a1;
      v27 = v16 - *a1;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v29 = v24 - (_QWORD)v26;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
        v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v30);
      else
        v31 = 0;
      v32 = (uint64_t *)(v30 + 8 * v27);
      *v32 = v7 | 0x200000000;
      v25 = v32 + 1;
      if (v16 != v26)
      {
        do
        {
          v33 = *--v16;
          *--v32 = v33;
        }
        while (v16 != v26);
        v16 = *a1;
      }
      *a1 = v32;
      a1[1] = v25;
      a1[2] = (uint64_t *)(v30 + 8 * v31);
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = v7 | 0x200000000;
      v25 = v16 + 1;
    }
    a1[1] = v25;
    v16 = v25;
  }
  if (v8 != 3)
  {
    v34 = (unint64_t)a1[2];
    if ((unint64_t)v16 >= v34)
    {
      v36 = *a1;
      v37 = v16 - *a1;
      v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v39 = v34 - (_QWORD)v36;
      if (v39 >> 2 > v38)
        v38 = v39 >> 2;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v40);
      else
        v41 = 0;
      v42 = (uint64_t *)(v40 + 8 * v37);
      *v42 = v8 | 0x300000000;
      v35 = v42 + 1;
      if (v16 != v36)
      {
        do
        {
          v43 = *--v16;
          *--v42 = v43;
        }
        while (v16 != v36);
        v16 = *a1;
      }
      *a1 = v42;
      a1[1] = v35;
      a1[2] = (uint64_t *)(v40 + 8 * v41);
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = v8 | 0x300000000;
      v35 = v16 + 1;
    }
    a1[1] = v35;
    v16 = v35;
  }
  if (v9 != 4)
  {
    v44 = (unint64_t)a1[2];
    if ((unint64_t)v16 >= v44)
    {
      v46 = *a1;
      v47 = v16 - *a1;
      v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v49 = v44 - (_QWORD)v46;
      if (v49 >> 2 > v48)
        v48 = v49 >> 2;
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v48;
      if (v50)
        v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v50);
      else
        v51 = 0;
      v52 = (uint64_t *)(v50 + 8 * v47);
      *v52 = v9 | 0x400000000;
      v45 = v52 + 1;
      if (v16 != v46)
      {
        do
        {
          v53 = *--v16;
          *--v52 = v53;
        }
        while (v16 != v46);
        v16 = *a1;
      }
      *a1 = v52;
      a1[1] = v45;
      a1[2] = (uint64_t *)(v50 + 8 * v51);
      if (v16)
        operator delete(v16);
    }
    else
    {
      *v16 = v9 | 0x400000000;
      v45 = v16 + 1;
    }
    a1[1] = v45;
  }
}

void sub_1913EC9E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;

  if (v2)
  {
    *(_QWORD *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void `anonymous namespace'::GatherNDPlan::~GatherNDPlan(_anonymous_namespace_::GatherNDPlan *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 13) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 10) = v4;
    operator delete(v4);
  }
  v6 = (void **)((char *)this + 48);
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5;
    operator delete(v5);
  }
  v6 = (void **)this;
  std::vector<std::vector<unsigned long>>::__destroy_vector::operator()[abi:ne180100](&v6);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>,(std::__variant_detail::_Trait)1>::~__copy_constructor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E2DD2A28[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SI_SJ_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

void `anonymous namespace'::add_rank5_3d_transposes_to_plan(int a1, int a2, int a3, int a4, _QWORD *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void **v52;
  void *v53;
  void *__p;
  _QWORD *v55;
  _QWORD *v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;

  v10 = operator new(8uLL);
  *v10 = 1;
  v55 = v10 + 1;
  v56 = v10 + 1;
  __p = v10;
  v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
  v13 = v12;
  v14 = &v11[v12];
  v11[1] = 0x200000000;
  *v11 = *v10;
  v15 = __p;
  __p = v11;
  v56 = v14;
  if (v15)
    operator delete(v15);
  v55 = v11 + 2;
  if (v13 < 3)
  {
    v17 = 3;
    if ((unint64_t)(((char *)v14 - (char *)v11) >> 2) > 3)
      v17 = ((char *)v14 - (char *)v11) >> 2;
    if ((unint64_t)((char *)v14 - (char *)v11) >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18);
    else
      v19 = 0;
    v20 = 0;
    v21 = v18 + 16;
    v22 = v18 + 8 * v19;
    *(_QWORD *)(v18 + 16) = 0x100000002;
    v16 = (_QWORD *)(v18 + 24);
    do
    {
      *(_QWORD *)(v21 + v20 * 8 - 8) = v11[v20 + 1];
      --v20;
    }
    while (v20 != -2);
    v23 = __p;
    __p = (void *)(v21 - 16);
    v56 = (_QWORD *)v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    v11[2] = 0x100000002;
    v16 = v11 + 3;
  }
  v55 = v16;
  v24 = (uint64_t *)operator new(8uLL);
  *v24 = 0x100000000;
  v25 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(2uLL);
  v27 = v26;
  v25[1] = 2;
  *v25 = *v24;
  operator delete(v24);
  if (v27 < 3)
  {
    v30 = 3;
    if ((unint64_t)((8 * v27) >> 2) > 3)
      v30 = (8 * v27) >> 2;
    if ((unint64_t)(8 * v27) >= 0x7FFFFFFFFFFFFFF8)
      v31 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v31 = v30;
    if (v31)
      v31 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v31);
    v32 = 0;
    *(_QWORD *)(v31 + 16) = 0x200000001;
    v28 = (uint64_t *)(v31 + 24);
    do
    {
      *(_QWORD *)(v31 + 16 + v32 * 8 - 8) = v25[v32 + 1];
      --v32;
    }
    while (v32 != -2);
    v29 = (uint64_t *)v31;
    operator delete(v25);
  }
  else
  {
    v25[2] = 0x200000001;
    v28 = v25 + 3;
    v29 = v25;
  }
  v33 = a5[2];
  v34 = (_QWORD *)a5[1];
  if (a1 == 5 && a4)
  {
    if ((unint64_t)v34 >= v33)
    {
      v35 = (_QWORD *)std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__push_back_slow_path<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(a5, (uint64_t **)&__p);
    }
    else
    {
      std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>((uint64_t)a5, (uint64_t **)&__p);
      v35 = v34 + 3;
    }
  }
  else if ((unint64_t)v34 >= v33)
  {
    v36 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v34 - *a5) >> 3);
    if (v36 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *a5) >> 3);
    v38 = 2 * v37;
    if (2 * v37 <= v36 + 1)
      v38 = v36 + 1;
    if (v37 >= 0x555555555555555)
      v39 = 0xAAAAAAAAAAAAAAALL;
    else
      v39 = v38;
    v61 = a5 + 2;
    v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v39);
    v41 = &v40[24 * v36];
    v57 = v40;
    v58 = v41;
    v60 = &v40[24 * v42];
    *(_QWORD *)v41 = 0;
    *((_QWORD *)v41 + 1) = 0;
    *((_QWORD *)v41 + 2) = 0;
    v59 = v41 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v57);
    v35 = (_QWORD *)a5[1];
    std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v57);
  }
  else
  {
    v35 = v34 + 3;
    *v34 = 0;
    v34[1] = 0;
    v34[2] = 0;
    a5[1] = v34 + 3;
  }
  a5[1] = v35;
  v43 = a5[2];
  if (a2 == 5 && a4)
  {
    if ((unint64_t)v35 >= v43)
    {
      v44 = std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__push_back_slow_path<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(a5, (uint64_t **)&__p);
    }
    else
    {
      std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>((uint64_t)a5, (uint64_t **)&__p);
      v44 = (uint64_t)(v35 + 3);
    }
  }
  else if ((unint64_t)v35 >= v43)
  {
    v45 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v35 - *a5) >> 3);
    if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a5) >> 3);
    v47 = 2 * v46;
    if (2 * v46 <= v45 + 1)
      v47 = v45 + 1;
    if (v46 >= 0x555555555555555)
      v48 = 0xAAAAAAAAAAAAAAALL;
    else
      v48 = v47;
    v61 = a5 + 2;
    v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v48);
    v50 = &v49[24 * v45];
    v57 = v49;
    v58 = v50;
    v60 = &v49[24 * v51];
    *(_QWORD *)v50 = 0;
    *((_QWORD *)v50 + 1) = 0;
    *((_QWORD *)v50 + 2) = 0;
    v59 = v50 + 24;
    std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a5, &v57);
    v44 = a5[1];
    std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)&v57);
  }
  else
  {
    v44 = (uint64_t)(v35 + 3);
    *v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
    a5[1] = v35 + 3;
  }
  a5[1] = v44;
  v52 = (void **)(a5 + 15);
  if (a3 == 5 && a4)
  {
    std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(a5 + 15, v29, v28, v28 - v29);
  }
  else
  {
    v53 = *v52;
    if (*v52)
    {
      a5[16] = v53;
      operator delete(v53);
      *v52 = 0;
      a5[16] = 0;
      a5[17] = 0;
    }
    *v52 = 0;
    a5[16] = 0;
    a5[17] = 0;
  }
  operator delete(v29);
  if (__p)
    operator delete(__p);
}

void sub_1913ED044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  operator delete(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  v6 = a1[1];
  if (v6 >= v5)
  {
    v9 = (uint64_t)(v6 - *a1) >> 5;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(v12);
    else
      v13 = 0;
    v14 = v12;
    v15 = v12 + 32 * v9;
    v17 = v12 + 32 * v13;
    v16 = v15 + 32;
    v8 = a1[1];
  }
  else
  {
    v8 = v6 + 32;
    a1[1] = v6 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1913ED190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1913ED204(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>::__construct_at_end<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription> const*,std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription> const*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      v7 += 32;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(_QWORD *)(v3 + 8) = v4;
  return result;
}

uint64_t std::allocator_traits<std::allocator<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>>::construct[abi:ne180100]<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>,std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription> const&,void>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 24) = -1;
  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 != -1)
  {
    v3 = result;
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E2DD2A68[v2])(&v4, result, a2);
    *(_DWORD *)(v3 + 24) = v2;
  }
  return result;
}

void sub_1913ED314(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  for (i = 32; ; i -= 32)
  {
    v8 = v6 + i;
    if (v4 + i - 32 == v5)
      break;
    v9 = v4 + i - 64;
  }
  v10 = v8 - 32;
  a2[1] = v10;
  v11 = *v3;
  *v3 = v10;
  a2[1] = v11;
  v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  v13 = v3[2];
  v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::allocator_traits<std::allocator<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>>>::construct[abi:ne180100]<std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>,std::variant<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>,`anonymous namespace'::ReshapeAdjacentAxesDescription,`anonymous namespace'::PadRightDescription,`anonymous namespace'::RoundDescription>,void>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  *(_BYTE *)result = 0;
  *(_DWORD *)(result + 24) = -1;
  v2 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v2 != -1)
  {
    v3 = result;
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E2DD2A48[v2])(&v4, result, a2);
    *(_DWORD *)(v3 + 24) = v2;
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)a2, *a3, a3[1], a3[1] - *a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

char *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

char *std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)v3, *a2, a2[1], a2[1] - *a2);
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_1913ED5B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>>::__push_back_slow_path<std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>> const&>(_QWORD *a1, uint64_t **a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 2;
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  else
    v7 = v3;
  v15 = v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  else
    v8 = 0;
  v9 = v7 + 24 * v2;
  v12[0] = v7;
  v12[1] = v9;
  v13 = v9;
  v14 = v7 + 24 * v8;
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)v9, *a2, a2[1], a2[1] - *a2);
  v13 += 24;
  std::vector<std::vector<unsigned long>>::__swap_out_circular_buffer(a1, v12);
  v10 = a1[1];
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)v12);
  return v10;
}

void sub_1913ED6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 3)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 3;
    if (v19 >= a4)
    {
      v25 = result;
      while (v6 != a3)
      {
        v26 = *v6++;
        *(_QWORD *)v25 = v26;
        v25 += 8;
      }
      v17 = (char *)(v25 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 8 * v19;
        do
        {
          v22 = *v6++;
          *(_QWORD *)result = v22;
          result += 8;
          v21 -= 8;
        }
        while (v21);
      }
      v23 = v12;
      while (v20 != a3)
      {
        v24 = *v20++;
        *(_QWORD *)v23 = v24;
        v23 += 8;
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_QWORD *)v15 = v16;
        v15 += 8;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

_DWORD *std::remove_if[abi:ne180100]<std::__wrap_iter<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis> *>,`anonymous namespace'::tf_gather_mode_plan(NSString *,int,Espresso::compute_path,int,Espresso::compute_path,int,BOOL,int,int,`anonymous namespace'::GatherNDPlan *)::$_0>(_DWORD *result, _DWORD *a2)
{
  _DWORD *i;

  while (1)
  {
    if (result == a2)
      return a2;
    if (*result == result[1])
      break;
    result += 2;
  }
  if (result != a2)
  {
    for (i = result + 2; i != a2; i += 2)
    {
      if (*i != i[1])
      {
        *result = *i;
        result[1] = i[1];
        result += 2;
      }
    }
  }
  return result;
}

void std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::push_back[abi:ne180100](void **a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((char *)v5 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = v4 - (_QWORD)*a1;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v10 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v10);
    else
      v11 = 0;
    v12 = (_QWORD *)(v10 + 8 * v7);
    v13 = v10 + 8 * v11;
    *v12 = *a2;
    v6 = v12 + 1;
    v15 = (char *)*a1;
    v14 = (char *)a1[1];
    if (v14 != *a1)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *--v12 = v16;
      }
      while (v14 != v15);
      v14 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v6;
    a1[2] = (void *)v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v5 = *a2;
    v6 = v5 + 1;
  }
  a1[1] = v6;
}

char *std::vector<Espresso::ANECompilerEngine::NamedAxis>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

char *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(char *result, uint64_t **a2, uint64_t **a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  char v7;

  v3 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 24))
  {
    v5 = 0uLL;
    v6 = 0;
    result = std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__init_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>((char *)&v5, *a3, a3[1], a3[1] - *a3);
    v4 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v4 != -1)
      result = (char *)((uint64_t (*)(char *, uint64_t))off_1E2DD2A28[v4])(&v7, v3);
    *(_OWORD *)v3 = v5;
    *(_QWORD *)(v3 + 16) = v6;
    *(_DWORD *)(v3 + 24) = 0;
  }
  else if (a2 != a3)
  {
    return std::vector<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>>::__assign_with_size[abi:ne180100]<std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*,std::pair<Espresso::ANECompilerEngine::NamedAxis,Espresso::ANECompilerEngine::NamedAxis>*>(a2, *a3, a3[1], a3[1] - *a3);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      v6 = *a3;
      *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
      *(_QWORD *)a2 = v6;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD2A28[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 24) = -1;
  v7 = *a3;
  *(_DWORD *)(v4 + 8) = *((_DWORD *)a3 + 2);
  *(_QWORD *)v4 = v7;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  uint64_t v5;
  char v6;

  v4 = *(_DWORD **)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return result;
    }
    result = ((uint64_t (*)(char *, _DWORD *))off_1E2DD2A28[v5])(&v6, v4);
  }
  v4[6] = -1;
  *v4 = *a3;
  v4[6] = 2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_12__assignmentINS0_8__traitsIJNS_6vectorINS_4pairIN8Espresso17ANECompilerEngine9NamedAxisESC_EENS_9allocatorISD_EEEEN12_GLOBAL__N_130ReshapeAdjacentAxesDescriptionENSH_19PadRightDescriptionENSH_16RoundDescriptionEEEEE16__generic_assignB8ne180100IRKNS0_17__copy_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRST_OT0_E_JRNS0_6__baseILSP_1EJSG_SI_SJ_SK_EEERKS11_EEEDcST_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 24);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 3)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E2DD2A28[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 24) = 3;
  return result;
}

void `anonymous namespace'::validate_gather_nd_plan(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, __int128 *a5, unsigned int a6, _DWORD ***a7)
{
  _QWORD *v8;
  char *v9;
  __CFString *v12;
  __CFString *v13;
  __int128 v14;
  __int128 v15;
  unsigned int **v16;
  __int128 v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  __int128 v22;
  _DWORD **v23;
  _DWORD **v24;
  int v25;
  int v26;
  __int128 v27;
  int v28;
  std::string *v29;
  std::string::size_type v30;
  char v31;
  __int128 v32;
  __int128 v33;
  int v34;
  std::string *v35;
  std::string::size_type v36;
  char v37;
  unsigned int *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unsigned int v43;
  __int128 v44;
  int v45;
  std::string *v46;
  __int128 v47;
  void **v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  char v52;
  uint64_t v53;
  int *v54;
  __int128 v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  int v59;
  int *v60;
  int *v61;
  uint64_t v62;
  void *__p[2];
  unsigned __int8 v64;
  std::string v65[2];
  uint64_t v66;
  uint64_t v67;
  int32x4_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[40];
  uint64_t v73;
  _BYTE v74[40];
  uint64_t v75;
  __CFString *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  _BYTE v81[32];
  std::string v82;
  _QWORD v83[5];

  v83[2] = *MEMORY[0x1E0C80C00];
  if (a4 >= 8 || ((0x97u >> a4) & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    v8 = (_QWORD *)(a1 + 8);
    v9 = "Invalid compute path for input.";
LABEL_4:
    std::string::basic_string[abi:ne180100]<0>(v8, v9);
    return;
  }
  if (a6 >= 8 || ((0x97u >> a6) & 1) == 0)
  {
    *(_BYTE *)a1 = 0;
    v8 = (_QWORD *)(a1 + 8);
    v9 = "Invalid compute path for indexes.";
    goto LABEL_4;
  }
  v12 = off_1E2DD2AD0[a4];
  v13 = off_1E2DD2AD0[a6];
  v14 = a5[1];
  v70 = *a5;
  v71 = v14;
  v15 = *(_OWORD *)(a3 + 16);
  v68 = *(int32x4_t *)a3;
  v69 = v15;
  v16 = *a7;
  if ((char *)a7[1] - (char *)*a7 != 48)
  {
    std::string::basic_string[abi:ne180100]<0>(v74, "Validation of gather_nd plan failed, check for 3d ops was skipped.");
    *(_BYTE *)a1 = 0;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v74;
    *(_QWORD *)(a1 + 24) = *(_QWORD *)&v74[16];
    return;
  }
  v57 = (uint64_t)v12;
  if (v16[1] != *v16)
  {
    v18 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v74 = *(_OWORD *)a3;
    *(_OWORD *)&v74[16] = v18;
    Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)v74, (uint64_t)v12, v16);
    if (!*(_BYTE *)a1)
      return;
    v68 = *(int32x4_t *)v72;
    v69 = *(_OWORD *)&v72[16];
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
    v16 = *a7;
  }
  v20 = v16[3];
  v21 = v16[4];
  v19 = v16 + 3;
  if (v21 != v20)
  {
    v22 = a5[1];
    *(_OWORD *)v74 = *a5;
    *(_OWORD *)&v74[16] = v22;
    Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)v74, (uint64_t)v13, v19);
    if (!*(_BYTE *)a1)
      return;
    v68 = *(int32x4_t *)v72;
    v69 = *(_OWORD *)&v72[16];
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)(a1 + 8));
  }
  v23 = a7[6];
  v24 = a7[7];
  if (v23 == v24)
  {
LABEL_43:
    if (a7[4] != a7[3])
    {
      Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)&v68, v57, (unsigned int **)a7 + 3);
      if (!*(_BYTE *)a1)
        return;
      v68 = *(int32x4_t *)v74;
      v69 = *(_OWORD *)&v74[16];
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
    }
    ANECGatherLayerDescInitialize();
    v38 = (unsigned int *)a7[9];
    v39 = ((char *)a7[10] - (char *)v38) >> 2;
    if (a7[10] != (_DWORD **)v38)
    {
      if (v39 <= 1)
        v40 = 1;
      else
        v40 = ((char *)a7[10] - (char *)v38) >> 2;
      v41 = &v72[8];
      do
      {
        v43 = *v38++;
        v42 = v43;
        if (v43 >= 5)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Bad axis.");
        *v41++ = off_1E2DD2AA8[v42];
        --v40;
      }
      while (v40);
    }
    *(_QWORD *)v72 = v39;
    v66 = 0;
    v67 = 0;
    ANECTensorDescInitialize();
    ANECTensorDescInitialize();
    v59 = v69;
    *(_QWORD *)&v44 = v68.i32[3];
    *((_QWORD *)&v44 + 1) = (int)v69;
    *(_OWORD *)&v74[24] = v44;
    *(_QWORD *)v74 = v57;
    v75 = v68.i32[2];
    *(_QWORD *)&v44 = v68.i32[0];
    *((_QWORD *)&v44 + 1) = v68.i32[1];
    *(_OWORD *)&v74[8] = v44;
    v76 = v13;
    *(_QWORD *)&v44 = SHIDWORD(v70);
    *((_QWORD *)&v44 + 1) = (int)v71;
    v78 = v44;
    v79 = SDWORD2(v70);
    *(_QWORD *)&v44 = (int)v70;
    *((_QWORD *)&v44 + 1) = SDWORD1(v70);
    v77 = v44;
    v45 = ANECValidateGatherLayer();
    if (v45)
    {
      Espresso::ANECompilerEngine::violations_from_alternates<ANECGatherLayerDescAlternate>((uint64_t)v65, v67, v66);
      std::to_string(&v82, v45);
      v46 = std::string::insert(&v82, 0, "ANECValidateGatherLayer rejected GatherND operation with status ");
      v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      *(_QWORD *)&v81[16] = *((_QWORD *)&v46->__r_.__value_.__l + 2);
      *(_OWORD *)v81 = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      Espresso::ANECompilerEngine::format_validation_violations((uint64_t)__p, (uint64_t)v65);
      if ((v64 & 0x80u) == 0)
        v48 = __p;
      else
        v48 = (void **)__p[0];
      if ((v64 & 0x80u) == 0)
        v49 = v64;
      else
        v49 = (std::string::size_type)__p[1];
      v50 = std::string::append((std::string *)v81, (const std::string::value_type *)v48, v49);
      v51 = v50->__r_.__value_.__r.__words[0];
      v83[0] = v50->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v83 + 7) = *(std::string::size_type *)((char *)&v50->__r_.__value_.__r.__words[1] + 7);
      v52 = HIBYTE(v50->__r_.__value_.__r.__words[2]);
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      *(_BYTE *)a1 = 0;
      *(_QWORD *)(a1 + 23) = *(_QWORD *)((char *)v83 + 7);
      v53 = v83[0];
      *(_QWORD *)(a1 + 8) = v51;
      *(_QWORD *)(a1 + 16) = v53;
      *(_BYTE *)(a1 + 31) = v52;
      if ((char)v64 < 0)
        operator delete(__p[0]);
      if ((v81[23] & 0x80000000) != 0)
        operator delete(*(void **)v81);
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v82.__r_.__value_.__l.__data_);
      std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v65);
      return;
    }
    v61 = 0;
    v62 = 0;
    v60 = 0;
    std::vector<Espresso::ANECompilerEngine::NamedAxis>::__init_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis*,Espresso::ANECompilerEngine::NamedAxis*>(&v60, a7[9], (uint64_t)a7[10], ((char *)a7[10] - (char *)a7[9]) >> 2);
    v54 = v60;
    if (v54)
      operator delete(v54);
    v55 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *(_OWORD *)&v65[0].__r_.__value_.__l.__data_ = *(_OWORD *)v81;
    *(_OWORD *)&v65[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v81[16];
    if (*((_QWORD *)&v55 + 1) != (_QWORD)v55)
    {
      Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)v65, v57, (unsigned int **)&v82);
      if (!*(_BYTE *)a1)
        goto LABEL_77;
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
    }
    *(_BYTE *)a1 = 1;
    std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "GatherND plan validates.");
LABEL_77:
    if ((_QWORD)v55)
      operator delete((void *)v55);
    return;
  }
  v56 = (_QWORD *)(a1 + 16);
  while (2)
  {
    switch(*((_DWORD *)v23 + 6))
    {
      case 0:
        Espresso::ANECompilerEngine::validate_transpose(a1, a2, (uint64_t)&v70, (uint64_t)v13, v23);
        if (*(_BYTE *)a1)
        {
          goto LABEL_39;
        }
        break;
      case 1:
        v25 = *((_DWORD *)v23 + 2);
        if (v25 > 1)
        {
          if (v25 < 9)
          {
            ANECReshapeLayerDescInitialize();
            *(_QWORD *)&v72[32] = SLODWORD(v65[0].__r_.__value_.__r.__words[1]);
            *(_QWORD *)&v32 = SLODWORD(v65[0].__r_.__value_.__l.__data_);
            *((_QWORD *)&v32 + 1) = SHIDWORD(v65[0].__r_.__value_.__r.__words[0]);
            v33 = v32;
            *(_QWORD *)&v32 = SHIDWORD(v65[0].__r_.__value_.__r.__words[1]);
            *((_QWORD *)&v32 + 1) = SLODWORD(v65[0].__r_.__value_.__r.__words[2]);
            *(_OWORD *)v72 = v33;
            *(_OWORD *)&v72[16] = v32;
            ANECTensorDescInitialize();
            *(_QWORD *)&v32 = SHIDWORD(v70);
            *((_QWORD *)&v32 + 1) = (int)v71;
            *(_OWORD *)&v74[24] = v32;
            *(_QWORD *)v74 = v13;
            v75 = SDWORD2(v70);
            *(_QWORD *)&v32 = (int)v70;
            *((_QWORD *)&v32 + 1) = SDWORD1(v70);
            *(_OWORD *)&v74[8] = v32;
            __p[0] = 0;
            v83[0] = 0;
            v34 = ANECValidateReshapeLayer();
            if (v34)
            {
              std::to_string((std::string *)v81, v34);
              v35 = std::string::insert((std::string *)v81, 0, "ANECValidateReshapeLayer returned invalid status ");
              v36 = v35->__r_.__value_.__r.__words[0];
              v82.__r_.__value_.__r.__words[0] = v35->__r_.__value_.__l.__size_;
              *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v35->__r_.__value_.__r.__words[1] + 7);
              v37 = HIBYTE(v35->__r_.__value_.__r.__words[2]);
              v35->__r_.__value_.__l.__size_ = 0;
              v35->__r_.__value_.__r.__words[2] = 0;
              v35->__r_.__value_.__r.__words[0] = 0;
              *(_BYTE *)a1 = 0;
              *(_QWORD *)(a1 + 8) = v36;
              *(_QWORD *)(a1 + 23) = *(std::string::size_type *)((char *)v82.__r_.__value_.__r.__words + 7);
              *v56 = v82.__r_.__value_.__r.__words[0];
              *(_BYTE *)(a1 + 31) = v37;
              if ((v81[23] & 0x80000000) != 0)
                operator delete(*(void **)v81);
            }
            else
            {
              *(_BYTE *)a1 = 1;
              std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Valid interleave.");
            }
          }
          else
          {
            *(_BYTE *)a1 = 0;
            std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Maximum size of gather slice vector is 8.");
          }
        }
        else
        {
          *(_BYTE *)a1 = 0;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Nonsensical interleave amount.");
        }
        if (*(_BYTE *)a1)
        {
LABEL_39:
          v70 = *(_OWORD *)v74;
          v71 = *(_OWORD *)&v74[16];
          goto LABEL_40;
        }
        break;
      case 2:
        v26 = *(_DWORD *)v23;
        ANECPadLayerDescInitialize();
        *(_QWORD *)v74 = 1;
        *(_QWORD *)&v74[8] = CFSTR("Width");
        *(_QWORD *)&v74[16] = CFSTR("Replication");
        *(_DWORD *)&v74[24] = 0;
        *(_DWORD *)&v74[28] = v26;
        v80 = 0;
        ANECTensorDescInitialize();
        v58 = v71;
        *(_QWORD *)&v27 = SHIDWORD(v70);
        *((_QWORD *)&v27 + 1) = (int)v71;
        *(_OWORD *)&v72[24] = v27;
        *(_QWORD *)v72 = v13;
        v73 = SDWORD2(v70);
        *(_QWORD *)&v27 = (int)v70;
        *((_QWORD *)&v27 + 1) = SDWORD1(v70);
        *(_OWORD *)&v72[8] = v27;
        v82.__r_.__value_.__r.__words[0] = 0;
        __p[0] = 0;
        v28 = ANECValidatePadLayer();
        if (v28)
        {
          std::to_string(v65, v28);
          v29 = std::string::insert(v65, 0, "ANECValidatePadLayer for gather pad right check failed with status ");
          v30 = v29->__r_.__value_.__r.__words[0];
          *(_QWORD *)v81 = v29->__r_.__value_.__l.__size_;
          *(_QWORD *)&v81[7] = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7);
          v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
          v29->__r_.__value_.__l.__size_ = 0;
          v29->__r_.__value_.__r.__words[2] = 0;
          v29->__r_.__value_.__r.__words[0] = 0;
          *(_BYTE *)a1 = 0;
          *(_QWORD *)(a1 + 8) = v30;
          *(_QWORD *)(a1 + 23) = *(_QWORD *)&v81[7];
          *v56 = *(_QWORD *)v81;
          *(_BYTE *)(a1 + 31) = v31;
          if (SHIBYTE(v65[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v65[0].__r_.__value_.__l.__data_);
        }
        else
        {
          *(_BYTE *)a1 = 1;
          std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "");
        }
        if (*(_BYTE *)a1)
        {
          LODWORD(v71) = *(_DWORD *)v23 + v58;
LABEL_40:
          if (*(char *)(a1 + 31) < 0)
            operator delete(*(void **)(a1 + 8));
          goto LABEL_42;
        }
        break;
      case 3:
LABEL_42:
        v23 += 4;
        if (v23 == v24)
          goto LABEL_43;
        continue;
      default:
        *(_BYTE *)a1 = 0;
        std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "Unknown index tensor transform.");
        break;
    }
    break;
  }
}

void sub_1913EE3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 144);
  if (v29)
    operator delete(v29);
  _Unwind_Resume(exception_object);
}

void Espresso::ANECompilerEngine::violations_from_alternates<ANECGatherLayerDescAlternate>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  CFTypeRef *v7;
  unint64_t *v8;
  unint64_t v9;
  CFTypeRef *v10;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2)
  {
    v6 = 0;
    v7 = (CFTypeRef *)(a3 + 8);
    do
    {
      v8 = (unint64_t *)(a3 + 584 * v6);
      if (*v8)
      {
        v9 = 0;
        v10 = v7;
        do
        {
          std::__hash_table<__CFString const*,Espresso::ANECompilerEngine::CFStringHasher,Espresso::ANECompilerEngine::CFStringEqualWrapper,std::allocator<__CFString const*>>::__emplace_unique_key_args<__CFString const*,__CFString const* const&>((float *)a1, v10, v10);
          ++v9;
          ++v10;
        }
        while (v9 < *v8);
      }
      ++v6;
      v7 += 73;
    }
    while (v6 != a2);
  }
}

void sub_1913EE584(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Espresso::ANECompilerEngine::NamedAxis>::__init_with_size[abi:ne180100]<Espresso::ANECompilerEngine::NamedAxis*,Espresso::ANECompilerEngine::NamedAxis*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Espresso::ANECompilerEngine::NamedAxis>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1913EE5F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::infer_gather_output_shape(uint64_t result, int a2, uint64_t a3, int *a4, int *a5, int32x4_t a6)
{
  int v6;
  int v7;
  __int32 v8;
  unint64_t v9;
  int32x4_t v10;
  std::string *v11;
  __int128 v12;
  const char *v13;
  std::string v14;
  __int128 v15;
  int64_t v16;

  if (a4 == a5)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("Cannot infer gather_nd shape for gather with no gather axes.");
  *(_QWORD *)(result + 20) = 0xFFFFFFFF00000001;
  *(_DWORD *)(result + 28) = -1;
  v6 = *(_DWORD *)(a3 + 16);
  if (a2 <= v6)
    v7 = *(_DWORD *)(a3 + 16);
  else
    v7 = a2;
  *(_DWORD *)(result + 16) = v7;
  v8 = *(_DWORD *)a3;
  v9 = *(int *)(a3 + 4) / (unint64_t)(a5 - a4);
  v10.i32[0] = *(_DWORD *)a3;
  v10.i32[1] = v9;
  v10.i64[1] = *(_QWORD *)(a3 + 8);
  *(int32x4_t *)result = vmaxq_s32(a6, v10);
  do
  {
    switch(*a4)
    {
      case 0:
        *(_DWORD *)result = v8;
        break;
      case 1:
        *(_DWORD *)(result + 8) = v10.i32[2];
        break;
      case 2:
        *(_DWORD *)(result + 4) = v9;
        break;
      case 3:
        *(_DWORD *)(result + 12) = v10.i32[3];
        break;
      case 4:
        *(_DWORD *)(result + 16) = v6;
        break;
      default:
        std::to_string(&v14, *a4);
        v11 = std::string::insert(&v14, 0, "Illegal gather axis ");
        v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v16 = v11->__r_.__value_.__r.__words[2];
        v15 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        if (v16 >= 0)
          v13 = (const char *)&v15;
        else
          v13 = (const char *)v15;
        Espresso::throw_exception_selector<Espresso::invalid_state_error>(v13);
    }
    ++a4;
  }
  while (a4 != a5);
  return result;
}

void sub_1913EE744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

__n128 Espresso::ANECompilerEngine::mix_array_gather_kernel::mix_array_gather_kernel(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v8;
  __n128 result;

  v5 = a1 + 280;
  v6 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)&_Q0 = 0x100000001;
  *((_QWORD *)&_Q0 + 1) = 0x100000001;
  *(_OWORD *)v5 = _Q0;
  *(_QWORD *)(v6 + 296) = 4294967294;
  *(_BYTE *)(v6 + 304) = 0;
  v8 = *(_BYTE *)(*a2 + 123);
  LOBYTE(_Q0) = 0;
  BYTE4(_Q0) = 0;
  BYTE8(_Q0) = 0;
  BYTE12(_Q0) = 0;
  *(_OWORD *)(v6 + 448) = _Q0;
  *(_OWORD *)(v6 + 464) = _Q0;
  *(_OWORD *)(v6 + 320) = _Q0;
  *(_OWORD *)(v6 + 336) = _Q0;
  *(_OWORD *)(v6 + 352) = _Q0;
  *(_BYTE *)(v6 + 368) = 0;
  *(_OWORD *)(v6 + 376) = _Q0;
  *(_OWORD *)(v6 + 392) = _Q0;
  *(_OWORD *)(v6 + 408) = _Q0;
  *(_OWORD *)(v6 + 424) = _Q0;
  *(_BYTE *)(v6 + 440) = 0;
  *(_DWORD *)(v6 + 480) = 1065353216;
  *(_WORD *)(v6 + 488) = 0;
  *(_BYTE *)(v6 + 490) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v5 + 212) = _Q0;
  *(_BYTE *)(v6 + 500) = 0;
  *(_QWORD *)(v6 + 504) = 0;
  *(_QWORD *)(v6 + 512) = 0;
  *(_BYTE *)(v6 + 520) = v8;
  *(_QWORD *)v6 = &off_1E2D7B648;
  *(_QWORD *)(v6 + 312) = &unk_1E2D7B7A8;
  result = *(__n128 *)a3;
  *(_OWORD *)(v5 + 9) = *(_OWORD *)(a3 + 9);
  *(__n128 *)v5 = result;
  return result;
}

double Espresso::ANECompilerEngine::stir_gather_nd_kernel::stir_gather_nd_kernel(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  char v6;
  double result;
  uint64_t v12;

  v5 = Espresso::base_kernel::base_kernel(a1, a2);
  *(_QWORD *)(v5 + 280) = 0;
  *(_DWORD *)(v5 + 288) = 0;
  *(_WORD *)(v5 + 292) = 257;
  v6 = *(_BYTE *)(*a2 + 123);
  *(_OWORD *)(v5 + 432) = 0u;
  *(_OWORD *)(v5 + 448) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_BYTE *)(v5 + 352) = 0;
  *(_OWORD *)(v5 + 360) = 0u;
  *(_OWORD *)(v5 + 376) = 0u;
  *(_OWORD *)(v5 + 392) = 0u;
  *(_OWORD *)(v5 + 408) = 0u;
  *(_BYTE *)(v5 + 424) = 0;
  *(_DWORD *)(v5 + 464) = 1065353216;
  *(_WORD *)(v5 + 472) = 0;
  *(_BYTE *)(v5 + 474) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v5 + 476) = result;
  *(_BYTE *)(v5 + 484) = 0;
  *(_QWORD *)(v5 + 488) = 0;
  *(_QWORD *)(v5 + 496) = 0;
  *(_BYTE *)(v5 + 504) = v6;
  *(_QWORD *)v5 = &off_1E2D7AA30;
  *(_QWORD *)(v5 + 296) = &unk_1E2D7AB90;
  v12 = *a3;
  *(_QWORD *)(v5 + 286) = *(uint64_t *)((char *)a3 + 6);
  *(_QWORD *)(v5 + 280) = v12;
  return result;
}

uint64_t Espresso::profiler_t::profiler_t(uint64_t a1, _QWORD *a2)
{
  char *v3;

  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = *a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 850045863;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  v3 = (char *)operator new(0xC000uLL);
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 104) = v3 + 49152;
  return a1;
}

void sub_1913EE974(_Unwind_Exception *a1)
{
  uint64_t v1;
  Espresso::profiler_t::network_performance_t *v2;
  std::mutex *v3;
  void **v4;
  std::mutex *v5;
  void *v7;

  v5 = v3;
  std::mutex::~mutex(v5);
  v7 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 96) = v7;
    operator delete(v7);
  }
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  Espresso::profiler_t::network_performance_t::~network_performance_t(v2);
  _Unwind_Resume(a1);
}

void Espresso::profiler_t::network_performance_t::~network_performance_t(Espresso::profiler_t::network_performance_t *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 24);
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

void std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(unint64_t a1)
{
  if (a1 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(48 * a1);
}

void Espresso::profiler_t::~profiler_t(Espresso::profiler_t *this)
{
  void *v2;
  void *v3;
  void **v4;

  std::mutex::~mutex((std::mutex *)((char *)this + 112));
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  v4 = (void **)((char *)this + 32);
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
  {
    *((_QWORD *)this + 2) = v3;
    operator delete(v3);
  }
}

void Espresso::profiler_t::log_event(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;

  v4 = (std::mutex *)(a1 + 112);
  std::mutex::lock((std::mutex *)(a1 + 112));
  v5 = *(_OWORD **)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  if ((unint64_t)v5 >= v6)
  {
    v10 = *(_QWORD *)(a1 + 88);
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v10) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v10) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    if (v14)
      v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::profiler_t::event_t>>(v14);
    else
      v15 = 0;
    v16 = (_OWORD *)(v14 + 48 * v11);
    v17 = v14 + 48 * v15;
    v18 = *a2;
    v19 = a2[2];
    v16[1] = a2[1];
    v16[2] = v19;
    *v16 = v18;
    v9 = v16 + 3;
    v21 = *(char **)(a1 + 88);
    v20 = *(char **)(a1 + 96);
    if (v20 != v21)
    {
      do
      {
        v22 = *((_OWORD *)v20 - 3);
        v23 = *((_OWORD *)v20 - 1);
        *(v16 - 2) = *((_OWORD *)v20 - 2);
        *(v16 - 1) = v23;
        *(v16 - 3) = v22;
        v16 -= 3;
        v20 -= 48;
      }
      while (v20 != v21);
      v20 = *(char **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 88) = v16;
    *(_QWORD *)(a1 + 96) = v9;
    *(_QWORD *)(a1 + 104) = v17;
    if (v20)
      operator delete(v20);
  }
  else
  {
    v7 = *a2;
    v8 = a2[2];
    v5[1] = a2[1];
    v5[2] = v8;
    *v5 = v7;
    v9 = v5 + 3;
  }
  *(_QWORD *)(a1 + 96) = v9;
  if (Espresso::time_seconds(void)::onceToken != -1)
    dispatch_once(&Espresso::time_seconds(void)::onceToken, &__block_literal_global_2589);
  *(double *)(*(_QWORD *)(a1 + 96) - 48) = (double)(std::chrono::steady_clock::now().__d_.__rep_
                                                    - Espresso::time_seconds(void)::t0)
                                           * 0.000000001;
  std::mutex::unlock(v4);
}

void sub_1913EECA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::chrono::steady_clock::time_point ___ZN8Espresso12time_secondsEv_block_invoke_2590()
{
  std::chrono::steady_clock::time_point result;

  result.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  Espresso::time_seconds(void)::t0 = result.__d_.__rep_;
  return result;
}

void Espresso::profiler_t::static_entries(Espresso::profiler_t *this@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t (***v12)(_QWORD);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  Espresso *v19;
  const char *v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  const char *v46;
  int v47;
  _QWORD *size;
  unint64_t v49;
  NSObject *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t *v54;
  _BYTE *v55;
  _BYTE *v56;
  _BYTE *v57;
  int v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  _QWORD *v65;
  _BYTE *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  const Espresso::base_kernel::validate_for_engine_warning_t *v72;
  const Espresso::base_kernel::validate_for_engine_warning_t *i;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  std::string *v77;
  Espresso **v78;
  NSObject *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *p_shared_owners;
  unint64_t v84;
  __int128 v85;
  void *__p;
  _QWORD *v87;
  char v88;
  unint64_t v89;
  std::string buf;
  __int128 v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  _BYTE v94[24];
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  Espresso::espresso_os_log_subsystem(this, a2);
  v5 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_190DAF000, v5, OS_LOG_TYPE_INFO, "[profiler_t::static_entries] Start static_entries()", (uint8_t *)&buf, 2u);
  }

  std::vector<Espresso::profiler_t::entry_t>::vector(a3, (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) - *(_QWORD *)(*((_QWORD *)this + 10) + 32)) >> 4);
  LODWORD(buf.__r_.__value_.__l.__data_) = 100;
  Espresso::create_context((int *)&buf, &v92);
  v91 = 0uLL;
  v6 = *((_QWORD *)this + 10);
  if (*(_BYTE *)(*(_QWORD *)(v6 + 16) + 123))
    Espresso::load_network_from_net_no_dispatch(v6, &v92, 0, (uint64_t *)&buf);
  else
    Espresso::load_network_no_dispatch(v6 + 592, &v92, 0, (uint64_t *)&buf);
  v85 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v91 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  v7 = (_QWORD *)*((_QWORD *)this + 10);
  v8 = v7[4];
  if (v7[5] != v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      v12 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + v9) + 64) + 8) + 8);
      v13 = (**v12)(v12);
      v14 = *a3 + v10;
      *(_DWORD *)(v14 + 64) = v13;
      *(_QWORD *)v14 = v11;
      std::string::operator=((std::string *)(v14 + 8), (const std::string *)(*(_QWORD *)(v8 + v9) + 16));
      std::string::operator=((std::string *)(*a3 + v10 + 32), (const std::string *)(*(_QWORD *)(v8 + v9) + 40));
      v15 = *(_QWORD *)(v8 + v9);
      if (*(char *)(v15 + 223) < 0)
        std::string::__init_copy_ctor_external(&buf, *(const std::string::value_type **)(v15 + 200), *(_QWORD *)(v15 + 208));
      else
        buf = *(std::string *)(v15 + 200);
      v16 = *a3 + v10;
      v17 = v16 + 128;
      if (*(char *)(v16 + 151) < 0)
        operator delete(*(void **)v17);
      v18 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(_QWORD *)(v17 + 16) = *((_QWORD *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)v17 = v18;
      ++v11;
      v7 = (_QWORD *)*((_QWORD *)this + 10);
      v8 = v7[4];
      v10 += 152;
      v9 += 16;
    }
    while (v11 < (v7[5] - v8) >> 4);
  }
  v19 = (Espresso *)(***(uint64_t (****)(_QWORD))(v7[2] + 8))(*(_QWORD *)(v7[2] + 8));
  v21 = (int)v19;
  if ((_DWORD)v19)
    v22 = (_DWORD)v19 == 100;
  else
    v22 = 1;
  v23 = v22;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = 0uLL;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.__r_.__value_.__l.__size_;
  if (!(_DWORD)v19 || (_DWORD)v19 == 100)
  {
    *(_QWORD *)&v94[8] = 0;
    *(_QWORD *)&v94[16] = 0;
    *(_QWORD *)v94 = &v94[8];
    v24 = *(_QWORD *)v85;
    if (*(_QWORD *)(v85 + 8) != *(_QWORD *)v85)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        __p = (void *)(v24 + v25);
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v94, (_QWORD *)(v24 + v25), (__int128 **)&__p)[7] = v26++;
        v24 = *(_QWORD *)v85;
        v25 += 224;
      }
      while (v26 < 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(v85 + 8) - *(_QWORD *)v85) >> 5));
    }
    v89 = 0;
    v27 = *(_QWORD *)(*((_QWORD *)this + 10) + 32);
    if (*(_QWORD *)(*((_QWORD *)this + 10) + 40) != v27)
    {
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = *(_QWORD *)(v27 + v28);
        v31 = (char *)(v30 + 16);
        if (*(char *)(v30 + 39) < 0)
          v31 = *(char **)v31;
        std::string::basic_string[abi:ne180100]<0>(&__p, v31);
        v32 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)&v94[8], &__p);
        v33 = v32;
        if (v88 < 0)
        {
          operator delete(__p);
          if (v33)
          {
LABEL_33:
            std::string::basic_string[abi:ne180100]<0>(&__p, v31);
            v34 = *(_QWORD *)std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)v94, &__p);
            if (v88 < 0)
              operator delete(__p);
            std::__tree<std::__value_type<unsigned long,unsigned long>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,unsigned long>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,unsigned long>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t **)&buf, v29, (uint64_t *)&v89)[5] = v34;
          }
        }
        else if (v32)
        {
          goto LABEL_33;
        }
        v89 = ++v29;
        v27 = *(_QWORD *)(*((_QWORD *)this + 10) + 32);
        v28 += 16;
      }
      while (v29 < (*(_QWORD *)(*((_QWORD *)this + 10) + 40) - v27) >> 4);
    }
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)&v94[8]);
  }
  if (*(_QWORD *)(*((_QWORD *)this + 10) + 712))
  {
    Espresso::espresso_os_log_subsystem(v19, v20);
    v35 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      v36 = (_QWORD *)*((_QWORD *)this + 10);
      v37 = (uint64_t)(v36[5] - v36[4]) >> 4;
      v38 = (uint64_t)(*(_QWORD *)(v36[89] + 56) - *(_QWORD *)(v36[89] + 48)) >> 2;
      *(_DWORD *)v94 = 134218240;
      *(_QWORD *)&v94[4] = v37;
      *(_WORD *)&v94[12] = 2048;
      *(_QWORD *)&v94[14] = v38;
      _os_log_impl(&dword_190DAF000, v35, OS_LOG_TYPE_INFO, "[profiler_t::static_entries] Network size %lu fallback size %lu", v94, 0x16u);
    }

    v39 = *((_QWORD *)this + 10);
    v40 = *(_QWORD *)(v39 + 712);
    v42 = v39 + 32;
    v41 = *(_QWORD *)(v39 + 32);
    if (*(_QWORD *)(v42 + 8) != v41)
    {
      v43 = 0;
      do
      {
        v44 = *(_QWORD *)(v41 + 16 * v43);
        v45 = (char *)(v44 + 16);
        if (*(char *)(v44 + 39) < 0)
          v45 = *(char **)v45;
        std::string::basic_string[abi:ne180100]<0>(v94, v45);
        v47 = v23;
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v40 + 80), v94))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, v45);
          v47 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v40 + 104), &__p)? 1: v23;
          if (v88 < 0)
            operator delete(__p);
        }
        if ((v94[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v94);
          if (!v47)
          {
LABEL_65:
            v51 = *a3 + 152 * v43;
            *(_WORD *)(v51 + 120) = 0;
            *(_BYTE *)(v51 + 122) = 1;
            goto LABEL_101;
          }
        }
        else if (!v47)
        {
          goto LABEL_65;
        }
        if (v21 != 100 && v21)
        {
          std::string::basic_string[abi:ne180100]<0>(v94, v45);
          v52 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v40 + 72, v94);
          if ((v94[23] & 0x80000000) != 0)
            operator delete(*(void **)v94);
          std::string::basic_string[abi:ne180100]<0>(v94, v45);
          v53 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v40 + 96, v94);
          if ((v94[23] & 0x80000000) != 0)
            operator delete(*(void **)v94);
          std::map<Espresso::platform,int>::map[abi:ne180100]((uint64_t)v94, v52 + 7);
          std::map<Espresso::platform,int>::map[abi:ne180100]((uint64_t)&__p, v53 + 7);
          v54 = *(uint64_t **)&v94[8];
          if (!*(_QWORD *)&v94[8])
            goto LABEL_80;
          v55 = &v94[8];
          do
          {
            v56 = v54;
            v57 = v55;
            v58 = *((_DWORD *)v54 + 7);
            if (v58 >= v21)
              v55 = v54;
            else
              ++v54;
            v54 = (uint64_t *)*v54;
          }
          while (v54);
          if (v55 == &v94[8])
            goto LABEL_80;
          if (v58 < v21)
            v56 = v57;
          if (v21 < *((_DWORD *)v56 + 7))
LABEL_80:
            v55 = &v94[8];
          v59 = v87;
          if (v87)
          {
            v60 = &v87;
            v61 = v87;
            do
            {
              v62 = v61;
              v63 = v60;
              v64 = *((_DWORD *)v61 + 7);
              if (v64 >= v21)
                v60 = v61;
              else
                ++v61;
              v61 = (_QWORD *)*v61;
            }
            while (v61);
            if (v60 != &v87)
            {
              v65 = v64 >= v21 ? v62 : v63;
              if (v21 >= *((_DWORD *)v65 + 7) && v55 != &v94[8])
              {
                v67 = (_BYTE *)(*a3 + 152 * v43);
                v67[120] = *((_DWORD *)v55 + 8) != 0;
                if (v64 >= v21)
                  v68 = v62;
                else
                  v68 = v63;
                v67[121] = *((_DWORD *)v68 + 8) != 0;
                v67[122] = 0;
              }
            }
          }
          std::__tree<int>::destroy(v59);
          std::__tree<int>::destroy(*(_QWORD **)&v94[8]);
        }
        else
        {
          if (buf.__r_.__value_.__l.__size_)
          {
            size = (_QWORD *)buf.__r_.__value_.__l.__size_;
            do
            {
              v49 = size[4];
              if (v43 >= v49)
              {
                if (v49 >= v43)
                {
                  v69 = *(_QWORD *)v85
                      + 224 * *std::map<unsigned long,unsigned long>::at((_QWORD *)buf.__r_.__value_.__l.__size_, v43);
                  v70 = *a3 + 152 * v43;
                  *(_BYTE *)(v70 + 120) = *(_QWORD *)(v69 + 88) != 0;
                  *(_WORD *)(v70 + 121) = *(unsigned __int8 *)(v69 + 105);
                  goto LABEL_101;
                }
                ++size;
              }
              size = (_QWORD *)*size;
            }
            while (size);
          }
          Espresso::espresso_os_log_subsystem((Espresso *)buf.__r_.__value_.__l.__size_, v46);
          v50 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)v94 = 136315138;
            *(_QWORD *)&v94[4] = v45;
            _os_log_impl(&dword_190DAF000, v50, OS_LOG_TYPE_INFO, "Failed to find layer %s in tmp ir", v94, 0xCu);
          }

        }
LABEL_101:
        v19 = (Espresso *)std::string::operator=((std::string *)(*a3 + 152 * v43 + 32), (const std::string *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 10) + 32) + 16 * v43)+ 40));
        ++v43;
        v71 = (_QWORD *)*((_QWORD *)this + 10);
        v41 = v71[4];
      }
      while (v43 < (v71[5] - v41) >> 4);
      v40 = v71[89];
    }
    v72 = *(const Espresso::base_kernel::validate_for_engine_warning_t **)v40;
    for (i = *(const Espresso::base_kernel::validate_for_engine_warning_t **)(v40 + 8);
          v72 != i;
          v72 = (const Espresso::base_kernel::validate_for_engine_warning_t *)((char *)v72 + 112))
    {
      v74 = *((_QWORD *)v72 + 12);
      if (v74 < (uint64_t)(*(_QWORD *)(*((_QWORD *)this + 10) + 40) - *(_QWORD *)(*((_QWORD *)this + 10) + 32)) >> 4)
      {
        v75 = *a3 + 152 * v74;
        v77 = *(std::string **)(v75 + 104);
        v76 = *(_QWORD *)(v75 + 112);
        v78 = (Espresso **)(v75 + 104);
        if ((unint64_t)v77 >= v76)
        {
          v19 = (Espresso *)std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>((int64x2_t *)(*a3 + 152 * v74 + 96), v72);
        }
        else
        {
          Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(v77, v72);
          v19 = (Espresso *)&v77[4].__r_.__value_.__r.__words[2];
          *v78 = (Espresso *)&v77[4].__r_.__value_.__r.__words[2];
        }
        *v78 = v19;
      }
    }
  }
  Espresso::espresso_os_log_subsystem(v19, v20);
  v79 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v79, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v94 = 0;
    _os_log_impl(&dword_190DAF000, v79, OS_LOG_TYPE_INFO, "[profiler_t::static_entries] Exit static_entries()", v94, 2u);
  }

  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&buf, (_QWORD *)buf.__r_.__value_.__l.__size_);
  if (*((_QWORD *)&v85 + 1))
  {
    v80 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
    }
  }
  v82 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v84 = __ldaxr(p_shared_owners);
    while (__stlxr(v84 - 1, p_shared_owners));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
}

void sub_1913EF588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v30 - 144);
  std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<Espresso::profiler_t::entry_t>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x1AF286BCA1AF287)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v4 = (char *)operator new(152 * a2);
    *a1 = v4;
    a1[2] = &v4[152 * a2];
    v5 = 152 * ((152 * a2 - 152) / 0x98) + 152;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1913EF724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::map<unsigned long,unsigned long>::at(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  if (!a1)
LABEL_7:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      v2 = a1[4];
      if (v2 <= a2)
        break;
      a1 = (_QWORD *)*a1;
      if (!a1)
        goto LABEL_7;
    }
    if (v2 >= a2)
      return a1 + 5;
    a1 = (_QWORD *)a1[1];
    if (!a1)
      goto LABEL_7;
  }
}

uint64_t std::map<Espresso::platform,int>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t **v9;
  BOOL v10;
  int v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(uint64_t **)(a1 + 8);
      v7 = v3;
      if (*(uint64_t ***)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v3;
      if (v6)
      {
        do
        {
          v7 = (uint64_t **)v8;
          v8 = *(_QWORD *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (uint64_t **)v9[2];
          v10 = *v7 == (uint64_t *)v9;
          v9 = v7;
        }
        while (v10);
      }
      v11 = *((_DWORD *)v5 + 7);
      if (*((_DWORD *)v7 + 7) < v11)
      {
LABEL_8:
        if (v6)
          v12 = v7;
        else
          v12 = v3;
        if (v6)
          v13 = v7 + 1;
        else
          v13 = v3;
      }
      else
      {
        v12 = v3;
        v13 = v3;
        if (v6)
        {
          v13 = v3;
          while (1)
          {
            while (1)
            {
              v12 = (uint64_t **)v6;
              v17 = *((_DWORD *)v6 + 7);
              if (v11 >= v17)
                break;
              v6 = *v12;
              v13 = v12;
              if (!*v12)
                goto LABEL_15;
            }
            if (v17 >= v11)
              break;
            v13 = v12 + 1;
            v6 = v12[1];
            if (!v6)
              goto LABEL_15;
          }
        }
      }
      if (!*v13)
      {
LABEL_15:
        v14 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v14 + 28) = *(_QWORD *)((char *)v5 + 28);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v14);
      }
      v15 = (_QWORD *)v5[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v5[2];
          v10 = *v16 == (_QWORD)v5;
          v5 = v16;
        }
        while (!v10);
      }
      v5 = v16;
    }
    while (v16 != v4);
  }
  return a1;
}

void sub_1913EF8E0(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<int>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__push_back_slow_path<Espresso::base_kernel::validate_for_engine_warning_t const&>(int64x2_t *a1, const Espresso::base_kernel::validate_for_engine_warning_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  int64x2_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  int64x2_t v18;
  unint64_t v19;
  unint64_t v21;
  int64x2_t v22;
  unint64_t v23;
  uint64_t *v24;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((a1->i64[1] - a1->i64[0]) >> 4);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v6 = a1 + 1;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[1].i64[0] - a1->i64[0]) >> 4)) >= 0x124924924924924)
    v7 = 0x249249249249249;
  else
    v7 = v3;
  v24 = (uint64_t *)v6;
  if (v7)
    v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>>(v7);
  else
    v8 = 0;
  v21 = v7;
  v22.i64[0] = v7 + 112 * v2;
  v23 = v7 + 112 * v8;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)v22.i64[0], a2);
  v9 = v22.i64[0];
  v10 = v22.i64[0] + 112;
  v22.i64[1] = v22.i64[0] + 112;
  v12 = a1->i64[0];
  v11 = a1->u64[1];
  if (v11 == a1->i64[0])
  {
    v18 = vdupq_n_s64(v11);
  }
  else
  {
    v13 = 0;
    do
    {
      v14 = v11 + v13;
      v15 = *(_OWORD *)(v11 + v13 - 112);
      v16 = v9 + v13;
      *(_QWORD *)(v16 - 96) = *(_QWORD *)(v11 + v13 - 96);
      *(_OWORD *)(v16 - 112) = v15;
      *(_QWORD *)(v14 - 104) = 0;
      *(_QWORD *)(v14 - 96) = 0;
      *(_QWORD *)(v14 - 112) = 0;
      *(_QWORD *)(v16 - 88) = 0;
      *(_QWORD *)(v16 - 80) = 0;
      *(_QWORD *)(v16 - 72) = 0;
      *(_OWORD *)(v16 - 88) = *(_OWORD *)(v11 + v13 - 88);
      *(_QWORD *)(v16 - 72) = *(_QWORD *)(v11 + v13 - 72);
      *(_QWORD *)(v14 - 88) = 0;
      *(_QWORD *)(v14 - 80) = 0;
      *(_QWORD *)(v14 - 72) = 0;
      *(_QWORD *)(v16 - 64) = 0;
      *(_QWORD *)(v16 - 56) = 0;
      *(_QWORD *)(v16 - 48) = 0;
      *(_OWORD *)(v16 - 64) = *(_OWORD *)(v11 + v13 - 64);
      *(_QWORD *)(v16 - 48) = *(_QWORD *)(v11 + v13 - 48);
      *(_QWORD *)(v14 - 64) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *(_QWORD *)(v14 - 48) = 0;
      *(_OWORD *)(v16 - 40) = *(_OWORD *)(v11 + v13 - 40);
      v17 = *(_OWORD *)(v11 + v13 - 24);
      *(_QWORD *)(v14 - 40) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_OWORD *)(v16 - 24) = v17;
      *(_BYTE *)(v16 - 8) = *(_BYTE *)(v11 + v13 - 8);
      v13 -= 112;
    }
    while (v11 + v13 != v12);
    v9 += v13;
    v18 = *a1;
    v10 = v22.i64[1];
  }
  a1->i64[0] = v9;
  a1->i64[1] = v10;
  v22 = v18;
  v19 = a1[1].u64[0];
  a1[1].i64[0] = v23;
  v23 = v19;
  v21 = v18.i64[0];
  std::__split_buffer<Espresso::base_kernel::validate_for_engine_warning_t>::~__split_buffer((uint64_t)&v21);
  return v10;
}

void sub_1913EFAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<Espresso::base_kernel::validate_for_engine_warning_t>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void *v6;
  void **v7;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v7 = v4 - 7;
        std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](&v7);
        v6 = *(v4 - 10);
        if (v6)
        {
          *(v4 - 9) = v6;
          operator delete(v6);
        }
        if (*((char *)v4 - 97) < 0)
          operator delete(*(v4 - 15));
        if (*((char *)v4 - 121) < 0)
          operator delete(*(v4 - 18));
        v4 -= 19;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>>(unint64_t a1)
{
  if (a1 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(112 * a1);
}

void Espresso::profiler_t::get_result(Espresso::profiler_t *this@<X0>, const Espresso::profiler_t::entry_t **a2@<X8>)
{
  const char *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  int64x2_t *v14;
  int64x2_t **v15;
  int64x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  int64x2_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  int64x2_t *v28;
  const Espresso::profiler_t::entry_t *v29;
  const Espresso::profiler_t::entry_t *v30;
  Espresso *v31;
  const char *v32;
  double v33;
  double *v34;
  double v35;
  double v36;
  NSObject *v37;
  void *v38;
  float v39;
  std::mutex *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  double v47;
  void *v48;
  _BYTE *v49;
  uint64_t v50;
  void *__p;
  char v52;
  _BYTE buf[12];
  __int16 v54;
  void *v55;
  __int16 v56;
  double v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v40 = (std::mutex *)((char *)this + 112);
  std::mutex::lock((std::mutex *)((char *)this + 112));
  Espresso::profiler_t::static_entries(this, v4, a2);
  v6 = *((_QWORD *)this + 11);
  for (i = *((_QWORD *)this + 12); v6 != i; v6 += 48)
  {
    v7 = *(_QWORD *)(v6 + 16);
    v8 = *(_DWORD *)(v6 + 8);
    if (v8 == 723714200)
    {
      v17 = (uint64_t)*a2 + 152 * v7;
      v19 = *(_QWORD *)(v17 + 72);
      v18 = *(_QWORD *)(v17 + 80);
      if (v19 != v18)
        *(_QWORD *)(v18 - 8) = *(_QWORD *)v6;
    }
    else if (v8 == 723714196)
    {
      v9 = (uint64_t)*a2 + 152 * v7;
      v12 = *(_QWORD *)(v9 + 88);
      v11 = (_QWORD *)(v9 + 88);
      v10 = v12;
      v13 = *(_QWORD *)v6;
      v15 = (int64x2_t **)(v11 - 1);
      v14 = (int64x2_t *)*(v11 - 1);
      if ((unint64_t)v14 >= v12)
      {
        v41 = *(_QWORD *)v6;
        v20 = (void **)(v11 - 2);
        v21 = (int64x2_t *)*(v11 - 2);
        v22 = v14 - v21;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v24 = v10 - (_QWORD)v21;
        if (v24 >> 3 > v23)
          v23 = v24 >> 3;
        v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0;
        v26 = 0xFFFFFFFFFFFFFFFLL;
        if (!v25)
          v26 = v23;
        if (v26)
        {
          v26 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v26);
          v14 = *v15;
          v21 = (int64x2_t *)*v20;
        }
        else
        {
          v27 = 0;
        }
        v28 = (int64x2_t *)(v26 + 16 * v22);
        *v28 = vdupq_lane_s64(v41, 0);
        v16 = v28 + 1;
        if (v14 != v21)
        {
          do
          {
            v28[-1] = v14[-1];
            --v28;
            --v14;
          }
          while (v14 != v21);
          v21 = (int64x2_t *)*v20;
        }
        *v20 = v28;
        *v15 = v16;
        *v11 = v26 + 16 * v27;
        if (v21)
          operator delete(v21);
      }
      else
      {
        v14->i64[0] = v13;
        v14->i64[1] = v13;
        v16 = v14 + 1;
      }
      *v15 = v16;
    }
  }
  v29 = *a2;
  v30 = a2[1];
  if (*a2 != v30)
  {
    do
    {
      v31 = Espresso::profiler_t::entry_t::entry_t((Espresso::profiler_t::entry_t *)&v42, v29);
      if (v48 != v49)
      {
        v47 = 0.0;
        v33 = 0.0;
        v34 = (double *)v48;
        do
        {
          v35 = *v34;
          v36 = v34[1];
          v34 += 2;
          v33 = v33 + v36 - v35;
          v47 = v33;
        }
        while (v34 != (double *)v49);
        v47 = v33 / (double)(unint64_t)((v49 - (_BYTE *)v48) >> 4);
        Espresso::espresso_os_log_subsystem(v31, v32);
        v37 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          if (v44 >= 0)
            v38 = &v43;
          else
            v38 = v43;
          v39 = v47;
          *(_DWORD *)buf = 134218498;
          *(_QWORD *)&buf[4] = v42;
          v54 = 2080;
          v55 = v38;
          v56 = 2048;
          v57 = (float)(v39 * 1000.0);
          _os_log_impl(&dword_190DAF000, v37, OS_LOG_TYPE_INFO, "[profiler_t::get_result] %llu\t%s\t%.3f", buf, 0x20u);
        }

      }
      if (v52 < 0)
        operator delete(__p);
      *(_QWORD *)buf = &v50;
      std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete(v43);
      v29 = (const Espresso::profiler_t::entry_t *)((char *)v29 + 152);
    }
    while (v29 != v30);
  }
  std::mutex::unlock(v40);
}

void sub_1913EFF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::mutex::unlock(a10);
  _Unwind_Resume(a1);
}

Espresso::profiler_t::entry_t *Espresso::profiler_t::entry_t::entry_t(Espresso::profiler_t::entry_t *this, const Espresso::profiler_t::entry_t *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  std::string *v21;
  __int128 v22;

  *(_QWORD *)this = *(_QWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  v6 = *((_QWORD *)a2 + 7);
  v7 = *((_DWORD *)a2 + 16);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = v7;
  *((_QWORD *)this + 7) = v6;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  v8 = (char *)*((_QWORD *)a2 + 9);
  v9 = (char *)*((_QWORD *)a2 + 10);
  v10 = v9 - v8;
  if (v9 != v8)
  {
    if (v10 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v10 >> 4);
    *((_QWORD *)this + 9) = v11;
    *((_QWORD *)this + 10) = v11;
    *((_QWORD *)this + 11) = &v11[v12];
    do
    {
      v13 = *(_OWORD *)v8;
      v8 += 16;
      *v11++ = v13;
    }
    while (v8 != v9);
    *((_QWORD *)this + 10) = v11;
  }
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  v14 = *((_QWORD *)a2 + 12);
  v15 = *((_QWORD *)a2 + 13);
  if (v15 != v14)
  {
    v16 = 0x6DB6DB6DB6DB6DB7 * ((v15 - v14) >> 4);
    if (v16 >= 0x24924924924924ALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::base_kernel::validate_for_engine_warning_t>>(v16);
    v18 = 0;
    *((_QWORD *)this + 12) = v17;
    *((_QWORD *)this + 13) = v17;
    *((_QWORD *)this + 14) = &v17[112 * v19];
    do
    {
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)&v17[v18], (const Espresso::base_kernel::validate_for_engine_warning_t *)(v14 + v18));
      v18 += 112;
    }
    while (v14 + v18 != v15);
    *((_QWORD *)this + 13) = &v17[v18];
  }
  v20 = *((_WORD *)a2 + 60);
  *((_BYTE *)this + 122) = *((_BYTE *)a2 + 122);
  *((_WORD *)this + 60) = v20;
  v21 = (std::string *)((char *)this + 128);
  if (*((char *)a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v21, *((const std::string::value_type **)a2 + 16), *((_QWORD *)a2 + 17));
  }
  else
  {
    v22 = *((_OWORD *)a2 + 8);
    *((_QWORD *)this + 18) = *((_QWORD *)a2 + 18);
    *(_OWORD *)&v21->__r_.__value_.__l.__data_ = v22;
  }
  return this;
}

void sub_1913F0140(_Unwind_Exception *a1, uint64_t a2, void **a3, ...)
{
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;
  va_list va;

  va_start(va, a3);
  std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 80) = v7;
    operator delete(v7);
  }
  if (*(char *)(v3 + 55) < 0)
    operator delete(*a3);
  if (*(char *)(v3 + 31) < 0)
    operator delete(*v4);
  _Unwind_Resume(a1);
}

void Espresso::profiler_t::entry_t::~entry_t(void **this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  v3 = this + 12;
  std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[9];
  if (v2)
  {
    this[10] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void Espresso::profiler_t::results_for_platform_and_compute_path(Espresso::profiler_t *a1@<X0>, int a2@<W1>, unsigned int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::runtime_error *exception;
  std::string __str;
  std::string v29;
  std::string v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string v36;
  int v37[3];

  v37[0] = a2;
  if (*((_QWORD *)a1 + 10))
  {
    Espresso::profiler_t::get_network_path(a1, &v36);
    Espresso::create_context(v37, &v34);
    if (v34)
    {
      v33 = 0uLL;
      v7 = *((_QWORD *)a1 + 10);
      if (*(_BYTE *)(*(_QWORD *)(v7 + 16) + 123))
        Espresso::load_network_from_net_no_dispatch(v7, &v34, a3, (uint64_t *)&__str);
      else
        Espresso::load_network_no_dispatch((uint64_t)&v36, &v34, a3, (uint64_t *)&__str);
      size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
      v33 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
      if (!__str.__r_.__value_.__r.__words[0])
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "received wrong object, expected net_info_ir_t");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      if (__str.__r_.__value_.__l.__size_)
      {
        v9 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
        do
          v11 = __ldaxr(v9);
        while (__stlxr(v11 - 1, v9));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v12 = (uint64_t *)v33;
      std::vector<Espresso::profiler_t::entry_t>::vector(a4, 0x6DB6DB6DB6DB6DB7 * ((v12[1] - *v12) >> 5));
      v13 = *v12;
      if (v12[1] != *v12)
      {
        v14 = 0;
        v15 = 0;
        v16 = 0;
        do
        {
          Espresso::kernel_info_t::kernel_info_t(&__str, (const Espresso::kernel_info_t *)(v13 + v14));
          v17 = *a4 + v15;
          *(_DWORD *)(v17 + 64) = -1;
          *(_QWORD *)v17 = v16;
          v18 = v31 != 0;
          v19 = v32;
          std::string::operator=((std::string *)(v17 + 8), &__str);
          std::string::operator=((std::string *)(*a4 + v15 + 32), &v30);
          std::string::operator=((std::string *)(*a4 + v15 + 128), &v29);
          v20 = *a4 + v15;
          *(_BYTE *)(v20 + 121) = v18;
          *(_BYTE *)(v20 + 120) = v19;
          Espresso::kernel_info_t::~kernel_info_t((void **)&__str.__r_.__value_.__l.__data_);
          ++v16;
          v13 = *v12;
          v15 += 152;
          v14 += 224;
        }
        while (v16 < 0x6DB6DB6DB6DB6DB7 * ((v12[1] - *v12) >> 5));
      }
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
      if (*((_QWORD *)&v33 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    v24 = v35;
    if (v35)
    {
      p_shared_owners = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_1913F0510(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 136);
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(a1);
}

void Espresso::profiler_t::get_network_path(Espresso::profiler_t *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  __int128 v4;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("expected network to be valid object in profiler");
  if (*(char *)(v2 + 615) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 592), *(_QWORD *)(v2 + 600));
  }
  else
  {
    v3 = (__int128 *)(v2 + 592);
    v4 = *v3;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v3 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void sub_1913F067C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1913F0708(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_atomic_property__36(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_1913F0858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1913F0978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v18;

  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1913F0AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);

  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_atomic_property__2621(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void PTMutex::~PTMutex(PTMutex *this)
{
  *(_QWORD *)this = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_1E2D58470;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_update_absolute_indexes_after_transform::~pass_update_absolute_indexes_after_transform(Espresso::pass_update_absolute_indexes_after_transform *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::convert_float32_to_float16(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  std::runtime_error *exception;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  int64x2_t v22;
  int v23;

  v13 = a3;
  v14 = a4;
  v15 = *(id *)(a2 + 152);
  v23 = a5;
  v16 = (void *)objc_msgSend(*(id *)(a1 + 144), "newBufferWithBytes:length:options:", &v23, 4, 0);
  objc_msgSend(*(id *)(a1 + 160), "kernelForFunction:cacheString:withConstants:", "convert_float32_to_float16", 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v15, "setComputePipelineState:", v17);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v13, a6, 0);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v14, a7, 1);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v16, 0, 2);
  v21 = ((unint64_t)(a5 - 1) >> 7) + 1;
  v22 = vdupq_n_s64(1uLL);
  v19 = xmmword_191A93510;
  v20 = 1;
  objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", &v21, &v19);

}

void sub_1913F0DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  __cxa_free_exception(v6);

  _Unwind_Resume(a1);
}

void Espresso::convert_float16_to_float32(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  std::runtime_error *exception;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  int64x2_t v22;
  int v23;

  v13 = a3;
  v14 = a4;
  v15 = *(id *)(a2 + 152);
  v23 = a5;
  v16 = (void *)objc_msgSend(*(id *)(a1 + 144), "newBufferWithBytes:length:options:", &v23, 4, 0);
  objc_msgSend(*(id *)(a1 + 160), "kernelForFunction:cacheString:withConstants:", "convert_float16_to_float32", 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v15, "setComputePipelineState:", v17);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v13, a6, 0);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v14, a7, 1);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v16, 0, 2);
  v21 = ((unint64_t)(a5 - 1) >> 7) + 1;
  v22 = vdupq_n_s64(1uLL);
  v19 = xmmword_191A93510;
  v20 = 1;
  objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", &v21, &v19);

}

void sub_1913F0F70(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  __cxa_free_exception(v6);

  _Unwind_Resume(a1);
}

void Espresso::copy_float32_to_float32(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  std::runtime_error *exception;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  int64x2_t v22;
  int v23;

  v13 = a3;
  v14 = a4;
  v15 = *(id *)(a2 + 152);
  v23 = a5;
  v16 = (void *)objc_msgSend(*(id *)(a1 + 144), "newBufferWithBytes:length:options:", &v23, 4, 0);
  objc_msgSend(*(id *)(a1 + 160), "kernelForFunction:cacheString:withConstants:", "copy_float32_to_float32", 0, 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  if (!v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Kernel not found");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(v15, "setComputePipelineState:", v17);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v13, a6, 0);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v14, a7, 1);
  objc_msgSend(v15, "setBuffer:offset:atIndex:", v16, 0, 2);
  v21 = ((unint64_t)(a5 - 1) >> 6) + 1;
  v22 = vdupq_n_s64(1uLL);
  v19 = xmmword_191A93520;
  v20 = 1;
  objc_msgSend(v15, "dispatchThreadgroups:threadsPerThreadgroup:", &v21, &v19);

}

void sub_1913F1128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  __cxa_free_exception(v6);

  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::Kernels::activation_kernel::~activation_kernel(Espresso::MPSGraphEngine::Kernels::activation_kernel *this)
{
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::activation_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string v18;
  std::string v19;
  int64x2_t *v20;
  uint64_t v21;
  uint64_t v22[5];
  void **v23;
  void *__p[2];
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = *(_OWORD *)"\b";
  v25[0] = unk_191A9CC6C;
  v25[1] = xmmword_191A9CC7C;
  v26 = unk_191A9CC8C;
  v27 = 0x900000001;
  std::unordered_set<Espresso::activation_mode>::unordered_set((uint64_t)v22, (int *)__p, 18);
  v6 = *(_DWORD *)(a1 + 304);
  if (std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::find<Espresso::activation_mode>(v22[0], v22[1], v6))
  {
    if (v6 != 11
      || *(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 64
      && (Espresso::layer_nd_shape::layer_nd_shape((uint64_t)__p, *(const Espresso::layer_shape **)a3, 0),
          DWORD1(v25[0]) <= 4))
    {
      v7 = 1;
      goto LABEL_27;
    }
LABEL_26:
    v7 = 0;
    goto LABEL_27;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v20 = *(int64x2_t **)a2;
  v21 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v6 = *(_DWORD *)(a1 + 304);
  }
  std::to_string(&v18, v6);
  v11 = std::string::insert(&v18, 0, "[Dispatch::MPSGraph::activation_kernel] Unsupported: activation mode ");
  v19 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t((std::string *)__p, (__int128 *)&v19, a3, 0);
  Espresso::emit_kernel_validation_warning(&v20, (Espresso::base_kernel::validate_for_engine_warning_t *)__p);
  v12 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v23 = (void **)&v26;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v23);
  v23 = (void **)v25 + 1;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v23);
  if (SBYTE7(v25[0]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v7 = v21;
  if (v21)
  {
    v15 = (unint64_t *)(v21 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v7);
    }
    goto LABEL_26;
  }
LABEL_27:
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v22);
  return v7;
}

void sub_1913F13D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<Espresso::activation_mode>::unordered_set(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<Espresso::activation_mode,std::hash<Espresso::activation_mode>,std::equal_to<Espresso::activation_mode>,std::allocator<Espresso::activation_mode>>::__emplace_unique_key_args<Espresso::activation_mode,Espresso::activation_mode const&>(a1, *a2, *a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_1913F14A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::activation_kernel::~activation_kernel(Espresso::ANECompilerEngine::activation_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D770D8;
  v2 = (void **)((char *)this + 392);
  *((_QWORD *)this + 49) = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D770D8;
  v2 = (void **)((char *)this + 392);
  *((_QWORD *)this + 49) = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::activation_kernel::__set_weight_raw_blob(_QWORD *a1, uint64_t a2, uint64_t a3, const void *a4, unint64_t a5)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::runtime_error *exception;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  __int128 v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  __int128 v26;
  const std::string::value_type *v27;
  std::string::size_type v28;
  std::string *v29;
  __int128 v30;
  std::string *v31;
  __int128 v32;
  const std::string::value_type *v33;
  std::string::size_type v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string v41;
  _QWORD v42[2];
  unsigned __int8 v43;
  _QWORD v44[2];
  unsigned __int8 v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  std::string v54;

  v9 = *(char *)(a3 + 23);
  if (v9 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 12)
    {
LABEL_10:
      Espresso::generic_activation_kernel::__set_weight_raw_blob(a1, a2, (uint64_t *)a3, a4, a5);
      Espresso::ANECompilerEngine::ane_kernel::__set_weight_raw_blob(a1 + 49, (uint64_t *)a3, a4, a5);
      return;
    }
    v10 = *(_QWORD *)a3;
  }
  else
  {
    v10 = a3;
    if (v9 != 12)
      goto LABEL_10;
  }
  v11 = *(_QWORD *)v10;
  v12 = *(_DWORD *)(v10 + 8);
  if (v11 != 0x705F736D61726170 || v12 != 1970038130)
    goto LABEL_10;
  std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v54, a5, 1, 1, 1);
  v14 = (uint64_t)(a1 + 76);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v14, (__int128 *)&v54);
  size = (std::__shared_weak_count *)v54.__r_.__value_.__l.__size_;
  if (v54.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v54.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (*(_DWORD *)(*(_QWORD *)v14 + 8) != a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v47, a5);
    v19 = std::string::insert(&v47, 0, "Unexpected size s=");
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v48, "/blob=");
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v46, *(int *)(*(_QWORD *)v14 + 8));
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = &v46;
    else
      v23 = (std::string *)v46.__r_.__value_.__r.__words[0];
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    else
      v24 = v46.__r_.__value_.__l.__size_;
    v25 = std::string::append(&v49, (const std::string::value_type *)v23, v24);
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v44, " @ ");
    if ((v45 & 0x80u) == 0)
      v27 = (const std::string::value_type *)v44;
    else
      v27 = (const std::string::value_type *)v44[0];
    if ((v45 & 0x80u) == 0)
      v28 = v45;
    else
      v28 = v44[1];
    v29 = std::string::append(&v50, v27, v28);
    v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    v31 = std::string::append(&v51, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/ANECompilerEngine/Layers/ANECompilerActivation.mm");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::string::basic_string[abi:ne180100]<0>(v42, ":");
    if ((v43 & 0x80u) == 0)
      v33 = (const std::string::value_type *)v42;
    else
      v33 = (const std::string::value_type *)v42[0];
    if ((v43 & 0x80u) == 0)
      v34 = v43;
    else
      v34 = v42[1];
    v35 = std::string::append(&v52, v33, v34);
    v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v41, 106);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v41;
    else
      v37 = (std::string *)v41.__r_.__value_.__r.__words[0];
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v38 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    else
      v38 = v41.__r_.__value_.__l.__size_;
    v39 = std::string::append(&v53, (const std::string::value_type *)v37, v38);
    v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v54);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  memcpy(*(void **)(*(_QWORD *)v14 + 16), a4, a5);
}

void sub_1913F18A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  void *v59;
  int v60;
  uint64_t v61;

  if (*(char *)(v61 - 57) < 0)
    operator delete(*(void **)(v61 - 80));
  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v61 - 89) < 0)
    operator delete(*(void **)(v61 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v61 - 121) < 0)
    operator delete(*(void **)(v61 - 144));
  if (*(char *)(v61 - 153) < 0)
    operator delete(*(void **)(v61 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v60 & 1) == 0)
LABEL_28:
      _Unwind_Resume(a1);
  }
  else if (!v60)
  {
    goto LABEL_28;
  }
  __cxa_free_exception(v59);
  goto LABEL_28;
}

uint64_t Espresso::ANECompilerEngine::activation_kernel::supports_weight_key(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;

  v3 = *((char *)a2 + 23);
  if (v3 < 0)
  {
    if (a2[1] != 12)
      goto LABEL_10;
    v4 = (uint64_t *)*a2;
  }
  else
  {
    v4 = a2;
    if (v3 != 12)
      goto LABEL_10;
  }
  v5 = *v4;
  v6 = *((_DWORD *)v4 + 2);
  if (v5 == 0x705F736D61726170 && v6 == 1970038130)
    return 1;
LABEL_10:
  if (Espresso::generic_activation_kernel::supports_weight_key(a1, a2))
    return 1;
  return Espresso::ANECompilerEngine::ane_kernel::supports_weight_key(a2);
}

void Espresso::ANECompilerEngine::activation_kernel::compile(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option(this, a2, a3, 1);
}

void Espresso::ANECompilerEngine::activation_kernel::add_quantized_sigmoid_lut(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __CFString *v17;
  char *v18;
  float v19;
  float v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  std::string *v34;
  std::string *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const char *v49;
  _QWORD v50[4];
  float v51;
  float v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *__p;
  char v58;
  id v59;
  __CFString *v60;
  id v61;
  uint64_t v62;
  std::string *v63;
  _QWORD v64[2];
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void **v70;
  std::string *v71;
  std::string *v72;
  unint64_t v73;
  _QWORD *v74;

  v68 = 0;
  v69 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v69 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v68 = v7) == 0))
  {
    v49 = "Inconsistent state: null network";
    goto LABEL_69;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v49 = "Inconsistent state: blob_storage";
LABEL_69:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v49);
  }
  v8 = v7 + 136;
  v53[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v53[0], (__int128 **)v53);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v66 = *((_QWORD *)v9 + 5);
  v67 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v53[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v53);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v64[1] = *((_QWORD *)v13 + 5);
  v65 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v53, a3);
  v17 = v60;
  v60 = CFSTR("NeuronCustom");

  v18 = (char *)this + 392;
  v19 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 44);
  v20 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 48);
  if (v20 == 1.0 && v19 == 1.0)
  {
    v22 = *((_QWORD *)this + 57);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v20 = 1.0;
    if (v22)
    {
      v26 = *(float **)(v22 + 16);
      v27 = *v26;
      v28 = *(int *)(v22 + 8);
      if (!(_DWORD)v28)
      {
        v29 = 0;
LABEL_27:
        v20 = v27;
        if (!v23)
          goto LABEL_31;
        goto LABEL_28;
      }
      while (v27 == *v26)
      {
        ++v26;
        if (!--v28)
        {
          v29 = 1;
          goto LABEL_27;
        }
      }
    }
    v29 = 0;
    if (!v23)
      goto LABEL_31;
LABEL_28:
    v30 = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v29 & 1) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_31:
    if (!v29)
      goto LABEL_35;
LABEL_34:
    *(_BYTE *)((*(uint64_t (**)(char *))(*(_QWORD *)v18 + 104))(v18) + 40) = 1;
  }
LABEL_35:
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = ___ZN8Espresso17ANECompilerEngine17activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v50[3] = &__block_descriptor_40_e8_f12__0f8l;
  v51 = v19;
  v52 = v20;
  v32 = (void *)MEMORY[0x19401D648](v50);
  Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)v32, -4.75 / v19, 4.75 / v19, -5.0 / v19, 5.0 / v19, v20 * 0.0, v20);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(&v61, v33);
  v34 = v63;
  if ((unint64_t)v63 >= v64[0])
  {
    v36 = 0x8E38E38E38E38E39 * (((uint64_t)v63 - v62) >> 4);
    if (v36 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v37 = 0x1C71C71C71C71C72 * ((v64[0] - v62) >> 4);
    if (v37 <= v36 + 1)
      v37 = v36 + 1;
    if (0x8E38E38E38E38E39 * ((v64[0] - v62) >> 4) >= 0xE38E38E38E38E3)
      v38 = 0x1C71C71C71C71C7;
    else
      v38 = v37;
    v74 = v64;
    if (v38)
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v38);
    else
      v39 = 0;
    v70 = (void **)v38;
    v71 = (std::string *)(v38 + 144 * v36);
    v72 = v71;
    v73 = v38 + 144 * v39;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v71, (uint64_t)v53);
    v72 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v62, &v70);
    v35 = v63;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v70);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v63, (uint64_t)v53);
    v35 = v34 + 6;
  }
  v63 = v35;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v18 + 32))(v18, a2, &v62);

  if (v58 < 0)
    operator delete(__p);
  v70 = (void **)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v70);
  v70 = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v70);
  if (v54 < 0)
    operator delete(v53[0]);
  v53[0] = &v62;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  v40 = v65;
  if (v65)
  {
    v41 = (unint64_t *)&v65->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v67;
  if (v67)
  {
    v44 = (unint64_t *)&v67->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v69;
  if (v69)
  {
    v47 = (unint64_t *)&v69->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1913F1F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  void *v15;
  void *v16;
  uint64_t v17;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v17 - 104);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a15);
  a15 = (void **)(v17 - 176);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 120);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::activation_kernel::add_quantized_tanh_lut(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __CFString *v17;
  char *v18;
  float v19;
  float v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  void *v33;
  std::string *v34;
  std::string *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  const char *v49;
  _QWORD v50[4];
  float v51;
  float v52;
  void *v53[2];
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *__p;
  char v58;
  id v59;
  __CFString *v60;
  id v61;
  uint64_t v62;
  std::string *v63;
  _QWORD v64[2];
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void **v70;
  std::string *v71;
  std::string *v72;
  unint64_t v73;
  _QWORD *v74;

  v68 = 0;
  v69 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v69 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v68 = v7) == 0))
  {
    v49 = "Inconsistent state: null network";
    goto LABEL_69;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v49 = "Inconsistent state: blob_storage";
LABEL_69:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v49);
  }
  v8 = v7 + 136;
  v53[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v53[0], (__int128 **)v53);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v66 = *((_QWORD *)v9 + 5);
  v67 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v53[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v53);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v64[1] = *((_QWORD *)v13 + 5);
  v65 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v62 = 0;
  v63 = 0;
  v64[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v53, a3);
  v17 = v60;
  v60 = CFSTR("NeuronCustom");

  v18 = (char *)this + 392;
  v19 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 44);
  v20 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 48);
  if (v20 == 1.0 && v19 == 1.0)
  {
    v22 = *((_QWORD *)this + 57);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v20 = 1.0;
    if (v22)
    {
      v26 = *(float **)(v22 + 16);
      v27 = *v26;
      v28 = *(int *)(v22 + 8);
      if (!(_DWORD)v28)
      {
        v29 = 0;
LABEL_27:
        v20 = v27;
        if (!v23)
          goto LABEL_31;
        goto LABEL_28;
      }
      while (v27 == *v26)
      {
        ++v26;
        if (!--v28)
        {
          v29 = 1;
          goto LABEL_27;
        }
      }
    }
    v29 = 0;
    if (!v23)
      goto LABEL_31;
LABEL_28:
    v30 = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v29 & 1) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_31:
    if (!v29)
      goto LABEL_35;
LABEL_34:
    *(_BYTE *)((*(uint64_t (**)(char *))(*(_QWORD *)v18 + 104))(v18) + 40) = 1;
  }
LABEL_35:
  v50[0] = MEMORY[0x1E0C809B0];
  v50[1] = 3221225472;
  v50[2] = ___ZN8Espresso17ANECompilerEngine17activation_kernel22add_quantized_tanh_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v50[3] = &__block_descriptor_40_e8_f12__0f8l;
  v51 = v19;
  v52 = v20;
  v32 = (void *)MEMORY[0x19401D648](v50);
  Espresso::ANECompilerEngine::generate_custom_neuron_params(1, (uint64_t)v32, 0.0 / v19, 4.0 / v19, 0.0 / v19, 4.0 / v19, v20 * 0.0, v20);
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(&v61, v33);
  v34 = v63;
  if ((unint64_t)v63 >= v64[0])
  {
    v36 = 0x8E38E38E38E38E39 * (((uint64_t)v63 - v62) >> 4);
    if (v36 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v37 = 0x1C71C71C71C71C72 * ((v64[0] - v62) >> 4);
    if (v37 <= v36 + 1)
      v37 = v36 + 1;
    if (0x8E38E38E38E38E39 * ((v64[0] - v62) >> 4) >= 0xE38E38E38E38E3)
      v38 = 0x1C71C71C71C71C7;
    else
      v38 = v37;
    v74 = v64;
    if (v38)
      v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v38);
    else
      v39 = 0;
    v70 = (void **)v38;
    v71 = (std::string *)(v38 + 144 * v36);
    v72 = v71;
    v73 = v38 + 144 * v39;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v71, (uint64_t)v53);
    v72 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v62, &v70);
    v35 = v63;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v70);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v63, (uint64_t)v53);
    v35 = v34 + 6;
  }
  v63 = v35;
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v18 + 32))(v18, a2, &v62);

  if (v58 < 0)
    operator delete(__p);
  v70 = (void **)&v56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v70);
  v70 = (void **)&v55;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v70);
  if (v54 < 0)
    operator delete(v53[0]);
  v53[0] = &v62;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  v40 = v65;
  if (v65)
  {
    v41 = (unint64_t *)&v65->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v67;
  if (v67)
  {
    v44 = (unint64_t *)&v67->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v69;
  if (v69)
  {
    v47 = (unint64_t *)&v69->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1913F24DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  void *v15;
  void *v16;
  uint64_t v17;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v17 - 104);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a15);
  a15 = (void **)(v17 - 176);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 152);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 136);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17 - 120);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::activation_kernel::compile(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option((Espresso::ANECompilerEngine::activation_kernel *)((char *)this - 392), a2, a3, 1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::activation_kernel::~activation_kernel(Espresso::ANECompilerEngine::activation_kernel *this)
{
  Espresso::generic_activation_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::activation_kernel *)((char *)this - 392);
  *((_QWORD *)this - 49) = &off_1E2D770D8;
  *(_QWORD *)this = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
}

{
  Espresso::generic_activation_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::activation_kernel *)((char *)this - 392);
  *((_QWORD *)this - 49) = &off_1E2D770D8;
  *(_QWORD *)this = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option(Espresso::ANECompilerEngine::activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3, int a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  char *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  __CFString *v21;
  char *v22;
  int v23;
  const __CFString *v24;
  const __CFString *v25;
  __CFString *v26;
  void *v27;
  float v28;
  void *v29;
  uint64_t v30;
  void *v31;
  std::string *v32;
  std::string *v33;
  _QWORD *v34;
  char *v35;
  float v36;
  __CFString *v37;
  void *v38;
  id v39;
  __CFString *v40;
  NSNumber *v41;
  void *v42;
  void *v43;
  unint64_t *v44;
  void *v45;
  std::string *v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  unint64_t v55;
  vDSP_Length v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  void *v66;
  __CFString *v67;
  void *v68;
  void *v70;
  float v71;
  void *v73;
  void *v75;
  void *v76;
  __CFString *v77;
  void *v79;
  std::string *v80;
  std::string *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  std::string *v90;
  std::string *v91;
  void *v93;
  std::string *v96;
  std::string *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  __CFString *v122;
  size_t size;
  std::string *p_str;
  std::string *p_p;
  std::string *v126;
  std::string *v127;
  std::string *v128;
  std::string *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void *v134;
  __CFString *v135;
  std::string *v136;
  std::string *v137;
  unint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  void *v142;
  __CFString *v143;
  std::string *v144;
  std::string *v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  void *v150;
  __CFString *v151;
  void *v153;
  std::string *v154;
  std::string *v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t *v160;
  unint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  __CFString *v171;
  std::string *v172;
  std::string *v173;
  size_t v174;
  std::string *v175;
  std::string *v176;
  void *v177;
  __CFString *v178;
  size_t v179;
  std::string *v180;
  std::string *v181;
  size_t v182;
  std::string *v183;
  std::string *v184;
  std::string *v185;
  std::string *v186;
  void *v187;
  int *v188;
  uint64_t v189;
  _WORD *v190;
  vDSP_Length v191;
  int v192;
  uint64_t v194;
  std::__shared_weak_count *v195;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  void *v201;
  void *v202;
  void *v203;
  void *v204;
  uint64_t weights_file_index;
  void *v206;
  __CFString *v207;
  size_t v208;
  std::string *v209;
  std::string *v210;
  size_t v211;
  std::string *v212;
  std::string *v213;
  std::string *v214;
  std::string *v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::__shared_weak_count *v219;
  unint64_t *v220;
  unint64_t v221;
  void *v222;
  __CFString *v223;
  size_t v224;
  std::string *v225;
  std::string *v226;
  size_t v227;
  uint64_t v228;
  void *v229;
  std::string *v230;
  uint64_t i;
  std::string *v232;
  std::string *v233;
  const char *v234;
  std::runtime_error *exception;
  int v236;
  id obj;
  _QWORD v238[3];
  std::__shared_weak_count *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  _QWORD v246[5];
  _QWORD v247[3];
  std::__shared_weak_count *v248;
  std::string v249;
  void *v250[2];
  char v251;
  uint64_t v252;
  _QWORD *v253[6];
  char v254;
  id v255;
  __CFString *v256;
  id v257[2];
  uint64_t v258;
  std::string *v259;
  unint64_t v260;
  uint64_t v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  std::__shared_weak_count *v264;
  uint64_t v265;
  std::__shared_weak_count *v266;
  std::string __p;
  unint64_t v268;
  unint64_t *v269;
  void *v270;
  std::vector<std::string> v271;
  void *v272;
  void *v273;
  char v274;
  id v275;
  __CFString *v276;
  id v277[2];
  std::string __str;
  __int128 v279;
  const __CFString *v280;
  __int128 v281;
  const __CFString *v282;
  const __CFString *v283;
  const __CFString *v284;
  uint64_t v285;

  v285 = *MEMORY[0x1E0C80C00];
  v265 = 0;
  v266 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v5
    || (v9 = std::__shared_weak_count::lock(v5), (v266 = v9) == 0)
    || (v10 = *((_QWORD *)a2 + 1), (v265 = v10) == 0))
  {
    v234 = "Inconsistent state: null network";
    goto LABEL_386;
  }
  if (!*(_QWORD *)(v10 + 576))
  {
    v234 = "Inconsistent state: blob_storage";
LABEL_386:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v234);
  }
  v11 = v9;
  v250[0] = a3[6];
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 136, (unsigned __int8 *)v250[0], (__int128 **)v250);
  v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 6);
  v263 = *((_QWORD *)v12 + 5);
  v264 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v250[0] = a3;
  v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10 + 136, (unsigned __int8 *)a3, (__int128 **)v250);
  v18 = *((_QWORD *)v16 + 5);
  v17 = (std::__shared_weak_count *)*((_QWORD *)v16 + 6);
  v261 = v18;
  v262 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v236 = *((unsigned __int8 *)a2 + 552);
  v258 = 0;
  v259 = 0;
  v260 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v250, a3);
  obj = (id)objc_opt_new();
  v21 = v256;
  v256 = CFSTR("Neuron");

  v22 = (char *)this + 392;
  v23 = *(unsigned __int8 *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392)
                           + 42);
  std::string::basic_string[abi:ne180100]<0>(&__p, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(&__str, "1");
  Espresso::map_const_get<std::map<std::string,std::string>>(v10 + 472, (uint64_t)&__p, (uint64_t)&__str, &v249);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = CFSTR("Type");
  v25 = CFSTR("Swish");
  switch(*((_DWORD *)this + 76))
  {
    case 0:
      v25 = CFSTR("ReLU");
      goto LABEL_47;
    case 1:
      if (v23)
      {
        if ((a4 & 1) != 0)
        {
          v51 = 52;
          goto LABEL_42;
        }
        Espresso::ANECompilerEngine::activation_kernel::add_quantized_tanh_lut(this, a2, a3);
        goto LABEL_107;
      }
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v249.__r_.__value_.__l.__size_ == 1)
        {
          v91 = (std::string *)v249.__r_.__value_.__r.__words[0];
LABEL_235:
          if (v91->__r_.__value_.__s.__data_[0] == 48)
          {
            v25 = CFSTR("Tanh");
            goto LABEL_47;
          }
        }
      }
      else if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) == 1)
      {
        v91 = &v249;
        goto LABEL_235;
      }
      Espresso::ANECompilerEngine::ane_kernel::add_high_precision_tanh_units((uint64_t)this + 392, (uint64_t)a2, a3);
      goto LABEL_107;
    case 2:
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("LeakyReLU"), CFSTR("Type"));
      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v75, CFSTR("ReluSlope"));

      v24 = CFSTR("ReluOffset");
      v25 = (const __CFString *)&unk_1E2DEDAC0;
      goto LABEL_47;
    case 3:
      if (v23)
      {
        if (a4)
        {
          v51 = 51;
LABEL_42:
          (*(void (**)(Espresso::ANECompilerEngine::activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **, const __CFString *))(*(_QWORD *)this + 8 * v51))(this, a2, a3, CFSTR("Type"));
        }
        else
        {
          Espresso::ANECompilerEngine::activation_kernel::add_quantized_sigmoid_lut(this, a2, a3);
        }
        goto LABEL_107;
      }
      if ((SHIBYTE(v249.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) == 1)
        {
          v90 = &v249;
          goto LABEL_230;
        }
LABEL_232:
        Espresso::ANECompilerEngine::ane_kernel::add_high_precision_sigmoid_units((_QWORD *)this + 49, (uint64_t)a2, a3, 1);
        goto LABEL_107;
      }
      if (v249.__r_.__value_.__l.__size_ != 1)
        goto LABEL_232;
      v90 = (std::string *)v249.__r_.__value_.__r.__words[0];
LABEL_230:
      if (v90->__r_.__value_.__s.__data_[0] != 48)
        goto LABEL_232;
      v25 = CFSTR("Sigmoid");
LABEL_47:
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v25, v24);
LABEL_78:
      objc_storeStrong(v257, obj);
      v96 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v98 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
        if (v98 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v99 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
        if (v99 <= v98 + 1)
          v99 = v98 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
          v100 = 0x1C71C71C71C71C7;
        else
          v100 = v99;
        v269 = &v260;
        if (v100)
          v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v100);
        else
          v101 = 0;
        __p.__r_.__value_.__r.__words[0] = v100;
        __p.__r_.__value_.__l.__size_ = v100 + 144 * v98;
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        v268 = v100 + 144 * v101;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v250);
        __p.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &__p);
        v97 = v259;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
        v10 = v265;
        v11 = v266;
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)v250);
        v97 = v96 + 6;
      }
      v259 = v97;
      v238[2] = v10;
      v239 = v11;
      if (v11)
      {
        v102 = (unint64_t *)&v11->__shared_owners_;
        do
          v103 = __ldxr(v102);
        while (__stxr(v103 + 1, v102));
      }
      v104 = v262;
      v238[0] = v261;
      v238[1] = v262;
      if (v262)
      {
        v105 = (unint64_t *)&v262->__shared_owners_;
        do
          v106 = __ldxr(v105);
        while (__stxr(v106 + 1, v105));
      }
      Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::activation_kernel *>(this, a2, a3, (uint64_t)v238, &v258);
      if (v104)
      {
        v107 = (unint64_t *)&v104->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v109 = v239;
      if (v239)
      {
        v110 = (unint64_t *)&v239->__shared_owners_;
        do
          v111 = __ldaxr(v110);
        while (__stlxr(v111 - 1, v110));
        if (!v111)
        {
          ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
          std::__shared_weak_count::__release_weak(v109);
        }
      }
      (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v22 + 32))((char *)this + 392, a2, &v258);
LABEL_107:
      if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v249.__r_.__value_.__l.__data_);

      if (v254 < 0)
        operator delete(v253[4]);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v253;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v252;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      if (v251 < 0)
        operator delete(v250[0]);
      v250[0] = &v258;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v250);
      v112 = v262;
      if (v262)
      {
        v113 = (unint64_t *)&v262->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (!v114)
        {
          ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
          std::__shared_weak_count::__release_weak(v112);
        }
      }
      v115 = v264;
      if (v264)
      {
        v116 = (unint64_t *)&v264->__shared_owners_;
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
        if (!v117)
        {
          ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
          std::__shared_weak_count::__release_weak(v115);
        }
      }
      v118 = v266;
      if (v266)
      {
        v119 = (unint64_t *)&v266->__shared_owners_;
        do
          v120 = __ldaxr(v119);
        while (__stlxr(v120 - 1, v119));
        if (!v120)
        {
          ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
          std::__shared_weak_count::__release_weak(v118);
        }
      }
      return;
    case 4:
      v52 = *((_QWORD *)this + 76);
      if (!v52)
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("PRELU params not set");
      v53 = *(float **)(v52 + 16);
      _S8 = *v53;
      v55 = *(int *)(v52 + 8);
      if (v55 < 4)
        goto LABEL_38;
      v56 = v55 >> 2;
      v57 = v55 >> 2 <= 1 ? 1 : v55 >> 2;
      v58 = 0.0;
      do
      {
        v59 = *v53++;
        v60 = vabds_f32(v59, _S8);
        if (v60 > v58)
          v58 = v60;
        --v57;
      }
      while (v57);
      if (v58 < 0.000000001)
      {
LABEL_38:
        objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("LeakyReLU"), CFSTR("Type"));
        __asm { FCVT            H0, S8 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v66, CFSTR("ReluSlope"));

        objc_msgSend(obj, "setObject:forKeyedSubscript:", &unk_1E2DEDAC0, CFSTR("ReluOffset"));
        goto LABEL_78;
      }
      v121 = (void *)objc_opt_new();
      objc_msgSend(v121, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v277, v121);
      v122 = v276;
      v276 = CFSTR("Neuron");

      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, size + 10);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_str, p_p, size);
      }
      strcpy((char *)p_str + size, "_tmp_relux");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str;
      v126 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v127 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v258, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v127 = v126 + 6;
      }
      v259 = v127;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      v169 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 4294949888);
      v170 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v169, "setObject:forKeyedSubscript:", v170, CFSTR("ScaleScalar"));

      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v277, v169);
      v171 = v276;
      v276 = CFSTR("GOC");

      v172 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v173 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v258, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v173 = v172 + 6;
      }
      v259 = v173;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v174 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v174 = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v174 + 7);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v175 = &__str;
      else
        v175 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v174)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v176 = &__p;
        else
          v176 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v175, v176, v174);
      }
      strcpy((char *)v175 + v174, "_tmp_mx");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      v177 = (void *)objc_opt_new();
      objc_msgSend(v177, "setObject:forKeyedSubscript:", CFSTR("ReLU"), CFSTR("Type"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v277, v177);
      v178 = v276;
      v276 = CFSTR("Neuron");

      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v179 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v179 = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v179 + 7);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v180 = &__str;
      else
        v180 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v179)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v181 = &__p;
        else
          v181 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v180, v181, v179);
      }
      strcpy((char *)v180 + v179, "_tmp_mx");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v271, &__str, &v279, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v182 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v182 = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v182 + 12);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v183 = &__str;
      else
        v183 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v182)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v184 = &__p;
        else
          v184 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v183, v184, v182);
      }
      strcpy((char *)v183 + v182, "_tmp_relu_mx");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str;
      v185 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v186 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v258, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v186 = v185 + 6;
      }
      v259 = v186;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      v187 = (void *)objc_opt_new();
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,Espresso::blob<unsigned char,1>::UnitializedBlobType,void>(&v244, *(_DWORD *)(*((_QWORD *)this + 76) + 8), 1, 1, 1);
      vDSP_vneg(*(const float **)(*((_QWORD *)this + 76) + 16), 1, *(float **)(v244 + 16), 1, v56);
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,Espresso::blob<unsigned char,1>::UnitializedBlobType,void>(&v242, 2 * v56, 1, 1, 1);
      v188 = *(int **)(v244 + 16);
      v189 = v242;
      v190 = *(_WORD **)(v242 + 16);
      v191 = v56;
      do
      {
        v192 = *v188++;
        _S0 = v192;
        __asm { FCVT            H0, S0 }
        *v190++ = _S0;
        --v191;
      }
      while (v191);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v244, v189, (uint64_t)v243);
      v194 = v244;
      v195 = v245;
      v240 = v244;
      v241 = v245;
      if (v245)
      {
        v196 = (unint64_t *)&v245->__shared_owners_;
        do
          v197 = __ldxr(v196);
        while (__stxr(v197 + 1, v196));
      }
      v198 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler *)((char *)a2 + 128), *(const unsigned __int8 **)(v194 + 16), *(int *)(v194 + 8));
      if (v195)
      {
        v199 = (unint64_t *)&v195->__shared_owners_;
        do
          v200 = __ldaxr(v199);
        while (__stlxr(v200 - 1, v199));
        if (!v200)
        {
          ((void (*)(std::__shared_weak_count *))v195->__on_zero_shared)(v195);
          std::__shared_weak_count::__release_weak(v195);
        }
      }
      v201 = (void *)objc_opt_new();
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", v56);
      v202 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v201, "setObject:forKeyedSubscript:", v202, CFSTR("ScaleCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v198);
      v203 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v201, "setObject:forKeyedSubscript:", v203, CFSTR("ScaleOffset"));

      v204 = (void *)MEMORY[0x1E0CB37E8];
      if (v236)
        weights_file_index = 0;
      else
      objc_msgSend(v204, "numberWithUnsignedLong:", weights_file_index);
      v206 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v201, "setObject:forKeyedSubscript:", v206, CFSTR("ScaleIndex"));

      objc_msgSend(v201, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
      objc_msgSend(v187, "setObject:forKeyedSubscript:", v201, CFSTR("BiasScaleGroupData"));
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      objc_storeStrong(v277, v187);
      v207 = v276;
      v276 = CFSTR("GOC");

      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v208 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v208 = __p.__r_.__value_.__l.__size_;
      v209 = &__str;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v208 + 12);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v209 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v208)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v210 = &__p;
        else
          v210 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v209, v210, v208);
      }
      strcpy((char *)v209 + v208, "_tmp_relu_mx");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v271, &__str, &v279, 1uLL);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v211 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v211 = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v211 + 18);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v212 = &__str;
      else
        v212 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v211)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v213 = &__p;
        else
          v213 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v212, v213, v211);
      }
      strcpy((char *)v212 + v211, "_tmp_relu_mx_alpha");
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = __str;
      v214 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v215 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v258, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v215 = v214 + 6;
      }
      v259 = v215;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);

      v216 = v243;
      if (v243)
      {
        v217 = (unint64_t *)&v243->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (!v218)
        {
          ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
          std::__shared_weak_count::__release_weak(v216);
        }
      }
      v219 = v245;
      if (v245)
      {
        v220 = (unint64_t *)&v245->__shared_owners_;
        do
          v221 = __ldaxr(v220);
        while (__stlxr(v221 - 1, v220));
        if (!v221)
        {
          ((void (*)(std::__shared_weak_count *))v219->__on_zero_shared)(v219);
          std::__shared_weak_count::__release_weak(v219);
        }
      }

      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      v222 = (void *)objc_opt_new();
      objc_msgSend(v222, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
      v223 = v276;
      v276 = CFSTR("ElementWise");

      objc_storeStrong(v277, v222);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v224 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v224 = __p.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&__str, v224 + 10);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v225 = &__str;
      else
        v225 = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (v224)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v226 = &__p;
        else
          v226 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v225, v226, v224);
      }
      strcpy((char *)v225 + v224, "_tmp_relux");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v227 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v227 = __p.__r_.__value_.__l.__size_;
      v228 = std::string::basic_string[abi:ne180100]((uint64_t)&v279, v227 + 18);
      if (SHIBYTE(v280) >= 0)
        v229 = (void *)v228;
      else
        v229 = (void *)v279;
      if (v227)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v230 = &__p;
        else
          v230 = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(v229, v230, v227);
      }
      strcpy((char *)v229 + v227, "_tmp_relu_mx_alpha");
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v271, &__str, &v281, 2uLL);
      for (i = 0; i != -48; i -= 24)
      {
        if (*((char *)&v280 + i + 7) < 0)
          operator delete(*(void **)((char *)&__str + i + 24));
      }
      v232 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v233 = (std::string *)std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__push_back_slow_path<Espresso::ANECompilerEngine::compiler::unit_t const&>(&v258, (uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v233 = v232 + 6;
      }
      v259 = v233;
      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)&__p);

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_107;
    case 5:
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      v76 = (void *)objc_opt_new();
      objc_storeStrong(v277, v76);
      v77 = v276;
      v276 = CFSTR("GOC");

      _S0 = *((_DWORD *)this + 78);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v76, "setObject:forKeyedSubscript:", v79, CFSTR("ScaleScalar"));

      v80 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v86 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
        if (v86 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v87 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
        if (v87 <= v86 + 1)
          v87 = v86 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
          v88 = 0x1C71C71C71C71C7;
        else
          v88 = v87;
        *((_QWORD *)&v279 + 1) = &v260;
        if (v88)
          v88 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v88);
        else
          v89 = 0;
        __str.__r_.__value_.__r.__words[0] = v88;
        __str.__r_.__value_.__l.__size_ = v88 + 144 * v86;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v279 = v88 + 144 * v89;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &__str);
        v81 = v259;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v81 = v80 + 6;
      }
      v259 = v81;

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      v134 = (void *)objc_opt_new();
      objc_storeStrong(v277, v134);
      v135 = v276;
      v276 = CFSTR("Neuron");

      objc_msgSend(v134, "setObject:forKeyedSubscript:", CFSTR("Tanh"), CFSTR("Type"));
      v136 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v138 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
        if (v138 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v139 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
        if (v139 <= v138 + 1)
          v139 = v138 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
          v140 = 0x1C71C71C71C71C7;
        else
          v140 = v139;
        *((_QWORD *)&v279 + 1) = &v260;
        if (v140)
          v140 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v140);
        else
          v141 = 0;
        __str.__r_.__value_.__r.__words[0] = v140;
        __str.__r_.__value_.__l.__size_ = v140 + 144 * v138;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v279 = v140 + 144 * v141;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &__str);
        v137 = v259;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v137 = v136 + 6;
      }
      v259 = v137;

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&__p.__r_.__value_.__l.__data_, a3);
      v150 = (void *)objc_opt_new();
      objc_storeStrong(v277, v150);
      v151 = v276;
      v276 = CFSTR("GOC");

      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
      v153 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v150, "setObject:forKeyedSubscript:", v153, CFSTR("ScaleScalar"));

      v154 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v156 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
        if (v156 + 1 > 0x1C71C71C71C71C7)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v157 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
        if (v157 <= v156 + 1)
          v157 = v156 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
          v158 = 0x1C71C71C71C71C7;
        else
          v158 = v157;
        *((_QWORD *)&v279 + 1) = &v260;
        if (v158)
          v158 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v158);
        else
          v159 = 0;
        __str.__r_.__value_.__r.__words[0] = v158;
        __str.__r_.__value_.__l.__size_ = v158 + 144 * v156;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        *(_QWORD *)&v279 = v158 + 144 * v159;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)&__p);
        __str.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &__str);
        v155 = v259;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)&__p);
        v155 = v154 + 6;
      }
      v259 = v155;

      if (v274 < 0)
        operator delete(v273);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v271;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v268;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v247[2] = v10;
      v248 = v266;
      if (v266)
      {
        v160 = (unint64_t *)&v266->__shared_owners_;
        do
          v161 = __ldxr(v160);
        while (__stxr(v161 + 1, v160));
      }
      v247[0] = v18;
      v247[1] = v17;
      if (v17)
      {
        v162 = (unint64_t *)&v17->__shared_owners_;
        do
          v163 = __ldxr(v162);
        while (__stxr(v163 + 1, v162));
      }
      Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::activation_kernel *>(this, a2, a3, (uint64_t)v247, &v258);
      if (v17)
      {
        v164 = (unint64_t *)&v17->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      v166 = v248;
      if (v248)
      {
        v167 = (unint64_t *)&v248->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
          std::__shared_weak_count::__release_weak(v166);
        }
      }
      (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v22 + 32))((char *)this + 392, a2, &v258);
      goto LABEL_107;
    case 6:
      v67 = v256;
      v256 = CFSTR("GOC");

      v68 = (void *)objc_opt_new();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v68, CFSTR("BiasScaleGroupData"));
      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
      v70 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v70, CFSTR("ScaleScalar"));

      if (*((_BYTE *)a2 + 384))
      {
        v71 = *((float *)this + 77);
        if (v71 == 0.0)
          goto LABEL_76;
        _S0 = *((float *)this + 78) / v71;
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v73, CFSTR("BiasScalar"));
      }
      else
      {
        _S0 = *((_DWORD *)this + 78);
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v73, CFSTR("BiasScalar"));
      }

LABEL_76:
      objc_msgSend(obj, "removeObjectForKey:", CFSTR("BiasScaleGroupData"));
LABEL_77:

      goto LABEL_78;
    case 7:
      v37 = v256;
      v256 = CFSTR("NeuronCustom");

      Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)&__block_literal_global_2654, -2.5, 2.5, -2.6, 2.6, 0.0, 1.0);
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = v257[0];
      v257[0] = v38;

      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v250);
      goto LABEL_107;
    case 8:
      v26 = v256;
      v256 = CFSTR("NeuronCustom");

      v246[0] = MEMORY[0x1E0C809B0];
      v246[1] = 3221225472;
      v246[2] = ___ZN8Espresso17ANECompilerEngine17activation_kernel36compile_with_lut_polymorphism_optionEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke;
      v246[3] = &__block_descriptor_40_e8_f12__0f8l;
      v246[4] = this;
      v27 = (void *)MEMORY[0x19401D648](v246);
      v28 = *((float *)this + 77);
      Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)v27, -1.0, 0.0, -1.0625, 65504.0, 0.0, 65504.0);
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      Espresso::ANECompilerEngine::generate_custom_neuron_params(0, (uint64_t)v27, -5.0, -1.0625, -7.0, -1.0, -v28, 0.0);
      v30 = objc_claimAutoreleasedReturnValue();
      objc_storeStrong(v257, v29);
      v31 = (void *)v30;
      v32 = v259;
      if ((unint64_t)v259 >= v260)
      {
        v82 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
        if (v82 + 1 > 0x1C71C71C71C71C7)
          goto LABEL_390;
        v83 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
        if (v83 <= v82 + 1)
          v83 = v82 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
          v84 = 0x1C71C71C71C71C7;
        else
          v84 = v83;
        v269 = &v260;
        if (v84)
          v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v84);
        else
          v85 = 0;
        __p.__r_.__value_.__r.__words[0] = v84;
        __p.__r_.__value_.__l.__size_ = v84 + 144 * v82;
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        v268 = v84 + 144 * v85;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v250);
        __p.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &__p);
        v33 = v259;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
      }
      else
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)v250);
        v33 = v32 + 6;
      }
      v259 = v33;
      objc_storeStrong(v257, v31);
      v128 = v259;
      if ((unint64_t)v259 < v260)
      {
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)v250);
        v129 = v128 + 6;
LABEL_176:
        v259 = v129;
        v142 = (void *)objc_opt_new();
        objc_msgSend(v142, "setObject:forKeyedSubscript:", CFSTR("Add"), CFSTR("Type"));
        v143 = v256;
        v256 = CFSTR("ElementWise");

        objc_storeStrong(v257, v142);
        v144 = v259;
        if ((unint64_t)v259 >= v260)
        {
          v146 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
          if (v146 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v147 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
          if (v147 <= v146 + 1)
            v147 = v146 + 1;
          if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
            v148 = 0x1C71C71C71C71C7;
          else
            v148 = v147;
          v269 = &v260;
          if (v148)
            v148 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v148);
          else
            v149 = 0;
          __p.__r_.__value_.__r.__words[0] = v148;
          __p.__r_.__value_.__l.__size_ = v148 + 144 * v146;
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          v268 = v148 + 144 * v149;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v250);
          __p.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &__p);
          v145 = v259;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v259, (uint64_t)v250);
          v145 = v144 + 6;
        }
        v259 = v145;
        (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *, uint64_t))(*(_QWORD *)v22 + 40))(v22, a2, &v258, 1);

        goto LABEL_107;
      }
      v130 = 0x8E38E38E38E38E39 * (((uint64_t)v259 - v258) >> 4);
      if (v130 + 1 <= 0x1C71C71C71C71C7)
      {
        v131 = 0x1C71C71C71C71C72 * ((uint64_t)(v260 - v258) >> 4);
        if (v131 <= v130 + 1)
          v131 = v130 + 1;
        if (0x8E38E38E38E38E39 * ((uint64_t)(v260 - v258) >> 4) >= 0xE38E38E38E38E3)
          v132 = 0x1C71C71C71C71C7;
        else
          v132 = v131;
        v269 = &v260;
        if (v132)
          v132 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v132);
        else
          v133 = 0;
        __p.__r_.__value_.__r.__words[0] = v132;
        __p.__r_.__value_.__l.__size_ = v132 + 144 * v130;
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        v268 = v132 + 144 * v133;
        std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__p.__r_.__value_.__l.__size_, (uint64_t)v250);
        __p.__r_.__value_.__r.__words[2] += 144;
        std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v258, &__p);
        v129 = v259;
        std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__p);
        goto LABEL_176;
      }
LABEL_390:
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    case 0xE:
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("ClampedReLU"), CFSTR("Type"));
      v34 = v253[0];
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v10 + 360), v253[0]))
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v35 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v10 + 352), v34, (uint64_t)&std::piecewise_construct, (__int128 **)&__str);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)(v35 + 56);
        v268 = 0;
        v269 = 0;
        __p.__r_.__value_.__r.__words[2] = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p.__r_.__value_.__r.__words[2], *((const void **)v35 + 9), *((_QWORD *)v35 + 10), (uint64_t)(*((_QWORD *)v35 + 10) - *((_QWORD *)v35 + 9)) >> 2);
        v36 = *(float *)&__p.__r_.__value_.__l.__data_;
        if (__p.__r_.__value_.__r.__words[2])
        {
          v268 = __p.__r_.__value_.__r.__words[2];
          operator delete((void *)__p.__r_.__value_.__r.__words[2]);
        }
      }
      else
      {
        v36 = 1.0;
      }
      _S0 = v36 * *((float *)this + 77);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
      v93 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v93, CFSTR("ReluMin"));

      _S0 = v36 * *((float *)this + 78);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v68, CFSTR("ReluMax"));
      goto LABEL_77;
    case 0x13:
    case 0x15:
    case 0x16:
      v25 = CFSTR("GELU");
      goto LABEL_47;
    case 0x17:
      v40 = v256;
      v256 = CFSTR("NeuronCustom");

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 0);
      v41 = (NSNumber *)objc_claimAutoreleasedReturnValue();
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("XSatLeft");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 4294951424);
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v42;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      __str.__r_.__value_.__l.__size_ = (std::string::size_type)CFSTR("YSatLeft");
      __str.__r_.__value_.__r.__words[2] = (std::string::size_type)CFSTR("SlopeLeft");
      __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v41;
      *(_QWORD *)&v279 = CFSTR("XLeft");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 4294950912);
      v43 = (void *)objc_claimAutoreleasedReturnValue();
      v268 = (unint64_t)v43;
      *((_QWORD *)&v279 + 1) = CFSTR("YIntercept");
      constant_array(33, v41);
      v44 = (unint64_t *)objc_claimAutoreleasedReturnValue();
      v269 = v44;
      v280 = CFSTR("Slope");
      constant_array(32, v41);
      v45 = (void *)objc_claimAutoreleasedReturnValue();
      v270 = v45;
      v271.__begin_ = (std::vector<std::string>::pointer)MEMORY[0x1E0C9AAA0];
      *(_QWORD *)&v281 = CFSTR("AntiSymmetric");
      *((_QWORD *)&v281 + 1) = CFSTR("XRight");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 4294949888);
      v46 = (std::string *)objc_claimAutoreleasedReturnValue();
      v271.__end_ = v46;
      v271.__end_cap_.__value_ = (std::string *)v41;
      v282 = CFSTR("XSatRight");
      v283 = CFSTR("YSatRight");
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 15360);
      v47 = (void *)objc_claimAutoreleasedReturnValue();
      v284 = CFSTR("SlopeRight");
      v272 = v47;
      v273 = v41;
      objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &__p, &__str, 11);
      v48 = (void *)objc_claimAutoreleasedReturnValue();

      v49 = (void *)objc_msgSend(v48, "mutableCopy");
      v50 = v257[0];
      v257[0] = v49;

      Espresso::ANECompilerEngine::compiler::add_unit(a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)v250);
      goto LABEL_107;
    case 0x19:
      goto LABEL_47;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
  }
}

void sub_1913F47E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,char a62,uint64_t a63)
{
  char a64;
  uint64_t a66;
  void *v66;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a66);
  if (a38 < 0)
    operator delete(__p);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a39);
  a39 = (uint64_t)&a57;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a60);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a62);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a64);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::activation_kernel *>(_QWORD *a1, _BYTE *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  _WORD *v31;
  int v32;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  _WORD *v47;
  int v48;
  int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t weights_file_index;
  void *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  const void **v79;
  uint64_t v80;
  char v81;
  std::string::size_type v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  const std::string::value_type *v87;
  __int128 v88;
  __CFString *v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int *v112;
  int v113;
  uint64_t i;
  float v115;
  int v116;
  _WORD *v117;
  int v118;
  std::runtime_error *exception;
  int *v121;
  uint64_t j;
  int v123;
  float v124;
  float *v125;
  unsigned int v126;
  unsigned int v127;
  float v128;
  Espresso *v129;
  const char *v130;
  float v131;
  NSObject *v133;
  double v134;
  uint64_t v135;
  _WORD *v136;
  int v137;
  _QWORD v140[2];
  __int128 v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144[2];
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  char v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  _BYTE buf[18];
  __int16 v166;
  int v167;
  __int16 v168;
  double v169;
  std::vector<std::string> v170;
  void *__p;
  char v172;
  id v173;
  __CFString *v174;
  id v175;
  std::string __str;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v155);
  v162 = 0;
  v163 = 0;
  v164 = 0x100000000;
  v10 = a1[57];
  v9 = (std::__shared_weak_count *)a1[58];
  v153 = v10;
  v154 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v10 && !*(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[49] + 104))(a1 + 49) + 40))
  {
    v13 = *(float *)(*(_QWORD *)a4 + 112);
    v145 = v10;
    v146 = v9;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (std::__shared_weak_count *)a1[60];
    v144[0] = a1[59];
    v144[1] = (uint64_t)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v145, v144, (uint64_t)&v147, v13);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = v146;
    if (v146)
    {
      v22 = (unint64_t *)&v146->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v153;
    v25 = *(unsigned int *)(v153 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v142, 2 * v25, 1, 1, 1);
    v26 = (int)v25;
    v141 = 0uLL;
    v27 = v25;
    v28 = a1[59];
    if (v28)
      v27 = *(_DWORD *)(v28 + 8);
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v25);
      v112 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      v113 = v25 - 1;
      if ((int)v25 >= 1)
      {
        for (i = 0; i != v25; ++i)
        {
          v115 = *(float *)(*(_QWORD *)(v24 + 16) + i * 4);
          *(float *)&v116 = ldexp(1.0, -v151) * v115;
          v112[i] = v116;
        }
      }
      if ((_DWORD)v25)
      {
        v117 = *(_WORD **)(v142 + 16);
        do
        {
          v118 = *v112++;
          _S0 = v118;
          __asm { FCVT            H0, S0 }
          *v117++ = _S0;
          --v26;
        }
        while (v26);
      }
      v140[0] = 0;
      v140[1] = 0;
      if (a1[59])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v140, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v141, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v121 = *(int **)(v140[0] + 16);
        if (v27 >= 1)
        {
          for (j = 0; j != v27; ++j)
          {
            if (v113 >= (int)j)
              v123 = j;
            else
              v123 = v113;
            v124 = *(float *)(*(_QWORD *)(v149 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v147 + 16) + 4 * v123);
            v125 = (float *)&v121[j];
            *v125 = v124;
            v127 = v151;
            v126 = v152;
            v128 = ldexp(1.0, v152 - v151) * v124;
            *v125 = v128;
            v131 = ldexp(1.0, v127 - v126) * v128;
            if (v131 < -127.0 || v131 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v129, v130);
              v133 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
              {
                v134 = *(float *)&v121[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v131;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v152;
                v166 = 1024;
                v167 = v151;
                v168 = 2048;
                v169 = v134;
                _os_log_error_impl(&dword_190DAF000, v133, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v27)
        {
          v135 = v27;
          v136 = *(_WORD **)(v141 + 16);
          do
          {
            v137 = *v121++;
            _S0 = v137;
            __asm { FCVT            H0, S0 }
            *v136++ = _S0;
            --v135;
          }
          while (v135);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v29 = v152;
    if ((_DWORD)v25)
    {
      v30 = *(int **)(v147 + 16);
      v31 = *(_WORD **)(v142 + 16);
      do
      {
        v32 = *v30++;
        _S0 = v32;
        __asm { FCVT            H0, S0 }
        *v31++ = _S0;
        --v26;
      }
      while (v26);
    }
    if (v28)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v27, 1, 1, 1);
      v38 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v141 = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v27)
      {
        v45 = v27;
        v46 = *(int **)(v149 + 16);
        v47 = *(_WORD **)(v141 + 16);
        do
        {
          v48 = *v46++;
          _S0 = v48;
          __asm { FCVT            H0, S0 }
          *v47++ = _S0;
          --v45;
        }
        while (v45);
      }
    }
    v50 = a2[552];
    v51 = v142;
    v52 = v143;
    if (v143)
    {
      v53 = (unint64_t *)&v143->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v51 + 16), *(int *)(v51 + 8));
    if (v52)
    {
      v56 = (unint64_t *)&v52->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v58 = (void *)objc_opt_new();
    if (a5 && a2[121])
    {
      v59 = *(id *)(*a5 + 128);

      v58 = v59;
    }
    v60 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v61, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v62, CFSTR("ScaleOffset"));

    v63 = (void *)MEMORY[0x1E0CB37E8];
    if (v50)
      weights_file_index = 0;
    else
    objc_msgSend(v63, "numberWithUnsignedLong:", weights_file_index);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v65, CFSTR("ScaleIndex"));

    objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v151);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v66, CFSTR("ScaleShift"));

    if (a1[59])
    {
      if (*((_QWORD *)&v141 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v141 + 16), *(int *)(v141 + 8));
      if (*((_QWORD *)&v141 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1[59] + 8));
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v72, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v73, CFSTR("BiasOffset"));

      v74 = (void *)MEMORY[0x1E0CB37E8];
      if (v50)
        v75 = 0;
      else
      objc_msgSend(v74, "numberWithUnsignedLong:", v75);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v76, CFSTR("BiasIndex"));

      objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "setObject:forKeyedSubscript:", v77, CFSTR("BiasShift"));

    }
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v78 = a5[1];
    if (v78 == *a5)
      goto LABEL_93;
    v79 = (const void **)(v78 - 144);
    v80 = *(unsigned __int8 *)(v78 - 121);
    v81 = v80;
    v82 = *(_QWORD *)(v78 - 136);
    if ((v80 & 0x80u) == 0)
      v83 = *(unsigned __int8 *)(v78 - 121);
    else
      v83 = *(_QWORD *)(v78 - 136);
    v84 = HIBYTE(v167);
    if (v167 < 0)
      v84 = *(_QWORD *)&buf[8];
    if (v83 != v84)
      goto LABEL_87;
    if (v167 >= 0)
      v85 = buf;
    else
      v85 = *(unsigned __int8 **)buf;
    if ((char)v80 < 0)
    {
      v87 = (const std::string::value_type *)*v79;
      if (memcmp(*v79, v85, *(_QWORD *)(v78 - 136)))
        goto LABEL_90;
    }
    else if ((_BYTE)v80)
    {
      v86 = (unsigned __int8 *)(v78 - 144);
      while (*v86 == *v85)
      {
        ++v86;
        ++v85;
        if (!--v80)
          goto LABEL_86;
      }
      goto LABEL_87;
    }
LABEL_86:
    std::string::append((std::string *)(v78 - 144), "__@pre_scale_bias");
    v81 = *(_BYTE *)(v78 - 121);
LABEL_87:
    if ((v81 & 0x80) == 0)
    {
      v88 = *(_OWORD *)v79;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v88;
      goto LABEL_91;
    }
    v87 = *(const std::string::value_type **)(v78 - 144);
    v82 = *(_QWORD *)(v78 - 136);
LABEL_90:
    std::string::__init_copy_ctor_external(&__str, v87, v82);
LABEL_91:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v170, &__str, &v177, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_93:
    v89 = v174;
    v174 = CFSTR("GOC");

    objc_storeStrong(&v175, v58);
    if (a2[121])
      v90 = a5 != 0;
    else
      v90 = 0;
    if (!v90)
    {
      if (a5)
      {
        v91 = a5[2];
        v92 = a5[1];
        if (v92 >= v91)
        {
          v94 = 0x8E38E38E38E38E39 * ((uint64_t)(v92 - *a5) >> 4);
          if (v94 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v95 = 0x8E38E38E38E38E39 * ((uint64_t)(v91 - *a5) >> 4);
          v96 = 2 * v95;
          if (2 * v95 <= v94 + 1)
            v96 = v94 + 1;
          if (v95 >= 0xE38E38E38E38E3)
            v97 = 0x1C71C71C71C71C7;
          else
            v97 = v96;
          *((_QWORD *)&v177 + 1) = a5 + 2;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
          else
            v98 = 0;
          __str.__r_.__value_.__r.__words[0] = v97;
          __str.__r_.__value_.__l.__size_ = v97 + 144 * v94;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(_QWORD *)&v177 = v97 + 144 * v98;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          v93 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          v93 = v92 + 144;
          a5[1] = v92 + 144;
        }
        a5[1] = v93;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v172 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v167) < 0)
      operator delete(*(void **)buf);

    if (*((_QWORD *)&v141 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
      }
    }
    v101 = v143;
    if (v143)
    {
      v102 = (unint64_t *)&v143->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = v150;
    if (v150)
    {
      v105 = (unint64_t *)&v150->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = v148;
    if (v148)
    {
      v108 = (unint64_t *)&v148->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v9 = v154;
  }
  if (v9)
  {
    v110 = (unint64_t *)&v9->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v160 < 0)
    operator delete(v159);
  *(_QWORD *)buf = &v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v156 < 0)
    operator delete(v155);
}

void sub_1913F5924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,id a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel36compile_with_lut_polymorphism_optionEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke(uint64_t a1, float result)
{
  double v2;

  if (result <= 0.0)
  {
    v2 = *(float *)(*(_QWORD *)(a1 + 32) + 308);
    return (expf(result) + -1.0) * v2;
  }
  return result;
}

id constant_array(uint64_t a1, NSNumber *a2)
{
  NSNumber *v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(MEMORY[0x1E0C99DE8], "arrayWithCapacity:", a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = 0;
  do
    objc_msgSend(v4, "setObject:atIndexedSubscript:", v3, v5++);
  while (a1 != v5);

  return v4;
}

void sub_1913F5B5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,Espresso::blob<unsigned char,1>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  void *result;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = &off_1E2DA1250;
  *(_QWORD *)v10 = &off_1E2DBED50;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(a3 * (uint64_t)a2 * a4 * a5));
  *((_QWORD *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_1913F5C24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel36compile_with_lut_polymorphism_optionEPNS0_8compilerERKNS2_18layer_graph_info_tEb_block_invoke_2(float a1)
{
  float result;

  result = (float)(a1 * 0.2) + 0.5;
  if (result < 0.0)
    result = 0.0;
  if (result > 1.0)
    return 1.0;
  return result;
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel22add_quantized_tanh_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  float v4;
  double v5;
  float v6;

  v4 = *(float *)(a1 + 32);
  v5 = expf(v4 * a2);
  v6 = expf(-(float)(v4 * a2));
  return (v5 - v6) / (v5 + v6) * *(float *)(a1 + 36);
}

float ___ZN8Espresso17ANECompilerEngine17activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  return *(float *)(a1 + 36) * (float)(1.0 / (float)(expf(-(float)(*(float *)(a1 + 32) * a2)) + 1.0));
}

void Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANECompilerEngine::mix_activation_kernel *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E2D7A1C8;
  v2 = (void **)((char *)this + 392);
  *((_QWORD *)this + 49) = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  *(_QWORD *)this = &off_1E2D770D8;
  *((_QWORD *)this + 49) = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
}

{
  void **v2;

  *(_QWORD *)this = &off_1E2D7A1C8;
  v2 = (void **)((char *)this + 392);
  *((_QWORD *)this + 49) = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 624);
  *(_QWORD *)this = &off_1E2D770D8;
  *((_QWORD *)this + 49) = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 608);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel(v2);
  Espresso::generic_activation_kernel::~generic_activation_kernel(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::ANECompilerEngine::mix_activation_kernel::compile(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  Espresso::ANECompilerEngine *v19;
  NSString *v20;
  __CFString *v21;
  uint64_t v22;
  unsigned int v23;
  std::string *v24;
  __CFString *v25;
  void *v26;
  uint64_t v32;
  __CFString *v33;
  _QWORD *v34;
  char *v35;
  float v36;
  std::string *v37;
  const __CFString *v38;
  void *v40;
  std::string *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  std::string *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  const char *v65;
  id obj;
  _QWORD v67[2];
  uint64_t v68;
  std::__shared_weak_count *v69;
  void *__p[2];
  char v71;
  std::string v72;
  void *v73[2];
  char v74;
  uint64_t v75;
  _QWORD *v76[6];
  char v77;
  id v78;
  __CFString *v79;
  id v80;
  uint64_t v81;
  std::string *v82;
  _QWORD v83[2];
  std::__shared_weak_count *v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  __int128 v89;
  char *v90;
  char *v91;
  _QWORD *v92;

  v87 = 0;
  v88 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4
    || (v7 = std::__shared_weak_count::lock(v4), (v88 = v7) == 0)
    || (v8 = *((_QWORD *)a2 + 1), (v87 = v8) == 0))
  {
    v65 = "Inconsistent state: null network";
    goto LABEL_107;
  }
  if (!*(_QWORD *)(v8 + 576))
  {
    v65 = "Inconsistent state: blob_storage";
LABEL_107:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v65);
  }
  v9 = v7;
  v73[0] = a3[6];
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)v73[0], (__int128 **)v73);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v85 = *((_QWORD *)v10 + 5);
  v86 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v73[0] = a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8 + 136, (unsigned __int8 *)a3, (__int128 **)v73);
  v15 = *((_QWORD *)v14 + 5);
  v16 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v83[1] = v15;
  v84 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  Espresso::ANECompilerEngine::ane_arch_allow_network_override(v8 + 472);
  v19 = (Espresso::ANECompilerEngine *)objc_claimAutoreleasedReturnValue();
  if (Espresso::ANECompilerEngine::is_mix(v19, v20))
  {
    Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option(this, a2, a3, 0);
    goto LABEL_83;
  }
  v81 = 0;
  v82 = 0;
  v83[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v73, a3);
  obj = (id)objc_opt_new();
  v21 = v79;
  v79 = CFSTR("Neuron");

  std::string::basic_string[abi:ne180100]<0>(&v89, "experimental.ane.use_high_precision_activations");
  std::string::basic_string[abi:ne180100]<0>(__p, "0");
  Espresso::map_const_get<std::map<std::string,std::string>>(v8 + 472, (uint64_t)&v89, (uint64_t)__p, &v72);
  if (v71 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v90) < 0)
    operator delete((void *)v89);
  v22 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392);
  v23 = *((_DWORD *)this + 76);
  switch(v23)
  {
    case 1u:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v72.__r_.__value_.__l.__size_ == 1)
        {
          v24 = (std::string *)v72.__r_.__value_.__r.__words[0];
LABEL_36:
          v32 = 53;
          if (!*(_BYTE *)(v22 + 42) && v24->__r_.__value_.__s.__data_[0] == 48)
          {
            v38 = CFSTR("Tanh");
            goto LABEL_103;
          }
LABEL_40:
          (*(void (**)(Espresso::ANECompilerEngine::mix_activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **))(*(_QWORD *)this + 8 * v32))(this, a2, a3);
          goto LABEL_76;
        }
      }
      else if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) == 1)
      {
        v24 = &v72;
        goto LABEL_36;
      }
      v32 = 53;
      goto LABEL_40;
    case 2u:
    case 4u:
    case 5u:
    case 6u:
      goto LABEL_45;
    case 3u:
      if (*(_BYTE *)(v22 + 42))
      {
        v32 = 51;
        goto LABEL_40;
      }
      if ((SHIBYTE(v72.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) == 1)
        {
          v37 = &v72;
          goto LABEL_101;
        }
LABEL_104:
        (*(void (**)(Espresso::ANECompilerEngine::mix_activation_kernel *, Espresso::ANECompilerEngine::compiler *, void **, uint64_t))(*(_QWORD *)this + 432))(this, a2, a3, 1);
        goto LABEL_76;
      }
      if (v72.__r_.__value_.__l.__size_ != 1)
        goto LABEL_104;
      v37 = (std::string *)v72.__r_.__value_.__r.__words[0];
LABEL_101:
      if (v37->__r_.__value_.__s.__data_[0] != 48)
        goto LABEL_104;
      v38 = CFSTR("SigmoidHighPrecision");
LABEL_103:
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v38, CFSTR("Type"));
LABEL_44:
      v23 = *((_DWORD *)this + 76);
LABEL_45:
      if (v23 <= 0x17 && ((1 << v23) & 0x80018A) != 0)
      {
        objc_storeStrong(&v80, obj);
        v42 = v82;
        if ((unint64_t)v82 >= v83[0])
        {
          v43 = 0x8E38E38E38E38E39 * (((uint64_t)v82 - v81) >> 4);
          if (v43 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v44 = 0x1C71C71C71C71C72 * ((v83[0] - v81) >> 4);
          if (v44 <= v43 + 1)
            v44 = v43 + 1;
          if (0x8E38E38E38E38E39 * ((v83[0] - v81) >> 4) >= 0xE38E38E38E38E3)
            v45 = 0x1C71C71C71C71C7;
          else
            v45 = v44;
          v92 = v83;
          if (v45)
            v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v45);
          else
            v46 = 0;
          *(_QWORD *)&v89 = v45;
          *((_QWORD *)&v89 + 1) = v45 + 144 * v43;
          v90 = (char *)*((_QWORD *)&v89 + 1);
          v91 = (char *)(v45 + 144 * v46);
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(*((std::string **)&v89 + 1), (uint64_t)v73);
          v90 += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v81, &v89);
          v47 = v82;
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v89);
          v9 = v88;
          v82 = v47;
          v68 = v8;
          v69 = v88;
          if (!v88)
            goto LABEL_62;
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v82, (uint64_t)v73);
          v82 = v42 + 6;
          v68 = v8;
          v69 = v9;
        }
        v48 = (unint64_t *)&v9->__shared_owners_;
        do
          v49 = __ldxr(v48);
        while (__stxr(v49 + 1, v48));
LABEL_62:
        v67[0] = v15;
        v67[1] = v16;
        if (v16)
        {
          v50 = (unint64_t *)&v16->__shared_owners_;
          do
            v51 = __ldxr(v50);
          while (__stxr(v51 + 1, v50));
        }
        Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, a3, (uint64_t)v67, &v81);
        if (v16)
        {
          v52 = (unint64_t *)&v16->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
        v54 = v69;
        if (v69)
        {
          v55 = (unint64_t *)&v69->__shared_owners_;
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
          if (!v56)
          {
            ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
            std::__shared_weak_count::__release_weak(v54);
          }
        }
        (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*((_QWORD *)this + 49)
                                                                                           + 32))((char *)this + 392, a2, &v81);
        goto LABEL_76;
      }
      Espresso::ANECompilerEngine::activation_kernel::compile_with_lut_polymorphism_option(this, a2, a3, 1);
LABEL_76:
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);

      if (v77 < 0)
        operator delete(v76[4]);
      *(_QWORD *)&v89 = v76;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      *(_QWORD *)&v89 = &v75;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
      if (v74 < 0)
        operator delete(v73[0]);
      v73[0] = &v81;
      std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v73);
      v16 = v84;
LABEL_83:

      if (v16)
      {
        v57 = (unint64_t *)&v16->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v59 = v86;
      if (v86)
      {
        v60 = (unint64_t *)&v86->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
        }
      }
      v62 = v88;
      if (v88)
      {
        v63 = (unint64_t *)&v88->__shared_owners_;
        do
          v64 = __ldaxr(v63);
        while (__stlxr(v64 - 1, v63));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
          std::__shared_weak_count::__release_weak(v62);
        }
      }
      return;
    case 7u:
      v33 = v79;
      v79 = CFSTR("NeuronCustom");

      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "addEntriesFromDictionary:", v26);
      goto LABEL_43;
    case 8u:
      objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("ELU"), CFSTR("Type"));
      _S0 = *((_DWORD *)this + 77);
      __asm { FCVT            H0, S0 }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", (__int16)_S0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(obj, "setObject:forKeyedSubscript:", v26, CFSTR("EluAlpha"));
      goto LABEL_43;
    default:
      if (v23 == 14)
      {
        objc_msgSend(obj, "setObject:forKeyedSubscript:", CFSTR("ClampedReLU"), CFSTR("Type"));
        v34 = v76[0];
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v8 + 360), v76[0]))
        {
          __p[0] = v34;
          v35 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v8 + 352), v34, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          v89 = *(_OWORD *)(v35 + 56);
          v91 = 0;
          v92 = 0;
          v90 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v90, *((const void **)v35 + 9), *((_QWORD *)v35 + 10), (uint64_t)(*((_QWORD *)v35 + 10) - *((_QWORD *)v35 + 9)) >> 2);
          v36 = *(float *)&v89;
          if (v90)
          {
            v91 = v90;
            operator delete(v90);
          }
        }
        else
        {
          v36 = 1.0;
        }
        _S0 = v36 * *((float *)this + 77);
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
        v40 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v40, CFSTR("ReluMin"));

        _S0 = v36 * *((float *)this + 78);
        __asm { FCVT            H0, S0 }
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "setObject:forKeyedSubscript:", v26, CFSTR("ReluMax"));
      }
      else
      {
        if (v23 != 23)
          goto LABEL_45;
        v25 = v79;
        v79 = CFSTR("NeuronCustom");

        v26 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(obj, "addEntriesFromDictionary:", v26);
      }
LABEL_43:

      goto LABEL_44;
  }
}

void sub_1913F6680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;

  if (a26 < 0)
    operator delete(__p);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a27);
  a27 = v28 - 224;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 200);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 168);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_activation_kernel::add_quantized_sigmoid_lut(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __CFString *v17;
  char *v18;
  float v19;
  float v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  float v33;
  float v34;
  uint64_t v35;
  void *v36;
  std::string *v37;
  std::string *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  const char *v62;
  _QWORD v63[3];
  std::__shared_weak_count *v64;
  _QWORD v65[4];
  float v66;
  float v67;
  void *v68[2];
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *__p;
  char v73;
  id v74;
  __CFString *v75;
  id v76;
  uint64_t v77;
  std::string *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void **v86;
  std::string *v87;
  std::string *v88;
  unint64_t v89;
  unint64_t *v90;

  v84 = 0;
  v85 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v85 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v84 = v7) == 0))
  {
    v62 = "Inconsistent state: null network";
    goto LABEL_85;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v62 = "Inconsistent state: blob_storage";
LABEL_85:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v62);
  }
  v8 = v7 + 136;
  v68[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v68[0], (__int128 **)v68);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v82 = *((_QWORD *)v9 + 5);
  v83 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v68[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v68);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v80 = *((_QWORD *)v13 + 5);
  v81 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v68, a3);
  v17 = v75;
  v75 = CFSTR("NeuronCustom");

  v18 = (char *)this + 392;
  v19 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 44);
  v20 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 48);
  if (v20 == 1.0 && v19 == 1.0)
  {
    v22 = *((_QWORD *)this + 57);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v20 = 1.0;
    if (v22)
    {
      v26 = *(float **)(v22 + 16);
      v27 = *v26;
      v28 = *(int *)(v22 + 8);
      if (!(_DWORD)v28)
      {
        v29 = 0;
LABEL_27:
        v20 = v27;
        if (!v23)
          goto LABEL_31;
        goto LABEL_28;
      }
      while (v27 == *v26)
      {
        ++v26;
        if (!--v28)
        {
          v29 = 1;
          goto LABEL_27;
        }
      }
    }
    v29 = 0;
    if (!v23)
      goto LABEL_31;
LABEL_28:
    v30 = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v29 & 1) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_31:
    if (!v29)
      goto LABEL_35;
LABEL_34:
    *(_BYTE *)((*(uint64_t (**)(char *))(*(_QWORD *)v18 + 104))((char *)this + 392) + 40) = 1;
  }
LABEL_35:
  v65[0] = MEMORY[0x1E0C809B0];
  v65[1] = 3221225472;
  v65[2] = ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v65[3] = &__block_descriptor_40_e8_f12__0f8l;
  v66 = v19;
  v67 = v20;
  v32 = (void *)MEMORY[0x19401D648](v65);
  v33 = -5.0 / v19;
  v34 = 5.0 / v19;
  LODWORD(v35) = vcvtms_s32_f32(log2f(16.0 / v34));
  Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(v35, 1, 0, 0, v32, v33, v34, v20 * 0.0, v20, v20 * 0.0113, v20 * 0.0113, v20 * 0.063186, v20 * 0.9368);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(&v76, v36);
  v37 = v78;
  if ((unint64_t)v78 >= v79)
  {
    v39 = 0x8E38E38E38E38E39 * (((uint64_t)v78 - v77) >> 4);
    if (v39 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v40 = 0x1C71C71C71C71C72 * ((uint64_t)(v79 - v77) >> 4);
    if (v40 <= v39 + 1)
      v40 = v39 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v79 - v77) >> 4) >= 0xE38E38E38E38E3)
      v41 = 0x1C71C71C71C71C7;
    else
      v41 = v40;
    v90 = &v79;
    if (v41)
      v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v41);
    else
      v42 = 0;
    v86 = (void **)v41;
    v87 = (std::string *)(v41 + 144 * v39);
    v88 = v87;
    v89 = v41 + 144 * v42;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v87, (uint64_t)v68);
    v88 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v77, &v86);
    v38 = v78;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v86);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v78, (uint64_t)v68);
    v38 = v37 + 6;
  }
  v78 = v38;
  v63[2] = v84;
  v64 = v85;
  if (v85)
  {
    v43 = (unint64_t *)&v85->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = v81;
  v63[0] = v80;
  v63[1] = v81;
  if (v81)
  {
    v46 = (unint64_t *)&v81->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, a3, (uint64_t)v63, &v77);
  if (v45)
  {
    v48 = (unint64_t *)&v45->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v50 = v64;
  if (v64)
  {
    v51 = (unint64_t *)&v64->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v18 + 32))((char *)this + 392, a2, &v77);

  if (v73 < 0)
    operator delete(__p);
  v86 = (void **)&v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v86);
  v86 = (void **)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v86);
  if (v69 < 0)
    operator delete(v68[0]);
  v68[0] = &v77;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  v53 = v81;
  if (v81)
  {
    v54 = (unint64_t *)&v81->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v83;
  if (v83)
  {
    v57 = (unint64_t *)&v83->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v85;
  if (v85)
  {
    v60 = (unint64_t *)&v85->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1913F6D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v21 - 136);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a19);
  a19 = (void **)(v21 - 208);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 152);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_tanh_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __CFString *v17;
  char *v18;
  float v19;
  float v20;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  float *v26;
  float v27;
  uint64_t v28;
  int v29;
  unint64_t *v30;
  unint64_t v31;
  void *v32;
  float v33;
  float v34;
  uint64_t v35;
  void *v36;
  std::string *v37;
  std::string *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  const char *v62;
  _QWORD v63[3];
  std::__shared_weak_count *v64;
  _QWORD v65[4];
  float v66;
  float v67;
  void *v68[2];
  char v69;
  uint64_t v70;
  uint64_t v71;
  void *__p;
  char v73;
  id v74;
  __CFString *v75;
  id v76;
  uint64_t v77;
  std::string *v78;
  unint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void **v86;
  std::string *v87;
  std::string *v88;
  unint64_t v89;
  unint64_t *v90;

  v84 = 0;
  v85 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v4 || (v85 = std::__shared_weak_count::lock(v4)) == 0 || (v7 = *((_QWORD *)a2 + 1), (v84 = v7) == 0))
  {
    v62 = "Inconsistent state: null network";
    goto LABEL_85;
  }
  if (!*(_QWORD *)(v7 + 576))
  {
    v62 = "Inconsistent state: blob_storage";
LABEL_85:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v62);
  }
  v8 = v7 + 136;
  v68[0] = a3[6];
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7 + 136, (unsigned __int8 *)v68[0], (__int128 **)v68);
  v10 = (std::__shared_weak_count *)*((_QWORD *)v9 + 6);
  v82 = *((_QWORD *)v9 + 5);
  v83 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v68[0] = a3;
  v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (unsigned __int8 *)a3, (__int128 **)v68);
  v14 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
  v80 = *((_QWORD *)v13 + 5);
  v81 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v77 = 0;
  v78 = 0;
  v79 = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(v68, a3);
  v17 = v75;
  v75 = CFSTR("NeuronCustom");

  v18 = (char *)this + 392;
  v19 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 44);
  v20 = *(float *)((*(uint64_t (**)(char *))(*((_QWORD *)this + 49) + 104))((char *)this + 392) + 48);
  if (v20 == 1.0 && v19 == 1.0)
  {
    v22 = *((_QWORD *)this + 57);
    v23 = (std::__shared_weak_count *)*((_QWORD *)this + 58);
    if (v23)
    {
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
    v20 = 1.0;
    if (v22)
    {
      v26 = *(float **)(v22 + 16);
      v27 = *v26;
      v28 = *(int *)(v22 + 8);
      if (!(_DWORD)v28)
      {
        v29 = 0;
LABEL_27:
        v20 = v27;
        if (!v23)
          goto LABEL_31;
        goto LABEL_28;
      }
      while (v27 == *v26)
      {
        ++v26;
        if (!--v28)
        {
          v29 = 1;
          goto LABEL_27;
        }
      }
    }
    v29 = 0;
    if (!v23)
      goto LABEL_31;
LABEL_28:
    v30 = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
      if ((v29 & 1) == 0)
        goto LABEL_35;
      goto LABEL_34;
    }
LABEL_31:
    if (!v29)
      goto LABEL_35;
LABEL_34:
    *(_BYTE *)((*(uint64_t (**)(char *))(*(_QWORD *)v18 + 104))((char *)this + 392) + 40) = 1;
  }
LABEL_35:
  v65[0] = MEMORY[0x1E0C809B0];
  v65[1] = 3221225472;
  v65[2] = ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel29add_high_precision_tanh_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke;
  v65[3] = &__block_descriptor_40_e8_f12__0f8l;
  v66 = v19;
  v67 = v20;
  v32 = (void *)MEMORY[0x19401D648](v65);
  v33 = 0.0 / v19;
  v34 = 4.0 / v19;
  LODWORD(v35) = vcvtms_s32_f32(log2f(32.0 / v34));
  Espresso::ANECompilerEngine::generate_mix_custom_neuron_params(v35, 0, 1, 1, v32, v33, v34, v20 * 0.0, v20, v20, v20 * 0.0, v20 * 0.0, v20);
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(&v76, v36);
  v37 = v78;
  if ((unint64_t)v78 >= v79)
  {
    v39 = 0x8E38E38E38E38E39 * (((uint64_t)v78 - v77) >> 4);
    if (v39 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v40 = 0x1C71C71C71C71C72 * ((uint64_t)(v79 - v77) >> 4);
    if (v40 <= v39 + 1)
      v40 = v39 + 1;
    if (0x8E38E38E38E38E39 * ((uint64_t)(v79 - v77) >> 4) >= 0xE38E38E38E38E3)
      v41 = 0x1C71C71C71C71C7;
    else
      v41 = v40;
    v90 = &v79;
    if (v41)
      v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v41);
    else
      v42 = 0;
    v86 = (void **)v41;
    v87 = (std::string *)(v41 + 144 * v39);
    v88 = v87;
    v89 = v41 + 144 * v42;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v87, (uint64_t)v68);
    v88 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v77, &v86);
    v38 = v78;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v86);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v78, (uint64_t)v68);
    v38 = v37 + 6;
  }
  v78 = v38;
  v63[2] = v84;
  v64 = v85;
  if (v85)
  {
    v43 = (unint64_t *)&v85->__shared_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
  v45 = v81;
  v63[0] = v80;
  v63[1] = v81;
  if (v81)
  {
    v46 = (unint64_t *)&v81->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, a3, (uint64_t)v63, &v77);
  if (v45)
  {
    v48 = (unint64_t *)&v45->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v50 = v64;
  if (v64)
  {
    v51 = (unint64_t *)&v64->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v18 + 32))((char *)this + 392, a2, &v77);

  if (v73 < 0)
    operator delete(__p);
  v86 = (void **)&v71;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v86);
  v86 = (void **)&v70;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v86);
  if (v69 < 0)
    operator delete(v68[0]);
  v68[0] = &v77;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v68);
  v53 = v81;
  if (v81)
  {
    v54 = (unint64_t *)&v81->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v83;
  if (v83)
  {
    v57 = (unint64_t *)&v83->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = v85;
  if (v85)
  {
    v60 = (unint64_t *)&v85->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
}

void sub_1913F73F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  void *v19;
  void *v20;
  uint64_t v21;

  std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer(v21 - 136);

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a19);
  a19 = (void **)(v21 - 208);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 184);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 168);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v21 - 152);
  _Unwind_Resume(a1);
}

void Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_sigmoid_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3, int a4)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  char *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  __CFString *v19;
  void *v20;
  std::string *v21;
  std::string *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string *i;
  __int128 v29;
  std::string *v30;
  void *v31;
  __CFString *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  void *v43;
  void *v45;
  std::string *v46;
  std::string *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  const char *v70;
  uint64_t v71;
  _QWORD v72[3];
  std::__shared_weak_count *v73;
  void *v74;
  std::string *v75;
  std::string *v76;
  _QWORD v77[3];
  std::string *v78;
  std::string *v79;
  unint64_t v80;
  void *__p;
  char v82;
  id v83;
  __CFString *v84;
  id v85;
  std::string v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  char v90;
  id v91;
  __CFString *v92;
  id v93;
  uint64_t v94;
  std::string *v95;
  _QWORD v96[2];
  std::__shared_weak_count *v97;
  uint64_t v98;
  std::__shared_weak_count *v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  char **v102;
  std::string *v103;
  std::string *v104;
  unint64_t v105;
  _QWORD *v106;

  v100 = 0;
  v101 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  if (!v5 || (v101 = std::__shared_weak_count::lock(v5)) == 0 || (v9 = *((_QWORD *)a2 + 1), (v100 = v9) == 0))
  {
    v70 = "Inconsistent state: null network";
    goto LABEL_96;
  }
  if (!*(_QWORD *)(v9 + 576))
  {
    v70 = "Inconsistent state: blob_storage";
LABEL_96:
    Espresso::throw_exception_selector<Espresso::invalid_state_error>(v70);
  }
  v86.__r_.__value_.__r.__words[0] = *((_QWORD *)a3 + 6);
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 136, (unsigned __int8 *)v86.__r_.__value_.__l.__data_, (__int128 **)&v86);
  v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 6);
  v98 = *((_QWORD *)v10 + 5);
  v99 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9 + 136, (unsigned __int8 *)a3, (__int128 **)&v86);
  v16 = *((_QWORD *)v14 + 5);
  v15 = (std::__shared_weak_count *)*((_QWORD *)v14 + 6);
  v96[1] = v16;
  v97 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v94 = 0;
  v95 = 0;
  v96[0] = 0;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)&v86.__r_.__value_.__l.__data_, (id *)a3);
  std::string::append(&v86, "_@pre_bias");
  v19 = v92;
  v92 = CFSTR("NeuronCustom");

  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_storeStrong(&v93, v20);
  v21 = v95;
  if ((unint64_t)v95 >= v96[0])
  {
    v23 = 0x8E38E38E38E38E39 * (((uint64_t)v95 - v94) >> 4);
    if (v23 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v24 = 0x1C71C71C71C71C72 * ((v96[0] - v94) >> 4);
    if (v24 <= v23 + 1)
      v24 = v23 + 1;
    if (0x8E38E38E38E38E39 * ((v96[0] - v94) >> 4) >= 0xE38E38E38E38E3)
      v25 = 0x1C71C71C71C71C7;
    else
      v25 = v24;
    v77[1] = v96;
    if (v25)
      v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v25);
    else
      v26 = 0;
    v74 = (void *)v25;
    v75 = (std::string *)(v25 + 144 * v23);
    v76 = v75;
    v77[0] = v25 + 144 * v26;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v75, (uint64_t)&v86);
    v76 = v75 + 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v94, &v74);
    v22 = v95;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v74);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v95, (uint64_t)&v86);
    v22 = v21 + 6;
  }
  v71 = v16;
  v95 = v22;
  Espresso::ANECompilerEngine::compiler::unit_t::unit_t(&v74, (id *)a3);
  v27 = v78;
  for (i = v79; i != v27; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0)
      operator delete(i[-1].__r_.__value_.__l.__data_);
  }
  v79 = v27;
  if ((unint64_t)v27 >= v80)
  {
    v30 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v78, (uint64_t)&v86);
  }
  else
  {
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v27, v86.__r_.__value_.__l.__data_, v86.__r_.__value_.__l.__size_);
    }
    else
    {
      v29 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
      v27->__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v29;
    }
    v30 = v27 + 1;
  }
  v79 = v30;
  v31 = (void *)objc_opt_new();
  objc_storeStrong(&v85, v31);
  v32 = v84;
  v84 = CFSTR("GOC");

  v33 = (char *)this + 392;
  v34 = *((_QWORD *)this + 57);
  if (v34)
  {
    if (a4)
    {
      v35 = *(int *)(v34 + 8);
      if ((_DWORD)v35)
      {
        v36 = *(float **)(v34 + 16);
        _S8 = *v36;
        while (_S8 == *v36)
        {
          ++v36;
          if (!--v35)
          {
            *(_BYTE *)((*(uint64_t (**)(char *))(*(_QWORD *)v33 + 104))((char *)this + 392) + 40) = 1;
            __asm { FCVT            H0, S8 }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", _H0);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "setObject:forKeyedSubscript:", v43, CFSTR("ScaleScalar"));

            _S0 = _S8 * 0.5;
            __asm { FCVT            H0, S0 }
            objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", SLOWORD(_S0));
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v31, "setObject:forKeyedSubscript:", v45, CFSTR("BiasScalar"));
            goto LABEL_42;
          }
        }
      }
    }
  }
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithShort:", 14336);
  v45 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v31, "setObject:forKeyedSubscript:", v45, CFSTR("BiasScalar"));
LABEL_42:

  v46 = v95;
  if ((unint64_t)v95 >= v96[0])
  {
    v48 = 0x8E38E38E38E38E39 * (((uint64_t)v95 - v94) >> 4);
    if (v48 + 1 > 0x1C71C71C71C71C7)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v49 = 0x1C71C71C71C71C72 * ((v96[0] - v94) >> 4);
    if (v49 <= v48 + 1)
      v49 = v48 + 1;
    if (0x8E38E38E38E38E39 * ((v96[0] - v94) >> 4) >= 0xE38E38E38E38E3)
      v50 = 0x1C71C71C71C71C7;
    else
      v50 = v49;
    v106 = v96;
    if (v50)
      v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v50);
    else
      v51 = 0;
    v102 = (char **)v50;
    v103 = (std::string *)(v50 + 144 * v48);
    v104 = v103;
    v105 = v50 + 144 * v51;
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v103, (uint64_t)&v74);
    v104 += 6;
    std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(&v94, &v102);
    v47 = v95;
    std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&v102);
  }
  else
  {
    std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>(v95, (uint64_t)&v74);
    v47 = v46 + 6;
  }
  v95 = v47;

  if (v82 < 0)
    operator delete(__p);
  v102 = (char **)&v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  v102 = (char **)v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v102);
  if (SHIBYTE(v76) < 0)
    operator delete(v74);
  v72[2] = v9;
  v73 = v101;
  if (v101)
  {
    v52 = (unint64_t *)&v101->__shared_owners_;
    do
      v53 = __ldxr(v52);
    while (__stxr(v53 + 1, v52));
  }
  v72[0] = v71;
  v72[1] = v15;
  if (v15)
  {
    v54 = (unint64_t *)&v15->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(this, a2, (id *)a3, (uint64_t)v72, &v94);
  if (v15)
  {
    v56 = (unint64_t *)&v15->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v58 = v73;
  if (v73)
  {
    v59 = (unint64_t *)&v73->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  (*(void (**)(char *, Espresso::ANECompilerEngine::compiler *, uint64_t *))(*(_QWORD *)v33 + 32))((char *)this + 392, a2, &v94);

  if (v90 < 0)
    operator delete(v89);
  v74 = &v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  v74 = &v87;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v74);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&v86);
  v61 = v97;
  if (v97)
  {
    v62 = (unint64_t *)&v97->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v99;
  if (v99)
  {
    v65 = (unint64_t *)&v99->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v101;
  if (v101)
  {
    v68 = (unint64_t *)&v101->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_1913F7C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34)
{
  void *v34;
  void *v35;
  uint64_t v36;

  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a16);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t((id *)&a34);
  a34 = (void **)(v36 - 216);
  std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__destroy_vector::operator()[abi:ne180100](&a34);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v36 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v36 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v36 - 160);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::compile(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_activation_kernel::compile((Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this - 392), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::~mix_activation_kernel(Espresso::ANECompilerEngine::mix_activation_kernel *this)
{
  Espresso::generic_activation_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this - 392);
  *((_QWORD *)this - 49) = &off_1E2D7A1C8;
  *(_QWORD *)this = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *(_QWORD *)v2 = &off_1E2D770D8;
  *(_QWORD *)this = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
}

{
  Espresso::generic_activation_kernel *v2;

  v2 = (Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this - 392);
  *((_QWORD *)this - 49) = &off_1E2D7A1C8;
  *(_QWORD *)this = &unk_1E2D7A390;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  *(_QWORD *)v2 = &off_1E2D770D8;
  *(_QWORD *)this = &unk_1E2D77290;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 216);
  Espresso::ANECompilerEngine::ane_kernel::~ane_kernel((void **)this);
  Espresso::generic_activation_kernel::~generic_activation_kernel(v2);
  JUMPOUT(0x19401CD90);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_tanh_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, void **a3)
{
  Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_tanh_units((Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this - 392), a2, a3);
}

void `non-virtual thunk to'Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_sigmoid_units(Espresso::ANECompilerEngine::mix_activation_kernel *this, Espresso::ANECompilerEngine::compiler *a2, const Espresso::ANECompilerEngine::compiler::layer_graph_info_t *a3, int a4)
{
  Espresso::ANECompilerEngine::mix_activation_kernel::add_high_precision_sigmoid_units((Espresso::ANECompilerEngine::mix_activation_kernel *)((char *)this - 392), a2, a3, a4);
}

float `anonymous namespace'::high_precision_sigmoid_function(_anonymous_namespace_ *this, float a2)
{
  return 1.0 / (expf(-a2) + 1.0) + -0.5;
}

void Espresso::ANECompilerEngine::add_ane_scale_bias_unit<Espresso::ANECompilerEngine::mix_activation_kernel *>(_QWORD *a1, _BYTE *a2, id *a3, uint64_t a4, uint64_t *a5)
{
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  float v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  int *v30;
  _WORD *v31;
  int v32;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  int *v46;
  _WORD *v47;
  int v48;
  int v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  void *v58;
  id v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t weights_file_index;
  void *v65;
  void *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  const void **v79;
  uint64_t v80;
  char v81;
  std::string::size_type v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  const std::string::value_type *v87;
  __int128 v88;
  __CFString *v89;
  BOOL v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  int *v112;
  int v113;
  uint64_t i;
  float v115;
  int v116;
  _WORD *v117;
  int v118;
  std::runtime_error *exception;
  int *v121;
  uint64_t j;
  int v123;
  float v124;
  float *v125;
  unsigned int v126;
  unsigned int v127;
  float v128;
  Espresso *v129;
  const char *v130;
  float v131;
  NSObject *v133;
  double v134;
  uint64_t v135;
  _WORD *v136;
  int v137;
  _QWORD v140[2];
  __int128 v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144[2];
  uint64_t v145;
  std::__shared_weak_count *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  std::__shared_weak_count *v154;
  void *v155;
  char v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  char v160;
  id v161;
  id v162;
  id v163;
  uint64_t v164;
  _BYTE buf[18];
  __int16 v166;
  int v167;
  __int16 v168;
  double v169;
  std::vector<std::string> v170;
  void *__p;
  char v172;
  id v173;
  __CFString *v174;
  id v175;
  std::string __str;
  __int128 v177;
  uint64_t v178;

  v178 = *MEMORY[0x1E0C80C00];
  Espresso::ANECompilerEngine::compiler::layer_graph_info_t::layer_graph_info_t((Espresso::ANECompilerEngine::compiler::layer_graph_info_t *)&v155);
  v162 = 0;
  v163 = 0;
  v164 = 0x100000000;
  v10 = a1[57];
  v9 = (std::__shared_weak_count *)a1[58];
  v153 = v10;
  v154 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v10 && !*(_BYTE *)((*(uint64_t (**)(_QWORD *))(a1[49] + 104))(a1 + 49) + 40))
  {
    v13 = *(float *)(*(_QWORD *)a4 + 112);
    v145 = v10;
    v146 = v9;
    if (v9)
    {
      v14 = (unint64_t *)&v9->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = (std::__shared_weak_count *)a1[60];
    v144[0] = a1[59];
    v144[1] = (uint64_t)v16;
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    Espresso::ane_style_post_scale_bias((uint64_t)&v145, v144, (uint64_t)&v147, v13);
    if (v16)
    {
      v19 = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = v146;
    if (v146)
    {
      v22 = (unint64_t *)&v146->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = v153;
    v25 = *(unsigned int *)(v153 + 8);
    std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(&v142, 2 * v25, 1, 1, 1);
    v26 = (int)v25;
    v141 = 0uLL;
    v27 = v25;
    v28 = a1[59];
    if (v28)
      v27 = *(_DWORD *)(v28 + 8);
    if (!a2[384])
    {
      Espresso::blob<unsigned char,1>::make(&__str, 4 * v25);
      v112 = *(int **)(__str.__r_.__value_.__r.__words[0] + 16);
      v113 = v25 - 1;
      if ((int)v25 >= 1)
      {
        for (i = 0; i != v25; ++i)
        {
          v115 = *(float *)(*(_QWORD *)(v24 + 16) + i * 4);
          *(float *)&v116 = ldexp(1.0, -v151) * v115;
          v112[i] = v116;
        }
      }
      if ((_DWORD)v25)
      {
        v117 = *(_WORD **)(v142 + 16);
        do
        {
          v118 = *v112++;
          _S0 = v118;
          __asm { FCVT            H0, S0 }
          *v117++ = _S0;
          --v26;
        }
        while (v26);
      }
      v140[0] = 0;
      v140[1] = 0;
      if (a1[59])
      {
        Espresso::blob<unsigned char,1>::make(buf, 4 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v140, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        Espresso::blob<unsigned char,1>::make(buf, 2 * v27);
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v141, (__int128 *)buf);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
        v121 = *(int **)(v140[0] + 16);
        if (v27 >= 1)
        {
          for (j = 0; j != v27; ++j)
          {
            if (v113 >= (int)j)
              v123 = j;
            else
              v123 = v113;
            v124 = *(float *)(*(_QWORD *)(v149 + 16) + 4 * j) * *(float *)(*(_QWORD *)(v147 + 16) + 4 * v123);
            v125 = (float *)&v121[j];
            *v125 = v124;
            v127 = v151;
            v126 = v152;
            v128 = ldexp(1.0, v152 - v151) * v124;
            *v125 = v128;
            v131 = ldexp(1.0, v127 - v126) * v128;
            if (v131 < -127.0 || v131 > 255.0)
            {
              Espresso::espresso_os_log_subsystem(v129, v130);
              v133 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
              {
                v134 = *(float *)&v121[j];
                *(_DWORD *)buf = 134218752;
                *(double *)&buf[4] = v131;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v152;
                v166 = 1024;
                v167 = v151;
                v168 = 2048;
                v169 = v134;
                _os_log_error_impl(&dword_190DAF000, v133, OS_LOG_TYPE_ERROR, "[ANEC::add_ane_scale_bias_unit] Shifted bias overflowing shifted_b=%f acc_bias_shift=%d post_right_shift=%d anebias=%f", buf, 0x22u);
              }

            }
          }
        }
        if (v27)
        {
          v135 = v27;
          v136 = *(_WORD **)(v141 + 16);
          do
          {
            v137 = *v121++;
            _S0 = v137;
            __asm { FCVT            H0, S0 }
            *v136++ = _S0;
            --v135;
          }
          while (v135);
        }
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
      Espresso::not_implemented_error::not_implemented_error(exception);
    }
    v29 = v152;
    if ((_DWORD)v25)
    {
      v30 = *(int **)(v147 + 16);
      v31 = *(_WORD **)(v142 + 16);
      do
      {
        v32 = *v30++;
        _S0 = v32;
        __asm { FCVT            H0, S0 }
        *v31++ = _S0;
        --v26;
      }
      while (v26);
    }
    if (v28)
    {
      std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned char,1>,std::allocator<Espresso::blob<unsigned char,1>>,int &,int &,int &,int &,void>(buf, 2 * v27, 1, 1, 1);
      v38 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
      v141 = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (v27)
      {
        v45 = v27;
        v46 = *(int **)(v149 + 16);
        v47 = *(_WORD **)(v141 + 16);
        do
        {
          v48 = *v46++;
          _S0 = v48;
          __asm { FCVT            H0, S0 }
          *v47++ = _S0;
          --v45;
        }
        while (v45);
      }
    }
    v50 = a2[552];
    v51 = v142;
    v52 = v143;
    if (v143)
    {
      v53 = (unint64_t *)&v143->__shared_owners_;
      do
        v54 = __ldxr(v53);
      while (__stxr(v54 + 1, v53));
    }
    v55 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v51 + 16), *(int *)(v51 + 8));
    if (v52)
    {
      v56 = (unint64_t *)&v52->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v58 = (void *)objc_opt_new();
    if (a5 && a2[121])
    {
      v59 = *(id *)(*a5 + 128);

      v58 = v59;
    }
    v60 = (void *)objc_opt_new();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v25);
    v61 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v61, CFSTR("ScaleCount"));

    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v55);
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v62, CFSTR("ScaleOffset"));

    v63 = (void *)MEMORY[0x1E0CB37E8];
    if (v50)
      weights_file_index = 0;
    else
    objc_msgSend(v63, "numberWithUnsignedLong:", weights_file_index);
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "setObject:forKeyedSubscript:", v65, CFSTR("ScaleIndex"));

    objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("ScaleType"));
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v151);
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v66, CFSTR("ScaleShift"));

    if (a1[59])
    {
      if (*((_QWORD *)&v141 + 1))
      {
        v67 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v68 = __ldxr(v67);
        while (__stxr(v68 + 1, v67));
      }
      v69 = Espresso::ANECompilerEngine::compiler::build_state_t::write_additional_blob((Espresso::ANECompilerEngine::compiler::build_state_t *)(a2 + 128), *(const unsigned __int8 **)(v141 + 16), *(int *)(v141 + 8));
      if (*((_QWORD *)&v141 + 1))
      {
        v70 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
        }
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1[59] + 8));
      v72 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v72, CFSTR("BiasCount"));

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v69);
      v73 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v73, CFSTR("BiasOffset"));

      v74 = (void *)MEMORY[0x1E0CB37E8];
      if (v50)
        v75 = 0;
      else
      objc_msgSend(v74, "numberWithUnsignedLong:", v75);
      v76 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v60, "setObject:forKeyedSubscript:", v76, CFSTR("BiasIndex"));

      objc_msgSend(v60, "setObject:forKeyedSubscript:", CFSTR("Float16"), CFSTR("BiasType"));
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", v29);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "setObject:forKeyedSubscript:", v77, CFSTR("BiasShift"));

    }
    objc_msgSend(v58, "setObject:forKeyedSubscript:", v60, CFSTR("BiasScaleGroupData"));
    Espresso::ANECompilerEngine::compiler::unit_t::unit_t((id *)buf, a3);
    v78 = a5[1];
    if (v78 == *a5)
      goto LABEL_93;
    v79 = (const void **)(v78 - 144);
    v80 = *(unsigned __int8 *)(v78 - 121);
    v81 = v80;
    v82 = *(_QWORD *)(v78 - 136);
    if ((v80 & 0x80u) == 0)
      v83 = *(unsigned __int8 *)(v78 - 121);
    else
      v83 = *(_QWORD *)(v78 - 136);
    v84 = HIBYTE(v167);
    if (v167 < 0)
      v84 = *(_QWORD *)&buf[8];
    if (v83 != v84)
      goto LABEL_87;
    if (v167 >= 0)
      v85 = buf;
    else
      v85 = *(unsigned __int8 **)buf;
    if ((char)v80 < 0)
    {
      v87 = (const std::string::value_type *)*v79;
      if (memcmp(*v79, v85, *(_QWORD *)(v78 - 136)))
        goto LABEL_90;
    }
    else if ((_BYTE)v80)
    {
      v86 = (unsigned __int8 *)(v78 - 144);
      while (*v86 == *v85)
      {
        ++v86;
        ++v85;
        if (!--v80)
          goto LABEL_86;
      }
      goto LABEL_87;
    }
LABEL_86:
    std::string::append((std::string *)(v78 - 144), "__@pre_scale_bias");
    v81 = *(_BYTE *)(v78 - 121);
LABEL_87:
    if ((v81 & 0x80) == 0)
    {
      v88 = *(_OWORD *)v79;
      __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v78 - 128);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v88;
      goto LABEL_91;
    }
    v87 = *(const std::string::value_type **)(v78 - 144);
    v82 = *(_QWORD *)(v78 - 136);
LABEL_90:
    std::string::__init_copy_ctor_external(&__str, v87, v82);
LABEL_91:
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v170, &__str, &v177, 1uLL);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
LABEL_93:
    v89 = v174;
    v174 = CFSTR("GOC");

    objc_storeStrong(&v175, v58);
    if (a2[121])
      v90 = a5 != 0;
    else
      v90 = 0;
    if (!v90)
    {
      if (a5)
      {
        v91 = a5[2];
        v92 = a5[1];
        if (v92 >= v91)
        {
          v94 = 0x8E38E38E38E38E39 * ((uint64_t)(v92 - *a5) >> 4);
          if (v94 + 1 > 0x1C71C71C71C71C7)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v95 = 0x8E38E38E38E38E39 * ((uint64_t)(v91 - *a5) >> 4);
          v96 = 2 * v95;
          if (2 * v95 <= v94 + 1)
            v96 = v94 + 1;
          if (v95 >= 0xE38E38E38E38E3)
            v97 = 0x1C71C71C71C71C7;
          else
            v97 = v96;
          *((_QWORD *)&v177 + 1) = a5 + 2;
          if (v97)
            v97 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>>(v97);
          else
            v98 = 0;
          __str.__r_.__value_.__r.__words[0] = v97;
          __str.__r_.__value_.__l.__size_ = v97 + 144 * v94;
          __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
          *(_QWORD *)&v177 = v97 + 144 * v98;
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)__str.__r_.__value_.__l.__size_, (uint64_t)buf);
          __str.__r_.__value_.__r.__words[2] += 144;
          std::vector<Espresso::ANECompilerEngine::compiler::unit_t>::__swap_out_circular_buffer(a5, &__str);
          v93 = a5[1];
          std::__split_buffer<Espresso::ANECompilerEngine::compiler::unit_t>::~__split_buffer((uint64_t)&__str);
        }
        else
        {
          std::allocator<Espresso::ANECompilerEngine::compiler::unit_t>::construct[abi:ne180100]<Espresso::ANECompilerEngine::compiler::unit_t,Espresso::ANECompilerEngine::compiler::unit_t const&>((std::string *)a5[1], (uint64_t)buf);
          v93 = v92 + 144;
          a5[1] = v92 + 144;
        }
        a5[1] = v93;
      }
      else
      {
        Espresso::ANECompilerEngine::compiler::add_unit((Espresso::ANECompilerEngine::compiler *)a2, (const Espresso::ANECompilerEngine::compiler::unit_t *)buf);
      }
    }

    if (v172 < 0)
      operator delete(__p);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v168;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v167) < 0)
      operator delete(*(void **)buf);

    if (*((_QWORD *)&v141 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v141 + 1) + 16))(*((_QWORD *)&v141 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v141 + 1));
      }
    }
    v101 = v143;
    if (v143)
    {
      v102 = (unint64_t *)&v143->__shared_owners_;
      do
        v103 = __ldaxr(v102);
      while (__stlxr(v103 - 1, v102));
      if (!v103)
      {
        ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
        std::__shared_weak_count::__release_weak(v101);
      }
    }
    v104 = v150;
    if (v150)
    {
      v105 = (unint64_t *)&v150->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    v107 = v148;
    if (v148)
    {
      v108 = (unint64_t *)&v148->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v9 = v154;
  }
  if (v9)
  {
    v110 = (unint64_t *)&v9->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }

  if (v160 < 0)
    operator delete(v159);
  *(_QWORD *)buf = &v158;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(_QWORD *)buf = &v157;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v156 < 0)
    operator delete(v155);
}

void sub_1913F8AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,id a35)
{
  uint64_t v35;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  Espresso::ANECompilerEngine::compiler::unit_t::~unit_t(&a35);
  _Unwind_Resume(a1);
}

float ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel29add_high_precision_tanh_unitsEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  float v4;
  double v5;
  float v6;

  v4 = *(float *)(a1 + 32);
  v5 = expf(v4 * a2);
  v6 = expf(-(float)(v4 * a2));
  return (v5 - v6) / (v5 + v6) * *(float *)(a1 + 36);
}

float ___ZN8Espresso17ANECompilerEngine21mix_activation_kernel25add_quantized_sigmoid_lutEPNS0_8compilerERKNS2_18layer_graph_info_tE_block_invoke(uint64_t a1, float a2)
{
  return *(float *)(a1 + 36) * (float)(1.0 / (float)(expf(-(float)(*(float *)(a1 + 32) * a2)) + 1.0));
}

float `anonymous namespace'::hard_sigmoid_activation_function(_anonymous_namespace_ *this, float a2)
{
  float result;

  result = (float)(a2 * 0.2) + 0.5;
  if (result < 0.0)
    result = 0.0;
  if (result > 1.0)
    return 1.0;
  return result;
}

float `anonymous namespace'::step_activation_function(_anonymous_namespace_ *this, float a2)
{
  BOOL v2;
  float result;

  v2 = a2 < 0.0;
  result = 0.0;
  if (!v2)
    return 1.0;
  return result;
}

void Espresso::zephyr::es_function_t::~es_function_t(Espresso::zephyr::es_function_t *this)
{
  Espresso::zephyr::function_t::~function_t(this);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::zephyr::es_function_t::new_node_content@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = &off_1E2DA4108;
  *a1 = result;
  return result;
}

double Espresso::zephyr::es_function_t::new_value_content@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  double result;

  v3 = operator new();
  *(_QWORD *)v3 = &off_1E2DA4160;
  result = 0.0;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *a1 = v3;
  return result;
}

void Espresso::zephyr::es_function_t::pprint(__int128 **a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  Espresso::net *v8;
  std::__shared_weak_count *v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  Espresso::zephyr::es_function_t::dump_to_net(&v8, a1);
  v11 = 0;
  Espresso::net::pprint((uint64_t)v8, a2, (uint64_t)v10);
  v3 = v11;
  if (v11 == v10)
  {
    v4 = 4;
    v3 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1913F8EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void Espresso::zephyr::es_function_t::dump_to_net(Espresso::net **this, __int128 **a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;

  _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  v7 = 0;
  Espresso::create_context(&v7, &v8);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)*this + 16, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  Espresso::zephyr::es_function_t::lower_to_net(a2, *this);
}

void sub_1913F8F8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__115allocate_sharedB8ne180100IN8Espresso3netENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(_QWORD *a1)
{
  _QWORD *v2;

  v2 = operator new(0x5E0uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E2DBE960;
  Espresso::net::net((Espresso::net *)(v2 + 3));
  *a1 = v2 + 3;
  a1[1] = v2;
  std::shared_ptr<Espresso::SerDes::serdes_object_json_objc>::__enable_weak_this[abi:ne180100]<Espresso::SerDes::generic_serdes_object,Espresso::SerDes::serdes_object_json_objc,void>((uint64_t)a1, v2 + 3, (uint64_t)(v2 + 3));
}

void Espresso::zephyr::es_function_t::lower_to_net(__int128 **this, Espresso::net *a2)
{
  Espresso::net *v2;
  uint64_t i;
  uint64_t v5;
  float *v6;
  __int128 *v7;
  _QWORD *v8;
  __int128 *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  uint64_t *p_shared_weak_owners;
  uint64_t shared_weak_owners;
  uint64_t v35;
  unsigned int (***v36)(_QWORD);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  char *v53;
  __int128 v54;
  int64x2_t v55;
  __int128 *v56;
  Espresso::net *v57;
  std::vector<std::string> *v58;
  char **v59;
  _QWORD *data;
  _QWORD *size;
  std::string *end;
  __int128 *v63;
  std::vector<std::string> *v64;
  char **v65;
  _QWORD *v66;
  _QWORD *v67;
  std::string *v68;
  __int128 *v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  Espresso::net *v86;
  Espresso::zephyr::es_function_t *v87;
  uint64_t **v88;
  float *v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[2];
  __int128 v97;
  std::string __p;
  __int128 *v99;
  __int128 v100;
  std::string *p_p;
  char *v102[2];
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;

  v2 = a2;
  v5 = *((_QWORD *)a2 + 4);
  for (i = *((_QWORD *)a2 + 5); i != v5; i = std::shared_ptr<void>::~shared_ptr[abi:ne180100](i - 16))
    ;
  *((_QWORD *)v2 + 5) = v5;
  v92 = (uint64_t)v2 + 96;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear((uint64_t)v2 + 96);
  v93 = (uint64_t)v2 + 56;
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear((uint64_t)v2 + 56);
  v6 = (float *)((char *)v2 + 888);
  std::__hash_table<std::__hash_value_type<unsigned long,unsigned long>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,unsigned long>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,unsigned long>>>::clear((_QWORD *)v2 + 111);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::clear((uint64_t)v2 + 136);
  v88 = (uint64_t **)((char *)v2 + 184);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v2 + 184, *((char **)v2 + 24));
  *((_QWORD *)v2 + 23) = (char *)v2 + 192;
  *((_QWORD *)v2 + 24) = 0;
  *((_QWORD *)v2 + 25) = 0;
  Espresso::zephyr::function_t::get_referenced_objects((Espresso::zephyr::function_t *)this, &v104);
  v87 = (Espresso::zephyr::es_function_t *)this;
  v7 = this[18];
  if (!v7)
    goto LABEL_28;
  do
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&__p, v7 + 1);
    v8 = v105;
    if (!v105)
      goto LABEL_11;
    v9 = v99;
    while (1)
    {
      v10 = v8[4];
      if ((unint64_t)v99 >= v10)
        break;
LABEL_10:
      v8 = (_QWORD *)*v8;
      if (!v8)
        goto LABEL_11;
    }
    if (v10 < (unint64_t)v99)
    {
      ++v8;
      goto LABEL_10;
    }
    v14 = *(char **)(*((_QWORD *)v99 + 1) + 8);
    if (v14)
    {
      p_p = &__p;
      v15 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v88, &__p, (__int128 **)&p_p);
      v16 = *(_OWORD *)v14;
      v17 = *((_OWORD *)v14 + 1);
      *((_QWORD *)v15 + 11) = *((_QWORD *)v14 + 4);
      *(_OWORD *)(v15 + 72) = v17;
      *(_OWORD *)(v15 + 56) = v16;
      if (v15 + 56 != v14)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v15 + 96, *((char **)v14 + 5), *((_QWORD *)v14 + 6), (uint64_t)(*((_QWORD *)v14 + 6) - *((_QWORD *)v14 + 5)) >> 2);
    }
    v18 = *((_QWORD *)v9 + 1);
    v19 = *(_OWORD **)(v18 + 40);
    if (v19)
    {
      p_p = &__p;
      v20 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 41, &__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      *(_OWORD *)(v20 + 56) = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
      *(_OWORD *)(v20 + 116) = *(_OWORD *)((char *)v19 + 60);
      *(_OWORD *)(v20 + 104) = v23;
      *(_OWORD *)(v20 + 88) = v22;
      *(_OWORD *)(v20 + 72) = v21;
      v18 = *((_QWORD *)v9 + 1);
    }
    v24 = *(_QWORD *)(v18 + 24);
    if (v24)
    {
      p_p = &__p;
      v25 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v2 + 44, &__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
      *(_OWORD *)(v25 + 56) = *(_OWORD *)v24;
      if (v25 + 56 != (char *)v24)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v25 + 72, *(char **)(v24 + 16), *(_QWORD *)(v24 + 24), (uint64_t)(*(_QWORD *)(v24 + 24) - *(_QWORD *)(v24 + 16)) >> 2);
    }
LABEL_11:
    v11 = (std::__shared_weak_count *)v100;
    if ((_QWORD)v100)
    {
      v12 = (unint64_t *)(v100 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = *(__int128 **)v7;
  }
  while (v7);
LABEL_28:
  v26 = (_QWORD *)*((_QWORD *)v87 + 9);
  if (v26 != (_QWORD *)((char *)v87 + 64))
  {
    v91 = (char *)v2 + 48;
    v89 = (float *)((char *)v2 + 888);
    do
    {
      v27 = (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4;
      *(_QWORD *)&v97 = v27;
      v90 = v26;
      v28 = v26[2];
      v29 = *(_QWORD *)(v28 + 120);
      v94 = v28 + 112;
      if (v29 != v28 + 112)
      {
        v95 = 0;
        do
        {
          v30 = *(const std::string **)(v29 + 16);
          v31 = (std::__shared_weak_count *)operator new(0xF8uLL);
          v31->__shared_owners_ = 0;
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          v31->__shared_weak_owners_ = 0;
          v31->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBF0D0;
          v31[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1A38;
          *(_OWORD *)&v31[2].__shared_owners_ = 0u;
          v31[3].std::__shared_count = 0u;
          *(_OWORD *)&v31[3].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v31[4].__shared_owners_ = 0u;
          v31[5].std::__shared_count = 0u;
          *(_OWORD *)&v31[5].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v31[6].__shared_owners_ = 0u;
          *(_OWORD *)((char *)&v31[6].__shared_weak_owners_ + 1) = 0u;
          *(_OWORD *)&v31[1].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v31[8].__shared_weak_owners_ = 0u;
          *(_OWORD *)&v31[9].__shared_owners_ = 0u;
          v31[10].__vftable = 0;
          std::string::operator=((std::string *)&v31[1].__shared_weak_owners_, v30 + 6);
          p_shared_weak_owners = &v31[3].__shared_weak_owners_;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v31[3].__shared_weak_owners_, *(_QWORD *)(v30->__r_.__value_.__l.__size_ + 8), *(_QWORD *)(v30->__r_.__value_.__l.__size_ + 16));
          shared_weak_owners = v31[3].__shared_weak_owners_;
          if (shared_weak_owners)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "basic_block_head");
            std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(shared_weak_owners + 240), (unsigned __int8 *)&__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*p_shared_weak_owners + 272))(*p_shared_weak_owners);
            MEMORY[0x19401C808](&v31[2].__shared_weak_owners_, v35);
            v36 = *(unsigned int (****)(_QWORD))(*(_QWORD *)(*p_shared_weak_owners + 8) + 8);
            v31[1].__shared_owners_ = (**v36)(v36);
            v38 = *((_QWORD *)v2 + 4);
            v37 = (_QWORD *)*((_QWORD *)v2 + 5);
            v39 = ((uint64_t)v37 - v38) >> 4;
            v103 = v39;
            v40 = *((_QWORD *)v2 + 6);
            if ((unint64_t)v37 >= v40)
            {
              v43 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 60)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v44 = v40 - v38;
              if (v44 >> 3 > v43)
                v43 = v44 >> 3;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0)
                v45 = 0xFFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              *(_QWORD *)&v100 = v91;
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v45);
              *(_QWORD *)&v48 = v31 + 1;
              *((_QWORD *)&v48 + 1) = v31;
              v49 = &v46[16 * v39];
              *(_OWORD *)v49 = v48;
              do
                v50 = __ldxr(p_shared_owners);
              while (__stxr(v50 + 1, p_shared_owners));
              v52 = (_QWORD *)*((_QWORD *)v2 + 4);
              v51 = (_QWORD *)*((_QWORD *)v2 + 5);
              if (v51 == v52)
              {
                v55 = vdupq_n_s64((unint64_t)v51);
                v53 = &v46[16 * v39];
              }
              else
              {
                v53 = &v46[16 * v39];
                do
                {
                  v54 = *((_OWORD *)v51 - 1);
                  v51 -= 2;
                  *((_OWORD *)v53 - 1) = v54;
                  v53 -= 16;
                  *v51 = 0;
                  v51[1] = 0;
                }
                while (v51 != v52);
                v55 = *((int64x2_t *)v2 + 2);
              }
              v42 = v49 + 16;
              *((_QWORD *)v2 + 4) = v53;
              *((_QWORD *)v2 + 5) = v49 + 16;
              *(int64x2_t *)&__p.__r_.__value_.__r.__words[1] = v55;
              v56 = (__int128 *)*((_QWORD *)v2 + 6);
              *((_QWORD *)v2 + 6) = &v46[16 * v47];
              v99 = v56;
              __p.__r_.__value_.__r.__words[0] = v55.i64[0];
              std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&__p);
            }
            else
            {
              *v37 = v31 + 1;
              v37[1] = v31;
              do
                v41 = __ldxr(p_shared_owners);
              while (__stxr(v41 + 1, p_shared_owners));
              v42 = v37 + 2;
            }
            v57 = v2;
            *((_QWORD *)v2 + 5) = v42;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
            v58 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v93, (unint64_t *)&v103, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
            v59 = (char **)&v58[1];
            std::vector<std::string>::reserve(v58 + 1, (uint64_t)(v30[5].__r_.__value_.__l.__size_ - v30[5].__r_.__value_.__r.__words[0]) >> 3);
            data = v30[5].__r_.__value_.__l.__data_;
            size = (_QWORD *)v30[5].__r_.__value_.__l.__size_;
            if (data != size)
            {
              end = v58[1].__end_;
              do
              {
                v63 = (__int128 *)(*data + 32);
                if (end >= v58[1].__end_cap_.__value_)
                {
                  end = std::vector<std::string>::__push_back_slow_path<std::string const&>(v59, (uint64_t)v63);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v59, v63);
                  ++end;
                }
                v58[1].__end_ = end;
                ++data;
              }
              while (data != size);
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
            v64 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v92, (unint64_t *)&v103, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
            v65 = (char **)&v64[1];
            std::vector<std::string>::reserve(v64 + 1, (uint64_t)(v30[4].__r_.__value_.__l.__size_ - v30[4].__r_.__value_.__r.__words[0]) >> 3);
            v66 = v30[4].__r_.__value_.__l.__data_;
            v67 = (_QWORD *)v30[4].__r_.__value_.__l.__size_;
            if (v66 != v67)
            {
              v68 = v64[1].__end_;
              do
              {
                v69 = (__int128 *)(*v66 + 32);
                if (v68 >= v64[1].__end_cap_.__value_)
                {
                  v68 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v65, (uint64_t)v69);
                }
                else
                {
                  std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v65, v69);
                  ++v68;
                }
                v64[1].__end_ = v68;
                ++v66;
              }
              while (v66 != v67);
            }
            v70 = *(_QWORD *)(v30->__r_.__value_.__l.__size_ + 8);
            std::string::basic_string[abi:ne180100]<0>(&__p, "basic_block_head");
            v2 = v57;
            if (v95)
            {
              std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__erase_unique<std::string>((_QWORD *)(v70 + 240), (unsigned __int8 *)&__p);
            }
            else
            {
              p_p = &__p;
              *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v70 + 240, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 10) = 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            ++v95;
          }
          do
            v71 = __ldaxr(p_shared_owners);
          while (__stlxr(v71 - 1, p_shared_owners));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          v29 = *(_QWORD *)(v29 + 8);
        }
        while (v29 != v94);
        v27 = v97;
        v6 = v89;
      }
      v72 = std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v6, v27, &v97);
      v72[3] = 0;
      v72[4] = 0;
      *((_BYTE *)v72 + 40) = 0;
      std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v6, v27, &v97)[3] = v27;
      v74 = *((_QWORD *)v2 + 4);
      v73 = *((_QWORD *)v2 + 5);
      std::__hash_table<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,Espresso::net::basic_block_t>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v6, v27, &v97)[4] = (v73 - v74) >> 4;
      v26 = (_QWORD *)v90[1];
    }
    while (v26 != (_QWORD *)((char *)v87 + 64));
  }
  v102[0] = 0;
  v102[1] = 0;
  p_p = (std::string *)v102;
  v75 = *((_QWORD *)v87 + 4);
  v76 = *(uint64_t **)(v75 + 96);
  v77 = *(uint64_t **)(v75 + 104);
  while (v76 != v77)
  {
    v78 = *v76;
    v79 = *(char **)(*(_QWORD *)(*v76 + 8) + 8);
    if (v79)
    {
      __p.__r_.__value_.__r.__words[0] = v78 + 32;
      v80 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&p_p, (_QWORD *)(v78 + 32), (__int128 **)&__p);
      v81 = *(_OWORD *)v79;
      v82 = *((_OWORD *)v79 + 1);
      *((_QWORD *)v80 + 11) = *((_QWORD *)v79 + 4);
      *(_OWORD *)(v80 + 72) = v82;
      *(_OWORD *)(v80 + 56) = v81;
      if (v80 + 56 != v79)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v80 + 96, *((char **)v79 + 5), *((_QWORD *)v79 + 6), (uint64_t)(*((_QWORD *)v79 + 6) - *((_QWORD *)v79 + 5)) >> 2);
    }
    ++v76;
  }
  Espresso::compute_network_shape<std::string,Espresso::layer_shape,std::map<std::string,Espresso::layer_shape>>((uint64_t)&__p, (uint64_t)v2, (uint64_t)&p_p);
  if (v88 != (uint64_t **)&__p)
  {
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>(v88, (__int128 *)__p.__r_.__value_.__l.__data_, (__int128 *)&__p.__r_.__value_.__r.__words[1]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::layer_shape>,std::__tree_node<std::__value_type<std::string,Espresso::layer_shape>,void *> *,long>>((uint64_t **)v2 + 26, v99, &v100);
  }
  v97 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v2 + 968, &v97);
  v83 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v84 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  if (Espresso::net::needs_interpreter(v2))
  {
    Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v2);
    v96[0] = 0;
    v96[1] = 0;
    Espresso::net::setup_script((uint64_t)v2, v96, 0);
  }
  *((_BYTE *)v2 + 180) = 0;
  Espresso::shape_network_recursive(v2, (Espresso::net *)&__p, 0, 0);
  Espresso::correct_jump_labels_after_ordering_change(v2, v86);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v99, (char *)v100);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&p_p, v102[0]);
  std::__tree<int>::destroy(v105);
}

void sub_1913F9878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  Espresso::network_shape::~network_shape((char **)&__p);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v29 - 152, *(char **)(v29 - 144));
  std::__tree<int>::destroy(*(_QWORD **)(v29 - 112));
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__deallocate_node(*(char **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__shared_ptr_emplace<Espresso::net>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE960;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::net>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE960;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::net>::__on_zero_shared(uint64_t a1)
{
  Espresso::net::~net((Espresso::net *)(a1 + 24));
}

void Espresso::net::~net(Espresso::net *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  std::__shared_weak_count *v27;
  void **v28;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 1440);
  if (*((char *)this + 1439) < 0)
    operator delete(*((void **)this + 177));
  if (*((char *)this + 1407) < 0)
    operator delete(*((void **)this + 173));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 1368);
  v2 = (_QWORD *)*((_QWORD *)this + 165);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = (void *)*((_QWORD *)this + 163);
  *((_QWORD *)this + 163) = 0;
  if (v4)
    operator delete(v4);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 162);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 1256);
  if (*((char *)this + 1239) < 0)
    operator delete(*((void **)this + 152));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 1176);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 146);
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__deallocate_node((_DWORD)this + 1120, *((_QWORD **)this + 142));
  v11 = (void *)*((_QWORD *)this + 140);
  *((_QWORD *)this + 140) = 0;
  if (v11)
    operator delete(v11);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 139);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 137);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<unsigned long>>>>::__deallocate_node(*((_QWORD **)this + 133));
  v16 = (void *)*((_QWORD *)this + 131);
  *((_QWORD *)this + 131) = 0;
  if (v16)
    operator delete(v16);
  if (*((char *)this + 1047) < 0)
    operator delete(*((void **)this + 128));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 984);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 122);
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)this + 928);
  v20 = (_QWORD *)*((_QWORD *)this + 113);
  if (v20)
  {
    do
    {
      v21 = (_QWORD *)*v20;
      operator delete(v20);
      v20 = v21;
    }
    while (v21);
  }
  v22 = (void *)*((_QWORD *)this + 111);
  *((_QWORD *)this + 111) = 0;
  if (v22)
    operator delete(v22);
  std::__hash_table<std::shared_ptr<Espresso::abstract_blob_container>,std::hash<std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::shared_ptr<Espresso::abstract_blob_container>>,std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>::~__hash_table((uint64_t)this + 848);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 824, *((char **)this + 104));
  v28 = (void **)((char *)this + 800);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::destroy((uint64_t)this + 776, *((char **)this + 98));
  v23 = (void *)*((_QWORD *)this + 94);
  if (v23)
  {
    *((_QWORD *)this + 95) = v23;
    operator delete(v23);
  }
  if (*((char *)this + 751) < 0)
    operator delete(*((void **)this + 91));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 712);
  v28 = (void **)((char *)this + 688);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  v28 = (void **)((char *)this + 664);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  v28 = (void **)((char *)this + 640);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  if (*((char *)this + 639) < 0)
    operator delete(*((void **)this + 77));
  if (*((char *)this + 615) < 0)
    operator delete(*((void **)this + 74));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  v24 = (_QWORD *)*((_QWORD *)this + 68);
  if (v24)
  {
    do
    {
      v25 = (_QWORD *)*v24;
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(v24 + 3));
      operator delete(v24);
      v24 = v25;
    }
    while (v25);
  }
  v26 = (void *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v26)
    operator delete(v26);
  std::__tree<int>::destroy(*((_QWORD **)this + 64));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 472, *((_QWORD *)this + 60));
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  std::__tree<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,std::map<std::string,Espresso::blob_numerical_properties>>>>::destroy(*((_QWORD **)this + 51));
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*((_QWORD **)this + 48));
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(*((_QWORD **)this + 45));
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*((char **)this + 42));
  std::__tree<std::string>::destroy((uint64_t)this + 304, *((char **)this + 39));
  std::__tree<std::string>::destroy((uint64_t)this + 280, *((char **)this + 36));
  std::__tree<std::string>::destroy((uint64_t)this + 256, *((char **)this + 33));
  std::__tree<std::string>::destroy((uint64_t)this + 232, *((char **)this + 30));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 208, *((char **)this + 27));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)this + 184, *((char **)this + 24));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)this + 136);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 96);
  std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::~__hash_table((uint64_t)this + 56);
  v28 = (void **)((char *)this + 32);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
}

void Espresso::zephyr::es_value_content::~es_value_content(Espresso::zephyr::es_value_content *this)
{
  Espresso::zephyr::es_value_content::~es_value_content(this);
  JUMPOUT(0x19401CD90);
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E2DA4160;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void Espresso::zephyr::es_value_content::copy_from(_QWORD *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  v6 = v3[1];
  v5 = v3[2];
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (std::__shared_weak_count *)a1[2];
  a1[1] = v6;
  a1[2] = v5;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = v4[3];
  v12 = v4[4];
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a1[4];
  a1[3] = v13;
  a1[4] = v12;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v20 = v4[5];
  v19 = v4[6];
  if (v19)
  {
    v21 = (unint64_t *)(v19 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)a1[6];
  a1[5] = v20;
  a1[6] = v19;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void Espresso::zephyr::es_node_content::~es_node_content(Espresso::zephyr::es_node_content *this)
{
  *(_QWORD *)this = &off_1E2DA4108;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_1E2DA4108;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

_QWORD *Espresso::zephyr::es_node_content::copy_from(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;

  if (!v3)
    __cxa_bad_cast();
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 8), v3[1], v3[2]);
}

_OWORD *std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::es_function_t *,void>(_QWORD *a1, uint64_t a2)
{
  _OWORD *result;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0xA0uLL);
  *(_OWORD *)((char *)result + 8) = 0u;
  *(_QWORD *)result = &off_1E2DC1050;
  v5 = *(unint64_t **)(a2 + 24);
  result[2] = 0u;
  *((_QWORD *)result + 6) = v5;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *((_QWORD *)result + 9) = 0;
  *((_QWORD *)result + 7) = a2;
  *((_QWORD *)result + 8) = (char *)result + 72;
  *((_QWORD *)result + 12) = 0;
  *((_QWORD *)result + 10) = 0;
  *((_QWORD *)result + 11) = result + 6;
  *((_QWORD *)result + 15) = 0;
  *((_QWORD *)result + 13) = 0;
  *((_QWORD *)result + 14) = (char *)result + 120;
  *((_QWORD *)result + 3) = &off_1E2DA4130;
  *((_QWORD *)result + 4) = v6;
  *((_QWORD *)result + 16) = 0;
  *((_QWORD *)result + 17) = (char *)result + 136;
  *((_QWORD *)result + 18) = (char *)result + 136;
  *((_QWORD *)result + 19) = 0;
  *a1 = (char *)result + 24;
  a1[1] = result;
  return result;
}

_QWORD *std::list<std::shared_ptr<Espresso::zephyr::ordered_block_t>>::push_back(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v9 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

_QWORD *Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_0::operator()(uint64_t *a1, Espresso::zephyr::ordered_block_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;

  v6 = *(_QWORD *)(*a1 + 32);
  v7 = 16 * a3;
  v8 = Espresso::zephyr::function_t::new_detached_node(a1[1], *(_QWORD *)(v6 + 16 * a3) + 16);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v8 + 1) + 8), *(_QWORD *)(*(_QWORD *)(v6 + v7) + 64), *(_QWORD *)(*(_QWORD *)(v6 + v7) + 72));
  std::string::operator=((std::string *)(v8 + 32), (const std::string *)(*(_QWORD *)(v6 + v7) + 16));
  v9 = *a1;
  v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)(*a1 + 56), a3);
  v11 = (unsigned __int8 *)v10[3];
  v12 = (unsigned __int8 *)v10[4];
  if (v11 != v12)
  {
    do
    {
      v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)a1[2], v11);
      if (!v13)
LABEL_10:
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      Espresso::zephyr::node_t::add_input((Espresso::zephyr::node_t *)v8, *((Espresso::zephyr::value_t **)v13 + 5));
      v11 += 24;
    }
    while (v11 != v12);
    v9 = *a1;
  }
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>((_QWORD *)(v9 + 96), a3);
  v15 = (unsigned __int8 *)v14[3];
  v16 = (unsigned __int8 *)v14[4];
  while (v15 != v16)
  {
    v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)a1[2], v15);
    if (!v17)
      goto LABEL_10;
    Espresso::zephyr::node_t::add_output((Espresso::zephyr::node_t *)v8, *((Espresso::zephyr::value_t **)v17 + 5));
    v15 += 24;
  }
  return Espresso::zephyr::ordered_block_t::insert_node_after(a2, (Espresso::zephyr::node_t *)v8, 0);
}

void std::__introsort<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 *v42;
  __int128 *v43;
  __int128 *v44;
  __int128 v45;
  char v46;
  char v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

__int128 *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(__int128 *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  char v7;
  __int128 v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  char v17;

  v3 = *a2;
  v4 = *a3;
  if (*a2 >= *(_QWORD *)result)
  {
    if (v4 < v3)
    {
      v8 = *(_OWORD *)a2;
      v9 = a2[2];
      v10 = *((_BYTE *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_BYTE *)a2 + 16) = v10;
      *((_BYTE *)a3 + 16) = v9;
      *(_OWORD *)a3 = v8;
      if (*a2 < *(_QWORD *)result)
      {
        v11 = *result;
        v12 = *((_QWORD *)result + 2);
        v13 = *((_BYTE *)a2 + 16);
        *result = *(_OWORD *)a2;
        *((_BYTE *)result + 16) = v13;
        *((_BYTE *)a2 + 16) = v12;
        *(_OWORD *)a2 = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *result;
      v15 = *((_QWORD *)result + 2);
      v16 = *((_BYTE *)a2 + 16);
      *result = *(_OWORD *)a2;
      *((_BYTE *)result + 16) = v16;
      *((_BYTE *)a2 + 16) = v15;
      *(_OWORD *)a2 = v14;
      if (*a3 >= *a2)
        return result;
      v5 = *(_OWORD *)a2;
      v6 = a2[2];
      v17 = *((_BYTE *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_BYTE *)a2 + 16) = v17;
    }
    else
    {
      v5 = *result;
      v6 = *((_QWORD *)result + 2);
      v7 = *((_BYTE *)a3 + 16);
      *result = *(_OWORD *)a3;
      *((_BYTE *)result + 16) = v7;
    }
    *((_BYTE *)a3 + 16) = v6;
    *(_OWORD *)a3 = v5;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  __n128 result;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)a1, a2, a3);
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    v9 = a3[2];
    v10 = *(_BYTE *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_BYTE *)a3 + 16) = v10;
    *(_BYTE *)(a4 + 16) = v9;
    *(__n128 *)a4 = result;
    if (*a3 < *a2)
    {
      result = *(__n128 *)a2;
      v11 = a2[2];
      v12 = *((_BYTE *)a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_BYTE *)a2 + 16) = v12;
      *((_BYTE *)a3 + 16) = v11;
      *(__n128 *)a3 = result;
      if (*a2 < *(_QWORD *)a1)
      {
        result = *(__n128 *)a1;
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *((_BYTE *)a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_BYTE *)(a1 + 16) = v14;
        *((_BYTE *)a2 + 16) = v13;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)(a2 - 24) < *(_QWORD *)a1)
      {
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a1 + 16);
        v9 = *(_BYTE *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_BYTE *)(a1 + 16) = v9;
        *(_BYTE *)(a2 - 8) = v8;
        *v6 = v7;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a2 - 24);
      return 1;
    case 5uLL:
      v18 = (__int128 *)(a1 + 24);
      v19 = (__int128 *)(a1 + 48);
      v20 = (__int128 *)(a1 + 72);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>(a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48), a1 + 72);
      v22 = *(_QWORD *)(a2 - 24);
      v21 = a2 - 24;
      if (v22 < *(_QWORD *)(a1 + 72))
      {
        v23 = *v20;
        v24 = *(_QWORD *)(a1 + 88);
        v25 = *(_BYTE *)(v21 + 16);
        *v20 = *(_OWORD *)v21;
        *(_BYTE *)(a1 + 88) = v25;
        *(_BYTE *)(v21 + 16) = v24;
        *(_OWORD *)v21 = v23;
        if (*(_QWORD *)v20 < *(_QWORD *)v19)
        {
          v26 = *(_QWORD *)(a1 + 64);
          v27 = *v19;
          *v19 = *v20;
          *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 88);
          *v20 = v27;
          *(_BYTE *)(a1 + 88) = v26;
          if (*(_QWORD *)v19 < *(_QWORD *)v18)
          {
            v28 = *(_QWORD *)(a1 + 40);
            v29 = *v18;
            *v18 = *v19;
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(a1 + 64);
            *v19 = v29;
            *(_BYTE *)(a1 + 64) = v28;
            if (*(_QWORD *)(a1 + 24) < *(_QWORD *)a1)
            {
              v30 = *(_QWORD *)(a1 + 16);
              v31 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(_BYTE *)(a1 + 16) = *(_BYTE *)(a1 + 40);
              *v18 = v31;
              *(_BYTE *)(a1 + 40) = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (_QWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *>((__int128 *)a1, (unint64_t *)(a1 + 24), (unint64_t *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    if (*(_QWORD *)v11 < *v10)
    {
      v32 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_BYTE *)(v16 + 88) = *(_BYTE *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(_QWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(_QWORD *)(v17 + 8) = v32;
      *(_BYTE *)(v17 + 16) = BYTE8(v32);
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_QWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

void std::__shared_ptr_emplace<Espresso::zephyr::ordered_block_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1050;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::zephyr::ordered_block_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1050;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::ordered_block_t>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::layer_shape>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::layer_shape>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::layer_shape>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::vimage2espresso_param>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::vimage2espresso_param>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob_numerical_properties>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD540;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob_numerical_properties>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD540;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob_numerical_properties>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<Espresso::zephyr::node_t>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC10C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::zephyr::node_t>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC10C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::zephyr::node_t>::__on_zero_shared(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t result;

  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(_QWORD *)(a1 + 128) = v3;
    operator delete(v3);
  }
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100](a1 + 80);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  result = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::es_function_t *this, Espresso::zephyr::context_t *a2, const Espresso::net *a3)
{
  uint64_t *v4;
  Espresso::zephyr::ordered_block_t *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  void **v29;
  char *v30;
  unint64_t v31;
  std::string *v32;
  __int128 v33;
  float v34;
  _BOOL8 v35;
  unint64_t v36;
  unint64_t v37;
  int8x8_t prime;
  void *v39;
  void *v40;
  uint64_t v41;
  _QWORD **v42;
  unint64_t v43;
  uint8x8_t v44;
  unint64_t v45;
  uint8x8_t v46;
  uint64_t v47;
  _QWORD *i;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  _OWORD *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  char *v71;
  char *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  void *v79;
  unsigned __int8 *v80;
  unsigned __int8 *j;
  Espresso::zephyr::node_t *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *k;
  Espresso::zephyr::node_t *v86;
  unsigned __int8 *v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  _BYTE *v91;
  _QWORD *v92;
  char *v93;
  unint64_t v94;
  __int128 *v95;
  __int128 v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  __int128 v100;
  unint64_t v101;
  unint64_t v102;
  __int128 v103;
  _BYTE *v104;
  Espresso::zephyr::ordered_block_t *v105;
  std::__shared_weak_count *v106;
  unint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  std::__shared_weak_count *v113;
  Espresso::zephyr::ordered_block_t *v114;
  unint64_t m;
  unint64_t *v116;
  unint64_t v117;
  Espresso::zephyr::node_t **v119;
  Espresso::zephyr::node_t **v120;
  const Espresso::net *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  Espresso::zephyr::ordered_block_t *v129;
  std::__shared_weak_count *v130;
  __int128 v131;
  void **v132;
  void *__p[2];
  __int128 v134;
  float v135;
  uint64_t v136;

  v4 = (uint64_t *)this;
  *(_QWORD *)Espresso::zephyr::function_t::function_t((uint64_t)this, (unint64_t *)a2) = &off_1E2DA40D0;
  v5 = (Espresso::zephyr::ordered_block_t *)operator new();
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &off_1E2DA4108;
  v6 = operator new(0xC0uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC10C0;
  v129 = v5;
  std::string::basic_string[abi:ne180100]<0>(__p, "input_source_node");
  Espresso::zephyr::node_t::node_t((uint64_t)(v6 + 3), (uint64_t)v4, (uint64_t *)&v129, (std::string *)__p);
  if (SBYTE7(v134) < 0)
    operator delete(__p[0]);
  if (v129)
    (*(void (**)(Espresso::zephyr::ordered_block_t *))(*(_QWORD *)v129 + 8))(v129);
  *(_QWORD *)&v131 = v6 + 3;
  *((_QWORD *)&v131 + 1) = v6;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v4 + 4), &v131);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*v4 + 16))(&v136, v4);
  v10 = operator new(0xC0uLL);
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E2DC10C0;
  v11 = v136;
  v136 = 0;
  v129 = (Espresso::zephyr::ordered_block_t *)v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "output_sink_node");
  Espresso::zephyr::node_t::node_t((uint64_t)(v10 + 3), (uint64_t)v4, (uint64_t *)&v129, (std::string *)__p);
  if (SBYTE7(v134) < 0)
    operator delete(__p[0]);
  if (v129)
    (*(void (**)(Espresso::zephyr::ordered_block_t *))(*(_QWORD *)v129 + 8))(v129);
  *(_QWORD *)&v131 = v10 + 3;
  *((_QWORD *)&v131 + 1) = v10;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v4 + 6), &v131);
  v12 = *((_QWORD *)&v131 + 1);
  if (*((_QWORD *)&v131 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)v12 + 16))(v12);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v12);
    }
  }
  v119 = (Espresso::zephyr::node_t **)(v4 + 6);
  v120 = (Espresso::zephyr::node_t **)(v4 + 4);
  v15 = v136;
  v136 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *(_OWORD *)__p = 0u;
  v134 = 0u;
  v135 = 1.0;
  v121 = a3;
  v16 = (unsigned __int8 *)*((_QWORD *)a3 + 19);
  if (v16)
  {
    v126 = (char *)a3 + 360;
    v127 = (char *)a3 + 352;
    v124 = (char *)a3 + 336;
    v125 = (char *)a3 + 328;
    v122 = (char *)a3 + 192;
    v123 = (char *)a3 + 184;
    __asm { FMOV            V10.2S, #1.0 }
    while (1)
    {
      v22 = v4;
      v23 = Espresso::zephyr::function_t::new_value((uint64_t)v4, (uint64_t)(v16 + 16));
      v24 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v16 + 16));
      v25 = v24;
      v26 = (unint64_t)__p[1];
      if (__p[1])
      {
        v27 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
        v27.i16[0] = vaddlv_u8(v27);
        v28 = v27.u32[0];
        if (v27.u32[0] > 1uLL)
        {
          v12 = v24;
          if ((void *)v24 >= __p[1])
            v12 = v24 % (unint64_t)__p[1];
        }
        else
        {
          v12 = ((unint64_t)__p[1] - 1) & v24;
        }
        v29 = (void **)*((_QWORD *)__p[0] + v12);
        if (v29)
        {
          v30 = (char *)*v29;
          if (*v29)
          {
            do
            {
              v31 = *((_QWORD *)v30 + 1);
              if (v31 == v25)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v30 + 16, v16 + 16))
                  goto LABEL_98;
              }
              else
              {
                if (v28 > 1)
                {
                  if (v31 >= v26)
                    v31 %= v26;
                }
                else
                {
                  v31 &= v26 - 1;
                }
                if (v31 != v12)
                  break;
              }
              v30 = *(char **)v30;
            }
            while (v30);
          }
        }
      }
      v30 = (char *)operator new(0x30uLL);
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = v25;
      v32 = (std::string *)(v30 + 16);
      if ((char)v16[39] < 0)
      {
        std::string::__init_copy_ctor_external(v32, *((const std::string::value_type **)v16 + 2), *((_QWORD *)v16 + 3));
      }
      else
      {
        v33 = *((_OWORD *)v16 + 1);
        *((_QWORD *)v30 + 4) = *((_QWORD *)v16 + 4);
        *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      }
      *((_QWORD *)v30 + 5) = 0;
      v34 = (float)(unint64_t)(*((_QWORD *)&v134 + 1) + 1);
      if (!v26 || (float)(v135 * (float)v26) < v34)
        break;
LABEL_88:
      v50 = __p[0];
      v51 = (_QWORD *)*((_QWORD *)__p[0] + v12);
      if (v51)
      {
        *(_QWORD *)v30 = *v51;
      }
      else
      {
        *(_QWORD *)v30 = v134;
        *(_QWORD *)&v134 = v30;
        v50[v12] = &v134;
        if (!*(_QWORD *)v30)
          goto LABEL_97;
        v52 = *(_QWORD *)(*(_QWORD *)v30 + 8);
        if ((v26 & (v26 - 1)) != 0)
        {
          if (v52 >= v26)
            v52 %= v26;
        }
        else
        {
          v52 &= v26 - 1;
        }
        v51 = (char *)__p[0] + 8 * v52;
      }
      *v51 = v30;
LABEL_97:
      ++*((_QWORD *)&v134 + 1);
LABEL_98:
      *((_QWORD *)v30 + 5) = v23;
      v53 = *((_QWORD *)v23 + 1);
      v54 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v127, (_QWORD *)v16 + 2);
      v4 = v22;
      if (v126 != v54)
      {
        v12 = (unint64_t)v54;
        v55 = operator new(0x40uLL);
        v55[1] = 0;
        v55[2] = 0;
        *v55 = &off_1E2DBD540;
        *((_DWORD *)v55 + 6) = 1065353216;
        *(_QWORD *)((char *)v55 + 28) = 0xFFFFFFFF00000000;
        *((_DWORD *)v55 + 9) = 1;
        v55[6] = 0;
        v55[7] = 0;
        v55[5] = 0;
        *(_QWORD *)&v56 = v55 + 3;
        *((_QWORD *)&v56 + 1) = v55;
        v57 = *(std::__shared_weak_count **)(v53 + 32);
        *(_OWORD *)(v53 + 24) = v56;
        if (v57)
        {
          p_shared_owners = (unint64_t *)&v57->__shared_owners_;
          do
            v59 = __ldaxr(p_shared_owners);
          while (__stlxr(v59 - 1, p_shared_owners));
          if (!v59)
          {
            ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
            std::__shared_weak_count::__release_weak(v57);
          }
        }
        v60 = *(_QWORD *)(v53 + 24);
        *(_OWORD *)v60 = *(_OWORD *)(v12 + 56);
        if (v60 != v12 + 56)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v60 + 16), *(char **)(v12 + 72), *(_QWORD *)(v12 + 80), (uint64_t)(*(_QWORD *)(v12 + 80) - *(_QWORD *)(v12 + 72)) >> 2);
      }
      v61 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v125, (_QWORD *)v16 + 2);
      if (v124 != v61)
      {
        v12 = (unint64_t)v61;
        v62 = operator new(0x68uLL);
        v62[1] = 0;
        v62[2] = 0;
        *((_DWORD *)v62 + 6) = 1065353216;
        *v62 = &off_1E2DBC858;
        *(_QWORD *)((char *)v62 + 44) = 0;
        *(_QWORD *)((char *)v62 + 36) = 0;
        *((_DWORD *)v62 + 13) = 0;
        *(_QWORD *)((char *)v62 + 28) = 0x100000000;
        *((_DWORD *)v62 + 24) = 0;
        v62[10] = 0;
        v62[11] = 0;
        v62[7] = 0;
        v62[8] = 0;
        v62[9] = _D10;
        *(_QWORD *)&v63 = v62 + 3;
        *((_QWORD *)&v63 + 1) = v62;
        v64 = *(std::__shared_weak_count **)(v53 + 48);
        *(_OWORD *)(v53 + 40) = v63;
        if (v64)
        {
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
        }
        v67 = *(_OWORD **)(v53 + 40);
        *v67 = *(_OWORD *)(v12 + 56);
        v68 = *(_OWORD *)(v12 + 72);
        v69 = *(_OWORD *)(v12 + 88);
        v70 = *(_OWORD *)(v12 + 104);
        *(_OWORD *)((char *)v67 + 60) = *(_OWORD *)(v12 + 116);
        v67[2] = v69;
        v67[3] = v70;
        v67[1] = v68;
      }
      v71 = (char *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>((uint64_t)v123, (_QWORD *)v16 + 2);
      if (v122 != v71)
      {
        v12 = (unint64_t)v71;
        v72 = (char *)operator new(0x58uLL);
        *((_QWORD *)v72 + 1) = 0;
        *((_QWORD *)v72 + 2) = 0;
        *(_QWORD *)v72 = &off_1E2DB6B60;
        *((_OWORD *)v72 + 3) = 0u;
        *((_OWORD *)v72 + 4) = 0u;
        *((_QWORD *)v72 + 10) = 0;
        *(_OWORD *)(v72 + 24) = xmmword_191A8AA80;
        *((_QWORD *)v72 + 5) = 0xFFFFFFFF00000001;
        *(_QWORD *)&v131 = v72 + 24;
        *((_QWORD *)&v131 + 1) = v72;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v53 + 8, &v131);
        v73 = (std::__shared_weak_count *)*((_QWORD *)&v131 + 1);
        if (*((_QWORD *)&v131 + 1))
        {
          v74 = (unint64_t *)(*((_QWORD *)&v131 + 1) + 8);
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = *(_QWORD *)(v53 + 8);
        v77 = *(_OWORD *)(v12 + 56);
        v78 = *(_OWORD *)(v12 + 72);
        *(_QWORD *)(v76 + 32) = *(_QWORD *)(v12 + 88);
        *(_OWORD *)v76 = v77;
        *(_OWORD *)(v76 + 16) = v78;
        if (v76 != v12 + 56)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v76 + 40), *(char **)(v12 + 96), *(_QWORD *)(v12 + 104), (uint64_t)(*(_QWORD *)(v12 + 104) - *(_QWORD *)(v12 + 96)) >> 2);
      }
      v16 = *(unsigned __int8 **)v16;
      if (!v16)
        goto LABEL_132;
    }
    v35 = (v26 & (v26 - 1)) != 0;
    if (v26 < 3)
      v35 = 1;
    v36 = v35 | (2 * v26);
    v37 = vcvtps_u32_f32(v34 / v135);
    if (v36 <= v37)
      prime = (int8x8_t)v37;
    else
      prime = (int8x8_t)v36;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v26 = (unint64_t)__p[1];
    if ((void *)*(_QWORD *)&prime > __p[1])
      goto LABEL_54;
    if ((void *)*(_QWORD *)&prime < __p[1])
    {
      v45 = vcvtps_u32_f32((float)*((unint64_t *)&v134 + 1) / v135);
      if (__p[1] < (void *)3
        || (v46 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v46.i16[0] = vaddlv_u8(v46), v46.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v45);
      }
      else
      {
        v47 = 1 << -(char)__clz(v45 - 1);
        if (v45 >= 2)
          v45 = v47;
      }
      if (*(_QWORD *)&prime <= v45)
        prime = (int8x8_t)v45;
      if (*(_QWORD *)&prime >= v26)
      {
        v26 = (unint64_t)__p[1];
      }
      else
      {
        if (prime)
        {
LABEL_54:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v39 = operator new(8 * *(_QWORD *)&prime);
          v40 = __p[0];
          __p[0] = v39;
          if (v40)
            operator delete(v40);
          v41 = 0;
          __p[1] = (void *)prime;
          do
            *((_QWORD *)__p[0] + v41++) = 0;
          while (*(_QWORD *)&prime != v41);
          v42 = (_QWORD **)v134;
          if ((_QWORD)v134)
          {
            v43 = *(_QWORD *)(v134 + 8);
            v44 = (uint8x8_t)vcnt_s8(prime);
            v44.i16[0] = vaddlv_u8(v44);
            if (v44.u32[0] > 1uLL)
            {
              if (v43 >= *(_QWORD *)&prime)
                v43 %= *(_QWORD *)&prime;
            }
            else
            {
              v43 &= *(_QWORD *)&prime - 1;
            }
            *((_QWORD *)__p[0] + v43) = &v134;
            for (i = *v42; i; v43 = v49)
            {
              v49 = i[1];
              if (v44.u32[0] > 1uLL)
              {
                if (v49 >= *(_QWORD *)&prime)
                  v49 %= *(_QWORD *)&prime;
              }
              else
              {
                v49 &= *(_QWORD *)&prime - 1;
              }
              if (v49 != v43)
              {
                if (!*((_QWORD *)__p[0] + v49))
                {
                  *((_QWORD *)__p[0] + v49) = v42;
                  goto LABEL_79;
                }
                *v42 = (_QWORD *)*i;
                *i = **((_QWORD **)__p[0] + v49);
                **((_QWORD **)__p[0] + v49) = i;
                i = v42;
              }
              v49 = v43;
LABEL_79:
              v42 = (_QWORD **)i;
              i = (_QWORD *)*i;
            }
          }
          v26 = (unint64_t)prime;
          goto LABEL_83;
        }
        v79 = __p[0];
        __p[0] = 0;
        if (v79)
          operator delete(v79);
        v26 = 0;
        __p[1] = 0;
      }
    }
LABEL_83:
    if ((v26 & (v26 - 1)) != 0)
    {
      if (v25 >= v26)
        v12 = v25 % v26;
      else
        v12 = v25;
    }
    else
    {
      v12 = (v26 - 1) & v25;
    }
    goto LABEL_88;
  }
LABEL_132:
  v80 = (unsigned __int8 *)*((_QWORD *)v121 + 80);
  for (j = (unsigned __int8 *)*((_QWORD *)v121 + 81); v80 != j; v80 += 24)
  {
    v82 = *v120;
    v83 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(__p, v80);
    if (!v83)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    Espresso::zephyr::node_t::add_output(v82, *((Espresso::zephyr::value_t **)v83 + 5));
  }
  v84 = (unsigned __int8 *)*((_QWORD *)v121 + 83);
  for (k = (unsigned __int8 *)*((_QWORD *)v121 + 84); v84 != k; v84 += 24)
  {
    v86 = *v119;
    v87 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(__p, v84);
    if (!v87)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    Espresso::zephyr::node_t::add_input(v86, *((Espresso::zephyr::value_t **)v87 + 5));
  }
  *(_QWORD *)&v131 = v121;
  *((_QWORD *)&v131 + 1) = v4;
  v132 = __p;
  v88 = *((_QWORD *)v121 + 114);
  if (v88)
  {
    if (v88 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v88);
    v91 = v89;
    v128 = (uint64_t)v4;
    v92 = (_QWORD *)*((_QWORD *)v121 + 113);
    if (v92)
    {
      v93 = &v89[24 * v90];
      v94 = (unint64_t)v89;
      do
      {
        v95 = (__int128 *)(v92 + 3);
        if (v94 >= (unint64_t)v93)
        {
          v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (_QWORD)v91) >> 3) + 1;
          if (v97 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v93 - v91) >> 3) > v97)
            v97 = 0x5555555555555556 * ((v93 - v91) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v93 - v91) >> 3) >= 0x555555555555555)
            v98 = 0xAAAAAAAAAAAAAAALL;
          else
            v98 = v97;
          if (v98)
            v98 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v98);
          else
            v99 = 0;
          v100 = *v95;
          v101 = v98 + 8 * ((uint64_t)(v94 - (_QWORD)v91) >> 3);
          *(_QWORD *)(v101 + 16) = v92[5];
          *(_OWORD *)v101 = v100;
          if ((_BYTE *)v94 == v91)
          {
            v104 = (_BYTE *)(v98 + 8 * ((uint64_t)(v94 - (_QWORD)v91) >> 3));
          }
          else
          {
            v102 = v98 + 8 * ((uint64_t)(v94 - (_QWORD)v91) >> 3);
            do
            {
              v103 = *(_OWORD *)(v94 - 24);
              v104 = (_BYTE *)(v102 - 24);
              *(_BYTE *)(v102 - 8) = *(_BYTE *)(v94 - 8);
              *(_OWORD *)(v102 - 24) = v103;
              v94 -= 24;
              v102 -= 24;
            }
            while ((_BYTE *)v94 != v91);
          }
          v93 = (char *)(v98 + 24 * v99);
          v94 = v101 + 24;
          if (v91)
            operator delete(v91);
          v91 = v104;
        }
        else
        {
          v96 = *v95;
          *(_QWORD *)(v94 + 16) = v92[5];
          *(_OWORD *)v94 = v96;
          v94 += 24;
        }
        v92 = (_QWORD *)*v92;
      }
      while (v92);
    }
    else
    {
      v94 = (unint64_t)v89;
    }
    v110 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v94 - (_QWORD)v91) >> 3));
    if ((_BYTE *)v94 == v91)
      v111 = 0;
    else
      v111 = v110;
    std::__introsort<std::_ClassicAlgPolicy,Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_1 &,Espresso::net::basic_block_t *,false>((uint64_t)v91, v94, v111, 1);
    v4 = (uint64_t *)v128;
    if ((_BYTE *)v94 != v91)
    {
      v112 = (unint64_t *)v91;
      do
      {
        std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::es_function_t *,void>(&v129, v128);
        v114 = v129;
        v113 = v130;
        std::list<std::shared_ptr<Espresso::zephyr::ordered_block_t>>::push_back((uint64_t *)(v128 + 64), (uint64_t)v129, (uint64_t)v130);
        for (m = *v112; m < v112[1]; ++m)
          Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_0::operator()((uint64_t *)&v131, v114, m);
        if (v113)
        {
          v116 = (unint64_t *)&v113->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          if (!v117)
          {
            ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
            std::__shared_weak_count::__release_weak(v113);
          }
        }
        v112 += 3;
      }
      while (v112 != (unint64_t *)v94);
    }
    if (v91)
      operator delete(v91);
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::zephyr::ordered_block_t,std::allocator<Espresso::zephyr::ordered_block_t>,Espresso::zephyr::es_function_t *,void>(&v129, (uint64_t)v4);
    v105 = v129;
    v106 = v130;
    std::list<std::shared_ptr<Espresso::zephyr::ordered_block_t>>::push_back(v4 + 8, (uint64_t)v129, (uint64_t)v130);
    if (*((_QWORD *)v121 + 5) != *((_QWORD *)v121 + 4))
    {
      v107 = 0;
      do
        Espresso::zephyr::es_function_t::es_function_t(Espresso::zephyr::context_t *,Espresso::net const&)::$_0::operator()((uint64_t *)&v131, v105, v107++);
      while (v107 < (uint64_t)(*((_QWORD *)v121 + 5) - *((_QWORD *)v121 + 4)) >> 4);
    }
    if (v106)
    {
      v108 = (unint64_t *)&v106->__shared_owners_;
      do
        v109 = __ldaxr(v108);
      while (__stlxr(v109 - 1, v108));
      if (!v109)
      {
        ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
        std::__shared_weak_count::__release_weak(v106);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)__p);
  return v4;
}

void sub_1913FBE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  Espresso::zephyr::function_t *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&__p);
  Espresso::zephyr::function_t::~function_t(v33);
  _Unwind_Resume(a1);
}

uint64_t Espresso::zephyr::match_kernel_chain(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t matched;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v13[24];
  _BYTE *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = a2[1];
  v15[0] = &off_1E2DB2D10;
  v15[1] = a2;
  v16 = v15;
  v6 = a3[3];
  if (!v6)
    goto LABEL_4;
  if ((_QWORD *)v6 != a3)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_4:
    v14 = (_BYTE *)v6;
    goto LABEL_6;
  }
  v14 = v13;
  (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v13);
LABEL_6:
  matched = Espresso::zephyr::ordered_block_t::match_simple_chain(a1, 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3), (uint64_t)v15, (uint64_t)v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = 4;
    v8 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = 4;
    v10 = v15;
    goto LABEL_15;
  }
  if (v16)
  {
    v11 = 5;
LABEL_15:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  return matched;
}

void sub_1913FC160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DB2D10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DB2D10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v6;
  const char *v7;
  size_t v8;

  v3 = *(_QWORD *)(*(_QWORD *)a3 + 8);
  if (!v3)
    return 0;
  result = *(_QWORD *)(v3 + 8);
  if (!result)
    return result;
  v6 = (_QWORD *)(**(_QWORD **)(a1 + 8) + 24 * *a2);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 272))(result);
  v8 = strlen(v7);
  if ((*((char *)v6 + 23) & 0x80000000) == 0)
  {
    if (v8 != *((unsigned __int8 *)v6 + 23))
      return 0;
    return memcmp(v6, v7, v8) == 0;
  }
  if (v8 == v6[1])
  {
    if (v8 == -1)
      std::string::__throw_out_of_range[abi:ne180100]();
    v6 = (_QWORD *)*v6;
    return memcmp(v6, v7, v8) == 0;
  }
  return 0;
}

uint64_t std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso6zephyr18match_kernel_chainERNS0_15ordered_block_tERKNSt3__16vectorINS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEENS8_ISA_EEEENS3_8functionIFbRKNS4_IPNS0_6node_tENS8_ISH_EEEEEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0,std::allocator<Espresso::zephyr::match_kernel_chain(Espresso::zephyr::ordered_block_t &,std::vector<std::string> const&,std::function<BOOL ()(std::vector<Espresso::zephyr::node_t *> const&)>)::$_0>,BOOL ()(unsigned long,Espresso::zephyr::node_t *)>::target_type()
{
}

void Espresso::zephyr::need_shape(Espresso::zephyr *this, Espresso::zephyr::value_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  void **v29;
  std::__shared_weak_count *v30;
  _QWORD v31[3];

  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
    goto LABEL_30;
  v5 = (uint64_t *)(v3 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  if (v4)
    goto LABEL_3;
  v10 = (_QWORD *)*((_QWORD *)a2 + 10);
  v11 = v10[1];
  if (!v11 || !*(_QWORD *)(v11 + 8))
  {
LABEL_30:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    return;
  }
  std::vector<Espresso::layer_shape>::vector(v31, (uint64_t)(v10[16] - v10[15]) >> 3);
  v12 = v10[15];
  if (v10[16] == v12)
  {
LABEL_22:
    (*(void (**)(void ***__return_ptr, _QWORD, _QWORD *))(**(_QWORD **)(v11 + 8) + 64))(&v29, *(_QWORD *)(v11 + 8), v31);
    v21 = ((char *)v30 - (char *)v29) >> 6;
    v22 = v10[12];
    v23 = v10[13];
    v24 = v23 - v22;
    if (v21 == (v23 - v22) >> 3)
    {
      if (v23 != v22)
      {
        v25 = 0;
        if (v21 <= 1)
          v26 = 1;
        else
          v26 = ((char *)v30 - (char *)v29) >> 6;
        while (*(Espresso::zephyr::value_t **)(v22 + 8 * v25) != a2)
        {
          if (v26 == ++v25)
            goto LABEL_35;
        }
        v27 = (char *)operator new(0x58uLL);
        *((_QWORD *)v27 + 1) = 0;
        *((_QWORD *)v27 + 2) = 0;
        *(_QWORD *)v27 = &off_1E2DB6B60;
        *((_OWORD *)v27 + 3) = 0u;
        *((_OWORD *)v27 + 4) = 0u;
        *(_OWORD *)(v27 + 24) = xmmword_191A8AA80;
        *((_QWORD *)v27 + 10) = 0;
        *((_QWORD *)v27 + 5) = 0xFFFFFFFF00000001;
        *(_QWORD *)&v28 = v27 + 24;
        *((_QWORD *)&v28 + 1) = v27;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v3 + 8, &v28);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v28);
        Espresso::layer_shape::operator=(*v5, (__int128 *)&v29[8 * v25]);
      }
    }
    else
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
    }
LABEL_35:
    *(_QWORD *)&v28 = &v29;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    v29 = (void **)v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v29);
    if (v21 == v24 >> 3)
    {
      v4 = *v5;
LABEL_3:
      v6 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)this = v4;
      *((_QWORD *)this + 1) = v6;
      if (v6)
      {
        v7 = (unint64_t *)(v6 + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
    }
  }
  else
  {
    v13 = 0;
    while (1)
    {
      Espresso::zephyr::need_shape((Espresso::zephyr *)&v29, *(Espresso::zephyr::value_t **)(v12 + 8 * v13));
      v14 = v29;
      if (v29)
      {
        v15 = v31[0] + (v13 << 6);
        v16 = *(_OWORD *)v29;
        v17 = *((_OWORD *)v29 + 1);
        *(_QWORD *)(v15 + 32) = v29[4];
        *(_OWORD *)v15 = v16;
        *(_OWORD *)(v15 + 16) = v17;
        if ((void **)v15 != v14)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(v15 + 40), (char *)v14[5], (uint64_t)v14[6], ((_BYTE *)v14[6] - (_BYTE *)v14[5]) >> 2);
      }
      else
      {
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
      }
      v18 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (!v14)
        break;
      ++v13;
      v12 = v10[15];
      if (v13 >= (v10[16] - v12) >> 3)
        goto LABEL_22;
    }
    v29 = (void **)v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

void sub_1913FC5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, char a14)
{
  a9 = &a11;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a11 = (void **)&a14;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t Espresso::layer_shape::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  if ((__int128 *)a1 != a2)
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a1 + 40), *((char **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  return a1;
}

void *Espresso::zephyr::match_simple_eltwise_unaryop(uint64_t a1, int a2)
{
  void *result;
  void *v5;
  _DWORD *v6;

  result = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(a1);
  if (result)
  {
    if (*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120) == 8
      && (v5 = result, v6 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 320))(result), *v6 == a2))
    {
      if (v6[1])
        return 0;
      else
        return v5;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *Espresso::zephyr::match_simple_activation(uint64_t a1, int a2)
{
  void *result;
  void *v5;

  result = Espresso::zephyr::cast_kernel<Espresso::generic_activation_kernel>(a1);
  if (result)
  {
    if (*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120) == 8)
    {
      v5 = result;
      if (*(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 384))(result) == a2)
        return v5;
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void *Espresso::zephyr::match_simple_eltwise_binop(uint64_t a1, unsigned int a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v10;

  v4 = Espresso::zephyr::cast_kernel<Espresso::generic_elementwise_kernel>(a1);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 320))(v4);
  if (*(_QWORD *)(a1 + 128) - *(_QWORD *)(a1 + 120) != 16 || *(_DWORD *)v6 != a2)
    return 0;
  if (a2 <= 0xD && ((1 << a2) & 0x200C) != 0)
  {
    if (*(_DWORD *)(v6 + 4))
      return 0;
    return v5;
  }
  v8 = 0;
  if (*(_DWORD *)(v6 + 4))
    v10 = 0;
  else
    v10 = *(float *)(v6 + 8) == 1.0;
  if (v10 && *(float *)(v6 + 12) == 0.0)
    return v5;
  return (void *)v8;
}

uint64_t Espresso::zephyr::match_standalone_deconv(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  void *v3;
  const char *v4;
  void *v5;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  uint64_t v10;
  Espresso *v11;
  const char *v12;
  NSObject *v13;
  _QWORD v14[2];
  _BYTE buf[12];
  __int16 v16;
  int v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)this);
  if (!v3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v4);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v16 = 1024;
        v17 = 356;
        v18 = 2080;
        v19 = "k_deconv != nullptr";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_32;
    }
    return 0;
  }
  v5 = v3;
  v6 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 384))(v3);
  if (*((_DWORD *)v6 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v16 = 1024;
        v17 = 358;
        v18 = 2080;
        v19 = "p.fused_relu == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_32:

      return 0;
    }
    return 0;
  }
  if (*((_DWORD *)v6 + 28))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v16 = 1024;
        v17 = 359;
        v18 = 2080;
        v19 = "p.has_batch_norm == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_32;
    }
    return 0;
  }
  if (*((_DWORD *)v6 + 7))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v16 = 1024;
        v17 = 360;
        v18 = 2080;
        v19 = "p.fused_tanh == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_32;
    }
    return 0;
  }
  if (*((_DWORD *)v6 + 15) != -1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v16 = 1024;
        v17 = 361;
        v18 = 2080;
        v19 = "p.fused_activation_mode == ACTIVATION_NONE";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_32;
    }
    return 0;
  }
  if (*((_QWORD *)this + 16) - *((_QWORD *)this + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v16 = 1024;
        v17 = 363;
        v18 = 2080;
        v19 = "node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_32;
    }
    return 0;
  }
  (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v5 + 456))(buf, v5);
  if (*(_QWORD *)buf)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *))(*(_QWORD *)v5 + 552))(v14, v5);
    v10 = v14[0];
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v14);
    v11 = (Espresso *)std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (!v10)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v11, v12);
        v13 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          v16 = 1024;
          v17 = 364;
          v18 = 2080;
          v19 = "k_deconv->get_weights() || k_deconv->get_f16_weights()";
          _os_log_impl(&dword_190DAF000, v13, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      return 0;
    }
  }
  return 1;
}

void sub_1913FCC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

uint64_t Espresso::zephyr::match_standalone_conv(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  void *v3;
  const char *v4;
  void *v5;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  Espresso *v9;
  const char *v10;
  uint64_t v12;
  Espresso *v13;
  const char *v14;
  NSObject *v15;
  _QWORD v16[2];
  _BYTE buf[12];
  __int16 v18;
  int v19;
  __int16 v20;
  const char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>((uint64_t)this);
  if (!v3)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(0, v4);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v18 = 1024;
        v19 = 371;
        v20 = 2080;
        v21 = "k_conv != nullptr";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_37;
    }
    return 0;
  }
  v5 = v3;
  v6 = (Espresso *)Espresso::zephyr::cast_kernel<Espresso::generic_deconvolution_kernel>((uint64_t)this);
  if (v6)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v18 = 1024;
        v19 = 373;
        v20 = 2080;
        v21 = "zephyr::cast_kernel<generic_deconvolution_kernel>(node) == nullptr";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
LABEL_37:

      return 0;
    }
    return 0;
  }
  v9 = (Espresso *)(*(uint64_t (**)(void *))(*(_QWORD *)v5 + 384))(v5);
  if (*((_DWORD *)v9 + 6))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v18 = 1024;
        v19 = 375;
        v20 = 2080;
        v21 = "p.fused_relu == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_37;
    }
    return 0;
  }
  if (*((_DWORD *)v9 + 28))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v18 = 1024;
        v19 = 376;
        v20 = 2080;
        v21 = "p.has_batch_norm == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_37;
    }
    return 0;
  }
  if (*((_DWORD *)v9 + 7))
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v18 = 1024;
        v19 = 377;
        v20 = 2080;
        v21 = "p.fused_tanh == 0";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_37;
    }
    return 0;
  }
  if (*((_DWORD *)v9 + 15) != -1)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v18 = 1024;
        v19 = 378;
        v20 = 2080;
        v21 = "p.fused_activation_mode == ACTIVATION_NONE";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_37;
    }
    return 0;
  }
  if (*((_QWORD *)this + 16) - *((_QWORD *)this + 15) != 8)
  {
    if (Espresso::zephyr::match_verbose)
    {
      Espresso::espresso_os_log_subsystem(v9, v10);
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
        v18 = 1024;
        v19 = 380;
        v20 = 2080;
        v21 = "node->inputs().size() == 1";
        _os_log_impl(&dword_190DAF000, v8, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
      }
      goto LABEL_37;
    }
    return 0;
  }
  (*(void (**)(_BYTE *__return_ptr, void *))(*(_QWORD *)v5 + 456))(buf, v5);
  if (*(_QWORD *)buf)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *))(*(_QWORD *)v5 + 552))(v16, v5);
    v12 = v16[0];
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v16);
    v13 = (Espresso *)std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)buf);
    if (!v12)
    {
      if (Espresso::zephyr::match_verbose)
      {
        Espresso::espresso_os_log_subsystem(v13, v14);
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoCore/Zephyr/zephyr_espresso_utils.mm";
          v18 = 1024;
          v19 = 381;
          v20 = 2080;
          v21 = "k_conv->get_weights() || k_conv->get_f16_weights()";
          _os_log_impl(&dword_190DAF000, v15, OS_LOG_TYPE_INFO, "ZEPHYR_MATCH_FAIL %s:%d '%s'\n", buf, 0x1Cu);
        }

      }
      return 0;
    }
  }
  return 1;
}

void sub_1913FD2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_convolution_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void *Espresso::zephyr::match_transpose_to_nchw(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  void *result;
  int32x4_t *v3;

  result = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>((uint64_t)this);
  if (result)
  {
    v3 = (int32x4_t *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 320))(result);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v3, (int32x4_t)xmmword_191A93530)))) & 1) != 0)
      return 0;
    else
      return (void *)(v3[1].i32[0] == 4);
  }
  return result;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void *Espresso::zephyr::match_transpose_to_nhwc(uint64_t a1)
{
  void *result;
  int32x4_t *v2;

  result = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(a1);
  if (result)
  {
    v2 = (int32x4_t *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 320))(result);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v2, (int32x4_t)xmmword_191A93530)))) & 1) != 0)
      return 0;
    else
      return (void *)(v2[1].i32[0] == 4);
  }
  return result;
}

void *Espresso::zephyr::match_transpose_to_seqw(uint64_t a1)
{
  void *result;
  int32x4_t *v2;

  result = Espresso::zephyr::cast_kernel<Espresso::generic_transpose_kernel>(a1);
  if (result)
  {
    v2 = (int32x4_t *)(*(uint64_t (**)(void *))(*(_QWORD *)result + 320))(result);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*v2, (int32x4_t)xmmword_191A93540)))) & 1) != 0)
      return 0;
    else
      return (void *)(v2[1].i32[0] == 0);
  }
  return result;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

uint64_t Espresso::zephyr::match_squeeze_4d_to_3d(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  void *v3;
  uint64_t v4;
  Espresso::zephyr::value_t **v5;
  Espresso::zephyr::value_t **v6;
  int v7;
  int v8;
  int v9;
  char v10;
  int v11;
  BOOL v12;
  uint64_t v14;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v3 = Espresso::zephyr::cast_kernel<Espresso::generic_squeeze_kernel>((uint64_t)this);
  if (!v3)
    return 0;
  v4 = (*(uint64_t (**)(void *))(*(_QWORD *)v3 + 320))(v3);
  v5 = (Espresso::zephyr::value_t **)*((_QWORD *)this + 15);
  v6 = (Espresso::zephyr::value_t **)*((_QWORD *)this + 16);
  if ((char *)v6 - (char *)v5 != 8)
    return 0;
  if (v6 == v5)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v7 = *(_DWORD *)v4;
  v8 = *(_DWORD *)(v4 + 4);
  v9 = *(_DWORD *)(v4 + 8);
  v10 = *(_BYTE *)(v4 + 136);
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v19, *v5);
  if (!v19)
    goto LABEL_23;
  v11 = *(_DWORD *)(v19 + 20);
  if (v11 == -1)
  {
    if (*(_DWORD *)(v19 + 16) == 1)
      v11 = 4;
    else
      v11 = 5;
  }
  v12 = v11 == 4 && v8 <= 1;
  if (!v12 || (v10 & 1) != 0)
    goto LABEL_23;
  if (!v8)
  {
    if (v7 == 2)
      goto LABEL_19;
LABEL_23:
    v14 = 0;
    goto LABEL_24;
  }
  if (v9 != -2)
    goto LABEL_23;
LABEL_19:
  v14 = 1;
LABEL_24:
  v16 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return v14;
}

uint64_t Espresso::zephyr::match_expanddims_3d_to_4d(Espresso::zephyr *this, Espresso::zephyr::node_t *a2)
{
  void *v3;
  int *v4;
  Espresso::zephyr::value_t **v5;
  Espresso::zephyr::value_t **v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v12;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v3 = Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>((uint64_t)this);
  if (!v3)
    return 0;
  v4 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)v3 + 320))(v3);
  v5 = (Espresso::zephyr::value_t **)*((_QWORD *)this + 15);
  v6 = (Espresso::zephyr::value_t **)*((_QWORD *)this + 16);
  if ((char *)v6 - (char *)v5 != 8)
    return 0;
  if (v6 == v5)
    std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
  v7 = *v4;
  v8 = v4[1];
  v9 = v4[2];
  Espresso::zephyr::need_shape((Espresso::zephyr *)&v17, *v5);
  if (!v17)
    goto LABEL_17;
  v10 = *(_DWORD *)(v17 + 20);
  if (v10 == -1)
    goto LABEL_17;
  if (v10 != 3 || v8 > 1)
    goto LABEL_17;
  if (!v8)
  {
    if (v7 == 2)
      goto LABEL_13;
LABEL_17:
    v12 = 0;
    goto LABEL_18;
  }
  if (v9 != -2)
    goto LABEL_17;
LABEL_13:
  v12 = 1;
LABEL_18:
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return v12;
}

void *Espresso::zephyr::cast_kernel<Espresso::generic_expand_dims_kernel>(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;

  if (!a1)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(const void **)(v1 + 8);
  if (!v2)
    return 0;
  if (v3)
  {
    v4 = *(std::__shared_weak_count **)(v1 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  return v3;
}

void sub_1913FDA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_lstm_atomizer::~pass_lstm_atomizer(Espresso::pass_lstm_atomizer *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_lstm_atomizer::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_lstm_atomizer::run_on_network(Espresso::pass_lstm_atomizer *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  _BOOL4 v4;
  _BOOL4 v5;
  char *v6;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  float32x4_t v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  int v28;
  std::string *v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  size_t size;
  _BYTE *v43;
  std::string *v44;
  size_t v45;
  _BYTE *v46;
  std::string *v47;
  size_t v48;
  std::string *v49;
  std::string *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char *v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t i;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t j;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  int v93;
  uint64_t k;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t m;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t n;
  uint64_t v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t ii;
  float v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  void *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t jj;
  uint64_t kk;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t mm;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  uint64_t nn;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  uint64_t i1;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  std::__shared_weak_count *v147;
  unint64_t *v148;
  unint64_t v149;
  uint64_t i2;
  void *v151;
  char *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  float v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  uint64_t i3;
  uint64_t i4;
  __int128 v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  uint64_t i5;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t i7;
  void *v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  uint64_t i6;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  std::__shared_weak_count *v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  void *v197;
  uint64_t v198;
  char *v199;
  __int128 v200;
  std::__shared_weak_count *v201;
  unint64_t *v202;
  unint64_t v203;
  void *v204;
  uint64_t v205;
  char *v206;
  __int128 v207;
  std::__shared_weak_count *v208;
  unint64_t *v209;
  unint64_t v210;
  char *v211;
  std::string *v212;
  size_t v213;
  std::string *v214;
  const std::string::value_type *v215;
  size_t v216;
  std::string *v217;
  char *v218;
  __int128 v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  size_t v223;
  _BYTE *v224;
  const std::string::value_type *v225;
  size_t v226;
  std::string *v227;
  const std::string::value_type *v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  size_t v232;
  _BYTE *v233;
  std::string *v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  void *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  unint64_t *v251;
  unint64_t v252;
  Espresso::net *v253;
  Espresso::net *v254;
  uint64_t v255;
  _QWORD *v256;
  uint64_t v257;
  std::string *v258;
  const char *v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  const void *v263;
  void *v264;
  uint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  int data;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  _QWORD *v276;
  uint64_t v277;
  uint64_t v278;
  size_t v279;
  uint64_t v280;
  uint64_t v281;
  int v282;
  const void **v283;
  unsigned __int8 *v284;
  _QWORD *v285;
  uint64_t v286;
  int v287;
  __int128 *v288;
  __int128 v289;
  char *v290;
  void *v291;
  int64_t v292;
  unint64_t v293;
  unint64_t v294;
  char *v295;
  char *v296;
  char *v297;
  char *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  __int128 v302;
  int64x2_t v303;
  void *v304;
  __int128 *v305;
  __int128 v306;
  unsigned __int8 *v307;
  std::string::size_type *v308;
  char v309;
  char *v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  const char *v315;
  uint64_t v316;
  Espresso *v317;
  NSObject *v318;
  std::vector<std::string>::const_iterator v319;
  _OWORD *v320;
  __int128 v321;
  std::vector<std::string>::pointer end;
  __int128 v323;
  const std::string::value_type *v324;
  int v325;
  NSObject *v326;
  std::vector<std::string> *v327;
  int *v328;
  _DWORD *v329;
  unint64_t v330;
  _DWORD *v331;
  unint64_t v332;
  int v333;
  _DWORD *v334;
  uint64_t v335;
  unint64_t v336;
  int64_t v337;
  unint64_t v338;
  uint64_t v339;
  _DWORD *v340;
  int v341;
  unsigned __int8 *v342;
  std::string::size_type v343;
  unsigned __int8 *v344;
  uint64_t *v345;
  int v347;
  std::string::size_type v348;
  std::string::size_type v349;
  void *v350;
  uint64_t v351;
  unint64_t v352;
  int64_t v353;
  unint64_t v354;
  uint64_t v355;
  _DWORD *v356;
  int v357;
  unint64_t v358;
  uint64_t v359;
  int *i8;
  std::string::size_type v361;
  void *v362;
  void *v363;
  char *v364;
  char *v365;
  uint64_t **v366;
  _QWORD *v367;
  uint64_t v368;
  void *v369;
  void *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  _OWORD *v374;
  Espresso::net *v375;
  uint64_t v376;
  uint64_t i9;
  char *v378;
  __int128 v379;
  const void *v380;
  int v381;
  char *v382;
  __int128 v383;
  const char *v384;
  char *v385;
  int v386;
  int v387;
  int v388;
  int v389;
  char *v390;
  id v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  void *v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t v398;
  std::__shared_weak_count *v399;
  unint64_t *v400;
  unint64_t v401;
  _DWORD *v402;
  uint64_t v403;
  uint64_t v404;
  int v405;
  int v406;
  uint64_t v407;
  uint64_t v408;
  unint64_t *v409;
  unint64_t v410;
  std::__shared_weak_count *v411;
  unint64_t *v412;
  unint64_t v413;
  int v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  std::__shared_weak_count *v418;
  unint64_t *v419;
  unint64_t v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  std::__shared_weak_count *v424;
  unint64_t *v425;
  unint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  _QWORD *v430;
  _QWORD *i10;
  char *v432;
  __int128 v433;
  const void *v434;
  char *v435;
  __int128 v436;
  std::__shared_weak_count *v437;
  unint64_t *v438;
  unint64_t v439;
  _QWORD *v440;
  _QWORD *i11;
  char *v442;
  __int128 v443;
  const void *v444;
  char *v445;
  __int128 v446;
  _QWORD *v447;
  uint64_t v448;
  char *v450;
  float32x4_t v451;
  std::__shared_weak_count *v452;
  char *v453;
  char *v454;
  int v455;
  uint64_t v456;
  int v457;
  unsigned int v458;
  Espresso::net *v459;
  int v460;
  unsigned int v461;
  char *v462;
  _BOOL4 v463;
  int v464;
  char *v465;
  int v466;
  unint64_t v467;
  Espresso::net *v468;
  uint64_t v469;
  uint64_t v470[2];
  std::string *v471;
  std::string *v472;
  std::string *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  std::__shared_weak_count *v478;
  std::string *v479;
  std::string *v480;
  std::string *v481;
  std::string *v482;
  std::string *v483;
  std::string *v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  std::string *v487;
  std::string *v488;
  std::string *v489;
  std::string *v490;
  std::string *v491;
  std::string *v492;
  uint64_t v493;
  std::__shared_weak_count *v494;
  std::string *v495;
  std::string *v496;
  std::string *v497;
  std::string *v498;
  std::string *v499;
  std::string *v500;
  uint64_t v501;
  std::__shared_weak_count *v502;
  std::string *v503;
  std::string *v504;
  std::string *v505;
  std::string *v506;
  std::string *v507;
  std::string *v508;
  uint64_t v509;
  std::__shared_weak_count *v510;
  uint64_t v511[3];
  _QWORD v512[3];
  uint64_t v513;
  std::__shared_weak_count *v514;
  uint64_t v515[3];
  _QWORD v516[3];
  uint64_t v517;
  std::__shared_weak_count *v518;
  uint64_t v519[3];
  _QWORD v520[3];
  uint64_t v521;
  std::__shared_weak_count *v522;
  std::string *v523;
  std::string *v524;
  std::string *v525;
  std::string *v526;
  std::string *v527;
  std::string *v528;
  uint64_t v529;
  std::__shared_weak_count *v530;
  std::string *v531;
  std::string *v532;
  std::string *v533;
  std::string *v534;
  std::string *v535;
  std::string *v536;
  uint64_t v537;
  std::__shared_weak_count *v538;
  std::string *v539;
  std::string *v540;
  std::string *v541;
  std::string *v542;
  std::string *v543;
  std::string *v544;
  uint64_t v545;
  std::__shared_weak_count *v546;
  std::string *v547;
  std::string *v548;
  std::string *v549;
  std::string *v550;
  std::string *v551;
  std::string *v552;
  uint64_t v553;
  std::__shared_weak_count *v554;
  std::string *v555;
  std::string *v556;
  std::string *v557;
  std::string *v558;
  std::string *v559;
  std::string *v560;
  uint64_t v561;
  std::__shared_weak_count *v562;
  void *v563[2];
  char v564;
  void *v565;
  char v566;
  char v567;
  std::string *v568;
  std::string *v569;
  std::string *v570;
  std::string *v571;
  std::string *v572;
  std::string *v573;
  uint64_t v574;
  std::__shared_weak_count *v575;
  std::string *v576;
  std::string *v577;
  std::string *v578;
  std::string *v579;
  std::string *v580;
  std::string *v581;
  uint64_t v582;
  std::__shared_weak_count *v583;
  std::string *v584;
  std::string *v585;
  std::string *v586;
  std::string *v587;
  std::string *v588;
  std::string *v589;
  uint64_t v590;
  std::__shared_weak_count *v591;
  std::string *v592;
  std::string *v593;
  std::string *v594;
  std::string *v595;
  std::string *v596;
  std::string *v597;
  uint64_t v598;
  std::__shared_weak_count *v599;
  std::string *v600;
  std::string *v601;
  std::string *v602;
  std::string *v603;
  std::string *v604;
  std::string *v605;
  uint64_t v606;
  std::__shared_weak_count *v607;
  std::string *v608;
  std::string *v609;
  std::string *v610;
  std::string *v611;
  std::string *v612;
  std::string *v613;
  uint64_t v614;
  std::__shared_weak_count *v615;
  std::string *v616;
  std::string *v617;
  std::string *v618;
  std::string *v619;
  std::string *v620;
  std::string *v621;
  uint64_t v622;
  std::__shared_weak_count *v623;
  std::string *v624;
  std::string *v625;
  std::string *v626;
  std::string *v627;
  std::string *v628;
  std::string *v629;
  uint64_t v630;
  std::__shared_weak_count *v631;
  std::string *v632;
  std::string *v633;
  std::string *v634;
  std::string *v635;
  std::string *v636;
  std::string *v637;
  uint64_t v638;
  std::__shared_weak_count *v639;
  std::string *v640;
  std::string *v641;
  std::string *v642;
  std::string *v643;
  std::string *v644;
  std::string *v645;
  uint64_t v646;
  std::__shared_weak_count *v647;
  uint64_t v648;
  std::__shared_weak_count *v649;
  uint64_t v650;
  std::__shared_weak_count *v651;
  uint64_t v652;
  std::__shared_weak_count *v653;
  uint64_t v654;
  std::__shared_weak_count *v655;
  uint64_t v656;
  std::__shared_weak_count *v657;
  uint64_t v658;
  std::__shared_weak_count *v659;
  std::string *v660;
  std::string *v661;
  std::string *v662;
  std::string *v663;
  std::string *v664;
  std::string *v665;
  uint64_t v666;
  std::__shared_weak_count *v667;
  std::string *v668;
  std::string *v669;
  std::string *v670;
  std::string *v671;
  std::string *v672;
  std::string *v673;
  uint64_t v674;
  std::__shared_weak_count *v675;
  uint64_t v676[3];
  std::string *v677;
  std::string *v678;
  std::string *v679;
  uint64_t v680;
  std::__shared_weak_count *v681;
  void *v682;
  char v683;
  char v684;
  std::string *v685;
  std::string *v686;
  std::string *v687;
  std::string *v688;
  std::string *v689;
  std::string *v690;
  uint64_t v691;
  std::__shared_weak_count *v692;
  uint64_t v693[3];
  _QWORD v694[3];
  uint64_t v695;
  std::__shared_weak_count *v696;
  uint64_t v697;
  std::__shared_weak_count *v698;
  uint64_t v699;
  std::__shared_weak_count *v700;
  uint64_t v701;
  std::__shared_weak_count *v702;
  uint64_t v703;
  std::__shared_weak_count *v704;
  uint64_t v705;
  std::__shared_weak_count *v706;
  uint64_t v707;
  std::__shared_weak_count *v708;
  _QWORD v709[2];
  std::string *v710;
  std::string *v711;
  std::string *v712;
  std::string *v713;
  std::string *v714;
  std::string *v715;
  uint64_t v716;
  std::__shared_weak_count *v717;
  char *v718;
  std::string *v719;
  unint64_t v720;
  std::string v721;
  std::string v722;
  uint64_t v723[2];
  uint64_t v724[2];
  int v725[2];
  BOOL v726;
  std::string **v727;
  char v728;
  std::string v729;
  std::string v730;
  std::vector<std::string> v731;
  void *v732[2];
  void *v733;
  int v734;
  std::string v735;
  void *v736;
  uint64_t v737;
  uint64_t v738;
  _BYTE v739[24];
  _BYTE *v740;
  std::string v741;
  std::string v742;
  uint64_t v743;
  std::string v744;
  std::string v745;
  std::string v746;
  uint64_t v747;
  std::string __sz;
  uint64_t v749;
  std::string v750;
  uint64_t v751;
  std::string v752;
  uint64_t v753;
  _BYTE buf[64];
  Espresso::net *v755;
  _QWORD v756[2];
  _QWORD v757[2];
  __int128 v758;
  std::__shared_weak_count *v759;
  uint64_t v760;
  _BYTE v761[40];
  _BYTE __p[40];
  __int128 v763;
  uint64_t v764;
  _QWORD v765[2];
  uint64_t v766;
  std::string v767;
  __int128 v768;
  _BYTE v769[24];
  uint64_t v770;

  v770 = *MEMORY[0x1E0C80C00];
  v4 = getenv("LSTM_ANE") != 0;
  v726 = v4;
  v450 = getenv("LSTM_GPU");
  if (v450)
    v5 = 0;
  else
    v5 = v4;
  v463 = v5;
  *(_QWORD *)v725 = 0;
  v459 = a2;
  if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
  {
    v453 = (char *)a2 + 96;
    v454 = (char *)a2 + 56;
    v6 = (char *)a2 + 136;
    __asm { FMOV            V0.4S, #1.0 }
    v451 = _Q0;
    __asm { FMOV            V15.2S, #1.0 }
    v462 = (char *)a2 + 136;
    while (1)
    {
      *(_QWORD *)buf = v725;
      v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)v725, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v733 = 0;
      v732[0] = 0;
      v732[1] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v732, v12[3], v12[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12[4] - v12[3]) >> 3));
      *(_QWORD *)__p = v725;
      v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v453, (unint64_t *)v725, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
      v738 = 0;
      v736 = 0;
      v737 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v736, v13[3], v13[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - v13[3]) >> 3));
      v14 = *(_QWORD *)v725;
      a2 = v459;
      v15 = *((_QWORD *)v459 + 4);
      v16 = *(_QWORD *)(v15 + 16 * *(_QWORD *)v725);
      if (*(char *)(v16 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(&v735, *(const std::string::value_type **)(v16 + 16), *(_QWORD *)(v16 + 24));
        v14 = *(_QWORD *)v725;
        v15 = *((_QWORD *)v459 + 4);
      }
      else
      {
        v735 = *(std::string *)(v16 + 16);
      }
      v17 = *(_QWORD *)(v15 + 16 * v14);
      v18 = *(const void **)(v17 + 64);
      if (v18)
      {
        if (v465)
          break;
      }
LABEL_929:
      if (SHIBYTE(v735.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v735.__r_.__value_.__l.__data_);
      *(_QWORD *)buf = &v736;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = v732;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      if (++*(_QWORD *)v725 >= (unint64_t)((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4))
        goto LABEL_932;
    }
    v19 = *(std::__shared_weak_count **)(v17 + 72);
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    v452 = v19;
    v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v465 + 384))(v465);
    if (*(_DWORD *)v22)
      _ZF = 0;
    else
      _ZF = *(_DWORD *)(v22 + 136) == 1;
    if (!_ZF
      || (v461 = *(_DWORD *)(v22 + 148), v461 > 1)
      || ((v464 = *(_DWORD *)(v22 + 16),
           v24.i64[0] = *(_QWORD *)(v22 + 20),
           *(int32x2_t *)&v24.u32[2] = vrev64_s32(*(int32x2_t *)(v22 + 8)),
           (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_191A93380, (int8x16_t)vceqq_f32(v24, v451))) & 0xF) == 0)
        ? (v25 = *(_DWORD *)(v22 + 144) == 0)
        : (v25 = 1),
          !v25 ? (v26 = (v464 & 0xFFFFFFFE) == 2) : (v26 = 0),
          v26 ? (v27 = *(_DWORD *)(v22 + 4) == 0) : (v27 = 0),
          !v27))
    {
LABEL_924:
      a2 = v459;
      if (v452)
      {
        v251 = (unint64_t *)&v452->__shared_owners_;
        do
          v252 = __ldaxr(v251);
        while (__stlxr(v252 - 1, v251));
        if (!v252)
        {
          ((void (*)(std::__shared_weak_count *))v452->__on_zero_shared)(v452);
          std::__shared_weak_count::__release_weak(v452);
        }
      }
      goto LABEL_929;
    }
    v28 = *(_DWORD *)(v22 + 76);
    Espresso::net::remove_layer(v459, v725[0]);
    *(void **)__p = v732[0];
    v460 = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v732[0], (__int128 **)__p)+ 5)+ 24);
    *(void **)__p = v732[0];
    v458 = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v732[0], (__int128 **)__p)+ 5)+ 20);
    *(void **)__p = v732[0];
    v466 = *(_DWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v6, (unsigned __int8 *)v732[0], (__int128 **)__p)+ 5)+ 16);
    std::string::basic_string[abi:ne180100]<0>(buf, "_i");
    std::string::basic_string[abi:ne180100]<0>(&buf[24], "_f");
    std::string::basic_string[abi:ne180100]<0>(&buf[48], "_o");
    std::string::basic_string[abi:ne180100]<0>(v756, "_g");
    memset(&v731, 0, sizeof(v731));
    *(_QWORD *)__p = &v731;
    __p[8] = 0;
    v731.__begin_ = (std::vector<std::string>::pointer)operator new(0x60uLL);
    v731.__end_ = v731.__begin_;
    v731.__end_cap_.__value_ = v731.__begin_ + 4;
    v29 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v731.__end_cap_, (__int128 *)buf, &v758, v731.__begin_);
    v31 = 0;
    v731.__end_ = v29;
    do
    {
      if (SHIBYTE(v757[v31]) < 0)
        operator delete((void *)v756[v31]);
      v31 -= 3;
    }
    while (v31 != -12);
    Espresso::espresso_os_log_subsystem((Espresso *)v29, v30);
    v32 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218752;
      *(_QWORD *)&buf[4] = *(_QWORD *)v725;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v460;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v458;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v466;
      _os_log_debug_impl(&dword_190DAF000, v32, OS_LOG_TYPE_DEBUG, "pass_lstm_atomizer: ilayer=%zu in_seq=%d, in_batch=%d, in_ch=%d", buf, 0x1Eu);
    }

    v33 = (std::__shared_weak_count *)*((_QWORD *)v459 + 3);
    v724[0] = *((_QWORD *)v459 + 2);
    v724[1] = (uint64_t)v33;
    if (v33)
    {
      v34 = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldxr(v34);
      while (__stxr(v35 + 1, v34));
    }
    v723[1] = 0;
    v723[0] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)buf, v724, 0, v723);
    if (v33)
    {
      v36 = (unint64_t *)&v33->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (*((char *)v732[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v730, *(const std::string::value_type **)v732[0], *((_QWORD *)v732[0] + 1));
    }
    else
    {
      v38 = *(_OWORD *)v732[0];
      v730.__r_.__value_.__r.__words[2] = *((_QWORD *)v732[0] + 2);
      *(_OWORD *)&v730.__r_.__value_.__l.__data_ = v38;
    }
    if (*((char *)v736 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v729, *(const std::string::value_type **)v736, *((_QWORD *)v736 + 1));
    }
    else
    {
      v39 = *(_OWORD *)v736;
      v729.__r_.__value_.__r.__words[2] = *((_QWORD *)v736 + 2);
      *(_OWORD *)&v729.__r_.__value_.__l.__data_ = v39;
    }
    if (*((char *)v732[0] + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v722, *(const std::string::value_type **)v732[0], *((_QWORD *)v732[0] + 1));
    }
    else
    {
      v40 = *(_OWORD *)v732[0];
      v722.__r_.__value_.__r.__words[2] = *((_QWORD *)v732[0] + 2);
      *(_OWORD *)&v722.__r_.__value_.__l.__data_ = v40;
    }
    if (*((char *)v736 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v721, *(const std::string::value_type **)v736, *((_QWORD *)v736 + 1));
    }
    else
    {
      v41 = *(_OWORD *)v736;
      v721.__r_.__value_.__r.__words[2] = *((_QWORD *)v736 + 2);
      *(_OWORD *)&v721.__r_.__value_.__l.__data_ = v41;
    }
    v719 = 0;
    v718 = 0;
    v720 = 0;
    if (v726)
    {
      *(_OWORD *)&v750.__r_.__value_.__l.__data_ = xmmword_191A93550;
      LODWORD(v750.__r_.__value_.__r.__words[2]) = 1;
      if ((v722.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v722.__r_.__value_.__r.__words[2]);
      else
        size = v722.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 3);
      if (__p[23] >= 0)
        v43 = __p;
      else
        v43 = *(_BYTE **)__p;
      if (size)
      {
        if ((v722.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44 = &v722;
        else
          v44 = (std::string *)v722.__r_.__value_.__r.__words[0];
        memmove(v43, v44, size);
      }
      *(_DWORD *)&v43[size] = 7626591;
      if (SHIBYTE(v730.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v730.__r_.__value_.__l.__data_);
      v730 = *(std::string *)__p;
      if ((v721.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(v721.__r_.__value_.__r.__words[2]);
      else
        v45 = v721.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v45 + 3);
      if (__p[23] >= 0)
        v46 = __p;
      else
        v46 = *(_BYTE **)__p;
      if (v45)
      {
        if ((v721.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &v721;
        else
          v47 = (std::string *)v721.__r_.__value_.__r.__words[0];
        memmove(v46, v47, v45);
      }
      *(_DWORD *)&v46[v45] = 7626591;
      if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v729.__r_.__value_.__l.__data_);
      v729 = *(std::string *)__p;
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose");
      if ((v730.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v48 = HIBYTE(v730.__r_.__value_.__r.__words[2]);
      else
        v48 = v730.__r_.__value_.__l.__size_;
      std::string::basic_string[abi:ne180100]((uint64_t)&v767, v48 + 16);
      if ((v767.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v49 = &v767;
      else
        v49 = (std::string *)v767.__r_.__value_.__r.__words[0];
      if (v48)
      {
        if ((v730.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v50 = &v730;
        else
          v50 = (std::string *)v730.__r_.__value_.__r.__words[0];
        memmove(v49, v50, v48);
      }
      strcpy((char *)v49 + v48, "__conv_transpose");
      if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external((std::string *)v761, v722.__r_.__value_.__l.__data_, v722.__r_.__value_.__l.__size_);
      else
        *(std::string *)v761 = v722;
      v714 = 0;
      v713 = 0;
      v715 = 0;
      v752.__r_.__value_.__r.__words[0] = (std::string::size_type)&v713;
      v752.__r_.__value_.__s.__data_[8] = 0;
      v713 = (std::string *)operator new(0x18uLL);
      v714 = v713;
      v715 = v713 + 1;
      v714 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v715, (__int128 *)v761, (__int128 *)&v761[24], v713);
      if (SHIBYTE(v730.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v752, v730.__r_.__value_.__l.__data_, v730.__r_.__value_.__l.__size_);
      else
        v752 = v730;
      v711 = 0;
      v710 = 0;
      v712 = 0;
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v710;
      __sz.__r_.__value_.__s.__data_[8] = 0;
      v710 = (std::string *)operator new(0x18uLL);
      v711 = v710;
      v712 = v710 + 1;
      v711 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v712, (__int128 *)&v752, (__int128 *)&v753, v710);
      Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v716, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v767, (uint64_t)&v750, (uint64_t)v713, (uint64_t)v714, (uint64_t *)&v710);
      v51 = v717;
      if (v717)
      {
        v52 = (unint64_t *)&v717->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
        }
      }
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v710;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
      if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v752.__r_.__value_.__l.__data_);
      v752.__r_.__value_.__r.__words[0] = (std::string::size_type)&v713;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v752);
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    v54 = 0;
    v55 = 1;
    if (v461)
      v55 = 2;
    v456 = v55;
    v457 = 4 * v28;
    if (v464 == 3)
      v56 = 18;
    else
      v56 = 17;
    v455 = v56;
    while (1)
    {
      if (v54)
        v57 = "j";
      else
        v57 = "i";
      std::string::basic_string[abi:ne180100]<0>(__p, v57);
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v752, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v461)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "y");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v750, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)__p);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      else if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v750, v729.__r_.__value_.__l.__data_, v729.__r_.__value_.__l.__size_);
      }
      else
      {
        v750 = v729;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "W_X_batch");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&__sz, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      v58 = v719;
      if ((unint64_t)v719 >= v720)
      {
        v60 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v718, (uint64_t)&v750);
      }
      else
      {
        if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v719, v750.__r_.__value_.__l.__data_, v750.__r_.__value_.__l.__size_);
        }
        else
        {
          v59 = *(_OWORD *)&v750.__r_.__value_.__l.__data_;
          v719->__r_.__value_.__r.__words[2] = v750.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
        }
        v60 = v58 + 1;
      }
      v719 = v60;
      v709[0] = &v726;
      v709[1] = buf;
      if (v726)
        v61 = 0;
      else
        v61 = v28;
      if (v726)
        v62 = 1;
      else
        v62 = v460;
      Espresso::add_constant((uint64_t *)buf, (uint64_t)&v750, v61, v458, v62, 5u, 0.0);
      std::string::basic_string[abi:ne180100]<0>(&v767, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v767);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, 1, 1u, 1u, 1u, 0.0);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v767, "max_iter");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v767);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, 1, 1u, 1u, 1u, (float)v460);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v767, "h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v767);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, v28, v458, 1u, 5u, 0.0);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      std::string::basic_string[abi:ne180100]<0>(&v767, "c");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v767);
      Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, v28, v458, 1u, 5u, 0.0);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      if (v54 == 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v767, "j");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, 1, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v767);
        Espresso::add_constant((uint64_t *)buf, (uint64_t)__p, 1, 1u, 1u, 1u, (float)(v460 - 1));
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v767.__r_.__value_.__l.__data_);
      }
      v63 = (uint64_t)&v465[16 * v54 + 624];
      if (v463)
      {
        for (i = 0; i != 4; ++i)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__sz.__r_.__value_.__l.__data_, (const void **)&v731.__begin_[i].__r_.__value_.__l.__data_, (uint64_t)__p);
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v63 + 416))(&v705);
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v63 + 408))(&v703);
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v707, (uint64_t)v709, (uint64_t)&v730, (uint64_t)__p, v466, v28, (uint64_t)&v705, (uint64_t)&v703, v28 * i);
          v65 = v708;
          if (v708)
          {
            v66 = (unint64_t *)&v708->__shared_owners_;
            do
              v67 = __ldaxr(v66);
            while (__stlxr(v67 - 1, v66));
            if (!v67)
            {
              ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
              std::__shared_weak_count::__release_weak(v65);
            }
          }
          v68 = v704;
          if (v704)
          {
            v69 = (unint64_t *)&v704->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
              std::__shared_weak_count::__release_weak(v68);
            }
          }
          v71 = v706;
          if (v706)
          {
            v72 = (unint64_t *)&v706->__shared_owners_;
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v63 + 416))(&v699);
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v63 + 408))(&v697);
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v701, (uint64_t)v709, (uint64_t)&v730, (uint64_t)&__sz, v466, v457, (uint64_t)&v699, (uint64_t)&v697, 0);
        v74 = v702;
        if (v702)
        {
          v75 = (unint64_t *)&v702->__shared_owners_;
          do
            v76 = __ldaxr(v75);
          while (__stlxr(v76 - 1, v75));
          if (!v76)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v77 = v698;
        if (v698)
        {
          v78 = (unint64_t *)&v698->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = v700;
        if (v700)
        {
          v81 = (unint64_t *)&v700->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
      }
      LODWORD(v745.__r_.__value_.__l.__data_) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_loop");
      std::string::basic_string[abi:ne180100]<0>(v761, "loop");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v761);
      memset(v694, 0, sizeof(v694));
      memset(v693, 0, sizeof(v693));
      Espresso::sequential_builder::add<Espresso::cf_loop_params_t>(&v695, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v767, (uint64_t)&v745, 0, 0, v693);
      v83 = v696;
      if (v696)
      {
        v84 = (unint64_t *)&v696->__shared_owners_;
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v693;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v694;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      *(_QWORD *)&__p[16] = 897988541;
      __p[24] = 0;
      *(_QWORD *)((char *)&v763 + 4) = 0;
      *(_QWORD *)&__p[8] = 1065353216;
      *(_QWORD *)__p = 103;
      std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
      std::string::basic_string[abi:ne180100]<0>(&v745, "check");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
      std::string::basic_string[abi:ne180100]<0>(&v744, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
      std::string::basic_string[abi:ne180100]<0>(&v742, "max_iter");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
      v689 = 0;
      v688 = 0;
      v690 = 0;
      v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v688;
      v741.__r_.__value_.__s.__data_[8] = 0;
      v688 = (std::string *)operator new(0x30uLL);
      v689 = v688;
      v690 = v688 + 2;
      v689 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v690, (__int128 *)&v767, (__int128 *)&v769[4], v688);
      std::string::basic_string[abi:ne180100]<0>(&v682, "check");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
      v686 = 0;
      v685 = 0;
      v687 = 0;
      v565 = &v685;
      v566 = 0;
      v685 = (std::string *)operator new(0x18uLL);
      v686 = v685;
      v687 = v685 + 1;
      v686 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v687, (__int128 *)&v741, (__int128 *)&v742, v685);
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v691, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)__p, (uint64_t)v688, (uint64_t)v689, (uint64_t *)&v685);
      v86 = v692;
      if (v692)
      {
        v87 = (unint64_t *)&v692->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      v565 = &v685;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
      if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v741.__r_.__value_.__l.__data_);
      if (v684 < 0)
        operator delete(v682);
      v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v688;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
      for (j = 0; j != -48; j -= 24)
      {
        if ((char)v769[j + 3] < 0)
          operator delete(*(void **)((char *)&v767 + j + 24));
      }
      if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v742.__r_.__value_.__l.__data_);
      if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v744.__r_.__value_.__l.__data_);
      if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v746.__r_.__value_.__l.__data_);
      if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v745.__r_.__value_.__l.__data_);
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_if");
      std::string::basic_string[abi:ne180100]<0>(v761, "if");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v761);
      std::string::basic_string[abi:ne180100]<0>(&v745, "check");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
      v678 = 0;
      v677 = 0;
      v679 = 0;
      v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v677;
      v744.__r_.__value_.__s.__data_[8] = 0;
      v677 = (std::string *)operator new(0x18uLL);
      v678 = v677;
      v679 = v677 + 1;
      v678 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v679, (__int128 *)&v746, (__int128 *)&v747, v677);
      memset(v676, 0, sizeof(v676));
      Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v680, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v767, (uint64_t)&v742, (uint64_t)v677, (uint64_t)v678, v676);
      v90 = v681;
      if (v681)
      {
        v91 = (unint64_t *)&v681->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (!v92)
        {
          ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
          std::__shared_weak_count::__release_weak(v90);
        }
      }
      v744.__r_.__value_.__r.__words[0] = (std::string::size_type)v676;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
      v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v677;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
      if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v746.__r_.__value_.__l.__data_);
      if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v745.__r_.__value_.__l.__data_);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v726)
        v93 = 1;
      else
        v93 = 4;
      LODWORD(v767.__r_.__value_.__l.__data_) = v93;
      HIDWORD(v767.__r_.__value_.__r.__words[2]) = 1;
      *(_OWORD *)((char *)v767.__r_.__value_.__r.__words + 4) = xmmword_191A93560;
      if (v463)
      {
        for (k = 0; k != 4; ++k)
        {
          std::string::basic_string[abi:ne180100]<0>(v761, "slice");
          std::operator+<char>();
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&__sz.__r_.__value_.__l.__data_, (const void **)&v731.__begin_[k].__r_.__value_.__l.__data_, (uint64_t)__p);
          if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[24], v752.__r_.__value_.__l.__data_, v752.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__p[24] = *(_OWORD *)&v752.__r_.__value_.__l.__data_;
            *(_QWORD *)&v763 = *((_QWORD *)&v752.__r_.__value_.__l + 2);
          }
          v672 = 0;
          v671 = 0;
          v673 = 0;
          v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v671;
          v744.__r_.__value_.__s.__data_[8] = 0;
          v671 = (std::string *)operator new(0x30uLL);
          v672 = v671;
          v673 = v671 + 2;
          v672 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v673, (__int128 *)__p, (__int128 *)((char *)&v763 + 8), v671);
          std::operator+<char>();
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v744, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
          v669 = 0;
          v668 = 0;
          v670 = 0;
          v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v668;
          v741.__r_.__value_.__s.__data_[8] = 0;
          v668 = (std::string *)operator new(0x18uLL);
          v669 = v668;
          v670 = v668 + 1;
          v669 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v670, (__int128 *)&v744, (__int128 *)&v745, v668);
          Espresso::sequential_builder::add<Espresso::slice_params_t>(&v674, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)&v767, (uint64_t)v671, (uint64_t)v672, (uint64_t *)&v668);
          v95 = v675;
          if (v675)
          {
            v96 = (unint64_t *)&v675->__shared_owners_;
            do
              v97 = __ldaxr(v96);
            while (__stlxr(v97 - 1, v96));
            if (!v97)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
          }
          v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v668;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
          if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v744.__r_.__value_.__l.__data_);
          if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v742.__r_.__value_.__l.__data_);
          v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v671;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
          for (m = 0; m != -48; m -= 24)
          {
            if (*((char *)&v763 + m + 7) < 0)
              operator delete(*(void **)&__p[m + 24]);
          }
          if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v746.__r_.__value_.__l.__data_);
          if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v745.__r_.__value_.__l.__data_);
          if ((v761[23] & 0x80000000) != 0)
            operator delete(*(void **)v761);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v761, "slice");
        std::string::basic_string[abi:ne180100]<0>(&v745, "W_x");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)__p, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        else
          *(std::string *)__p = __sz;
        if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[24], v752.__r_.__value_.__l.__data_, v752.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[24] = *(_OWORD *)&v752.__r_.__value_.__l.__data_;
          *(_QWORD *)&v763 = *((_QWORD *)&v752.__r_.__value_.__l + 2);
        }
        v664 = 0;
        v663 = 0;
        v665 = 0;
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v663;
        v744.__r_.__value_.__s.__data_[8] = 0;
        v663 = (std::string *)operator new(0x30uLL);
        v664 = v663;
        v665 = v663 + 2;
        v664 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v665, (__int128 *)__p, (__int128 *)((char *)&v763 + 8), v663);
        std::string::basic_string[abi:ne180100]<0>(&v742, "W_x");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v744, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
        v661 = 0;
        v660 = 0;
        v662 = 0;
        v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v660;
        v741.__r_.__value_.__s.__data_[8] = 0;
        v660 = (std::string *)operator new(0x18uLL);
        v661 = v660;
        v662 = v660 + 1;
        v661 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v662, (__int128 *)&v744, (__int128 *)&v745, v660);
        Espresso::sequential_builder::add<Espresso::slice_params_t>(&v666, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)&v767, (uint64_t)v663, (uint64_t)v664, (uint64_t *)&v660);
        v99 = v667;
        if (v667)
        {
          v100 = (unint64_t *)&v667->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v660;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
        if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v744.__r_.__value_.__l.__data_);
        if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v742.__r_.__value_.__l.__data_);
        v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v663;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
        for (n = 0; n != -48; n -= 24)
        {
          if (*((char *)&v763 + n + 7) < 0)
            operator delete(*(void **)&__p[n + 24]);
        }
        if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v746.__r_.__value_.__l.__data_);
        if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v745.__r_.__value_.__l.__data_);
        if ((v761[23] & 0x80000000) != 0)
          operator delete(*(void **)v761);
      }
      if (v463)
      {
        v103 = 0;
        v104 = (uint64_t)&v465[16 * v54 + 656];
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&v767, "h");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v767);
          std::operator+<char>();
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v761, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v746);
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v104 + 416))(&v656);
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v104 + 408))(&v654);
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v658, (uint64_t)v709, (uint64_t)__p, (uint64_t)v761, v28, v28, (uint64_t)&v656, (uint64_t)&v654, v28 * v103);
          v105 = v659;
          if (v659)
          {
            v106 = (unint64_t *)&v659->__shared_owners_;
            do
              v107 = __ldaxr(v106);
            while (__stlxr(v107 - 1, v106));
            if (!v107)
            {
              ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
              std::__shared_weak_count::__release_weak(v105);
            }
          }
          v108 = v655;
          if (v655)
          {
            v109 = (unint64_t *)&v655->__shared_owners_;
            do
              v110 = __ldaxr(v109);
            while (__stlxr(v110 - 1, v109));
            if (!v110)
            {
              ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
              std::__shared_weak_count::__release_weak(v108);
            }
          }
          v111 = v657;
          if (v657)
          {
            v112 = (unint64_t *)&v657->__shared_owners_;
            do
              v113 = __ldaxr(v112);
            while (__stlxr(v113 - 1, v112));
            if (!v113)
            {
              ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
              std::__shared_weak_count::__release_weak(v111);
            }
          }
          if ((v761[23] & 0x80000000) != 0)
            operator delete(*(void **)v761);
          if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v746.__r_.__value_.__l.__data_);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
          if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v767.__r_.__value_.__l.__data_);
          ++v103;
        }
        while (v103 != 4);
        v114 = 0;
        while (1)
        {
          *(_QWORD *)__p = 0;
          *(_QWORD *)&__p[8] = 1065353216;
          *(_QWORD *)&__p[16] = 897988541;
          __p[24] = 0;
          *(_QWORD *)((char *)&v763 + 4) = 0;
          if (v114 == 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
            v644 = 0;
            v643 = 0;
            v645 = 0;
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v643;
            v741.__r_.__value_.__s.__data_[8] = 0;
            v643 = (std::string *)operator new(0x30uLL);
            v644 = v643;
            v645 = v643 + 2;
            v644 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v645, (__int128 *)&v767, (__int128 *)&v769[4], v643);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
            v641 = 0;
            v640 = 0;
            v642 = 0;
            v565 = &v640;
            v566 = 0;
            v640 = (std::string *)operator new(0x18uLL);
            v641 = v640;
            v642 = v640 + 1;
            v641 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v642, (__int128 *)&v741, (__int128 *)&v742, v640);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v646, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)__p, (uint64_t)v643, (uint64_t)v644, (uint64_t *)&v640);
            v115 = v647;
            if (v647)
            {
              v116 = (unint64_t *)&v647->__shared_owners_;
              do
                v117 = __ldaxr(v116);
              while (__stlxr(v117 - 1, v116));
              if (!v117)
              {
                ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                std::__shared_weak_count::__release_weak(v115);
              }
            }
            v565 = &v640;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v684 < 0)
              operator delete(v682);
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v643;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
            for (ii = 0; ii != -48; ii -= 24)
            {
              if ((char)v769[ii + 3] < 0)
                operator delete(*(void **)((char *)&v767 + ii + 24));
            }
            if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v742.__r_.__value_.__l.__data_);
            if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v744.__r_.__value_.__l.__data_);
            if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v746.__r_.__value_.__l.__data_);
            if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v745.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
              operator delete(*(void **)v761);
            v767.__r_.__value_.__r.__words[2] = 897988541;
            LOBYTE(v768) = 0;
            *(_QWORD *)v769 = 0;
            v767.__r_.__value_.__r.__words[0] = 2;
            v767.__r_.__value_.__l.__size_ = 1065353216;
            v119 = *(float *)((*(uint64_t (**)(char *))(*(_QWORD *)v465 + 384))(v465) + 84);
            *(float *)&v767.__r_.__value_.__r.__words[1] = v119
                                                         * (float)*(int *)((*(uint64_t (**)(char *))(*(_QWORD *)v465 + 384))(v465)
                                                                         + 100);
            std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v745, "forget_bias");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v744, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
            v636 = 0;
            v635 = 0;
            v637 = 0;
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v635;
            v741.__r_.__value_.__s.__data_[8] = 0;
            v635 = (std::string *)operator new(0x18uLL);
            v636 = v635;
            v637 = v635 + 1;
            v636 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v637, (__int128 *)&v744, (__int128 *)&v745, v635);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
            v633 = 0;
            v632 = 0;
            v634 = 0;
            v565 = &v632;
            v566 = 0;
            v632 = (std::string *)operator new(0x18uLL);
            v633 = v632;
            v634 = v632 + 1;
            v633 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v634, (__int128 *)&v741, (__int128 *)&v742, v632);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v638, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)&v767, (uint64_t)v635, (uint64_t)v636, (uint64_t *)&v632);
            v120 = v639;
            if (v639)
            {
              v121 = (unint64_t *)&v639->__shared_owners_;
              do
                v122 = __ldaxr(v121);
              while (__stlxr(v122 - 1, v121));
              if (!v122)
              {
                ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                std::__shared_weak_count::__release_weak(v120);
              }
            }
            v565 = &v632;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v684 < 0)
              operator delete(v682);
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v635;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
            if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v744.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v742.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_387;
            v123 = (void *)v742.__r_.__value_.__r.__words[0];
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
            v628 = 0;
            v627 = 0;
            v629 = 0;
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v627;
            v741.__r_.__value_.__s.__data_[8] = 0;
            v627 = (std::string *)operator new(0x30uLL);
            v628 = v627;
            v629 = v627 + 2;
            v628 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v629, (__int128 *)&v767, (__int128 *)&v769[4], v627);
            std::operator+<char>();
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
            v625 = 0;
            v624 = 0;
            v626 = 0;
            v565 = &v624;
            v566 = 0;
            v624 = (std::string *)operator new(0x18uLL);
            v625 = v624;
            v626 = v624 + 1;
            v625 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v626, (__int128 *)&v741, (__int128 *)&v742, v624);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v630, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)__p, (uint64_t)v627, (uint64_t)v628, (uint64_t *)&v624);
            v124 = v631;
            if (v631)
            {
              v125 = (unint64_t *)&v631->__shared_owners_;
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
            v565 = &v624;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v684 < 0)
              operator delete(v682);
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v627;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
            for (jj = 0; jj != -48; jj -= 24)
            {
              if ((char)v769[jj + 3] < 0)
                operator delete(*(void **)((char *)&v767 + jj + 24));
            }
            if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v742.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v744.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_387;
            v123 = (void *)v744.__r_.__value_.__r.__words[0];
          }
          operator delete(v123);
LABEL_387:
          if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v746.__r_.__value_.__l.__data_);
          if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v745.__r_.__value_.__l.__data_);
          if ((v761[23] & 0x80000000) != 0)
            operator delete(*(void **)v761);
          if (++v114 == 4)
          {
            for (kk = 0; kk != 4; ++kk)
            {
              *(_OWORD *)&__p[4] = _D15;
              *(_OWORD *)&__p[20] = 0uLL;
              if (kk == 3)
              {
                *(_DWORD *)__p = 1;
              }
              else if (v464 == 3)
              {
                *(_DWORD *)__p = 7;
                *(_QWORD *)&__p[4] = 0x3F0000003E4CCCCDLL;
              }
              else
              {
                *(_DWORD *)__p = 3;
              }
              std::string::basic_string[abi:ne180100]<0>(&v767, "activation");
              std::operator+<char>();
              Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v761, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v746);
              std::operator+<char>();
              Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v745, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
              v620 = 0;
              v619 = 0;
              v621 = 0;
              v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v619;
              v742.__r_.__value_.__s.__data_[8] = 0;
              v619 = (std::string *)operator new(0x18uLL);
              v620 = v619;
              v621 = v619 + 1;
              v620 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v621, (__int128 *)&v745, (__int128 *)&v746, v619);
              std::operator+<char>();
              Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v742, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v741);
              v617 = 0;
              v616 = 0;
              v618 = 0;
              v682 = &v616;
              v683 = 0;
              v616 = (std::string *)operator new(0x18uLL);
              v617 = v616;
              v618 = v616 + 1;
              v617 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v618, (__int128 *)&v742, (__int128 *)&v743, v616);
              Espresso::sequential_builder::add<Espresso::activation_params>(&v622, (uint64_t *)buf, (uint64_t)&v767, (uint64_t)v761, (uint64_t)__p, (uint64_t)v619, (uint64_t)v620, (uint64_t *)&v616);
              v129 = v623;
              if (v623)
              {
                v130 = (unint64_t *)&v623->__shared_owners_;
                do
                  v131 = __ldaxr(v130);
                while (__stlxr(v131 - 1, v130));
                if (!v131)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
              v682 = &v616;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v682);
              if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v742.__r_.__value_.__l.__data_);
              if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v741.__r_.__value_.__l.__data_);
              v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v619;
              std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v742);
              if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v745.__r_.__value_.__l.__data_);
              if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v744.__r_.__value_.__l.__data_);
              if ((v761[23] & 0x80000000) != 0)
                operator delete(*(void **)v761);
              if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v746.__r_.__value_.__l.__data_);
              if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v767.__r_.__value_.__l.__data_);
            }
            *(_QWORD *)&__p[16] = 897988541;
            __p[24] = 0;
            *(_QWORD *)((char *)&v763 + 4) = 0;
            *(_QWORD *)&__p[8] = 1065353216;
            *(_QWORD *)__p = 1;
            std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v745, "mul_fc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
            std::string::basic_string[abi:ne180100]<0>(&v744, "act__f");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
            std::string::basic_string[abi:ne180100]<0>(&v742, "c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
            v612 = 0;
            v611 = 0;
            v613 = 0;
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
            v741.__r_.__value_.__s.__data_[8] = 0;
            v611 = (std::string *)operator new(0x30uLL);
            v612 = v611;
            v613 = v611 + 2;
            v612 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v613, (__int128 *)&v767, (__int128 *)&v769[4], v611);
            std::string::basic_string[abi:ne180100]<0>(&v682, "mul_fc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
            v609 = 0;
            v608 = 0;
            v610 = 0;
            v565 = &v608;
            v566 = 0;
            v608 = (std::string *)operator new(0x18uLL);
            v609 = v608;
            v610 = v608 + 1;
            v609 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v610, (__int128 *)&v741, (__int128 *)&v742, v608);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v614, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)__p, (uint64_t)v611, (uint64_t)v612, (uint64_t *)&v608);
            v132 = v615;
            if (v615)
            {
              v133 = (unint64_t *)&v615->__shared_owners_;
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
            v565 = &v608;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v684 < 0)
              operator delete(v682);
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v611;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
            for (mm = 0; mm != -48; mm -= 24)
            {
              if ((char)v769[mm + 3] < 0)
                operator delete(*(void **)((char *)&v767 + mm + 24));
            }
            if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v742.__r_.__value_.__l.__data_);
            if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v744.__r_.__value_.__l.__data_);
            if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v746.__r_.__value_.__l.__data_);
            if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v745.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
              operator delete(*(void **)v761);
            *(_QWORD *)&__p[16] = 897988541;
            __p[24] = 0;
            *(_QWORD *)((char *)&v763 + 4) = 0;
            *(_QWORD *)&__p[8] = 1065353216;
            *(_QWORD *)__p = 1;
            std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v745, "mul_ig");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
            std::string::basic_string[abi:ne180100]<0>(&v744, "act__i");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
            std::string::basic_string[abi:ne180100]<0>(&v742, "act__g");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
            v604 = 0;
            v603 = 0;
            v605 = 0;
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v603;
            v741.__r_.__value_.__s.__data_[8] = 0;
            v603 = (std::string *)operator new(0x30uLL);
            v604 = v603;
            v605 = v603 + 2;
            v604 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v605, (__int128 *)&v767, (__int128 *)&v769[4], v603);
            std::string::basic_string[abi:ne180100]<0>(&v682, "mul_ig");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
            v601 = 0;
            v600 = 0;
            v602 = 0;
            v565 = &v600;
            v566 = 0;
            v600 = (std::string *)operator new(0x18uLL);
            v601 = v600;
            v602 = v600 + 1;
            v601 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v602, (__int128 *)&v741, (__int128 *)&v742, v600);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v606, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)__p, (uint64_t)v603, (uint64_t)v604, (uint64_t *)&v600);
            v136 = v607;
            if (v607)
            {
              v137 = (unint64_t *)&v607->__shared_owners_;
              do
                v138 = __ldaxr(v137);
              while (__stlxr(v138 - 1, v137));
              if (!v138)
              {
                ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
                std::__shared_weak_count::__release_weak(v136);
              }
            }
            v565 = &v600;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v684 < 0)
              operator delete(v682);
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v603;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
            for (nn = 0; nn != -48; nn -= 24)
            {
              if ((char)v769[nn + 3] < 0)
                operator delete(*(void **)((char *)&v767 + nn + 24));
            }
            if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v742.__r_.__value_.__l.__data_);
            if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v744.__r_.__value_.__l.__data_);
            if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v746.__r_.__value_.__l.__data_);
            if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v745.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
              operator delete(*(void **)v761);
            *(_QWORD *)__p = 0;
            *(_QWORD *)&__p[8] = 1065353216;
            *(_QWORD *)&__p[16] = 897988541;
            __p[24] = 0;
            *(_QWORD *)((char *)&v763 + 4) = 0;
            std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v745, "add_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
            std::string::basic_string[abi:ne180100]<0>(&v744, "mul_fc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
            std::string::basic_string[abi:ne180100]<0>(&v742, "mul_ig");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
            v596 = 0;
            v595 = 0;
            v597 = 0;
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v595;
            v741.__r_.__value_.__s.__data_[8] = 0;
            v595 = (std::string *)operator new(0x30uLL);
            v596 = v595;
            v597 = v595 + 2;
            v596 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v597, (__int128 *)&v767, (__int128 *)&v769[4], v595);
            std::string::basic_string[abi:ne180100]<0>(&v682, "c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
            v593 = 0;
            v592 = 0;
            v594 = 0;
            v565 = &v592;
            v566 = 0;
            v592 = (std::string *)operator new(0x18uLL);
            v593 = v592;
            v594 = v592 + 1;
            v593 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v594, (__int128 *)&v741, (__int128 *)&v742, v592);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v598, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)__p, (uint64_t)v595, (uint64_t)v596, (uint64_t *)&v592);
            v140 = v599;
            if (v599)
            {
              v141 = (unint64_t *)&v599->__shared_owners_;
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
              if (!v142)
              {
                ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
                std::__shared_weak_count::__release_weak(v140);
              }
            }
            v565 = &v592;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v684 < 0)
              operator delete(v682);
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v595;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
            for (i1 = 0; i1 != -48; i1 -= 24)
            {
              if ((char)v769[i1 + 3] < 0)
                operator delete(*(void **)((char *)&v767 + i1 + 24));
            }
            if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v742.__r_.__value_.__l.__data_);
            if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v744.__r_.__value_.__l.__data_);
            if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v746.__r_.__value_.__l.__data_);
            if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v745.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
              operator delete(*(void **)v761);
            *(_QWORD *)&__p[4] = _D15;
            memset(&__p[12], 0, 24);
            *(_DWORD *)__p = 1;
            std::string::basic_string[abi:ne180100]<0>(&v767, "activation");
            std::string::basic_string[abi:ne180100]<0>(&v746, "tanh_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v761, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v746);
            std::string::basic_string[abi:ne180100]<0>(&v744, "c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v745, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
            v588 = 0;
            v587 = 0;
            v589 = 0;
            v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v587;
            v742.__r_.__value_.__s.__data_[8] = 0;
            v587 = (std::string *)operator new(0x18uLL);
            v588 = v587;
            v589 = v587 + 1;
            v588 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v589, (__int128 *)&v745, (__int128 *)&v746, v587);
            std::string::basic_string[abi:ne180100]<0>(&v741, "tanh_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v742, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v741);
            v585 = 0;
            v584 = 0;
            v586 = 0;
            v682 = &v584;
            v683 = 0;
            v584 = (std::string *)operator new(0x18uLL);
            v585 = v584;
            v586 = v584 + 1;
            v585 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v586, (__int128 *)&v742, (__int128 *)&v743, v584);
            Espresso::sequential_builder::add<Espresso::activation_params>(&v590, (uint64_t *)buf, (uint64_t)&v767, (uint64_t)v761, (uint64_t)__p, (uint64_t)v587, (uint64_t)v588, (uint64_t *)&v584);
            v144 = v591;
            if (v591)
            {
              v145 = (unint64_t *)&v591->__shared_owners_;
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
            v682 = &v584;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v682);
            if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v742.__r_.__value_.__l.__data_);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v587;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v742);
            if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v745.__r_.__value_.__l.__data_);
            if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v744.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
              operator delete(*(void **)v761);
            if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v746.__r_.__value_.__l.__data_);
            if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v767.__r_.__value_.__l.__data_);
            *(_QWORD *)&__p[16] = 897988541;
            __p[24] = 0;
            *(_QWORD *)((char *)&v763 + 4) = 0;
            *(_QWORD *)&__p[8] = 1065353216;
            *(_QWORD *)__p = 1;
            std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
            std::string::basic_string[abi:ne180100]<0>(&v745, "mul_otanhc");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
            std::string::basic_string[abi:ne180100]<0>(&v744, "act__o");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
            std::string::basic_string[abi:ne180100]<0>(&v742, "tanh_c");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
            v580 = 0;
            v579 = 0;
            v581 = 0;
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v579;
            v741.__r_.__value_.__s.__data_[8] = 0;
            v579 = (std::string *)operator new(0x30uLL);
            v580 = v579;
            v581 = v579 + 2;
            v580 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v581, (__int128 *)&v767, (__int128 *)&v769[4], v579);
            std::string::basic_string[abi:ne180100]<0>(&v682, "h");
            Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
            v577 = 0;
            v576 = 0;
            v578 = 0;
            v565 = &v576;
            v566 = 0;
            v576 = (std::string *)operator new(0x18uLL);
            v577 = v576;
            v578 = v576 + 1;
            v577 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v578, (__int128 *)&v741, (__int128 *)&v742, v576);
            Espresso::sequential_builder::add<Espresso::elementwise_params>(&v582, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)__p, (uint64_t)v579, (uint64_t)v580, (uint64_t *)&v576);
            v147 = v583;
            if (v583)
            {
              v148 = (unint64_t *)&v583->__shared_owners_;
              do
                v149 = __ldaxr(v148);
              while (__stlxr(v149 - 1, v148));
              if (!v149)
              {
                ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
                std::__shared_weak_count::__release_weak(v147);
              }
            }
            v565 = &v576;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
            if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v741.__r_.__value_.__l.__data_);
            if (v684 < 0)
              operator delete(v682);
            v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v579;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
            for (i2 = 0; i2 != -48; i2 -= 24)
            {
              if ((char)v769[i2 + 3] < 0)
                operator delete(*(void **)((char *)&v767 + i2 + 24));
            }
            if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v742.__r_.__value_.__l.__data_);
            if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v744.__r_.__value_.__l.__data_);
            if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v746.__r_.__value_.__l.__data_);
            if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v745.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
            {
              v151 = *(void **)v761;
              goto LABEL_583;
            }
            goto LABEL_584;
          }
        }
      }
      std::string::basic_string[abi:ne180100]<0>(&v767, "h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v767);
      std::string::basic_string[abi:ne180100]<0>(&v746, "W_h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v761, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v746);
      v152 = &v465[16 * v54];
      (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)v152 + 82) + 416))(&v650);
      (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)v152 + 82) + 408))(&v648);
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(&v652, (uint64_t)v709, (uint64_t)__p, (uint64_t)v761, v28, v457, (uint64_t)&v650, (uint64_t)&v648, 0);
      v153 = v653;
      if (v653)
      {
        v154 = (unint64_t *)&v653->__shared_owners_;
        do
          v155 = __ldaxr(v154);
        while (__stlxr(v155 - 1, v154));
        if (!v155)
        {
          ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
          std::__shared_weak_count::__release_weak(v153);
        }
      }
      v156 = v649;
      if (v649)
      {
        v157 = (unint64_t *)&v649->__shared_owners_;
        do
          v158 = __ldaxr(v157);
        while (__stlxr(v158 - 1, v157));
        if (!v158)
        {
          ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
          std::__shared_weak_count::__release_weak(v156);
        }
      }
      v159 = v651;
      if (v651)
      {
        v160 = (unint64_t *)&v651->__shared_owners_;
        do
          v161 = __ldaxr(v160);
        while (__stlxr(v161 - 1, v160));
        if (!v161)
        {
          ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
          std::__shared_weak_count::__release_weak(v159);
        }
      }
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v746.__r_.__value_.__l.__data_);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      *(_DWORD *)v761 = 0;
      *(_OWORD *)&v761[4] = _D15;
      *(_OWORD *)&v761[20] = 0uLL;
      v162 = *(float *)((*(uint64_t (**)(char *))(*(_QWORD *)v465 + 384))(v465) + 84);
      *(float *)&v761[4] = v162
                         * (float)*(int *)((*(uint64_t (**)(char *))(*(_QWORD *)v465 + 384))(v465) + 100);
      *(_DWORD *)v761 = v455;
      std::string::basic_string[abi:ne180100]<0>(&v746, "activation");
      std::string::basic_string[abi:ne180100]<0>(&v744, "ch");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v745, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
      std::string::basic_string[abi:ne180100]<0>(&v742, "W_h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
      std::string::basic_string[abi:ne180100]<0>(&v741, "W_x");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&__p[24], v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v741);
      std::string::basic_string[abi:ne180100]<0>(&v682, "c");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)((char *)&v763 + 8), v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
      v572 = 0;
      v571 = 0;
      v573 = 0;
      v767.__r_.__value_.__r.__words[0] = (std::string::size_type)&v571;
      v767.__r_.__value_.__s.__data_[8] = 0;
      v571 = (std::string *)operator new(0x48uLL);
      v572 = v571;
      v573 = v571 + 3;
      v572 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v573, (__int128 *)__p, (__int128 *)&v766, v571);
      std::string::basic_string[abi:ne180100]<0>(&v565, "c");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v565);
      std::string::basic_string[abi:ne180100]<0>(v563, "h");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&v768, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v563);
      v569 = 0;
      v568 = 0;
      v570 = 0;
      v727 = &v568;
      v728 = 0;
      v568 = (std::string *)operator new(0x30uLL);
      v569 = v568;
      v570 = v568 + 2;
      v569 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v570, (__int128 *)&v767, (__int128 *)&v769[4], v568);
      Espresso::sequential_builder::add<Espresso::activation_params>(&v574, (uint64_t *)buf, (uint64_t)&v746, (uint64_t)&v745, (uint64_t)v761, (uint64_t)v571, (uint64_t)v572, (uint64_t *)&v568);
      v163 = v575;
      if (v575)
      {
        v164 = (unint64_t *)&v575->__shared_owners_;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
        if (!v165)
        {
          ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
          std::__shared_weak_count::__release_weak(v163);
        }
      }
      v727 = &v568;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v727);
      for (i3 = 0; i3 != -48; i3 -= 24)
      {
        if ((char)v769[i3 + 3] < 0)
          operator delete(*(void **)((char *)&v767 + i3 + 24));
      }
      if (v564 < 0)
        operator delete(v563[0]);
      if (v567 < 0)
        operator delete(v565);
      v767.__r_.__value_.__r.__words[0] = (std::string::size_type)&v571;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v767);
      for (i4 = 0; i4 != -9; i4 -= 3)
      {
        if (SHIBYTE(v765[i4]) < 0)
          operator delete(*(void **)((char *)&v763 + i4 * 8 + 8));
      }
      if (v684 < 0)
        operator delete(v682);
      if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v741.__r_.__value_.__l.__data_);
      if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v742.__r_.__value_.__l.__data_);
      if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v745.__r_.__value_.__l.__data_);
      if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v744.__r_.__value_.__l.__data_);
      if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
      {
        v151 = (void *)v746.__r_.__value_.__r.__words[0];
LABEL_583:
        operator delete(v151);
      }
LABEL_584:
      if (v726)
      {
        WORD2(v741.__r_.__value_.__r.__words[0]) = 0;
        LODWORD(v741.__r_.__value_.__l.__data_) = 2;
        if (v54)
        {
          std::string::basic_string[abi:ne180100]<0>(&v767, "general_concat");
          std::string::basic_string[abi:ne180100]<0>(&v746, "scatter");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v761, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v746);
          std::string::basic_string[abi:ne180100]<0>(&v745, "h");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)__p, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
          if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[24], v750.__r_.__value_.__l.__data_, v750.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&__p[24] = *(_OWORD *)&v750.__r_.__value_.__l.__data_;
            *(_QWORD *)&v763 = *((_QWORD *)&v750.__r_.__value_.__l + 2);
          }
          v551 = 0;
          v550 = 0;
          v552 = 0;
          v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v550;
          v744.__r_.__value_.__s.__data_[8] = 0;
          v550 = (std::string *)operator new(0x30uLL);
          v551 = v550;
          v552 = v550 + 2;
          v551 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v552, (__int128 *)__p, (__int128 *)((char *)&v763 + 8), v550);
          if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v744, v750.__r_.__value_.__l.__data_, v750.__r_.__value_.__l.__size_);
          else
            v744 = v750;
          v548 = 0;
          v547 = 0;
          v549 = 0;
          v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v547;
          v742.__r_.__value_.__s.__data_[8] = 0;
          v547 = (std::string *)operator new(0x18uLL);
          v548 = v547;
          v549 = v547 + 1;
          v548 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v549, (__int128 *)&v744, (__int128 *)&v745, v547);
          Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v553, (uint64_t *)buf, (uint64_t)&v767, (uint64_t)v761, (uint64_t)&v741, (uint64_t)v550, (uint64_t)v551, (uint64_t *)&v547);
          v169 = v554;
          if (v554)
          {
            v170 = (unint64_t *)&v554->__shared_owners_;
            do
              v171 = __ldaxr(v170);
            while (__stlxr(v171 - 1, v170));
            if (!v171)
            {
              ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
              std::__shared_weak_count::__release_weak(v169);
            }
          }
          v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v547;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v742);
          if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v744.__r_.__value_.__l.__data_);
          v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v550;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
          for (i5 = 0; i5 != -48; i5 -= 24)
          {
            if (*((char *)&v763 + i5 + 7) < 0)
              operator delete(*(void **)&__p[i5 + 24]);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v767, "general_concat");
          std::string::basic_string[abi:ne180100]<0>(&v746, "scatter");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v761, 0, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v746);
          if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external((std::string *)__p, v750.__r_.__value_.__l.__data_, v750.__r_.__value_.__l.__size_);
          else
            *(std::string *)__p = v750;
          std::string::basic_string[abi:ne180100]<0>(&v745, "h");
          Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)&__p[24], 0, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
          v559 = 0;
          v558 = 0;
          v560 = 0;
          v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v558;
          v744.__r_.__value_.__s.__data_[8] = 0;
          v558 = (std::string *)operator new(0x30uLL);
          v559 = v558;
          v560 = v558 + 2;
          v559 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v560, (__int128 *)__p, (__int128 *)((char *)&v763 + 8), v558);
          if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v744, v750.__r_.__value_.__l.__data_, v750.__r_.__value_.__l.__size_);
          else
            v744 = v750;
          v556 = 0;
          v555 = 0;
          v557 = 0;
          v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v555;
          v742.__r_.__value_.__s.__data_[8] = 0;
          v555 = (std::string *)operator new(0x18uLL);
          v556 = v555;
          v557 = v555 + 1;
          v556 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v557, (__int128 *)&v744, (__int128 *)&v745, v555);
          Espresso::sequential_builder::add<Espresso::general_concat_params_t>(&v561, (uint64_t *)buf, (uint64_t)&v767, (uint64_t)v761, (uint64_t)&v741, (uint64_t)v558, (uint64_t)v559, (uint64_t *)&v555);
          v178 = v562;
          if (v562)
          {
            v179 = (unint64_t *)&v562->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
          v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v555;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v742);
          if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v744.__r_.__value_.__l.__data_);
          v744.__r_.__value_.__r.__words[0] = (std::string::size_type)&v558;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v744);
          for (i6 = 0; i6 != -48; i6 -= 24)
          {
            if (*((char *)&v763 + i6 + 7) < 0)
              operator delete(*(void **)&__p[i6 + 24]);
          }
        }
        if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v745.__r_.__value_.__l.__data_);
        if ((v761[23] & 0x80000000) != 0)
          operator delete(*(void **)v761);
        if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v746.__r_.__value_.__l.__data_);
        if ((SHIBYTE(v767.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_658;
        v177 = (void *)v767.__r_.__value_.__r.__words[0];
      }
      else
      {
        *(_QWORD *)&v168 = 0x100000001;
        *((_QWORD *)&v168 + 1) = 0x100000001;
        *(_OWORD *)&v767.__r_.__value_.__l.__data_ = v168;
        LODWORD(v767.__r_.__value_.__r.__words[2]) = -2;
        WORD2(v767.__r_.__value_.__r.__words[2]) = 256;
        v767.__r_.__value_.__s.__data_[22] = 0;
        std::string::basic_string[abi:ne180100]<0>(v761, "scatter");
        std::string::basic_string[abi:ne180100]<0>(&v745, "scatter");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
        if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external((std::string *)__p, v750.__r_.__value_.__l.__data_, v750.__r_.__value_.__l.__size_);
        else
          *(std::string *)__p = v750;
        if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p[24], v752.__r_.__value_.__l.__data_, v752.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&__p[24] = *(_OWORD *)&v752.__r_.__value_.__l.__data_;
          *(_QWORD *)&v763 = *((_QWORD *)&v752.__r_.__value_.__l + 2);
        }
        std::string::basic_string[abi:ne180100]<0>(&v744, "h");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)((char *)&v763 + 8), v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
        v543 = 0;
        v542 = 0;
        v544 = 0;
        v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v542;
        v742.__r_.__value_.__s.__data_[8] = 0;
        v542 = (std::string *)operator new(0x48uLL);
        v543 = v542;
        v544 = v542 + 3;
        v543 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v544, (__int128 *)__p, (__int128 *)&v766, v542);
        if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v742, v750.__r_.__value_.__l.__data_, v750.__r_.__value_.__l.__size_);
        else
          v742 = v750;
        v540 = 0;
        v539 = 0;
        v541 = 0;
        v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v539;
        v741.__r_.__value_.__s.__data_[8] = 0;
        v539 = (std::string *)operator new(0x18uLL);
        v540 = v539;
        v541 = v539 + 1;
        v540 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v541, (__int128 *)&v742, (__int128 *)&v743, v539);
        Espresso::sequential_builder::add<Espresso::scatter_params_t>(&v545, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)&v767, (uint64_t)v542, (uint64_t)v543, (uint64_t *)&v539);
        v173 = v546;
        if (v546)
        {
          v174 = (unint64_t *)&v546->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v539;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
        if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v742.__r_.__value_.__l.__data_);
        v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v542;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v742);
        for (i7 = 0; i7 != -9; i7 -= 3)
        {
          if (SHIBYTE(v765[i7]) < 0)
            operator delete(*(void **)((char *)&v763 + i7 * 8 + 8));
        }
        if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v744.__r_.__value_.__l.__data_);
        if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v746.__r_.__value_.__l.__data_);
        if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v745.__r_.__value_.__l.__data_);
        if ((v761[23] & 0x80000000) == 0)
          goto LABEL_658;
        v177 = *(void **)v761;
      }
      operator delete(v177);
LABEL_658:
      *(_QWORD *)&__p[16] = 897988541;
      __p[24] = 0;
      *(_QWORD *)((char *)&v763 + 4) = 0;
      *(_QWORD *)__p = 2;
      *(_QWORD *)&__p[8] = 1065353216;
      std::string::basic_string[abi:ne180100]<0>(&v767, "elementwise");
      std::string::basic_string[abi:ne180100]<0>(&v746, "inext");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()((std::string *)v761, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v746);
      std::string::basic_string[abi:ne180100]<0>(&v744, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v745, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v744);
      v535 = 0;
      v534 = 0;
      v536 = 0;
      v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v534;
      v742.__r_.__value_.__s.__data_[8] = 0;
      v534 = (std::string *)operator new(0x18uLL);
      v535 = v534;
      v536 = v534 + 1;
      v535 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v536, (__int128 *)&v745, (__int128 *)&v746, v534);
      std::string::basic_string[abi:ne180100]<0>(&v741, "i");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v742, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v741);
      v532 = 0;
      v531 = 0;
      v533 = 0;
      v682 = &v531;
      v683 = 0;
      v531 = (std::string *)operator new(0x18uLL);
      v532 = v531;
      v533 = v531 + 1;
      v532 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v533, (__int128 *)&v742, (__int128 *)&v743, v531);
      Espresso::sequential_builder::add<Espresso::elementwise_params>(&v537, (uint64_t *)buf, (uint64_t)&v767, (uint64_t)v761, (uint64_t)__p, (uint64_t)v534, (uint64_t)v535, (uint64_t *)&v531);
      v182 = v538;
      if (v538)
      {
        v183 = (unint64_t *)&v538->__shared_owners_;
        do
          v184 = __ldaxr(v183);
        while (__stlxr(v184 - 1, v183));
        if (!v184)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      v682 = &v531;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v682);
      if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v742.__r_.__value_.__l.__data_);
      if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v741.__r_.__value_.__l.__data_);
      v742.__r_.__value_.__r.__words[0] = (std::string::size_type)&v534;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v742);
      if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v745.__r_.__value_.__l.__data_);
      if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v744.__r_.__value_.__l.__data_);
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v746.__r_.__value_.__l.__data_);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      if (v54 == 1)
      {
        v767.__r_.__value_.__r.__words[2] = 897988541;
        LOBYTE(v768) = 0;
        *(_QWORD *)v769 = 0;
        v767.__r_.__value_.__r.__words[0] = 2;
        v767.__r_.__value_.__l.__size_ = 3212836864;
        std::string::basic_string[abi:ne180100]<0>(v761, "elementwise");
        std::string::basic_string[abi:ne180100]<0>(&v745, "jnext");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v746, 1, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v745);
        std::string::basic_string[abi:ne180100]<0>(&v742, "j");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v744, 1, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v742);
        v527 = 0;
        v526 = 0;
        v528 = 0;
        v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v526;
        v741.__r_.__value_.__s.__data_[8] = 0;
        v526 = (std::string *)operator new(0x18uLL);
        v527 = v526;
        v528 = v526 + 1;
        v527 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v528, (__int128 *)&v744, (__int128 *)&v745, v526);
        std::string::basic_string[abi:ne180100]<0>(&v682, "j");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v741, 1, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)&v682);
        v524 = 0;
        v523 = 0;
        v525 = 0;
        v565 = &v523;
        v566 = 0;
        v523 = (std::string *)operator new(0x18uLL);
        v524 = v523;
        v525 = v523 + 1;
        v524 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v525, (__int128 *)&v741, (__int128 *)&v742, v523);
        Espresso::sequential_builder::add<Espresso::elementwise_params>(&v529, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v746, (uint64_t)&v767, (uint64_t)v526, (uint64_t)v527, (uint64_t *)&v523);
        v185 = v530;
        if (v530)
        {
          v186 = (unint64_t *)&v530->__shared_owners_;
          do
            v187 = __ldaxr(v186);
          while (__stlxr(v187 - 1, v186));
          if (!v187)
          {
            ((void (*)(std::__shared_weak_count *))v185->__on_zero_shared)(v185);
            std::__shared_weak_count::__release_weak(v185);
          }
        }
        v565 = &v523;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v565);
        if (SHIBYTE(v741.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v741.__r_.__value_.__l.__data_);
        if (v684 < 0)
          operator delete(v682);
        v741.__r_.__value_.__r.__words[0] = (std::string::size_type)&v526;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v741);
        if (SHIBYTE(v744.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v744.__r_.__value_.__l.__data_);
        if (SHIBYTE(v742.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v742.__r_.__value_.__l.__data_);
        if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v746.__r_.__value_.__l.__data_);
        if (SHIBYTE(v745.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v745.__r_.__value_.__l.__data_);
        if ((v761[23] & 0x80000000) != 0)
          operator delete(*(void **)v761);
      }
      LODWORD(v745.__r_.__value_.__l.__data_) = 1;
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_jump");
      std::string::basic_string[abi:ne180100]<0>(v761, "jump");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v761);
      memset(v520, 0, sizeof(v520));
      memset(v519, 0, sizeof(v519));
      Espresso::sequential_builder::add<Espresso::cf_jump_params_t>(&v521, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v767, (uint64_t)&v745, 0, 0, v519);
      v188 = v522;
      if (v522)
      {
        v189 = (unint64_t *)&v522->__shared_owners_;
        do
          v190 = __ldaxr(v189);
        while (__stlxr(v190 - 1, v189));
        if (!v190)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v519;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v520;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
      std::string::basic_string[abi:ne180100]<0>(v761, "end_if");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v761);
      memset(v516, 0, sizeof(v516));
      memset(v515, 0, sizeof(v515));
      Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v517, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v767, (uint64_t)&v745, 0, 0, v515);
      v191 = v518;
      if (v518)
      {
        v192 = (unint64_t *)&v518->__shared_owners_;
        do
          v193 = __ldaxr(v192);
        while (__stlxr(v193 - 1, v192));
        if (!v193)
        {
          ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
          std::__shared_weak_count::__release_weak(v191);
        }
      }
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v515;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v516;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      std::string::basic_string[abi:ne180100]<0>(__p, "cf_end");
      std::string::basic_string[abi:ne180100]<0>(v761, "end_loop");
      Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v761);
      memset(v512, 0, sizeof(v512));
      memset(v511, 0, sizeof(v511));
      Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v513, (uint64_t *)buf, (uint64_t)__p, (uint64_t)&v767, (uint64_t)&v745, 0, 0, v511);
      v194 = v514;
      if (v514)
      {
        v195 = (unint64_t *)&v514->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
          std::__shared_weak_count::__release_weak(v194);
        }
      }
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v511;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      v746.__r_.__value_.__r.__words[0] = (std::string::size_type)v512;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
      if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v767.__r_.__value_.__l.__data_);
      v6 = v462;
      if ((v761[23] & 0x80000000) != 0)
        operator delete(*(void **)v761);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (!v463)
      {
        LODWORD(v744.__r_.__value_.__l.__data_) = 0;
        std::string::basic_string[abi:ne180100]<0>(__p, "copy");
        v197 = v736;
        std::string::basic_string[abi:ne180100]<0>(v761, "h");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v761);
        v507 = 0;
        v506 = 0;
        v508 = 0;
        v746.__r_.__value_.__r.__words[0] = (std::string::size_type)&v506;
        v746.__r_.__value_.__s.__data_[8] = 0;
        v506 = (std::string *)operator new(0x18uLL);
        v507 = v506;
        v508 = v506 + 1;
        v198 = (2 * v54) | 1;
        v507 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v508, (__int128 *)&v767, &v768, v506);
        v199 = (char *)v736 + 24 * v198;
        if (v199[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v746, *(const std::string::value_type **)v199, *((_QWORD *)v199 + 1));
        }
        else
        {
          v200 = *(_OWORD *)v199;
          v746.__r_.__value_.__r.__words[2] = *((_QWORD *)v199 + 2);
          *(_OWORD *)&v746.__r_.__value_.__l.__data_ = v200;
        }
        v504 = 0;
        v503 = 0;
        v505 = 0;
        v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v503;
        v745.__r_.__value_.__s.__data_[8] = 0;
        v503 = (std::string *)operator new(0x18uLL);
        v504 = v503;
        v505 = v503 + 1;
        v504 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v505, (__int128 *)&v746, (__int128 *)&v747, v503);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v509, (uint64_t *)buf, (uint64_t)__p, (uint64_t)v197 + 24 * v198, (uint64_t)&v744, (uint64_t)v506, (uint64_t)v507, (uint64_t *)&v503);
        v201 = v510;
        if (v510)
        {
          v202 = (unint64_t *)&v510->__shared_owners_;
          do
            v203 = __ldaxr(v202);
          while (__stlxr(v203 - 1, v202));
          if (!v203)
          {
            ((void (*)(std::__shared_weak_count *))v201->__on_zero_shared)(v201);
            std::__shared_weak_count::__release_weak(v201);
          }
        }
        v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v503;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v745);
        if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v746.__r_.__value_.__l.__data_);
        v746.__r_.__value_.__r.__words[0] = (std::string::size_type)&v506;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
        if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v767.__r_.__value_.__l.__data_);
        if ((v761[23] & 0x80000000) != 0)
          operator delete(*(void **)v761);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        std::string::basic_string[abi:ne180100]<0>(__p, "copy");
        v204 = v736;
        std::string::basic_string[abi:ne180100]<0>(v761, "c");
        Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(&v767, v54, (const void **)&v735.__r_.__value_.__l.__data_, (uint64_t)v761);
        v499 = 0;
        v498 = 0;
        v500 = 0;
        v746.__r_.__value_.__r.__words[0] = (std::string::size_type)&v498;
        v746.__r_.__value_.__s.__data_[8] = 0;
        v498 = (std::string *)operator new(0x18uLL);
        v499 = v498;
        v500 = v498 + 1;
        v205 = 2 * v54 + 2;
        v499 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v500, (__int128 *)&v767, &v768, v498);
        v206 = (char *)v736 + 24 * v205;
        if (v206[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v746, *(const std::string::value_type **)v206, *((_QWORD *)v206 + 1));
        }
        else
        {
          v207 = *(_OWORD *)v206;
          v746.__r_.__value_.__r.__words[2] = *((_QWORD *)v206 + 2);
          *(_OWORD *)&v746.__r_.__value_.__l.__data_ = v207;
        }
        v496 = 0;
        v495 = 0;
        v497 = 0;
        v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v495;
        v745.__r_.__value_.__s.__data_[8] = 0;
        v495 = (std::string *)operator new(0x18uLL);
        v496 = v495;
        v497 = v495 + 1;
        v496 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v497, (__int128 *)&v746, (__int128 *)&v747, v495);
        Espresso::sequential_builder::add<Espresso::copy_params_t>(&v501, (uint64_t *)buf, (uint64_t)__p, (uint64_t)v204 + 24 * v205, (uint64_t)&v744, (uint64_t)v498, (uint64_t)v499, (uint64_t *)&v495);
        v208 = v502;
        if (v502)
        {
          v209 = (unint64_t *)&v502->__shared_owners_;
          do
            v210 = __ldaxr(v209);
          while (__stlxr(v210 - 1, v209));
          if (!v210)
          {
            ((void (*)(std::__shared_weak_count *))v208->__on_zero_shared)(v208);
            std::__shared_weak_count::__release_weak(v208);
          }
        }
        v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v495;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v745);
        if (SHIBYTE(v746.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v746.__r_.__value_.__l.__data_);
        v746.__r_.__value_.__r.__words[0] = (std::string::size_type)&v498;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
        v6 = v462;
        if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v767.__r_.__value_.__l.__data_);
        if ((v761[23] & 0x80000000) != 0)
          operator delete(*(void **)v761);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__sz.__r_.__value_.__l.__data_);
      if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v750.__r_.__value_.__l.__data_);
      if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v752.__r_.__value_.__l.__data_);
      if (++v54 == v456)
      {
        if (v726)
        {
          v211 = v718;
          v212 = v719;
          while (v211 != (char *)v212)
          {
            if (v211[23] >= 0)
              v213 = v211[23];
            else
              v213 = *((_QWORD *)v211 + 1);
            std::string::basic_string[abi:ne180100]((uint64_t)&v767, v213 + 1);
            if ((v767.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v214 = &v767;
            else
              v214 = (std::string *)v767.__r_.__value_.__r.__words[0];
            if (v213)
            {
              if (v211[23] >= 0)
                v215 = v211;
              else
                v215 = *(const std::string::value_type **)v211;
              memmove(v214, v215, v213);
            }
            *(_WORD *)((char *)&v214->__r_.__value_.__l.__data_ + v213) = 99;
            *(_WORD *)&__p[32] = 1;
            *(_DWORD *)&__p[36] = 1;
            *(_DWORD *)__p = 0;
            *(_DWORD *)&__p[4] = v28;
            *(_DWORD *)&__p[28] = 0;
            *(_DWORD *)&__p[8] = v460;
            *(_OWORD *)&__p[12] = xmmword_191A93570;
            std::string::basic_string[abi:ne180100]<0>(v761, "reshape");
            if (v211[23] >= 0)
              v216 = v211[23];
            else
              v216 = *((_QWORD *)v211 + 1);
            std::string::basic_string[abi:ne180100]((uint64_t)&v752, v216 + 14);
            if ((v752.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v217 = &v752;
            else
              v217 = (std::string *)v752.__r_.__value_.__r.__words[0];
            if (v216)
            {
              if (v211[23] >= 0)
                v218 = v211;
              else
                v218 = *(char **)v211;
              memmove(v217, v218, v216);
            }
            strcpy((char *)v217 + v216, "__conv_reshape");
            if (v211[23] < 0)
            {
              std::string::__init_copy_ctor_external(&v750, *(const std::string::value_type **)v211, *((_QWORD *)v211 + 1));
            }
            else
            {
              v219 = *(_OWORD *)v211;
              v750.__r_.__value_.__r.__words[2] = *((_QWORD *)v211 + 2);
              *(_OWORD *)&v750.__r_.__value_.__l.__data_ = v219;
            }
            v491 = 0;
            v490 = 0;
            v492 = 0;
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v490;
            __sz.__r_.__value_.__s.__data_[8] = 0;
            v490 = (std::string *)operator new(0x18uLL);
            v491 = v490;
            v492 = v490 + 1;
            v491 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v492, (__int128 *)&v750, (__int128 *)&v751, v490);
            if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__sz, v767.__r_.__value_.__l.__data_, v767.__r_.__value_.__l.__size_);
            else
              __sz = v767;
            v488 = 0;
            v487 = 0;
            v489 = 0;
            v746.__r_.__value_.__r.__words[0] = (std::string::size_type)&v487;
            v746.__r_.__value_.__s.__data_[8] = 0;
            v487 = (std::string *)operator new(0x18uLL);
            v488 = v487;
            v489 = v487 + 1;
            v488 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v489, (__int128 *)&__sz, (__int128 *)&v749, v487);
            Espresso::sequential_builder::add<Espresso::reshape_params>(&v493, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v752, (uint64_t)__p, (uint64_t)v490, (uint64_t)v491, (uint64_t *)&v487);
            v220 = v494;
            if (v494)
            {
              v221 = (unint64_t *)&v494->__shared_owners_;
              do
                v222 = __ldaxr(v221);
              while (__stlxr(v222 - 1, v221));
              if (!v222)
              {
                ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
                std::__shared_weak_count::__release_weak(v220);
              }
            }
            v746.__r_.__value_.__r.__words[0] = (std::string::size_type)&v487;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v746);
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__sz.__r_.__value_.__l.__data_);
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v490;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
            if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v750.__r_.__value_.__l.__data_);
            if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v752.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
              operator delete(*(void **)v761);
            LODWORD(v746.__r_.__value_.__r.__words[2]) = 2;
            *(_OWORD *)&v746.__r_.__value_.__l.__data_ = xmmword_191A93580;
            if (v461)
            {
              if (v211[23] >= 0)
                v223 = v211[23];
              else
                v223 = *((_QWORD *)v211 + 1);
              std::string::basic_string[abi:ne180100]((uint64_t)__p, v223 + 3);
              if (__p[23] >= 0)
                v224 = __p;
              else
                v224 = *(_BYTE **)__p;
              if (v223)
              {
                if (v211[23] >= 0)
                  v225 = v211;
                else
                  v225 = *(const std::string::value_type **)v211;
                memmove(v224, v225, v223);
              }
              *(_DWORD *)&v224[v223] = 7626591;
            }
            else if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)__p, v721.__r_.__value_.__l.__data_, v721.__r_.__value_.__l.__size_);
            }
            else
            {
              *(std::string *)__p = v721;
            }
            std::string::basic_string[abi:ne180100]<0>(v761, "transpose");
            if (v211[23] >= 0)
              v226 = v211[23];
            else
              v226 = *((_QWORD *)v211 + 1);
            std::string::basic_string[abi:ne180100]((uint64_t)&v752, v226 + 16);
            if ((v752.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v227 = &v752;
            else
              v227 = (std::string *)v752.__r_.__value_.__r.__words[0];
            if (v226)
            {
              if (v211[23] >= 0)
                v228 = v211;
              else
                v228 = *(const std::string::value_type **)v211;
              memmove(v227, v228, v226);
            }
            strcpy((char *)v227 + v226, "__conv_transpose");
            if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&v750, v767.__r_.__value_.__l.__data_, v767.__r_.__value_.__l.__size_);
            else
              v750 = v767;
            v483 = 0;
            v482 = 0;
            v484 = 0;
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v482;
            __sz.__r_.__value_.__s.__data_[8] = 0;
            v482 = (std::string *)operator new(0x18uLL);
            v483 = v482;
            v484 = v482 + 1;
            v483 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v484, (__int128 *)&v750, (__int128 *)&v751, v482);
            if ((__p[23] & 0x80000000) != 0)
              std::string::__init_copy_ctor_external(&__sz, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
            else
              __sz = *(std::string *)__p;
            v480 = 0;
            v479 = 0;
            v481 = 0;
            v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v479;
            v745.__r_.__value_.__s.__data_[8] = 0;
            v479 = (std::string *)operator new(0x18uLL);
            v480 = v479;
            v481 = v479 + 1;
            v480 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v481, (__int128 *)&__sz, (__int128 *)&v749, v479);
            Espresso::sequential_builder::add<Espresso::transpose_params_t>(&v485, (uint64_t *)buf, (uint64_t)v761, (uint64_t)&v752, (uint64_t)&v746, (uint64_t)v482, (uint64_t)v483, (uint64_t *)&v479);
            v229 = v486;
            if (v486)
            {
              v230 = (unint64_t *)&v486->__shared_owners_;
              do
                v231 = __ldaxr(v230);
              while (__stlxr(v231 - 1, v230));
              if (!v231)
              {
                ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
                std::__shared_weak_count::__release_weak(v229);
              }
            }
            v745.__r_.__value_.__r.__words[0] = (std::string::size_type)&v479;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v745);
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__sz.__r_.__value_.__l.__data_);
            __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&v482;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__sz);
            v6 = v462;
            if (SHIBYTE(v750.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v750.__r_.__value_.__l.__data_);
            if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v752.__r_.__value_.__l.__data_);
            if ((v761[23] & 0x80000000) != 0)
              operator delete(*(void **)v761);
            std::string::operator=((std::string *)v211, (const std::string *)__p);
            if ((__p[23] & 0x80000000) != 0)
              operator delete(*(void **)__p);
            if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v767.__r_.__value_.__l.__data_);
            v211 += 24;
          }
        }
        if (v461)
        {
          BYTE4(v764) = 0;
          LOWORD(v763) = 0;
          *(_DWORD *)__p = 0;
          *(_DWORD *)&__p[32] = 0;
          std::string::basic_string[abi:ne180100]<0>(&v767, "concat");
          if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v232 = HIBYTE(v729.__r_.__value_.__r.__words[2]);
          else
            v232 = v729.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)v761, v232 + 8);
          if (v761[23] >= 0)
            v233 = v761;
          else
            v233 = *(_BYTE **)v761;
          if (v232)
          {
            if ((v729.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v234 = &v729;
            else
              v234 = (std::string *)v729.__r_.__value_.__r.__words[0];
            memmove(v233, v234, v232);
          }
          strcpy(&v233[v232], "__concat");
          v475 = 0;
          v474 = 0;
          v476 = 0;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v474, (uint64_t)v718, (uint64_t)v719, 0xAAAAAAAAAAAAAAABLL * (((char *)v719 - v718) >> 3));
          v6 = v462;
          if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v752, v721.__r_.__value_.__l.__data_, v721.__r_.__value_.__l.__size_);
          else
            v752 = v721;
          v472 = 0;
          v471 = 0;
          v473 = 0;
          v750.__r_.__value_.__r.__words[0] = (std::string::size_type)&v471;
          v750.__r_.__value_.__s.__data_[8] = 0;
          v471 = (std::string *)operator new(0x18uLL);
          v472 = v471;
          v473 = v471 + 1;
          v472 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v473, (__int128 *)&v752, (__int128 *)&v753, v471);
          Espresso::sequential_builder::add<Espresso::concat_params>(&v477, (uint64_t *)buf, (uint64_t)&v767, (uint64_t)v761, (uint64_t)__p, v474, v475, (uint64_t *)&v471);
          v235 = v478;
          if (v478)
          {
            v236 = (unint64_t *)&v478->__shared_owners_;
            do
              v237 = __ldaxr(v236);
            while (__stlxr(v237 - 1, v236));
            if (!v237)
            {
              ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
              std::__shared_weak_count::__release_weak(v235);
            }
          }
          v750.__r_.__value_.__r.__words[0] = (std::string::size_type)&v471;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v750);
          if (SHIBYTE(v752.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v752.__r_.__value_.__l.__data_);
          v752.__r_.__value_.__r.__words[0] = (std::string::size_type)&v474;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v752);
          if ((v761[23] & 0x80000000) != 0)
            operator delete(*(void **)v761);
          if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v767.__r_.__value_.__l.__data_);
        }
        memset(__p, 0, 32);
        *(_DWORD *)&__p[32] = 1065353216;
        Espresso::sequential_builder::build_and_insert_in_network((Espresso::sequential_builder *)buf, (__int128 **)v459, v725[0], (uint64_t)__p);
        std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_shape>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_shape>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_shape>>>::__deallocate_node(*(_QWORD **)&__p[16]);
        v238 = *(void **)__p;
        *(_QWORD *)__p = 0;
        if (v238)
          operator delete(v238);
        *(_QWORD *)__p = &v718;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (SHIBYTE(v721.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v721.__r_.__value_.__l.__data_);
        if (SHIBYTE(v722.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v722.__r_.__value_.__l.__data_);
        if (SHIBYTE(v729.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v729.__r_.__value_.__l.__data_);
        if (SHIBYTE(v730.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v730.__r_.__value_.__l.__data_);
        std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v760);
        v239 = v759;
        if (v759)
        {
          v240 = (unint64_t *)&v759->__shared_owners_;
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        v242 = (std::__shared_weak_count *)*((_QWORD *)&v758 + 1);
        if (*((_QWORD *)&v758 + 1))
        {
          v243 = (unint64_t *)(*((_QWORD *)&v758 + 1) + 8);
          do
            v244 = __ldaxr(v243);
          while (__stlxr(v244 - 1, v243));
          if (!v244)
          {
            ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
            std::__shared_weak_count::__release_weak(v242);
          }
        }
        v245 = (std::__shared_weak_count *)v757[0];
        if (v757[0])
        {
          v246 = (unint64_t *)(v757[0] + 8);
          do
            v247 = __ldaxr(v246);
          while (__stlxr(v247 - 1, v246));
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
            std::__shared_weak_count::__release_weak(v245);
          }
        }
        if (SHIBYTE(v756[0]) < 0)
          operator delete(*(void **)&buf[56]);
        std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&buf[16], *(_QWORD **)&buf[24]);
        v248 = *(std::__shared_weak_count **)&buf[8];
        if (*(_QWORD *)&buf[8])
        {
          v249 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
          do
            v250 = __ldaxr(v249);
          while (__stlxr(v250 - 1, v249));
          if (!v250)
          {
            ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
            std::__shared_weak_count::__release_weak(v248);
          }
        }
        *(_QWORD *)buf = &v731;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        goto LABEL_924;
      }
    }
  }
LABEL_932:
  v470[1] = 0;
  v470[0] = 0;
  Espresso::net::setup_script((uint64_t)a2, v470, 0);
  *((_BYTE *)a2 + 180) = 0;
  v468 = (Espresso::net *)((char *)a2 + 184);
  Espresso::shape_network_recursive(a2, (Espresso::net *)((char *)a2 + 184), 0, 0);
  v254 = v459;
  if (!v463)
    goto LABEL_1148;
  Espresso::util_unroll_loop(v459, v253);
  std::string::basic_string[abi:ne180100]<0>(buf, "unrolled");
  v740 = 0;
  v255 = (uint64_t)v459;
  Espresso::net::pprint((uint64_t)v459, (uint64_t)buf, (uint64_t)v739);
  v256 = v740;
  if (v740 == v739)
  {
    v257 = 4;
    v256 = v739;
    goto LABEL_937;
  }
  if (v740)
  {
    v257 = 5;
LABEL_937:
    (*(void (**)(void))(*v256 + 8 * v257))();
  }
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v737 = 0;
  v736 = 0;
  v738 = 0;
  Espresso::net::get_producers_of_blobs(v459, (uint64_t)&v767);
  memset(buf, 0, 32);
  *(_DWORD *)&buf[32] = 1065353216;
  Espresso::net::get_consumers_of_blobs(v459, buf, (uint64_t)v761);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)buf);
  v258 = (std::string *)std::vector<BOOL>::vector(&v735, (uint64_t)(*((_QWORD *)v459 + 5) - *((_QWORD *)v459 + 4)) >> 4);
  if (*((_QWORD *)v459 + 5) == *((_QWORD *)v459 + 4))
    goto LABEL_1128;
  v260 = 0;
  v261 = (uint64_t)v459 + 96;
  v469 = (uint64_t)v459 + 56;
  do
  {
    v722.__r_.__value_.__r.__words[0] = v260;
    v732[1] = 0;
    v732[0] = 0;
    v733 = 0;
    v734 = -1;
    do
    {
      v262 = *(_QWORD *)(*(_QWORD *)(v255 + 32) + 16 * v722.__r_.__value_.__r.__words[0]);
      v263 = *(const void **)(v262 + 64);
      if (!v263)
      {
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)buf = 0;
LABEL_950:
        data = -2;
        goto LABEL_959;
      }
      if (v264)
      {
        v265 = *(_QWORD *)(v262 + 72);
        *(_QWORD *)buf = v264;
        *(_QWORD *)&buf[8] = v265;
        if (v265)
        {
          v266 = (unint64_t *)(v265 + 8);
          do
            v267 = __ldxr(v266);
          while (__stxr(v267 + 1, v266));
        }
        v258 = (std::string *)(*(uint64_t (**)(void *))(*(_QWORD *)v264 + 320))(v264);
        data = (int)v258->__r_.__value_.__l.__data_;
      }
      else
      {
        *(_QWORD *)&buf[8] = 0;
        *(_QWORD *)buf = 0;
        if (!v258)
          goto LABEL_950;
        v269 = *(std::__shared_weak_count **)(v262 + 72);
        if (v269)
        {
          v270 = (unint64_t *)&v269->__shared_owners_;
          do
            v271 = __ldxr(v270);
          while (__stxr(v271 + 1, v270));
          do
            v272 = __ldaxr(v270);
          while (__stlxr(v272 - 1, v270));
          if (!v272)
          {
            ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
            std::__shared_weak_count::__release_weak(v269);
          }
        }
        data = 2;
      }
LABEL_959:
      v273 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v274 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
        }
      }
      if (data == -2 || data != v734 && v732[0] != v732[1])
        break;
      *(_QWORD *)buf = &v722;
      v258 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v261, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      if (v258[1].__r_.__value_.__r.__words[0] == v258[1].__r_.__value_.__l.__size_)
        break;
      *(_QWORD *)buf = &v722;
      v258 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v469, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      if (v258[1].__r_.__value_.__l.__size_ - v258[1].__r_.__value_.__r.__words[0] != 48
        || ((*(_QWORD *)(v735.__r_.__value_.__r.__words[0]
                       + ((v722.__r_.__value_.__r.__words[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v722.__r_.__value_.__s.__data_[0]) & 1) != 0)
      {
        break;
      }
      if (v732[0] == v732[1])
        v734 = data;
      memset(&buf[8], 0, 49);
      *(_QWORD *)buf = v722.__r_.__value_.__r.__words[0];
      *(_QWORD *)__p = &v722;
      v276 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v261, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
      std::string::operator=((std::string *)&buf[32], (const std::string *)v276[3]);
      if (v732[0] == v732[1])
      {
        *(_QWORD *)__p = &v722;
        v285 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v469, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)__p);
        if (&buf[8] != (_BYTE *)(v285 + 3))
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&buf[8], (std::string *)v285[3], (std::string *)v285[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v285[4] - v285[3]) >> 3));
        goto LABEL_999;
      }
      *(_QWORD *)__p = &v722;
      v277 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v469, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
      v278 = *(unsigned __int8 *)(v277 + 47);
      v279 = *(_QWORD *)(v277 + 32);
      if ((v278 & 0x80u) == 0)
        v280 = *(unsigned __int8 *)(v277 + 47);
      else
        v280 = *(_QWORD *)(v277 + 32);
      v281 = *((unsigned __int8 *)v732[1] - 9);
      v282 = (char)v281;
      if ((v281 & 0x80u) != 0)
        v281 = *((_QWORD *)v732[1] - 3);
      if (v280 != v281)
        goto LABEL_989;
      v283 = (const void **)(v277 + 24);
      if (v282 >= 0)
        v284 = (unsigned __int8 *)v732[1] - 32;
      else
        v284 = (unsigned __int8 *)*((_QWORD *)v732[1] - 4);
      if ((v278 & 0x80) == 0)
      {
        if (!(_DWORD)v278)
        {
LABEL_986:
          buf[56] = 1;
LABEL_994:
          v731.__begin_ = &v722;
          v288 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v469, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)&v731)[3];
          if (*((char *)v288 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v288, *((_QWORD *)v288 + 1));
          }
          else
          {
            v289 = *v288;
            *(_QWORD *)&__p[16] = *((_QWORD *)v288 + 2);
            *(_OWORD *)__p = v289;
          }
          goto LABEL_997;
        }
        while (*(unsigned __int8 *)v283 == *v284)
        {
          v283 = (const void **)((char *)v283 + 1);
          ++v284;
          if (!--v278)
            goto LABEL_986;
        }
LABEL_989:
        buf[56] = 0;
        goto LABEL_990;
      }
      v287 = memcmp(*v283, v284, v279);
      buf[56] = v287 == 0;
      if (!v287)
        goto LABEL_994;
LABEL_990:
      v731.__begin_ = &v722;
      v286 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v469, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)&v731)[3];
      if (*(char *)(v286 + 47) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v286 + 24), *(_QWORD *)(v286 + 32));
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)(v286 + 24);
        *(_QWORD *)&__p[16] = *(_QWORD *)(v286 + 40);
      }
LABEL_997:
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>((std::vector<std::string> *)&buf[8], (std::string *)__p, (__int128 *)&__p[24], 1uLL);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
LABEL_999:
      v290 = (char *)v732[1];
      if (v732[1] >= v733)
      {
        v292 = ((char *)v732[1] - (char *)v732[0]) >> 6;
        if ((unint64_t)(v292 + 1) >> 58)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v293 = (int64_t)((uint64_t)v733 - (unint64_t)v732[0]) >> 5;
        if (v293 <= v292 + 1)
          v293 = v292 + 1;
        if ((unint64_t)v733 - (unint64_t)v732[0] >= 0x7FFFFFFFFFFFFFC0)
          v294 = 0x3FFFFFFFFFFFFFFLL;
        else
          v294 = v293;
        *(_QWORD *)&__p[32] = &v733;
        if (v294)
        {
          if (v294 >> 58)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v295 = (char *)operator new(v294 << 6);
        }
        else
        {
          v295 = 0;
        }
        *(_QWORD *)__p = v295;
        *(_QWORD *)&__p[8] = &v295[64 * v292];
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        *(_QWORD *)&__p[24] = &v295[64 * v294];
        std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::construct[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,util_chain_concats(Espresso::net &,BOOL)::concat_chain_element const&,void>(*(uint64_t *)&__p[8], (uint64_t)buf);
        v296 = *(char **)&__p[8];
        v291 = (void *)(*(_QWORD *)&__p[16] + 64);
        *(_QWORD *)&__p[16] += 64;
        v297 = (char *)v732[1];
        v298 = (char *)v732[0];
        if (v732[1] == v732[0])
        {
          v303 = vdupq_n_s64((unint64_t)v732[1]);
        }
        else
        {
          v299 = 0;
          do
          {
            v300 = &v296[v299];
            v301 = &v297[v299];
            *((_QWORD *)v300 - 8) = *(_QWORD *)&v297[v299 - 64];
            *((_QWORD *)v300 - 7) = 0;
            *((_QWORD *)v300 - 6) = 0;
            *((_QWORD *)v300 - 5) = 0;
            *(_OWORD *)(v300 - 56) = *(_OWORD *)&v297[v299 - 56];
            *((_QWORD *)v300 - 5) = *(_QWORD *)&v297[v299 - 40];
            *((_QWORD *)v301 - 7) = 0;
            *((_QWORD *)v301 - 6) = 0;
            *((_QWORD *)v301 - 5) = 0;
            v302 = *(_OWORD *)&v297[v299 - 32];
            *((_QWORD *)v300 - 2) = *(_QWORD *)&v297[v299 - 16];
            *((_OWORD *)v300 - 2) = v302;
            *((_QWORD *)v301 - 3) = 0;
            *((_QWORD *)v301 - 2) = 0;
            *((_QWORD *)v301 - 4) = 0;
            *(v300 - 8) = v297[v299 - 8];
            v299 -= 64;
          }
          while (&v297[v299] != v298);
          v296 += v299;
          v303 = *(int64x2_t *)v732;
          v291 = *(void **)&__p[16];
        }
        v732[0] = v296;
        v732[1] = v291;
        *(int64x2_t *)&__p[8] = v303;
        v304 = v733;
        v733 = *(void **)&__p[24];
        *(_QWORD *)&__p[24] = v304;
        *(_QWORD *)__p = v303.i64[0];
        std::__split_buffer<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element> &>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::construct[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,util_chain_concats(Espresso::net &,BOOL)::concat_chain_element const&,void>((uint64_t)v732[1], (uint64_t)buf);
        v291 = v290 + 64;
      }
      v732[1] = v291;
      *(_QWORD *)(v735.__r_.__value_.__r.__words[0] + ((v722.__r_.__value_.__r.__words[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v722.__r_.__value_.__s.__data_[0];
      v731.__begin_ = &v722;
      v305 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v261, (unint64_t *)&v722, (uint64_t)&std::piecewise_construct, (uint64_t **)&v731)[3];
      if (*((char *)v305 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v305, *((_QWORD *)v305 + 1));
      }
      else
      {
        v306 = *v305;
        *(_QWORD *)&__p[16] = *((_QWORD *)v305 + 2);
        *(_OWORD *)__p = v306;
      }
      v307 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v761, __p);
      if (v307 && (v308 = (std::string::size_type *)*((_QWORD *)v307 + 5), *((_QWORD *)v307 + 6) - (_QWORD)v308 == 8))
      {
        v722.__r_.__value_.__r.__words[0] = *v308;
        v309 = 1;
      }
      else
      {
        v309 = 0;
      }
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if ((buf[55] & 0x80000000) != 0)
        operator delete(*(void **)&buf[32]);
      *(_QWORD *)__p = &buf[8];
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    while ((v309 & 1) != 0);
    v467 = v260;
    v310 = (char *)v732[1];
    v311 = (char *)v732[0];
    if ((void *)((char *)v732[1] - (char *)v732[0]) < (void *)0x41)
    {
      v255 = (uint64_t)v459;
      v330 = v467;
      if (v732[0])
        goto LABEL_1119;
    }
    else
    {
      memset(&v731, 0, sizeof(v731));
      memset(&v730, 0, sizeof(v730));
      if (v732[0] != v732[1])
      {
        do
        {
          v312 = *((_QWORD *)v311 + 1);
          v313 = *((_QWORD *)v311 + 2);
          while (v312 != v313)
          {
            *(_QWORD *)__p = v312;
            v314 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v459 + 136, (unsigned __int8 *)v312, (__int128 **)__p);
            Espresso::abstract_blob_container::shape(buf, *((_QWORD *)v314 + 5));
            v316 = Espresso::layer_shape::total_dim((Espresso::layer_shape *)buf);
            v317 = *(Espresso **)&buf[40];
            if (*(_QWORD *)&buf[40])
            {
              *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
              operator delete(*(void **)&buf[40]);
            }
            Espresso::espresso_os_log_subsystem(v317, v315);
            v318 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v318, OS_LOG_TYPE_DEBUG))
            {
              v324 = (const std::string::value_type *)v312;
              if (*(char *)(v312 + 23) < 0)
                v324 = *(const std::string::value_type **)v312;
              v325 = v311[56];
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v324;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v325;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v316 < 1;
              _os_log_debug_impl(&dword_190DAF000, v318, OS_LOG_TYPE_DEBUG, "concat_chain: bottom=%s on_left=%d empty=%d", buf, 0x18u);
            }

            if (v316 < 1)
            {
              v320 = (_OWORD *)v730.__r_.__value_.__l.__size_;
              if (v730.__r_.__value_.__l.__size_ >= v730.__r_.__value_.__r.__words[2])
              {
                v258 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v730.__r_.__value_.__l.__data_, v312);
              }
              else
              {
                if (*(char *)(v312 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v730.__r_.__value_.__l.__size_, *(const std::string::value_type **)v312, *(_QWORD *)(v312 + 8));
                }
                else
                {
                  v321 = *(_OWORD *)v312;
                  *(_QWORD *)(v730.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)(v312 + 16);
                  *v320 = v321;
                }
                v258 = (std::string *)((char *)v320 + 24);
              }
              v730.__r_.__value_.__l.__size_ = (std::string::size_type)v258;
            }
            else if (v311[56])
            {
              v319.__i_ = v731.__begin_;
              v258 = std::vector<std::string>::insert(&v731, v319, (std::vector<std::string>::const_reference)v312).__i_;
            }
            else
            {
              end = v731.__end_;
              if (v731.__end_ >= v731.__end_cap_.__value_)
              {
                v258 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v731, v312);
              }
              else
              {
                if (*(char *)(v312 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external(v731.__end_, *(const std::string::value_type **)v312, *(_QWORD *)(v312 + 8));
                }
                else
                {
                  v323 = *(_OWORD *)v312;
                  v731.__end_->__r_.__value_.__r.__words[2] = *(_QWORD *)(v312 + 16);
                  *(_OWORD *)&end->__r_.__value_.__l.__data_ = v323;
                }
                v258 = end + 1;
              }
              v731.__end_ = v258;
            }
            v312 += 24;
          }
          v311 += 64;
        }
        while (v311 != v310);
        v310 = (char *)v732[1];
      }
      v721.__r_.__value_.__r.__words[0] = 0;
      v721.__r_.__value_.__r.__words[0] = *((_QWORD *)v310 - 8);
      Espresso::espresso_os_log_subsystem((Espresso *)v258, v259);
      v326 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v326, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)__p = &v721;
        v366 = (uint64_t **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v261, (unint64_t *)&v721, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)[3];
        if (*((char *)v366 + 23) < 0)
          v366 = (uint64_t **)*v366;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v366;
        _os_log_debug_impl(&dword_190DAF000, v326, OS_LOG_TYPE_DEBUG, "concat_chain: last_top=%s", buf, 0xCu);
      }

      *(_QWORD *)__p = &v721;
      v327 = (std::vector<std::string> *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v469, (unint64_t *)&v721, (uint64_t)&std::piecewise_construct, (uint64_t **)__p)+ 3);
      if (v327 != &v731)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v327, v731.__begin_, v731.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v731.__end_ - (char *)v731.__begin_) >> 3));
      v328 = 0;
      memset(&v729, 0, sizeof(v729));
      v329 = v732[0];
      v255 = (uint64_t)v459;
      v330 = v467;
      if ((void *)((char *)v732[1] - (char *)v732[0]) != (void *)64)
      {
        v331 = 0;
        v332 = 0;
        do
        {
          v333 = v329[16 * v332];
          if ((unint64_t)v331 >= v729.__r_.__value_.__r.__words[2])
          {
            v334 = (_DWORD *)v729.__r_.__value_.__r.__words[0];
            v335 = (uint64_t)((uint64_t)v331 - v729.__r_.__value_.__r.__words[0]) >> 2;
            v336 = v335 + 1;
            if ((unint64_t)(v335 + 1) >> 62)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v337 = v729.__r_.__value_.__r.__words[2] - v729.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v729.__r_.__value_.__r.__words[2] - v729.__r_.__value_.__r.__words[0]) >> 1 > v336)
              v336 = v337 >> 1;
            _CF = (unint64_t)v337 >= 0x7FFFFFFFFFFFFFFCLL;
            v338 = 0x3FFFFFFFFFFFFFFFLL;
            if (!_CF)
              v338 = v336;
            if (v338)
            {
              v338 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v338);
              v331 = (_DWORD *)v729.__r_.__value_.__l.__size_;
              v334 = (_DWORD *)v729.__r_.__value_.__r.__words[0];
            }
            else
            {
              v339 = 0;
            }
            v340 = (_DWORD *)(v338 + 4 * v335);
            *v340 = v333;
            v328 = v340 + 1;
            while (v331 != v334)
            {
              v341 = *--v331;
              *--v340 = v341;
            }
            v729.__r_.__value_.__r.__words[0] = (std::string::size_type)v340;
            v729.__r_.__value_.__l.__size_ = (std::string::size_type)v328;
            v729.__r_.__value_.__r.__words[2] = v338 + 4 * v339;
            if (v334)
              operator delete(v334);
          }
          else
          {
            *v331 = v333;
            v328 = v331 + 1;
          }
          v729.__r_.__value_.__l.__size_ = (std::string::size_type)v328;
          ++v332;
          v329 = v732[0];
          v331 = v328;
        }
        while (v332 < (((char *)v732[1] - (char *)v732[0]) >> 6) - 1);
      }
      v343 = v730.__r_.__value_.__l.__size_;
      v342 = (unsigned __int8 *)v730.__r_.__value_.__r.__words[0];
      if (v730.__r_.__value_.__r.__words[0] != v730.__r_.__value_.__l.__size_)
      {
        do
        {
          v344 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v761, v342);
          v345 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>(&v767, (uint64_t)v342);
          if (v344)
          {
            if (*((_QWORD *)v344 + 6) - *((_QWORD *)v344 + 5) == 8 && v345 != 0)
            {
              v347 = *((_DWORD *)v345 + 10);
              v348 = v729.__r_.__value_.__l.__size_;
              if (v729.__r_.__value_.__l.__size_ >= v729.__r_.__value_.__r.__words[2])
              {
                v350 = (void *)v729.__r_.__value_.__r.__words[0];
                v351 = (uint64_t)(v729.__r_.__value_.__l.__size_ - v729.__r_.__value_.__r.__words[0]) >> 2;
                v352 = v351 + 1;
                if ((unint64_t)(v351 + 1) >> 62)
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                v353 = v729.__r_.__value_.__r.__words[2] - v729.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v729.__r_.__value_.__r.__words[2] - v729.__r_.__value_.__r.__words[0]) >> 1 > v352)
                  v352 = v353 >> 1;
                _CF = (unint64_t)v353 >= 0x7FFFFFFFFFFFFFFCLL;
                v354 = 0x3FFFFFFFFFFFFFFFLL;
                if (!_CF)
                  v354 = v352;
                if (v354)
                {
                  v354 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v354);
                  v348 = v729.__r_.__value_.__l.__size_;
                  v350 = (void *)v729.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v355 = 0;
                }
                v356 = (_DWORD *)(v354 + 4 * v351);
                *v356 = v347;
                v349 = (std::string::size_type)(v356 + 1);
                while ((void *)v348 != v350)
                {
                  v357 = *(_DWORD *)(v348 - 4);
                  v348 -= 4;
                  *--v356 = v357;
                }
                v729.__r_.__value_.__r.__words[0] = (std::string::size_type)v356;
                v729.__r_.__value_.__l.__size_ = v349;
                v729.__r_.__value_.__r.__words[2] = v354 + 4 * v355;
                if (v350)
                  operator delete(v350);
              }
              else
              {
                *(_DWORD *)v729.__r_.__value_.__l.__size_ = v347;
                v349 = v348 + 4;
              }
              v729.__r_.__value_.__l.__size_ = v349;
            }
          }
          v342 += 24;
        }
        while (v342 != (unsigned __int8 *)v343);
        v328 = (int *)v729.__r_.__value_.__l.__size_;
      }
      v358 = 126 - 2 * __clz((uint64_t)((uint64_t)v328 - v729.__r_.__value_.__r.__words[0]) >> 2);
      if (v328 == (int *)v729.__r_.__value_.__l.__data_)
        v359 = 0;
      else
        v359 = v358;
      std::__introsort<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *,false>((int *)v729.__r_.__value_.__l.__data_, v328, v359, 1);
      v361 = v729.__r_.__value_.__l.__size_;
      for (i8 = (int *)v729.__r_.__value_.__r.__words[0]; i8 != (int *)v361; ++i8)
        Espresso::net::remove_layer(v459, *i8);
      Espresso::net::get_producers_of_blobs(v459, (uint64_t)buf);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__move_assign((uint64_t)&v767, (uint64_t *)buf);
      std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node(*(void ***)&buf[16]);
      v362 = *(void **)buf;
      *(_QWORD *)buf = 0;
      if (v362)
        operator delete(v362);
      memset(__p, 0, 32);
      *(_DWORD *)&__p[32] = 1065353216;
      Espresso::net::get_consumers_of_blobs(v459, __p, (uint64_t)buf);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__move_assign((uint64_t)v761, (uint64_t *)buf);
      std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)&buf[16]);
      v363 = *(void **)buf;
      *(_QWORD *)buf = 0;
      if (v363)
        operator delete(v363);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
      if (v729.__r_.__value_.__r.__words[0])
      {
        v729.__r_.__value_.__l.__size_ = v729.__r_.__value_.__r.__words[0];
        operator delete(v729.__r_.__value_.__l.__data_);
      }
      *(_QWORD *)buf = &v730;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(_QWORD *)buf = &v731;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v311 = (char *)v732[0];
      if (v732[0])
      {
LABEL_1119:
        v364 = (char *)v732[1];
        v365 = v311;
        if (v732[1] != v311)
        {
          do
          {
            v364 -= 64;
            std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>((uint64_t)v364);
          }
          while (v364 != v311);
          v365 = (char *)v732[0];
        }
        v732[1] = v311;
        operator delete(v365);
      }
    }
    v260 = v330 + 1;
  }
  while (v260 < (uint64_t)(*(_QWORD *)(v255 + 40) - *(_QWORD *)(v255 + 32)) >> 4);
LABEL_1128:
  std::string::basic_string[abi:ne180100]<0>(__p, "util_chain_concats");
  *(_QWORD *)&buf[24] = 0;
  Espresso::net::pprint(v255, (uint64_t)__p, (uint64_t)buf);
  v367 = *(_QWORD **)&buf[24];
  if (*(_BYTE **)&buf[24] == buf)
  {
    v368 = 4;
    v367 = buf;
LABEL_1132:
    (*(void (**)(void))(*v367 + 8 * v368))();
  }
  else if (*(_QWORD *)&buf[24])
  {
    v368 = 5;
    goto LABEL_1132;
  }
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (v735.__r_.__value_.__r.__words[0])
    operator delete(v735.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node(*(_QWORD **)&v761[16]);
  v369 = *(void **)v761;
  *(_QWORD *)v761 = 0;
  if (v369)
    operator delete(v369);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v767.__r_.__value_.__r.__words[2]);
  v370 = (void *)v767.__r_.__value_.__r.__words[0];
  v767.__r_.__value_.__r.__words[0] = 0;
  if (v370)
    operator delete(v370);
  std::vector<util_chain_concats(Espresso::net &,BOOL)::concat_chain,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain>>::~vector[abi:ne180100]((void ***)&v736);
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v255 + 968, (__int128 *)buf);
  v371 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v372 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v373 = __ldaxr(v372);
    while (__stlxr(v373 - 1, v372));
    if (!v373)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "ane_compiler_batch");
  v254 = v459;
  *(_QWORD *)__p = buf;
  v374 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v459 + 59, buf, (uint64_t)&std::piecewise_construct, (_OWORD **)__p);
  MEMORY[0x19401C808]((char *)v374 + 56, "1");
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
LABEL_1148:
  if (v450)
  {
    *((_BYTE *)v254 + 180) = 0;
    Espresso::shape_network_recursive(v254, v468, 0, 0);
    v733 = 0;
    v732[1] = 0;
    v732[0] = &v732[1];
    v375 = v459;
    v376 = *((_QWORD *)v459 + 80);
    for (i9 = *((_QWORD *)v459 + 81); v376 != i9; v375 = v459)
    {
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v375 + 24), (_QWORD *)v376))
      {
        *(_QWORD *)__p = v376;
        v378 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v468, (_QWORD *)v376, (__int128 **)__p);
        v379 = *(_OWORD *)(v378 + 72);
        *(_OWORD *)buf = *(_OWORD *)(v378 + 56);
        *(_OWORD *)&buf[16] = v379;
        v380 = (const void *)*((_QWORD *)v378 + 12);
        *(_QWORD *)&buf[32] = *((_QWORD *)v378 + 11);
        memset(&buf[40], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], v380, *((_QWORD *)v378 + 13), (uint64_t)(*((_QWORD *)v378 + 13) - (_QWORD)v380) >> 2);
        *(_QWORD *)buf = *(_QWORD *)&buf[8];
        v381 = *(_DWORD *)&buf[16];
        *(_QWORD *)&buf[12] = 0x100000001;
        *(_DWORD *)&buf[8] = v381;
        *(_DWORD *)&buf[20] = 3;
        *(_QWORD *)__p = v376;
        v382 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, (_QWORD *)v376, (__int128 **)__p);
        v383 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v382 + 56) = *(_OWORD *)buf;
        *(_OWORD *)(v382 + 72) = v383;
        *((_QWORD *)v382 + 11) = *(_QWORD *)&buf[32];
        if (v382 + 56 != buf)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v382 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(_QWORD *)&buf[48] - *(_QWORD *)&buf[40]) >> 2);
        if (*(_QWORD *)&buf[40])
        {
          *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
      }
      v384 = (const char *)v376;
      if (*(char *)(v376 + 23) < 0)
        v384 = *(const char **)v376;
      *(_QWORD *)buf = v376;
      v385 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, (_QWORD *)v376, (__int128 **)buf);
      v386 = *((_DWORD *)v385 + 19);
      if (v386 == -1)
      {
        if (*((_DWORD *)v385 + 18) == 1)
          v386 = 4;
        else
          v386 = 5;
      }
      *(_QWORD *)buf = v376;
      v387 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, (_QWORD *)v376, (__int128 **)buf)+ 14);
      *(_QWORD *)buf = v376;
      v388 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, (_QWORD *)v376, (__int128 **)buf)+ 15);
      *(_QWORD *)buf = v376;
      v389 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, (_QWORD *)v376, (__int128 **)buf)+ 16);
      *(_QWORD *)buf = v376;
      v390 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, (_QWORD *)v376, (__int128 **)buf);
      printf("%s rank=%d (%d %d %d %d)\n", v384, v386, v387, v388, v389, *((_DWORD *)v390 + 17));
      v376 += 24;
    }
    v391 = &__block_literal_global_2880;
    Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)&v767, v375);
    memset(buf, 0, 60);
    v755 = v375;
    v392 = *((_QWORD *)v375 + 4);
    if (*((_QWORD *)v375 + 5) != v392)
    {
      v393 = 0;
      do
      {
        *(_DWORD *)&buf[56] = v393;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&buf[16], *(_QWORD *)(v392 + 16 * v393), *(_QWORD *)(v392 + 16 * v393 + 8));
        v394 = *(_QWORD *)&buf[16];
        v395 = *(void **)(*(_QWORD *)&buf[16] + 64);
        if (v395
        {
          v396 = *(_QWORD *)(v394 + 72);
          if (v396)
          {
            v397 = (unint64_t *)(v396 + 8);
            do
              v398 = __ldxr(v397);
            while (__stxr(v398 + 1, v397));
          }
        }
        else
        {
          v396 = 0;
        }
        v399 = *(std::__shared_weak_count **)&buf[8];
        *(_QWORD *)buf = v395;
        *(_QWORD *)&buf[8] = v396;
        if (v399)
        {
          v400 = (unint64_t *)&v399->__shared_owners_;
          do
            v401 = __ldaxr(v400);
          while (__stlxr(v401 - 1, v400));
          if (!v401)
          {
            ((void (*)(std::__shared_weak_count *))v399->__on_zero_shared)(v399);
            std::__shared_weak_count::__release_weak(v399);
          }
          v395 = *(void **)buf;
        }
        if (v395)
        {
          v402 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v395 + 320))(v395);
          *v402 -= 2;
        }
        ++v393;
        v392 = *((_QWORD *)v375 + 4);
      }
      while (v393 < (*((_QWORD *)v375 + 5) - v392) >> 4);
      v403 = *(_QWORD *)&buf[32];
      v404 = *(_QWORD *)&buf[40];
      if (*(_QWORD *)&buf[32] != *(_QWORD *)&buf[40])
      {
        v405 = 0;
        do
        {
          v406 = *(_DWORD *)v403 + v405;
          *(_DWORD *)v403 = v406;
          v407 = *(_QWORD *)(v403 + 8);
          if (v407)
          {
            *(_DWORD *)__p = v406;
            v408 = *(_QWORD *)(v403 + 16);
            *(_QWORD *)&__p[8] = v407;
            *(_QWORD *)&__p[16] = v408;
            if (v408)
            {
              v409 = (unint64_t *)(v408 + 8);
              do
                v410 = __ldxr(v409);
              while (__stxr(v410 + 1, v409));
            }
            *(_QWORD *)&__p[24] = 0;
            *(_QWORD *)&__p[32] = 0;
            *(_QWORD *)&v763 = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__p[24], *(_QWORD *)(v403 + 24), *(_QWORD *)(v403 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v403 + 32) - *(_QWORD *)(v403 + 24)) >> 3));
            *((_QWORD *)&v763 + 1) = 0;
            v764 = 0;
            v765[0] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)&v763 + 1, *(_QWORD *)(v403 + 48), *(_QWORD *)(v403 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v403 + 56) - *(_QWORD *)(v403 + 48)) >> 3));
            memset(v761, 0, 24);
            v736 = v761;
            LOBYTE(v737) = 0;
            *(_QWORD *)v761 = operator new(0x48uLL);
            *(_QWORD *)&v761[8] = *(_QWORD *)v761;
            *(_QWORD *)&v761[16] = *(_QWORD *)v761 + 72;
            *(_QWORD *)&v761[8] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v761[16], (uint64_t)__p, (uint64_t)&v766, *(uint64_t *)v761);
            Espresso::net::insert_layers((uint64_t)v459, (uint64_t *)v761);
            v736 = v761;
            std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v736);
            v736 = (char *)&v763 + 8;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v736);
            v736 = &__p[24];
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v736);
            v411 = *(std::__shared_weak_count **)&__p[16];
            if (*(_QWORD *)&__p[16])
            {
              v412 = (unint64_t *)(*(_QWORD *)&__p[16] + 8);
              do
                v413 = __ldaxr(v412);
              while (__stlxr(v413 - 1, v412));
              if (!v413)
              {
                ((void (*)(std::__shared_weak_count *))v411->__on_zero_shared)(v411);
                std::__shared_weak_count::__release_weak(v411);
              }
            }
            v414 = 1;
          }
          else
          {
            Espresso::net::remove_layer(v459, v406);
            v414 = -1;
          }
          v405 += v414;
          v403 += 72;
        }
        while (v403 != v404);
      }
    }
    *(_QWORD *)__p = &buf[32];
    std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v415 = *(std::__shared_weak_count **)&buf[24];
    if (*(_QWORD *)&buf[24])
    {
      v416 = (unint64_t *)(*(_QWORD *)&buf[24] + 8);
      do
        v417 = __ldaxr(v416);
      while (__stlxr(v417 - 1, v416));
      if (!v417)
      {
        ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
        std::__shared_weak_count::__release_weak(v415);
      }
    }
    v418 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v419 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v420 = __ldaxr(v419);
      while (__stlxr(v420 - 1, v419));
      if (!v420)
      {
        ((void (*)(std::__shared_weak_count *))v418->__on_zero_shared)(v418);
        std::__shared_weak_count::__release_weak(v418);
      }
    }
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(*(_QWORD **)&v769[4]);
    std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy((_QWORD *)v768);
    v421 = (std::__shared_weak_count *)v767.__r_.__value_.__l.__size_;
    if (v767.__r_.__value_.__l.__size_)
    {
      v422 = (unint64_t *)(v767.__r_.__value_.__l.__size_ + 8);
      do
        v423 = __ldaxr(v422);
      while (__stlxr(v423 - 1, v422));
      if (!v423)
      {
        ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
        std::__shared_weak_count::__release_weak(v421);
      }
    }

    v254 = v459;
    Espresso::single_match_replace<Espresso::generic_load_constant_kernel>(v459, &__block_literal_global_76_2882);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v468, *((char **)v459 + 24));
    *((_QWORD *)v459 + 23) = (char *)v459 + 192;
    *((_QWORD *)v459 + 25) = 0;
    *((_QWORD *)v459 + 24) = 0;
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(v761, *(_QWORD *)v254, *((std::__shared_weak_count **)v254 + 1));
    Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)v761, (uint64_t)v732, (uint64_t)buf);
    v424 = *(std::__shared_weak_count **)&v761[8];
    if (*(_QWORD *)&v761[8])
    {
      v425 = (unint64_t *)(*(_QWORD *)&v761[8] + 8);
      do
        v426 = __ldaxr(v425);
      while (__stlxr(v426 - 1, v425));
      if (!v426)
      {
        ((void (*)(std::__shared_weak_count *))v424->__on_zero_shared)(v424);
        std::__shared_weak_count::__release_weak(v424);
      }
    }
    *((_BYTE *)v459 + 180) = 0;
    Espresso::shape_network_recursive(v459, (Espresso::net *)buf, 0, 0);
    std::string::basic_string[abi:ne180100]<0>(&v767, "make_shape_from_2d_to_4d");
    *(_QWORD *)&__p[24] = 0;
    Espresso::net::pprint((uint64_t)v459, (uint64_t)&v767, (uint64_t)__p);
    v427 = *(_QWORD **)&__p[24];
    if (*(_BYTE **)&__p[24] == __p)
    {
      v428 = 4;
      v427 = __p;
LABEL_1218:
      (*(void (**)(void))(*v427 + 8 * v428))();
    }
    else if (*(_QWORD *)&__p[24])
    {
      v428 = 5;
      goto LABEL_1218;
    }
    if (SHIBYTE(v767.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v767.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&buf[24], *(char **)&buf[32]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)buf, *(char **)&buf[8]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v732, (char *)v732[1]);
  }
  if (v726)
  {
    *((_BYTE *)v254 + 180) = 0;
    Espresso::shape_network_recursive(v254, v468, 0, 0);
    v429 = MEMORY[0x1E0C809B0];
    v767.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
    v767.__r_.__value_.__l.__size_ = 3221225472;
    v767.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke;
    *(_QWORD *)&v768 = &__block_descriptor_40_e9_v16__0_v8l;
    *((_QWORD *)&v768 + 1) = v459;
    Espresso::single_match_replace<Espresso::generic_load_constant_kernel>(v459, &v767);
    *(_QWORD *)v761 = v429;
    *(_QWORD *)&v761[8] = 3221225472;
    *(_QWORD *)&v761[16] = ___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke_2;
    *(_QWORD *)&v761[24] = &__block_descriptor_40_e9_v16__0_v8l;
    *(_QWORD *)&v761[32] = v459;
    Espresso::single_match_replace<Espresso::generic_fill_kernel>(v459, v761);
    v733 = 0;
    v732[1] = 0;
    v732[0] = &v732[1];
    v430 = (_QWORD *)*((_QWORD *)v459 + 80);
    for (i10 = (_QWORD *)*((_QWORD *)v459 + 81); v430 != i10; v430 += 3)
    {
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v459 + 24), v430))
      {
        *(_QWORD *)__p = v430;
        v432 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v468, v430, (__int128 **)__p);
        v433 = *(_OWORD *)(v432 + 72);
        *(_OWORD *)buf = *(_OWORD *)(v432 + 56);
        *(_OWORD *)&buf[16] = v433;
        v434 = (const void *)*((_QWORD *)v432 + 12);
        *(_QWORD *)&buf[32] = *((_QWORD *)v432 + 11);
        memset(&buf[40], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], v434, *((_QWORD *)v432 + 13), (uint64_t)(*((_QWORD *)v432 + 13) - (_QWORD)v434) >> 2);
        *(_QWORD *)__p = v430;
        v435 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, v430, (__int128 **)__p);
        v436 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v435 + 56) = *(_OWORD *)buf;
        *(_OWORD *)(v435 + 72) = v436;
        *((_QWORD *)v435 + 11) = *(_QWORD *)&buf[32];
        if (v435 + 56 != buf)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v435 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(_QWORD *)&buf[48] - *(_QWORD *)&buf[40]) >> 2);
        if (*(_QWORD *)&buf[40])
        {
          *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v468, *((char **)v459 + 24));
    *((_QWORD *)v459 + 23) = (char *)v459 + 192;
    *((_QWORD *)v459 + 25) = 0;
    *((_QWORD *)v459 + 24) = 0;
    std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v735, *(_QWORD *)v459, *((std::__shared_weak_count **)v459 + 1));
    Espresso::compute_network_shape_starting_from_data_shapes((uint64_t *)&v735, (uint64_t)v732, (uint64_t)__p);
    v437 = (std::__shared_weak_count *)v735.__r_.__value_.__l.__size_;
    if (v735.__r_.__value_.__l.__size_)
    {
      v438 = (unint64_t *)(v735.__r_.__value_.__l.__size_ + 8);
      do
        v439 = __ldaxr(v438);
      while (__stlxr(v439 - 1, v438));
      if (!v439)
      {
        ((void (*)(std::__shared_weak_count *))v437->__on_zero_shared)(v437);
        std::__shared_weak_count::__release_weak(v437);
      }
    }
    *((_BYTE *)v459 + 180) = 0;
    Espresso::shape_network_recursive(v459, (Espresso::net *)__p, 0, 0);
    v440 = (_QWORD *)*((_QWORD *)v459 + 86);
    for (i11 = (_QWORD *)*((_QWORD *)v459 + 87); v440 != i11; v440 += 3)
    {
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)v459 + 24), v440))
      {
        v736 = v440;
        v442 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v468, v440, (__int128 **)&v736);
        v443 = *(_OWORD *)(v442 + 72);
        *(_OWORD *)buf = *(_OWORD *)(v442 + 56);
        *(_OWORD *)&buf[16] = v443;
        v444 = (const void *)*((_QWORD *)v442 + 12);
        *(_QWORD *)&buf[32] = *((_QWORD *)v442 + 11);
        memset(&buf[40], 0, 24);
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&buf[40], v444, *((_QWORD *)v442 + 13), (uint64_t)(*((_QWORD *)v442 + 13) - (_QWORD)v444) >> 2);
        v736 = v440;
        v445 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v732, v440, (__int128 **)&v736);
        v446 = *(_OWORD *)&buf[16];
        *(_OWORD *)(v445 + 56) = *(_OWORD *)buf;
        *(_OWORD *)(v445 + 72) = v446;
        *((_QWORD *)v445 + 11) = *(_QWORD *)&buf[32];
        if (v445 + 56 != buf)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v445 + 96, *(char **)&buf[40], *(uint64_t *)&buf[48], (uint64_t)(*(_QWORD *)&buf[48] - *(_QWORD *)&buf[40]) >> 2);
        if (*(_QWORD *)&buf[40])
        {
          *(_QWORD *)&buf[48] = *(_QWORD *)&buf[40];
          operator delete(*(void **)&buf[40]);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v736, "make_shape_from_4d_to_conv");
    *(_QWORD *)&buf[24] = 0;
    Espresso::net::pprint((uint64_t)v459, (uint64_t)&v736, (uint64_t)buf);
    v447 = *(_QWORD **)&buf[24];
    if (*(_BYTE **)&buf[24] == buf)
    {
      v448 = 4;
      v447 = buf;
LABEL_1246:
      (*(void (**)(void))(*v447 + 8 * v448))();
    }
    else if (*(_QWORD *)&buf[24])
    {
      v448 = 5;
      goto LABEL_1246;
    }
    if (SHIBYTE(v738) < 0)
      operator delete(v736);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p[24], *(char **)&__p[32]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)__p, *(char **)&__p[8]);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v732, (char *)v732[1]);
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "find_shared_weights");
  Espresso::run_custom_pass_on_network((uint64_t *)buf, (uint64_t)v459);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
}

void sub_191404820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40)
{
  uint64_t v40;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;

  STACK[0xE00] = (unint64_t)&STACK[0x398];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xE00]);
  if (SLOBYTE(STACK[0xF07]) < 0)
    operator delete((void *)STACK[0xEF0]);
  if (*(char *)(v40 - 217) < 0)
    operator delete(*(void **)(v40 - 240));
  STACK[0xF20] = (unint64_t)&STACK[0xBD8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xF20]);
  if (SLOBYTE(STACK[0xC07]) < 0)
    operator delete((void *)STACK[0xBF0]);
  if (SLOBYTE(STACK[0xC27]) < 0)
    operator delete((void *)STACK[0xC10]);
  if (SLOBYTE(STACK[0xC87]) < 0)
    operator delete((void *)STACK[0xC70]);
  if (SLOBYTE(STACK[0xCA7]) < 0)
    operator delete((void *)STACK[0xC90]);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100](a25);
  v42 = (std::__shared_weak_count *)STACK[0xE98];
  if (STACK[0xE98])
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)STACK[0xE88];
  if (STACK[0xE88])
  {
    v46 = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = (std::__shared_weak_count *)STACK[0xE78];
  if (STACK[0xE78])
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (SLOBYTE(STACK[0xE6F]) < 0)
    operator delete((void *)STACK[0xE58]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(a26, (_QWORD *)STACK[0xE38]);
  v51 = (std::__shared_weak_count *)STACK[0xE28];
  if (STACK[0xE28])
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  STACK[0xE20] = (unint64_t)&STACK[0xCA8];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xE20]);
  if (a40)
  {
    v54 = (unint64_t *)&a40->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))a40->__on_zero_shared)(a40);
      std::__shared_weak_count::__release_weak(a40);
    }
  }
  if (SLOBYTE(STACK[0xCF7]) < 0)
    operator delete((void *)STACK[0xCE0]);
  STACK[0xE20] = (unint64_t)&STACK[0xD00];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xE20]);
  STACK[0xE20] = (unint64_t)&STACK[0xCC0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0xE20]);
  _Unwind_Resume(a1);
}

void sub_1914066DC()
{
  JUMPOUT(0x1914066D4);
}

void Espresso::sequential_builder::add<Espresso::transpose_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_19140695C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_0::operator()(std::string *a1, int a2, const void **a3, uint64_t a4)
{
  size_t v7;
  std::string *v8;
  const void *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  int v16;
  std::string *v17;
  std::string v18;

  if (a2)
  {
    if (*((char *)a3 + 23) >= 0)
      v7 = *((unsigned __int8 *)a3 + 23);
    else
      v7 = (size_t)a3[1];
    v8 = &v18;
    std::string::basic_string[abi:ne180100]((uint64_t)&v18, v7 + 7);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if (v7)
    {
      if (*((char *)a3 + 23) >= 0)
        v9 = a3;
      else
        v9 = *a3;
      memmove(v8, v9, v7);
    }
    strcpy((char *)v8 + v7, "__rev__");
    v10 = *(char *)(a4 + 23);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)a4;
    else
      v11 = *(const std::string::value_type **)a4;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a4 + 23);
    else
      v12 = *(_QWORD *)(a4 + 8);
  }
  else
  {
    if (*((char *)a3 + 23) >= 0)
      v13 = *((unsigned __int8 *)a3 + 23);
    else
      v13 = (size_t)a3[1];
    v14 = &v18;
    std::string::basic_string[abi:ne180100]((uint64_t)&v18, v13 + 2);
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if (v13)
    {
      if (*((char *)a3 + 23) >= 0)
        v15 = a3;
      else
        v15 = *a3;
      memmove(v14, v15, v13);
    }
    strcpy((char *)v14 + v13, "__");
    v16 = *(char *)(a4 + 23);
    if (v16 >= 0)
      v11 = (const std::string::value_type *)a4;
    else
      v11 = *(const std::string::value_type **)a4;
    if (v16 >= 0)
      v12 = *(unsigned __int8 *)(a4 + 23);
    else
      v12 = *(_QWORD *)(a4 + 8);
  }
  v17 = std::string::append(&v18, v11, v12);
  *a1 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_191406B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::add_constant(uint64_t *a1, uint64_t a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, float a7)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::string::size_type v25;
  uint64_t v26;
  uint64_t i;
  float *v28;
  _DWORD *v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *p_shared_owners;
  unint64_t v43;
  std::runtime_error *exception;
  std::string *v45;
  std::string *v46;
  std::string *v47;
  uint64_t v48[3];
  uint64_t v49;
  std::__shared_weak_count *v50;
  std::string v51;
  unsigned int v52;
  int v53;
  char v54;
  _QWORD v55[2];
  std::string *v56;
  std::string *v57;
  std::string *v58;
  __int128 *v59;
  uint64_t v60;
  uint64_t v61;
  void *__p;
  char v63;
  char v64;
  _DWORD *v65;
  std::__shared_weak_count *v66;
  void *v67[2];
  uint64_t v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  const void *v71;
  std::__shared_weak_count *v72;
  std::string *v73;
  std::string v74;
  uint64_t v75;
  std::string v76;
  __int128 v77;

  *(_QWORD *)&v77 = *MEMORY[0x1E0C80C00];
  v11 = a5 * a4;
  if ((int)(a5 * a4 * a3) < 1)
  {
    v52 = a6;
    v53 = 0;
    v54 = 1;
    *(std::string::size_type *)((char *)v51.__r_.__value_.__r.__words + 4) = 0x100000001;
    *(std::string::size_type *)((char *)&v51.__r_.__value_.__r.__words[1] + 4) = __PAIR64__(a4, a3);
    *(float *)&v51.__r_.__value_.__l.__data_ = a7;
    HIDWORD(v51.__r_.__value_.__r.__words[2]) = a5;
    std::string::basic_string[abi:ne180100]<0>(v67, "fill");
    memset(v48, 0, sizeof(v48));
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v76 = *(std::string *)a2;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    __p = &v45;
    v63 = 0;
    v45 = (std::string *)operator new(0x18uLL);
    v46 = v45;
    v47 = v45 + 1;
    v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v47, (__int128 *)&v76, &v77, v45);
    Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(&v49, a1, (uint64_t)v67, a2, (uint64_t)&v51, v48, (uint64_t *)&v45);
    v41 = v50;
    if (v50)
    {
      p_shared_owners = (unint64_t *)&v50->__shared_owners_;
      do
        v43 = __ldaxr(p_shared_owners);
      while (__stlxr(v43 - 1, p_shared_owners));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    __p = &v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    v76.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v76);
    if (SHIBYTE(v68) < 0)
      operator delete(v67[0]);
  }
  else
  {
    v76.__r_.__value_.__r.__words[0] = 0x100000001;
    v76.__r_.__value_.__l.__size_ = __PAIR64__(a4, a3);
    v76.__r_.__value_.__r.__words[2] = __PAIR64__(a6, a5);
    std::string::basic_string[abi:ne180100]<0>(&__p, "load_constant");
    v59 = 0;
    v60 = 0;
    v61 = 0;
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v74, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v74 = *(std::string *)a2;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
    v51.__r_.__value_.__s.__data_[8] = 0;
    v56 = (std::string *)operator new(0x18uLL);
    v57 = v56;
    v58 = v56 + 1;
    v57 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v58, (__int128 *)&v74, (__int128 *)&v75, v56);
    v12 = a1[12];
    LODWORD(v51.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a1[14] + 8))(*(_QWORD *)(a1[14] + 8));
    Espresso::abstract_engine_factory::make_kernel_priv(v12, (uint64_t)(a1 + 14), (uint64_t)&__p, (uint64_t)&v76, (int *)&v51);
    v13 = (uint64_t)v71;
    if (!v71
    {
      v65 = 0;
      v66 = 0;
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v51);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v65 = v14;
    v66 = v72;
    if (v72)
    {
      v15 = (unint64_t *)&v72->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
      v69 = v13;
      v70 = v72;
      if (v72)
      {
        v17 = (unint64_t *)&v72->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
    }
    else
    {
      v69 = v13;
      v70 = 0;
    }
    memset(&v51, 0, sizeof(v51));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v51, (uint64_t)v59, v60, 0xAAAAAAAAAAAAAAABLL * ((v60 - (uint64_t)v59) >> 3));
    v67[0] = 0;
    v67[1] = 0;
    v68 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v67, (uint64_t)v56, (uint64_t)v57, 0xAAAAAAAAAAAAAAABLL * (((char *)v57 - (char *)v56) >> 3));
    Espresso::sequential_builder::add_kernel((uint64_t)a1, &v69, (uint64_t)&__p, a2, (std::string **)&v51, (std::string **)v67);
    v73 = (std::string *)v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    v73 = &v51;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
    v19 = v70;
    if (v70)
    {
      v20 = (unint64_t *)&v70->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    if (*a1)
      Espresso::sequential_builder::add_shape_from_kernel(a1, (uint64_t)v71, &v59, (uint64_t *)&v56);
    v22 = v72;
    if (v72)
    {
      v23 = (unint64_t *)&v72->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v74.__r_.__value_.__l.__data_);
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    if (v64 < 0)
      operator delete(__p);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v51, 1, 1, a3, v11);
    v25 = v51.__r_.__value_.__r.__words[0];
    v26 = *(int *)(v51.__r_.__value_.__r.__words[0] + 8);
    for (i = 12; i != 24; i += 4)
      v26 *= *(int *)(v51.__r_.__value_.__r.__words[0] + i);
    if (v26)
    {
      v28 = *(float **)(v51.__r_.__value_.__r.__words[0] + 24);
      do
      {
        *v28++ = a7;
        --v26;
      }
      while (v26);
    }
    v29 = v65;
    size = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
    v55[0] = v25;
    v55[1] = v51.__r_.__value_.__l.__size_;
    if (v51.__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldxr(v31);
      while (__stxr(v32 + 1, v31));
    }
    Espresso::generic_load_constant_kernel::set_constant_blob(v29, (uint64_t)v55);
    if (size)
    {
      v33 = (unint64_t *)&size->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v35 = (std::__shared_weak_count *)v51.__r_.__value_.__l.__size_;
    if (v51.__r_.__value_.__l.__size_)
    {
      v36 = (unint64_t *)(v51.__r_.__value_.__l.__size_ + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v38 = v66;
    if (v66)
    {
      v39 = (unint64_t *)&v66->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
  }
}

void sub_19140715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  *(_QWORD *)(v46 - 112) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v46 - 112));
  if (a46 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void Espresso::pass_lstm_atomizer::run_on_network(Espresso::net &)::$_1::operator()(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  void *v65;
  std::__shared_weak_count *v66;
  std::string *v67;
  std::string *v68;
  std::string *v69;
  std::string *v70;
  std::string *v71;
  std::string *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  void *v75;
  std::__shared_weak_count *v76;
  std::string *v77;
  std::string *v78;
  std::string *v79;
  std::string *v80;
  std::string *v81;
  std::string *v82;
  void *__p;
  std::__shared_weak_count *v84;
  char v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE v90[24];
  int v91;
  _BYTE v92[20];
  unint64_t v93;
  __int16 v94;
  uint64_t v95;
  _WORD v96[5];
  uint64_t v97;
  _DWORD v98[6];
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __int16 v104;
  int v105;
  char v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  std::string **v109;
  char v110;
  std::string v111;
  uint64_t v112;
  std::string v113;
  __int128 v114;

  *(_QWORD *)&v114 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v107, a6, 1, 1, 1);
  if (*(_QWORD *)a8)
    memcpy(*(void **)(v107 + 16), (const void *)(*(_QWORD *)(*(_QWORD *)a8 + 16) + 4 * a9), 4 * a6);
  __asm { FMOV            V0.2S, #1.0 }
  if (**(_BYTE **)a2)
  {
    v93 = _D0;
    v94 = 1;
    memset(v96, 0, sizeof(v96));
    v95 = 0;
    v97 = 0x1000100010001;
    v98[0] = 0;
    v98[5] = 1;
    v105 = 0;
    v106 = 0;
    v101 = 0;
    v102 = 0;
    v88 = 0;
    v89 = 0;
    *(_QWORD *)&v90[8] = 0;
    *(_QWORD *)&v90[16] = 1;
    *(_OWORD *)&v98[1] = xmmword_191A93310;
    v99 = 0;
    v100 = 0x10000;
    v103 = 0;
    v104 = 1;
    v91 = a6;
    *(_DWORD *)v92 = a5;
    *(_OWORD *)&v92[4] = xmmword_191A93590;
    *(_QWORD *)v90 = 0;
    v22 = *(uint64_t **)(a2 + 8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v113 = *(std::string *)a3;
    v80 = 0;
    v81 = 0;
    v82 = 0;
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    v111.__r_.__value_.__s.__data_[8] = 0;
    v80 = (std::string *)operator new(0x18uLL);
    v81 = v80;
    v82 = v80 + 1;
    v81 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v82, (__int128 *)&v113, &v114, v80);
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v111 = *(std::string *)a4;
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v109 = &v77;
    v110 = 0;
    v77 = (std::string *)operator new(0x18uLL);
    v78 = v77;
    v79 = v77 + 1;
    v78 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v79, (__int128 *)&v111, (__int128 *)&v112, v77);
    Espresso::sequential_builder::add_t<Espresso::generic_convolution_kernel,Espresso::convolution_uniforms>(&v86, v22, (uint64_t)&__p, a4, (uint64_t)&v88, (uint64_t *)&v80, (uint64_t *)&v77);
    v109 = &v77;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v80;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113.__r_.__value_.__l.__data_);
    if (v85 < 0)
      operator delete(__p);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,Espresso::blob<float,4>::UnitializedBlobType,void>(&__p, 1, 1, a5, a6);
    v24 = __p;
    memcpy(*((void **)__p + 3), (const void *)(*(_QWORD *)(*(_QWORD *)a7 + 16) + 4 * a9 * a5), 4 * a5 * (uint64_t)a6);
    v25 = v86;
    v75 = v24;
    v76 = v84;
    if (v84)
    {
      p_shared_owners = (unint64_t *)&v84->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v25 + 400))(v25, &v75);
    v28 = v76;
    if (v76)
    {
      v29 = (unint64_t *)&v76->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    v31 = v86;
    v73 = v107;
    v74 = v108;
    if (v108)
    {
      v32 = (unint64_t *)&v108->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v31 + 392))(v31, &v73);
    v34 = v74;
    if (v74)
    {
      v35 = (unint64_t *)&v74->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, v86, (uint64_t)v87);
    v37 = v84;
    if (v84)
    {
      v38 = (unint64_t *)&v84->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    v40 = v87;
    if (v87)
    {
      v41 = (unint64_t *)&v87->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      goto LABEL_77;
    }
  }
  else
  {
    LOBYTE(v91) = 0;
    *(_DWORD *)&v92[8] = -1;
    *(_QWORD *)&v92[12] = _D0;
    v99 = 0;
    v89 = 1;
    *(_OWORD *)&v90[4] = _D0;
    *(_QWORD *)&v96[1] = 0;
    *(_QWORD *)v92 = 0;
    *(_DWORD *)v90 = 0;
    *(_DWORD *)&v90[20] = 0;
    memset(v98, 0, sizeof(v98));
    v88 = __PAIR64__(a5, a6);
    v23 = *(uint64_t **)(a2 + 8);
    std::string::basic_string[abi:ne180100]<0>(&__p, "inner_product");
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v113, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v113 = *(std::string *)a3;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    v111.__r_.__value_.__s.__data_[8] = 0;
    v70 = (std::string *)operator new(0x18uLL);
    v71 = v70;
    v72 = v70 + 1;
    v71 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v72, (__int128 *)&v113, &v114, v70);
    if (*(char *)(a4 + 23) < 0)
      std::string::__init_copy_ctor_external(&v111, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
    else
      v111 = *(std::string *)a4;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v109 = &v67;
    v110 = 0;
    v67 = (std::string *)operator new(0x18uLL);
    v68 = v67;
    v69 = v67 + 1;
    v68 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v69, (__int128 *)&v111, (__int128 *)&v112, v67);
    Espresso::sequential_builder::add_t<Espresso::generic_inner_product_kernel,Espresso::inner_product_uniforms>(&v86, v23, (uint64_t)&__p, a4, (uint64_t)&v88, (uint64_t *)&v70, (uint64_t *)&v67);
    v109 = &v67;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v109);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v111.__r_.__value_.__l.__data_);
    v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v111);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113.__r_.__value_.__l.__data_);
    if (v85 < 0)
      operator delete(__p);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(&__p, a5, a6, 1, 1);
    v43 = __p;
    memcpy(*((void **)__p + 2), (const void *)(*(_QWORD *)(*(_QWORD *)a7 + 16) + 4 * a9 * a5), 4 * a5 * (uint64_t)a6);
    v44 = v86;
    v65 = v43;
    v66 = v84;
    if (v84)
    {
      v45 = (unint64_t *)&v84->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v44 + 400))(v44, &v65);
    v47 = v66;
    if (v66)
    {
      v48 = (unint64_t *)&v66->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = v86;
    v63 = v107;
    v64 = v108;
    if (v108)
    {
      v51 = (unint64_t *)&v108->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v50 + 392))(v50, &v63);
    v53 = v64;
    if (v64)
    {
      v54 = (unint64_t *)&v64->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, v86, (uint64_t)v87);
    v56 = v84;
    if (v84)
    {
      v57 = (unint64_t *)&v84->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v40 = v87;
    if (v87)
    {
      v59 = (unint64_t *)&v87->__shared_owners_;
      do
        v42 = __ldaxr(v59);
      while (__stlxr(v42 - 1, v59));
LABEL_77:
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
  v60 = v108;
  if (v108)
  {
    v61 = (unint64_t *)&v108->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
}

void sub_191407A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v36 - 144) = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 144));
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  if (a34 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v36 - 176);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35);
  _Unwind_Resume(a1);
}

void sub_191407BF4()
{
  JUMPOUT(0x191407BE4);
}

void Espresso::sequential_builder::add<Espresso::scatter_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191407DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::reshape_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_191408064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::concat_params>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1914082D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void Espresso::util_unroll_loop(Espresso *this, Espresso::net *a2)
{
  Espresso *v2;
  const void *v3;
  char *v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void **v9;
  void **v10;
  const void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  const char *v16;
  _QWORD *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *i;
  NSObject *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t j;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  size_t v50;
  std::string *v51;
  std::string::size_type *p_size;
  std::string *v53;
  std::string::size_type size;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  std::string::size_type v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  std::string::size_type v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  int64x2_t v71;
  char *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::string::size_type v77;
  std::string::size_type v78;
  uint64_t v79;
  _QWORD *v80;
  std::string **v81;
  uint64_t v82;
  std::string::size_type v83;
  uint64_t v84;
  _QWORD *v85;
  std::string::size_type v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  void *v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  std::runtime_error *exception;
  std::string *v99;
  __int128 v100;
  std::runtime_error *v101;
  std::string *v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  std::__shared_weak_count *v105;
  Espresso *v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  std::string v110;
  std::string v111;
  std::string v112;
  unint64_t v113;
  int64x2_t v114;
  char *v115;
  _OWORD v116[2];
  int v117;
  void *__p[2];
  void *v119[2];
  int v120;
  uint64_t v121[3];
  void *v122[2];
  __int128 v123;
  int v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  std::string v127;
  char *v128;
  unint64_t __val;
  _BYTE v130[24];
  _BYTE *v131;
  _QWORD v132[2];
  _QWORD v133[2];
  uint8_t buf[16];
  _OWORD v135[2];
  __int128 v136;
  _BYTE v137[24];
  _BYTE *v138;
  _BYTE v139[24];
  _BYTE *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  if (*((_QWORD *)this + 126))
    return;
  v2 = this;
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)this);
  memset(buf, 0, sizeof(buf));
  Espresso::net::setup_script((uint64_t)v2, (uint64_t *)buf, 0);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  v3 = (const void *)*((_QWORD *)v2 + 121);
  if (!v3)
    return;
  if (!v4)
    return;
  v5 = v4;
  v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 122);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Espresso::run_pass_on_network<Espresso::pass_constant_if_conditions>((uint64_t)v2);
  memset(buf, 0, sizeof(buf));
  v9 = (void **)std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::find<std::type_index>((_QWORD *)v2 + 140, (uint64_t)&v127);
  v10 = v9;
  if (!v9)
  {
    v122[0] = 0;
    v122[1] = 0;
    goto LABEL_173;
  }
  v11 = v9[3];
  v12 = (std::__shared_weak_count *)v10[4];
  v122[0] = v10[3];
  v122[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (!v11)
  {
LABEL_173:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v127, "Analysis missing: ");
    v99 = std::string::append(&v127, (const std::string::value_type *)((unint64_t)"N8Espresso34pass_constant_if_conditions_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    *(_QWORD *)&v135[0] = *((_QWORD *)&v99->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v15)
  {
    __p[0] = 0;
    __p[1] = 0;
    v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v127, "Analysis mismatch: ");
    v102 = std::string::append(&v127, (const std::string::value_type *)((unint64_t)"N8Espresso34pass_constant_if_conditions_resultE" & 0x7FFFFFFFFFFFFFFFLL));
    v103 = *(_OWORD *)&v102->__r_.__value_.__l.__data_;
    *(_QWORD *)&v135[0] = *((_QWORD *)&v102->__r_.__value_.__l + 2);
    *(_OWORD *)buf = v103;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v101, (const std::string *)buf);
    __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v17 = v15;
  __p[0] = v15;
  __p[1] = v12;
  if (v12)
  {
    v18 = (unint64_t *)&v12->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    do
      v20 = __ldaxr(v18);
    while (__stlxr(v20 - 1, v18));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v105 = v6;
  if (v122[1])
  {
    v21 = (unint64_t *)((char *)v122[1] + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      (*(void (**)(void *))(*(_QWORD *)v122[1] + 16))(v122[1]);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v122[1]);
    }
  }
  for (i = (uint64_t *)v17[3]; i; i = (uint64_t *)*i)
  {
    Espresso::espresso_os_log_subsystem((Espresso *)v15, v16);
    v24 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      v25 = i + 2;
      if (*((char *)i + 39) < 0)
        v25 = (_QWORD *)*v25;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v25;
      _os_log_debug_impl(&dword_190DAF000, v24, OS_LOG_TYPE_DEBUG, "unroll_loop: constant=%s", buf, 0xCu);
    }

  }
  (***((void (****)(uint64_t *__return_ptr))v2 + 2))(&v125);
  *(_OWORD *)v122 = 0u;
  v123 = 0u;
  v124 = 1065353216;
  memset(v121, 0, sizeof(v121));
  *(_OWORD *)__p = 0u;
  *(_OWORD *)v119 = 0u;
  v120 = 1065353216;
  v26 = operator new(0x28uLL);
  *v26 = &off_1E2DB1558;
  v26[1] = &v125;
  v27 = (uint8_t *)(v5 + 112);
  v26[2] = __p;
  v26[3] = v17;
  v26[4] = v121;
  *((_QWORD *)&v135[0] + 1) = v26;
  if (v5 + 112 == (char *)buf)
  {
    v29 = 5;
    goto LABEL_40;
  }
  v28 = (uint8_t *)*((_QWORD *)v5 + 17);
  if (v28 == v27)
  {
    v26 = buf;
    (*(void (**)(uint8_t *, uint8_t *))(*(_QWORD *)v27 + 24))(v27, buf);
    (*(void (**)(_QWORD))(**((_QWORD **)v5 + 17) + 32))(*((_QWORD *)v5 + 17));
    *((_QWORD *)v5 + 17) = *((_QWORD *)&v135[0] + 1);
    *((_QWORD *)&v135[0] + 1) = buf;
    goto LABEL_39;
  }
  *((_QWORD *)&v135[0] + 1) = *((_QWORD *)v5 + 17);
  *((_QWORD *)v5 + 17) = v26;
  v26 = buf;
  if (v28 == buf)
  {
LABEL_39:
    v29 = 4;
    goto LABEL_40;
  }
  if (!v28)
    goto LABEL_41;
  v29 = 5;
  v26 = v28;
LABEL_40:
  (*(void (**)(_QWORD *))(*v26 + 8 * v29))(v26);
LABEL_41:
  v30 = *((_QWORD *)v2 + 121);
  std::string::basic_string[abi:ne180100]<0>(buf, "__main__");
  (*(void (**)(uint64_t, uint64_t *, uint8_t *, _QWORD, uint64_t))(*(_QWORD *)v30 + 16))(v30, &v125, buf, 0, 0xFFFFFFFFLL);
  if (SBYTE7(v135[0]) < 0)
    operator delete(*(void **)buf);
  (*(void (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
  for (j = (uint64_t)(*((_QWORD *)v2 + 5) - *((_QWORD *)v2 + 4)) >> 4; j; Espresso::net::remove_layer(v2, j))
    --j;
  *(_DWORD *)buf = 0;
  Espresso::net::insert_layers((uint64_t)v2, (int *)buf, v121);
  std::string::basic_string[abi:ne180100]<0>(buf, "unrolled");
  v140 = 0;
  Espresso::net::pprint((uint64_t)v2, (uint64_t)buf, (uint64_t)v139);
  v32 = v140;
  if (v140 == v139)
  {
    v33 = 4;
    v32 = v139;
  }
  else
  {
    if (!v140)
      goto LABEL_51;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_51:
  if (SBYTE7(v135[0]) < 0)
    operator delete(*(void **)buf);
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v2);
  memset(buf, 0, sizeof(buf));
  Espresso::net::setup_script((uint64_t)v2, (uint64_t *)buf, 0);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  std::string::basic_string[abi:ne180100]<0>(buf, "post_compile");
  v138 = 0;
  Espresso::net::pprint((uint64_t)v2, (uint64_t)buf, (uint64_t)v137);
  v34 = v138;
  if (v138 == v137)
  {
    v35 = 4;
    v34 = v137;
    goto LABEL_57;
  }
  if (v138)
  {
    v35 = 5;
LABEL_57:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  if (SBYTE7(v135[0]) < 0)
    operator delete(*(void **)buf);
  v36 = *((_QWORD *)v2 + 121);
  v37 = (std::__shared_weak_count *)*((_QWORD *)v2 + 122);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  if (v36)
  {
    std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v116, v36 + 184);
  }
  else
  {
    memset(v116, 0, sizeof(v116));
    v117 = 1065353216;
  }
  v104 = v37;
  v114 = 0uLL;
  v115 = 0;
  v113 = 0;
  v40 = *((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 5) == v40)
  {
    v127.__r_.__value_.__r.__words[0] = 0;
    goto LABEL_144;
  }
  v41 = 0;
  v108 = (uint64_t)v2 + 56;
  v106 = v2;
  v107 = (uint64_t)v2 + 96;
  do
  {
    v136 = 0u;
    *(_OWORD *)buf = 0u;
    memset(v135, 0, sizeof(v135));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v136, *(_QWORD *)(v40 + 16 * v41), *(_QWORD *)(v40 + 16 * v41 + 8));
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
    v42 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v108, &v113, (uint64_t)&std::piecewise_construct, (uint64_t **)&v127);
    if (buf != (uint8_t *)(v42 + 3))
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)buf, (std::string *)v42[3], (std::string *)v42[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42[4] - v42[3]) >> 3));
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)&v113;
    v43 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v107, &v113, (uint64_t)&std::piecewise_construct, (uint64_t **)&v127);
    if ((_QWORD *)((char *)v135 + 8) != v43 + 3)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v135 + 8, (std::string *)v43[3], (std::string *)v43[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43[4] - v43[3]) >> 3));
    v44 = 0;
    v45 = 0;
    v133[0] = buf;
    v133[1] = (char *)v135 + 8;
    do
    {
      v109 = v44;
      v46 = (uint64_t *)v133[v45];
      v48 = *v46;
      v47 = v46[1];
      while (v48 != v47)
      {
        if (*(char *)(v48 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v112, *(const std::string::value_type **)v48, *(_QWORD *)(v48 + 8));
        }
        else
        {
          v49 = *(_OWORD *)v48;
          v112.__r_.__value_.__r.__words[2] = *(_QWORD *)(v48 + 16);
          *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v49;
        }
        Espresso::ssa_blob_name::ssa_blob_name((uint64_t)&v127, (uint64_t)&v112);
        if (v127.__r_.__value_.__s.__data_[0])
        {
          if (SHIBYTE(v128) >= 0)
            v50 = HIBYTE(v128);
          else
            v50 = v127.__r_.__value_.__r.__words[2];
          std::string::basic_string[abi:ne180100]((uint64_t)&v111, v50 + 8);
          if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v51 = &v111;
          else
            v51 = (std::string *)v111.__r_.__value_.__r.__words[0];
          if (v50)
          {
            if (SHIBYTE(v128) >= 0)
              p_size = &v127.__r_.__value_.__l.__size_;
            else
              p_size = (std::string::size_type *)v127.__r_.__value_.__l.__size_;
            memmove(v51, p_size, v50);
          }
          strcpy((char *)v51 + v50, "_unroll_");
          std::to_string(&v110, __val);
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v53 = &v110;
          else
            v53 = (std::string *)v110.__r_.__value_.__r.__words[0];
          if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
          else
            size = v110.__r_.__value_.__l.__size_;
          v55 = std::string::append(&v111, (const std::string::value_type *)v53, size);
          v56 = v55->__r_.__value_.__r.__words[0];
          v132[0] = v55->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v132 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
          v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if (*(char *)(v48 + 23) < 0)
            operator delete(*(void **)v48);
          v58 = v132[0];
          *(_QWORD *)v48 = v56;
          *(_QWORD *)(v48 + 8) = v58;
          *(_QWORD *)(v48 + 15) = *(_QWORD *)((char *)v132 + 7);
          *(_BYTE *)(v48 + 23) = v57;
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v110.__r_.__value_.__l.__data_);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v111.__r_.__value_.__l.__data_);
            if (!v36)
              goto LABEL_106;
          }
          else if (!v36)
          {
            goto LABEL_106;
          }
          if (std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::find<std::string>((_QWORD *)(v36 + 184), (uint64_t)&v112))
          {
            v111.__r_.__value_.__r.__words[0] = (std::string::size_type)&v112;
            v59 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v36 + 184, (uint64_t)&v112, (uint64_t)&std::piecewise_construct, (__int128 **)&v111);
            v111.__r_.__value_.__r.__words[0] = v48;
            v60 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v116, v48, (uint64_t)&std::piecewise_construct, (__int128 **)&v111);
            std::string::operator=((std::string *)(v60 + 5), (const std::string *)(v59 + 5));
          }
        }
LABEL_106:
        if (SHIBYTE(v128) < 0)
          operator delete((void *)v127.__r_.__value_.__l.__size_);
        if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v112.__r_.__value_.__l.__data_);
        v48 += 24;
      }
      v44 = 1;
      v45 = 1;
    }
    while ((v109 & 1) == 0);
    v61 = v114.i64[1];
    if (v114.i64[1] >= (unint64_t)v115)
    {
      v63 = (v114.i64[1] - v114.i64[0]) >> 6;
      if ((unint64_t)(v63 + 1) >> 58)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v64 = (uint64_t)&v115[-v114.i64[0]] >> 5;
      if (v64 <= v63 + 1)
        v64 = v63 + 1;
      if ((unint64_t)&v115[-v114.i64[0]] >= 0x7FFFFFFFFFFFFFC0)
        v65 = 0x3FFFFFFFFFFFFFFLL;
      else
        v65 = v64;
      v2 = v106;
      __val = (unint64_t)&v115;
      if (v65)
      {
        if (v65 >> 58)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v66 = (char *)operator new(v65 << 6);
      }
      else
      {
        v66 = 0;
      }
      v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
      v127.__r_.__value_.__l.__size_ = (std::string::size_type)&v66[64 * v63];
      v127.__r_.__value_.__r.__words[2] = v127.__r_.__value_.__l.__size_;
      v128 = &v66[64 * v65];
      std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::construct[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info const&,void>((_QWORD *)v127.__r_.__value_.__l.__size_, (uint64_t *)buf);
      v67 = v127.__r_.__value_.__l.__size_;
      v62 = v127.__r_.__value_.__r.__words[2] + 64;
      v127.__r_.__value_.__r.__words[2] += 64;
      v68 = v114.i64[1];
      v69 = v114.i64[0];
      if (v114.i64[1] == v114.i64[0])
      {
        v71 = vdupq_n_s64(v114.u64[1]);
      }
      else
      {
        do
        {
          *(_QWORD *)(v67 - 64) = 0;
          *(_QWORD *)(v67 - 56) = 0;
          v67 -= 64;
          *(_QWORD *)(v67 + 16) = 0;
          v70 = *(_OWORD *)(v68 - 64);
          v68 -= 64;
          *(_OWORD *)v67 = v70;
          *(_QWORD *)(v67 + 16) = *(_QWORD *)(v68 + 16);
          *(_QWORD *)v68 = 0;
          *(_QWORD *)(v68 + 8) = 0;
          *(_QWORD *)(v68 + 16) = 0;
          *(_QWORD *)(v67 + 24) = 0;
          *(_QWORD *)(v67 + 32) = 0;
          *(_QWORD *)(v67 + 40) = 0;
          *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
          *(_QWORD *)(v67 + 40) = *(_QWORD *)(v68 + 40);
          *(_QWORD *)(v68 + 24) = 0;
          *(_QWORD *)(v68 + 32) = 0;
          *(_QWORD *)(v68 + 40) = 0;
          *(_OWORD *)(v67 + 48) = *(_OWORD *)(v68 + 48);
          *(_QWORD *)(v68 + 48) = 0;
          *(_QWORD *)(v68 + 56) = 0;
        }
        while (v68 != v69);
        v71 = v114;
        v62 = v127.__r_.__value_.__r.__words[2];
      }
      v114.i64[0] = v67;
      v114.i64[1] = v62;
      *(int64x2_t *)&v127.__r_.__value_.__r.__words[1] = v71;
      v72 = v115;
      v115 = v128;
      v128 = v72;
      v127.__r_.__value_.__r.__words[0] = v71.i64[0];
      std::__split_buffer<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info> &>::~__split_buffer((uint64_t)&v127);
    }
    else
    {
      std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::construct[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info const&,void>((_QWORD *)v114.i64[1], (uint64_t *)buf);
      v62 = v61 + 64;
      v2 = v106;
    }
    v114.i64[1] = v62;
    v73 = (std::__shared_weak_count *)*((_QWORD *)&v136 + 1);
    if (*((_QWORD *)&v136 + 1))
    {
      v74 = (unint64_t *)(*((_QWORD *)&v136 + 1) + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)v135 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    v127.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v127);
    v41 = v113 + 1;
    v113 = v41;
    v40 = *((_QWORD *)v2 + 4);
  }
  while (v41 < (*((_QWORD *)v2 + 5) - v40) >> 4);
  v76 = v114.i64[0];
  v127.__r_.__value_.__r.__words[0] = 0;
  if (v114.i64[1] != v114.i64[0])
  {
    v77 = 0;
    do
    {
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(*((_QWORD *)v2 + 4) + 16 * v77), *(_QWORD *)(v76 + (v77 << 6) + 48), *(_QWORD *)(v76 + (v77 << 6) + 56));
      v78 = v127.__r_.__value_.__r.__words[0];
      v79 = v114.i64[0];
      *(_QWORD *)buf = &v127;
      v80 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v2 + 56, (unint64_t *)&v127, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v81 = (std::string **)(v79 + (v78 << 6));
      v82 = (uint64_t)(v80 + 3);
      if ((std::string **)v82 != v81)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v82, *v81, v81[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v81[1] - (char *)*v81) >> 3));
      v83 = v127.__r_.__value_.__r.__words[0];
      v84 = v114.i64[0];
      *(_QWORD *)buf = &v127;
      v85 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)v2 + 96, (unint64_t *)&v127, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
      v86 = v84 + (v83 << 6);
      if (v85 != (_QWORD *)v86)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)(v85 + 3), *(std::string **)(v86 + 24), *(std::string **)(v86 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v86 + 32) - *(_QWORD *)(v86 + 24)) >> 3));
      v77 = v127.__r_.__value_.__r.__words[0] + 1;
      v127.__r_.__value_.__r.__words[0] = v77;
      v76 = v114.i64[0];
    }
    while (v77 < (v114.i64[1] - v114.i64[0]) >> 6);
  }
LABEL_144:
  std::string::basic_string[abi:ne180100]<0>(buf, "sorted");
  v131 = 0;
  Espresso::net::pprint((uint64_t)v2, (uint64_t)buf, (uint64_t)v130);
  v87 = v131;
  if (v131 == v130)
  {
    v89 = 4;
    v87 = v130;
    v88 = v104;
LABEL_148:
    (*(void (**)(void))(*v87 + 8 * v89))();
  }
  else
  {
    v88 = v104;
    if (v131)
    {
      v89 = 5;
      goto LABEL_148;
    }
  }
  if (SBYTE7(v135[0]) < 0)
    operator delete(*(void **)buf);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  Espresso::run_pass_on_network<Espresso::pass_reset_pre_ssa>((uint64_t)v2);
  memset(buf, 0, sizeof(buf));
  Espresso::net::setup_script((uint64_t)v2, (uint64_t *)buf, 0);
  Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()((uint64_t)v2);
  std::vector<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::~vector[abi:ne180100]((void ***)&v114);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v116);
  if (v88)
  {
    v90 = (unint64_t *)&v88->__shared_owners_;
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v119[0]);
  v92 = __p[0];
  __p[0] = 0;
  if (v92)
    operator delete(v92);
  *(_QWORD *)buf = v121;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((_QWORD *)v123);
  if (v122[0])
    operator delete(v122[0]);
  v93 = v126;
  if (v126)
  {
    v94 = (unint64_t *)&v126->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  if (v105)
  {
    v96 = (unint64_t *)&v105->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
      std::__shared_weak_count::__release_weak(v105);
    }
  }
}

void sub_1914090EC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  int v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + a2;
    a1[1] = v4 + a2;
    if (v4)
    {
      v6 = v5 - 1;
      if (((v5 - 1) ^ (v4 - 1)) < 0x40)
      {
LABEL_10:
        v10 = *a1 + 8 * (v4 >> 6);
        v11 = v4 & 0x3F;
        std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v10, a2);
        return a1;
      }
    }
    else
    {
      v6 = v5 - 1;
    }
    v7 = v6 >> 6;
    if (v5 >= 0x41)
      v8 = v7;
    else
      v8 = 0;
    *(_QWORD *)(*a1 + 8 * v8) = 0;
    goto LABEL_10;
  }
  return a1;
}

void std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::construct[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,util_chain_concats(Espresso::net &,BOOL)::concat_chain_element const&,void>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
}

void sub_191409608(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>(i - 64);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t util_chain_concats(Espresso::net &,BOOL)::concat_chain_element::~concat_chain_element(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

std::vector<std::string>::iterator std::vector<std::string>::insert(std::vector<std::string> *this, std::vector<std::string>::const_iterator __position, std::vector<std::string>::const_reference __x)
{
  std::vector<std::string>::pointer end;
  std::string *value;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::vector<std::string>::iterator v9;
  const std::string *begin;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::__split_buffer<std::string>::pointer v18;
  uint64_t v19;
  unint64_t v20;
  std::string *v21;
  uint64_t v22;
  std::__split_buffer<std::string>::pointer v23;
  int64_t v24;
  std::string *v25;
  uint64_t v26;
  std::string *v27;
  __int128 v28;
  int64x2_t v29;
  std::string *v30;
  __int128 v31;
  std::__split_buffer<std::string> v32;
  std::__split_buffer<std::string> v33;

  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3) + 1;
    if (v11 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v12 = (char *)__position.__i_ - (char *)begin;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)__position.__i_ - (char *)begin) >> 3);
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v14 > v11)
      v11 = 2 * v14;
    if (v14 >= 0x555555555555555)
      v15 = 0xAAAAAAAAAAAAAAALL;
    else
      v15 = v11;
    v32.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v15)
    {
      v17 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v15);
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v18 = v17 + v13;
    v32.__first_ = v17;
    v32.__begin_ = v18;
    v32.__end_ = v18;
    v32.__end_cap_.__value_ = &v17[v16];
    if (v13 == v16)
    {
      if (v12 < 1)
      {
        if (begin == __position.__i_)
          v20 = 1;
        else
          v20 = 2 * v13;
        v33.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
        v21 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v20);
        v23 = v32.__begin_;
        if (v32.__end_ == v32.__begin_)
        {
          v29 = vdupq_n_s64((unint64_t)v32.__begin_);
          v25 = &v21[v20 >> 2];
        }
        else
        {
          v24 = v32.__end_ - v32.__begin_;
          v25 = &v21[(v20 >> 2) + v24];
          v26 = 24 * v24;
          v27 = &v21[v20 >> 2];
          do
          {
            v28 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v27->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            ++v27;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            ++v23;
            v26 -= 24;
          }
          while (v26);
          v29 = *(int64x2_t *)&v32.__begin_;
        }
        v30 = v32.__end_cap_.__value_;
        v33.__first_ = v32.__first_;
        v32.__first_ = v21;
        v32.__begin_ = &v21[v20 >> 2];
        *(int64x2_t *)&v33.__begin_ = v29;
        v32.__end_ = v25;
        v32.__end_cap_.__value_ = &v21[v22];
        v33.__end_cap_.__value_ = v30;
        std::__split_buffer<std::string>::~__split_buffer(&v33);
        v18 = v32.__end_;
      }
      else
      {
        v19 = v13 + 2;
        if (v13 >= -1)
          v19 = v13 + 1;
        v18 -= v19 >> 1;
        v32.__begin_ = v18;
        v32.__end_ = v18;
      }
    }
    if (SHIBYTE(__x->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v18, __x->__r_.__value_.__l.__data_, __x->__r_.__value_.__l.__size_);
    }
    else
    {
      v31 = *(_OWORD *)&__x->__r_.__value_.__l.__data_;
      v18->__r_.__value_.__r.__words[2] = __x->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v31;
    }
    ++v32.__end_;
    std::vector<std::string>::__swap_out_circular_buffer(this, &v32, (std::vector<std::string>::pointer)__position.__i_);
    std::__split_buffer<std::string>::~__split_buffer(&v32);
  }
  else if (__position.__i_ == end)
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)this, (__int128 *)__x);
  }
  else
  {
    std::vector<std::string>::__move_range(this, (std::vector<std::string>::pointer)__position.__i_, end, (std::vector<std::string>::pointer)&__position.__i_[1]);
    if (__position.__i_ <= __x)
      __x += this->__end_ > __x;
    return (std::vector<std::string>::iterator)std::string::operator=((std::string *)__position.__i_, __x);
  }
  return v9;
}

void sub_191409950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a9);
  _Unwind_Resume(a1);
}

int *std::__introsort<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *,false>(int *result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  int *v24;
  int *v25;
  int v26;
  int v27;
  BOOL v28;
  int v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int *v37;
  int v38;
  int *v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int *v46;
  BOOL v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  int v62;
  BOOL v63;
  int *v64;
  int v65;
  int *v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int *v73;
  int *v74;
  int *v75;
  int v76;
  int v77;
  uint64_t v78;
  int v79;
  BOOL v80;
  uint64_t v81;
  unint64_t v82;
  int *v83;
  int v84;
  int v85;
  int *v86;
  int v87;
  int v88;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  v9 = v7;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = a2 - v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *v9;
        if (*v8 > *v9)
        {
          *v9 = *v8;
          *v8 = v38;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        v39 = v9 + 2;
        v40 = v9 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v9, v9 + 1, v9 + 2, v9 + 3);
        v41 = v9[3];
        if (*v8 > v41)
        {
          *v40 = *v8;
          *v8 = v41;
          v42 = *v40;
          v43 = *v39;
          if (*v40 > *v39)
          {
            *v39 = v42;
            *v40 = v43;
            v44 = v9[1];
            if (v42 > v44)
            {
              v9[1] = v42;
              v9[2] = v44;
              v45 = *v9;
              if (v42 > *v9)
              {
                *v9 = v42;
                v9[1] = v45;
              }
            }
          }
        }
        return result;
      default:
        if (v10 <= 95)
        {
          v46 = v9 + 1;
          v48 = v9 == a2 || v46 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 4;
              v50 = v9;
              do
              {
                v52 = *v50;
                v51 = v50[1];
                v50 = v46;
                if (v51 > v52)
                {
                  v53 = v49;
                  while (1)
                  {
                    *(int *)((char *)v9 + v53) = v52;
                    v54 = v53 - 4;
                    if (v53 == 4)
                      break;
                    v52 = *(int *)((char *)v9 + v53 - 8);
                    v53 -= 4;
                    if (v51 <= v52)
                    {
                      v55 = (int *)((char *)v9 + v54);
                      goto LABEL_76;
                    }
                  }
                  v55 = v9;
LABEL_76:
                  *v55 = v51;
                }
                v46 = v50 + 1;
                v49 += 4;
              }
              while (v50 + 1 != a2);
            }
          }
          else if (!v48)
          {
            do
            {
              v88 = *v7;
              v87 = v7[1];
              v7 = v46;
              if (v87 > v88)
              {
                do
                {
                  *v46 = v88;
                  v88 = *(v46 - 2);
                  --v46;
                }
                while (v87 > v88);
                *v46 = v87;
              }
              v46 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v56 = (v11 - 2) >> 1;
            v57 = v56;
            do
            {
              v58 = v57;
              if (v56 >= v57)
              {
                v59 = (2 * v57) | 1;
                v60 = &v9[v59];
                v61 = *v60;
                if (2 * v58 + 2 < (uint64_t)v11)
                {
                  v62 = v60[1];
                  v63 = v61 <= v62;
                  if (v61 >= v62)
                    v61 = v60[1];
                  if (!v63)
                  {
                    ++v60;
                    v59 = 2 * v58 + 2;
                  }
                }
                v64 = &v9[v58];
                v65 = *v64;
                if (v61 <= *v64)
                {
                  do
                  {
                    v66 = v60;
                    *v64 = v61;
                    if (v56 < v59)
                      break;
                    v67 = (2 * v59) | 1;
                    v60 = &v9[v67];
                    v59 = 2 * v59 + 2;
                    v61 = *v60;
                    if (v59 >= (uint64_t)v11)
                    {
                      v59 = v67;
                    }
                    else
                    {
                      result = v60 + 1;
                      v68 = v60[1];
                      v69 = v61 <= v68;
                      if (v61 >= v68)
                        v61 = v60[1];
                      if (v69)
                        v59 = v67;
                      else
                        ++v60;
                    }
                    v64 = v66;
                  }
                  while (v61 <= v65);
                  *v66 = v65;
                }
              }
              v57 = v58 - 1;
            }
            while (v58);
            v70 = (unint64_t)v10 >> 2;
            do
            {
              v71 = 0;
              v72 = *v9;
              v73 = v9;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v71 = 2 * v71 + 2;
                if (v71 >= v70)
                {
                  v71 = v78;
                }
                else
                {
                  v79 = v75[1];
                  v80 = v76 <= v79;
                  if (v76 >= v79)
                    v76 = v75[1];
                  if (v80)
                    v71 = v78;
                  else
                    ++v75;
                }
                *v73 = v76;
                v73 = v75;
              }
              while (v71 <= (uint64_t)((unint64_t)(v70 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v81 = (char *)v75 - (char *)v9 + 4;
                if (v81 >= 5)
                {
                  v82 = (((unint64_t)v81 >> 2) - 2) >> 1;
                  v83 = &v9[v82];
                  v84 = *v83;
                  v85 = *v75;
                  if (*v83 > *v75)
                  {
                    do
                    {
                      v86 = v83;
                      *v75 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v9[v82];
                      v84 = *v83;
                      v75 = v86;
                    }
                    while (*v83 > v85);
                    *v86 = v85;
                  }
                }
              }
              v63 = v70-- <= 2;
            }
            while (!v63);
          }
          return result;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x201)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(&v7[v11 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7, &v7[v11 >> 1], a2 - 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7 + 2, &v7[v12 + 1], a2 - 3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v13 - 1, v13, &v7[v12 + 1]);
          v14 = *v7;
          *v7 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v7;
        v16 = v7;
        if ((a4 & 1) == 0)
        {
          v16 = v7;
          if (*(v7 - 1) <= v15)
          {
            if (v15 <= *v8)
            {
              v30 = v7 + 1;
              do
              {
                v9 = v30;
                if (v30 >= a2)
                  break;
                ++v30;
              }
              while (v15 <= *v9);
            }
            else
            {
              v9 = v7;
              do
              {
                v29 = v9[1];
                ++v9;
              }
              while (v15 <= v29);
            }
            v31 = a2;
            if (v9 < a2)
            {
              v31 = a2;
              do
                v32 = *--v31;
              while (v15 > v32);
            }
            if (v9 < v31)
            {
              v33 = *v9;
              v34 = *v31;
              do
              {
                *v9 = v34;
                *v31 = v33;
                do
                {
                  v35 = v9[1];
                  ++v9;
                  v33 = v35;
                }
                while (v15 <= v35);
                do
                {
                  v36 = *--v31;
                  v34 = v36;
                }
                while (v15 > v36);
              }
              while (v9 < v31);
            }
            v37 = v9 - 1;
            if (v9 - 1 != v7)
              *v7 = *v37;
            a4 = 0;
            *v37 = v15;
            continue;
          }
        }
        do
        {
          v17 = v16;
          v19 = v16[1];
          ++v16;
          v18 = v19;
        }
        while (v19 > v15);
        v20 = a2;
        if (v17 == v7)
        {
          v20 = a2;
          do
          {
            if (v16 >= v20)
              break;
            v22 = *--v20;
          }
          while (v22 <= v15);
        }
        else
        {
          do
            v21 = *--v20;
          while (v21 <= v15);
        }
        if (v16 < v20)
        {
          v23 = *v20;
          v24 = v16;
          v25 = v20;
          do
          {
            *v24 = v23;
            *v25 = v18;
            do
            {
              v17 = v24;
              v26 = v24[1];
              ++v24;
              v18 = v26;
            }
            while (v26 > v15);
            do
            {
              v27 = *--v25;
              v23 = v27;
            }
            while (v27 <= v15);
          }
          while (v24 < v25);
        }
        if (v17 != v7)
          *v7 = *v17;
        *v17 = v15;
        if (v16 < v20)
        {
LABEL_29:
          result = (int *)std::__introsort<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *,false>(v7, v17, a3, a4 & 1);
          a4 = 0;
          v9 = v17 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v7, v17);
        v9 = v17 + 1;
        result = (int *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(v17 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_29;
        }
        a2 = v17;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

void std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>(uint64_t a1)
{
  void **v2;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void ***std::vector<util_chain_concats(Espresso::net &,BOOL)::concat_chain,std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain>>::~vector[abi:ne180100](void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = *(v5 - 4);
        v5 -= 4;
        v6 = v7;
        if (v7)
        {
          v8 = (uint64_t)*(v3 - 3);
          v9 = v6;
          if ((void *)v8 != v6)
          {
            do
            {
              v8 -= 64;
              std::allocator_traits<std::allocator<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element>>::destroy[abi:ne180100]<util_chain_concats(Espresso::net &,BOOL)::concat_chain_element,void>(v8);
            }
            while ((void *)v8 != v6);
            v9 = *v5;
          }
          *(v3 - 3) = v6;
          operator delete(v9);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke(uint64_t a1, int *a2)
{
  int *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2);
  v6 = *v4;
  v5 = v4[1];
  v7 = v4[2];
  if (v5 == 1)
    v9 = 1;
  else
    v9 = v4[4];
  if (v5 == 1)
    v10 = v4[4];
  else
    v10 = v4[1];
  v8 = v4[3];
  *(_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2) = v8;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2) + 4) = v10;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2) + 8) = v7;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2) + 12) = v6;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2) + 16) = v9;
  if (v9 == 1)
    v11 = 4;
  else
    v11 = 5;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 384))(*(_QWORD *)a2) + 20) = v11;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = a2[14];
  v15 = v13;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12 + 96, v13, &v15);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)(v12 + 184), (_QWORD *)v14[3]);
}

void ___ZL26make_shape_from_4d_to_convRN8Espresso3netE_block_invoke_2(uint64_t a1, int *a2)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;

  v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2);
  v6 = v4[1];
  v5 = v4[2];
  v7 = v4[3];
  if (v5 == 1)
    v9 = 1;
  else
    v9 = v4[5];
  if (v5 == 1)
    v10 = v4[5];
  else
    v10 = v4[2];
  v8 = v4[4];
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) + 4) = v8;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) + 8) = v10;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) + 12) = v7;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) + 16) = v6;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) + 20) = v9;
  if (v9 == 1)
    v11 = 4;
  else
    v11 = 5;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2) + 24) = v11;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = a2[14];
  v15 = v13;
  v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12 + 96, v13, &v15);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__erase_unique<std::string>((uint64_t **)(v12 + 184), (_QWORD *)v14[3]);
}

uint64_t ___ZL24make_shape_from_4d_to_2dRN8Espresso3netE_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  uint64_t result;

  v3 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2);
  v4 = v3[2];
  v5 = v3[3];
  v6 = v3[4];
  *(_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) = v4;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 4) = v5;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 8) = v6;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 12) = 1;
  *(_DWORD *)((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2) + 16) = 1;
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2);
  *(_DWORD *)(result + 20) = 3;
  return result;
}

int *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(int *result, int *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 <= *result)
  {
    if (v5 > v3)
    {
      *a2 = v5;
      *a3 = v3;
      v6 = *result;
      if (*a2 > *result)
      {
        *result = *a2;
        *a2 = v6;
      }
    }
  }
  else
  {
    if (v5 <= v3)
    {
      *result = v3;
      *a2 = v4;
      if (*a3 <= v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v5;
    }
    *a3 = v4;
  }
  return result;
}

int *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(int *a1, int *a2, int *a3, int *a4)
{
  int *result;
  int v9;
  int v10;
  int v11;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a2, a3);
  v9 = *a3;
  if (*a4 > *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 > *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 > *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(int *a1, int *a2)
{
  uint64_t v4;
  _BOOL8 result;
  int v6;
  int v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 > *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 2;
      v18 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a1 + 2, a1 + 3);
      v19 = *(a2 - 1);
      v20 = a1[3];
      if (v19 > v20)
      {
        *v18 = v19;
        *(a2 - 1) = v20;
        v21 = *v18;
        v22 = *v17;
        if (*v18 > *v17)
        {
          *v17 = v21;
          *v18 = v22;
          v23 = a1[1];
          if (v21 > v23)
          {
            a1[1] = v21;
            a1[2] = v23;
            v24 = *a1;
            if (v21 > *a1)
            {
              *a1 = v21;
              a1[1] = v24;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,util_chain_concats(Espresso::net &,BOOL)::$_0 &,int *>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 12;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 > *v8)
    {
      v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        v15 = v14 - 4;
        if (v14 == 4)
          break;
        v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 <= v13)
        {
          v16 = (int *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 4;
    if (++v9 == a2)
      return 1;
  }
}

void Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_0::operator()(uint64_t a1)
{
  __int128 *v2;
  __int128 *i;
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  __int128 *v13[3];
  char *v14[3];
  char **v15;
  char *v16[2];

  v16[0] = 0;
  v16[1] = 0;
  v15 = v16;
  v2 = *(__int128 **)(a1 + 640);
  for (i = *(__int128 **)(a1 + 648); v2 != i; v2 = (__int128 *)((char *)v2 + 24))
  {
    v13[0] = v2;
    v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 184), v2, v13);
    v13[0] = v2;
    v5 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v15, v2, v13);
    v6 = *(_OWORD *)(v4 + 56);
    v7 = *(_OWORD *)(v4 + 72);
    *((_QWORD *)v5 + 11) = *((_QWORD *)v4 + 11);
    *(_OWORD *)(v5 + 72) = v7;
    *(_OWORD *)(v5 + 56) = v6;
    if (v5 != v4)
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v5 + 96, *((char **)v4 + 12), *((_QWORD *)v4 + 13), (uint64_t)(*((_QWORD *)v4 + 13) - *((_QWORD *)v4 + 12)) >> 2);
  }
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(a1 + 184, *(char **)(a1 + 192));
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::shared_ptr<Espresso::net>::shared_ptr[abi:ne180100]<Espresso::net,void>(&v11, *(_QWORD *)a1, *(std::__shared_weak_count **)(a1 + 8));
  Espresso::compute_network_shape_starting_from_data_shapes(&v11, (uint64_t)&v15, (uint64_t)v13);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_BYTE *)(a1 + 180) = 0;
  Espresso::shape_network_recursive((Espresso *)a1, (Espresso::net *)v13, 0, 0);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v14, v14[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v13, (char *)v13[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v15, v16[0]);
}

void sub_19140A7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
  Espresso::network_shape::~network_shape(&a12);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::construct[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info const&,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1 + 3, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 3));
  v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void sub_19140A890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info> &>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::destroy[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,void>((void **)(i - 64));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ***std::vector<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::~vector[abi:ne180100](void ***a1)
{
  void **v2;
  void **v3;
  void **v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v3 -= 8;
        std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::destroy[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,void>(v3);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void std::allocator_traits<std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info>>::destroy[abi:ne180100]<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::layer_info,void>(void **a1)
{
  void **v2;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  v2 = a1 + 3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E2DB1558;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E2DB1558;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::operator()(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  int v17;
  _BOOL4 v19;
  int v20;
  int v21;
  _BOOL4 v23;
  int *v24;
  int v25;
  int v26;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  std::string *v37;
  __int128 v38;
  char *v39;
  std::string::size_type size;
  std::string::size_type v41;
  uint64_t v42;
  std::string::size_type v43;
  std::string *v44;
  std::vector<std::string> *v45;
  const void *v46;
  void *v47;
  void *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  void *v62;
  __int128 v63;
  void *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  void *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  const char *v118;
  Espresso *v119;
  NSObject *v120;
  std::__shared_weak_count *v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  _QWORD *v126;
  int v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  void *v130;
  std::__shared_weak_count *v131;
  void *lpsrc;
  std::__shared_weak_count *v133;
  _QWORD v134[2];
  uint64_t v135;
  std::__shared_weak_count *v136;
  std::string __p;
  std::vector<std::string> v138[2];
  __int128 v139;
  std::string::size_type v140;
  unint64_t v141;
  _BYTE buf[24];
  _QWORD *v143;
  std::string __str;
  __int128 v145;

  *(_QWORD *)&v145 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v141 = *a3;
  v5 = *(_QWORD *)(v4 + 32) + 16 * v141;
  v6 = *(_QWORD *)v5;
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 64);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)Espresso::pass_constant_if_conditions::kernel_attribute_name);
  v8 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v7 + 240), (unsigned __int8 *)&__p);
  if (v8)
    v9 = *((_DWORD *)v8 + 10);
  else
    v9 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)v5;
  v11 = (uint64_t *)(*(_QWORD *)v5 + 40);
  v12 = *(unsigned __int8 *)(*(_QWORD *)v5 + 63);
  if ((*(char *)(*(_QWORD *)v5 + 63) & 0x80000000) == 0)
  {
    v13 = *(_QWORD *)v5 + 40;
    if (v12 != 6)
    {
      v14 = (int *)(*(_QWORD *)v5 + 40);
      if (v12 != 7)
      {
LABEL_29:
        if (v12 != 7)
        {
          if (v12 != 11)
            goto LABEL_51;
          goto LABEL_45;
        }
        v24 = (int *)(*(_QWORD *)v5 + 40);
        goto LABEL_35;
      }
      goto LABEL_22;
    }
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(v10 + 48);
  if (v15 == 6)
  {
    v13 = *v11;
LABEL_12:
    v16 = *(_DWORD *)v13;
    v17 = *(unsigned __int16 *)(v13 + 4);
    v19 = v16 == 1700750947 && v17 == 25710;
    v9 |= v19;
    if ((v12 & 0x80) == 0)
      goto LABEL_51;
    v15 = *(_QWORD *)(v10 + 48);
  }
  if (v15 != 7)
    goto LABEL_43;
  v14 = (int *)*v11;
LABEL_22:
  v20 = *v14;
  v21 = *(int *)((char *)v14 + 3);
  v23 = v20 == 1784637027 && v21 == 1886221674;
  v9 |= v23;
  if ((v12 & 0x80) == 0)
    goto LABEL_29;
  v15 = *(_QWORD *)(v10 + 48);
  if (v15 == 7)
  {
    v24 = (int *)*v11;
LABEL_35:
    v25 = *v24;
    v26 = *(int *)((char *)v24 + 3);
    v28 = v25 == 1818191459 && v26 == 1886351212;
    v9 |= v28;
    if ((v12 & 0x80) == 0)
      goto LABEL_51;
    v15 = *(_QWORD *)(v10 + 48);
  }
LABEL_43:
  if (v15 != 11)
  {
LABEL_51:
    v32 = 0;
    goto LABEL_52;
  }
  v11 = (uint64_t *)*v11;
LABEL_45:
  v29 = *v11;
  v30 = *(uint64_t *)((char *)v11 + 3);
  v32 = v29 == 0x747269765F696870 && v30 == 0x6C6175747269765FLL;
LABEL_52:
  if (v9 | v32)
  {
    v33 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16 * v141);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 8))(v33, *(_QWORD *)(a1 + 8));
  }
  else
  {
    v34 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)buf = v10 + 16;
    v35 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, (unsigned __int8 *)(v10 + 16), (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    v36 = *((_DWORD *)v35 + 10);
    *((_DWORD *)v35 + 10) = v36 + 1;
    std::to_string(&__p, v36);
    v37 = std::string::insert(&__p, 0, "__unroll_");
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v140 = v37->__r_.__value_.__r.__words[2];
    v139 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    LODWORD(__p.__r_.__value_.__l.__data_) = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0u;
    memset(v138, 0, sizeof(v138));
    v39 = (char *)operator new(0xF8uLL);
    *((_QWORD *)v39 + 1) = 0;
    *((_QWORD *)v39 + 2) = 0;
    *(_QWORD *)v39 = &off_1E2DBF0D0;
    *((_QWORD *)v39 + 3) = &off_1E2DA1A38;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 56) = 0u;
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 88) = 0u;
    *(_OWORD *)(v39 + 104) = 0u;
    *(_OWORD *)(v39 + 120) = 0u;
    *(_OWORD *)(v39 + 136) = 0u;
    *(_OWORD *)(v39 + 152) = 0u;
    *(_OWORD *)(v39 + 161) = 0u;
    *((_OWORD *)v39 + 13) = 0u;
    *((_OWORD *)v39 + 14) = 0u;
    *((_QWORD *)v39 + 30) = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v39 + 24);
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v39;
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(*(_QWORD *)v5 + 16), (const void **)&v139, (uint64_t)buf);
    size = __p.__r_.__value_.__l.__size_;
    v41 = __p.__r_.__value_.__l.__size_ + 16;
    if (*(char *)(__p.__r_.__value_.__l.__size_ + 39) < 0)
    {
      operator delete(*(void **)v41);
      size = __p.__r_.__value_.__l.__size_;
    }
    v42 = *(_QWORD *)&buf[16];
    *(_OWORD *)v41 = *(_OWORD *)buf;
    *(_QWORD *)(v41 + 16) = v42;
    std::string::operator=((std::string *)(size + 40), (const std::string *)(*(_QWORD *)v5 + 40));
    v43 = __p.__r_.__value_.__l.__size_;
    *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 8) = *(_QWORD *)(*(_QWORD *)v5 + 8);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v43 + 64), *(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
    v44 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 56, &v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
    if (&__p != v44)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v138, (std::string *)v44[1].__r_.__value_.__l.__data_, (std::string *)v44[1].__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44[1].__r_.__value_.__l.__size_ - v44[1].__r_.__value_.__r.__words[0]) >> 3));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
    v45 = (std::vector<std::string> *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 96, &v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
    if (&v138[1] != &v45[1])
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v138[1], v45[1].__begin_, v45[1].__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v45[1].__end_ - (char *)v45[1].__begin_) >> 3));
    v46 = *(const void **)(v6 + 64);
    if (v46)
    {
      if (!v47)
        goto LABEL_116;
      v48 = v47;
      v49 = *(std::__shared_weak_count **)(v6 + 72);
      if (v49)
      {
        p_shared_owners = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldxr(p_shared_owners);
        while (__stxr(v51 + 1, p_shared_owners));
      }
      if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v47 + 320))(v47) + 16) == 1
        && *(_QWORD *)(*(_QWORD *)v5 + 88) - *(_QWORD *)(*(_QWORD *)v5 + 80) == 32)
      {
        v52 = *(_QWORD *)(a1 + 24);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
        v53 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 56, &v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
        if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v52 + 8), (unsigned __int8 *)(v53[3] + 24)))
        {
          v54 = *(_QWORD *)(*(_QWORD *)v5 + 80);
          v55 = *(std::__shared_weak_count **)(v54 + 24);
          v134[0] = *(_QWORD *)(v54 + 16);
          v134[1] = v55;
          if (v55)
          {
            v56 = (unint64_t *)&v55->__shared_owners_;
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          Espresso::sync_copy_to_host(&v135, v134);
          if (v55)
          {
            v58 = (unint64_t *)&v55->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
              std::__shared_weak_count::__release_weak(v55);
            }
          }
          v60 = (*(uint64_t (**)(void *))(*(_QWORD *)v48 + 320))(v48);
          v61 = *(_OWORD *)v60;
          *(_QWORD *)&buf[16] = *(_QWORD *)(v60 + 16);
          *(_OWORD *)buf = v61;
          *(_DWORD *)&buf[16] = 0;
          LODWORD(v61) = **(_DWORD **)(v135 + 24);
          *(_DWORD *)&buf[4] = (int)(float)(*(float *)&v61 + 0.5);
          *(_DWORD *)&buf[8] = (int)(float)((float)(*(float *)&v61 + (float)*(int *)&buf[20]) + 0.5);
          Espresso::abstract_engine_factory::shared(&v130);
          v62 = v130;
          std::string::basic_string[abi:ne180100]<0>(&__str, "slice");
          LODWORD(v128) = 0;
          Espresso::abstract_engine_factory::make_kernel_priv((uint64_t)v62, v4 + 16, (uint64_t)&__str, (uint64_t)buf, (int *)&v128);
          v63 = 0uLL;
          if (lpsrc)
          {
            v63 = 0uLL;
            if (v64)
            {
              *(_QWORD *)&v63 = v64;
              *((_QWORD *)&v63 + 1) = v133;
              if (v133)
              {
                v65 = (unint64_t *)&v133->__shared_owners_;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
              }
            }
          }
          v67 = *(std::__shared_weak_count **)(__p.__r_.__value_.__l.__size_ + 72);
          *(_OWORD *)(__p.__r_.__value_.__l.__size_ + 64) = v63;
          if (v67)
          {
            v68 = (unint64_t *)&v67->__shared_owners_;
            do
              v69 = __ldaxr(v68);
            while (__stlxr(v69 - 1, v68));
            if (!v69)
            {
              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
              std::__shared_weak_count::__release_weak(v67);
            }
          }
          v70 = v133;
          if (v133)
          {
            v71 = (unint64_t *)&v133->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v73 = v131;
          if (v131)
          {
            v74 = (unint64_t *)&v131->__shared_owners_;
            do
              v75 = __ldaxr(v74);
            while (__stlxr(v75 - 1, v74));
            if (!v75)
            {
              ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
              std::__shared_weak_count::__release_weak(v73);
            }
          }
          if (SHIBYTE(v138[0].__begin_->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(&__str, v138[0].__begin_->__r_.__value_.__l.__data_, v138[0].__begin_->__r_.__value_.__l.__size_);
          }
          else
          {
            v76 = *(_OWORD *)&v138[0].__begin_->__r_.__value_.__l.__data_;
            __str.__r_.__value_.__r.__words[2] = v138[0].__begin_->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v76;
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(v138, &__str, &v145, 1uLL);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          v77 = v136;
          if (v136)
          {
            v78 = (unint64_t *)&v136->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
        }
      }
      if (v49)
      {
        v80 = (unint64_t *)&v49->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v46 = *(const void **)(v6 + 64);
      if (v46)
      {
LABEL_116:
        if (v82)
        {
          v83 = v82;
          v84 = *(std::__shared_weak_count **)(v6 + 72);
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldxr(v85);
            while (__stxr(v86 + 1, v85));
          }
          if (*(_BYTE *)((*(uint64_t (**)(void *))(*(_QWORD *)v82 + 320))(v82) + 21))
          {
            if (*(_QWORD *)(*(_QWORD *)v5 + 88) - *(_QWORD *)(*(_QWORD *)v5 + 80) == 48)
            {
              v87 = *(_QWORD *)(a1 + 24);
              __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
              v88 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v4 + 56, &v141, (uint64_t)&std::piecewise_construct, (uint64_t **)&__str);
              if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(v87 + 8), (unsigned __int8 *)(v88[3] + 24)))
              {
                v89 = *(_QWORD *)(*(_QWORD *)v5 + 80);
                v90 = *(std::__shared_weak_count **)(v89 + 24);
                lpsrc = *(void **)(v89 + 16);
                v133 = v90;
                if (v90)
                {
                  v91 = (unint64_t *)&v90->__shared_owners_;
                  do
                    v92 = __ldxr(v91);
                  while (__stxr(v92 + 1, v91));
                }
                Espresso::sync_copy_to_host(&v135, &lpsrc);
                if (v90)
                {
                  v93 = (unint64_t *)&v90->__shared_owners_;
                  do
                    v94 = __ldaxr(v93);
                  while (__stlxr(v94 - 1, v93));
                  if (!v94)
                  {
                    ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                    std::__shared_weak_count::__release_weak(v90);
                  }
                }
                v95 = (*(uint64_t (**)(void *))(*(_QWORD *)v83 + 320))(v83);
                v96 = *(_OWORD *)v95;
                *(_QWORD *)&buf[16] = *(_QWORD *)(v95 + 16);
                *(_OWORD *)buf = v96;
                *(_DWORD *)&buf[16] = (int)**(float **)(v135 + 24);
                Espresso::abstract_engine_factory::shared(&v128);
                v97 = v128;
                std::string::basic_string[abi:ne180100]<0>(&__str, "scatter");
                v127 = 0;
                Espresso::abstract_engine_factory::make_kernel_priv(v97, v4 + 16, (uint64_t)&__str, (uint64_t)buf, &v127);
                v98 = 0uLL;
                if (v130)
                {
                  v98 = 0uLL;
                  if (v99)
                  {
                    *(_QWORD *)&v98 = v99;
                    *((_QWORD *)&v98 + 1) = v131;
                    if (v131)
                    {
                      v100 = (unint64_t *)&v131->__shared_owners_;
                      do
                        v101 = __ldxr(v100);
                      while (__stxr(v101 + 1, v100));
                    }
                  }
                }
                v102 = *(std::__shared_weak_count **)(__p.__r_.__value_.__l.__size_ + 72);
                *(_OWORD *)(__p.__r_.__value_.__l.__size_ + 64) = v98;
                if (v102)
                {
                  v103 = (unint64_t *)&v102->__shared_owners_;
                  do
                    v104 = __ldaxr(v103);
                  while (__stlxr(v104 - 1, v103));
                  if (!v104)
                  {
                    ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
                    std::__shared_weak_count::__release_weak(v102);
                  }
                }
                v105 = v131;
                if (v131)
                {
                  v106 = (unint64_t *)&v131->__shared_owners_;
                  do
                    v107 = __ldaxr(v106);
                  while (__stlxr(v107 - 1, v106));
                  if (!v107)
                  {
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                  }
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                v108 = v129;
                if (v129)
                {
                  v109 = (unint64_t *)&v129->__shared_owners_;
                  do
                    v110 = __ldaxr(v109);
                  while (__stlxr(v110 - 1, v109));
                  if (!v110)
                  {
                    ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                    std::__shared_weak_count::__release_weak(v108);
                  }
                }
                v111 = v136;
                if (v136)
                {
                  v112 = (unint64_t *)&v136->__shared_owners_;
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                    std::__shared_weak_count::__release_weak(v111);
                  }
                }
              }
            }
          }
          if (v84)
          {
            v114 = (unint64_t *)&v84->__shared_owners_;
            do
              v115 = __ldaxr(v114);
            while (__stlxr(v115 - 1, v114));
            if (!v115)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
        }
      }
    }
    v116 = *(_QWORD *)(a1 + 32);
    v117 = *(_QWORD *)(v116 + 8);
    if (v117 >= *(_QWORD *)(v116 + 16))
    {
      v119 = (Espresso *)std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(*(int64x2_t **)(a1 + 32), (uint64_t)&__p);
    }
    else
    {
      std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(*(_QWORD *)(v116 + 8), (uint64_t)&__p);
      v119 = (Espresso *)(v117 + 72);
      *(_QWORD *)(v116 + 8) = v117 + 72;
    }
    *(_QWORD *)(v116 + 8) = v119;
    Espresso::espresso_os_log_subsystem(v119, v118);
    v120 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
    {
      v124 = *(_QWORD *)(*(_QWORD *)(v4 + 32) + 16 * v141);
      v125 = (_QWORD *)(v124 + 40);
      if (*(char *)(v124 + 63) < 0)
        v125 = (_QWORD *)*v125;
      v126 = (_QWORD *)(v124 + 16);
      if (*(char *)(v124 + 39) < 0)
        v126 = (_QWORD *)*v126;
      *(_DWORD *)buf = 134218498;
      *(_QWORD *)&buf[4] = v141;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v125;
      *(_WORD *)&buf[22] = 2080;
      v143 = v126;
      _os_log_debug_impl(&dword_190DAF000, v120, OS_LOG_TYPE_DEBUG, "Unroll: %zu %s %s\n", buf, 0x20u);
    }

    *(_QWORD *)buf = &v138[1];
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    *(_QWORD *)buf = v138;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    v121 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
    if (__p.__r_.__value_.__r.__words[2])
    {
      v122 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
      do
        v123 = __ldaxr(v122);
      while (__stlxr(v123 - 1, v122));
      if (!v123)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    if (SHIBYTE(v140) < 0)
      operator delete((void *)v139);
  }
}

void sub_19140B630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  if (v36)
  {
    v42 = (unint64_t *)&v36->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  *(_QWORD *)(v37 + 104) = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
  *(_QWORD *)(v37 + 104) = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 160));
  if (a24)
  {
    v44 = (unint64_t *)&a24->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))a24->__on_zero_shared)(a24);
      std::__shared_weak_count::__release_weak(a24);
    }
  }
  if (a36 < 0)
    operator delete(*(void **)(v37 + 72));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso16util_unroll_loopERNS_3netEbbE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2,std::allocator<Espresso::util_unroll_loop(Espresso::net &,BOOL,BOOL)::$_2>,void ()(Espresso::net*,unsigned long)>::target_type()
{
}

void *std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int &,int &,int &,int &,Espresso::blob<float,2>::UnitializedBlobType,void>(_QWORD *a1, int a2, int a3, int a4, int a5)
{
  char *v10;
  void *result;

  v10 = (char *)operator new(0x58uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_1E2DBEC38;
  *((_QWORD *)v10 + 3) = &off_1E2DA11B0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 8) = a2;
  *((_DWORD *)v10 + 9) = a3;
  result = Espresso::kern_alloc_uninitialized((Espresso *)(4 * a2 * (uint64_t)a3 * a4 * a5));
  *((_QWORD *)v10 + 5) = result;
  v10[48] = 1;
  *a1 = v10 + 24;
  a1[1] = v10;
  return result;
}

void sub_19140B9B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add_t<Espresso::generic_fill_kernel,Espresso::fill_params_t>(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::runtime_error *exception;
  std::string *v30[3];
  std::string *v31[3];
  void *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  void *lpsrc;
  std::__shared_weak_count *v36;

  v14 = a2[12];
  v15 = (uint64_t)(a2 + 14);
  LODWORD(v34.__r_.__value_.__l.__data_) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, v15, a3, a5, (int *)&v34);
  v16 = lpsrc;
  if (!lpsrc
  {
    *a1 = 0;
    a1[1] = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v34);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v18 = v36;
  *a1 = v17;
  a1[1] = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v32 = v16;
    v33 = v36;
    if (v36)
    {
      v21 = (unint64_t *)&v36->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
  }
  else
  {
    v32 = v16;
    v33 = 0;
  }
  memset(v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v31, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * ((a6[1] - *a6) >> 3));
  memset(v30, 0, sizeof(v30));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v30, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  Espresso::sequential_builder::add_kernel((uint64_t)a2, (uint64_t *)&v32, a3, a4, v31, v30);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v23 = v33;
  if (v33)
  {
    v24 = (unint64_t *)&v33->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, (uint64_t)lpsrc, (__int128 **)a6, a7);
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_19140BC50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_lstm_atomizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBAC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_lstm_atomizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBBAC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_lstm_atomizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::report_benchmark_result(uint64_t a1, const char *a2, uint64_t *a3, const char *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 v13;
  char *v14;
  size_t size;
  __int128 *p_s;
  std::string *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  size_t *v22;
  uint64_t v23;
  __int128 *v24;
  void *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  std::string *v30;
  void **v31;
  void **v32;
  void **v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  void *v42;
  double v43;
  void *v44;
  double v45;
  void *v46;
  double v47;
  void *v48;
  double v49;
  void *v50;
  double v51;
  void *v52;
  double v53;
  void *v54;
  const char *v55;
  const char *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  __int128 *v62;
  void *v63;
  void *v64;
  void *v65;
  dispatch_semaphore_t v66;
  void *v67;
  NSObject *v68;
  void *v69;
  void *v70;
  dispatch_time_t v71;
  void *v72;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  _QWORD v91[4];
  NSObject *v92;
  std::string __p;
  size_t v94[2];
  char v95;
  size_t v96[2];
  char v97;
  void *v98[2];
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  void *v102[2];
  uint64_t v103;
  std::string v104;
  std::string v105;
  void *v106;
  _QWORD v107[25];
  _QWORD v108[25];
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 __s;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  if ((v13 & 1) == 0
  {
    Espresso::report_benchmark_result(Espresso::benchmark_result,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&)::skip_report_benchmark_result = (uint64_t)getenv("ESPRESSO_SKIP_REPORT_BENCHMARK_RESULT");
  }
  if (!Espresso::report_benchmark_result(Espresso::benchmark_result,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&,std::string const&)::skip_report_benchmark_result)
  {
    if (*(char *)(a7 + 23) < 0)
      std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
    else
      v105 = *(std::string *)a7;
    if (*(char *)(a6 + 23) < 0)
      std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    else
      v104 = *(std::string *)a6;
    v102[0] = 0;
    v102[1] = 0;
    v103 = 0;
    v100[0] = 0;
    v100[1] = 0;
    v101 = 0;
    v98[0] = 0;
    v98[1] = 0;
    v99 = 0;
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v105.__r_.__value_.__l.__size_)
        goto LABEL_15;
    }
    else if (*((_BYTE *)&v105.__r_.__value_.__s + 23))
    {
      goto LABEL_15;
    }
    MEMORY[0x19401C808](&v105, "http://polluce.apple.com:18888/");
    v14 = getenv("ESPRESSO_PERF_SERVER");
    if (v14)
      MEMORY[0x19401C808](&v105, v14);
LABEL_15:
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    {
      if (!v104.__r_.__value_.__l.__size_)
      {
LABEL_19:
        v139 = 0u;
        v140 = 0u;
        v137 = 0u;
        v138 = 0u;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v131 = 0u;
        v132 = 0u;
        v129 = 0u;
        v130 = 0u;
        v127 = 0u;
        v128 = 0u;
        __s = 0u;
        v126 = 0u;
        *(_QWORD *)&v109 = 256;
        sysctlbyname("hw.model", &__s, (size_t *)&v109, 0, 0);
        MEMORY[0x19401C808](&v104, &__s);
      }
    }
    else if (!*((_BYTE *)&v104.__r_.__value_.__s + 23))
    {
      goto LABEL_19;
    }
    v139 = 0u;
    v140 = 0u;
    v137 = 0u;
    v138 = 0u;
    v135 = 0u;
    v136 = 0u;
    v133 = 0u;
    v134 = 0u;
    v131 = 0u;
    v132 = 0u;
    v129 = 0u;
    v130 = 0u;
    v127 = 0u;
    v128 = 0u;
    __s = 0u;
    v126 = 0u;
    v96[0] = 256;
    sysctlbyname("kern.osversion", &__s, v96, 0, 0);
    MEMORY[0x19401C808](v102, &__s);
    v123 = 0u;
    v124 = 0u;
    v121 = 0u;
    v122 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v94[0] = 256;
    sysctlbyname("machdep.cpu.brand_string", &v109, v94, 0, 0);
    MEMORY[0x19401C808](v100, &v109);
    MEMORY[0x19401C808](v98, Espresso::context_metal::last_device_name);
    if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v105.__r_.__value_.__r.__words[2]);
    else
      size = v105.__r_.__value_.__l.__size_;
    p_s = &__s;
    std::string::basic_string[abi:ne180100]((uint64_t)&__s, size + 16);
    if (SBYTE7(v126) < 0)
      p_s = (__int128 *)__s;
    if (size)
    {
      if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v105;
      else
        v17 = (std::string *)v105.__r_.__value_.__r.__words[0];
      memmove(p_s, v17, size);
    }
    strcpy((char *)p_s + size, "result/add/json/");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "3400.58.3.11.1");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "componentsSeparatedByString:", CFSTR("-"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();

    v109 = 0uLL;
    *(_QWORD *)&v110 = 0;
    v88 = v19;
    std::string::basic_string[abi:ne180100]<0>(v96, "3400.58.3.11.1");
    if (objc_msgSend(v19, "count") == 2)
    {
      objc_msgSend(v19, "objectAtIndexedSubscript:", 0);
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      MEMORY[0x19401C808](&v109, objc_msgSend(v20, "UTF8String"));

      objc_msgSend(v19, "objectAtIndexedSubscript:", 1);
      v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      MEMORY[0x19401C808](v96, objc_msgSend(v21, "UTF8String"));

    }
    std::string::basic_string[abi:ne180100]<0>(v94, "Espresso");
    v107[0] = CFSTR("commitid");
    if (v97 >= 0)
      v22 = v96;
    else
      v22 = (size_t *)v96[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v22);
    v23 = objc_claimAutoreleasedReturnValue();
    v108[0] = v23;
    v107[1] = CFSTR("branch");
    if ((SBYTE7(v110) & 0x80u) == 0)
      v24 = &v109;
    else
      v24 = (__int128 *)v109;
    v84 = (void *)v23;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v24);
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v108[1] = v25;
    v108[2] = CFSTR("Espresso");
    v107[2] = CFSTR("project");
    v107[3] = CFSTR("executable");
    if (*((char *)a3 + 23) >= 0)
      v26 = a3;
    else
      v26 = (uint64_t *)*a3;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v26);
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v108[3] = v83;
    v107[4] = CFSTR("engine");
    if (a4[23] >= 0)
      v27 = (uint64_t *)a4;
    else
      v27 = *(uint64_t **)a4;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v27);
    v82 = (void *)objc_claimAutoreleasedReturnValue();
    v108[4] = v82;
    v107[5] = CFSTR("compute_path");
    if (*((char *)a5 + 23) >= 0)
      v28 = a5;
    else
      v28 = (uint64_t *)*a5;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v28);
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    v108[5] = v81;
    v107[6] = CFSTR("benchmark");
    if (a2[23] >= 0)
      v29 = (uint64_t *)a2;
    else
      v29 = *(uint64_t **)a2;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
    v87 = (void *)objc_claimAutoreleasedReturnValue();
    v108[6] = v87;
    v107[7] = CFSTR("environment");
    if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v30 = &v104;
    else
      v30 = (std::string *)v104.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v30);
    v80 = (void *)objc_claimAutoreleasedReturnValue();
    v108[7] = v80;
    v107[8] = CFSTR("os");
    if (v103 >= 0)
      v31 = v102;
    else
      v31 = (void **)v102[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v31);
    v79 = (void *)objc_claimAutoreleasedReturnValue();
    v108[8] = v79;
    v107[9] = CFSTR("cpu");
    if (v101 >= 0)
      v32 = v100;
    else
      v32 = (void **)v100[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v32);
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    v108[9] = v78;
    v107[10] = CFSTR("gpu");
    if (v99 >= 0)
      v33 = v98;
    else
      v33 = (void **)v98[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v33);
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    v108[10] = v86;
    v107[11] = CFSTR("result_time");
    LODWORD(v34) = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v34 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v34);
    v77 = (void *)objc_claimAutoreleasedReturnValue();
    v108[11] = v77;
    v107[12] = CFSTR("result_nerr");
    LODWORD(v35) = *(_DWORD *)(a1 + 4);
    if ((LODWORD(v35) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v35 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v35);
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    v108[12] = v76;
    v107[13] = CFSTR("result_psnr");
    LODWORD(v36) = *(_DWORD *)(a1 + 12);
    if ((LODWORD(v36) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v36 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v36);
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    v108[13] = v75;
    v107[14] = CFSTR("result_aerr");
    LODWORD(v37) = *(_DWORD *)(a1 + 8);
    if ((LODWORD(v37) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v37 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v37);
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    v108[14] = v85;
    v107[15] = CFSTR("result_dcos10");
    LODWORD(v38) = *(_DWORD *)(a1 + 16);
    if ((LODWORD(v38) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v38 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v38);
    v74 = (void *)objc_claimAutoreleasedReturnValue();
    v108[15] = v74;
    v107[16] = CFSTR("result_mem");
    LODWORD(v39) = *(_DWORD *)(a1 + 20);
    if ((LODWORD(v39) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v39 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v39);
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v108[16] = v73;
    v107[17] = CFSTR("result_ioaccel_mem");
    LODWORD(v40) = *(_DWORD *)(a1 + 24);
    if ((LODWORD(v40) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v40 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v40);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v108[17] = v72;
    v107[18] = CFSTR("result_power");
    LODWORD(v41) = *(_DWORD *)(a1 + 28);
    if ((LODWORD(v41) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v41 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v41);
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    v108[18] = v42;
    v107[19] = CFSTR("result_top1");
    LODWORD(v43) = *(_DWORD *)(a1 + 32);
    if ((LODWORD(v43) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v43 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v43);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    v108[19] = v44;
    v107[20] = CFSTR("result_top5");
    LODWORD(v45) = *(_DWORD *)(a1 + 36);
    if ((LODWORD(v45) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v45 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v45);
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    v108[20] = v46;
    v107[21] = CFSTR("aux0");
    LODWORD(v47) = *(_DWORD *)(a1 + 40);
    if ((LODWORD(v47) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v47 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v47);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v108[21] = v48;
    v107[22] = CFSTR("aux1");
    LODWORD(v49) = *(_DWORD *)(a1 + 44);
    if ((LODWORD(v49) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v49 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    v108[22] = v50;
    v107[23] = CFSTR("aux2");
    LODWORD(v51) = *(_DWORD *)(a1 + 48);
    if ((LODWORD(v51) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v51 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v51);
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    v108[23] = v52;
    v107[24] = CFSTR("aux3");
    LODWORD(v53) = *(_DWORD *)(a1 + 52);
    if ((LODWORD(v53) & 0x7FFFFFFFu) >= 0x7F800000)
      *(float *)&v53 = -10000000.0;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v53);
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v108[24] = v54;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v108, v107, 25);
    v89 = (void *)objc_claimAutoreleasedReturnValue();

    if (a2[23] >= 0)
      v55 = a2;
    else
      v55 = *(const char **)a2;
    if (a4[23] >= 0)
      v56 = a4;
    else
      v56 = *(const char **)a4;
    printf("[report_benchmark_result] t=%.2fms psnr=%.2f %s@%s\n", *(float *)a1, *(float *)(a1 + 12), v55, v56);
    v57 = (void *)MEMORY[0x1E0CB36D8];
    v106 = v89;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v106, 1);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v57, "dataWithJSONObject:options:error:", v58, 1, 0);
    v59 = (void *)objc_claimAutoreleasedReturnValue();

    v60 = (void *)MEMORY[0x1E0CB37A8];
    v61 = (void *)MEMORY[0x1E0C99E98];
    if ((SBYTE7(v126) & 0x80u) == 0)
      v62 = &__s;
    else
      v62 = (__int128 *)__s;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v62);
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v61, "URLWithString:", v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v60, "requestWithURL:", v64);
    v65 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v65, "setHTTPMethod:", CFSTR("POST"));
    objc_msgSend(v65, "setValue:forHTTPHeaderField:", CFSTR("application/json; charset=utf-8"), CFSTR("Content-Type"));
    objc_msgSend(v65, "setHTTPBody:", v59);
    v66 = dispatch_semaphore_create(0);
    objc_msgSend(MEMORY[0x1E0CB39F0], "sharedSession");
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    if (v67)
    {
      v91[0] = MEMORY[0x1E0C809B0];
      v91[1] = 3321888768;
      v91[2] = ___ZN8Espresso23report_benchmark_resultENS_16benchmark_resultERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_S9_S9_S9_S9__block_invoke;
      v91[3] = &unk_1E2DC4180;
      if (SBYTE7(v126) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
      }
      else
      {
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = __s;
        __p.__r_.__value_.__r.__words[2] = v126;
      }
      v68 = v66;
      v92 = v68;
      objc_msgSend(v67, "dataTaskWithRequest:completionHandler:", v65, v91);
      v69 = (void *)objc_claimAutoreleasedReturnValue();
      v70 = v69;
      if (v69)
      {
        objc_msgSend(v69, "resume");
        v71 = dispatch_time(0, 2000000000);
        dispatch_semaphore_wait(v68, v71);
      }

      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }

    if (v95 < 0)
      operator delete((void *)v94[0]);
    if (v97 < 0)
      operator delete((void *)v96[0]);
    if (SBYTE7(v110) < 0)
      operator delete((void *)v109);

    if (SBYTE7(v126) < 0)
      operator delete((void *)__s);
    if (SHIBYTE(v99) < 0)
      operator delete(v98[0]);
    if (SHIBYTE(v101) < 0)
      operator delete(v100[0]);
    if (SHIBYTE(v103) < 0)
      operator delete(v102[0]);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
  }
}

void sub_19140C9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  void *a66;
  char a71;
  void *a72;
  char a73;
  void *a74;
  char a75;
  void *v75;
  void *v76;
  void *v77;
  void *v78;

  if (a47 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);

  if (SLOBYTE(STACK[0x467]) < 0)
    operator delete((void *)STACK[0x450]);
  if (a59 < 0)
    operator delete(a54);
  if (a65 < 0)
    operator delete(a60);
  if (a71 < 0)
    operator delete(a66);
  if (a73 < 0)
    operator delete(a72);
  if (a75 < 0)
    operator delete(a74);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso23report_benchmark_resultENS_16benchmark_resultERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_S9_S9_S9_S9__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5;
  const char *v6;
  id v7;
  id v8;
  id v9;

  v5 = a4;
  v6 = (const char *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    v6 = *(const char **)v6;
  v9 = v5;
  objc_msgSend(v5, "localizedDescription");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  if (objc_msgSend(v7, "UTF8String"))
  {
    objc_msgSend(v9, "localizedDescription");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    printf("[report_benchmark_result] %s error=%s\n", v6, (const char *)objc_msgSend(v8, "UTF8String"));

  }
  else
  {
    printf("[report_benchmark_result] %s error=%s\n", v6, "");
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_19140CD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void Espresso::report_benchmark_result(uint64_t a1, const char *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  __int128 v13;
  char *v14;
  _OWORD v15[3];
  uint64_t v16;
  void *__p[2];
  char v18;
  _OWORD v19[3];
  uint64_t v20;

  v12 = *a4;
  v13 = *(_OWORD *)(a1 + 16);
  if (*a4)
  {
    v19[0] = *(_OWORD *)a1;
    v19[1] = v13;
    v19[2] = *(_OWORD *)(a1 + 32);
    v20 = *(_QWORD *)(a1 + 48);
    v14 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8));
    std::string::basic_string[abi:ne180100]<0>(__p, v14);
    Espresso::report_benchmark_result((uint64_t)v19, a2, a3, (const char *)__p, a5, a6, a7);
  }
  else
  {
    v15[0] = *(_OWORD *)a1;
    v15[1] = v13;
    v15[2] = *(_OWORD *)(a1 + 32);
    v16 = *(_QWORD *)(a1 + 48);
    std::string::basic_string[abi:ne180100]<0>(__p, "NONE");
    Espresso::report_benchmark_result((uint64_t)v15, a2, a3, (const char *)__p, a5, a6, a7);
  }
  if (v18 < 0)
    operator delete(__p[0]);
}

void sub_19140CE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::compute_all_blobs(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (***v5)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[8];
  std::__shared_weak_count *v13;
  _QWORD v14[6];
  char **v15;
  char *v16[2];
  void **v17[6];
  char **v18;
  char *v19[2];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(_QWORD *, uint64_t);
  void (*v24)(uint64_t);
  const char *v25;
  _QWORD **v26;
  _QWORD *v27[2];
  _QWORD v28[3];

  v20 = 0;
  v21 = &v20;
  v22 = 0x6012000000;
  v23 = __Block_byref_object_copy__2985;
  v24 = __Block_byref_object_dispose__2986;
  v27[0] = 0;
  v27[1] = 0;
  v25 = "";
  v26 = v27;
  memset(v28, 0, sizeof(v28));
  v17[0] = 0;
  v17[1] = (void **)v17;
  v17[2] = (void **)0x4812000000;
  v17[3] = (void **)__Block_byref_object_copy__92;
  v17[4] = (void **)__Block_byref_object_dispose__93;
  v19[0] = 0;
  v19[1] = 0;
  v17[5] = (void **)"";
  v18 = v19;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x4812000000;
  v14[3] = __Block_byref_object_copy__92;
  v14[4] = __Block_byref_object_dispose__93;
  v16[0] = 0;
  v16[1] = 0;
  v14[5] = "";
  v15 = v16;
  v4 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v5 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a1 + 16);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3321888768;
  v12[2] = ___ZN8Espresso17compute_all_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v12[3] = &unk_1E2DC42B0;
  v12[7] = v4;
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12[4] = v17;
  v12[5] = &v20;
  v12[6] = v14;
  Espresso::abstract_context::compute_batch_sync(v5, v12);
  v8 = v21;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)a2, v21 + 6);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 3, v8[9], v8[10], 0xAAAAAAAAAAAAAAABLL * ((v8[10] - v8[9]) >> 3));
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  _Block_object_dispose(v14, 8);
  std::__tree<std::string>::destroy((uint64_t)&v15, v16[0]);
  _Block_object_dispose(v17, 8);
  std::__tree<std::string>::destroy((uint64_t)&v18, v19[0]);
  _Block_object_dispose(&v20, 8);
  v17[0] = (void **)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v17);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v27[0]);
}

void sub_19140D0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char *a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char *a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(v37 + 8));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Block_object_dispose(&a19, 8);
  std::__tree<std::string>::destroy(v36, a26);
  _Block_object_dispose(&a28, 8);
  std::__tree<std::string>::destroy(v35, a35);
  _Block_object_dispose((const void *)(v39 - 144), 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v38 + 48);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__2985(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  a1[6] = *(_QWORD *)(a2 + 48);
  v2 = (_QWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 56);
  a1[7] = v3;
  v4 = a1 + 7;
  v5 = *(_QWORD *)(a2 + 64);
  a1[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 48) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v4;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 9) = result;
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__2986(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 56));
}

_QWORD *__Block_byref_object_copy__92(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__93(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
}

uint64_t ___ZN8Espresso17compute_all_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  std::string::size_type v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  std::string *v15;
  uint64_t v16;
  char *v17;
  uint64_t **v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 *v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  __int128 v36;
  std::string *v37;
  uint64_t v38;
  char *v39;
  uint64_t **v40;
  uint64_t *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t *v48;
  uint64_t **v49;
  __int128 v50;
  std::string v51;
  std::string *v52;

  result = a1[7];
  if (*(_QWORD *)(result + 40) != *(_QWORD *)(result + 32))
  {
    v5 = 0;
    do
    {
      v6 = v5 + 1;
      Espresso::net::__forward(result, a2, v5, v5 + 1);
      v7 = a1[7] + 56;
      v51.__r_.__value_.__r.__words[0] = v5;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v5, &v51);
      v9 = (__int128 *)v8[3];
      v10 = (__int128 *)v8[4];
      while (v9 != v10)
      {
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
        }
        else
        {
          v11 = *v9;
          v51.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
          *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v11;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)(a1[4] + 8) + 56), &v51))
        {
          v12 = *(_QWORD *)(a1[5] + 8);
          v13 = *(_QWORD *)(v12 + 80);
          if (v13 >= *(_QWORD *)(v12 + 88))
          {
            v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v12 + 72), (uint64_t)&v51);
          }
          else
          {
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(*(std::string **)(v12 + 80), v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
            }
            else
            {
              v14 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
              *(_QWORD *)(v13 + 16) = *((_QWORD *)&v51.__r_.__value_.__l + 2);
              *(_OWORD *)v13 = v14;
            }
            v15 = (std::string *)(v13 + 24);
            *(_QWORD *)(v12 + 80) = v13 + 24;
          }
          *(_QWORD *)(v12 + 80) = v15;
          v16 = a1[7] + 136;
          v52 = &v51;
          v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (unsigned __int8 *)&v51, (__int128 **)&v52);
          (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v17 + 5) + 56))(&v50);
          v18 = (uint64_t **)(*(_QWORD *)(a1[5] + 8) + 48);
          v52 = &v51;
          v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, &v51, (__int128 **)&v52);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v19 + 7), &v50);
          v20 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
          if (*((_QWORD *)&v50 + 1))
          {
            v21 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
            do
              v22 = __ldaxr(v21);
            while (__stlxr(v22 - 1, v21));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
          v23 = a1[7] + 136;
          *(_QWORD *)&v50 = &v51;
          v24 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v23, (unsigned __int8 *)&v51, (__int128 **)&v50)+ 5);
          v25 = (uint64_t **)(*(_QWORD *)(a1[5] + 8) + 48);
          *(_QWORD *)&v50 = &v51;
          v26 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, &v51, (__int128 **)&v50);
          (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v24 + 40))(v24, a2, v26 + 7);
          v27 = (uint64_t **)(*(_QWORD *)(a1[4] + 8) + 48);
          *(_QWORD *)&v50 = &v51;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v27, &v51, (__int128 **)&v50)[56] = 1;
          v28 = (uint64_t **)(*(_QWORD *)(a1[6] + 8) + 48);
          *(_QWORD *)&v50 = &v51;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v28, &v51, (__int128 **)&v50)[56] = 1;
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        v9 = (__int128 *)((char *)v9 + 24);
      }
      v29 = a1[7] + 96;
      v51.__r_.__value_.__r.__words[0] = v5;
      v30 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v29, v5, &v51);
      v31 = (__int128 *)v30[3];
      v32 = (__int128 *)v30[4];
      while (v31 != v32)
      {
        if (*((char *)v31 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v31, *((_QWORD *)v31 + 1));
        }
        else
        {
          v33 = *v31;
          v51.__r_.__value_.__r.__words[2] = *((_QWORD *)v31 + 2);
          *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v33;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)(a1[4] + 8) + 56), &v51))
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)(a1[6] + 8) + 56), &v51))
          {
            v34 = *(_QWORD *)(a1[5] + 8);
            v35 = *(_QWORD *)(v34 + 80);
            if (v35 >= *(_QWORD *)(v34 + 88))
            {
              v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v34 + 72), (uint64_t)&v51);
            }
            else
            {
              if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(v34 + 80), v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
              }
              else
              {
                v36 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
                *(_QWORD *)(v35 + 16) = *((_QWORD *)&v51.__r_.__value_.__l + 2);
                *(_OWORD *)v35 = v36;
              }
              v37 = (std::string *)(v35 + 24);
              *(_QWORD *)(v34 + 80) = v35 + 24;
            }
            *(_QWORD *)(v34 + 80) = v37;
          }
          v38 = a1[7] + 136;
          v52 = &v51;
          v39 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v38, (unsigned __int8 *)&v51, (__int128 **)&v52);
          (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v39 + 5) + 56))(&v50);
          v40 = (uint64_t **)(*(_QWORD *)(a1[5] + 8) + 48);
          v52 = &v51;
          v41 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v40, &v51, (__int128 **)&v52);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v41 + 7), &v50);
          v42 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
          if (*((_QWORD *)&v50 + 1))
          {
            v43 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v45 = a1[7] + 136;
          *(_QWORD *)&v50 = &v51;
          v46 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v45, (unsigned __int8 *)&v51, (__int128 **)&v50)+ 5);
          v47 = (uint64_t **)(*(_QWORD *)(a1[5] + 8) + 48);
          *(_QWORD *)&v50 = &v51;
          v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v47, &v51, (__int128 **)&v50);
          (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v46 + 40))(v46, a2, v48 + 7);
          v49 = (uint64_t **)(*(_QWORD *)(a1[6] + 8) + 48);
          *(_QWORD *)&v50 = &v51;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v49, &v51, (__int128 **)&v50)[56] = 1;
        }
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        v31 = (__int128 *)((char *)v31 + 24);
      }
      result = a1[7];
      v5 = v6;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(result + 40) - *(_QWORD *)(result + 32)) >> 4);
  }
  return result;
}

void sub_19140D670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v17 + 80) = v16;
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t *v15[3];
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (__int128 *)(a2 + 1);
  v5 = (__int128 *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, (_QWORD *)v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>> const&>((uint64_t)v15, a1, v5 + 2);
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15[0]);
          v15[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, (_QWORD *)v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (__int128 *)*((_QWORD *)v5 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(__int128 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (__int128 *)*((_QWORD *)v5 + 2);
          v10 = *(_QWORD *)v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19140D818(_Unwind_Exception *a1)
{
  _QWORD **v1;

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

std::string *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>> const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  char *v6;
  std::string *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  result = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a3);
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_19140D8BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(result + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 64) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_56c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 56);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x48uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 4);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      v6[6] = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_19140D9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Espresso::compute_blobs(_QWORD *a1@<X0>, __int128 **a2@<X1>, _QWORD *a3@<X8>)
{
  __int128 *v5;
  __int128 *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (***v9)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[7];
  std::__shared_weak_count *v17;
  char *v18[3];
  void **v19[6];
  char **v20;
  char *v21[2];
  char **v22;
  char *v23[2];
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(_QWORD *, uint64_t);
  void (*v28)(uint64_t);
  const char *v29;
  _QWORD **v30;
  _QWORD *v31[2];
  _QWORD v32[3];
  __int128 *v33;

  v24 = 0;
  v25 = &v24;
  v26 = 0x6012000000;
  v27 = __Block_byref_object_copy__2985;
  v28 = __Block_byref_object_dispose__2986;
  v31[0] = 0;
  v31[1] = 0;
  v29 = "";
  v30 = v31;
  memset(v32, 0, sizeof(v32));
  v23[0] = 0;
  v23[1] = 0;
  v21[1] = 0;
  v22 = v23;
  v19[0] = 0;
  v19[1] = (void **)v19;
  v19[2] = (void **)0x4812000000;
  v19[3] = (void **)__Block_byref_object_copy__92;
  v19[4] = (void **)__Block_byref_object_dispose__93;
  v20 = v21;
  v21[0] = 0;
  v19[5] = (void **)"";
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    do
    {
      v33 = v5;
      std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v22, v5, &v33)[56] = 1;
      v5 = (__int128 *)((char *)v5 + 24);
    }
    while (v5 != v6);
  }
  v8 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v9 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a1 + 16);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3321888768;
  v16[2] = ___ZN8Espresso13compute_blobsENSt3__110shared_ptrINS_3netEEERKNS0_6vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS8_ISA_EEEE_block_invoke;
  v16[3] = &unk_1E2DC4480;
  v16[6] = v8;
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  std::map<std::string,BOOL>::map[abi:ne180100]((uint64_t)v18, &v22);
  v16[4] = v19;
  v16[5] = &v24;
  Espresso::abstract_context::compute_batch_sync(v9, v16);
  v12 = v25;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)a3, v25 + 6);
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a3 + 3, v12[9], v12[10], 0xAAAAAAAAAAAAAAABLL * ((v12[10] - v12[9]) >> 3));
  std::__tree<std::string>::destroy((uint64_t)v18, v18[1]);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  _Block_object_dispose(v19, 8);
  std::__tree<std::string>::destroy((uint64_t)&v20, v21[0]);
  std::__tree<std::string>::destroy((uint64_t)&v22, v23[0]);
  _Block_object_dispose(&v24, 8);
  v19[0] = (void **)v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v19);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v31[0]);
}

void sub_19140DC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,char a29,char *a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(v31 + 8));
  std::__tree<std::string>::destroy(v33, a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32);
  _Block_object_dispose(&a20, 8);
  std::__tree<std::string>::destroy(v30, a27);
  std::__tree<std::string>::destroy((uint64_t)&a29, a30);
  _Block_object_dispose((const void *)(v35 - 168), 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v34 + 48);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso13compute_blobsENSt3__110shared_ptrINS_3netEEERKNS0_6vectorINS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS8_ISA_EEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  std::string::size_type v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t **v20;
  uint64_t *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  std::string *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t *v32;
  uint64_t **v33;
  __int128 v34;
  std::string v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;

  result = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(result + 40) != *(_QWORD *)(result + 32))
  {
    v5 = 0;
    do
    {
      v6 = v5 + 1;
      Espresso::net::__forward(result, a2, v5, v5 + 1);
      v7 = *(_QWORD *)(a1 + 48) + 56;
      v35.__r_.__value_.__r.__words[0] = v5;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7, v5, &v35);
      v37 = 0;
      v38 = 0;
      v36 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v36, v8[3], v8[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[4] - v8[3]) >> 3));
      v9 = v37;
      v10 = *(_QWORD *)(a1 + 48) + 96;
      v35.__r_.__value_.__r.__words[0] = v5;
      v11 = (std::string *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v10, v5, &v35)[3];
      v12 = *(_QWORD *)(a1 + 48) + 96;
      *(_QWORD *)&v34 = v5;
      v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v5, &v34);
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((void **)&v36, v9, v11, (std::string *)v13[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - (_QWORD)v11) >> 3));
      v14 = v36;
      v15 = (char *)v37;
      while (v14 != v15)
      {
        if (v14[23] < 0)
        {
          std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)v14, *((_QWORD *)v14 + 1));
        }
        else
        {
          v16 = *(_OWORD *)v14;
          v35.__r_.__value_.__r.__words[2] = *((_QWORD *)v14 + 2);
          *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
        }
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(a1 + 72), &v35))
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 56), &v35))
          {
            if (std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>((_QWORD *)(*(_QWORD *)(a1 + 48) + 136), (unsigned __int8 *)&v35))
            {
              v17 = *(_QWORD *)(a1 + 48) + 136;
              *(_QWORD *)&v34 = &v35;
              if (*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v17, (unsigned __int8 *)&v35, (__int128 **)&v34)+ 5))
              {
                v18 = *(_QWORD *)(a1 + 48) + 136;
                v39 = &v35;
                v19 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, (unsigned __int8 *)&v35, (__int128 **)&v39);
                (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v19 + 5) + 56))(&v34);
                v20 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
                v39 = &v35;
                v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, &v35, (__int128 **)&v39);
                std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v21 + 7), &v34);
                v22 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
                if (*((_QWORD *)&v34 + 1))
                {
                  v23 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
                  do
                    v24 = __ldaxr(v23);
                  while (__stlxr(v24 - 1, v23));
                  if (!v24)
                  {
                    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                    std::__shared_weak_count::__release_weak(v22);
                  }
                }
                v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
                v26 = *(_QWORD *)(v25 + 80);
                if (v26 >= *(_QWORD *)(v25 + 88))
                {
                  v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)(v25 + 72), (uint64_t)&v35);
                }
                else
                {
                  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external(*(std::string **)(v25 + 80), v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    v27 = *(_OWORD *)&v35.__r_.__value_.__l.__data_;
                    *(_QWORD *)(v26 + 16) = *((_QWORD *)&v35.__r_.__value_.__l + 2);
                    *(_OWORD *)v26 = v27;
                  }
                  v28 = (std::string *)(v26 + 24);
                  *(_QWORD *)(v25 + 80) = v26 + 24;
                }
                *(_QWORD *)(v25 + 80) = v28;
                v29 = *(_QWORD *)(a1 + 48) + 136;
                *(_QWORD *)&v34 = &v35;
                v30 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v29, (unsigned __int8 *)&v35, (__int128 **)&v34)+ 5);
                v31 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48);
                *(_QWORD *)&v34 = &v35;
                v32 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v31, &v35, (__int128 **)&v34);
                (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v30 + 40))(v30, a2, v32 + 7);
                v33 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
                *(_QWORD *)&v34 = &v35;
                std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v33, &v35, (__int128 **)&v34)[56] = 1;
              }
            }
          }
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        v14 += 24;
      }
      v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v36;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
      result = *(_QWORD *)(a1 + 48);
      v5 = v6;
    }
    while (v6 < (uint64_t)(*(_QWORD *)(result + 40) - *(_QWORD *)(result + 32)) >> 4);
  }
  return result;
}

void sub_19140DFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v19 + 80) = v18;
  if (a16 < 0)
    operator delete(__p);
  __p = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,BOOL>::map[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v15;
  _QWORD *v16;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = (_QWORD *)v3;
      if (*(_QWORD *)a1 == v3)
        goto LABEL_8;
      v8 = *(_QWORD **)(a1 + 8);
      v9 = (_QWORD *)v3;
      if (v6)
      {
        do
        {
          v7 = v8;
          v8 = (_QWORD *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v9[2];
          v10 = *v7 == (_QWORD)v9;
          v9 = v7;
        }
        while (v10);
      }
      if (std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v5 + 4))
      {
LABEL_8:
        if (!v6)
        {
          v16 = (_QWORD *)v3;
          v11 = (uint64_t **)v3;
LABEL_14:
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>((uint64_t)&v15, a1, (uint64_t)(v5 + 4));
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v16, v11, v15);
          goto LABEL_15;
        }
        v16 = v7;
        v11 = (uint64_t **)(v7 + 1);
      }
      else
      {
        v11 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v16, v5 + 4);
      }
      if (!*v11)
        goto LABEL_14;
LABEL_15:
      v12 = (_QWORD *)v5[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v5[2];
          v10 = *v13 == (_QWORD)v5;
          v5 = v13;
        }
        while (!v10);
      }
      v5 = v13;
    }
    while (v13 != v4);
  }
  return a1;
}

void sub_19140E17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::pair<std::string const,BOOL> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  v6[56] = *(_BYTE *)(a3 + 24);
  *(_BYTE *)(a1 + 16) = 1;
}

void sub_19140E20C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,int>,void *>>>::operator()[abi:ne180100](0, v2);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c114_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbNS_4lessIS6_EENS4_INS_4pairIKS6_bEEEEEE(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::map<std::string,BOOL>::map[abi:ne180100](a1 + 64, a2 + 8);
}

void sub_19140E270(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_ea8_48c41_ZTSNSt3__110shared_ptrIN8Espresso3netEEE64c114_ZTSNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEbNS_4lessIS6_EENS4_INS_4pairIKS6_bEEEEEE(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 48;
  std::__tree<std::string>::destroy(a1 + 64, *(char **)(a1 + 72));
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
}

void Espresso::compute_all_output_blobs(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  void (***v6)(uint64_t *__return_ptr, _QWORD);
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 *v12;
  __int128 *v13;
  __int128 v14;
  char **v15;
  char *v16;
  __int128 v17;
  std::string *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  char **v24;
  char *v25;
  __int128 v26;
  std::string *v27;
  char **v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::string __p;
  uint64_t *v33;
  _QWORD *v34[2];
  _QWORD v35[6];
  std::__shared_weak_count *v36;
  uint64_t v37;
  char **v38;
  uint64_t v39;
  __n128 (*v40)(_QWORD *, uint64_t);
  void (*v41)(uint64_t);
  const char *v42;
  _QWORD **v43;
  _QWORD *v44[2];
  _QWORD v45[3];
  __int128 *v46[2];

  v39 = 0x6012000000;
  v40 = __Block_byref_object_copy__2985;
  v41 = __Block_byref_object_dispose__2986;
  v44[0] = 0;
  v44[1] = 0;
  v42 = "";
  v43 = v44;
  memset(v45, 0, sizeof(v45));
  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v6 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a1 + 16);
  v35[0] = MEMORY[0x1E0C809B0];
  v35[2] = ___ZN8Espresso24compute_all_output_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke;
  v35[3] = &unk_1E2DC3FB8;
  v37 = 0;
  v38 = (char **)&v37;
  v35[1] = 3321888768;
  v35[5] = v5;
  v36 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v35[4] = &v37;
  Espresso::abstract_context::compute_batch_sync(v6, v35);
  v34[0] = 0;
  v34[1] = 0;
  v33 = (uint64_t *)v34;
  v9 = *a1;
  if (*(_QWORD *)(*a1 + 40) != *(_QWORD *)(*a1 + 32))
  {
    v10 = 0;
    do
    {
      __p.__r_.__value_.__r.__words[0] = v10;
      v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 56, v10, &__p);
      v12 = (__int128 *)v11[3];
      v13 = (__int128 *)v11[4];
      while (v12 != v13)
      {
        if (*((char *)v12 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        }
        else
        {
          v14 = *v12;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v34[0], &__p))
        {
          v15 = v38;
          v16 = v38[10];
          if (v16 >= v38[11])
          {
            v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v38 + 9, (uint64_t)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v38[10], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((_QWORD *)v16 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v16 = v17;
            }
            v18 = (std::string *)(v16 + 24);
            v15[10] = v16 + 24;
          }
          v15[10] = (char *)v18;
          v46[0] = (__int128 *)&__p;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v33, &__p, v46)[56] = 1;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v12 = (__int128 *)((char *)v12 + 24);
      }
      v19 = *a1 + 96;
      __p.__r_.__value_.__r.__words[0] = v10;
      v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v19, v10, &__p);
      v21 = (__int128 *)v20[3];
      v22 = (__int128 *)v20[4];
      while (v21 != v22)
      {
        if (*((char *)v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v21, *((_QWORD *)v21 + 1));
        }
        else
        {
          v23 = *v21;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v21 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v23;
        }
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v34[0], &__p))
        {
          v24 = v38;
          v25 = v38[10];
          if (v25 >= v38[11])
          {
            v27 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v38 + 9, (uint64_t)&__p);
          }
          else
          {
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v38[10], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
            }
            else
            {
              v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
              *((_QWORD *)v25 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
              *(_OWORD *)v25 = v26;
            }
            v27 = (std::string *)(v25 + 24);
            v24[10] = v25 + 24;
          }
          v24[10] = (char *)v27;
          v46[0] = (__int128 *)&__p;
          std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v33, &__p, v46)[56] = 1;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v21 = (__int128 *)((char *)v21 + 24);
      }
      ++v10;
      v9 = *a1;
    }
    while (v10 < (uint64_t)(*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) >> 4);
  }
  v28 = v38;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)a2, v38 + 6);
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2 + 3, (uint64_t)v28[9], (uint64_t)v28[10], 0xAAAAAAAAAAAAAAABLL * ((v28[10] - v28[9]) >> 3));
  std::__tree<std::string>::destroy((uint64_t)&v33, (char *)v34[0]);
  v29 = v36;
  if (v36)
  {
    v30 = (unint64_t *)&v36->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  _Block_object_dispose(&v37, 8);
  v33 = v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v44[0]);
}

void sub_19140E63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, char *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(v26 + 8));
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Block_object_dispose(&a26, 8);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys(v27 + 48);
  _Unwind_Resume(a1);
}

void ___ZN8Espresso24compute_all_output_blobsENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t **v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  __int128 v21;
  std::string v22;
  char v23;
  std::string *v24;

  Espresso::net::__forward(*(_QWORD *)(a1 + 40), a2, 0, 0xFFFFFFFFLL);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD **)(v4 + 256);
  v6 = (_QWORD *)(v4 + 264);
  if (v5 != (_QWORD *)(v4 + 264))
  {
    do
    {
      if (*((char *)v5 + 55) < 0)
        std::string::__init_copy_ctor_external(&v22, (const std::string::value_type *)v5[4], v5[5]);
      else
        v22 = *(std::string *)(v5 + 4);
      v23 = *((_BYTE *)v5 + 56);
      v7 = *(_QWORD *)(a1 + 40) + 136;
      v24 = &v22;
      v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, (unsigned __int8 *)&v22, (__int128 **)&v24);
      (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)v8 + 5) + 56))(&v21);
      v9 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
      v24 = &v22;
      v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, &v22, (__int128 **)&v24);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v10 + 7), &v21);
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      if (*((_QWORD *)&v21 + 1))
      {
        v12 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      v14 = *(_QWORD *)(a1 + 40) + 136;
      *(_QWORD *)&v21 = &v22;
      v15 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v14, (unsigned __int8 *)&v22, (__int128 **)&v21)+ 5);
      v16 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
      *(_QWORD *)&v21 = &v22;
      v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, &v22, (__int128 **)&v21);
      (*(void (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v15 + 40))(v15, a2, v17 + 7);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
      v18 = (_QWORD *)v5[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v5[2];
          v20 = *v19 == (_QWORD)v5;
          v5 = v19;
        }
        while (!v20);
      }
      v5 = v19;
    }
    while (v19 != v6);
  }
}

void sub_19140E884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_19140EA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v16;

  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 - 1, v14));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::pass_make_fully_conv::~pass_make_fully_conv(Espresso::pass_make_fully_conv *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_make_fully_conv::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_make_fully_conv::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v5;
  _QWORD v6[5];
  _QWORD v7[5];

  Espresso::single_match_replace<Espresso::generic_pool_kernel>(a1, &__block_literal_global_2991);
  Espresso::single_match_replace<Espresso::generic_deconvolution_kernel>(a1, &__block_literal_global_1);
  v5 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_3;
  v7[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v7[4] = a1;
  Espresso::single_match_replace<Espresso::generic_elementwise_kernel>(a1, v7);
  v6[0] = v5;
  v6[1] = 3221225472;
  v6[2] = ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_4;
  v6[3] = &__block_descriptor_40_e9_v16__0_v8l;
  v6[4] = a1;
  Espresso::single_match_replace<Espresso::generic_inner_product_kernel>(a1, v6);
  *((_BYTE *)a1 + 180) = 0;
  Espresso::shape_network_recursive(a1, (Espresso::net *)((char *)a1 + 184), 0, 0);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)a2 = 1;
}

void ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_3(uint64_t a1, int *a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  void *__p;
  void *v19;

  v4 = (int *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 320))(*(_QWORD *)a2);
  if (*v4 <= 1)
  {
    v5 = v4;
    v6 = *(_QWORD *)(a1 + 32) + 56;
    v7 = a2[14];
    v15 = (unsigned __int8 *)v7;
    v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, &v15);
    if (v8[4] - v8[3] == 48)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = v9 + 136;
      v11 = a2[14];
      v14 = v11;
      v15 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9 + 56, v11, &v14)[3]+ 24);
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, v15, (__int128 **)&v15);
      Espresso::abstract_blob_container::shape((char *)&v15, *((_QWORD *)v12 + 5));
      if (v17 > 1 || v16 != 1 || v15 != (unsigned __int8 *)0x100000001)
        goto LABEL_11;
      if (*v5)
      {
        if (*v5 != 1)
          goto LABEL_11;
        v13 = 8;
      }
      else
      {
        v13 = 5;
      }
      *v5 = v13;
LABEL_11:
      if (__p)
      {
        v19 = __p;
        operator delete(__p);
      }
    }
  }
}

void Espresso::single_match_replace<Espresso::generic_elementwise_kernel>(Espresso::net *a1, void *a2)
{
  void (**v3)(id, _OWORD *);
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  int v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[5];
  char v41[8];
  std::__shared_weak_count *v42;
  _QWORD *v43;
  _QWORD *v44;
  char **v45;
  char v46;
  void **v47[2];
  std::__shared_weak_count *v48;
  _QWORD v49[3];
  _QWORD v50[3];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  Espresso::network_optimization_graph::network_optimization_graph((Espresso::network_optimization_graph *)v41, a1);
  v39 = 0u;
  memset(v40, 0, 28);
  v38 = 0u;
  v40[4] = a1;
  v4 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v4)
  {
    v5 = 0;
    do
    {
      LODWORD(v40[3]) = v5;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v39, *(_QWORD *)(v4 + 16 * v5), *(_QWORD *)(v4 + 16 * v5 + 8));
      v6 = v39;
      v7 = *(void **)(v39 + 64);
      if (v7
      {
        v8 = *(_QWORD *)(v6 + 72);
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
      }
      else
      {
        v8 = 0;
      }
      v11 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
      *(_QWORD *)&v38 = v7;
      *((_QWORD *)&v38 + 1) = v8;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        v7 = (void *)v38;
      }
      if (v7)
        v3[2](v3, &v38);
      ++v5;
      v4 = *((_QWORD *)a1 + 4);
    }
    while (v5 < (*((_QWORD *)a1 + 5) - v4) >> 4);
    v15 = v40[0];
    v14 = v40[1];
    if (v40[0] != v40[1])
    {
      v16 = 0;
      do
      {
        v17 = *(_DWORD *)v15 + v16;
        *(_DWORD *)v15 = v17;
        v18 = *(void ***)(v15 + 8);
        if (v18)
        {
          LODWORD(v47[0]) = v17;
          v19 = *(std::__shared_weak_count **)(v15 + 16);
          v47[1] = v18;
          v48 = v19;
          if (v19)
          {
            v20 = (unint64_t *)&v19->__shared_owners_;
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          memset(v49, 0, sizeof(v49));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v49, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3));
          memset(v50, 0, sizeof(v50));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v50, *(_QWORD *)(v15 + 48), *(_QWORD *)(v15 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 56) - *(_QWORD *)(v15 + 48)) >> 3));
          v35 = 0;
          v36 = 0;
          v37 = 0;
          v45 = &v35;
          v46 = 0;
          v35 = (char *)operator new(0x48uLL);
          v36 = (uint64_t)v35;
          v37 = v35 + 72;
          v36 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::net::new_layer_info>,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info const*,Espresso::net::new_layer_info*>((uint64_t)&v37, (uint64_t)v47, (uint64_t)&v51, (uint64_t)v35);
          Espresso::net::insert_layers((uint64_t)a1, (uint64_t *)&v35);
          v45 = &v35;
          std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v50;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v45 = (char **)v49;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
          v22 = v48;
          if (v48)
          {
            v23 = (unint64_t *)&v48->__shared_owners_;
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
              std::__shared_weak_count::__release_weak(v22);
            }
          }
          v25 = 1;
        }
        else
        {
          Espresso::net::remove_layer(a1, v17);
          v25 = -1;
        }
        v16 += v25;
        v15 += 72;
      }
      while (v15 != v14);
    }
  }
  v47[0] = (void **)v40;
  std::vector<Espresso::net::new_layer_info>::__destroy_vector::operator()[abi:ne180100](v47);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1))
  {
    v27 = (unint64_t *)(*((_QWORD *)&v39 + 1) + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
  if (*((_QWORD *)&v38 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v44);
  std::__tree<std::__value_type<int,std::vector<int>>,std::__map_value_compare<int,std::__value_type<int,std::vector<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<int>>>>::destroy(v43);
  v32 = v42;
  if (v42)
  {
    v33 = (unint64_t *)&v42->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }

}

void sub_19140F108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_4(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *size;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  std::string **v59;
  uint64_t v60;
  unint64_t v61;
  std::string **v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  uint64_t v88[2];
  char *v89;
  std::__shared_weak_count *v90;
  char *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  std::string __p;
  unint64_t v97;
  std::__shared_weak_count *v98;
  void *lpsrc;
  std::__shared_weak_count *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[6];
  __int128 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  uint64_t v108;
  __int16 v109;
  uint64_t v110;
  int v111;
  __int128 v112;
  int v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  __int16 v119;
  int v120;
  char v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;

  v4 = a2->i64[1];
  v128 = a2->i64[0];
  v5 = v128;
  v129 = (std::__shared_weak_count *)v4;
  v6 = v128;
  if (v4)
  {
    v7 = (unint64_t *)(v4 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v6 = a2->i64[0];
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 416))(&v126);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a2->i64[0] + 472))(&v124);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a2->i64[0] + 408))(&v122);
  v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 384))(v5);
  v10 = *v9;
  v11 = *(uint64_t *)((char *)v9 + 12);
  Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(a2);
  __asm { FMOV            V0.2S, #1.0 }
  v105 = _D0;
  v106 = 1;
  v108 = 0;
  v107 = 0;
  v109 = 0;
  v110 = 0x1000100010001;
  v111 = 0;
  v113 = 1;
  v120 = 0;
  v121 = 0;
  v116 = 0;
  v117 = 0;
  memset(v103, 0, 24);
  v103[4] = 1;
  v112 = xmmword_191A93310;
  v114 = 0;
  v115 = 0x10000;
  v118 = 0;
  v119 = 1;
  v103[3] = v11;
  v103[5] = v10;
  v104 = xmmword_191A93590;
  Espresso::abstract_engine_factory::shared(&v97);
  v17 = v97;
  v18 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  v95 = 0;
  Espresso::abstract_engine_factory::make_kernel_priv(v17, v18 + 16, (uint64_t)&__p, (uint64_t)v103, (int *)&v95 + 1);
  if (lpsrc
  {
    v101 = (uint64_t)v19;
    v102 = (uint64_t)v100;
    if (v100)
    {
      p_shared_owners = (unint64_t *)&v100->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
  }
  else
  {
    v101 = 0;
    v102 = 0;
  }
  v22 = v100;
  if (v100)
  {
    v23 = (unint64_t *)&v100->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = v98;
  if (v98)
  {
    v26 = (unint64_t *)&v98->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v101;
  v93 = v122;
  v94 = v123;
  if (v123)
  {
    v29 = (unint64_t *)&v123->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v28 + 392))(v28, &v93);
  v31 = v94;
  if (v94)
  {
    v32 = (unint64_t *)&v94->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v126;
  if (v126)
  {
    v35 = v101;
    v36 = operator new(0x60uLL);
    v36[1] = 0;
    v36[2] = 0;
    *v36 = &off_1E2DBECA8;
    v37 = *(_QWORD *)(v34 + 16);
    v36[3] = &off_1E2DA11F0;
    v38 = *(_QWORD *)(v34 + 8);
    *((_OWORD *)v36 + 4) = 0u;
    *((_OWORD *)v36 + 5) = 0u;
    v36[4] = 0x100000001;
    v36[5] = v38;
    v36[6] = v37;
    *((_BYTE *)v36 + 56) = 0;
    v91 = (char *)(v36 + 3);
    v92 = (std::__shared_weak_count *)v36;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)v35 + 400))(v35, &v91);
    v39 = v92;
    if (v92)
    {
      v40 = (unint64_t *)&v92->__shared_owners_;
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
  }
  v42 = v124;
  if (v124)
  {
    v43 = v101;
    v44 = operator new(0x60uLL);
    v44[1] = 0;
    v44[2] = 0;
    *v44 = &off_1E2DBF060;
    v45 = *(_QWORD *)(v42 + 16);
    v44[3] = &off_1E2DA1410;
    v46 = *(_QWORD *)(v42 + 8);
    *((_OWORD *)v44 + 4) = 0u;
    *((_OWORD *)v44 + 5) = 0u;
    v44[4] = 0x100000001;
    v44[5] = v46;
    v44[6] = v45;
    *((_BYTE *)v44 + 56) = 0;
    v89 = (char *)(v44 + 3);
    v90 = (std::__shared_weak_count *)v44;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(uint64_t, char **, std::string *))(*(_QWORD *)v43 + 544))(v43, &v89, &__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v48 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v50 = v90;
    if (v90)
    {
      v51 = (unint64_t *)&v90->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
  }
  v53 = (std::__shared_weak_count *)v102;
  v88[0] = v101;
  v88[1] = v102;
  if (v102)
  {
    v54 = (unint64_t *)(v102 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "convolution");
  v56 = *(_QWORD *)(a1 + 32);
  v57 = a2[3].i32[2];
  v58 = *(_QWORD *)(*(_QWORD *)(v56 + 32) + 16 * v57);
  lpsrc = (void *)v57;
  v59 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v56 + 56, v57, &lpsrc);
  v60 = *(_QWORD *)(a1 + 32) + 96;
  v61 = a2[3].i32[2];
  v97 = v61;
  v62 = (std::string **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v60, v61, &v97);
  Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(a2, v88, &__p, (const std::string *)(v58 + 16), v59 + 3, v62 + 3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v53)
  {
    v63 = (unint64_t *)&v53->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v65 = v101;
  v86 = v122;
  v87 = v123;
  if (v123)
  {
    v66 = (unint64_t *)&v123->__shared_owners_;
    do
      v67 = __ldxr(v66);
    while (__stxr(v67 + 1, v66));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v65 + 392))(v65, &v86);
  v68 = v87;
  if (v87)
  {
    v69 = (unint64_t *)&v87->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = (std::__shared_weak_count *)v102;
  if (v102)
  {
    v72 = (unint64_t *)(v102 + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v74 = v123;
  if (v123)
  {
    v75 = (unint64_t *)&v123->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = v125;
  if (v125)
  {
    v78 = (unint64_t *)&v125->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v127;
  if (v127)
  {
    v81 = (unint64_t *)&v127->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v83 = v129;
  if (v129)
  {
    v84 = (unint64_t *)&v129->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
}

void sub_19140F828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 128);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 112);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v31 - 80);
  _Unwind_Resume(a1);
}

void sub_19140F910()
{
  JUMPOUT(0x19140F8E8);
}

void Espresso::single_match_state<Espresso::generic_inner_product_kernel>::remove_layer(int64x2_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int32 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  _OWORD v10[3];
  void **v11;

  memset(v10, 0, sizeof(v10));
  v7 = a1[3].i32[2];
  v8 = 0;
  v9 = 0;
  v2 = a1[2].u64[1];
  if (v2 >= a1[3].i64[0])
  {
    v3 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v7);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v7);
    v3 = v2 + 72;
    a1[2].i64[1] = v2 + 72;
  }
  a1[2].i64[1] = v3;
  v11 = (void **)&v10[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v11);
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_19140F9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a9);
  _Unwind_Resume(a1);
}

void Espresso::single_match_state<Espresso::generic_inner_product_kernel>::add_kernel(int64x2_t *a1, uint64_t *a2, const std::string *a3, const std::string *a4, std::string **a5, std::string **a6)
{
  char *v12;
  std::string *v13;
  uint64_t (***v14)(_QWORD);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::string __p;
  __int32 v24;
  char *v25;
  std::__shared_weak_count *v26;
  _OWORD v27[3];

  v24 = 0;
  memset(v27, 0, sizeof(v27));
  v12 = (char *)operator new(0xF8uLL);
  *((_QWORD *)v12 + 1) = 0;
  *((_QWORD *)v12 + 2) = 0;
  *(_QWORD *)v12 = &off_1E2DBF0D0;
  *((_QWORD *)v12 + 3) = &off_1E2DA1A38;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 161) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = (std::string *)(v12 + 40);
  *(_OWORD *)(v12 + 88) = 0u;
  *((_OWORD *)v12 + 13) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_QWORD *)v12 + 30) = 0;
  v25 = v12 + 24;
  v26 = (std::__shared_weak_count *)v12;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v12 + 11, *a2, a2[1]);
  std::string::operator=(v13, a4);
  std::string::operator=((std::string *)(v25 + 40), a3);
  v14 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 8) + 8);
  v15 = v25;
  *((_DWORD *)v25 + 2) = (**v14)(v14);
  v16 = a1[1].i64[0];
  if (v16)
  {
    *((_DWORD *)v15 + 3) = *(_DWORD *)(v16 + 12);
    if (*(char *)(v16 + 223) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 200), *(_QWORD *)(v16 + 208));
    else
      __p = *(std::string *)(v16 + 200);
    std::string::operator=((std::string *)(v15 + 200), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v17 = *(_QWORD *)(a1[4].i64[0] + 32);
    if (*(_QWORD *)(a1[4].i64[0] + 40) != v17)
      *((_DWORD *)v15 + 3) = *(_DWORD *)(*(_QWORD *)v17 + 12);
  }
  if (v27 != (_OWORD *)a5)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v27, *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  if ((std::string **)((char *)&v27[1] + 8) != a6)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v27[1] + 8, *a6, a6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a6[1] - (char *)*a6) >> 3));
  v24 = a1[3].i32[2];
  v18 = a1[2].u64[1];
  if (v18 >= a1[3].i64[0])
  {
    v19 = std::vector<Espresso::net::new_layer_info>::__push_back_slow_path<Espresso::net::new_layer_info const&>(a1 + 2, (uint64_t)&v24);
  }
  else
  {
    std::allocator<Espresso::net::new_layer_info>::construct[abi:ne180100]<Espresso::net::new_layer_info,Espresso::net::new_layer_info const&>(a1[2].i64[1], (uint64_t)&v24);
    v19 = v18 + 72;
    a1[2].i64[1] = v18 + 72;
  }
  a1[2].i64[1] = v19;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27[1] + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v20 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19140FC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  Espresso::net::new_layer_info::~new_layer_info((Espresso::net::new_layer_info *)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke_2(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2);
  *(_QWORD *)(result + 136) = 0;
  return result;
}

uint64_t ___ZN8Espresso20pass_make_fully_conv14run_on_networkERNS_3netE_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 384))(*a2);
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void std::__shared_ptr_emplace<Espresso::pass_make_fully_conv>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_make_fully_conv>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_make_fully_conv>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::quantizer::quantizer(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  int v9;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 48;
  *(_BYTE *)(a1 + 64) = 0;
  v8 = *a3;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 72) = v8;
  std::unordered_map<std::string,float>::unordered_map(a1 + 96, (uint64_t)a3 + 24);
  v9 = *((_DWORD *)a3 + 16);
  *(_DWORD *)(a1 + 139) = *(_DWORD *)((char *)a3 + 67);
  *(_DWORD *)(a1 + 136) = v9;
  std::unordered_set<std::string>::unordered_set(a1 + 144, (uint64_t)a3 + 72);
  std::unordered_set<std::string>::unordered_set(a1 + 184, (uint64_t)(a3 + 7));
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  return a1;
}

void sub_19140FE28(_Unwind_Exception *a1)
{
  uint64_t v1;
  Espresso::dataset_estimator::result_t *v2;
  uint64_t v3;
  uint64_t v4;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(v3);
  Espresso::dataset_estimator::result_t::~result_t(v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,float>::unordered_map(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  v5 = *(unsigned __int8 **)(a2 + 16);
  if (v5)
  {
    v6 = (_QWORD *)(a1 + 16);
    do
    {
      v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(v5 + 16));
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 8);
      if (v9)
      {
        v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
        v10.i16[0] = vaddlv_u8(v10);
        v11 = v10.u32[0];
        if (v10.u32[0] > 1uLL)
        {
          v2 = v7;
          if (v7 >= v9)
            v2 = v7 % v9;
        }
        else
        {
          v2 = (v9 - 1) & v7;
        }
        v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
        if (v12)
        {
          for (i = *v12; i; i = *(unsigned __int8 **)i)
          {
            v14 = *((_QWORD *)i + 1);
            if (v14 == v8)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](i + 16, v5 + 16))
                goto LABEL_44;
            }
            else
            {
              if (v11 > 1)
              {
                if (v14 >= v9)
                  v14 %= v9;
              }
              else
              {
                v14 &= v9 - 1;
              }
              if (v14 != v2)
                break;
            }
          }
        }
      }
      v15 = (char *)operator new(0x30uLL);
      *(_QWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = v8;
      v16 = (std::string *)(v15 + 16);
      if ((char)v5[39] < 0)
      {
        std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)v5 + 2), *((_QWORD *)v5 + 3));
      }
      else
      {
        v17 = *((_OWORD *)v5 + 1);
        *((_QWORD *)v15 + 4) = *((_QWORD *)v5 + 4);
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      }
      *((_DWORD *)v15 + 10) = *((_DWORD *)v5 + 10);
      v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
      v19 = *(float *)(a1 + 32);
      if (!v9 || (float)(v19 * (float)v9) < v18)
      {
        v20 = (v9 & (v9 - 1)) != 0;
        if (v9 < 3)
          v20 = 1;
        v21 = v20 | (2 * v9);
        v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22)
          v23 = v22;
        else
          v23 = v21;
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>(a1, v23);
        v9 = *(_QWORD *)(a1 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v8 >= v9)
            v2 = v8 % v9;
          else
            v2 = v8;
        }
        else
        {
          v2 = (v9 - 1) & v8;
        }
      }
      v24 = *(_QWORD *)a1;
      v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      if (v25)
      {
        *(_QWORD *)v15 = *v25;
      }
      else
      {
        *(_QWORD *)v15 = *v6;
        *v6 = v15;
        *(_QWORD *)(v24 + 8 * v2) = v6;
        if (!*(_QWORD *)v15)
          goto LABEL_43;
        v26 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v26 >= v9)
            v26 %= v9;
        }
        else
        {
          v26 &= v9 - 1;
        }
        v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
      }
      *v25 = v15;
LABEL_43:
      ++*(_QWORD *)(a1 + 24);
LABEL_44:
      v5 = *(unsigned __int8 **)v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1914100C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void Espresso::dataset_estimator::result_t::~result_t(Espresso::dataset_estimator::result_t *this)
{
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*((_QWORD **)this + 4));
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((_QWORD **)this + 1));
}

void std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(a1[1]);
    std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100]((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<Espresso::dataset_estimator::statistics_entry_t>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 88)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

float Espresso::quantizer::get_scale_from_min_max(float a1, float a2, uint64_t a3, Espresso::q_target_traits *a4)
{
  return Espresso::q_target_traits::get_scale_from_min_max(a4, a1, a2);
}

float Espresso::q_target_traits::get_scale_from_min_max(Espresso::q_target_traits *this, float a2, float a3)
{
  float v3;
  unsigned __int8 v4;
  unsigned __int8 *v5;
  int v6;
  BOOL v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float *v13;
  float *v14;
  float *v15;
  float v16;
  int v18;
  int v19;
  float v20;
  float v21;
  Espresso::q_target_traits *v22;
  float v23;
  float v24;

  v3 = 1.0;
  if (vabds_f32(a3, a2) >= 0.0000001)
  {
    v5 = (unsigned __int8 *)&unk_1EE216000;
    if ((v4 & 1) == 0)
    {
      v22 = this;
      v20 = a3;
      v21 = a2;
      v5 = (_BYTE *)&unk_1EE216000;
      a3 = v20;
      a2 = v21;
      v19 = v18;
      this = v22;
      if (v19)
      {
        Espresso::q_target_traits::get_scale_from_min_max(float,float)const::symmetric_formula = getenv("ESPRESSO_QUANTIZER_SYMMETRIC") != 0;
        v5 = (_BYTE *)&unk_1EE216000;
        this = v22;
        a3 = v20;
        a2 = v21;
      }
    }
    v6 = v5[2976];
    if (*((_BYTE *)this + 20))
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      v11 = (double)*((int *)this + 3) / a3;
      v12 = (double)*((int *)this + 2) / a2;
      v23 = v12;
      v24 = v11;
      v13 = &v24;
      v14 = &v23;
      if (v12 >= v11)
        v15 = &v24;
      else
        v15 = &v23;
      if (a3 > 0.0)
        v14 = v15;
      if (a2 < 0.0)
        v13 = v14;
      v10 = *v13;
    }
    else
    {
      v8 = fabsf(a2);
      v9 = fabsf(a3);
      if (v8 < v9)
        v8 = v9;
      v10 = (double)*((int *)this + 3) / v8;
    }
    v16 = 65504.0;
    if (v10 <= 65504.0)
      v16 = v10;
    v3 = -65504.0;
    if (v10 >= -65504.0)
      return v16;
  }
  return v3;
}

void Espresso::quantizer::get_per_channel_scale_from_min_max(__int128 *a1@<X1>, Espresso::dataset_estimator::statistics_entry_t *a2@<X2>, float *a3@<X3>, int a4@<W4>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  __int128 v14;
  uint64_t v15;
  double v16[7];
  void *__p;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a5, a4, 1, 1, 1);
  if (a4 >= 1)
  {
    v10 = 0;
    v11 = 4 * a4;
    do
    {
      Espresso::dataset_estimator::statistics_entry_t::compute_single(a2, a3, 0, (uint64_t)v16);
      v14 = *a1;
      v15 = *((_QWORD *)a1 + 2);
      v12 = v16[0];
      v13 = v16[1];
      *(float *)(*(_QWORD *)(*a5 + 16) + v10) = Espresso::q_target_traits::get_scale_from_min_max((Espresso::q_target_traits *)&v14, v12, v13);
      if (__p)
        operator delete(__p);
      v10 += 4;
      a2 = (Espresso::dataset_estimator::statistics_entry_t *)((char *)a2 + 4 * (int)a3);
    }
    while (v11 != v10);
  }
}

void sub_1914104C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::get_per_channel_scale_from_min_max(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  int v4;
  float *v5;
  __int128 v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *(_DWORD *)(*a2 + 20);
  v5 = (float *)(*(_DWORD *)(*a2 + 12) * *(_DWORD *)(*a2 + 8) * *(_DWORD *)(*a2 + 16));
  v6 = *(_OWORD *)a1;
  v7 = *(_QWORD *)(a1 + 16);
  Espresso::quantizer::get_per_channel_scale_from_min_max(&v6, *(Espresso::dataset_estimator::statistics_entry_t **)(v3 + 24), v5, v4, a3);
}

void Espresso::quantizer::get_per_channel_scale_from_min_max(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)a1;
  v4 = *(_QWORD *)(a1 + 16);
  Espresso::quantizer::get_per_channel_scale_from_min_max(&v3, *(Espresso::dataset_estimator::statistics_entry_t **)(*(_QWORD *)a2 + 16), (float *)*(unsigned int *)(*(_QWORD *)a2 + 8), *(_DWORD *)(*(_QWORD *)a2 + 12), a3);
}

void Espresso::quantizer::load_stats(Espresso::quantizer *a1, uint64_t a2)
{
  uint64_t *v3;
  _QWORD *v4[3];
  _QWORD *v5[2];

  v3 = (uint64_t *)v4;
  v4[0] = 0;
  v5[0] = 0;
  v5[1] = 0;
  v4[1] = 0;
  v4[2] = v5;
  Espresso::dataset_estimator::result_t::load(&v3, a2);
  Espresso::quantizer::set_stats(a1, (const Espresso::dataset_estimator::result_t *)&v3);
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(v5[0]);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v4[0]);
}

void sub_1914105BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(a13);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(a10);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::set_stats(Espresso::quantizer *this, const Espresso::dataset_estimator::result_t *a2)
{
  unint64_t v2;
  uint64_t **v4;
  Espresso *v6;
  const char *v7;
  NSObject *v8;
  uint64_t i;
  __int128 v10;
  char *v11;
  double v12;
  double v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  const void *v20;
  uint64_t v21;
  double v22;
  float v23;
  unsigned __int8 *v24;
  float *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  uint8x8_t v30;
  unint64_t v31;
  void **v32;
  char *v33;
  unint64_t v34;
  std::string *v35;
  float v36;
  float v37;
  _BOOL8 v38;
  unint64_t v39;
  unint64_t v40;
  size_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  double v45;
  double v46;
  float v47;
  float scale_from_min_max;
  float v49;
  uint64_t *v50;
  const char *v51;
  uint64_t v52;
  NSObject *v53;
  char *v54;
  std::string::size_type size;
  std::string *v57;
  uint64_t **v58;
  _QWORD *v59;
  uint64_t *v60;
  std::string __str;
  std::string v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  std::string v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  float v71;
  void *__p;
  void *v73;
  uint64_t v74;
  char v75;
  std::string v76;
  std::string v77;
  char v78;
  _BYTE buf[12];
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  double v87;
  __int16 v88;
  _BOOL4 v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t **)((char *)this + 16);
  if ((Espresso::quantizer *)((char *)this + 16) != a2)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)this + 16, *(__int128 **)a2, (__int128 *)((char *)a2 + 8));
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *> *,long>>((char *)this + 40, *((__int128 **)a2 + 3), (__int128 *)a2 + 2);
  }
  *((_BYTE *)this + 64) = 1;
  Espresso::quantizer::merge_stats_for_concat(this);
  if (*((_BYTE *)this + 88))
  {
    Espresso::espresso_os_log_subsystem(v6, v7);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v67.__r_.__value_.__l.__data_) = 0;
      _os_log_debug_impl(&dword_190DAF000, v8, OS_LOG_TYPE_DEBUG, "[quantizer::estimate_stats] no_mixed_precision=1", (uint8_t *)&v67, 2u);
    }

    v2 = *(_QWORD *)(*(_QWORD *)this + 688);
    for (i = *(_QWORD *)(*(_QWORD *)this + 696); v2 != i; v2 += 24)
    {
      if (*(char *)(v2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)v2, *(_QWORD *)(v2 + 8));
      }
      else
      {
        v10 = *(_OWORD *)v2;
        v67.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&v67.__r_.__value_.__l.__data_ = v10;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)this + 3), &v67))
      {
        *(_QWORD *)buf = &v67;
        v11 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, &v67, (__int128 **)buf);
        v12 = fabs(*((double *)v11 + 7));
        v13 = fabs(*((double *)v11 + 8));
        if (v12 < v13)
          v12 = v13;
        *((double *)v11 + 7) = -v12;
        *((double *)v11 + 8) = v12;
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
    }
  }
  v14 = *(_QWORD *)this;
  v15 = *(__int128 **)(*(_QWORD *)this + 688);
  v16 = *(__int128 **)(*(_QWORD *)this + 696);
  if (v15 != v16)
  {
    v60 = (uint64_t *)((char *)this + 96);
    v59 = (_QWORD *)((char *)this + 112);
    v58 = v4;
    while (1)
    {
      if (*((char *)v15 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
      }
      else
      {
        v17 = *v15;
        v76.__r_.__value_.__r.__words[2] = *((_QWORD *)v15 + 2);
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = v17;
      }
      if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*((_QWORD **)this + 3), &v76))
      {
        break;
      }
LABEL_89:
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      v15 = (__int128 *)((char *)v15 + 24);
      if (v15 == v16)
      {
        v14 = *(_QWORD *)this;
        goto LABEL_109;
      }
    }
    *(_QWORD *)buf = &v76;
    v18 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, &v76, (__int128 **)buf);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v67, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    else
      v67 = v76;
    v19 = *(_OWORD *)(v18 + 72);
    v68 = *(_OWORD *)(v18 + 56);
    v69 = v19;
    v70 = *(_OWORD *)(v18 + 88);
    v71 = *((float *)v18 + 26);
    v73 = 0;
    v74 = 0;
    v20 = (const void *)*((_QWORD *)v18 + 14);
    v21 = *((_QWORD *)v18 + 15);
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v20, v21, (v21 - (uint64_t)v20) >> 2);
    v75 = v18[136];
    Espresso::quantizer::traits_for_blob((uint64_t)this, (__int128 *)&v67, (int8x8_t *)&v65);
    v22 = *((double *)&v68 + 1);
    v23 = *(double *)&v68;
    if (*((float *)this + 23) <= 0.0
      && !std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v60, (unsigned __int8 *)&v76))
    {
LABEL_78:
      if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)this + 18, (uint64_t)&v76))
      {
        scale_from_min_max = v71;
      }
      else
      {
        v49 = v22;
        v63 = v65;
        v64 = v66;
        scale_from_min_max = Espresso::q_target_traits::get_scale_from_min_max((Espresso::q_target_traits *)&v63, v23, v49);
      }
      v50 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>((_QWORD *)this + 23, (uint64_t)&v76);
      v52 = 0x100000000;
      if (!v50)
      {
        v52 = 0x200000001;
        if (*(double *)&v68 >= -0.000001)
          v52 = 0x400000000;
      }
      Espresso::espresso_os_log_subsystem((Espresso *)v50, v51);
      v53 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
      {
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
        else
          __str = v67;
        std::string::basic_string(&v77, &__str, 0, 0x14uLL, (std::allocator<char> *)&v78);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v77;
        size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v77.__r_.__value_.__l.__size_;
        v2 = size - 20;
        if (size != 20)
        {
          do
            std::string::append(&__str, " ");
          while (!__CFADD__(v2++, 1));
        }
        v62 = __str;
        memset(&__str, 0, sizeof(__str));
        v57 = &v62;
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v57 = (std::string *)v62.__r_.__value_.__r.__words[0];
        v81 = v68;
        *(_DWORD *)buf = 136316418;
        *(_QWORD *)&buf[4] = v57;
        v80 = 2048;
        v82 = 2048;
        v83 = *((_QWORD *)&v68 + 1);
        v84 = 2048;
        v85 = v69;
        v86 = 2048;
        v87 = scale_from_min_max;
        v88 = 1024;
        v89 = *(double *)&v68 < -0.000001;
        _os_log_debug_impl(&dword_190DAF000, v53, OS_LOG_TYPE_DEBUG, "[quantizer::estimate_stats] %s: min=%.2e max=%.2e avg=%.3e scale=%.3f signed=%d", buf, 0x3Au);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }

      *(_QWORD *)buf = &v67;
      v54 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, &v67, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
      *((float *)v54 + 14) = scale_from_min_max;
      *(_QWORD *)(v54 + 60) = v52;
      *((_DWORD *)v54 + 17) = 1;
      std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v54 + 72, 0, 0, 0);
      if (__p)
      {
        v73 = __p;
        operator delete(__p);
      }
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v67.__r_.__value_.__l.__data_);
      goto LABEL_89;
    }
    v24 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v60, (unsigned __int8 *)&v76);
    v25 = (float *)((char *)this + 92);
    if (!v24)
    {
LABEL_73:
      if (*v25 != 0.0)
      {
        v45 = *v25;
        v46 = *(double *)&v69 + *((double *)&v69 + 1) * v45;
        v47 = *(double *)&v69 - *((double *)&v69 + 1) * v45;
        if (*(double *)&v68 < -0.000001)
          v23 = v47;
        else
          v23 = 0.0;
        v22 = v46;
      }
      goto LABEL_78;
    }
    v26 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v76);
    v27 = v26;
    v28 = *((_QWORD *)this + 13);
    if (v28)
    {
      v29 = v16;
      v30 = (uint8x8_t)vcnt_s8((int8x8_t)v28);
      v30.i16[0] = vaddlv_u8(v30);
      v31 = v30.u32[0];
      if (v30.u32[0] > 1uLL)
      {
        v2 = v26;
        if (v26 >= v28)
          v2 = v26 % v28;
      }
      else
      {
        v2 = (v28 - 1) & v26;
      }
      v32 = *(void ***)(*v60 + 8 * v2);
      if (v32)
      {
        v33 = (char *)*v32;
        if (*v32)
        {
          while (1)
          {
            v34 = *((_QWORD *)v33 + 1);
            if (v34 == v27)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v33 + 16, (unsigned __int8 *)&v76))
              {
                v4 = v58;
                v16 = v29;
                goto LABEL_72;
              }
            }
            else
            {
              if (v31 > 1)
              {
                if (v34 >= v28)
                  v34 %= v28;
              }
              else
              {
                v34 &= v28 - 1;
              }
              if (v34 != v2)
              {
LABEL_45:
                v4 = v58;
                break;
              }
            }
            v33 = *(char **)v33;
            if (!v33)
              goto LABEL_45;
          }
        }
      }
      v16 = v29;
    }
    v33 = (char *)operator new(0x30uLL);
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = v27;
    v35 = (std::string *)(v33 + 16);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v35, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = *(_OWORD *)&v76.__r_.__value_.__l.__data_;
      *((_QWORD *)v33 + 4) = *((_QWORD *)&v76.__r_.__value_.__l + 2);
    }
    *((_DWORD *)v33 + 10) = 0;
    v36 = (float)(unint64_t)(*((_QWORD *)this + 15) + 1);
    v37 = *((float *)this + 32);
    if (!v28 || (float)(v37 * (float)v28) < v36)
    {
      v38 = (v28 & (v28 - 1)) != 0;
      if (v28 < 3)
        v38 = 1;
      v39 = v38 | (2 * v28);
      v40 = vcvtps_u32_f32(v36 / v37);
      if (v39 <= v40)
        v41 = v40;
      else
        v41 = v39;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)v60, v41);
      v28 = *((_QWORD *)this + 13);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v27 >= v28)
          v2 = v27 % v28;
        else
          v2 = v27;
      }
      else
      {
        v2 = (v28 - 1) & v27;
      }
    }
    v42 = *v60;
    v43 = *(_QWORD **)(*v60 + 8 * v2);
    if (v43)
    {
      *(_QWORD *)v33 = *v43;
    }
    else
    {
      *(_QWORD *)v33 = *v59;
      *v59 = v33;
      *(_QWORD *)(v42 + 8 * v2) = v59;
      if (!*(_QWORD *)v33)
        goto LABEL_71;
      v44 = *(_QWORD *)(*(_QWORD *)v33 + 8);
      if ((v28 & (v28 - 1)) != 0)
      {
        if (v44 >= v28)
          v44 %= v28;
      }
      else
      {
        v44 &= v28 - 1;
      }
      v43 = (_QWORD *)(*v60 + 8 * v44);
    }
    *v43 = v33;
LABEL_71:
    ++*((_QWORD *)this + 15);
LABEL_72:
    v25 = (float *)(v33 + 40);
    goto LABEL_73;
  }
LABEL_109:
  if ((Espresso::quantizer *)(v14 + 352) != (Espresso::quantizer *)((char *)this + 224))
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__tree_node<std::__value_type<std::string,Espresso::blob_numerical_properties>,void *> *,long>>(v14 + 352, *((uint64_t **)this + 28), (uint64_t *)this + 29);
}

void sub_191410DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  void **v60;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,unsigned long>,void *>>>::operator()[abi:ne180100](0, v60);
  std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>::~tuple((uint64_t)&a38);
  if (a60 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>(char *a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  __int128 *v17;
  BOOL v18;
  uint64_t **v19;
  char *v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  __int128 *v24;
  __int128 *v25;
  char *v26;
  uint64_t *v27;
  uint64_t *v28;

  if (*((_QWORD *)a1 + 2))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v26 = a1;
    v27 = v9;
    v28 = v9;
    if (v9)
    {
      v27 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        do
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 2));
          v11 = *(__int128 *)((char *)v10 + 56);
          v12 = *(__int128 *)((char *)v10 + 72);
          v13 = *(__int128 *)((char *)v10 + 88);
          *((_DWORD *)v9 + 26) = *((_DWORD *)v10 + 26);
          *(_OWORD *)(v9 + 11) = v13;
          *(_OWORD *)(v9 + 9) = v12;
          *(_OWORD *)(v9 + 7) = v11;
          if (v9 != (uint64_t *)v10)
            std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v9 + 112, *((char **)v10 + 14), *((_QWORD *)v10 + 15), (uint64_t)(*((_QWORD *)v10 + 15) - *((_QWORD *)v10 + 14)) >> 2);
          *((_BYTE *)v9 + 136) = *((_BYTE *)v10 + 136);
          v14 = *v8;
          v15 = (uint64_t **)(a1 + 8);
          v16 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v15 = (uint64_t **)v14;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v28 + 4, v14 + 4))
                  break;
                v14 = *v15;
                v16 = v15;
                if (!*v15)
                  goto LABEL_16;
              }
              v14 = v15[1];
            }
            while (v14);
            v16 = v15 + 1;
          }
LABEL_16:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v15, v16, v28);
          v9 = v27;
          v28 = v27;
          if (v27)
            v27 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v27);
          v17 = (__int128 *)*((_QWORD *)v10 + 1);
          if (v17)
          {
            do
            {
              a2 = v17;
              v17 = *(__int128 **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v10 + 2);
              v18 = *(_QWORD *)a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v18);
          }
          if (!v9)
            break;
          v10 = a2;
        }
        while (a2 != a3);
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v26);
  }
  if (a2 != a3)
  {
    v19 = (uint64_t **)(a1 + 8);
    do
    {
      v20 = (char *)operator new(0x90uLL);
      v26 = v20;
      v27 = (uint64_t *)(a1 + 8);
      LOBYTE(v28) = 0;
      std::pair<std::string const,Espresso::dataset_estimator::statistics_entry_t>::pair[abi:ne180100]((std::string *)(v20 + 32), a2 + 2);
      LOBYTE(v28) = 1;
      v21 = *v19;
      v22 = (uint64_t **)(a1 + 8);
      v23 = (uint64_t **)(a1 + 8);
      if (*v19)
      {
        do
        {
          while (1)
          {
            v22 = (uint64_t **)v21;
            if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v20 + 4, v21 + 4))break;
            v21 = *v22;
            v23 = v22;
            if (!*v22)
              goto LABEL_34;
          }
          v21 = v22[1];
        }
        while (v21);
        v23 = v22 + 1;
      }
LABEL_34:
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v22, v23, (uint64_t *)v20);
      v26 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100]((uint64_t)&v26);
      v24 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = *(__int128 **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (__int128 *)*((_QWORD *)a2 + 2);
          v18 = *(_QWORD *)v25 == (_QWORD)a2;
          a2 = v25;
        }
        while (!v18);
      }
      a2 = v25;
    }
    while (v25 != a3);
  }
}

void sub_191411118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *> *,long>>(char *a1, __int128 *a2, __int128 *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t i;
  void *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  __int128 *v28;
  BOOL v29;
  uint64_t **v30;
  char *v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  __int128 *v35;
  __int128 *v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;

  if (*((_QWORD *)a1 + 2))
  {
    v6 = *(uint64_t **)a1;
    v8 = (uint64_t **)(a1 + 8);
    v7 = *((_QWORD *)a1 + 1);
    *(_QWORD *)a1 = a1 + 8;
    *(_QWORD *)(v7 + 16) = 0;
    *((_QWORD *)a1 + 1) = 0;
    *((_QWORD *)a1 + 2) = 0;
    if (v6[1])
      v9 = (uint64_t *)v6[1];
    else
      v9 = v6;
    v37 = a1;
    v38 = v9;
    v39 = v9;
    if (v9)
    {
      v38 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v9);
      if (a2 != a3)
      {
        v10 = a2;
        while (1)
        {
          std::string::operator=((std::string *)(v9 + 4), (const std::string *)(v10 + 2));
          if (v9 != (uint64_t *)v10)
          {
            v12 = (__int128 *)*((_QWORD *)v10 + 7);
            v11 = (__int128 *)*((_QWORD *)v10 + 8);
            v13 = v9[9];
            v14 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v12) >> 3);
            v15 = v9[7];
            if (0x2E8BA2E8BA2E8BA3 * ((v13 - v15) >> 3) >= v14)
            {
              if (0x2E8BA2E8BA2E8BA3 * ((v9[8] - v15) >> 3) >= v14)
              {
                v22 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *>(*((_QWORD *)v10 + 7), *((_QWORD *)v10 + 8), v15);
                for (i = v9[8]; i != v22; i -= 88)
                {
                  v24 = *(void **)(i - 32);
                  if (v24)
                  {
                    *(_QWORD *)(i - 24) = v24;
                    operator delete(v24);
                  }
                }
                v9[8] = v22;
                goto LABEL_28;
              }
              v21 = (__int128 *)((char *)v12 + 8 * ((v9[8] - v15) >> 3));
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *>(*((_QWORD *)v10 + 7), (uint64_t)v21, v15);
              v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>((uint64_t)(v9 + 9), v21, v11, v9[8]);
            }
            else
            {
              v16 = (void **)(v9 + 7);
              if (v15)
              {
                std::vector<Espresso::dataset_estimator::statistics_entry_t>::__clear[abi:ne180100](v9 + 7);
                operator delete(*v16);
                v13 = 0;
                *v16 = 0;
                v9[8] = 0;
                v9[9] = 0;
              }
              if (v14 > 0x2E8BA2E8BA2E8BALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v17 = 0x2E8BA2E8BA2E8BA3 * (v13 >> 3);
              v18 = 2 * v17;
              if (2 * v17 <= v14)
                v18 = 0x2E8BA2E8BA2E8BA3 * (((char *)v11 - (char *)v12) >> 3);
              if (v17 >= 0x1745D1745D1745DLL)
                v19 = 0x2E8BA2E8BA2E8BALL;
              else
                v19 = v18;
              std::vector<Espresso::dataset_estimator::statistics_entry_t>::__vallocate[abi:ne180100](v9 + 7, v19);
              v20 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>((uint64_t)(v9 + 9), v12, v11, v9[8]);
            }
            v9[8] = v20;
          }
LABEL_28:
          v25 = *v8;
          v26 = (uint64_t **)(a1 + 8);
          v27 = (uint64_t **)(a1 + 8);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v26 = (uint64_t **)v25;
                if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v39 + 4, v25 + 4))
                  break;
                v25 = *v26;
                v27 = v26;
                if (!*v26)
                  goto LABEL_34;
              }
              v25 = v26[1];
            }
            while (v25);
            v27 = v26 + 1;
          }
LABEL_34:
          std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v26, v27, v39);
          v9 = v38;
          v39 = v38;
          if (v38)
            v38 = std::__tree<std::__value_type<std::string,Espresso::net_configuration>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::net_configuration>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::net_configuration>>>::_DetachedTreeCache::__detach_next((uint64_t)v38);
          v28 = (__int128 *)*((_QWORD *)v10 + 1);
          if (v28)
          {
            do
            {
              a2 = v28;
              v28 = *(__int128 **)v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v10 + 2);
              v29 = *(_QWORD *)a2 == (_QWORD)v10;
              v10 = a2;
            }
            while (!v29);
          }
          if (v9)
          {
            v10 = a2;
            if (a2 != a3)
              continue;
          }
          break;
        }
      }
    }
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v37);
  }
  if (a2 != a3)
  {
    v30 = (uint64_t **)(a1 + 8);
    do
    {
      v31 = (char *)operator new(0x50uLL);
      v37 = v31;
      v38 = (uint64_t *)(a1 + 8);
      LOBYTE(v39) = 0;
      std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::pair[abi:ne180100]((std::string *)(v31 + 32), a2 + 2);
      LOBYTE(v39) = 1;
      v32 = *v30;
      v33 = (uint64_t **)(a1 + 8);
      v34 = (uint64_t **)(a1 + 8);
      if (*v30)
      {
        do
        {
          while (1)
          {
            v33 = (uint64_t **)v32;
            if (!std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)v31 + 4, v32 + 4))break;
            v32 = *v33;
            v34 = v33;
            if (!*v33)
              goto LABEL_52;
          }
          v32 = v33[1];
        }
        while (v32);
        v34 = v33 + 1;
      }
LABEL_52:
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v33, v34, (uint64_t *)v31);
      v37 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v37);
      v35 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = *(__int128 **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (__int128 *)*((_QWORD *)a2 + 2);
          v29 = *(_QWORD *)v36 == (_QWORD)a2;
          a2 = v36;
        }
        while (!v29);
      }
      a2 = v36;
    }
    while (v36 != a3);
  }
}

void sub_1914114DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 64) = v3;
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::merge_stats_for_concat(Espresso::quantizer *this)
{
  unint64_t v1;
  _QWORD *v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  __int128 *v21;
  __int128 *v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  __int128 *v34;
  __int128 *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  __int128 *v47;
  __int128 *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  char *v58;
  unint64_t v59;
  __int128 *v60[2];
  unint64_t v61;

  v1 = *(_QWORD *)(*(_QWORD *)this + 40) - *(_QWORD *)(*(_QWORD *)this + 32);
  if ((int)(v1 >> 4) >= 1)
  {
    v3 = (_QWORD *)((char *)this + 184);
    v4 = (uint64_t **)((char *)this + 16);
    v5 = (v1 >> 4);
    v56 = *((unsigned __int8 *)this + 140);
    v57 = *((unsigned __int8 *)this + 141);
    v58 = (char *)this + 184;
    while (1)
    {
      v6 = *(_QWORD *)this + 96;
      v7 = (v5 - 1);
      v60[0] = (__int128 *)v7;
      v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v6, v7, v60);
      if (v8[4] != v8[3])
      {
        v9 = *(_QWORD *)this + 96;
        v60[0] = (__int128 *)(v5 - 1);
        v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v9, (unint64_t)v60[0], v60);
        if (!std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v3, v10[3]))break;
      }
LABEL_47:
      v27 = v5-- <= 1;
      if (v27)
        return;
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 16 * v7);
    v12 = *(const void **)(v11 + 64);
    if (v12)
    {
      {
        v13 = *(std::__shared_weak_count **)(v11 + 72);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
          do
            v16 = __ldaxr(p_shared_owners);
          while (__stlxr(v16 - 1, p_shared_owners));
          goto LABEL_17;
        }
        goto LABEL_19;
      }
      {
        v13 = *(std::__shared_weak_count **)(v11 + 72);
        if (v13)
        {
          v17 = (unint64_t *)&v13->__shared_owners_;
          do
            v18 = __ldxr(v17);
          while (__stxr(v18 + 1, v17));
          do
            v16 = __ldaxr(v17);
          while (__stlxr(v16 - 1, v17));
LABEL_17:
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
LABEL_19:
        if (!v57)
        {
          v45 = *(_QWORD *)this + 56;
          v60[0] = (__int128 *)(v5 - 1);
          v46 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v45, (unint64_t)v60[0], v60);
          v48 = (__int128 *)v46[3];
          v47 = (__int128 *)v46[4];
          while (v48 != v47)
          {
            v49 = *(_QWORD *)this + 96;
            v61 = (v5 - 1);
            v60[0] = *((__int128 **)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v49, v61, &v61)+ 3);
            v50 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (_QWORD *)v60[0], v60);
            v60[0] = v48;
            v51 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v48, v60);
            v52 = v51;
            v53 = *(_OWORD *)(v50 + 56);
            v54 = *(_OWORD *)(v50 + 72);
            v55 = *(_OWORD *)(v50 + 88);
            *((_DWORD *)v51 + 26) = *((_DWORD *)v50 + 26);
            *(_OWORD *)(v51 + 88) = v55;
            *(_OWORD *)(v51 + 72) = v54;
            *(_OWORD *)(v51 + 56) = v53;
            if (v51 != v50)
              std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v51 + 112, *((char **)v50 + 14), *((_QWORD *)v50 + 15), (uint64_t)(*((_QWORD *)v50 + 15) - *((_QWORD *)v50 + 14)) >> 2);
            v52[136] = v50[136];
            v48 = (__int128 *)((char *)v48 + 24);
          }
        }
      }
    }
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 16 * v7);
    v20 = *(const void **)(v19 + 64);
    if (v20)
    {
      if (v21)
      {
        v22 = *(__int128 **)(v19 + 72);
        v60[0] = v21;
        v60[1] = v22;
        if (v22)
        {
          v23 = (unint64_t *)v22 + 1;
          do
            v24 = __ldxr(v23);
          while (__stxr(v24 + 1, v23));
        }
        v25 = *(_DWORD *)(*(uint64_t (**)(__int128 *))(*(_QWORD *)v21 + 320))(v21);
        v26 = v25 - 100 > 7 || ((1 << (v25 - 100)) & 0xF9) == 0;
        if (!v26 || ((v27 = v25 > 0x21, v28 = (1 << v25) & 0x200C00001, !v27) ? (v29 = v28 == 0) : (v29 = 1), !v29))
        {
          if (!v56)
          {
            v30 = *(_QWORD *)this + 56;
            v61 = (v5 - 1);
            v31 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v30, v61, &v61);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31[4] - v31[3]) >> 3) >= 2)
            {
              v32 = *(_QWORD *)this + 56;
              v61 = (v5 - 1);
              v33 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v32, v61, &v61);
              v35 = (__int128 *)v33[3];
              v34 = (__int128 *)v33[4];
              while (v35 != v34)
              {
                v36 = *(_QWORD *)this + 96;
                v59 = (v5 - 1);
                v61 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v36, v59, &v59)[3];
                v37 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (_QWORD *)v61, (__int128 **)&v61);
                v61 = (unint64_t)v35;
                v38 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v35, (__int128 **)&v61);
                v39 = v38;
                v40 = *(_OWORD *)(v37 + 56);
                v41 = *(_OWORD *)(v37 + 72);
                v42 = *(_OWORD *)(v37 + 88);
                *((_DWORD *)v38 + 26) = *((_DWORD *)v37 + 26);
                *(_OWORD *)(v38 + 88) = v42;
                *(_OWORD *)(v38 + 72) = v41;
                *(_OWORD *)(v38 + 56) = v40;
                if (v38 != v37)
                  std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v38 + 112, *((char **)v37 + 14), *((_QWORD *)v37 + 15), (uint64_t)(*((_QWORD *)v37 + 15) - *((_QWORD *)v37 + 14)) >> 2);
                v39[136] = v37[136];
                v35 = (__int128 *)((char *)v35 + 24);
              }
            }
          }
        }
        if (v22)
        {
          v43 = (unint64_t *)v22 + 1;
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            (*(void (**)(__int128 *))(*(_QWORD *)v22 + 16))(v22);
            std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v22);
          }
        }
      }
    }
    v3 = v58;
    goto LABEL_47;
  }
}

void sub_19141195C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, _QWORD *a2, __int128 **a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x90uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v13 = 0;
    v8 = (std::string *)(v6 + 32);
    v9 = *a3;
    if (*((char *)*a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
    }
    else
    {
      v10 = *v9;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v9 + 2);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
    }
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *((_QWORD *)v6 + 16) = 0;
    *((_QWORD *)v6 + 17) = 0;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *((_DWORD *)v6 + 26) = -1082130432;
    *((_QWORD *)v6 + 14) = 0;
    *((_QWORD *)v6 + 15) = 0;
    v6[136] = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_191411A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

int8x8_t Espresso::quantizer::traits_for_blob@<D0>(uint64_t a1@<X0>, __int128 *a2@<X1>, int8x8_t *a3@<X8>)
{
  double v4;
  unsigned int v5;
  int v6;
  int8x8_t result;
  std::runtime_error *exception;
  __int128 *v9;

  if (!*(_BYTE *)(a1 + 64))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state: estimate_stats or load_stats must be called first");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = a2;
  v4 = *((double *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 16), a2, &v9)+ 7);
  v5 = v4 < -0.000001;
  if (v4 >= -0.000001)
    v6 = 4;
  else
    v6 = 2;
  a3->i32[0] = v6;
  a3->i32[1] = 8;
  result = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v5), 0x1FuLL)), (int8x8_t)0x7FFFFFFF80, (int8x8_t)0xFF00000000);
  a3[1] = result;
  a3[2].i32[0] = 255;
  a3[2].i8[4] = v5;
  return result;
}

void sub_191411B3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_191411BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::allocator<std::tuple<std::string,BOOL,unsigned long,Espresso::layer_shape>>::destroy[abi:ne180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(v2);
  }
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

std::string *std::pair<std::string const,std::vector<Espresso::dataset_estimator::statistics_entry_t>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(this[1].__r_.__value_.__r.__words, *((__int128 **)a2 + 3), *((__int128 **)a2 + 4), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
  return this;
}

void sub_191411D18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<Espresso::dataset_estimator::statistics_entry_t>::__init_with_size[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<Espresso::dataset_estimator::statistics_entry_t>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_191411D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<Espresso::dataset_estimator::statistics_entry_t>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*,Espresso::dataset_estimator::statistics_entry_t*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v7 = *v6;
      v8 = v6[1];
      v9 = v6[2];
      *(_DWORD *)(v4 + 48) = *((_DWORD *)v6 + 12);
      *(_OWORD *)(v4 + 16) = v8;
      *(_OWORD *)(v4 + 32) = v9;
      *(_OWORD *)v4 = v7;
      *(_QWORD *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v4 + 56), *((const void **)v6 + 7), *((_QWORD *)v6 + 8), (uint64_t)(*((_QWORD *)v6 + 8) - *((_QWORD *)v6 + 7)) >> 2);
      *(_BYTE *)(v4 + 80) = *((_BYTE *)v6 + 80);
      v4 = v14 + 88;
      v14 += 88;
      v6 = (__int128 *)((char *)v6 + 88);
    }
    while (v6 != a3);
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_191411EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Espresso::dataset_estimator::statistics_entry_t>,Espresso::dataset_estimator::statistics_entry_t*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 32);
      if (v5)
      {
        *(_QWORD *)(v3 - 24) = v5;
        operator delete(v5);
      }
      v3 -= 88;
    }
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::dataset_estimator::statistics_entry_t>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(88 * a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *,Espresso::dataset_estimator::statistics_entry_t *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a1 != a2)
  {
    v5 = a1 + 64;
    do
    {
      v6 = v5 - 64;
      v7 = *(_OWORD *)(v5 - 64);
      v8 = *(_OWORD *)(v5 - 48);
      v9 = *(_OWORD *)(v5 - 32);
      *(_DWORD *)(a3 + 48) = *(_DWORD *)(v5 - 16);
      *(_OWORD *)(a3 + 16) = v8;
      *(_OWORD *)(a3 + 32) = v9;
      *(_OWORD *)a3 = v7;
      if (a3 != v5 - 64)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)(a3 + 56), *(char **)(v5 - 8), *(_QWORD *)v5, (uint64_t)(*(_QWORD *)v5 - *(_QWORD *)(v5 - 8)) >> 2);
      *(_BYTE *)(a3 + 80) = *(_BYTE *)(v5 + 16);
      a3 += 88;
      v5 += 88;
    }
    while (v6 + 88 != a2);
  }
  return a3;
}

uint64_t std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v2);
  }
  return a1;
}

std::string *std::pair<std::string const,Espresso::dataset_estimator::statistics_entry_t>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  v6 = *(__int128 *)((char *)a2 + 40);
  v7 = *(__int128 *)((char *)a2 + 56);
  v8 = *((_DWORD *)a2 + 18);
  this[3].__r_.__value_.__l.__size_ = 0;
  LODWORD(this[3].__r_.__value_.__l.__data_) = v8;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[1] = v7;
  *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v6;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  this[3].__r_.__value_.__r.__words[2] = 0;
  this[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&this[3].__r_.__value_.__l.__size_, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  this[4].__r_.__value_.__s.__data_[8] = *((_BYTE *)a2 + 104);
  return this;
}

void sub_1914120E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void Espresso::quantizer::save_stats(uint64_t a1, uint64_t a2)
{
  Espresso::dataset_estimator::result_t::save((_QWORD *)(a1 + 16), a2);
}

void Espresso::quantizer::estimate_stats(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21[2];
  unsigned int v22[2];
  char v23;
  int v24;
  _OWORD v25[2];
  int v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  _QWORD **v29;
  _QWORD *v30[3];
  _QWORD *v31[3];
  _QWORD *v32[2];

  v4 = *(uint64_t **)a1;
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v27 = v4;
    v28 = v5;
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  else
  {
    v27 = *(uint64_t **)a1;
    v28 = 0;
  }
  v29 = v30;
  v30[0] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v30[1] = 0;
  v30[2] = v31;
  v32[0] = 0;
  v32[1] = 0;
  v31[2] = v32;
  if (v5)
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v23 = 0;
  memset(v25, 0, sizeof(v25));
  v26 = 1065353216;
  v22[0] = *(_DWORD *)(a1 + 76);
  v22[1] = 1;
  v24 = *(_DWORD *)(a1 + 136);
  if (v25 != (_OWORD *)(a1 + 144))
  {
    v26 = *(_DWORD *)(a1 + 176);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v25, *(uint64_t **)(a1 + 160), 0);
  }
  v12 = *a2;
  v13 = (std::__shared_weak_count *)a2[1];
  v21[0] = v12;
  v21[1] = (uint64_t)v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  Espresso::dataset_estimator::estimate(&v27, v21, v22, 0);
  if (v13)
  {
    v16 = (unint64_t *)&v13->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  Espresso::quantizer::set_stats((Espresso::quantizer *)a1, (const Espresso::dataset_estimator::result_t *)&v29);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v25);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(v32[0]);
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(v31[0]);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v30[0]);
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1914122F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v18);
  Espresso::dataset_estimator::~dataset_estimator((Espresso::dataset_estimator *)&a18);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void Espresso::dataset_estimator::~dataset_estimator(Espresso::dataset_estimator *this)
{
  std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(*((_QWORD **)this + 9));
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(*((_QWORD **)this + 6));
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((_QWORD **)this + 3));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,0>(uint64_t a1)
{
  void **v2;
  void **v3;
  void *v4;
  void **v5;

  v2 = *(void ***)(a1 + 24);
  if (v2)
  {
    v3 = *(void ***)(a1 + 32);
    v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<Espresso::dataset_estimator::statistics_entry_t>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void Espresso::quantizer::quantize(Espresso::quantizer *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  __int128 v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  Espresso *v16;
  const char *v17;
  float v18;
  float v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  const void *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  float *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  float *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  void *data;
  unint64_t *v94;
  unint64_t v95;
  float *v96;
  uint64_t v97;
  uint64_t v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  float *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t *v137;
  unint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  int *v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  __int128 v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *height;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  void *v165;
  vImagePixelCount v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  void *v175;
  void *v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  std::__shared_weak_count *v180;
  unint64_t *v181;
  unint64_t v182;
  int v183;
  uint64_t v184;
  float *v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  std::__shared_weak_count *v189;
  unint64_t *v190;
  unint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  __int128 v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  void *v203;
  vImagePixelCount v204;
  unint64_t *v205;
  unint64_t v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  void *v213;
  vImagePixelCount v214;
  unint64_t *v215;
  unint64_t v216;
  _DWORD *v217;
  int v218;
  float v219;
  Espresso *v220;
  const char *v221;
  __int128 v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  char v229;
  Espresso::dataset_estimator::statistics_entry_t **v230;
  unint64_t *v231;
  unint64_t v232;
  __int128 v233;
  std::__shared_weak_count *v234;
  unint64_t *v235;
  unint64_t v236;
  std::__shared_weak_count *v237;
  unint64_t *v238;
  unint64_t v239;
  unint64_t *v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t *v245;
  unint64_t v246;
  uint64_t v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  uint64_t v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t v257;
  std::__shared_weak_count *v258;
  unint64_t *v259;
  unint64_t v260;
  uint64_t v261;
  float *v262;
  std::__shared_weak_count *v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t *v271;
  __int128 v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  std::__shared_weak_count *v276;
  unint64_t *v277;
  unint64_t v278;
  void *v279;
  vImagePixelCount v280;
  unint64_t *v281;
  unint64_t v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  void *v289;
  vImagePixelCount v290;
  unint64_t *v291;
  unint64_t v292;
  unsigned int v293;
  Espresso *v294;
  const char *v295;
  __int128 v296;
  std::__shared_weak_count *v297;
  unint64_t *v298;
  unint64_t v299;
  std::__shared_weak_count *v300;
  unint64_t *v301;
  unint64_t v302;
  NSObject *v303;
  NSObject *v304;
  float v305;
  void *v306;
  uint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  __int128 v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  std::__shared_weak_count *v314;
  unint64_t *v315;
  unint64_t v316;
  float v317;
  float *v318;
  const char *v319;
  NSObject *v320;
  const char *v321;
  Espresso *v322;
  const char *v323;
  uint64_t v324;
  unint64_t *v325;
  unint64_t v326;
  NSObject *v327;
  __int128 v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  std::__shared_weak_count *v332;
  unint64_t *v333;
  unint64_t v334;
  float v335;
  float v336;
  Espresso *v337;
  const char *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  NSObject *v342;
  __int128 v343;
  std::__shared_weak_count *v344;
  unint64_t *v345;
  unint64_t v346;
  std::__shared_weak_count *v347;
  unint64_t *v348;
  unint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  float v352;
  float v353;
  char *v354;
  unint64_t v355;
  float v356;
  void *v357;
  uint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  __int128 v361;
  std::__shared_weak_count *v362;
  unint64_t *v363;
  unint64_t v364;
  std::__shared_weak_count *v365;
  unint64_t *v366;
  unint64_t v367;
  float v368;
  char *v369;
  unint64_t *v370;
  std::__shared_weak_count *v371;
  unint64_t *v372;
  unint64_t v373;
  unint64_t *v374;
  unint64_t v375;
  std::runtime_error *exception;
  char *v377;
  _QWORD v378[2];
  __int128 v379;
  uint8_t v380[16];
  uint64_t v381;
  std::__shared_weak_count *v382;
  uint64_t v383[2];
  uint8_t v384[16];
  __int128 v385;
  void *v386;
  vImagePixelCount v387;
  __int128 v388;
  int v389;
  char v390;
  uint64_t v391;
  std::__shared_weak_count *v392;
  uint64_t v393[2];
  uint64_t v394;
  uint64_t v395;
  __int128 v396;
  void *v397;
  vImagePixelCount v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401[2];
  __int128 v402;
  int v403;
  char v404;
  uint64_t v405;
  uint64_t v406;
  __int128 v407;
  __int128 v408;
  _QWORD *v409;
  uint64_t v410;
  uint64_t v411;
  __int128 *v412;
  __int128 *v413;
  uint64_t v414;
  uint64_t v415;
  std::__shared_weak_count *v416;
  __int128 v417;
  __int128 v418;
  uint8_t buf[16];
  vImage_Buffer dest;
  vImage_Buffer src;

  if (!*((_BYTE *)this + 64))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Inconsistent state: estimate_stats or load_stats must be called first");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 40) != v3)
  {
    v4 = 0;
    v5 = (_QWORD *)((char *)this + 184);
    v377 = (char *)this + 184;
    do
    {
      v6 = *(_OWORD *)(v3 + 16 * v4);
      v417 = v6;
      if (*((_QWORD *)&v6 + 1))
      {
        v7 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v8 = __ldxr(v7);
        while (__stxr(v8 + 1, v7));
      }
      v9 = *(std::__shared_weak_count **)(v6 + 72);
      v415 = *(_QWORD *)(v6 + 64);
      v416 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      v12 = *(_QWORD *)this + 56;
      src.data = (void *)v4;
      v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v12, v4, &src);
      v412 = 0;
      v413 = 0;
      v414 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v412, v13[3], v13[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13[4] - v13[3]) >> 3));
      v14 = *(_QWORD *)this + 96;
      src.data = (void *)v4;
      v15 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v14, v4, &src);
      v409 = 0;
      v410 = 0;
      v411 = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v409, v15[3], v15[4], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15[4] - v15[3]) >> 3));
      if (v410 - (_QWORD)v409 == 24)
      {
        if (v413 != v412)
        {
          src.data = v412;
          v18 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&src)+ 14);
          src.data = v409;
          v19 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v409, (uint64_t)&std::piecewise_construct, (__int128 **)&src)+ 14);
          v408 = 0uLL;
          v407 = 0uLL;
          if (std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v5, (uint64_t)v409))
          {
LABEL_13:
            v20 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
            if (*((_QWORD *)&v408 + 1))
            {
              v21 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                std::__shared_weak_count::__release_weak(v20);
              }
            }
            v9 = v416;
            goto LABEL_23;
          }
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 32) + 16 * v4);
          v32 = *(const void **)(v31 + 64);
          if (v32)
          {
            if (v33)
            {
              v34 = v33;
              v35 = *(_QWORD *)(v31 + 72);
              v405 = (uint64_t)v33;
              v406 = v35;
              if (v35)
              {
                v36 = (unint64_t *)(v35 + 8);
                do
                  v37 = __ldxr(v36);
                while (__stxr(v37 + 1, v36));
              }
              (*(void (**)(vImage_Buffer *__return_ptr, void *))(*(_QWORD *)v33 + 448))(&src, v33);
              v407 = *(_OWORD *)&src.data;
              (*(void (**)(uint8_t *__return_ptr, void *))(*(_QWORD *)v34 + 456))(buf, v34);
              if (!*(_QWORD *)buf)
              {
                (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v34 + 552))(&v418, v34);
                if (!(_QWORD)v418)
                  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot find convolution weights. The model needs to be in float32 or float16");
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v418 + 8);
                v157 = *(_OWORD *)&src.data;
                src.data = 0;
                src.height = 0;
                v158 = *(std::__shared_weak_count **)&buf[8];
                *(_OWORD *)buf = v157;
                if (v158)
                {
                  v159 = (unint64_t *)&v158->__shared_owners_;
                  do
                    v160 = __ldaxr(v159);
                  while (__stlxr(v160 - 1, v159));
                  if (!v160)
                  {
                    ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
                    std::__shared_weak_count::__release_weak(v158);
                  }
                }
                height = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v162 = (unint64_t *)(src.height + 8);
                  do
                    v163 = __ldaxr(v162);
                  while (__stlxr(v163 - 1, v162));
                  if (!v163)
                  {
                    ((void (*)(std::__shared_weak_count *))height->__on_zero_shared)(height);
                    std::__shared_weak_count::__release_weak(height);
                  }
                }
                v164 = 0;
                v165 = *(void **)(*(_QWORD *)buf + 24);
                v166 = *(int *)(*(_QWORD *)buf + 8);
                do
                {
                  v166 *= *(int *)(*(_QWORD *)buf + 12 + v164);
                  v164 += 4;
                }
                while (v164 != 12);
                src.data = *(void **)(v418 + 24);
                src.height = 1;
                src.width = v166;
                src.rowBytes = 2 * v166;
                dest.data = v165;
                dest.height = 1;
                dest.width = v166;
                dest.rowBytes = 4 * v166;
                vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                src.data = *(void **)buf;
                src.height = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v167 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v168 = __ldxr(v167);
                  while (__stxr(v168 + 1, v167));
                }
                (*(void (**)(void *, vImage_Buffer *))(*(_QWORD *)v34 + 400))(v34, &src);
                v169 = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v170 = (unint64_t *)(src.height + 8);
                  do
                    v171 = __ldaxr(v170);
                  while (__stlxr(v171 - 1, v170));
                  if (!v171)
                  {
                    ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
                    std::__shared_weak_count::__release_weak(v169);
                  }
                }
                v172 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
                if (*((_QWORD *)&v418 + 1))
                {
                  v173 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                  do
                    v174 = __ldaxr(v173);
                  while (__stlxr(v174 - 1, v173));
                  if (!v174)
                  {
                    ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                    std::__shared_weak_count::__release_weak(v172);
                  }
                }
              }
              v38 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v39 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v40 = __ldaxr(v39);
                while (__stlxr(v40 - 1, v39));
                if (!v40)
                {
                  ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
                  std::__shared_weak_count::__release_weak(v38);
                }
              }
              v41 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 384))(v34);
              v42 = *(unsigned int *)(v41 + 40);
              v43 = *(_DWORD *)(v41 + 116);
              (*(void (**)(vImage_Buffer *__return_ptr, void *))(*(_QWORD *)v34 + 456))(&src, v34);
              std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(&dest, (uint64_t)src.data + 8);
              Espresso::blob<float,4>::transpose((uint64_t *)buf, (uint64_t)src.data, (uint64_t)dword_191A93A40);
              v44 = (float *)(*(_DWORD *)(*(_QWORD *)buf + 12)
                                          * *(_DWORD *)(*(_QWORD *)buf + 8)
                                          * *(_DWORD *)(*(_QWORD *)buf + 16)
                                          / v43);
              v402 = xmmword_191A935A0;
              v403 = 255;
              v404 = 1;
              Espresso::quantizer::get_per_channel_scale_from_min_max(&v402, *(Espresso::dataset_estimator::statistics_entry_t **)(*(_QWORD *)buf + 24), v44, v42, &v418);
              v47 = v418;
              v418 = 0uLL;
              v48 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v47;
              if (v48)
              {
                v49 = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldaxr(v49);
                while (__stlxr(v50 - 1, v49));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              v51 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
              if (*((_QWORD *)&v418 + 1))
              {
                v52 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                do
                  v53 = __ldaxr(v52);
                while (__stlxr(v53 - 1, v52));
                if (!v53)
                {
                  ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
                  std::__shared_weak_count::__release_weak(v51);
                }
              }
              if ((int)v42 >= 1)
              {
                v54 = *(float **)(v408 + 16);
                do
                {
                  *v54 = v19 / (float)(v18 * *v54);
                  ++v54;
                  --v42;
                }
                while (v42);
              }
              v55 = (std::__shared_weak_count *)v406;
              v401[0] = v405;
              v401[1] = v406;
              if (v406)
              {
                v56 = (unint64_t *)(v406 + 8);
                do
                  v57 = __ldxr(v56);
                while (__stxr(v57 + 1, v56));
              }
              Espresso::quantizer::quantize_deconv_weights(v45, v46, v401);
              if (v55)
              {
                v58 = (unint64_t *)&v55->__shared_owners_;
                do
                  v59 = __ldaxr(v58);
                while (__stlxr(v59 - 1, v58));
                if (!v59)
                {
                  ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                  std::__shared_weak_count::__release_weak(v55);
                }
              }
              v60 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v61 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v62 = __ldaxr(v61);
                while (__stlxr(v62 - 1, v61));
                if (!v62)
                {
                  ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
                  std::__shared_weak_count::__release_weak(v60);
                }
              }
              v63 = (std::__shared_weak_count *)dest.height;
              if (dest.height)
              {
                v64 = (unint64_t *)(dest.height + 8);
                do
                  v65 = __ldaxr(v64);
                while (__stlxr(v65 - 1, v64));
                if (!v65)
                {
                  ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                  std::__shared_weak_count::__release_weak(v63);
                }
              }
              v66 = (std::__shared_weak_count *)src.height;
              if (src.height)
              {
                v67 = (unint64_t *)(src.height + 8);
                do
                  v68 = __ldaxr(v67);
                while (__stlxr(v68 - 1, v67));
LABEL_194:
                if (!v68)
                {
                  ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
                  std::__shared_weak_count::__release_weak(v66);
                }
              }
              goto LABEL_196;
            }
            v405 = 0;
            v406 = 0;
            if (v84)
            {
              v85 = v84;
              v86 = *(_QWORD *)(v31 + 72);
              v399 = (uint64_t)v84;
              v400 = v86;
              if (v86)
              {
                v87 = (unint64_t *)(v86 + 8);
                do
                  v88 = __ldxr(v87);
                while (__stxr(v88 + 1, v87));
              }
              (*(void (**)(uint8_t *__return_ptr, void *))(*(_QWORD *)v84 + 456))(buf, v84);
              if (!*(_QWORD *)buf)
              {
                (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v85 + 552))(&v418, v85);
                if (!(_QWORD)v418)
                  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot find convolution weights. The model needs to be in float32 or float16");
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(&src, v418 + 8);
                v195 = *(_OWORD *)&src.data;
                src.data = 0;
                src.height = 0;
                v196 = *(std::__shared_weak_count **)&buf[8];
                *(_OWORD *)buf = v195;
                if (v196)
                {
                  v197 = (unint64_t *)&v196->__shared_owners_;
                  do
                    v198 = __ldaxr(v197);
                  while (__stlxr(v198 - 1, v197));
                  if (!v198)
                  {
                    ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
                    std::__shared_weak_count::__release_weak(v196);
                  }
                }
                v199 = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v200 = (unint64_t *)(src.height + 8);
                  do
                    v201 = __ldaxr(v200);
                  while (__stlxr(v201 - 1, v200));
                  if (!v201)
                  {
                    ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                    std::__shared_weak_count::__release_weak(v199);
                  }
                }
                v202 = 0;
                v203 = *(void **)(*(_QWORD *)buf + 24);
                v204 = *(int *)(*(_QWORD *)buf + 8);
                do
                {
                  v204 *= *(int *)(*(_QWORD *)buf + 12 + v202);
                  v202 += 4;
                }
                while (v202 != 12);
                src.data = *(void **)(v418 + 24);
                src.height = 1;
                src.width = v204;
                src.rowBytes = 2 * v204;
                dest.data = v203;
                dest.height = 1;
                dest.width = v204;
                dest.rowBytes = 4 * v204;
                vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                src.data = *(void **)buf;
                src.height = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v205 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v206 = __ldxr(v205);
                  while (__stxr(v206 + 1, v205));
                }
                (*(void (**)(void *, vImage_Buffer *))(*(_QWORD *)v85 + 400))(v85, &src);
                v207 = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v208 = (unint64_t *)(src.height + 8);
                  do
                    v209 = __ldaxr(v208);
                  while (__stlxr(v209 - 1, v208));
                  if (!v209)
                  {
                    ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
                    std::__shared_weak_count::__release_weak(v207);
                  }
                }
                v210 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
                if (*((_QWORD *)&v418 + 1))
                {
                  v211 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                  do
                    v212 = __ldaxr(v211);
                  while (__stlxr(v212 - 1, v211));
                  if (!v212)
                  {
                    ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
                    std::__shared_weak_count::__release_weak(v210);
                  }
                }
              }
              v89 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v90 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v91 = __ldaxr(v90);
                while (__stlxr(v91 - 1, v90));
                if (!v91)
                {
                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                  std::__shared_weak_count::__release_weak(v89);
                }
              }
              v92 = *(unsigned int *)((*(uint64_t (**)(void *))(*(_QWORD *)v85 + 384))(v85) + 40);
              (*(void (**)(vImage_Buffer *__return_ptr, void *))(*(_QWORD *)v85 + 456))(&dest, v85);
              (*(void (**)(vImage_Buffer *__return_ptr, void *))(*(_QWORD *)v85 + 448))(&src, v85);
              v407 = *(_OWORD *)&src.data;
              data = dest.data;
              v397 = dest.data;
              v398 = dest.height;
              if (dest.height)
              {
                v94 = (unint64_t *)(dest.height + 8);
                do
                  v95 = __ldxr(v94);
                while (__stxr(v95 + 1, v94));
              }
              v96 = (float *)(*((_DWORD *)data + 3) * *((_DWORD *)data + 2) * *((_DWORD *)data + 4));
              *(_OWORD *)&src.data = xmmword_191A935A0;
              LODWORD(src.width) = 255;
              BYTE4(src.width) = 1;
              Espresso::quantizer::get_per_channel_scale_from_min_max((__int128 *)&src, *((Espresso::dataset_estimator::statistics_entry_t **)data + 3), v96, *((_DWORD *)data + 5), buf);
              v99 = *(_OWORD *)buf;
              memset(buf, 0, sizeof(buf));
              v100 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v99;
              if (v100)
              {
                v101 = (unint64_t *)&v100->__shared_owners_;
                do
                  v102 = __ldaxr(v101);
                while (__stlxr(v102 - 1, v101));
                if (!v102)
                {
                  ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                  std::__shared_weak_count::__release_weak(v100);
                }
              }
              v103 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v104 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if (!v105)
                {
                  ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                  std::__shared_weak_count::__release_weak(v103);
                }
              }
              v106 = (std::__shared_weak_count *)v398;
              if (v398)
              {
                v107 = (unint64_t *)(v398 + 8);
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              if (*((_BYTE *)this + 142))
              {
                v109 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
                v396 = v408;
                if (*((_QWORD *)&v408 + 1))
                {
                  v110 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                  do
                    v111 = __ldxr(v110);
                  while (__stxr(v111 + 1, v110));
                }
                min_max_scale_to_qscale(buf, (uint64_t)&v396);
                if (v109)
                {
                  v112 = (unint64_t *)&v109->__shared_owners_;
                  do
                    v113 = __ldaxr(v112);
                  while (__stlxr(v113 - 1, v112));
                  if (!v113)
                  {
                    ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
                    std::__shared_weak_count::__release_weak(v109);
                  }
                }
                v114 = v399;
                v418 = 0uLL;
                std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qscale");
                (*(void (**)(uint64_t, __int128 *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v114 + 168))(v114, &v418, &src, *(_QWORD *)(*(_QWORD *)buf + 16), 4 * *(int *)(*(_QWORD *)buf + 8), 0);
                if (SHIBYTE(src.width) < 0)
                  operator delete(src.data);
                v115 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
                if (*((_QWORD *)&v418 + 1))
                {
                  v116 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                  do
                    v117 = __ldaxr(v116);
                  while (__stlxr(v117 - 1, v116));
                  if (!v117)
                  {
                    ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
                    std::__shared_weak_count::__release_weak(v115);
                  }
                }
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v418, v92, 1, 1, 1);
                v118 = v399;
                v394 = 0;
                v395 = 0;
                std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qbias");
                v97 = (*(uint64_t (**)(uint64_t, uint64_t *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v118 + 168))(v118, &v394, &src, *(_QWORD *)(v418 + 16), 4 * *(int *)(v418 + 8), 0);
                if (SHIBYTE(src.width) < 0)
                  operator delete(src.data);
                v119 = (std::__shared_weak_count *)v395;
                if (v395)
                {
                  v120 = (unint64_t *)(v395 + 8);
                  do
                    v121 = __ldaxr(v120);
                  while (__stlxr(v121 - 1, v120));
                  if (!v121)
                  {
                    ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                    std::__shared_weak_count::__release_weak(v119);
                  }
                }
                v122 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
                if (*((_QWORD *)&v418 + 1))
                {
                  v123 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                  do
                    v124 = __ldaxr(v123);
                  while (__stlxr(v124 - 1, v123));
                  if (!v124)
                  {
                    ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                    std::__shared_weak_count::__release_weak(v122);
                  }
                }
                v125 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v126 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v127 = __ldaxr(v126);
                  while (__stlxr(v127 - 1, v126));
                  if (!v127)
                  {
                    ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                    std::__shared_weak_count::__release_weak(v125);
                  }
                }
              }
              if ((int)v92 >= 1)
              {
                v128 = *(float **)(v408 + 16);
                do
                {
                  *v128 = v19 / (float)(v18 * *v128);
                  ++v128;
                  --v92;
                }
                while (v92);
              }
              v129 = (std::__shared_weak_count *)v400;
              v393[0] = v399;
              v393[1] = v400;
              if (v400)
              {
                v130 = (unint64_t *)(v400 + 8);
                do
                  v131 = __ldxr(v130);
                while (__stxr(v131 + 1, v130));
              }
              Espresso::quantizer::quantize_conv_weights(v97, v98, v393);
              if (v129)
              {
                v132 = (unint64_t *)&v129->__shared_owners_;
                do
                  v133 = __ldaxr(v132);
                while (__stlxr(v133 - 1, v132));
                if (!v133)
                {
                  ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
                  std::__shared_weak_count::__release_weak(v129);
                }
              }
              if (*((_BYTE *)this + 142))
              {
                v391 = 0;
                v392 = 0;
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v399 + 400))(v399, &v391);
                v134 = v392;
                if (v392)
                {
                  v135 = (unint64_t *)&v392->__shared_owners_;
                  do
                    v136 = __ldaxr(v135);
                  while (__stlxr(v136 - 1, v135));
                  if (!v136)
                  {
                    ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                    std::__shared_weak_count::__release_weak(v134);
                  }
                }
              }
              v81 = (std::__shared_weak_count *)dest.height;
              if (dest.height)
              {
                v137 = (unint64_t *)(dest.height + 8);
                do
                  v83 = __ldaxr(v137);
                while (__stlxr(v83 - 1, v137));
LABEL_189:
                if (!v83)
                {
                  ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                  std::__shared_weak_count::__release_weak(v81);
                }
              }
              goto LABEL_191;
            }
            v399 = 0;
            v400 = 0;
            if (v175)
            {
              v176 = v175;
              v177 = *(_QWORD *)(v31 + 72);
              v394 = (uint64_t)v175;
              v395 = v177;
              if (v177)
              {
                v178 = (unint64_t *)(v177 + 8);
                do
                  v179 = __ldxr(v178);
                while (__stxr(v179 + 1, v178));
              }
              (*(void (**)(uint8_t *__return_ptr, void *))(*(_QWORD *)v175 + 416))(buf, v175);
              if (!*(_QWORD *)buf)
              {
                (*(void (**)(__int128 *__return_ptr, void *))(*(_QWORD *)v176 + 472))(&v418, v176);
                if (!(_QWORD)v418)
                  Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Cannot find convolution weights. The model needs to be in float32 or float16");
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(&src, (int *)(v418 + 8));
                v272 = *(_OWORD *)&src.data;
                src.data = 0;
                src.height = 0;
                v273 = *(std::__shared_weak_count **)&buf[8];
                *(_OWORD *)buf = v272;
                if (v273)
                {
                  v274 = (unint64_t *)&v273->__shared_owners_;
                  do
                    v275 = __ldaxr(v274);
                  while (__stlxr(v275 - 1, v274));
                  if (!v275)
                  {
                    ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
                    std::__shared_weak_count::__release_weak(v273);
                  }
                }
                v276 = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v277 = (unint64_t *)(src.height + 8);
                  do
                    v278 = __ldaxr(v277);
                  while (__stlxr(v278 - 1, v277));
                  if (!v278)
                  {
                    ((void (*)(std::__shared_weak_count *))v276->__on_zero_shared)(v276);
                    std::__shared_weak_count::__release_weak(v276);
                  }
                }
                v279 = *(void **)(*(_QWORD *)buf + 16);
                v280 = *(int *)(*(_QWORD *)buf + 12) * (uint64_t)*(int *)(*(_QWORD *)buf + 8);
                src.data = *(void **)(v418 + 16);
                src.height = 1;
                src.width = v280;
                src.rowBytes = 2 * v280;
                dest.data = v279;
                dest.height = 1;
                dest.width = v280;
                dest.rowBytes = 4 * v280;
                vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
                src.data = *(void **)buf;
                src.height = *(_QWORD *)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v281 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v282 = __ldxr(v281);
                  while (__stxr(v282 + 1, v281));
                }
                (*(void (**)(void *, vImage_Buffer *))(*(_QWORD *)v176 + 400))(v176, &src);
                v283 = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v284 = (unint64_t *)(src.height + 8);
                  do
                    v285 = __ldaxr(v284);
                  while (__stlxr(v285 - 1, v284));
                  if (!v285)
                  {
                    ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
                    std::__shared_weak_count::__release_weak(v283);
                  }
                }
                v286 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
                if (*((_QWORD *)&v418 + 1))
                {
                  v287 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                  do
                    v288 = __ldaxr(v287);
                  while (__stlxr(v288 - 1, v287));
                  if (!v288)
                  {
                    ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                    std::__shared_weak_count::__release_weak(v286);
                  }
                }
              }
              v180 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v181 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v182 = __ldaxr(v181);
                while (__stlxr(v182 - 1, v181));
                if (!v182)
                {
                  ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                  std::__shared_weak_count::__release_weak(v180);
                }
              }
              v183 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v176 + 384))(v176);
              (*(void (**)(vImage_Buffer *__return_ptr, void *))(*(_QWORD *)v176 + 416))(&dest, v176);
              (*(void (**)(vImage_Buffer *__return_ptr, void *))(*(_QWORD *)v176 + 408))(&src, v176);
              v407 = *(_OWORD *)&src.data;
              v184 = *(_QWORD *)this + 136;
              src.data = v412;
              if (*(int *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v184, (unsigned __int8 *)v412, (__int128 **)&src)+ 5)+ 28) > 2)
              {
                v230 = (Espresso::dataset_estimator::statistics_entry_t **)dest.data;
                v386 = dest.data;
                v387 = dest.height;
                if (dest.height)
                {
                  v231 = (unint64_t *)(dest.height + 8);
                  do
                    v232 = __ldxr(v231);
                  while (__stxr(v232 + 1, v231));
                }
                *(_OWORD *)&src.data = xmmword_191A935A0;
                LODWORD(src.width) = 255;
                BYTE4(src.width) = 1;
                Espresso::quantizer::get_per_channel_scale_from_min_max((__int128 *)&src, v230[2], (float *)*((unsigned int *)v230 + 2), *((_DWORD *)v230 + 3), buf);
                v233 = *(_OWORD *)buf;
                memset(buf, 0, sizeof(buf));
                v234 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
                v408 = v233;
                if (v234)
                {
                  v235 = (unint64_t *)&v234->__shared_owners_;
                  do
                    v236 = __ldaxr(v235);
                  while (__stlxr(v236 - 1, v235));
                  if (!v236)
                  {
                    ((void (*)(std::__shared_weak_count *))v234->__on_zero_shared)(v234);
                    std::__shared_weak_count::__release_weak(v234);
                  }
                }
                v237 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v238 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v239 = __ldaxr(v238);
                  while (__stlxr(v239 - 1, v238));
                  if (!v239)
                  {
                    ((void (*)(std::__shared_weak_count *))v237->__on_zero_shared)(v237);
                    std::__shared_weak_count::__release_weak(v237);
                  }
                }
                v192 = (std::__shared_weak_count *)v387;
                if (v387)
                {
                  v240 = (unint64_t *)(v387 + 8);
                  do
                    v194 = __ldaxr(v240);
                  while (__stlxr(v194 - 1, v240));
                  goto LABEL_334;
                }
              }
              else
              {
                v185 = (float *)(*((_DWORD *)dest.data + 3) * *((_DWORD *)dest.data + 2));
                v388 = xmmword_191A935A0;
                v389 = 255;
                v390 = 1;
                Espresso::quantizer::get_per_channel_scale_from_min_max(&v388, *((Espresso::dataset_estimator::statistics_entry_t **)dest.data + 2), v185, 1, &src);
                v188 = *(_OWORD *)&src.data;
                src.data = 0;
                src.height = 0;
                v189 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
                v408 = v188;
                if (v189)
                {
                  v190 = (unint64_t *)&v189->__shared_owners_;
                  do
                    v191 = __ldaxr(v190);
                  while (__stlxr(v191 - 1, v190));
                  if (!v191)
                  {
                    ((void (*)(std::__shared_weak_count *))v189->__on_zero_shared)(v189);
                    std::__shared_weak_count::__release_weak(v189);
                  }
                }
                v192 = (std::__shared_weak_count *)src.height;
                if (src.height)
                {
                  v193 = (unint64_t *)(src.height + 8);
                  do
                    v194 = __ldaxr(v193);
                  while (__stlxr(v194 - 1, v193));
LABEL_334:
                  if (!v194)
                  {
                    ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                    std::__shared_weak_count::__release_weak(v192);
                  }
                }
              }
              v241 = v408;
              if (*((_BYTE *)this + 142))
              {
                v242 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
                v385 = v408;
                if (*((_QWORD *)&v408 + 1))
                {
                  v243 = (unint64_t *)(*((_QWORD *)&v408 + 1) + 8);
                  do
                    v244 = __ldxr(v243);
                  while (__stxr(v244 + 1, v243));
                }
                min_max_scale_to_qscale(buf, (uint64_t)&v385);
                if (v242)
                {
                  v245 = (unint64_t *)&v242->__shared_owners_;
                  do
                    v246 = __ldaxr(v245);
                  while (__stlxr(v246 - 1, v245));
                  if (!v246)
                  {
                    ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
                    std::__shared_weak_count::__release_weak(v242);
                  }
                }
                v247 = v394;
                v418 = 0uLL;
                std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qscale");
                (*(void (**)(uint64_t, __int128 *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v247 + 168))(v247, &v418, &src, *(_QWORD *)(*(_QWORD *)buf + 16), 4 * *(int *)(*(_QWORD *)buf + 8), 0);
                if (SHIBYTE(src.width) < 0)
                  operator delete(src.data);
                v248 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
                if (*((_QWORD *)&v418 + 1))
                {
                  v249 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                  do
                    v250 = __ldaxr(v249);
                  while (__stlxr(v250 - 1, v249));
                  if (!v250)
                  {
                    ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                    std::__shared_weak_count::__release_weak(v248);
                  }
                }
                std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v418, v183, 1, 1, 1);
                v251 = v394;
                memset(v384, 0, sizeof(v384));
                std::string::basic_string[abi:ne180100]<0>(&src, "per_ch_qbias");
                v186 = (*(uint64_t (**)(uint64_t, uint8_t *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v251 + 168))(v251, v384, &src, *(_QWORD *)(v418 + 16), 4 * *(int *)(v418 + 8), 0);
                if (SHIBYTE(src.width) < 0)
                  operator delete(src.data);
                v252 = *(std::__shared_weak_count **)&v384[8];
                if (*(_QWORD *)&v384[8])
                {
                  v253 = (unint64_t *)(*(_QWORD *)&v384[8] + 8);
                  do
                    v254 = __ldaxr(v253);
                  while (__stlxr(v254 - 1, v253));
                  if (!v254)
                  {
                    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
                    std::__shared_weak_count::__release_weak(v252);
                  }
                }
                v255 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
                if (*((_QWORD *)&v418 + 1))
                {
                  v256 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                  do
                    v257 = __ldaxr(v256);
                  while (__stlxr(v257 - 1, v256));
                  if (!v257)
                  {
                    ((void (*)(std::__shared_weak_count *))v255->__on_zero_shared)(v255);
                    std::__shared_weak_count::__release_weak(v255);
                  }
                }
                v258 = *(std::__shared_weak_count **)&buf[8];
                if (*(_QWORD *)&buf[8])
                {
                  v259 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                  do
                    v260 = __ldaxr(v259);
                  while (__stlxr(v260 - 1, v259));
                  if (!v260)
                  {
                    ((void (*)(std::__shared_weak_count *))v258->__on_zero_shared)(v258);
                    std::__shared_weak_count::__release_weak(v258);
                  }
                }
                v241 = v408;
              }
              v261 = *(unsigned int *)(v241 + 8);
              if ((_DWORD)v261)
              {
                v262 = *(float **)(v241 + 16);
                do
                {
                  *v262 = v19 / (float)(v18 * *v262);
                  ++v262;
                  --v261;
                }
                while (v261);
              }
              v263 = (std::__shared_weak_count *)v395;
              v383[0] = v394;
              v383[1] = v395;
              if (v395)
              {
                v264 = (unint64_t *)(v395 + 8);
                do
                  v265 = __ldxr(v264);
                while (__stxr(v265 + 1, v264));
              }
              Espresso::quantizer::quantize_inner_product_weights(v186, v187, v383);
              if (v263)
              {
                v266 = (unint64_t *)&v263->__shared_owners_;
                do
                  v267 = __ldaxr(v266);
                while (__stlxr(v267 - 1, v266));
                if (!v267)
                {
                  ((void (*)(std::__shared_weak_count *))v263->__on_zero_shared)(v263);
                  std::__shared_weak_count::__release_weak(v263);
                }
              }
              if (*((_BYTE *)this + 142))
              {
                v381 = 0;
                v382 = 0;
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v394 + 400))(v394, &v381);
                v268 = v382;
                if (v382)
                {
                  v269 = (unint64_t *)&v382->__shared_owners_;
                  do
                    v270 = __ldaxr(v269);
                  while (__stlxr(v270 - 1, v269));
                  if (!v270)
                  {
                    ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                    std::__shared_weak_count::__release_weak(v268);
                  }
                }
              }
              v78 = (std::__shared_weak_count *)dest.height;
              if (dest.height)
              {
                v271 = (unint64_t *)(dest.height + 8);
                do
                  v80 = __ldaxr(v271);
                while (__stlxr(v80 - 1, v271));
LABEL_102:
                if (!v80)
                {
                  ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
                  std::__shared_weak_count::__release_weak(v78);
                }
              }
              goto LABEL_104;
            }
            v394 = 0;
            v395 = 0;
            if (v213)
            {
              v214 = *(_QWORD *)(v31 + 72);
              src.data = v213;
              src.height = v214;
              if (v214)
              {
                v215 = (unint64_t *)(v214 + 8);
                do
                  v216 = __ldxr(v215);
                while (__stxr(v216 + 1, v215));
              }
              v217 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v213 + 320))(v213);
              v218 = *v217;
              v219 = *((float *)v217 + 2);
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&dest, 1, 1, 1, 1);
              v222 = *(_OWORD *)&dest.data;
              dest.data = 0;
              dest.height = 0;
              v223 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v222;
              if (v223)
              {
                v224 = (unint64_t *)&v223->__shared_owners_;
                do
                  v225 = __ldaxr(v224);
                while (__stlxr(v225 - 1, v224));
                if (!v225)
                {
                  ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
                  std::__shared_weak_count::__release_weak(v223);
                }
              }
              v226 = (std::__shared_weak_count *)dest.height;
              if (dest.height)
              {
                v227 = (unint64_t *)(dest.height + 8);
                do
                  v228 = __ldaxr(v227);
                while (__stlxr(v228 - 1, v227));
                if (!v228)
                {
                  ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
                  std::__shared_weak_count::__release_weak(v226);
                }
              }
              if (v218 <= 99)
              {
                switch(v218)
                {
                  case 22:
                  case 23:
                    goto LABEL_317;
                  case 24:
                  case 25:
                  case 29:
                  case 30:
                  case 31:
                  case 32:
                  case 34:
                    goto LABEL_438;
                  case 26:
                  case 27:
                  case 35:
                  case 36:
                  case 37:
                    goto LABEL_436;
                  case 28:
                    dest.data = v412;
                    v352 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                    dest.data = (char *)v412 + 24;
                    v336 = v352
                         * *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, (_QWORD *)v412 + 3, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                    goto LABEL_507;
                  case 33:
LABEL_456:
                    if ((char *)v413 - (char *)v412 != 48)
                      goto LABEL_438;
                    dest.data = v412;
                    v317 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                    dest.data = (char *)v412 + 24;
                    v318 = (float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, (_QWORD *)v412 + 3, (uint64_t)&std::piecewise_construct, (__int128 **)&dest);
                    if ((float)(1.0 / sqrtf(v317)) == (float)(1.0 / sqrtf(v318[14])))
                      goto LABEL_438;
                    Espresso::espresso_os_log_subsystem((Espresso *)v318, v319);
                    v304 = objc_claimAutoreleasedReturnValue();
                    if (!os_log_type_enabled(v304, OS_LOG_TYPE_DEBUG))
                      goto LABEL_437;
                    LOWORD(dest.data) = 0;
                    v320 = v304;
                    v321 = "Detected Elementwise-Add/Sub with inputs having different scales";
                    break;
                  default:
                    switch(v218)
                    {
                      case 0:
                        goto LABEL_456;
                      case 1:
                        v355 = 0xAAAAAAAAAAAAAAABLL * (((char *)v413 - (char *)v412) >> 3);
                        if (v355 == 1)
                        {
                          dest.data = v412;
                          v18 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                        }
                        else if (v355 == 2)
                        {
                          dest.data = v412;
                          v356 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                          dest.data = (char *)v412 + 24;
                          v18 = v356
                              * *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, (_QWORD *)v412 + 3, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                        }
                        goto LABEL_438;
                      case 10:
                        dest.data = v412;
                        v353 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                        break;
                      case 11:
                        dest.data = v412;
                        v336 = sqrtf(*((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14));
                        goto LABEL_507;
                      case 12:
                        dest.data = v412;
                        v353 = sqrtf(*((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14));
                        break;
                      case 13:
                        dest.data = v412;
                        v354 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest);
                        v336 = powf(*((float *)v354 + 14), v219);
                        goto LABEL_507;
                      default:
                        goto LABEL_438;
                    }
                    v336 = 1.0 / v353;
                    goto LABEL_507;
                }
              }
              else
              {
                v229 = v218 - 100;
                if ((v218 - 100) > 0x1E)
                  goto LABEL_477;
                if (((1 << v229) & 0x7FE60000) == 0)
                {
                  if (((1 << v229) & 0x2CF9) != 0)
                  {
LABEL_317:
                    is_valid_multiple_inputs_scale(&v412, (uint64_t **)this + 28);
                    goto LABEL_438;
                  }
                  if (v218 == 102)
                  {
LABEL_478:
                    dest.data = v412;
                    v335 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
                    dest.data = (char *)v412 + 24;
                    v336 = v335
                         / *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, (_QWORD *)v412 + 3, (uint64_t)&std::piecewise_construct, (__int128 **)&dest)+ 14);
LABEL_507:
                    v305 = v19 / v336;
                  }
                  else
                  {
LABEL_477:
                    if (v218 == 1021)
                      goto LABEL_478;
LABEL_438:
                    v305 = v19 / v18;
                  }
                  **(float **)(v408 + 16) = v305;
LABEL_99:
                  v78 = (std::__shared_weak_count *)src.height;
                  if (src.height)
                  {
                    v79 = (unint64_t *)(src.height + 8);
                    do
                      v80 = __ldaxr(v79);
                    while (__stlxr(v80 - 1, v79));
                    goto LABEL_102;
                  }
LABEL_104:
                  v81 = (std::__shared_weak_count *)v395;
                  if (v395)
                  {
                    v82 = (unint64_t *)(v395 + 8);
                    do
                      v83 = __ldaxr(v82);
                    while (__stlxr(v83 - 1, v82));
                    goto LABEL_189;
                  }
LABEL_191:
                  v66 = (std::__shared_weak_count *)v400;
                  if (v400)
                  {
                    v138 = (unint64_t *)(v400 + 8);
                    do
                      v68 = __ldaxr(v138);
                    while (__stlxr(v68 - 1, v138));
                    goto LABEL_194;
                  }
LABEL_196:
                  v139 = (std::__shared_weak_count *)v406;
                  if (v406)
                  {
                    v140 = (unint64_t *)(v406 + 8);
                    do
                      v141 = __ldaxr(v140);
                    while (__stlxr(v141 - 1, v140));
                    if (!v141)
                    {
                      ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
                      std::__shared_weak_count::__release_weak(v139);
                    }
                  }
                  v142 = v415;
                  dest.data = 0;
                  dest.height = 0;
                  std::string::basic_string[abi:ne180100]<0>(&src, "post_scale");
                  (*(void (**)(uint64_t, vImage_Buffer *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v142 + 168))(v142, &dest, &src, *(_QWORD *)(v408 + 16), 4 * *(int *)(v408 + 8), 0);
                  if (SHIBYTE(src.width) < 0)
                    operator delete(src.data);
                  v143 = (std::__shared_weak_count *)dest.height;
                  if (dest.height)
                  {
                    v144 = (unint64_t *)(dest.height + 8);
                    do
                      v145 = __ldaxr(v144);
                    while (__stlxr(v145 - 1, v144));
                    if (!v145)
                    {
                      ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
                      std::__shared_weak_count::__release_weak(v143);
                    }
                  }
                  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&dest, 1, 1, 1, 1);
                  v146 = (int *)dest.data;
                  **((float **)dest.data + 2) = v19;
                  v147 = v415;
                  memset(buf, 0, sizeof(buf));
                  std::string::basic_string[abi:ne180100]<0>(&src, "hx_extra_f");
                  (*(void (**)(uint64_t, uint8_t *, vImage_Buffer *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v147 + 168))(v147, buf, &src, *((_QWORD *)v146 + 2), 4 * v146[2], 0);
                  v5 = v377;
                  if (SHIBYTE(src.width) < 0)
                    operator delete(src.data);
                  v148 = *(std::__shared_weak_count **)&buf[8];
                  if (*(_QWORD *)&buf[8])
                  {
                    v149 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                    do
                      v150 = __ldaxr(v149);
                    while (__stlxr(v150 - 1, v149));
                    if (!v150)
                    {
                      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
                      std::__shared_weak_count::__release_weak(v148);
                    }
                  }
                  v151 = (std::__shared_weak_count *)dest.height;
                  if (dest.height)
                  {
                    v152 = (unint64_t *)(dest.height + 8);
                    do
                      v153 = __ldaxr(v152);
                    while (__stlxr(v153 - 1, v152));
                    if (!v153)
                    {
                      ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                      std::__shared_weak_count::__release_weak(v151);
                    }
                  }
                  v154 = (std::__shared_weak_count *)*((_QWORD *)&v407 + 1);
                  if (*((_QWORD *)&v407 + 1))
                  {
                    v155 = (unint64_t *)(*((_QWORD *)&v407 + 1) + 8);
                    do
                      v156 = __ldaxr(v155);
                    while (__stlxr(v156 - 1, v155));
                    if (!v156)
                    {
                      ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
                      std::__shared_weak_count::__release_weak(v154);
                    }
                  }
                  goto LABEL_13;
                }
LABEL_436:
                Espresso::espresso_os_log_subsystem(v220, v221);
                v304 = objc_claimAutoreleasedReturnValue();
                if (!os_log_type_enabled(v304, OS_LOG_TYPE_DEBUG))
                {
LABEL_437:

                  goto LABEL_438;
                }
                LOWORD(dest.data) = 0;
                v320 = v304;
                v321 = "Detected Elementwise with non-linear operations not supported for quantization. Please check precision";
              }
              _os_log_debug_impl(&dword_190DAF000, v320, OS_LOG_TYPE_DEBUG, v321, (uint8_t *)&dest, 2u);
              goto LABEL_437;
            }
            src.data = 0;
            src.height = 0;
            if (v289)
            {
              v290 = *(_QWORD *)(v31 + 72);
              dest.data = v289;
              dest.height = v290;
              if (v290)
              {
                v291 = (unint64_t *)(v290 + 8);
                do
                  v292 = __ldxr(v291);
                while (__stxr(v292 + 1, v291));
              }
              v293 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v289 + 384))(v289);
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(buf, 1, 1, 1, 1);
              v296 = *(_OWORD *)buf;
              memset(buf, 0, sizeof(buf));
              v297 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v296;
              if (v297)
              {
                v298 = (unint64_t *)&v297->__shared_owners_;
                do
                  v299 = __ldaxr(v298);
                while (__stlxr(v299 - 1, v298));
                if (!v299)
                {
                  ((void (*)(std::__shared_weak_count *))v297->__on_zero_shared)(v297);
                  std::__shared_weak_count::__release_weak(v297);
                }
              }
              v300 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v301 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v302 = __ldaxr(v301);
                while (__stlxr(v302 - 1, v301));
                if (!v302)
                {
                  ((void (*)(std::__shared_weak_count *))v300->__on_zero_shared)(v300);
                  std::__shared_weak_count::__release_weak(v300);
                }
              }
              if (v293 <= 8 && ((1 << v293) & 0x12A) != 0)
              {
                Espresso::espresso_os_log_subsystem(v294, v295);
                v303 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v303, OS_LOG_TYPE_DEBUG))
                {
                  *(_WORD *)buf = 0;
                  _os_log_debug_impl(&dword_190DAF000, v303, OS_LOG_TYPE_DEBUG, "Detected Activation with non-linear modes not supported for quantization. Please check precision", buf, 2u);
                }

              }
              **(float **)(v408 + 16) = v19 / v18;
LABEL_94:
              v75 = (std::__shared_weak_count *)dest.height;
              if (dest.height)
              {
                v76 = (unint64_t *)(dest.height + 8);
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
              goto LABEL_99;
            }
            dest.data = 0;
            dest.height = 0;
            if (v306)
            {
              v307 = *(_QWORD *)(v31 + 72);
              *(_QWORD *)buf = v306;
              *(_QWORD *)&buf[8] = v307;
              if (v307)
              {
                v308 = (unint64_t *)(v307 + 8);
                do
                  v309 = __ldxr(v308);
                while (__stxr(v309 + 1, v308));
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v418, 1, 1, 1, 1);
              v310 = v418;
              v418 = 0uLL;
              v311 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v310;
              if (v311)
              {
                v312 = (unint64_t *)&v311->__shared_owners_;
                do
                  v313 = __ldaxr(v312);
                while (__stlxr(v313 - 1, v312));
                if (!v313)
                {
                  ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                  std::__shared_weak_count::__release_weak(v311);
                }
              }
              v314 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
              if (*((_QWORD *)&v418 + 1))
              {
                v315 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                do
                  v316 = __ldaxr(v315);
                while (__stlxr(v316 - 1, v315));
                if (!v316)
                {
                  ((void (*)(std::__shared_weak_count *))v314->__on_zero_shared)(v314);
                  std::__shared_weak_count::__release_weak(v314);
                }
              }
              is_valid_multiple_inputs_scale(&v412, (uint64_t **)this + 28);
              **(float **)(v408 + 16) = v19 / v18;
LABEL_89:
              v72 = *(std::__shared_weak_count **)&buf[8];
              if (*(_QWORD *)&buf[8])
              {
                v73 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
                do
                  v74 = __ldaxr(v73);
                while (__stlxr(v74 - 1, v73));
                if (!v74)
                {
                  ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                  std::__shared_weak_count::__release_weak(v72);
                }
              }
              goto LABEL_94;
            }
            memset(buf, 0, sizeof(buf));
            if (v322)
            {
              v324 = *(_QWORD *)(v31 + 72);
              *(_QWORD *)&v418 = v322;
              *((_QWORD *)&v418 + 1) = v324;
              if (v324)
              {
                v325 = (unint64_t *)(v324 + 8);
                do
                  v326 = __ldxr(v325);
                while (__stxr(v326 + 1, v325));
              }
              Espresso::espresso_os_log_subsystem(v322, v323);
              v327 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v327, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)v384 = 0;
                _os_log_debug_impl(&dword_190DAF000, v327, OS_LOG_TYPE_DEBUG, "Detected softmax kernel not supported for quantization. Please check precision", v384, 2u);
              }

              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v384, 1, 1, 1, 1);
              v328 = *(_OWORD *)v384;
              memset(v384, 0, sizeof(v384));
              v329 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v328;
              if (v329)
              {
                v330 = (unint64_t *)&v329->__shared_owners_;
                do
                  v331 = __ldaxr(v330);
                while (__stlxr(v331 - 1, v330));
                if (!v331)
                {
                  ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                  std::__shared_weak_count::__release_weak(v329);
                }
              }
              v332 = *(std::__shared_weak_count **)&v384[8];
              if (*(_QWORD *)&v384[8])
              {
                v333 = (unint64_t *)(*(_QWORD *)&v384[8] + 8);
                do
                  v334 = __ldaxr(v333);
                while (__stlxr(v334 - 1, v333));
                if (!v334)
                {
                  ((void (*)(std::__shared_weak_count *))v332->__on_zero_shared)(v332);
                  std::__shared_weak_count::__release_weak(v332);
                }
              }
LABEL_83:
              **(float **)(v408 + 16) = v19 / v18;
LABEL_84:
              v69 = (std::__shared_weak_count *)*((_QWORD *)&v418 + 1);
              if (*((_QWORD *)&v418 + 1))
              {
                v70 = (unint64_t *)(*((_QWORD *)&v418 + 1) + 8);
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                  std::__shared_weak_count::__release_weak(v69);
                }
              }
              goto LABEL_89;
            }
            v418 = 0uLL;
            if (v337)
            {
              v339 = *(std::__shared_weak_count **)(v31 + 72);
              *(_QWORD *)v384 = v337;
              *(_QWORD *)&v384[8] = v339;
              if (v339)
              {
                v340 = (unint64_t *)&v339->__shared_owners_;
                do
                  v341 = __ldxr(v340);
                while (__stxr(v341 + 1, v340));
              }
              Espresso::espresso_os_log_subsystem(v337, v338);
              v342 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v342, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)v380 = 0;
                _os_log_debug_impl(&dword_190DAF000, v342, OS_LOG_TYPE_DEBUG, "Detected softmax_nd kernel not supported for quantization. Please check precision", v380, 2u);
              }

              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(v380, 1, 1, 1, 1);
              v343 = *(_OWORD *)v380;
              memset(v380, 0, sizeof(v380));
              v344 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v343;
              if (v344)
              {
                v345 = (unint64_t *)&v344->__shared_owners_;
                do
                  v346 = __ldaxr(v345);
                while (__stlxr(v346 - 1, v345));
                if (!v346)
                {
                  ((void (*)(std::__shared_weak_count *))v344->__on_zero_shared)(v344);
                  std::__shared_weak_count::__release_weak(v344);
                }
              }
              v347 = *(std::__shared_weak_count **)&v380[8];
              if (*(_QWORD *)&v380[8])
              {
                v348 = (unint64_t *)(*(_QWORD *)&v380[8] + 8);
                do
                  v349 = __ldaxr(v348);
                while (__stlxr(v349 - 1, v348));
                if (!v349)
                {
                  ((void (*)(std::__shared_weak_count *))v347->__on_zero_shared)(v347);
                  std::__shared_weak_count::__release_weak(v347);
                }
              }
              **(float **)(v408 + 16) = v19 / v18;
              if (!v339)
                goto LABEL_84;
              v350 = (unint64_t *)&v339->__shared_owners_;
              do
                v351 = __ldaxr(v350);
              while (__stlxr(v351 - 1, v350));
              goto LABEL_528;
            }
            memset(v384, 0, sizeof(v384));
            if (v357)
            {
              v358 = *(_QWORD *)(v31 + 72);
              *(_QWORD *)v380 = v357;
              *(_QWORD *)&v380[8] = v358;
              if (v358)
              {
                v359 = (unint64_t *)(v358 + 8);
                do
                  v360 = __ldxr(v359);
                while (__stxr(v360 + 1, v359));
              }
              std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v379, 1, 1, 1, 1);
              v361 = v379;
              v379 = 0uLL;
              v362 = (std::__shared_weak_count *)*((_QWORD *)&v408 + 1);
              v408 = v361;
              if (v362)
              {
                v363 = (unint64_t *)&v362->__shared_owners_;
                do
                  v364 = __ldaxr(v363);
                while (__stlxr(v364 - 1, v363));
                if (!v364)
                {
                  ((void (*)(std::__shared_weak_count *))v362->__on_zero_shared)(v362);
                  std::__shared_weak_count::__release_weak(v362);
                }
              }
              v365 = (std::__shared_weak_count *)*((_QWORD *)&v379 + 1);
              if (*((_QWORD *)&v379 + 1))
              {
                v366 = (unint64_t *)(*((_QWORD *)&v379 + 1) + 8);
                do
                  v367 = __ldaxr(v366);
                while (__stlxr(v367 - 1, v366));
                if (!v367)
                {
                  ((void (*)(std::__shared_weak_count *))v365->__on_zero_shared)(v365);
                  std::__shared_weak_count::__release_weak(v365);
                }
              }
              *(_QWORD *)&v379 = v412;
              v368 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, v412, (uint64_t)&std::piecewise_construct, (__int128 **)&v379)+ 14);
              *(_QWORD *)&v379 = (char *)v412 + 24;
              v369 = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 28, (_QWORD *)v412 + 3, (uint64_t)&std::piecewise_construct, (__int128 **)&v379);
              v339 = *(std::__shared_weak_count **)&v380[8];
              **(float **)(v408 + 16) = v19 / (float)(v368 * *((float *)v369 + 14));
              if (!v339)
                goto LABEL_84;
              v370 = (unint64_t *)&v339->__shared_owners_;
              do
                v351 = __ldaxr(v370);
              while (__stlxr(v351 - 1, v370));
LABEL_528:
              if (!v351)
              {
                ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                std::__shared_weak_count::__release_weak(v339);
              }
              goto LABEL_84;
            }
          }
          else
          {
            v405 = 0;
            v406 = 0;
            v399 = 0;
            v400 = 0;
            v394 = 0;
            v395 = 0;
            src.data = 0;
            src.height = 0;
            dest.data = 0;
            dest.height = 0;
            memset(buf, 0, sizeof(buf));
            v418 = 0uLL;
            memset(v384, 0, sizeof(v384));
          }
          memset(v380, 0, sizeof(v380));
          Espresso::blob<float,1>::make(&v379, 1);
          std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&v408, &v379);
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v379);
          goto LABEL_83;
        }
        Espresso::espresso_os_log_subsystem(v16, (const char *)v412);
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(src.data) = 0;
          v24 = v23;
          v25 = "No bottom";
          goto LABEL_252;
        }
      }
      else
      {
        Espresso::espresso_os_log_subsystem(v16, v17);
        v23 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          LOWORD(src.data) = 0;
          v24 = v23;
          v25 = "No top";
LABEL_252:
          _os_log_error_impl(&dword_190DAF000, v24, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&src, 2u);
        }
      }

LABEL_23:
      src.data = &v409;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&src);
      src.data = &v412;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&src);
      if (v9)
      {
        v26 = (unint64_t *)&v9->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v28 = (std::__shared_weak_count *)*((_QWORD *)&v417 + 1);
      if (*((_QWORD *)&v417 + 1))
      {
        v29 = (unint64_t *)(*((_QWORD *)&v417 + 1) + 8);
        do
          v30 = __ldaxr(v29);
        while (__stlxr(v30 - 1, v29));
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      ++v4;
      v2 = *(_QWORD *)this;
      v3 = *(_QWORD *)(*(_QWORD *)this + 32);
    }
    while (v4 < (*(_QWORD *)(*(_QWORD *)this + 40) - v3) >> 4);
  }
  v371 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  v378[0] = v2;
  v378[1] = v371;
  if (v371)
  {
    v372 = (unint64_t *)&v371->__shared_owners_;
    do
      v373 = __ldxr(v372);
    while (__stxr(v373 + 1, v372));
  }
  Espresso::convert_weights_to_fp16((uint64_t)v378);
  if (v371)
  {
    v374 = (unint64_t *)&v371->__shared_owners_;
    do
      v375 = __ldaxr(v374);
    while (__stlxr(v375 - 1, v374));
    if (!v375)
    {
      ((void (*)(std::__shared_weak_count *))v371->__on_zero_shared)(v371);
      std::__shared_weak_count::__release_weak(v371);
    }
  }
}

void sub_19141487C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,char a55,uint64_t a56,void **a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v63 - 224);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v63 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v63 - 192);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v63 - 160);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a43);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a51);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a55);
  *(_QWORD *)(v63 - 224) = &a57;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v63 - 224));
  a57 = (void **)&a60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a57);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v63 - 256);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  void *v10;

  v4 = operator new(0x60uLL);
  v5 = v4;
  v6 = 0;
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DBEB90;
  v4[3] = &off_1E2DA1150;
  v7 = (char *)(v4 + 3);
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  v8 = 1;
  do
  {
    v9 = *(int *)(a2 + v6);
    *(_DWORD *)((char *)v4 + v6 + 32) = v9;
    v8 *= v9;
    v6 += 4;
  }
  while (v6 != 16);
  v10 = Espresso::kern_alloc_uninitialized((Espresso *)v8);
  bzero(v10, v8);
  v5[6] = v10;
  *((_BYTE *)v5 + 56) = 1;
  *a1 = v7;
  a1[1] = v5;
}

void sub_191414D1C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3].__shared_owners_);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<float,4>::transpose(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _BYTE v34[32];
  _BYTE v35[16];
  uint64_t v36;

  v6 = 0;
  v36 = *MEMORY[0x1E0C80C00];
  do
  {
    *(_DWORD *)&v35[v6] = *(_DWORD *)(a2 + 4 * *(int *)(a3 + v6) + 8);
    v6 += 4;
  }
  while (v6 != 16);
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int const*&,void>(a1, (uint64_t)v35);
  v7 = 0;
  v31 = 0u;
  v32 = 0u;
  v8 = 1;
  do
  {
    *((_QWORD *)&v31 + v7) = (int)v8;
    v8 *= *(int *)(a2 + 8 + 4 * v7++);
  }
  while (v7 != 4);
  v9 = 0;
  v33 = v8;
  v28 = 0u;
  v29 = 0u;
  v10 = *a1;
  v11 = *a1 + 8;
  v12 = 1;
  do
  {
    *((_QWORD *)&v28 + v9) = (int)v12;
    v12 *= *(int *)(v11 + 4 * v9++);
  }
  while (v9 != 4);
  v13 = 0;
  v30 = v12;
  v14 = *(int *)(a2 + 8);
  while (1)
  {
    v15 = 0;
    v16 = v14;
    do
    {
      result = *(int *)(a2 + 12 + v15);
      v16 *= result;
      v15 += 4;
    }
    while (v15 != 12);
    if (v16 <= v13)
      break;
    v26[0] = v31;
    v26[1] = v32;
    v27 = v33;
    v18 = 3;
    LODWORD(v19) = v13;
    do
    {
      v20 = *((_QWORD *)v26 + v18);
      *(_DWORD *)&v34[4 * v18 + 16] = (int)v19 / v20;
      v19 = (int)v19 % v20;
      --v18;
    }
    while (v18 != -1);
    for (i = 0; i != 16; i += 4)
      *(_DWORD *)&v34[i] = *(_DWORD *)&v34[4 * *(int *)(a3 + i) + 16];
    v22 = 0;
    v23 = 0;
    v24[0] = v28;
    v24[1] = v29;
    v25 = v30;
    do
    {
      v23 += *((_QWORD *)v24 + v22) * *(int *)&v34[4 * v22];
      ++v22;
    }
    while (v22 != 4);
    *(_DWORD *)(*(_QWORD *)(v10 + 24) + 4 * v23) = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v13++);
  }
  return result;
}

void Espresso::quantizer::quantize_deconv_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46[2];
  uint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _OWORD v53[2];
  uint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  _BYTE v63[32];
  _BYTE v64[16];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 456))(&v51);
  Espresso::blob<float,4>::transpose(&v49, v51, (uint64_t)dword_191A93A40);
  v4 = (std::__shared_weak_count *)v50;
  v46[0] = v49;
  v46[1] = v50;
  if (v50)
  {
    v5 = (unint64_t *)(v50 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  quantize_S8_w_tensor<4>(&v47, v46);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = 0;
  v10 = v47;
  do
  {
    *(_DWORD *)&v64[v9 * 4] = *(_DWORD *)(v10 + 4 * dword_191A93A40[v9] + 8);
    ++v9;
  }
  while (v9 != 4);
  std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(&v44, (uint64_t)v64);
  v11 = 0;
  v60 = 0u;
  v61 = 0u;
  v12 = 1;
  do
  {
    *((_QWORD *)&v60 + v11) = (int)v12;
    v12 *= *(int *)(v10 + 8 + 4 * v11++);
  }
  while (v11 != 4);
  v13 = 0;
  v62 = v12;
  v57 = 0u;
  v58 = 0u;
  v14 = v44;
  v15 = v44 + 8;
  v16 = 1;
  do
  {
    *((_QWORD *)&v57 + v13) = (int)v16;
    v16 *= *(int *)(v15 + 4 * v13++);
  }
  while (v13 != 4);
  v17 = 0;
  v59 = v16;
  while (1)
  {
    v18 = 0;
    v19 = *(int *)(v10 + 8);
    do
    {
      v19 *= *(int *)(v10 + 12 + v18);
      v18 += 4;
    }
    while (v18 != 12);
    if (v19 <= v17)
      break;
    v55[0] = v60;
    v55[1] = v61;
    v56 = v62;
    v20 = 3;
    LODWORD(v21) = v17;
    do
    {
      v22 = *((_QWORD *)v55 + v20);
      *(_DWORD *)&v63[4 * v20 + 16] = (int)v21 / v22;
      v21 = (int)v21 % v22;
      --v20;
    }
    while (v20 != -1);
    for (i = 0; i != 4; ++i)
      *(_DWORD *)&v63[i * 4] = *(_DWORD *)&v63[4 * dword_191A93A40[i] + 16];
    v24 = 0;
    v25 = 0;
    v53[0] = v57;
    v53[1] = v58;
    v54 = v59;
    do
    {
      v25 += *((_QWORD *)v53 + v24) * *(int *)&v63[4 * v24];
      ++v24;
    }
    while (v24 != 4);
    *(_BYTE *)(*(_QWORD *)(v14 + 24) + v25) = *(_BYTE *)(*(_QWORD *)(v10 + 24) + v17++);
  }
  v26 = *a3;
  v57 = 0uLL;
  std::string::basic_string[abi:ne180100]<0>(&v60, "W_S8");
  v27 = 0;
  v28 = *(int *)(v14 + 8);
  do
  {
    v28 *= *(int *)(v14 + 12 + v27);
    v27 += 4;
  }
  while (v27 != 12);
  (*(void (**)(uint64_t, __int128 *, __int128 *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v26 + 168))(v26, &v57, &v60, *(_QWORD *)(v14 + 24), v28, 0);
  if (SBYTE7(v61) < 0)
    operator delete((void *)v60);
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v45;
  if (v45)
  {
    v33 = (unint64_t *)&v45->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)v50;
  if (v50)
  {
    v39 = (unint64_t *)(v50 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v52;
  if (v52)
  {
    v42 = (unint64_t *)&v52->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_191415314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  if (*(char *)(v31 - 121) < 0)
    operator delete(*(void **)(v31 - 144));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_191415380()
{
  JUMPOUT(0x191415378);
}

void min_max_scale_to_qscale(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  float *v5;
  float *v6;
  float v7;

  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a1, *(_DWORD *)(*(_QWORD *)a2 + 8), 1, 1, 1);
  v4 = *(int *)(*(_QWORD *)a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = *(float **)(*(_QWORD *)a2 + 16);
    v6 = *(float **)(*a1 + 16);
    do
    {
      v7 = *v5++;
      *v6++ = 1.0 / v7;
      --v4;
    }
    while (v4);
  }
}

void Espresso::quantizer::quantize_conv_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p[2];
  char v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25[2];
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 456))(&v28);
  v4 = (std::__shared_weak_count *)v29;
  v25[0] = v28;
  v25[1] = v29;
  if (v29)
  {
    v5 = (unint64_t *)(v29 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  quantize_S8_w_tensor<4>(&v26, v25);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v9 = *a3;
  v23 = 0;
  v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "W_S8");
  v10 = 0;
  v11 = *(int *)(v26 + 8);
  do
  {
    v11 *= *(int *)(v26 + 12 + v10);
    v10 += 4;
  }
  while (v10 != 12);
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v9 + 168))(v9, &v23, __p, *(_QWORD *)(v26 + 24), v11, 0);
  if (v22 < 0)
    operator delete(__p[0]);
  v12 = v24;
  if (v24)
  {
    v13 = (unint64_t *)&v24->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v27;
  if (v27)
  {
    v16 = (unint64_t *)&v27->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)v29;
  if (v29)
  {
    v19 = (unint64_t *)(v29 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_19141559C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v18 - 32);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::quantize_inner_product_weights(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  int v9;
  int v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  Espresso *v15;
  const Espresso::q_target_traits *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  char *v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *__p[2];
  int v38;
  char v39;
  char v40;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a3 + 416))(&v35);
  v5 = v35;
  v4 = v36;
  v31 = v35;
  v32 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = (char *)operator new(0x58uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_1E2DBEB58;
  *((_QWORD *)v8 + 3) = &off_1E2DA1130;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  v9 = *(_DWORD *)(v5 + 8);
  *((_DWORD *)v8 + 8) = v9;
  v10 = *(_DWORD *)(v5 + 12);
  *((_DWORD *)v8 + 9) = v10;
  v11 = v10 * (uint64_t)v9;
  v12 = Espresso::kern_alloc_uninitialized((Espresso *)v11);
  bzero(v12, v11);
  *((_QWORD *)v8 + 5) = v12;
  v8[48] = 1;
  v33 = v8 + 24;
  v34 = (std::__shared_weak_count *)v8;
  v13 = *(int *)(v5 + 12);
  v14 = (int)v13 * (uint64_t)*(int *)(v5 + 8);
  v15 = *(Espresso **)(v5 + 16);
  *(_OWORD *)__p = xmmword_191A935A0;
  v38 = 255;
  v39 = 1;
  Espresso::quantize_per_ch(v15, (float *)v12, v14, v14 / v13, (int *)__p, v16);
  if (v4)
  {
    v17 = (unint64_t *)&v4->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = *a3;
  v29 = 0;
  v30 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "W_S8");
  (*(void (**)(uint64_t, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v19 + 168))(v19, &v29, __p, *((_QWORD *)v33 + 2), *((int *)v33 + 3) * (uint64_t)*((int *)v33 + 2), 0);
  if (v40 < 0)
    operator delete(__p[0]);
  v20 = v30;
  if (v30)
  {
    v21 = (unint64_t *)&v30->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v34;
  if (v34)
  {
    v24 = (unint64_t *)&v34->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v36;
  if (v36)
  {
    v27 = (unint64_t *)&v36->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_191415830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

char *is_valid_multiple_inputs_scale(__int128 **a1, uint64_t **a2)
{
  __int128 *v3;
  float v5;
  int v6;
  char *result;
  __int128 *v8;
  __int128 *v9;
  int v10;
  char v11;
  BOOL v12;
  __int128 *v13;

  v3 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3) <= 1)
    Espresso::throw_exception_selector<Espresso::invalid_argument_error>("Expect two inputs, only detected one.");
  v13 = *a1;
  v5 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v3, (uint64_t)&std::piecewise_construct, &v13)+ 14);
  v13 = *a1;
  v6 = *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v13, (uint64_t)&std::piecewise_construct, &v13)+ 16);
  v13 = *a1;
  result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v13, (uint64_t)&std::piecewise_construct, &v13);
  v8 = *a1;
  v9 = a1[1];
  if (*a1 != v9)
  {
    v10 = *((_DWORD *)result + 15);
    v11 = 1;
    do
    {
      v13 = v8;
      result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v8, (uint64_t)&std::piecewise_construct, &v13);
      if (v5 == *((float *)result + 14)
        && (v13 = v8,
            result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v8, (uint64_t)&std::piecewise_construct, &v13), v6 == *((_DWORD *)result + 16)))
      {
        v13 = v8;
        result = std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, v8, (uint64_t)&std::piecewise_construct, &v13);
        v12 = v10 == *((_DWORD *)result + 15);
      }
      else
      {
        v12 = 0;
      }
      v11 &= v12;
      v8 = (__int128 *)((char *)v8 + 24);
    }
    while (v8 != v9);
    if ((v11 & 1) == 0)
      Espresso::throw_exception_selector<Espresso::generic_error>("multiple inputs should have the same numerical properties");
  }
  return result;
}

void Espresso::blob<float,1>::make(_QWORD *a1, int a2)
{
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(a1, a2, 1, 1, 1);
}

void Espresso::quantize_per_ch(Espresso *this, float *a2, unint64_t a3, vDSP_Length a4, int *a5, const Espresso::q_target_traits *a6)
{
  uint64_t v10;
  unint64_t v11;
  float *v12;
  unint64_t v13;
  float v14;
  std::runtime_error *exception;
  float v16;
  float v17;
  float __B;
  float v19;
  float __C;
  int v21;

  v21 = a4;
  v10 = 4 * a4;
  v11 = (a3 - 1) / a4;
  v12 = (float *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  if (v11 != -1)
  {
    v13 = v11 + 1;
    do
    {
      v19 = 0.0;
      __C = 0.0;
      vDSP_minv((const float *)this, 1, &__C, a4);
      vDSP_maxv((const float *)this, 1, &v19, a4);
      __B = 1.0;
      __B = Espresso::q_target_traits::get_scale_from_min_max((Espresso::q_target_traits *)a5, __C, v19);
      v14 = (float)a5[2];
      v16 = (float)a5[3];
      v17 = v14;
      vDSP_vsmul((const float *)this, 1, &__B, v12, 1, a4);
      vvnintf(v12, v12, &v21);
      vDSP_vclip(v12, 1, &v17, &v16, v12, 1, a4);
      if (*a5 == 2)
      {
        vDSP_vfix8(v12, 1, (char *)a2, 1, a4);
      }
      else
      {
        if (*a5 != 4)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Not implemented");
          __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        vDSP_vfixu8(v12, 1, (unsigned __int8 *)a2, 1, a4);
      }
      a2 = (float *)((char *)a2 + a4);
      this = (Espresso *)((char *)this + v10);
      --v13;
    }
    while (v13);
  }
  free(v12);
}

void sub_191415C00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<signed char,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1130;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  return a1;
}

void Espresso::blob<signed char,2>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1130;
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(void **)(a1 + 16);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 16), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 16) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<signed char,2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBEB58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<signed char,2>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<Espresso::blob<float,2>,std::allocator<Espresso::blob<float,2>>,int const*&,void>(_QWORD *a1, int *a2)
{
  char *v4;
  int v5;
  int v6;
  Espresso *v7;
  void *v8;

  v4 = (char *)operator new(0x58uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *((_QWORD *)v4 + 3) = &off_1E2DA11B0;
  *(_QWORD *)v4 = &off_1E2DBEC38;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  v5 = *a2;
  v6 = a2[1];
  *((_DWORD *)v4 + 8) = *a2;
  *((_DWORD *)v4 + 9) = v6;
  v7 = (Espresso *)(4 * v5 * (uint64_t)v6);
  v8 = Espresso::kern_alloc_uninitialized(v7);
  bzero(v8, (size_t)v7);
  *((_QWORD *)v4 + 5) = v8;
  v4[48] = 1;
  *a1 = v4 + 24;
  a1[1] = v4;
}

void sub_191415DD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  void *v4;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v1[3]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void quantize_S8_w_tensor<4>(_QWORD *a1, uint64_t *a2)
{
  const Espresso::q_target_traits *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Espresso *v9;
  float *v10;
  __int128 v11;
  int v12;
  char v13;

  std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int const*&,void>(a1, *a2 + 8);
  v5 = 0;
  v6 = *a2;
  v7 = *(int *)(*a2 + 8);
  do
  {
    v7 *= *(int *)(*a2 + 12 + v5);
    v5 += 4;
  }
  while (v5 != 12);
  v8 = *(int *)(v6 + 20);
  v9 = *(Espresso **)(v6 + 24);
  v10 = *(float **)(*a1 + 24);
  v11 = xmmword_191A935A0;
  v12 = 255;
  v13 = 1;
  Espresso::quantize_per_ch(v9, v10, v7, v7 / v8, (int *)&v11, v4);
}

void sub_191415E8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double Espresso::quantizer::traits_for_weights@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0x800000002;
  *(_OWORD *)a1 = xmmword_191A935A0;
  *(_DWORD *)(a1 + 16) = 255;
  *(_BYTE *)(a1 + 20) = 1;
  return result;
}

void Espresso::quantizer::evaluate_discrepancy(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  char v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t i;
  Espresso *v25;
  const char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  Espresso *v31;
  const char *v32;
  __int128 *v33;
  __int128 *j;
  __int128 v35;
  NSObject *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  Espresso *v43;
  const char *v44;
  void **v45;
  void **k;
  __int128 v47;
  NSObject *v48;
  std::string *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  Espresso *v55;
  const char *v56;
  std::string *v57;
  std::string *m;
  __int128 v59;
  NSObject *v60;
  std::string *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void ***v66;
  uint64_t *v67;
  std::string v68;
  _QWORD v69[7];
  uint64_t *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  __int128 *v75;
  __int128 v76;
  std::string *v77;
  std::string *v78;
  uint64_t v79;
  void **v80;
  void ***v81;
  uint64_t v82;
  __n128 (*v83)(_QWORD *, uint64_t);
  void (*v84)(uint64_t);
  const char *v85;
  _QWORD **v86;
  _QWORD *v87[2];
  _QWORD v88[3];
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  __n128 (*v92)(_QWORD *, uint64_t);
  void (*v93)(uint64_t);
  const char *v94;
  _QWORD **v95;
  _QWORD *v96[2];
  _QWORD v97[3];
  uint64_t v98;
  int *v99;
  uint64_t v100;
  int v101;
  std::string *v102;
  _BYTE buf[24];
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 80);
  v7 = *(_DWORD *)(a1 + 84);
  v98 = 0;
  v99 = (int *)&v98;
  v100 = 0x2020000000;
  v101 = 0;
  v89 = 0;
  v90 = &v89;
  v91 = 0x6012000000;
  v92 = __Block_byref_object_copy__3022;
  v93 = __Block_byref_object_dispose__3023;
  v96[0] = 0;
  v96[1] = 0;
  v94 = "";
  v95 = v96;
  memset(v97, 0, sizeof(v97));
  v80 = 0;
  v81 = &v80;
  v82 = 0x6012000000;
  v83 = __Block_byref_object_copy__3022;
  v84 = __Block_byref_object_dispose__3023;
  v87[0] = 0;
  v87[1] = 0;
  v85 = "";
  v86 = v87;
  memset(v88, 0, sizeof(v88));
  v75 = &v76;
  v76 = 0uLL;
  v77 = 0;
  v78 = 0;
  v79 = 0;
  v8 = (std::__shared_weak_count *)a4[1];
  v73 = *a4;
  v74 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = a2[1];
  *(_QWORD *)buf = *a2;
  *(_QWORD *)&buf[8] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = a3[1];
  *(_QWORD *)&buf[16] = *a3;
  v104 = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v70 = 0;
  v71 = 0;
  v72 = 0;
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  v68.__r_.__value_.__s.__data_[8] = 0;
  v17 = (uint64_t *)operator new(0x20uLL);
  v18 = 0;
  v19 = 0;
  v70 = v17;
  v71 = v17;
  v72 = v17 + 4;
  do
  {
    v20 = v18;
    v21 = *(_OWORD *)&buf[16 * v19];
    *(_OWORD *)v17 = v21;
    if (*((_QWORD *)&v21 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v17 += 2;
    v18 = 1;
    v19 = 1;
  }
  while ((v20 & 1) == 0);
  v71 = v17;
  v69[0] = MEMORY[0x1E0C809B0];
  v69[1] = 3221225472;
  v69[2] = ___ZN8Espresso9quantizer20evaluate_discrepancyENSt3__110shared_ptrINS_3netEEES4_NS2_INS_20abstract_data_sourceEEE_block_invoke;
  v69[3] = &unk_1E2DD2BD8;
  v69[4] = &v89;
  v69[5] = &v80;
  v69[6] = &v98;
  Espresso::feed_data_source_to_networks(&v73, &v70, v6 | ((unint64_t)(v7 != 0) << 32), v69);
  v68.__r_.__value_.__r.__words[0] = (std::string::size_type)&v70;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v68);
  for (i = 16; i != -16; i -= 16)
    v25 = (Espresso *)std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&buf[i]);
  v27 = v74;
  if (v74)
  {
    v28 = (unint64_t *)&v74->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v99[6] >= 2)
  {
    Espresso::espresso_os_log_subsystem(v25, v26);
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_190DAF000, v30, OS_LOG_TYPE_INFO, "Stats for PSNR", buf, 2u);
    }

    v33 = (__int128 *)v90[9];
    for (j = (__int128 *)v90[10]; v33 != j; v33 = (__int128 *)((char *)v33 + 24))
    {
      if (*((char *)v33 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v33, *((_QWORD *)v33 + 1));
      }
      else
      {
        v35 = *v33;
        v68.__r_.__value_.__r.__words[2] = *((_QWORD *)v33 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v35;
      }
      Espresso::espresso_os_log_subsystem(v31, v32);
      v36 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = &v68;
        else
          v37 = (std::string *)v68.__r_.__value_.__r.__words[0];
        v102 = &v68;
        v38 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v90 + 6, &v68, (__int128 **)&v102)+ 9);
        v102 = &v68;
        v39 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v90 + 6, &v68, (__int128 **)&v102)+ 10);
        v102 = &v68;
        v40 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v90 + 6, &v68, (__int128 **)&v102)+ 7);
        v102 = &v68;
        v41 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v90 + 6, &v68, (__int128 **)&v102)+ 8);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v37;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2048;
        v104 = v39;
        v105 = 2048;
        v106 = v40;
        v107 = 2048;
        v108 = v41;
        _os_log_impl(&dword_190DAF000, v36, OS_LOG_TYPE_INFO, "psnr: blob=%s mean=%.2f stddev=%.2f min=%.2f max=%.2f", buf, 0x34u);
      }

      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
    }
    Espresso::espresso_os_log_subsystem(v31, v32);
    v42 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_190DAF000, v42, OS_LOG_TYPE_INFO, "Stats for MAXABSDIFF", buf, 2u);
    }

    v45 = v81[9];
    for (k = v81[10]; v45 != k; v45 += 3)
    {
      if (*((char *)v45 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, (const std::string::value_type *)*v45, (std::string::size_type)v45[1]);
      }
      else
      {
        v47 = *(_OWORD *)v45;
        v68.__r_.__value_.__r.__words[2] = (std::string::size_type)v45[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v47;
      }
      Espresso::espresso_os_log_subsystem(v43, v44);
      v48 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v49 = &v68;
        else
          v49 = (std::string *)v68.__r_.__value_.__r.__words[0];
        v102 = &v68;
        v50 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v81 + 6, &v68, (__int128 **)&v102)+ 9);
        v102 = &v68;
        v51 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v81 + 6, &v68, (__int128 **)&v102)+ 10);
        v102 = &v68;
        v52 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v81 + 6, &v68, (__int128 **)&v102)+ 7);
        v102 = &v68;
        v53 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v81 + 6, &v68, (__int128 **)&v102)+ 8);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v49;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v50;
        *(_WORD *)&buf[22] = 2048;
        v104 = v51;
        v105 = 2048;
        v106 = v52;
        v107 = 2048;
        v108 = v53;
        _os_log_impl(&dword_190DAF000, v48, OS_LOG_TYPE_INFO, "maxabsdiff: blob=%s mean=%.2e stddev=%.2e min=%.2e max=%.2e", buf, 0x34u);
      }

      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
    }
    Espresso::espresso_os_log_subsystem(v43, v44);
    v54 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_190DAF000, v54, OS_LOG_TYPE_INFO, "Stats for MAXRELDIFF", buf, 2u);
    }

    v57 = v77;
    for (m = v78; v57 != m; ++v57)
    {
      if (SHIBYTE(v57->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, v57->__r_.__value_.__l.__data_, v57->__r_.__value_.__l.__size_);
      }
      else
      {
        v59 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
        v68.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v59;
      }
      Espresso::espresso_os_log_subsystem(v55, v56);
      v60 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
      {
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v68;
        else
          v61 = (std::string *)v68.__r_.__value_.__r.__words[0];
        v102 = &v68;
        v62 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v75, &v68, (__int128 **)&v102)+ 9);
        v102 = &v68;
        v63 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v75, &v68, (__int128 **)&v102)+ 10);
        v102 = &v68;
        v64 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v75, &v68, (__int128 **)&v102)+ 7);
        v102 = &v68;
        v65 = *((_QWORD *)std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v75, &v68, (__int128 **)&v102)+ 8);
        *(_DWORD *)buf = 136316162;
        *(_QWORD *)&buf[4] = v61;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v62;
        *(_WORD *)&buf[22] = 2048;
        v104 = v63;
        v105 = 2048;
        v106 = v64;
        v107 = 2048;
        v108 = v65;
        _os_log_impl(&dword_190DAF000, v60, OS_LOG_TYPE_INFO, "maxreldiff_stat: blob=%s mean=%.2e stddev=%.2e min=%.2e max=%.2e", buf, 0x34u);
      }

      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = a5 + 56;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 104) = 0;
  *(_QWORD *)(a5 + 80) = 0;
  *(_QWORD *)(a5 + 88) = 0;
  *(_QWORD *)(a5 + 96) = a5 + 104;
  *(_QWORD *)(a5 + 112) = 0;
  *(_QWORD *)(a5 + 120) = 0;
  *(_QWORD *)(a5 + 128) = 0;
  *(_QWORD *)(a5 + 136) = 0;
  v66 = v81;
  if ((void ***)a5 != v81)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)(a5 + 48), (__int128 *)v81[6], (__int128 *)(v81 + 7));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a5 + 72, (std::string *)v66[9], (std::string *)v66[10], 0xAAAAAAAAAAAAAAABLL * (v66[10] - v66[9]));
  }
  if ((__int128 **)(a5 + 96) != &v75)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)(a5 + 96), v75, &v76);
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a5 + 120, v77, v78, 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - (char *)v77) >> 3));
  }
  v67 = v90;
  if (v90 + 6 != (uint64_t *)a5)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)a5, (__int128 *)v90[6], (__int128 *)(v90 + 7));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a5 + 24, (std::string *)v67[9], (std::string *)v67[10], 0xAAAAAAAAAAAAAAABLL * ((v67[10] - v67[9]) >> 3));
  }
  *(_QWORD *)buf = &v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy((_QWORD *)v76);
  _Block_object_dispose(&v80, 8);
  *(_QWORD *)buf = v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v87[0]);
  _Block_object_dispose(&v89, 8);
  v80 = (void **)v97;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v80);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(v96[0]);
  _Block_object_dispose(&v98, 8);
}

void sub_1914167C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  uint64_t i;

  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  for (i = 16; i != -16; i -= 16)
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](v59 - 160 + i);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys((uint64_t)&a35);
  _Block_object_dispose(&a41, 8);
  Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys((uint64_t)&a47);
  _Block_object_dispose(&a53, 8);
  Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys((uint64_t)&a59);
  _Block_object_dispose((const void *)(v59 - 200), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3022(_QWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  a1[6] = *(_QWORD *)(a2 + 48);
  v2 = (_QWORD *)(a2 + 56);
  v3 = *(_QWORD *)(a2 + 56);
  a1[7] = v3;
  v4 = a1 + 7;
  v5 = *(_QWORD *)(a2 + 64);
  a1[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    *(_QWORD *)(a2 + 48) = v2;
    *v2 = 0;
    *(_QWORD *)(a2 + 64) = 0;
  }
  else
  {
    a1[6] = v4;
  }
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 9) = result;
  a1[11] = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void __Block_byref_object_dispose__3023(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*(_QWORD **)(a1 + 56));
}

void ___ZN8Espresso9quantizer20evaluate_discrepancyENSt3__110shared_ptrINS_3netEEES4_NS2_INS_20abstract_data_sourceEEE_block_invoke(_QWORD *a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string **v6;
  std::string **v7;
  std::string *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  float v31;
  float v32;
  float v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  long double v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  float *v42;
  float *v43;
  float v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  float *v49;
  float *v50;
  float v51;
  float v52;
  double v53;
  uint64_t v54;
  unint64_t v55;
  float *v56;
  float v57;
  float v58;
  float *v59;
  float v60;
  float v61;
  uint64_t j;
  float v63;
  float v64;
  double v65;
  double v66;
  double v67;
  uint64_t **v68;
  char *v69;
  uint64_t **v70;
  char *v71;
  const char *v72;
  Espresso *v73;
  NSObject *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  int v80;
  std::string::size_type size;
  std::string::size_type v82;
  uint64_t v84;
  float v85;
  unint64_t v86;
  unint64_t v87;
  std::string *p_p;
  double v89;
  float *v90;
  float v91;
  float v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  double v98;
  float *v99;
  float v100;
  float v101;
  uint64_t k;
  int v103;
  _QWORD *v104;
  std::string *i;
  std::string __str;
  std::string __p;
  float v108;
  float v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  std::string v114;
  uint64_t *v115[3];
  std::string *v116;
  std::string *v117;
  uint64_t v118;
  uint64_t *v119[3];
  _QWORD v120[3];
  std::string v121;
  char v122;
  uint8_t buf[8];
  __int16 v124;
  std::string *v125;
  __int16 v126;
  double v127;
  __int16 v128;
  double v129;
  __int16 v130;
  double v131;
  __int16 v132;
  _BYTE v133[22];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t)*a2;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)v119, *a2);
  v104 = a1;
  memset(v120, 0, sizeof(v120));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v120, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v4 + 32) - *(_QWORD *)(v4 + 24)) >> 3));
  v5 = (uint64_t)*a2;
  std::map<std::string,std::shared_ptr<Espresso::blob<float,4>>>::map[abi:ne180100]((uint64_t)v115, *a2 + 6);
  v116 = 0;
  v117 = 0;
  v118 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v116, *(_QWORD *)(v5 + 72), *(_QWORD *)(v5 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 80) - *(_QWORD *)(v5 + 72)) >> 3));
  v6 = (std::string **)(*(_QWORD *)(a1[4] + 8) + 72);
  if (v6 != &v116)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v6, v116, v117, 0xAAAAAAAAAAAAAAABLL * (((char *)v117 - (char *)v116) >> 3));
  v7 = (std::string **)(*(_QWORD *)(a1[5] + 8) + 72);
  if (v7 != &v116)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)v7, v116, v117, 0xAAAAAAAAAAAAAAABLL * (((char *)v117 - (char *)v116) >> 3));
  v8 = v116;
  for (i = v117; v8 != i; ++v8)
  {
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v114, v8->__r_.__value_.__l.__data_, v8->__r_.__value_.__l.__size_);
    }
    else
    {
      v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v114.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = v9;
    }
    *(_QWORD *)buf = &v114;
    v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v115, &v114, (__int128 **)buf);
    v12 = v10[7];
    v11 = v10[8];
    v112 = v12;
    v113 = (std::__shared_weak_count *)v11;
    if (v11)
    {
      v13 = (unint64_t *)(v11 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *(_QWORD *)buf = &v114;
    v15 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v119, &v114, (__int128 **)buf);
    v17 = v15[7];
    v16 = (std::__shared_weak_count *)v15[8];
    v110 = v17;
    v111 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    if (v17)
    {
      v20 = 0;
      v109 = 0.0;
      v21 = *(int *)(v17 + 8);
      v22 = v17 + 12;
      v23 = v12 + 12;
      v24 = 0.0;
      v25 = 0.0;
      v26 = *(int *)(v12 + 8);
      while (1)
      {
        v27 = 0;
        v28 = *(int *)(v17 + 8);
        do
        {
          v28 *= *(int *)(v22 + v27);
          v27 += 4;
        }
        while (v27 != 12);
        v29 = 0;
        v30 = *(int *)(v12 + 8);
        do
        {
          v30 *= *(int *)(v23 + v29);
          v29 += 4;
        }
        while (v29 != 12);
        if (v30 < v28)
          v28 = v30;
        if (v28 <= v20)
          break;
        v31 = *(float *)(*(_QWORD *)(v12 + 24) + 4 * v20);
        v32 = *(float *)(*(_QWORD *)(v17 + 24) + 4 * v20) - v31;
        v25 = v25 + (float)(v32 * v32);
        v33 = fabsf(v31);
        if (v20)
          v34 = v33 <= v24;
        else
          v34 = 0;
        if (!v34)
          v24 = v33;
        ++v20;
      }
      v35 = 0;
      v36 = *(int *)(v17 + 8);
      do
      {
        v36 *= *(int *)(v22 + v35);
        v35 += 4;
      }
      while (v35 != 12);
      v37 = log10((v24 + 0.00001) / (sqrt(v25 / (double)v36) + 1.0e-10));
      v38 = 0;
      *(float *)&v37 = v37 * 20.0;
      v109 = *(float *)&v37;
      v108 = 0.0;
      v39 = v21;
      do
      {
        v39 *= *(int *)(v22 + v38);
        v38 += 4;
      }
      while (v38 != 12);
      v40 = 0;
      v41 = v26;
      do
      {
        v41 *= *(int *)(v23 + v40);
        v40 += 4;
      }
      while (v40 != 12);
      if (v41 < v39)
        v39 = v41;
      if (v39)
      {
        v42 = *(float **)(v17 + 24);
        v43 = *(float **)(v12 + 24);
        v44 = 0.0;
        do
        {
          v45 = vabds_f32(*v42, *v43);
          if (v45 > v44)
            v44 = v45;
          ++v43;
          ++v42;
          --v39;
        }
        while (v39);
      }
      else
      {
        v44 = 0.0;
      }
      v46 = 0;
      v108 = v44;
      do
      {
        v21 *= *(int *)(v22 + v46);
        v46 += 4;
      }
      while (v46 != 12);
      v47 = 0;
      v48 = v26;
      do
      {
        v48 *= *(int *)(v23 + v47);
        v47 += 4;
      }
      while (v47 != 12);
      if (v48 >= v21)
        v48 = v21;
      if (v48)
      {
        v49 = *(float **)(v17 + 24);
        v50 = *(float **)(v12 + 24);
        v51 = 0.0;
        a1 = v104;
        do
        {
          v52 = vabds_f32(*v49, *v50);
          if (v52 > v51)
            v51 = v52;
          ++v50;
          ++v49;
          --v48;
        }
        while (v48);
        v53 = v51;
      }
      else
      {
        v53 = 0.0;
        a1 = v104;
      }
      v54 = 0;
      v55 = v26;
      do
      {
        v55 *= *(int *)(v23 + v54);
        v54 += 4;
      }
      while (v54 != 12);
      v56 = *(float **)(v12 + 24);
      v57 = *v56;
      v58 = *v56;
      if (v55)
      {
        v59 = *(float **)(v12 + 24);
        v58 = *v56;
        do
        {
          v60 = *v59++;
          v61 = v60;
          if (v60 > v58)
            v58 = v61;
          --v55;
        }
        while (v55);
      }
      for (j = 0; j != 12; j += 4)
        v26 *= *(int *)(v23 + j);
      for (; v26; --v26)
      {
        v63 = *v56++;
        v64 = v63;
        if (v63 < v57)
          v57 = v64;
      }
      v65 = v58;
      v66 = -v57;
      if (v65 >= v66)
        v67 = v65;
      else
        v67 = v66;
      v68 = (uint64_t **)(*(_QWORD *)(a1[4] + 8) + 48);
      *(_QWORD *)buf = &v114;
      v69 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v68, &v114, (__int128 **)buf);
      Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)&v109, (float *)1, 0, (uint64_t)buf);
      Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v69 + 56), (int8x16_t *)buf, 0.0);
      if (*(_QWORD *)&v133[6])
      {
        *(_QWORD *)&v133[14] = *(_QWORD *)&v133[6];
        operator delete(*(void **)&v133[6]);
      }
      v70 = (uint64_t **)(*(_QWORD *)(a1[5] + 8) + 48);
      *(_QWORD *)buf = &v114;
      v71 = std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v70, &v114, (__int128 **)buf);
      Espresso::dataset_estimator::statistics_entry_t::compute_single((Espresso::dataset_estimator::statistics_entry_t *)&v108, (float *)1, 0, (uint64_t)buf);
      Espresso::dataset_estimator::statistics_entry_t::iterative_grow((int8x16_t *)(v71 + 56), (int8x16_t *)buf, 0.0);
      v73 = *(Espresso **)&v133[6];
      if (*(_QWORD *)&v133[6])
      {
        *(_QWORD *)&v133[14] = *(_QWORD *)&v133[6];
        operator delete(*(void **)&v133[6]);
      }
      Espresso::espresso_os_log_subsystem(v73, v72);
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        v80 = *(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
        if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, v114.__r_.__value_.__l.__data_, v114.__r_.__value_.__l.__size_);
        else
          __str = v114;
        std::string::basic_string(&v121, &__str, 0, 0x14uLL, (std::allocator<char> *)&v122);
        v103 = v80;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v121;
        size = HIBYTE(v121.__r_.__value_.__r.__words[2]);
        if ((v121.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v121.__r_.__value_.__l.__size_;
        v82 = size - 20;
        if (size != 20)
        {
          do
            std::string::append(&__str, " ");
          while (!__CFADD__(v82++, 1));
        }
        v84 = 0;
        v85 = v53 / fabs(v67);
        __p = __str;
        memset(&__str, 0, sizeof(__str));
        v86 = *(int *)(v17 + 8);
        v87 = v86;
        do
        {
          v87 *= *(int *)(v22 + v84);
          v84 += 4;
        }
        while (v84 != 12);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v89 = 0.0;
        a1 = v104;
        if (v87)
        {
          v90 = *(float **)(v17 + 24);
          v91 = 0.0;
          do
          {
            v92 = *v90++;
            v91 = v91 + v92;
            --v87;
          }
          while (v87);
          v89 = v91;
        }
        v93 = 0;
        v94 = v85;
        do
        {
          v86 *= *(int *)(v22 + v93);
          v93 += 4;
        }
        while (v93 != 12);
        v95 = 0;
        v96 = *(int *)(v12 + 8);
        v97 = v96;
        do
        {
          v97 *= *(int *)(v23 + v95);
          v95 += 4;
        }
        while (v95 != 12);
        v98 = 0.0;
        if (v97)
        {
          v99 = *(float **)(v12 + 24);
          v100 = 0.0;
          do
          {
            v101 = *v99++;
            v100 = v100 + v101;
            --v97;
          }
          while (v97);
          v98 = v100;
        }
        for (k = 0; k != 12; k += 4)
          v96 *= *(int *)(v23 + k);
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&buf[4] = v103;
        v124 = 2080;
        v125 = p_p;
        v126 = 2048;
        v127 = v109;
        v128 = 2048;
        v129 = v108;
        v130 = 2048;
        v131 = v94;
        v132 = 2048;
        *(double *)v133 = v89 / (double)v86;
        *(_WORD *)&v133[8] = 2048;
        *(double *)&v133[10] = v98 / (double)v96;
        _os_log_debug_impl(&dword_190DAF000, v74, OS_LOG_TYPE_DEBUG, "sample=%d blob_name=%s psnr=%.2f maxabs=%.3e maxrel=%.3f q=%.2e ref=%.2e", buf, 0x44u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }

    }
    if (v16)
    {
      v75 = (unint64_t *)&v16->__shared_owners_;
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v77 = v113;
    if (v113)
    {
      v78 = (unint64_t *)&v113->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v114.__r_.__value_.__l.__data_);
  }
  ++*(_DWORD *)(*(_QWORD *)(a1[6] + 8) + 24);
  *(_QWORD *)buf = &v116;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v115[1]);
  *(_QWORD *)buf = v120;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v119[1]);
}

void sub_191417214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39,_QWORD *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(a40);
  Espresso::map_with_ordered_keys<std::string,std::shared_ptr<Espresso::blob<float,4>>>::~map_with_ordered_keys((uint64_t)&a45);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::evaluate_discrepancy_result_t::~evaluate_discrepancy_result_t(Espresso::quantizer::evaluate_discrepancy_result_t *this)
{
  void **v2;

  v2 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((_QWORD **)this + 13));
  v2 = (void **)((char *)this + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((_QWORD **)this + 7));
  v2 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*((_QWORD **)this + 1));
}

uint64_t Espresso::map_with_ordered_keys<std::string,Espresso::dataset_estimator::statistics_entry_t>::~map_with_ordered_keys(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(*(_QWORD **)(a1 + 8));
  return a1;
}

void Espresso::ane_style_post_scale_bias(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  const float *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  Espresso *v28;
  const char *v29;
  int v30;
  NSObject *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float *__A[3];
  float __C;
  uint8_t buf[4];
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  v9 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  if (*a2)
    v9 = *(_DWORD *)(*a2 + 8);
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(__A, v8, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3, (__int128 *)__A);
  v10 = (std::__shared_weak_count *)__A[1];
  if (__A[1])
  {
    v11 = (unint64_t *)(__A[1] + 2);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(__A, v9, 1, 1, 1);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a3 + 16, (__int128 *)__A);
  v13 = (std::__shared_weak_count *)__A[1];
  if (__A[1])
  {
    v14 = (unint64_t *)(__A[1] + 2);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  __C = 0.0;
  vDSP_minv(*(const float **)(*(_QWORD *)a1 + 16), 1, &__C, (int)v8);
  v16 = vcvtms_s32_f32(log2f(__C));
  v17 = -v16 & ~((signed int)-v16 >> 31);
  if (v17 >= 0x1F)
    v18 = 31;
  else
    v18 = v17;
  v19 = v8 - 1;
  if ((int)v8 >= 1)
  {
    v20 = 0;
    v21 = 4 * v8;
    do
    {
      v22 = *(float *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + v20);
      v23 = ldexp(1.0, v18) * v22;
      *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + v20) = v23;
      v20 += 4;
    }
    while (v21 != v20);
  }
  std::vector<float>::vector(__A, v9);
  v24 = __A[0];
  if (v9 >= 1)
  {
    v25 = 0;
    v26 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if (v19 >= (int)v25)
        v27 = v25;
      else
        v27 = v19;
      v24[v25++] = a4 / *(float *)(v26 + 4 * v27);
    }
    while (v9 != v25);
  }
  v38 = 0.0;
  vDSP_maxv(v24, 1, &v38, v9);
  v30 = vcvtms_s32_f32(log2f(v38));
  if (v30 < 16)
  {
    if (v30 > -17)
      goto LABEL_34;
    Espresso::espresso_os_log_subsystem(v28, v29);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v42 = v30;
      _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "low bias shift %d", buf, 8u);
    }
    v30 = -16;
  }
  else
  {
    Espresso::espresso_os_log_subsystem(v28, v29);
    v31 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      v42 = v30;
      _os_log_impl(&dword_190DAF000, v31, OS_LOG_TYPE_INFO, "high bias shift %d", buf, 8u);
    }
    v30 = 15;
  }

LABEL_34:
  *(_DWORD *)(a3 + 32) = v18;
  v32 = *a2;
  if (v32)
  {
    if (v9 >= 1)
    {
      v33 = 0;
      v34 = 4 * v9;
      do
      {
        v35 = &__A[0][v33 / 4];
        v36 = __A[0][v33 / 4];
        v37 = v36 / ldexp(1.0, v30);
        *v35 = v37;
        *(float *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) + 16) + v33) = *(float *)(*(_QWORD *)(v32 + 16) + v33) * v37;
        v33 += 4;
      }
      while (v34 != v33);
    }
    *(_DWORD *)(a3 + 36) = v30;
  }
  if (__A[0])
  {
    __A[1] = __A[0];
    operator delete(__A[0]);
  }
}

void sub_19141772C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12);
  _Unwind_Resume(a1);
}

void Espresso::classic_hx_engine_backwards_compatibility(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t **v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t **v18;
  float v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  const float *v24;
  void **v25;
  void **v26;
  unint64_t *v27;
  unint64_t v28;
  void **v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  int v41;
  int v42;
  _DWORD *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  double v56;
  int *v57;
  _DWORD *v58;
  float *v59;
  _DWORD *v60;
  float v61;
  float v62;
  float v63;
  uint64_t **v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  uint64_t **v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t **v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t **v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  uint64_t **v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  double v105;
  int v106;
  int v107;
  long double v108;
  uint64_t v109;
  _DWORD *v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  uint64_t **v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  unint64_t *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  std::__shared_weak_count *v132;
  float __C;
  void **v134;
  std::__shared_weak_count *v135;
  _DWORD *v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  void *v148;
  std::__shared_weak_count *v149;
  void **p_p;
  std::__shared_weak_count *v151;
  void *__p;
  std::__shared_weak_count *v153;
  char v154;
  std::string v155;
  std::string v156;
  uint64_t **v157;
  std::__shared_weak_count *v158;

  v1 = *a1;
  if (*(_QWORD *)(*a1 + 40) != *(_QWORD *)(*a1 + 32))
  {
    v3 = 0;
    while (1)
    {
      v156.__r_.__value_.__r.__words[0] = v3;
      v4 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v1 + 96, v3, &v156);
      if (v4[4] != v4[3])
      {
        v5 = *a1 + 56;
        v156.__r_.__value_.__r.__words[0] = v3;
        v6 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v5, v3, &v156);
        if (v6[4] != v6[3])
          break;
      }
LABEL_179:
      ++v3;
      v1 = *a1;
      if (v3 >= (uint64_t)(*(_QWORD *)(*a1 + 40) - *(_QWORD *)(*a1 + 32)) >> 4)
        return;
    }
    v7 = *a1;
    v8 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * v3);
    v10 = *(uint64_t ***)(v8 + 64);
    v9 = *(std::__shared_weak_count **)(v8 + 72);
    v157 = v10;
    v158 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      v7 = *a1;
    }
    v155.__r_.__value_.__r.__words[0] = v3;
    v13 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v7 + 96, v3, &v155)[3];
    if (*((char *)v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v156, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
    }
    else
    {
      v14 = *v13;
      v156.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
      *(_OWORD *)&v156.__r_.__value_.__l.__data_ = v14;
    }
    v15 = *a1 + 56;
    __p = (void *)v3;
    v16 = (__int128 *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v15, v3, &__p)[3];
    if (*((char *)v16 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v155, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
    }
    else
    {
      v17 = *v16;
      v155.__r_.__value_.__r.__words[2] = *((_QWORD *)v16 + 2);
      *(_OWORD *)&v155.__r_.__value_.__l.__data_ = v17;
    }
    v18 = (uint64_t **)(*a1 + 352);
    __p = &v156;
    v19 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v18, &v156, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 14);
    v20 = (uint64_t **)(*a1 + 352);
    __p = &v155;
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v20, &v155, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
    v21 = v157;
    std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
    v22 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v21[20], &__p);
    v23 = v22;
    if (v154 < 0)
    {
      operator delete(__p);
      if (!v23)
      {
LABEL_170:
        if (SHIBYTE(v155.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v155.__r_.__value_.__l.__data_);
        if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v156.__r_.__value_.__l.__data_);
        v128 = v158;
        if (v158)
        {
          v129 = (unint64_t *)&v158->__shared_owners_;
          do
            v130 = __ldaxr(v129);
          while (__stlxr(v130 - 1, v129));
          if (!v130)
          {
            ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
            std::__shared_weak_count::__release_weak(v128);
          }
        }
        goto LABEL_179;
      }
    }
    else if (!v22)
    {
      goto LABEL_170;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
    p_p = &__p;
    v24 = *(const float **)(*((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v21 + 19, &__p, (_OWORD **)&p_p)+ 7)+ 16);
    if (v154 < 0)
      operator delete(__p);
    v26 = v25;
    if (v25)
    {
      p_p = v25;
      v151 = v158;
      if (v158)
      {
        v27 = (unint64_t *)&v158->__shared_owners_;
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      v29 = v25;
    }
    else
    {
      v29 = 0;
      p_p = 0;
      v151 = 0;
    }
    if (v30)
    {
      v148 = v30;
      v149 = v158;
      if (v158)
      {
        v31 = (unint64_t *)&v158->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v148 = 0;
      v149 = 0;
      if (v26)
      {
        v33 = *(unsigned int *)((*((uint64_t (**)(void **))*v26 + 48))(v26) + 40);
        std::allocate_shared[abi:ne180100]<Espresso::blob<unsigned int,1>,std::allocator<Espresso::blob<unsigned int,1>>,int &,int &,int &,int &,void>(&v146, v33, 1, 1, 1);
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v144, v33, 1, 1, 1);
        std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v142, v33, 1, 1, 1);
        (*((void (**)(void **__return_ptr, void **))*v29 + 57))(&__p, v29);
        v34 = 0;
        v35 = *((_DWORD *)__p + 2);
        do
        {
          v35 *= *(_DWORD *)((char *)__p + v34 + 12);
          v34 += 4;
        }
        while (v34 != 12);
        std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,1>,std::allocator<Espresso::blob<signed char,1>>,int &,int &,int &,int &,void>(&v140, v35, 1, 1, 1);
        v36 = v153;
        if (v153)
        {
          v37 = (unint64_t *)&v153->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v138, 1, 1, 1, 1);
        v39 = (uint64_t **)p_p;
        (*((void (**)(_DWORD **__return_ptr, void **))*p_p + 57))(&v136, p_p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "W_S8");
        v134 = &__p;
        v40 = *(_QWORD *)(*((_QWORD *)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 19, &__p, (_OWORD **)&v134)+ 7)+ 16);
        if (v154 < 0)
          operator delete(__p);
        if ((int)v33 >= 1)
        {
          v41 = 0;
          v42 = 0;
          v43 = v136;
          v44 = v136[2];
          v45 = v136[3];
          v46 = v136[4];
          v47 = v45 * v44 * v46;
          v48 = v45 * v46 * v44;
          do
          {
            if ((int)v43[4] >= 1)
            {
              v49 = 0;
              do
              {
                if ((int)v43[3] >= 1)
                {
                  v50 = 0;
                  do
                  {
                    v51 = v43[2];
                    if (v51 >= 1)
                    {
                      v52 = 0;
                      v53 = v140;
                      do
                      {
                        *(_BYTE *)(*(_QWORD *)(v53 + 16) + v49 + v47 * v42 + (v52 + v50 * v51) * v43[4]) = *(_BYTE *)(v40 + v41 + v52 + v51 * (v50 + v49 * v43[3]));
                        ++v52;
                        v43 = v136;
                        v51 = v136[2];
                      }
                      while (v52 < v51);
                    }
                    ++v50;
                  }
                  while (v50 < v43[3]);
                }
                ++v49;
              }
              while (v49 < v43[4]);
            }
            ++v42;
            v41 += v48;
          }
          while (v42 != (_DWORD)v33);
        }
        ((void (*)(void ***__return_ptr, uint64_t **))(*v39)[56])(&v134, v39);
        __C = 0.0;
        vDSP_maxv(v24, 1, &__C, (int)v33);
        v54 = vcvtmd_s64_f64(log2(4096.0 / __C));
        if (v54 >= 20)
          v54 = 20;
        if (v54 <= 8)
          v55 = 8;
        else
          v55 = v54;
        v56 = ldexp(1.0, v55);
        if ((int)v33 >= 1)
        {
          v57 = *(int **)(v146 + 16);
          v58 = *(_DWORD **)(v144 + 16);
          v59 = (float *)v134[2];
          v60 = *(_DWORD **)(v142 + 16);
          do
          {
            v61 = *v24++;
            *v57++ = v55;
            *v58++ = vcvtpd_s64_f64(v56 * v61);
            v62 = *v59++;
            v63 = v56 * 0.5 + v62 * (v56 * v19);
            *v60++ = llroundf(v63);
            --v33;
          }
          while (v33);
        }
        **(float **)(v138 + 16) = v19;
        v64 = v157;
        v131 = 0;
        v132 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_bias");
        ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v64)[21])(v64, &v131, &__p, *(_QWORD *)(v142 + 16), 4 * *(int *)(v142 + 8), 0);
        if (v154 < 0)
          operator delete(__p);
        v65 = v132;
        if (v132)
        {
          v66 = (unint64_t *)&v132->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v68 = v157;
        v131 = 0;
        v132 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_scaleout");
        ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v68)[21])(v68, &v131, &__p, *(_QWORD *)(v144 + 16), 4 * *(int *)(v144 + 8), 0);
        if (v154 < 0)
          operator delete(__p);
        v69 = v132;
        if (v132)
        {
          v70 = (unint64_t *)&v132->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = v157;
        v131 = 0;
        v132 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_shiftout");
        ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v72)[21])(v72, &v131, &__p, *(_QWORD *)(v146 + 16), 4 * *(int *)(v146 + 8), 0);
        if (v154 < 0)
          operator delete(__p);
        v73 = v132;
        if (v132)
        {
          v74 = (unint64_t *)&v132->__shared_owners_;
          do
            v75 = __ldaxr(v74);
          while (__stlxr(v75 - 1, v74));
          if (!v75)
          {
            ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
            std::__shared_weak_count::__release_weak(v73);
          }
        }
        v76 = v157;
        v131 = 0;
        v132 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_extra_f");
        ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v76)[21])(v76, &v131, &__p, *(_QWORD *)(v138 + 16), 4 * *(int *)(v138 + 8), 0);
        if (v154 < 0)
          operator delete(__p);
        v77 = v132;
        if (v132)
        {
          v78 = (unint64_t *)&v132->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v80 = v157;
        v131 = 0;
        v132 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "hx_kernel");
        ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, _QWORD, _QWORD))(*v80)[21])(v80, &v131, &__p, *(_QWORD *)(v140 + 16), *(int *)(v140 + 8), 0);
        if (v154 < 0)
          operator delete(__p);
        v81 = v132;
        if (v132)
        {
          v82 = (unint64_t *)&v132->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v84 = v135;
        if (v135)
        {
          v85 = (unint64_t *)&v135->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
            std::__shared_weak_count::__release_weak(v84);
          }
        }
        v87 = v137;
        if (v137)
        {
          v88 = (unint64_t *)&v137->__shared_owners_;
          do
            v89 = __ldaxr(v88);
          while (__stlxr(v89 - 1, v88));
          if (!v89)
          {
            ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
            std::__shared_weak_count::__release_weak(v87);
          }
        }
        v90 = v139;
        if (v139)
        {
          v91 = (unint64_t *)&v139->__shared_owners_;
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v93 = v141;
        if (v141)
        {
          v94 = (unint64_t *)&v141->__shared_owners_;
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 - 1, v94));
          if (!v95)
          {
            ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
            std::__shared_weak_count::__release_weak(v93);
          }
        }
        v96 = v143;
        if (v143)
        {
          v97 = (unint64_t *)&v143->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
            std::__shared_weak_count::__release_weak(v96);
          }
        }
        v99 = v145;
        if (v145)
        {
          v100 = (unint64_t *)&v145->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = v147;
        if (!v147)
          goto LABEL_160;
        v103 = (unint64_t *)&v147->__shared_owners_;
        do
          v104 = __ldaxr(v103);
        while (__stlxr(v104 - 1, v103));
        goto LABEL_158;
      }
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v146, 1, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<int,1>,std::allocator<Espresso::blob<int,1>>,int &,int &,int &,int &,void>(&v144, 2, 1, 1, 1);
    v105 = *v24;
    v106 = vcvtmd_s64_f64(log2(4096.0 / v105));
    if (v106 >= 20)
      v106 = 20;
    if (v106 <= 8)
      v107 = 8;
    else
      v107 = v106;
    v108 = ldexp(1.0, v107);
    v109 = v146;
    **(float **)(v146 + 16) = v19;
    v110 = *(_DWORD **)(v144 + 16);
    *v110 = vcvtpd_s64_f64(v108 * v105);
    v110[1] = v107;
    v142 = 0;
    v143 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "hx_extra_f");
    ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v21)[21])(v21, &v142, &__p, *(_QWORD *)(v109 + 16), 4 * *(int *)(v109 + 8), 0);
    if (v154 < 0)
      operator delete(__p);
    v111 = v143;
    if (v143)
    {
      v112 = (unint64_t *)&v143->__shared_owners_;
      do
        v113 = __ldaxr(v112);
      while (__stlxr(v113 - 1, v112));
      if (!v113)
      {
        ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
        std::__shared_weak_count::__release_weak(v111);
      }
    }
    v114 = v157;
    v142 = 0;
    v143 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "hx_scale_shift");
    ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v114)[21])(v114, &v142, &__p, *(_QWORD *)(v144 + 16), 4 * *(int *)(v144 + 8), 0);
    if (v154 < 0)
      operator delete(__p);
    v115 = v143;
    if (v143)
    {
      v116 = (unint64_t *)&v143->__shared_owners_;
      do
        v117 = __ldaxr(v116);
      while (__stlxr(v117 - 1, v116));
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
    v118 = v145;
    if (v145)
    {
      v119 = (unint64_t *)&v145->__shared_owners_;
      do
        v120 = __ldaxr(v119);
      while (__stlxr(v120 - 1, v119));
      if (!v120)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
      }
    }
    v102 = v147;
    if (!v147)
      goto LABEL_160;
    v121 = (unint64_t *)&v147->__shared_owners_;
    do
      v104 = __ldaxr(v121);
    while (__stlxr(v104 - 1, v121));
LABEL_158:
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
LABEL_160:
    v122 = v149;
    if (v149)
    {
      v123 = (unint64_t *)&v149->__shared_owners_;
      do
        v124 = __ldaxr(v123);
      while (__stlxr(v124 - 1, v123));
      if (!v124)
      {
        ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
        std::__shared_weak_count::__release_weak(v122);
      }
    }
    v125 = v151;
    if (v151)
    {
      v126 = (unint64_t *)&v151->__shared_owners_;
      do
        v127 = __ldaxr(v126);
      while (__stlxr(v127 - 1, v126));
      if (!v127)
      {
        ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
        std::__shared_weak_count::__release_weak(v125);
      }
    }
    goto LABEL_170;
  }
}

void sub_191418474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a35 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  if (a41 < 0)
    operator delete(a36);
  if (*(char *)(v41 - 137) < 0)
    operator delete(*(void **)(v41 - 160));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41 - 136);
  _Unwind_Resume(a1);
}

void sub_191418620()
{
  JUMPOUT(0x191418610);
}

void Espresso::convert_hx_engine_weights_to_peace_format(uint64_t ***a1, char a2)
{
  char v2;
  uint64_t **v4;
  uint64_t **v5;
  int v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  uint64_t *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t **v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t **v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  char *v35;
  char *v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t **v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _OWORD *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  _OWORD *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  _OWORD *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t i;
  double v79;
  float v80;
  unint64_t v81;
  long double v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  uint64_t **v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  float v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *v115;
  unint64_t *v116;
  unint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  std::__shared_weak_count *v123;
  _QWORD *v124;
  unint64_t *v125;
  unint64_t v126;
  int *v127;
  int v128;
  int v129;
  float v130;
  void **v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  unint64_t *v139;
  unint64_t v140;
  const char *v141;
  const char *v142;
  uint64_t **v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t **v149;
  unint64_t *v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  int *v173;
  uint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::__shared_weak_count *v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  char v196;
  _QWORD v197[2];
  uint64_t v198;
  std::__shared_weak_count *v199;
  void *v200;
  std::__shared_weak_count *v201;
  char v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  uint64_t v205;
  std::__shared_weak_count *v206;
  uint64_t v207;
  std::__shared_weak_count *v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  uint64_t v211;
  std::__shared_weak_count *v212;
  void *__p;
  int v214;
  int v215;
  char v216;
  void *v217;
  void *v218;
  uint64_t v219;
  std::__shared_weak_count *v220;
  uint64_t v221;
  std::__shared_weak_count *v222;
  uint64_t v223;
  std::__shared_weak_count *v224;
  void **p_p;
  std::__shared_weak_count *v226;
  uint64_t **v227;
  std::__shared_weak_count *v228;
  void *v229;
  std::__shared_weak_count *v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  __int128 v233;
  unint64_t v234[2];

  v2 = a2;
  v4 = *a1;
  if ((a2 & 1) == 0)
  {
    v5 = (uint64_t **)v4[44];
    if (v5 != v4 + 45)
    {
      do
      {
        if (*((_DWORD *)v5 + 15))
          v6 = 2;
        else
          v6 = 4;
        *((_DWORD *)v5 + 16) = v6;
        v7 = v5[1];
        if (v7)
        {
          do
          {
            v8 = (uint64_t **)v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t **)v5[2];
            v9 = *v8 == (uint64_t *)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4 + 45);
    }
  }
  v234[0] = 0;
  v10 = v4[4];
  if (v4[5] != v10)
  {
    v196 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(_OWORD *)&v10[2 * v11];
      v233 = v12;
      if (*((_QWORD *)&v12 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v15 = v12;
      v16 = *(_QWORD *)(v12 + 64);
      v17 = *(std::__shared_weak_count **)(v12 + 72);
      v231 = v16;
      v232 = v17;
      if (v17)
      {
        p_shared_owners = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      if (v16
      {
        v229 = v20;
        v230 = v17;
        if (v17)
        {
          v21 = (unint64_t *)&v17->__shared_owners_;
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        v196 = 1;
      }
      else
      {
        v229 = 0;
        v230 = 0;
      }
      v23 = (uint64_t)(*a1 + 12);
      __p = v234;
      v24 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v23, v234, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
      if (v24[3] == v24[4])
      {
        v27 = 1.0;
      }
      else
      {
        v25 = *a1;
        v26 = (uint64_t)(*a1 + 12);
        __p = v234;
        __p = (void *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v26, v234, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[3];
        v27 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25 + 44, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 14);
      }
      v28 = (uint64_t)(*a1 + 7);
      __p = v234;
      v29 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v28, v234, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
      if (v29[3] == v29[4])
      {
        v32 = 1.0;
      }
      else
      {
        v30 = *a1;
        v31 = (uint64_t)(*a1 + 7);
        __p = v234;
        __p = (void *)std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v31, v234, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p)[3];
        v32 = *((float *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v30 + 44, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 14);
      }
      if ((v196 & 1) != 0 && (v2 & 1) == 0)
      {
        v33 = (uint64_t)(*a1 + 12);
        __p = v234;
        v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v33, v234, (uint64_t)&std::piecewise_construct, (uint64_t **)&__p);
        v36 = (char *)v34[3];
        v35 = (char *)v34[4];
        while (v36 != v35)
        {
          v37 = *a1 + 44;
          __p = v36;
          *((_DWORD *)std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, v36, (uint64_t)&std::piecewise_construct, (__int128 **)&__p)+ 16) = 1;
          v36 += 24;
        }
        v119 = *(_QWORD **)(v16 + 160);
        v118 = (_QWORD *)(v16 + 160);
        std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v119);
        *(v118 - 1) = v118;
        *v118 = 0;
        v118[1] = 0;
        goto LABEL_227;
      }
      if (v16)
      {
        if (v38)
          break;
      }
      v227 = 0;
      v228 = 0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "hx_scale_shift");
      v120 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v16 + 160), &__p);
      v121 = v120;
      if (v216 < 0)
      {
        operator delete(__p);
        if (!v121)
        {
LABEL_150:
          v141 = (const char *)(v15 + 16);
          if (*(char *)(v15 + 39) < 0)
            v141 = *(const char **)v141;
          v142 = (const char *)(v15 + 40);
          if (*(char *)(v15 + 63) < 0)
            v142 = *(const char **)v142;
          printf("No hx_scale_shift for %s (type %s)\n", v141, v142);
          goto LABEL_227;
        }
      }
      else if (!v120)
      {
        goto LABEL_150;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "hx_scale_shift");
      p_p = &__p;
      v122 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v16 + 152), &__p, (_OWORD **)&p_p);
      v124 = (_QWORD *)*((_QWORD *)v122 + 7);
      v123 = (std::__shared_weak_count *)*((_QWORD *)v122 + 8);
      v200 = v124;
      v201 = v123;
      if (v123)
      {
        v125 = (unint64_t *)&v123->__shared_owners_;
        do
          v126 = __ldxr(v125);
        while (__stxr(v126 + 1, v125));
      }
      if (v216 < 0)
        operator delete(__p);
      v127 = (int *)v124[2];
      v128 = *v127;
      v129 = v127[1];
      std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&p_p, 1, 1, 1, 1);
      v130 = (double)v128 / ldexp(1.0, v129);
      v131 = p_p;
      *(float *)p_p[2] = v130;
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(v16 + 160));
      *(_QWORD *)(v16 + 160) = 0;
      *(_QWORD *)(v16 + 168) = 0;
      *(_QWORD *)(v16 + 152) = v16 + 160;
      if ((v2 & 1) == 0)
      {
        v223 = 0;
        v224 = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "post_scale");
        (*(void (**)(uint64_t, uint64_t *, void **, void *, uint64_t, _QWORD))(*(_QWORD *)v16 + 168))(v16, &v223, &__p, v131[2], 4 * *((int *)v131 + 2), 0);
        if (v216 < 0)
          operator delete(__p);
        v132 = v224;
        if (v224)
        {
          v133 = (unint64_t *)&v224->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
      }
      v135 = v226;
      if (v226)
      {
        v136 = (unint64_t *)&v226->__shared_owners_;
        do
          v137 = __ldaxr(v136);
        while (__stlxr(v137 - 1, v136));
        if (!v137)
        {
          ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
          std::__shared_weak_count::__release_weak(v135);
        }
      }
      v138 = v201;
      if (v201)
      {
        v139 = (unint64_t *)&v201->__shared_owners_;
        do
          v140 = __ldaxr(v139);
        while (__stlxr(v140 - 1, v139));
LABEL_207:
        if (!v140)
        {
          ((void (*)(std::__shared_weak_count *))v138->__on_zero_shared)(v138);
          std::__shared_weak_count::__release_weak(v138);
        }
      }
LABEL_209:
      v170 = v228;
      if (!v228)
        goto LABEL_213;
      v171 = (unint64_t *)&v228->__shared_owners_;
      do
        v172 = __ldaxr(v171);
      while (__stlxr(v172 - 1, v171));
      if (!v172)
      {
        ((void (*)(std::__shared_weak_count *))v170->__on_zero_shared)(v170);
        std::__shared_weak_count::__release_weak(v170);
        if ((v2 & 1) == 0)
        {
LABEL_214:
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v200, 1, 1, 1, 1);
          v173 = (int *)v200;
          **((float **)v200 + 2) = v27;
          v174 = v231;
          v227 = 0;
          v228 = 0;
          std::string::basic_string[abi:ne180100]<0>(&__p, "hx_extra_f");
          (*(void (**)(uint64_t, uint64_t ***, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v174 + 168))(v174, &v227, &__p, *((_QWORD *)v173 + 2), 4 * v173[2], 0);
          if (v216 < 0)
            operator delete(__p);
          v175 = v228;
          if (v228)
          {
            v176 = (unint64_t *)&v228->__shared_owners_;
            do
              v177 = __ldaxr(v176);
            while (__stlxr(v177 - 1, v176));
            if (!v177)
            {
              ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
              std::__shared_weak_count::__release_weak(v175);
            }
          }
          v178 = v201;
          if (v201)
          {
            v179 = (unint64_t *)&v201->__shared_owners_;
            do
              v180 = __ldaxr(v179);
            while (__stlxr(v180 - 1, v179));
            if (!v180)
            {
              ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
              std::__shared_weak_count::__release_weak(v178);
            }
          }
        }
      }
      else
      {
LABEL_213:
        if ((v2 & 1) == 0)
          goto LABEL_214;
      }
LABEL_227:
      v181 = v230;
      if (v230)
      {
        v182 = (unint64_t *)&v230->__shared_owners_;
        do
          v183 = __ldaxr(v182);
        while (__stlxr(v183 - 1, v182));
        if (!v183)
        {
          ((void (*)(std::__shared_weak_count *))v181->__on_zero_shared)(v181);
          std::__shared_weak_count::__release_weak(v181);
        }
      }
      v184 = v232;
      if (v232)
      {
        v185 = (unint64_t *)&v232->__shared_owners_;
        do
          v186 = __ldaxr(v185);
        while (__stlxr(v186 - 1, v185));
        if (!v186)
        {
          ((void (*)(std::__shared_weak_count *))v184->__on_zero_shared)(v184);
          std::__shared_weak_count::__release_weak(v184);
        }
      }
      v187 = (std::__shared_weak_count *)*((_QWORD *)&v233 + 1);
      if (*((_QWORD *)&v233 + 1))
      {
        v188 = (unint64_t *)(*((_QWORD *)&v233 + 1) + 8);
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      v11 = v234[0] + 1;
      v234[0] = v11;
      v4 = *a1;
      v10 = (*a1)[4];
      if (v11 >= ((char *)(*a1)[5] - (char *)v10) >> 4)
        goto LABEL_243;
    }
    v39 = v38;
    v227 = v38;
    v228 = v17;
    if (v17)
    {
      v40 = (unint64_t *)&v17->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    v42 = *(unsigned int *)(((uint64_t (*)(uint64_t **))(*v38)[48])(v38) + 40);
    std::string::basic_string[abi:ne180100]<0>(&__p, "hx_kernel");
    v200 = &__p;
    v43 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 19, &__p, (_OWORD **)&v200);
    v45 = *((_QWORD *)v43 + 7);
    v44 = (std::__shared_weak_count *)*((_QWORD *)v43 + 8);
    p_p = (void **)v45;
    v226 = v44;
    if (v44)
    {
      v46 = (unint64_t *)&v44->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    if (v216 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "hx_bias");
    v200 = &__p;
    v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 19, &__p, (_OWORD **)&v200);
    v50 = *((_QWORD *)v48 + 7);
    v49 = (std::__shared_weak_count *)*((_QWORD *)v48 + 8);
    v223 = v50;
    v224 = v49;
    if (v49)
    {
      v51 = (unint64_t *)&v49->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    if (v216 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "hx_scaleout");
    v200 = &__p;
    v53 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 19, &__p, (_OWORD **)&v200);
    v55 = *((_QWORD *)v53 + 7);
    v54 = (std::__shared_weak_count *)*((_QWORD *)v53 + 8);
    v221 = v55;
    v222 = v54;
    if (v54)
    {
      v56 = (unint64_t *)&v54->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    if (v216 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "hx_shiftout");
    v200 = &__p;
    v58 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v39 + 19, &__p, (_OWORD **)&v200);
    v60 = *((_QWORD *)v58 + 7);
    v59 = (std::__shared_weak_count *)*((_QWORD *)v58 + 8);
    v219 = v60;
    v220 = v59;
    if (v59)
    {
      v61 = (unint64_t *)&v59->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
    }
    if (v216 < 0)
      operator delete(__p);
    v63 = *(_QWORD *)(v50 + 16);
    v64 = *(_QWORD *)(v55 + 16);
    v65 = *(_QWORD *)(v60 + 16);
    v66 = *(_QWORD *)(v45 + 16);
    ((void (*)(void **__return_ptr, uint64_t **))(*v39)[58])(&__p, v39);
    std::allocate_shared[abi:ne180100]<Espresso::blob<signed char,4>,std::allocator<Espresso::blob<signed char,4>>,int &,int &,int &,int &,void>(&v211, (int)__p, SHIDWORD(__p), v214, v215);
    v67 = v215;
    if (v215 >= 1)
    {
      v68 = 0;
      v69 = 0;
      v70 = v214;
      do
      {
        if (v70 >= 1)
        {
          v71 = 0;
          v72 = HIDWORD(__p);
          do
          {
            if (v72 >= 1)
            {
              v73 = 0;
              v74 = (int)__p;
              do
              {
                if (v74 >= 1)
                {
                  v75 = 0;
                  v76 = v211;
                  do
                  {
                    *(_BYTE *)(*(_QWORD *)(v76 + 24) + v69 + v75) = *(_BYTE *)(v66
                                                                             + v71
                                                                             + ((int)v75
                                                                              + v74 * (v73 + v68 * HIDWORD(__p)))
                                                                             * v214);
                    v74 = (int)__p;
                    ++v75;
                  }
                  while ((int)v75 < (int)__p);
                  v69 += v75;
                  v72 = HIDWORD(__p);
                }
                ++v73;
              }
              while (v73 < v72);
              v70 = v214;
            }
            ++v71;
          }
          while (v71 < v70);
          v67 = v215;
        }
        ++v68;
      }
      while (v68 < v67);
    }
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v209, v42, 1, 1, 1);
    std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v207, v42, 1, 1, 1);
    if ((int)v42 >= 1)
    {
      for (i = 0; i != v42; ++i)
      {
        v79 = (double)*(int *)(v64 + 4 * i);
        LODWORD(v77) = *(_DWORD *)(v65 + 4 * i);
        v80 = v79 / exp2((double)*(unint64_t *)&v77);
        *(float *)(*(_QWORD *)(v209 + 16) + 4 * i) = v80;
        ((void (*)(void **__return_ptr))(*v227)[56])(&v200);
        LODWORD(v81) = *(_DWORD *)(v65 + 4 * i);
        v82 = exp2((double)v81);
        v77 = ((double)*(int *)(v63 + 4 * i) + v82 * -0.5) / (v82 * v27);
        *(float *)&v77 = v77;
        *(_DWORD *)(*(_QWORD *)(v207 + 16) + 4 * i) = LODWORD(v77);
        v83 = v201;
        if (v201)
        {
          v84 = (unint64_t *)&v201->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
        }
      }
      v39 = v227;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(v39[20]);
    v39[19] = (uint64_t *)(v39 + 20);
    v39[20] = 0;
    v39[21] = 0;
    v205 = v207;
    v206 = v208;
    if (v208)
    {
      v86 = (unint64_t *)&v208->__shared_owners_;
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    ((void (*)(uint64_t **, uint64_t *))(*v39)[49])(v39, &v205);
    v2 = a2;
    v88 = v206;
    if (!v206)
      goto LABEL_94;
    v89 = (unint64_t *)&v206->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
      if ((a2 & 1) != 0)
      {
LABEL_95:
        v91 = v227;
        ((void (*)(void **__return_ptr, uint64_t **))(*v227)[57])(&v200, v227);
        ((void (*)(uint64_t *__return_ptr, uint64_t **))(*v91)[59])(&v203, v91);
        v92 = v215;
        if (v215 >= 1)
        {
          v93 = 0;
          v94 = 0;
          v95 = *(_QWORD *)(v209 + 16);
          v97 = HIDWORD(__p);
          v96 = v214;
          do
          {
            if (v96 >= 1)
            {
              v98 = 0;
              v99 = (float)(v32 * *(float *)(v95 + 4 * v93)) / v27;
              v100 = (int)__p;
              do
              {
                if (v97 >= 1)
                {
                  v101 = 0;
                  v102 = v211;
                  v103 = v203;
                  do
                  {
                    if (v100 >= 1)
                    {
                      v104 = *(_QWORD *)(v102 + 24);
                      v105 = *(_QWORD *)(v103 + 24);
                      v106 = v100;
                      do
                      {
                        *(float *)(v105 + 4 * v94) = v99 * (float)*(char *)(v104 + v94);
                        ++v94;
                        --v106;
                      }
                      while (v106);
                    }
                    ++v101;
                  }
                  while (v101 != v97);
                }
                ++v98;
              }
              while (v98 != v96);
            }
            ++v93;
          }
          while (v93 != v92);
        }
        v198 = v203;
        v199 = v204;
        if (v204)
        {
          v107 = (unint64_t *)&v204->__shared_owners_;
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        ((void (*)(uint64_t **, uint64_t *))(*v91)[50])(v91, &v198);
        v109 = v199;
        if (v199)
        {
          v110 = (unint64_t *)&v199->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        v112 = v204;
        if (v204)
        {
          v113 = (unint64_t *)&v204->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        v115 = v201;
        if (v201)
        {
          v116 = (unint64_t *)&v201->__shared_owners_;
          do
            v117 = __ldaxr(v116);
          while (__stlxr(v117 - 1, v116));
          goto LABEL_170;
        }
        goto LABEL_172;
      }
    }
    else
    {
LABEL_94:
      if ((a2 & 1) != 0)
        goto LABEL_95;
    }
    v143 = v227;
    v203 = 0;
    v204 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v200, "W_S8");
    v144 = 0;
    v145 = *(int *)(v211 + 8);
    do
    {
      v145 *= *(int *)(v211 + 12 + v144);
      v144 += 4;
    }
    while (v144 != 12);
    ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v143)[21])(v143, &v203, &v200, *(_QWORD *)(v211 + 24), v145, 0);
    if (v202 < 0)
      operator delete(v200);
    v146 = v204;
    if (v204)
    {
      v147 = (unint64_t *)&v204->__shared_owners_;
      do
        v148 = __ldaxr(v147);
      while (__stlxr(v148 - 1, v147));
      if (!v148)
      {
        ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
        std::__shared_weak_count::__release_weak(v146);
      }
    }
    v149 = v227;
    v203 = 0;
    v204 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v200, "post_scale");
    ((void (*)(uint64_t **, uint64_t *, void **, _QWORD, uint64_t, _QWORD))(*v149)[21])(v149, &v203, &v200, *(_QWORD *)(v209 + 16), 4 * *(int *)(v209 + 8), 0);
    if (v202 < 0)
      operator delete(v200);
    v115 = v204;
    if (v204)
    {
      v150 = (unint64_t *)&v204->__shared_owners_;
      do
        v117 = __ldaxr(v150);
      while (__stlxr(v117 - 1, v150));
LABEL_170:
      if (!v117)
      {
        ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
        std::__shared_weak_count::__release_weak(v115);
      }
    }
LABEL_172:
    v151 = v208;
    if (v208)
    {
      v152 = (unint64_t *)&v208->__shared_owners_;
      do
        v153 = __ldaxr(v152);
      while (__stlxr(v153 - 1, v152));
      if (!v153)
      {
        ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
        std::__shared_weak_count::__release_weak(v151);
      }
    }
    v154 = v210;
    if (v210)
    {
      v155 = (unint64_t *)&v210->__shared_owners_;
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
      }
    }
    v157 = v212;
    if (v212)
    {
      v158 = (unint64_t *)&v212->__shared_owners_;
      do
        v159 = __ldaxr(v158);
      while (__stlxr(v159 - 1, v158));
      if (!v159)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    if (v217)
    {
      v218 = v217;
      operator delete(v217);
    }
    v160 = v220;
    if (v220)
    {
      v161 = (unint64_t *)&v220->__shared_owners_;
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
    v163 = v222;
    if (v222)
    {
      v164 = (unint64_t *)&v222->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
        std::__shared_weak_count::__release_weak(v163);
      }
    }
    v166 = v224;
    if (v224)
    {
      v167 = (unint64_t *)&v224->__shared_owners_;
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    v138 = v226;
    if (v226)
    {
      v169 = (unint64_t *)&v226->__shared_owners_;
      do
        v140 = __ldaxr(v169);
      while (__stlxr(v140 - 1, v169));
      goto LABEL_207;
    }
    goto LABEL_209;
  }
LABEL_243:
  if ((v2 & 1) != 0)
  {
    std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(v4[45]);
    v4[45] = 0;
    v4[46] = 0;
    v4[44] = (uint64_t *)(v4 + 45);
    v4 = *a1;
  }
  v190 = (std::__shared_weak_count *)a1[1];
  v197[0] = v4;
  v197[1] = v190;
  if (v190)
  {
    v191 = (unint64_t *)&v190->__shared_owners_;
    do
      v192 = __ldxr(v191);
    while (__stxr(v192 + 1, v191));
  }
  Espresso::convert_weights_to_fp16((uint64_t)v197);
  if (v190)
  {
    v193 = (unint64_t *)&v190->__shared_owners_;
    do
      v194 = __ldaxr(v193);
    while (__stlxr(v194 - 1, v193));
    if (!v194)
    {
      ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
      std::__shared_weak_count::__release_weak(v190);
    }
  }
}

void sub_191419604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,char a45)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::_fold_transform_params(const Espresso::net **a1@<X0>, _QWORD *a2@<X8>)
{
  const Espresso::net *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  const Espresso::net *v7[2];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)((char *)v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  Espresso::fold_transform_params(v7, 0, a2);
  if (v2)
  {
    v5 = (unint64_t *)((char *)v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(const Espresso::net *))(*(_QWORD *)v2 + 16))(v2);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
    }
  }
}

void sub_1914198B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::__shared_weak_count *espresso_set_mil_const_values(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  MIL::IRConstantDimension *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count_vtbl *v12;
  uint64_t v13;
  MIL::IRConstantDimension *v14;
  int32x4_t *v15;
  std::string::size_type v16;
  unint64_t v17;
  uint64_t v18;
  std::string::size_type size;
  std::string::size_type v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  char *v26;
  std::string::size_type v27;
  unint64_t v28;
  int v29;
  const void *v30;
  uint64_t v31;
  const void *v32;
  uint64_t v33;
  MIL::Fp16 *v34;
  uint64_t v35;
  uint64_t v36;
  const void *v43;
  uint64_t v44;
  _QWORD *v45;
  std::string::size_type v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint8x8_t v51;
  unint64_t v52;
  void **v53;
  char *v54;
  unint64_t v55;
  std::string::size_type v56;
  float v57;
  _BOOL8 v58;
  unint64_t v59;
  unint64_t v60;
  size_t v61;
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  __int128 v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  const std::__fs::filesystem::path *v74;
  unsigned __int8 v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::string *v81;
  uint64_t v82;
  std::string *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::string *v96;
  char *v97;
  void *v101[2];
  char v102;
  std::string v103;
  std::string v104;
  MIL::IRConstantDimension *v105;
  std::__shared_weak_count *v106;
  void *v107[2];
  __int128 v108;
  float v109;
  MIL::IRConstantDimension *v110;
  std::__shared_weak_count *v111;
  _QWORD v112[3];
  std::__fs::filesystem::path v113;
  std::string v114;
  std::string __p;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  int v120;
  std::string v121;
  std::string v122;
  std::string *v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v118);
  v10 = (MIL::IRConstantDimension *)v118;
  v110 = (MIL::IRConstantDimension *)v118;
  if ((_QWORD)v118)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v12 = (std::__shared_weak_count_vtbl *)v118;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v12;
  }
  else
  {
    v11 = 0;
  }
  v111 = v11;
  *(_OWORD *)v107 = 0u;
  v108 = 0u;
  v109 = 1.0;
  if (a4)
  {
    v97 = a2;
    v13 = 0;
    while (1)
    {
      v14 = v110;
      v15 = *(int32x4_t **)(a6 + 8 * v13);
      v113.__pn_.__r_.__value_.__r.__words[0] = 0;
      if (espresso_buffer_unpack_tensor_shape(v15, &v113, &v118))
        Espresso::throw_exception_selector<Espresso::invalid_state_error>("Failed to unpack espresso_buffer_t");
      memset(&v122, 0, sizeof(v122));
      if (v113.__pn_.__r_.__value_.__r.__words[0])
      {
        v16 = 0;
        v17 = 1;
        do
        {
          v18 = MIL::IRConstantDimension::Make(v14, *((MIL::MILContext **)&v118 + v16));
          v6 = v18;
          size = v122.__r_.__value_.__l.__size_;
          if (v122.__r_.__value_.__l.__size_ >= v122.__r_.__value_.__r.__words[2])
          {
            v21 = (uint64_t)(v122.__r_.__value_.__l.__size_ - v122.__r_.__value_.__r.__words[0]) >> 3;
            if ((unint64_t)(v21 + 1) >> 61)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v22 = (uint64_t)(v122.__r_.__value_.__r.__words[2] - v122.__r_.__value_.__r.__words[0]) >> 2;
            if (v22 <= v21 + 1)
              v22 = v21 + 1;
            if (v122.__r_.__value_.__r.__words[2] - v122.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23)
              v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v23);
            else
              v24 = 0;
            v25 = (unint64_t *)(v23 + 8 * v21);
            *v25 = v6;
            v20 = (std::string::size_type)(v25 + 1);
            v26 = (char *)v122.__r_.__value_.__l.__size_;
            v27 = v122.__r_.__value_.__r.__words[0];
            if (v122.__r_.__value_.__l.__size_ != v122.__r_.__value_.__r.__words[0])
            {
              do
              {
                v28 = *((_QWORD *)v26 - 1);
                v26 -= 8;
                *--v25 = v28;
              }
              while (v26 != (char *)v27);
              v26 = (char *)v122.__r_.__value_.__r.__words[0];
            }
            v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
            v122.__r_.__value_.__l.__size_ = v20;
            v122.__r_.__value_.__r.__words[2] = v23 + 8 * v24;
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_QWORD *)v122.__r_.__value_.__l.__size_ = v18;
            v20 = size + 8;
          }
          v122.__r_.__value_.__l.__size_ = v20;
          v17 *= *((_QWORD *)&v118 + v16++);
        }
        while (v16 < v113.__pn_.__r_.__value_.__r.__words[0]);
      }
      else
      {
        v17 = 1;
      }
      v29 = v15[10].i32[0];
      if (v29 > 131103)
      {
        if (v29 == 131104)
        {
          MIL::IRTensorValueType::MakeWithShape();
          v43 = (const void *)v15->i64[0];
          v44 = v15->i64[0] + 4 * v17;
          memset(&__p, 0, sizeof(__p));
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v43, v44, v17);
          MIL::IRTensorValueType::MakeInt32Value();
          v114.__r_.__value_.__r.__words[0] = v121.__r_.__value_.__r.__words[0];
          if (v121.__r_.__value_.__r.__words[0])
            goto LABEL_43;
        }
        else
        {
          if (v29 != 262152)
LABEL_170:
            Espresso::throw_exception_selector<Espresso::not_implemented_error>("Only storage type float32/float16/uint8/int32");
          MIL::IRTensorValueType::MakeWithShape();
          v32 = (const void *)v15->i64[0];
          v33 = v15->i64[0] + v17;
          memset(&__p, 0, sizeof(__p));
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v32, v33, v17);
          MIL::IRTensorValueType::MakeUInt8Value();
          v114.__r_.__value_.__r.__words[0] = v121.__r_.__value_.__r.__words[0];
          if (v121.__r_.__value_.__r.__words[0])
          {
LABEL_43:
            v45 = (_QWORD *)operator new();
            v46 = v121.__r_.__value_.__r.__words[0];
            v45[1] = 0;
            *v45 = &unk_1E2DC2BE0;
            v45[2] = 0;
            v45[3] = v46;
            goto LABEL_45;
          }
        }
      }
      else if (v29 == 65552)
      {
        MIL::IRTensorValueType::MakeWithShape();
        v34 = (MIL::Fp16 *)std::vector<MIL::Fp16>::vector(&__p, v17);
        if (v17)
        {
          v35 = 0;
          v36 = v15->i64[0];
          do
          {
            _H0 = *(_WORD *)(v36 + 2 * v35);
            __asm { FCVT            S0, H0; float }
            v34 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v34, _S0);
            *(_WORD *)(__p.__r_.__value_.__r.__words[0] + 2 * v35++) = (_WORD)v34;
          }
          while (v17 != v35);
        }
        MIL::IRTensorValueType::MakeFloat16Value();
        v114.__r_.__value_.__r.__words[0] = v121.__r_.__value_.__r.__words[0];
        if (v121.__r_.__value_.__r.__words[0])
          goto LABEL_43;
      }
      else
      {
        if (v29 != 65568)
          goto LABEL_170;
        MIL::IRTensorValueType::MakeWithShape();
        v30 = (const void *)v15->i64[0];
        v31 = v15->i64[0] + 4 * v17;
        memset(&__p, 0, sizeof(__p));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v30, v31, v17);
        MIL::IRTensorValueType::MakeFloat32Value();
        v114.__r_.__value_.__r.__words[0] = v121.__r_.__value_.__r.__words[0];
        if (v121.__r_.__value_.__r.__words[0])
          goto LABEL_43;
      }
      v45 = 0;
LABEL_45:
      v114.__r_.__value_.__l.__size_ = (std::string::size_type)v45;
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v122.__r_.__value_.__r.__words[0])
      {
        v122.__r_.__value_.__l.__size_ = v122.__r_.__value_.__r.__words[0];
        operator delete(v122.__r_.__value_.__l.__data_);
      }
      v47 = std::string::basic_string[abi:ne180100]<0>(&v122, *(char **)(a5 + 8 * v13));
      v48 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v47);
      v49 = v48;
      v50 = (unint64_t)v107[1];
      if (v107[1])
      {
        v51 = (uint8x8_t)vcnt_s8((int8x8_t)v107[1]);
        v51.i16[0] = vaddlv_u8(v51);
        v52 = v51.u32[0];
        if (v51.u32[0] > 1uLL)
        {
          v6 = v48;
          if ((void *)v48 >= v107[1])
            v6 = v48 % (unint64_t)v107[1];
        }
        else
        {
          v6 = ((unint64_t)v107[1] - 1) & v48;
        }
        v53 = (void **)*((_QWORD *)v107[0] + v6);
        if (v53)
        {
          v54 = (char *)*v53;
          if (*v53)
          {
            do
            {
              v55 = *((_QWORD *)v54 + 1);
              if (v55 == v49)
              {
                if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v54 + 16, (unsigned __int8 *)&v122))
                {
                  goto LABEL_87;
                }
              }
              else
              {
                if (v52 > 1)
                {
                  if (v55 >= v50)
                    v55 %= v50;
                }
                else
                {
                  v55 &= v50 - 1;
                }
                if (v55 != v6)
                  break;
              }
              v54 = *(char **)v54;
            }
            while (v54);
          }
        }
      }
      v54 = (char *)operator new(0x38uLL);
      *(_QWORD *)&v118 = v54;
      *((_QWORD *)&v118 + 1) = &v108;
      *(_QWORD *)v54 = 0;
      *((_QWORD *)v54 + 1) = v49;
      *((_OWORD *)v54 + 1) = *(_OWORD *)&v122.__r_.__value_.__l.__data_;
      v56 = v122.__r_.__value_.__r.__words[2];
      memset(&v122, 0, sizeof(v122));
      *((_QWORD *)v54 + 5) = 0;
      *((_QWORD *)v54 + 6) = 0;
      *((_QWORD *)v54 + 4) = v56;
      LOBYTE(v119) = 1;
      v57 = (float)(unint64_t)(*((_QWORD *)&v108 + 1) + 1);
      if (!v50 || (float)(v109 * (float)v50) < v57)
      {
        v58 = (v50 & (v50 - 1)) != 0;
        if (v50 < 3)
          v58 = 1;
        v59 = v58 | (2 * v50);
        v60 = vcvtps_u32_f32(v57 / v109);
        if (v59 <= v60)
          v61 = v60;
        else
          v61 = v59;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v107, v61);
        v50 = (unint64_t)v107[1];
        if (((unint64_t)v107[1] & ((unint64_t)v107[1] - 1)) != 0)
        {
          if ((void *)v49 >= v107[1])
            v6 = v49 % (unint64_t)v107[1];
          else
            v6 = v49;
        }
        else
        {
          v6 = ((unint64_t)v107[1] - 1) & v49;
        }
      }
      v62 = v107[0];
      v63 = (_QWORD *)*((_QWORD *)v107[0] + v6);
      if (v63)
      {
        *(_QWORD *)v54 = *v63;
      }
      else
      {
        *(_QWORD *)v54 = v108;
        *(_QWORD *)&v108 = v54;
        v62[v6] = &v108;
        if (!*(_QWORD *)v54)
          goto LABEL_86;
        v64 = *(_QWORD *)(*(_QWORD *)v54 + 8);
        if ((v50 & (v50 - 1)) != 0)
        {
          if (v64 >= v50)
            v64 %= v50;
        }
        else
        {
          v64 &= v50 - 1;
        }
        v63 = (char *)v107[0] + 8 * v64;
      }
      *v63 = v54;
LABEL_86:
      *(_QWORD *)&v118 = 0;
      ++*((_QWORD *)&v108 + 1);
      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v118);
LABEL_87:
      v65 = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
      *(_OWORD *)&v114.__r_.__value_.__l.__data_ = 0uLL;
      v66 = (std::__shared_weak_count *)*((_QWORD *)v54 + 6);
      *(_OWORD *)(v54 + 40) = v65;
      if (v66)
      {
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v68 = __ldaxr(p_shared_owners);
        while (__stlxr(v68 - 1, p_shared_owners));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      v69 = (std::__shared_weak_count *)v114.__r_.__value_.__l.__size_;
      if (v114.__r_.__value_.__l.__size_)
      {
        v70 = (unint64_t *)(v114.__r_.__value_.__l.__size_ + 8);
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if (++v13 == a4)
      {
        v10 = v110;
        v11 = v111;
        a2 = v97;
        break;
      }
    }
  }
  v105 = v10;
  v106 = v11;
  if (v11)
  {
    v72 = (unint64_t *)&v11->__shared_owners_;
    do
      v73 = __ldxr(v72);
    while (__stxr(v73 + 1, v72));
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, a1);
  std::string::basic_string[abi:ne180100]<0>(&v103, a2);
  std::string::basic_string[abi:ne180100]<0>(v101, a3);
  v74 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>((std::string *)&v118, &v103);
  std::__fs::filesystem::__status(v74, 0);
  v75 = v122.__r_.__value_.__s.__data_[0];
  if (SBYTE7(v119) < 0)
    operator delete((void *)v118);
  if (v75 && v75 != 255)
  {
    v96 = &v103;
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v96 = (std::string *)v103.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v118 = v96;
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Trying to write to existing MIL file: %s", &v118);
  }
  *(_QWORD *)&v116 = v10;
  *((_QWORD *)&v116 + 1) = v106;
  if (v106)
  {
    v76 = (unint64_t *)&v106->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  else
    __p = v104;
  Espresso::MILUtil::LoadProgram((MIL::ParserOptions *)&v117, &v116, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v116 + 1);
  if (*((_QWORD *)&v116 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v116 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v118 = 0u;
  v119 = 0u;
  v120 = 1065353216;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DAEE28;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)&v118;
  v123 = &v122;
  MIL::Util::Walk();
  v81 = v123;
  if (v123 == &v122)
  {
    v82 = 4;
    v81 = &v122;
  }
  else
  {
    if (!v123)
      goto LABEL_126;
    v82 = 5;
  }
  (*(void (**)(void))(v81->__r_.__value_.__r.__words[0] + 8 * v82))();
LABEL_126:
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v117 + 72))(v117) + 24) != 1)
    Espresso::throw_exception_selector<Espresso::unsupported_configuration_error>("Only programs with a single function are supported");
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB2C08;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)v107;
  v123 = &v122;
  MIL::Util::Rewrite();
  v83 = v123;
  if (v123 == &v122)
  {
    v84 = 4;
    v83 = &v122;
  }
  else
  {
    if (!v123)
      goto LABEL_132;
    v84 = 5;
  }
  (*(void (**)(void))(v83->__r_.__value_.__r.__words[0] + 8 * v84))();
LABEL_132:
  Espresso::MILES::SerializeWeights(v117, (std::string::size_type)v101, (std::string::size_type)&v118);
  v85 = v117;
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v122, v103.__r_.__value_.__l.__data_, v103.__r_.__value_.__l.__size_);
  else
    v122 = v103;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v113.__pn_, &v103);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v121, &v113);
  v86 = SHIBYTE(v121.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v121.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v114, v121.__r_.__value_.__l.__data_, v121.__r_.__value_.__l.__size_);
  else
    v114 = v121;
  memset(v112, 0, sizeof(v112));
  Espresso::MILUtil::SerializeProgram(v85, (uint64_t)&v122, (uint64_t)&v114, (uint64_t)v112, 0, 0);
  if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v114.__r_.__value_.__l.__data_);
    if ((v86 & 0x80000000) == 0)
      goto LABEL_140;
  }
  else if ((v86 & 0x80000000) == 0)
  {
    goto LABEL_140;
  }
  operator delete(v121.__r_.__value_.__l.__data_);
LABEL_140:
  if (SHIBYTE(v113.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v113.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table((uint64_t)&v118);
  v87 = v117;
  v117 = 0;
  if (v87)
    (*(void (**)(uint64_t))(*(_QWORD *)v87 + 8))(v87);
  if (v102 < 0)
    operator delete(v101[0]);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v88 = v106;
  if (v106)
  {
    v89 = (unint64_t *)&v106->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
    v88 = 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node((_QWORD *)v108);
  v91 = v107[0];
  v107[0] = 0;
  if (v91)
    operator delete(v91);
  v92 = v111;
  if (v111)
  {
    v93 = (unint64_t *)&v111->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  return v88;
}

void sub_19141A428(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  __int128 a71;
  uint64_t v71;
  uint64_t v74;
  Espresso *v75;
  const char *v76;
  NSObject *v77;
  uint64_t v78;

  operator delete(*(void **)(v71 - 176));
  if (a54 < 0)
    operator delete(__p);
  if (*(char *)(v71 - 121) < 0)
    operator delete(*(void **)(v71 - 144));
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::string>>>>::~__hash_table(v71 - 256);
  v74 = a64;
  a64 = 0;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  if (a23 < 0)
    operator delete(a18);
  if (a29 < 0)
    operator delete(a24);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a2 == 1)
  {
    v75 = (Espresso *)__cxa_begin_catch(a1);
    v77 = Espresso::espresso_os_log_subsystem(v75, v76);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
    {
      v78 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v75 + 16))(v75);
      *(_DWORD *)(v71 - 176) = 136315138;
      *(_QWORD *)((char *)&a71 + 4) = v78;
      _os_log_debug_impl(&dword_190DAF000, v77, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)(v71 - 176), 0xCu);
    }
    (*(void (**)(Espresso *))(*(_QWORD *)v75 + 24))(v75);
    __cxa_end_catch();
    JUMPOUT(0x19141A318);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::~__hash_table((uint64_t)&a38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a44);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<MIL::Fp16>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_19141A7CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19141A844(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

char *std::vector<MIL::Fp16>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

uint64_t espresso_generate_training_program(char *a1, std::string *a2)
{
  std::string::size_type v3;
  std::__shared_weak_count *v4;
  std::string::size_type v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  MIL::IRObject *v11;
  MIL::IRObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD v21[3];
  std::string v22;
  std::string v23;
  void *v24[2];
  char v25;
  MIL::IRObject *v26;
  uint64_t v27;
  void *__p[2];
  char v29;
  __int128 v30;
  _QWORD v31[2];
  std::__shared_weak_count *v32;
  std::string *v33;
  std::__fs::filesystem::path v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33 = a2;
  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v34);
  v3 = v34.__pn_.__r_.__value_.__r.__words[0];
  v31[1] = v34.__pn_.__r_.__value_.__r.__words[0];
  if (v34.__pn_.__r_.__value_.__r.__words[0])
  {
    v4 = (std::__shared_weak_count *)operator new();
    v5 = v34.__pn_.__r_.__value_.__r.__words[0];
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
    v32 = v4;
    *(_QWORD *)&v30 = v3;
    *((_QWORD *)&v30 + 1) = v4;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  else
  {
    v32 = 0;
    v30 = 0uLL;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a1);
  Espresso::MILUtil::LoadProgram((MIL::ParserOptions *)v31, &v30, (uint64_t)__p);
  if (v29 < 0)
    operator delete(__p[0]);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (MIL::IRObject *)v31[0];
  v31[0] = 0;
  v26 = v11;
  Espresso::MILES::GenerateTrainingProgram((uint64_t)&v27, &v26);
  v12 = v26;
  v26 = 0;
  if (v12)
    (*(void (**)(MIL::IRObject *))(*(_QWORD *)v12 + 8))(v12);
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&v34.__pn_, &v33);
  v13 = v27;
  std::string::basic_string[abi:ne180100]<0>(v24, (char *)v33);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((uint64_t)&v22, &v34);
  v14 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v23, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  else
    v23 = v22;
  memset(v21, 0, sizeof(v21));
  Espresso::MILUtil::SerializeProgram(v13, (uint64_t)v24, (uint64_t)&v23, (uint64_t)v21, 0, 0);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_20;
  }
  else if ((v14 & 0x80000000) == 0)
  {
    goto LABEL_20;
  }
  operator delete(v22.__r_.__value_.__l.__data_);
LABEL_20:
  if (v25 < 0)
    operator delete(v24[0]);
  if (SHIBYTE(v34.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__pn_.__r_.__value_.__l.__data_);
  v15 = v27;
  v27 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = v31[0];
  v31[0] = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = v32;
  if (v32)
  {
    v18 = (unint64_t *)&v32->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return 0;
}

void sub_19141AB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v38;
  Espresso *v39;
  const char *v40;
  NSObject *v41;
  uint64_t v42;

  operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v35 - 41) < 0)
    operator delete(*(void **)(v35 - 64));
  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 8))(a29);
  v38 = *(_QWORD *)(v35 - 96);
  *(_QWORD *)(v35 - 96) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 - 88);
  if (a2 == 1)
  {
    v39 = (Espresso *)__cxa_begin_catch(a1);
    v41 = Espresso::espresso_os_log_subsystem(v39, v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
    {
      v42 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v39 + 16))(v39);
      *(_DWORD *)(v35 - 64) = 136315138;
      *(_QWORD *)(v35 - 60) = v42;
      _os_log_debug_impl(&dword_190DAF000, v41, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)(v35 - 64), 0xCu);
    }
    (*(void (**)(Espresso *))(*(_QWORD *)v39 + 24))(v39);
    __cxa_end_catch();
    JUMPOUT(0x19141AB18);
  }
  _Unwind_Resume(a1);
}

void sub_19141AD14()
{
  JUMPOUT(0x19141AC7CLL);
}

void Espresso::MPSGraphCompilerEngine::blob_container::~blob_container(id *this)
{

  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)this);
}

{

  Espresso::abstract_blob_container::~abstract_blob_container((Espresso::abstract_blob_container *)this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphCompilerEngine::blob_container::resize(uint64_t a1, const Espresso::layer_shape *a2, uint64_t a3)
{
  _DWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  char v29[40];
  void *__p;
  void *v31;
  char v32[20];
  int v33;

  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v6 = *(_DWORD **)a3;
  if (*(_QWORD *)a3 && *((_BYTE *)v6 + 8))
    *(_DWORD *)(a1 + 160) = v6[3];
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), (uint64_t)v6, *(_QWORD *)(a3 + 8));
  if (*(_QWORD *)a3)
  {
    v8 = v7;
    v27 = 0;
    v28 = 0;
    if (v7)
    {
      v9 = *((_BYTE *)v7 + 88) != 0;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v27, v7[13], v7[14]);
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v27 = 0;
    v28 = 0;
  }
  *(_QWORD *)(a1 + 184) = 16;
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, a2);
  v11 = *(_DWORD *)(a1 + 8);
  v10 = *(_DWORD *)(a1 + 12);
  v12 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 20);
  v14 = *(_DWORD *)(a1 + 24);
  Espresso::abstract_blob_container::shape(v29, a1);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v32, (const Espresso::layer_shape *)v29, 0);
  if (v14 <= 1)
    v14 = 1;
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  if (v33 == 3)
  {
    v11 = *(_DWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 12);
    v15 = *(_DWORD *)(a1 + 24);
    if (v15 <= 1)
      v15 = 1;
    v16 = v15 * *(_DWORD *)(a1 + 20);
  }
  else
  {
    v16 = v13 * v12 * v14;
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) - 1;
  if (v17 > 0xC)
    v18 = 4;
  else
    v18 = qword_191AC0CA0[v17];
  v19 = *(_QWORD *)(a1 + 184);
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) - 1;
  if (v20 > 0xC)
    v21 = 4;
  else
    v21 = qword_191AC0CA0[v20];
  v22 = v19 + v19 * ((v18 * v11 - 1) / v19);
  *(_DWORD *)(a1 + 176) = v22 / v21;
  if (v9)
  {
    v23 = v22 * v10 * v16;
    if (!(*(_DWORD *)(a1 + 16)
         * *(_DWORD *)(a1 + 20)
         * *(_DWORD *)(a1 + 12)
         * *(_DWORD *)(a1 + 8)
         * *(_DWORD *)(a1 + 24)))
      v23 = 0;
    v8[12] = v23;
  }
  v24 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_19141AFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSGraphCompilerEngine::blob_container::platform(Espresso::MPSGraphCompilerEngine::blob_container *this)
{
  return (***(uint64_t (****)(_QWORD))(*((_QWORD *)this + 9) + 8))(*(_QWORD *)(*((_QWORD *)this + 9) + 8));
}

uint64_t Espresso::MPSGraphCompilerEngine::blob_container::compute_path(Espresso::MPSGraphCompilerEngine::blob_container *this)
{
  return *((unsigned int *)this + 40);
}

uint64_t Espresso::abstract_blob_container::unsafe_opaque_raw_pointer(Espresso::abstract_blob_container *this)
{
  return 0;
}

uint64_t Espresso::abstract_blob_container::__copy_from()
{
  return 0;
}

void Espresso::MPSGraphCompilerEngine::blob_container_options::~blob_container_options(Espresso::MPSGraphCompilerEngine::blob_container_options *this)
{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
}

{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
  JUMPOUT(0x19401CD90);
}

id espresso_plan_finish_profiling(Espresso::profiler_t **a1, const char *a2)
{
  NSObject *v3;
  Espresso::profiler_t *v4;
  id v5;
  void *v6;
  Espresso *v7;
  const char *v8;
  NSObject *v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t **v13;
  int *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t **v17;
  BOOL v18;
  int v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  int v23;
  id v24;
  const Espresso::profiler_t::entry_t *v25;
  void *v26;
  _BYTE *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39;
  double *v40;
  double *v41;
  double v42;
  double v43;
  void *v44;
  id v45;
  void *v46;
  _BYTE *v47;
  void *v48;
  void *v49;
  uint64_t i;
  void *v51;
  void *v52;
  uint64_t *v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  const char *v59;
  NSObject *v60;
  _QWORD *v61;
  void *v62;
  Espresso *v63;
  const char *v64;
  NSObject *v65;
  void *v66;
  _QWORD *v67;
  void *v68;
  int v69;
  Espresso *v70;
  const char *v71;
  NSObject *j;
  void *v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  Espresso::profiler_t *v78;
  EspressoProfilingNetworkANEInfo *v79;
  void *v80;
  unint64_t v81;
  void *v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  EspressoProfilingANEcompilerAnalytics *v88;
  Espresso *v89;
  const char *v90;
  unint64_t v91;
  uint64_t v92;
  NSObject *v93;
  char *v94;
  char *v95;
  int v96;
  void *v97;
  Espresso::profiler_t *v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  const char *v107;
  void *v108;
  uint64_t *v109;
  NSObject *v110;
  void *v111;
  void *v112;
  void *v113;
  id v114;
  Espresso *v115;
  const char *v116;
  NSObject *v117;
  char *v118;
  char *v119;
  char *v120;
  int v121;
  uint64_t *v122;
  void *v123;
  void *v124;
  Espresso *v125;
  const char *v126;
  NSObject *v127;
  Espresso *v128;
  const char *v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  NSObject *v133;
  const Espresso::profiler_t::entry_t *v135;
  id v136;
  _DWORD *v137;
  os_log_t log;
  NSObject *loga;
  Espresso::profiler_t **v140;
  void *v141;
  void *v142;
  const Espresso::profiler_t::entry_t *v143;
  const Espresso::profiler_t::entry_t *v144;
  uint64_t **v145;
  uint64_t *v146;
  uint64_t v147;
  _QWORD **v148;
  _QWORD *v149[2];
  __int128 *v150;
  _BYTE __p[12];
  __int16 v152;
  int v153;
  char v154;
  _BYTE buf[22];
  char v156;
  void *v157;
  char v158;
  double v159;
  unsigned int v160;
  void *v161;
  double *v162;
  uint64_t *v163;
  uint64_t *v164;
  unsigned __int8 v165;
  unsigned __int8 v166;
  unsigned __int8 v167;
  void *v168;
  char v169;
  uint64_t v170;

  v170 = *MEMORY[0x1E0C80C00];
  Espresso::espresso_os_log_subsystem((Espresso *)a1, a2);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_debug_impl(&dword_190DAF000, v3, OS_LOG_TYPE_DEBUG, "EspressoProfiler: espresso_plan_finish_profiling: Start", buf, 2u);
  }

  v4 = a1[131];
  if (v4)
  {
    Espresso::profiler_t::get_result(v4, &v143);
    v136 = (id)objc_opt_new();
    v5 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v6 = (void *)objc_msgSend(v5, "initWithCapacity:", 0x86BCA1AF286BCA1BLL * ((v144 - v143) >> 3));
    objc_msgSend(v136, "setLayers:", v6);

    Espresso::espresso_os_log_subsystem(v7, v8);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_190DAF000, v9, OS_LOG_TYPE_DEBUG, "EspressoProfiler: format_result] Start Postprocessing profiling data", buf, 2u);
    }

    v149[0] = 0;
    v149[1] = 0;
    v148 = v149;
    objc_msgSend(v136, "layers");
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = operator new(0x14uLL);
    v11 = 0;
    v12 = 0;
    v140 = a1 + 131;
    v10[4] = 50008;
    v137 = v10;
    *(_OWORD *)v10 = xmmword_191A9D390;
    v146 = 0;
    v147 = 0;
    v145 = &v146;
    v13 = &v146;
    while (1)
    {
      v14 = (int *)((char *)&unk_191A9D3A4 + 8 * v12);
      v15 = &v146;
      if (v13 == &v146)
        goto LABEL_13;
      v16 = v11;
      v17 = &v146;
      if (v11)
      {
        do
        {
          v15 = (uint64_t **)v16;
          v16 = (uint64_t *)v16[1];
        }
        while (v16);
      }
      else
      {
        do
        {
          v15 = (uint64_t **)v17[2];
          v18 = *v15 == (uint64_t *)v17;
          v17 = v15;
        }
        while (v18);
      }
      v19 = *v14;
      if (*((_DWORD *)v15 + 7) < *v14)
      {
LABEL_13:
        v20 = v11 ? v15 : &v146;
        v21 = v11 ? v15 + 1 : &v146;
      }
      else
      {
        v20 = &v146;
        v21 = &v146;
        if (v11)
        {
          v21 = &v146;
          while (1)
          {
            while (1)
            {
              v20 = (uint64_t **)v11;
              v23 = *((_DWORD *)v11 + 7);
              if (v19 >= v23)
                break;
              v11 = *v20;
              v21 = v20;
              if (!*v20)
                goto LABEL_20;
            }
            if (v23 >= v19)
              break;
            v21 = v20 + 1;
            v11 = v20[1];
            if (!v11)
              goto LABEL_20;
          }
        }
      }
      if (!*v21)
      {
LABEL_20:
        v22 = (uint64_t *)operator new(0x28uLL);
        *(uint64_t *)((char *)v22 + 28) = *(_QWORD *)v14;
        *v22 = 0;
        v22[1] = 0;
        v22[2] = (uint64_t)v20;
        *v21 = v22;
        if (*v145)
        {
          v145 = (uint64_t **)*v145;
          v22 = *v21;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v146, v22);
        ++v147;
      }
      if (++v12 == 5)
        break;
      v13 = v145;
      v11 = v146;
    }
    v24 = objc_alloc(MEMORY[0x1E0C99E08]);
    v142 = (void *)objc_msgSend(v24, "initWithCapacity:", 0x86BCA1AF286BCA1BLL * ((v144 - v143) >> 3));
    v25 = v143;
    v135 = v144;
    if (v143 == v144)
    {
      log = 0;
    }
    else
    {
      log = 0;
      do
      {
        Espresso::profiler_t::entry_t::entry_t((Espresso::profiler_t::entry_t *)buf, v25);
        v26 = (void *)objc_opt_new();
        if (v156 >= 0)
          v27 = &buf[8];
        else
          v27 = *(_BYTE **)&buf[8];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v27);
        v28 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "setName:", v28);

        objc_msgSend(v26, "setAverage_runtime:", v159);
        objc_msgSend(v26, "setSelected_runtime_engine:", v160);
        if (v169 >= 0)
          v29 = &v168;
        else
          v29 = v168;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v29);
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v26, "setDebug_name:", v30);

        v31 = (void *)objc_opt_new();
        v32 = (void *)objc_opt_new();
        objc_msgSend(v32, "setSupported:", v165);
        objc_msgSend(v32, "setExists:", v166);
        objc_msgSend(v32, "setInternal_layer:", v167);
        if (v158 >= 0)
          v33 = &v157;
        else
          v33 = v157;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v33);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v32, "setType:", v34);

        objc_msgSend(v32, "setHas_perf_warning:", v163 == v164);
        v35 = (void *)objc_opt_new();
        v36 = v163;
        v37 = v164;
        while (v36 != v37)
        {
          v38 = v36;
          if (*((char *)v36 + 23) < 0)
            v38 = (uint64_t *)*v36;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v38);
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "addObject:", v39);

          v36 += 14;
        }
        objc_msgSend(v32, "setError_public:", v35);
        objc_msgSend(v32, "setError_private:", v35);
        objc_msgSend(v26, "setMain_engine_support:", v32);
        v40 = (double *)v161;
        v41 = v162;
        while (v40 != v41)
        {
          v43 = *v40;
          v42 = v40[1];
          v44 = (void *)objc_opt_new();
          objc_msgSend(v44, "setStart_t:", v43);
          objc_msgSend(v44, "setEnd_t:", v42);
          objc_msgSend(v31, "addObject:", v44);

          v40 += 2;
        }
        objc_msgSend(v26, "setRuntimes:", v31);
        objc_msgSend(v26, "name");
        v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v45, "UTF8String"));

        v150 = (__int128 *)__p;
        std::__tree<std::__value_type<std::string,unsigned long>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned long>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v148, __p, &v150)[7] = log;
        v46 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 5);
        if (v156 >= 0)
          v47 = &buf[8];
        else
          v47 = *(_BYTE **)&buf[8];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v47);
        v48 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v142, "setObject:forKeyedSubscript:", v46, v48);

        objc_msgSend(v136, "layers");
        v49 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v49, "addObject:", v26);

        if (v154 < 0)
          operator delete(*(void **)__p);

        if (v169 < 0)
          operator delete(v168);
        *(_QWORD *)__p = &v163;
        std::vector<Espresso::base_kernel::validate_for_engine_warning_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v161)
        {
          v162 = (double *)v161;
          operator delete(v161);
        }
        if (v158 < 0)
          operator delete(v157);
        if (v156 < 0)
          operator delete(*(void **)&buf[8]);
        log = (os_log_t)((char *)log + 1);
        v25 = (const Espresso::profiler_t::entry_t *)((char *)v25 + 152);
      }
      while (v25 != v135);
    }
    for (i = 0; i != 5; ++i)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", Espresso::keys_translation::c_api_engine_from_cpp_platform((Espresso::keys_translation *)v137[i]));
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v51, "stringValue");
      v52 = (void *)objc_claimAutoreleasedReturnValue();

      v53 = v146;
      if (!v146)
LABEL_155:
        std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
      v54 = v137[i];
      while (1)
      {
        while (1)
        {
          v55 = *((_DWORD *)v53 + 7);
          if (v54 >= v55)
            break;
          v53 = (uint64_t *)*v53;
          if (!v53)
            goto LABEL_155;
        }
        if (v55 >= v54)
          break;
        v53 = (uint64_t *)v53[1];
        if (!v53)
          goto LABEL_155;
      }
      Espresso::profiler_t::results_for_platform_and_compute_path(*v140, v54, *((_DWORD *)v53 + 8), buf);
      v57 = *(_QWORD *)buf;
      v56 = *(_QWORD *)&buf[8];
      while (v57 != v56)
      {
        v58 = (_QWORD *)(v57 + 8);
        if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v149[0], (_QWORD *)(v57 + 8)))
        {
          objc_msgSend(v141, "objectAtIndex:", *(_QWORD *)std::map<std::string,Espresso::blob_numerical_properties>::at((uint64_t)&v148, (_QWORD *)(v57 + 8)));
          v60 = objc_claimAutoreleasedReturnValue();
          v61 = (_QWORD *)(v57 + 8);
          if (*(char *)(v57 + 31) < 0)
            v61 = (_QWORD *)*v58;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v61);
          v62 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v142, "objectForKey:", v62);
          v63 = (Espresso *)objc_claimAutoreleasedReturnValue();

          if (!v63)
          {
            v63 = (Espresso *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99E08]), "initWithCapacity:", 5);
            Espresso::espresso_os_log_subsystem(v63, v64);
            v65 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(v57 + 31) < 0)
                v58 = (_QWORD *)*v58;
              *(_DWORD *)__p = 136315138;
              *(_QWORD *)&__p[4] = v58;
              _os_log_debug_impl(&dword_190DAF000, v65, OS_LOG_TYPE_DEBUG, "No entry found for %s; creating dictionary.",
                __p,
                0xCu);
            }

          }
          v66 = (void *)objc_opt_new();
          objc_msgSend(v66, "setExists:", *(unsigned __int8 *)(v57 + 121));
          objc_msgSend(v66, "setSupported:", *(unsigned __int8 *)(v57 + 120));
          v67 = (_QWORD *)(v57 + 32);
          if (*(char *)(v57 + 55) < 0)
            v67 = (_QWORD *)*v67;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", v67, objc_msgSend(MEMORY[0x1E0CB3940], "defaultCStringEncoding"));
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v66, "setType:", v68);

          objc_msgSend(v66, "setInternal_layer:", 0);
          -[Espresso setObject:forKey:](v63, "setObject:forKey:", v66, v52);
          -[NSObject setPer_platform_support:](v60, "setPer_platform_support:", v63);

        }
        else
        {
          Espresso::espresso_os_log_subsystem(0, v59);
          v60 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEBUG))
          {
            if (*(char *)(v57 + 31) < 0)
              v58 = (_QWORD *)*v58;
            v69 = v137[i];
            *(_DWORD *)__p = 136315394;
            *(_QWORD *)&__p[4] = v58;
            v152 = 1024;
            v153 = v69;
            _os_log_debug_impl(&dword_190DAF000, v60, OS_LOG_TYPE_DEBUG, "Failed to find layer name %s for platform %d", __p, 0x12u);
          }
        }

        v57 += 152;
      }
      *(_QWORD *)__p = buf;
      std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);

    }
    if (log)
    {
      for (j = 0; j != log; j = ((char *)j + 1))
      {
        objc_msgSend(v136, "layers");
        v73 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v73, "objectAtIndex:", j);
        v74 = (void *)objc_claimAutoreleasedReturnValue();

        objc_msgSend(v74, "name");
        v75 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v142, "objectForKey:", v75);
        v76 = (void *)objc_claimAutoreleasedReturnValue();
        v77 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D80]), "initWithDictionary:", v76);
        objc_msgSend(v74, "setPer_platform_support:", v77);

      }
    }
    v78 = *v140;
    if (*((_QWORD *)*v140 + 2) != *((_QWORD *)*v140 + 1))
    {
      v79 = objc_alloc_init(EspressoProfilingNetworkANEInfo);
      objc_msgSend(v136, "setAne_performance_info:", v79);

      objc_msgSend(v136, "ane_performance_info");
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v80, "setTotal_ane_time_ns:", 0);

      if (*((_QWORD *)*v140 + 2) != *((_QWORD *)*v140 + 1))
      {
        v81 = 0;
        do
        {
          objc_msgSend(v136, "ane_performance_info");
          v82 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v82, "setTotal_ane_time_ns:", *(_QWORD *)(*((_QWORD *)*v140 + 1) + 8 * v81) + objc_msgSend(v82, "total_ane_time_ns"));

          ++v81;
        }
        while (v81 < (uint64_t)(*((_QWORD *)*v140 + 2) - *((_QWORD *)*v140 + 1)) >> 3);
      }
      objc_msgSend(v136, "ane_performance_info");
      v83 = (void *)objc_claimAutoreleasedReturnValue();
      v84 = objc_msgSend(v83, "total_ane_time_ns");
      v86 = *((_QWORD *)*v140 + 1);
      v85 = *((_QWORD *)*v140 + 2);
      objc_msgSend(v136, "ane_performance_info");
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v87, "setAne_time_per_eval_ns:", v84 / ((v85 - v86) >> 3));

      v78 = *v140;
    }
    if (*((_QWORD *)v78 + 5) == *((_QWORD *)v78 + 4))
    {
      Espresso::espresso_os_log_subsystem(v70, v71);
      loga = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl(&dword_190DAF000, loga, OS_LOG_TYPE_DEBUG, "[EspressoProfiling::format_result] No compiler analytics found", buf, 2u);
      }
    }
    else
    {
      v88 = objc_alloc_init(EspressoProfilingANEcompilerAnalytics);
      objc_msgSend(v136, "setAne_compiler_analytics:", v88);

      v89 = (Espresso *)objc_msgSend(MEMORY[0x1E0C9AA60], "mutableCopy");
      loga = v89;
      if (*((_QWORD *)*v140 + 5) != *((_QWORD *)*v140 + 4))
      {
        v91 = 0;
        v92 = 47;
        while (1)
        {
          Espresso::espresso_os_log_subsystem(v89, v90);
          v93 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v93, OS_LOG_TYPE_DEBUG))
          {
            v118 = (char *)(*((_QWORD *)*v140 + 4) + v92);
            v119 = v118 - 47;
            if (*(v118 - 24) < 0)
              v119 = *(char **)v119;
            v121 = *v118;
            v120 = v118 - 23;
            if (v121 < 0)
              v120 = *(char **)v120;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v119;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v120;
            _os_log_debug_impl(&dword_190DAF000, v93, OS_LOG_TYPE_DEBUG, "[EspressoProfiling::format_result] Compiler analytics: Segment: \"%s\" saved to: %s", buf, 0x16u);
          }

          v94 = (char *)(*((_QWORD *)*v140 + 4) + v92);
          v96 = *v94;
          v95 = v94 - 23;
          if (v96 < 0)
            v95 = *(char **)v95;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v95);
          v97 = (void *)objc_claimAutoreleasedReturnValue();
          -[NSObject addObject:](loga, "addObject:", v97);

          v98 = *v140;
          v99 = *((_QWORD *)*v140 + 4);
          v100 = (char *)(v99 + v92);
          v101 = (uint64_t *)(v99 + v92 - 23);
          if ((*(char *)(v99 + v92) & 0x80000000) == 0)
            break;
          if (*(_QWORD *)(v100 - 15))
          {
            v102 = *v101;
            goto LABEL_117;
          }
LABEL_130:
          ++v91;
          v92 += 48;
          if (v91 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v98 + 5) - v99) >> 4))
            goto LABEL_141;
        }
        v102 = v99 + v92 - 23;
        if (!*(_BYTE *)(v99 + v92))
          goto LABEL_130;
LABEL_117:
        v103 = (void *)MEMORY[0x1E0C99D50];
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v102);
        v104 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v103, "dataWithContentsOfFile:", v104);
        v105 = (void *)objc_claimAutoreleasedReturnValue();

        +[_ANECompilerAnalytics objectWithBuffer:](_ANECompilerAnalytics, "objectWithBuffer:", v105);
        v106 = (void *)objc_claimAutoreleasedReturnValue();
        v108 = v106;
        if (v106)
        {
          if (!objc_msgSend(v106, "populateAnalytics"))
          {
LABEL_129:

            v98 = *v140;
            v99 = *((_QWORD *)*v140 + 4);
            goto LABEL_130;
          }
          if (*v100 >= 0)
            v109 = v101;
          else
            v109 = *(uint64_t **)(v100 - 23);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%s.json"), v109);
          v110 = objc_claimAutoreleasedReturnValue();
          objc_msgSend(MEMORY[0x1E0C99E48], "outputStreamToFileAtPath:append:", v110, 0);
          v111 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v111, "open");
          v112 = (void *)MEMORY[0x1E0CB36D8];
          objc_msgSend(v108, "serialize");
          v113 = (void *)objc_claimAutoreleasedReturnValue();
          *(_QWORD *)__p = 0;
          objc_msgSend(v112, "writeJSONObject:toStream:options:error:", v113, v111, 9, __p);
          v114 = *(id *)__p;

          if (v114)
          {
            Espresso::espresso_os_log_subsystem(v115, v116);
            v117 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)&buf[4] = v110;
              _os_log_debug_impl(&dword_190DAF000, v117, OS_LOG_TYPE_DEBUG, "disassemble_analytics_buffer: Could not write compiler analytics to %@", buf, 0xCu);
            }

          }
          objc_msgSend(v111, "close");

        }
        else
        {
          Espresso::espresso_os_log_subsystem(0, v107);
          v110 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
          {
            if (*v100 >= 0)
              v122 = v101;
            else
              v122 = *(uint64_t **)(v100 - 23);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v122;
            _os_log_debug_impl(&dword_190DAF000, v110, OS_LOG_TYPE_DEBUG, "disassemble_analytics_buffer: Could not correctly parse compiler analytic buffer at %s", buf, 0xCu);
          }
        }

        goto LABEL_129;
      }
LABEL_141:
      v123 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D20]), "initWithArray:", loga);
      objc_msgSend(v136, "ane_compiler_analytics");
      v124 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v124, "setCompiler_analytics_file_names:", v123);

    }
    Espresso::espresso_os_log_subsystem(v125, v126);
    v127 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_190DAF000, v127, OS_LOG_TYPE_DEBUG, "EspressoProfiler: format_result] Exit format_result ", buf, 2u);
    }

    std::__tree<int>::destroy(v146);
    operator delete(v137);

    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy((char *)v149[0]);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v128 = (Espresso *)std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v140, (__int128 *)buf);
    v130 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v131 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
    Espresso::espresso_os_log_subsystem(v128, v129);
    v133 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl(&dword_190DAF000, v133, OS_LOG_TYPE_DEBUG, "EspressoProfiler: espresso_plan_finish_profiling: Exit", buf, 2u);
    }

    *(_QWORD *)buf = &v143;
    std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    v136 = 0;
  }
  return v136;
}

void sub_19141C334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *__p,void *a21,uint64_t a22,void *a23,void *a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29,uint64_t a30,char *a31,char *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  void *v42;
  void *v43;

  std::__tree<int>::destroy(a29);
  operator delete(__p);

  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(a32);
  a31 = &a25;
  std::vector<Espresso::profiler_t::entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  _Unwind_Resume(a1);
}

id espresso_plan_static_profiling_info(Espresso::profiler_t **a1)
{
  const char *v2;
  void *v3;

  if (espresso_plan_start_profiling_with_options(a1, 0))
  {
    v3 = 0;
  }
  else
  {
    espresso_plan_finish_profiling(a1, v2);
    v3 = (void *)objc_claimAutoreleasedReturnValue();
  }
  return v3;
}

id espresso_plan_auto_profile(EspressoLight::espresso_plan *a1)
{
  uint64_t v2;
  const char *v4;
  int v5;

  if (espresso_plan_start_profiling_with_options(a1, 0))
    return 0;
  v5 = 0;
  espresso_plan_perfbench(a1, v2, 0, (float *)&v5);
  espresso_plan_finish_profiling((Espresso::profiler_t **)a1, v4);
  return (id)objc_claimAutoreleasedReturnValue();
}

void Espresso::MPSGraphEngine::Kernels::cast_kernel::~cast_kernel(Espresso::MPSGraphEngine::Kernels::cast_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::cast_kernel::is_valid_for_engine(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  if ((*(_DWORD *)(a1 + 284) | 2) == 7)
    return 0;
  v2 = *(_DWORD *)(a1 + 280);
  v3 = v2 > 0xE;
  v4 = (0x400Bu >> v2) & 1;
  if (v3)
    return 0;
  else
    return v4;
}

void Espresso::pass_multi_head_prune_undeclared::~pass_multi_head_prune_undeclared(Espresso::pass_multi_head_prune_undeclared *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_multi_head_prune_undeclared::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_multi_head_prune_undeclared::run_on_network(Espresso::net *a1@<X1>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t *v34;
  uint64_t *v35;
  char v36;
  Espresso *v37;
  char v38;
  NSObject *v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t i;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const void *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  unint64_t v87;
  void *__p;
  uint64_t *v89;
  unint64_t v90;
  void *v91[5];
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;
  _BYTE buf[12];
  __int16 v95;
  int v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE6F8;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D9F338;
  v92 = v5 + 1;
  v93 = v5;
  if (!(***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 2) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8))
    || (***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 2) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8)) == 40000)
  {
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v5 + 1;
    *(_QWORD *)(a2 + 16) = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
    goto LABEL_122;
  }
  Espresso::net::get_producers_of_blobs(a1, (uint64_t)v91);
  __p = 0;
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v10 = *((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 5) != v10)
  {
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(v10 + 16 * v11);
      v13 = *(const void **)(v12 + 64);
      if (v13)
      {
        {
          break;
        }
      }
LABEL_37:
      v11 = v87 + 1;
      v87 = v11;
      v10 = *((_QWORD *)a1 + 4);
      if (v11 >= (*((_QWORD *)a1 + 5) - v10) >> 4)
        goto LABEL_102;
    }
    v14 = *(std::__shared_weak_count **)(v12 + 72);
    v86 = v14;
    if (v14)
    {
      v15 = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    *(_QWORD *)buf = &v87;
    v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v87, (uint64_t)&std::piecewise_construct, (uint64_t **)buf);
    if (v17[3] == v17[4])
    {
LABEL_32:
      if (v14)
      {
        v31 = (unint64_t *)&v14->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      goto LABEL_37;
    }
    *(_QWORD *)buf = &v87;
    *(_QWORD *)buf = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a1 + 56, &v87, (uint64_t)&std::piecewise_construct, (uint64_t **)buf)[3];
    v18 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v91, *(uint64_t *)buf, (uint64_t)&std::piecewise_construct, (__int128 **)buf)[5];
    v19 = *(_QWORD *)(*((_QWORD *)a1 + 4) + 16 * v18);
    v20 = *(const void **)(v19 + 64);
    if (v20
    {
      v22 = v21;
      v23 = *(std::__shared_weak_count **)(v19 + 72);
      v85 = v23;
      if (v23)
      {
        v24 = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v26 = (*(uint64_t (**)(_QWORD *))(*v21 + 320))(v21);
      v28 = *(char *)(v26 + 23);
      if (v28 < 0)
      {
        if (*(_QWORD *)(v26 + 8) == 12)
        {
          v26 = *(_QWORD *)v26;
LABEL_41:
          if (*(_QWORD *)v26 == 0x756F5F646E756F62 && *(_DWORD *)(v26 + 8) == 1953853556)
          {
            v35 = (uint64_t *)v22[54];
            v34 = (uint64_t *)v22[55];
            if (v35 == v34)
              goto LABEL_58;
            v36 = 0;
            do
            {
              v37 = (Espresso *)*((_QWORD *)a1 + 155);
              if (v37)
              {
                v37 = (Espresso *)(*(uint64_t (**)(Espresso *, _QWORD, uint64_t *))(*(_QWORD *)v37 + 152))(v37, *((unsigned int *)a1 + 312), v35);
                v38 = (char)v37;
              }
              else
              {
                v38 = 1;
              }
              Espresso::espresso_os_log_subsystem(v37, v27);
              v39 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
              {
                v40 = v35;
                if (*((char *)v35 + 23) < 0)
                  v40 = (uint64_t *)*v35;
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v40;
                v95 = 1024;
                v96 = v36 & 1;
                _os_log_debug_impl(&dword_190DAF000, v39, OS_LOG_TYPE_DEBUG, "pass_multi_head_prune_undeclared output=%s declared=%d", buf, 0x12u);
              }

              v36 |= v38;
              v35 += 3;
            }
            while (v35 != v34);
            if ((v36 & 1) == 0)
            {
LABEL_58:
              v41 = v89;
              v42 = v90;
              if ((unint64_t)v89 >= v90)
              {
                v44 = (uint64_t *)__p;
                v45 = ((char *)v89 - (_BYTE *)__p) >> 3;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 61)
LABEL_131:
                  std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                if ((uint64_t)(v90 - (_QWORD)__p) >> 2 > v46)
                  v46 = (uint64_t)(v90 - (_QWORD)__p) >> 2;
                if (v90 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
                  v47 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v47 = v46;
                if (v47)
                  v47 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v47);
                else
                  v48 = 0;
                v49 = (uint64_t *)(v47 + 8 * v45);
                *v49 = v18;
                v43 = (unint64_t *)(v49 + 1);
                while (v41 != v44)
                {
                  v50 = *--v41;
                  *--v49 = v50;
                }
                v42 = v47 + 8 * v48;
                __p = v49;
                v90 = v42;
                if (v44)
                  operator delete(v44);
              }
              else
              {
                *v89 = v18;
                v43 = (unint64_t *)(v41 + 1);
              }
              v89 = (uint64_t *)v43;
              v51 = v87;
              for (i = *((_QWORD *)a1 + 5) - *((_QWORD *)a1 + 4); v51 < i >> 4; i = *((_QWORD *)a1 + 5) - v62)
              {
                if ((unint64_t)v43 >= v42)
                {
                  v53 = (unint64_t *)__p;
                  v54 = ((char *)v43 - (_BYTE *)__p) >> 3;
                  v55 = v54 + 1;
                  if ((unint64_t)(v54 + 1) >> 61)
                    goto LABEL_131;
                  if ((uint64_t)(v42 - (_QWORD)__p) >> 2 > v55)
                    v55 = (uint64_t)(v42 - (_QWORD)__p) >> 2;
                  if (v42 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
                    v56 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v56 = v55;
                  if (v56)
                  {
                    v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v56);
                    v51 = v87;
                  }
                  else
                  {
                    v57 = 0;
                  }
                  v58 = (unint64_t *)(v56 + 8 * v54);
                  *v58 = v51;
                  v59 = v58 + 1;
                  while (v43 != v53)
                  {
                    v60 = *--v43;
                    *--v58 = v60;
                  }
                  v42 = v56 + 8 * v57;
                  __p = v58;
                  v90 = v42;
                  if (v53)
                    operator delete(v53);
                  v43 = v59;
                }
                else
                {
                  *v43++ = v51;
                }
                v89 = (uint64_t *)v43;
                v61 = v87;
                v62 = *((_QWORD *)a1 + 4);
                v63 = *(_QWORD *)(v62 + 16 * v87);
                v64 = *(const void **)(v63 + 64);
                if (v64
                {
                  v65 = *(std::__shared_weak_count **)(v63 + 72);
                  if (v65)
                  {
                    v66 = (unint64_t *)&v65->__shared_owners_;
                    do
                      v67 = __ldxr(v66);
                    while (__stxr(v67 + 1, v66));
                    do
                      v68 = __ldaxr(v66);
                    while (__stlxr(v68 - 1, v66));
                    if (!v68)
                    {
                      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
                      std::__shared_weak_count::__release_weak(v65);
                    }
                  }
                  break;
                }
                v51 = v61 + 1;
                v87 = v61 + 1;
              }
            }
          }
        }
      }
      else if (v28 == 12)
      {
        goto LABEL_41;
      }
    }
    else
    {
      v85 = 0;
    }
    if (v85)
    {
      v29 = (unint64_t *)&v85->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
        std::__shared_weak_count::__release_weak(v85);
      }
    }
    v14 = v86;
    goto LABEL_32;
  }
LABEL_102:
  if ((***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 2) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8)) == 10007
    || (***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 2) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 2) + 8)) == 10006)
  {
    if (v89 != __p)
    {
      v69 = ((char *)v89 - (_BYTE *)__p) >> 3;
      v70 = *((_QWORD *)a1 + 4);
      v71 = (char *)__p - 8;
      do
        *(_BYTE *)(*(_QWORD *)(v70 + 16 * *(_QWORD *)&v71[8 * v69--]) + 152) = 1;
      while (v69);
    }
  }
  else if ((***(unsigned int (****)(_QWORD))(*((_QWORD *)a1 + 2) + 8))(*(_QWORD *)(*((_QWORD *)a1 + 2)
                                                                                               + 8)) != 10008)
  {
    v82 = ((char *)v89 - (_BYTE *)__p) >> 3;
    v83 = (char *)__p - 8;
    while (v82)
    {
      v84 = v82 - 1;
      Espresso::net::remove_layer(a1, *(_QWORD *)&v83[8 * v82]);
      v82 = v84;
    }
  }
  v72 = v92;
  v73 = v93;
  if (v93)
  {
    v74 = (unint64_t *)&v93->__shared_owners_;
    do
      v75 = __ldxr(v74);
    while (__stxr(v75 + 1, v74));
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v72;
    *(_QWORD *)(a2 + 16) = v73;
    do
      v76 = __ldxr(v74);
    while (__stxr(v76 + 1, v74));
    do
      v77 = __ldaxr(v74);
    while (__stlxr(v77 - 1, v74));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  else
  {
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v72;
    *(_QWORD *)(a2 + 16) = 0;
  }
  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v91[2]);
  v78 = v91[0];
  v91[0] = 0;
  if (v78)
    operator delete(v78);
LABEL_122:
  v79 = v93;
  if (v93)
  {
    v80 = (unint64_t *)&v93->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_19141CF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::~__hash_table((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void Espresso::analysis_multi_head_prune_undeclared::~analysis_multi_head_prune_undeclared(Espresso::analysis_multi_head_prune_undeclared *this)
{
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::analysis_multi_head_prune_undeclared::deserialize()
{
  return 1;
}

void Espresso::analysis_multi_head_prune_undeclared::serialize(_QWORD *a1@<X8>)
{
  void *v3;
  void *__p[2];
  char v5;

  v3 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(a1, (uint64_t)v3, __p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_19141D038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE6F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::analysis_multi_head_prune_undeclared>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBE6F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::analysis_multi_head_prune_undeclared>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void ___Z23get_pyespresso_contextsv_block_invoke()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *context;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  v1 = (uint64_t *)(v0 + 8);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)v0 = v0 + 8;
  get_pyespresso_contexts(void)::pyespresso_contexts_ptr = v0;
  context = (uint64_t *)espresso_create_context(1u, 0xFFFFFFFF);
  LODWORD(v30) = 0;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 0, &v30)[5] = context;
  v3 = (uint64_t *)espresso_create_context(0x13880u, 0xFFFFFFFF);
  LODWORD(v30) = 80000;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 80000, &v30)[5] = v3;
  v4 = (uint64_t *)espresso_create_context(0x186A0u, 0xFFFFFFFF);
  LODWORD(v30) = 100000;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 100000, &v30)[5] = v4;
  v5 = (uint64_t *)espresso_create_context(0, 0xFFFFFFFF);
  LODWORD(v30) = 100;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 100, &v30)[5] = v5;
  v6 = (uint64_t *)espresso_create_context(8u, 0xFFFFFFFF);
  LODWORD(v30) = 6;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 6, &v30)[5] = v6;
  v7 = (uint64_t *)espresso_create_context(0x271Au, 0xFFFFFFFF);
  LODWORD(v30) = 10010;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 10010, &v30)[5] = v7;
  v8 = (uint64_t *)espresso_create_context(2u, 0xFFFFFFFF);
  LODWORD(v30) = 20000;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 20000, &v30)[5] = v8;
  v9 = (uint64_t *)espresso_create_context(5u, 0xFFFFFFFF);
  LODWORD(v30) = 50000;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 50000, &v30)[5] = v9;
  v10 = (uint64_t *)espresso_create_context(0xC352u, 0xFFFFFFFF);
  LODWORD(v30) = 50002;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 50002, &v30)[5] = v10;
  v11 = (uint64_t *)espresso_create_context(0xC355u, 0xFFFFFFFF);
  LODWORD(v30) = 50005;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 50005, &v30)[5] = v11;
  v12 = (uint64_t *)espresso_create_context(0xD1u, 0xFFFFFFFF);
  LODWORD(v30) = 90000;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 90000, &v30)[5] = v12;
  v13 = (uint64_t *)espresso_create_context(0x2718u, 0xFFFFFFFF);
  LODWORD(v30) = 10008;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 10008, &v30)[5] = v13;
  v14 = (uint64_t *)espresso_create_context(0x2716u, 0xFFFFFFFF);
  LODWORD(v30) = 10006;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 10006, &v30)[5] = v14;
  v15 = (uint64_t *)espresso_create_context(0x2717u, 0xFFFFFFFF);
  LODWORD(v30) = 10007;
  std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)v0, 10007, &v30)[5] = v15;
  v16 = *(uint64_t **)v0;
  if (*(_QWORD *)v0 != v0 + 8)
  {
    do
    {
      v17 = (uint64_t *)v16[1];
      if (v16[5])
      {
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v16[2];
            v19 = *v18 == (_QWORD)v16;
            v16 = v18;
          }
          while (!v19);
        }
      }
      else
      {
        v20 = v16;
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (uint64_t *)v20[2];
            v19 = *v18 == (_QWORD)v20;
            v20 = v18;
          }
          while (!v19);
        }
        if (*(uint64_t **)v0 == v16)
          *(_QWORD *)v0 = v18;
        v21 = *(uint64_t **)(v0 + 8);
        --*(_QWORD *)(v0 + 16);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v21, v16);
        operator delete(v16);
      }
      v16 = v18;
    }
    while (v18 != v1);
    v22 = *(uint64_t **)v0;
    if (*(uint64_t **)v0 != v1)
    {
      do
      {
        v23 = *((_DWORD *)v22 + 8);
        Espresso::get_internal_context((uint64_t **)v22[5], &v30);
        v24 = v30;
        if (v30)
        {
          *(_BYTE *)(v30 + 53) = 1;
          *(_BYTE *)(v24 + 44) = 0;
          if (v23)
          {
            if (v23 != 100)
              *(_BYTE *)(v24 + 56) = 1;
          }
        }
        v25 = v31;
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        v28 = (uint64_t *)v22[1];
        if (v28)
        {
          do
          {
            v29 = v28;
            v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (uint64_t *)v22[2];
            v19 = *v29 == (_QWORD)v22;
            v22 = v29;
          }
          while (!v19);
        }
        v22 = v29;
      }
      while (v29 != v1);
    }
  }
}

uint64_t **std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t espresso_wrap_blob(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  char v6[40];
  void *__p;
  void *v8;
  _BYTE __src[20];
  int v10;

  if (!*a1)
    return 0;
  v2 = operator new();
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  v3 = std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v2, *a1, a1[1]);
  Espresso::abstract_blob_container::shape(v6, *v3);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)__src, (const Espresso::layer_shape *)v6, 0);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
  v4 = v10;
  *(_DWORD *)(v2 + 16) = v10;
  if ((_DWORD)v4)
    memcpy((void *)(v2 + 20), __src, 4 * v4);
  return v2;
}

void sub_19141D654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EspressoWrap__set_option(const char *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  Espresso::abstract_context *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  Espresso::abstract_context *v13;
  std::__shared_weak_count *v14;

  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  v4 = get_pyespresso_contexts(void)::pyespresso_contexts_ptr + 8;
  v5 = *(_QWORD **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr;
  if (*(_QWORD *)get_pyespresso_contexts(void)::pyespresso_contexts_ptr != get_pyespresso_contexts(void)::pyespresso_contexts_ptr
                                                                          + 8)
  {
    do
    {
      Espresso::get_internal_context((uint64_t **)v5[5], &v13);
      v6 = v13;
      Espresso::abstract_context::set_generic_option(v13, a1, a2);
      (*(void (**)(Espresso::abstract_context *, const char *, uint64_t))(*(_QWORD *)v6 + 144))(v6, a1, a2);
      v7 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v12 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v12);
      }
      v5 = v11;
    }
    while (v11 != (_QWORD *)v4);
  }
}

void sub_19141D78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void EspressoWrap__setup_training()
{
  uint64_t v0;
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  v0 = get_pyespresso_contexts(void)::pyespresso_contexts_ptr + 8;
  v1 = *(_QWORD **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr;
  if (*(_QWORD *)get_pyespresso_contexts(void)::pyespresso_contexts_ptr != get_pyespresso_contexts(void)::pyespresso_contexts_ptr
                                                                          + 8)
  {
    do
    {
      Espresso::get_internal_context((uint64_t **)v1[5], &v8);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 96))(v8);
      v2 = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v4 = __ldaxr(p_shared_owners);
        while (__stlxr(v4 - 1, p_shared_owners));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      v5 = (_QWORD *)v1[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v1[2];
          v7 = *v6 == (_QWORD)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != (_QWORD *)v0);
  }
}

void sub_19141D890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_BYTE *EspressoWrap__Net__get_bottom_names(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  const void **v4;
  const void **v5;
  size_t v6;
  void **v7;
  const void *v8;
  void **v9;
  std::string::size_type v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  v2 = *(_QWORD *)(a1 + 144) + 56;
  __p[0] = (void *)a2;
  v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v2, a2, __p);
  v4 = (const void **)v3[3];
  v5 = (const void **)v3[4];
  if (v4 == v5)
    goto LABEL_23;
  do
  {
    if (*((char *)v4 + 23) >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = (size_t)v4[1];
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
    if ((v17 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v6)
    {
      if (*((char *)v4 + 23) >= 0)
        v8 = v4;
      else
        v8 = *v4;
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)v7 + v6) = 59;
    if ((v17 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = (std::string::size_type)__p[1];
    std::string::append(&v18, (const std::string::value_type *)v9, v10);
    if ((char)v17 < 0)
      operator delete(__p[0]);
    v4 += 3;
  }
  while (v4 != v5);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
LABEL_23:
    v15 = v18;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)v15.__r_.__value_.__r.__words[0];
    if (SLODWORD(v15.__r_.__value_.__r.__words[1]) >= 0x1FFF)
      v13 = 0x1FFFLL;
    else
      v13 = SLODWORD(v15.__r_.__value_.__r.__words[1]);
    memcpy(return_str(std::string)::buff, v15.__r_.__value_.__l.__data_, v13);
    return_str(std::string)::buff[v13] = 0;
    operator delete(v12);
  }
  else
  {
    v11 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    memcpy(return_str(std::string)::buff, &v15, HIBYTE(v15.__r_.__value_.__r.__words[2]));
    return_str(std::string)::buff[v11] = 0;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return return_str(std::string)::buff;
}

void sub_19141DA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *EspressoWrap__Net__get_top_names(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v3;
  const void **v4;
  const void **v5;
  size_t v6;
  void **v7;
  const void *v8;
  void **v9;
  std::string::size_type v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  std::string v15;
  void *__p[2];
  unsigned __int8 v17;
  std::string v18;

  memset(&v18, 0, sizeof(v18));
  v2 = *(_QWORD *)(a1 + 144) + 96;
  __p[0] = (void *)a2;
  v3 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(v2, a2, __p);
  v4 = (const void **)v3[3];
  v5 = (const void **)v3[4];
  if (v4 == v5)
    goto LABEL_23;
  do
  {
    if (*((char *)v4 + 23) >= 0)
      v6 = *((unsigned __int8 *)v4 + 23);
    else
      v6 = (size_t)v4[1];
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
    if ((v17 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if (v6)
    {
      if (*((char *)v4 + 23) >= 0)
        v8 = v4;
      else
        v8 = *v4;
      memmove(v7, v8, v6);
    }
    *(_WORD *)((char *)v7 + v6) = 59;
    if ((v17 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = (std::string::size_type)__p[1];
    std::string::append(&v18, (const std::string::value_type *)v9, v10);
    if ((char)v17 < 0)
      operator delete(__p[0]);
    v4 += 3;
  }
  while (v4 != v5);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
  else
LABEL_23:
    v15 = v18;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = (void *)v15.__r_.__value_.__r.__words[0];
    if (SLODWORD(v15.__r_.__value_.__r.__words[1]) >= 0x1FFF)
      v13 = 0x1FFFLL;
    else
      v13 = SLODWORD(v15.__r_.__value_.__r.__words[1]);
    memcpy(return_str(std::string)::buff, v15.__r_.__value_.__l.__data_, v13);
    return_str(std::string)::buff[v13] = 0;
    operator delete(v12);
  }
  else
  {
    v11 = HIBYTE(v15.__r_.__value_.__r.__words[2]);
    memcpy(return_str(std::string)::buff, &v15, HIBYTE(v15.__r_.__value_.__r.__words[2]));
    return_str(std::string)::buff[v11] = 0;
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  return return_str(std::string)::buff;
}

void sub_19141DC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__default_layer_parameters()
{
  if (EspressoWrap__default_layer_parameters::onceToken != -1)
    dispatch_once(&EspressoWrap__default_layer_parameters::onceToken, &__block_literal_global_19_3176);
  return EspressoWrap__default_layer_parameters::default_layer_parameters_str;
}

void sub_19141DD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__get_blob_names(uint64_t a1)
{
  uint64_t result;

  result = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t EspressoWrap__Net__get_variable_names(uint64_t a1)
{
  uint64_t result;

  result = a1 + 48;
  if (*(char *)(a1 + 71) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t EspressoWrap__Net__get_grad_blob_names(uint64_t a1)
{
  uint64_t result;

  result = a1 + 72;
  if (*(char *)(a1 + 95) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t EspressoWrap__MemoryMap__pointer(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
    v2 = v1 + 32;
  else
    v2 = *(_QWORD *)(a1 + 16) + 24;
  return *(_QWORD *)v2;
}

uint64_t EspressoWrap__MemoryMap__raw_pointer(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
}

uint64_t EspressoWrap__MemoryMap__dims(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  int v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  _BYTE __src[24];
  char v11[16];
  int v12;
  int v13;
  void *__p;
  void *v15;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(v2 + 8);
    v3 = a1 + 96;
    *(_QWORD *)&v4 = 0x100000001;
    *((_QWORD *)&v4 + 1) = 0x100000001;
    *(_OWORD *)(a1 + 100) = v4;
  }
  else
  {
    if (*(_QWORD *)a1)
    {
      Espresso::abstract_blob_container::shape(v11, *(_QWORD *)a1);
      Espresso::layer_nd_shape::layer_nd_shape((uint64_t)__src, (const Espresso::layer_shape *)v11, 0);
      v5 = v13;
      if (v12 == 1)
        v6 = 4;
      else
        v6 = 5;
      if (v13 == -1)
        v5 = v6;
      *(_DWORD *)(a1 + 96) = v5;
      if (v5 >= 1)
        memcpy((void *)(a1 + 100), __src, 4 * v5);
      if (__p)
      {
        v15 = __p;
        operator delete(__p);
      }
    }
    else
    {
      v7 = *(_DWORD **)(a1 + 16);
      if (v7)
      {
        *(_DWORD *)(a1 + 96) = 4;
        *(_DWORD *)(a1 + 100) = v7[5];
        *(_DWORD *)(a1 + 104) = v7[4];
        *(_DWORD *)(a1 + 108) = v7[3];
        *(_DWORD *)(a1 + 112) = v7[2];
        *(_DWORD *)(a1 + 116) = 1;
      }
      else
      {
        v8 = *(_DWORD **)(a1 + 32);
        if (v8)
        {
          *(_DWORD *)(a1 + 96) = 5;
          *(_DWORD *)(a1 + 100) = v8[6];
          *(_DWORD *)(a1 + 104) = v8[5];
          *(_DWORD *)(a1 + 108) = v8[4];
          *(_DWORD *)(a1 + 112) = v8[3];
          *(_DWORD *)(a1 + 116) = v8[2];
        }
      }
    }
    return a1 + 96;
  }
  return v3;
}

void sub_19141DEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double EspressoWrap__Net__get_gflop(uint64_t a1, int a2, uint64_t a3)
{
  Espresso::net *v3;

  v3 = *(Espresso::net **)(a1 + 144);
  if ((int)a3 <= 0)
    a3 = (*((_QWORD *)v3 + 5) - *((_QWORD *)v3 + 4)) >> 4;
  return Espresso::net::get_estimated_compute_resources(v3, a2, (int)a3);
}

uint64_t EspressoWrap__build_net_from_json(char *a1, int a2, unsigned int a3)
{
  uint64_t **v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::string::size_type *v11;
  std::string::size_type *i;
  std::string::size_type v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  void *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  void *v36;
  void *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v62;
  std::__shared_weak_count *v63;
  __int128 v64;
  void *v65;
  std::__shared_weak_count *v66;
  __int128 v67;
  void *v68;
  std::__shared_weak_count *v69;
  char v70;
  std::string __p;
  char **v72;
  char *v73[2];
  int v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  std::string v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  _QWORD v80[12];
  char v81;
  uint64_t v82;

  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  LODWORD(v80[0]) = a2;
  if (!std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, a2, v80)[5])Espresso::throw_exception_selector<Espresso::invalid_context_error>("Possibly no valid devices found");
  std::string::basic_string[abi:ne180100]<0>(&__p, a1);
  std::istringstream::basic_istringstream[abi:ne180100](v80, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v77, "");
  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  v74 = a2;
  v6 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, a2, &v74);
  Espresso::get_internal_context((uint64_t **)v6[5], &v75);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v73[0] = 0;
  v73[1] = 0;
  v72 = v73;
  std::string::basic_string[abi:ne180100]<0>(&v68, "json");
  Espresso::load_network_layers((uint64_t)v80, &v77, &v75, (uint64_t)&__p, a3, &v68, &v78);
  if (v70 < 0)
    operator delete(v68);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v72, v73[0]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
  v7 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v77.__r_.__value_.__l.__data_);
  v10 = v78;
  *(_BYTE *)(v78 + 500) = 0;
  v11 = *(std::string::size_type **)(v10 + 32);
  for (i = *(std::string::size_type **)(v10 + 40); v11 != i; v11 += 2)
  {
    v13 = *v11;
    v14 = v11[1];
    __p.__r_.__value_.__r.__words[0] = *v11;
    __p.__r_.__value_.__l.__size_ = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v17 = *(const void **)(v13 + 64);
    if (v17)
    {
      if (!v18)
        goto LABEL_51;
      v19 = v18;
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v18 + 472))(&v77);
      v67 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
      if (v77.__r_.__value_.__l.__size_)
      {
        v20 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      (*(void (**)(void *, __int128 *))(*(_QWORD *)v19 + 400))(v19, &v67);
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
      if (*((_QWORD *)&v67 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v19 + 384))(v19) + 32))
      {
        (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v19 + 488))(&v68, v19);
        v65 = v68;
        v66 = v69;
        if (v69)
        {
          v25 = (unint64_t *)&v69->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        (*(void (**)(void *, void **))(*(_QWORD *)v19 + 392))(v19, &v65);
        v27 = v66;
        if (v66)
        {
          v28 = (unint64_t *)&v66->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v30 = v69;
        if (v69)
        {
          v31 = (unint64_t *)&v69->__shared_owners_;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 - 1, v31));
          if (!v32)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
      }
      size = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
      if (v77.__r_.__value_.__l.__size_)
      {
        v34 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      v17 = *(const void **)(__p.__r_.__value_.__r.__words[0] + 64);
      if (v17)
      {
LABEL_51:
        if (v36)
        {
          v37 = v36;
          (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v36 + 424))(&v77);
          v64 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
          if (v77.__r_.__value_.__l.__size_)
          {
            v38 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          (*(void (**)(void *, __int128 *))(*(_QWORD *)v37 + 400))(v37, &v64);
          v40 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
          if (*((_QWORD *)&v64 + 1))
          {
            v41 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          if (*(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v37 + 384))(v37) + 8))
          {
            (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)v37 + 432))(&v68, v37);
            v62 = v68;
            v63 = v69;
            if (v69)
            {
              v43 = (unint64_t *)&v69->__shared_owners_;
              do
                v44 = __ldxr(v43);
              while (__stxr(v44 + 1, v43));
            }
            (*(void (**)(void *, void **))(*(_QWORD *)v37 + 392))(v37, &v62);
            v45 = v63;
            if (v63)
            {
              v46 = (unint64_t *)&v63->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
            v48 = v69;
            if (v69)
            {
              v49 = (unint64_t *)&v69->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }
          v51 = (std::__shared_weak_count *)v77.__r_.__value_.__l.__size_;
          if (v77.__r_.__value_.__l.__size_)
          {
            v52 = (unint64_t *)(v77.__r_.__value_.__l.__size_ + 8);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
        }
      }
    }
    v54 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v55 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
  }
  v57 = operator new();
  *(_QWORD *)(v57 + 16) = 0;
  *(_QWORD *)(v57 + 8) = 0;
  *(_QWORD *)v57 = v57 + 8;
  *(_OWORD *)(v57 + 24) = 0u;
  *(_OWORD *)(v57 + 40) = 0u;
  *(_OWORD *)(v57 + 56) = 0u;
  *(_OWORD *)(v57 + 72) = 0u;
  *(_OWORD *)(v57 + 88) = 0u;
  *(_OWORD *)(v57 + 104) = 0u;
  *(_OWORD *)(v57 + 120) = 0u;
  *(_OWORD *)(v57 + 136) = 0u;
  *(_OWORD *)(v57 + 152) = 0u;
  *(_QWORD *)(v57 + 168) = 0;
  *(_DWORD *)(v57 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v57, &v78);
  EspressoWrap__Net__touch(v57);
  v58 = v79;
  if (v79)
  {
    v59 = (unint64_t *)&v79->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v80[0] = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)v80 + *(_QWORD *)(v80[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  v80[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v81 < 0)
    operator delete((void *)v80[10]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19401CCD0](&v82);
  return v57;
}

void sub_19141E604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,char a44)
{
  if (a23 < 0)
    operator delete(__p);
  Espresso::network_shape::~network_shape((char **)&a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (a41 < 0)
    operator delete(a36);
  std::istringstream::~istringstream((uint64_t)&a44);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_context_error>(const char *a1)
{
  Espresso::throw_exception<Espresso::invalid_context_error>(a1);
}

_QWORD *EspressoWrap__Net::set_cpp_net(_QWORD *a1, uint64_t *a2)
{
  uint64_t **v4;
  uint64_t (***v5)(_QWORD);
  EspressoLight::espresso_context *v6;
  _QWORD *plan;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v15;
  int v16;

  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  v4 = (uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr;
  v5 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a2 + 16) + 8);
  v16 = (**v5)(v5);
  v6 = (EspressoLight::espresso_context *)std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v4, v16, &v16)[5];
  espresso_plan_destroy(a1[20]);
  plan = (_QWORD *)espresso_create_plan(v6, 0);
  a1[20] = plan;
  v8 = (std::__shared_weak_count *)a2[1];
  *(_QWORD *)&v15 = *a2;
  *((_QWORD *)&v15 + 1) = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  a1[21] = espresso_plan_add_cpp_net(plan, &v15);
  a1[22] = v11;
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1 + 18, *a2, a2[1]);
}

void sub_19141E834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__touch(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  std::__shared_weak_count *v5;
  uint64_t *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t **v11;
  std::string *v12;
  __int128 v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const std::string::value_type *v29;
  std::string::size_type v30;
  _QWORD *v31;
  uint64_t v32;
  void **v33;
  void *__p[2];
  char v35;
  std::string v36;
  std::string *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  char **v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[3];
  _QWORD *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 144);
  v3 = *(_QWORD *)(v2 + 32);
  for (i = *(_QWORD *)(v2 + 40); v3 != i; v3 += 16)
  {
    v6 = *(uint64_t **)v3;
    v5 = *(std::__shared_weak_count **)(v3 + 8);
    v37 = *(std::string **)v3;
    v38 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>(a1, &v36, v6 + 2);
    v10 = *v9;
    if (!*v9)
    {
      v11 = v9;
      v10 = (uint64_t *)operator new(0x48uLL);
      v40 = (char **)v10;
      v41 = (char *)(a1 + 8);
      LOBYTE(v42) = 0;
      v12 = (std::string *)(v10 + 4);
      if (*((char *)v6 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v12, (const std::string::value_type *)v6[2], v6[3]);
      }
      else
      {
        v13 = *((_OWORD *)v6 + 1);
        v10[6] = v6[4];
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      }
      v10[7] = 0;
      v10[8] = 0;
      LOBYTE(v42) = 1;
      std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v36.__r_.__value_.__l.__data_, v11, v10);
      v40 = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v40);
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v10 + 7, (uint64_t)v6, (uint64_t)v5);
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  MEMORY[0x19401C808](a1 + 24, "");
  v41 = 0;
  v42 = 0;
  v40 = &v41;
  v36.__r_.__value_.__r.__words[0] = 0;
  v16 = *(_QWORD **)(a1 + 144);
  if (v16[5] != v16[4])
  {
    do
    {
      v37 = &v36;
      v17 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v16 + 7), (unint64_t *)&v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37);
      v18 = v17[3];
      v19 = v17[4];
      while (v18 != v19)
      {
        if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v41, (_QWORD *)v18))
        {
          v20 = *(char *)(v18 + 23);
          if (v20 >= 0)
            v21 = (const std::string::value_type *)v18;
          else
            v21 = *(const std::string::value_type **)v18;
          if (v20 >= 0)
            v22 = *(unsigned __int8 *)(v18 + 23);
          else
            v22 = *(_QWORD *)(v18 + 8);
          std::string::append((std::string *)(a1 + 24), v21, v22);
          v37 = (std::string *)v18;
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v40, (_QWORD *)v18, (__int128 **)&v37)+ 14) = 1;
          std::string::append((std::string *)(a1 + 24), ";");
        }
        v18 += 24;
      }
      ++v36.__r_.__value_.__r.__words[0];
      v16 = *(_QWORD **)(a1 + 144);
      v24 = v16[4];
      v23 = v16[5];
    }
    while (v36.__r_.__value_.__r.__words[0] < (v23 - v24) >> 4);
    v36.__r_.__value_.__r.__words[0] = 0;
    if (v23 != v24)
    {
      do
      {
        v37 = &v36;
        v25 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)(v16 + 12), (unint64_t *)&v36, (uint64_t)&std::piecewise_construct, (uint64_t **)&v37);
        v26 = v25[3];
        v27 = v25[4];
        while (v26 != v27)
        {
          if (!std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(v41, (_QWORD *)v26))
          {
            v28 = *(char *)(v26 + 23);
            if (v28 >= 0)
              v29 = (const std::string::value_type *)v26;
            else
              v29 = *(const std::string::value_type **)v26;
            if (v28 >= 0)
              v30 = *(unsigned __int8 *)(v26 + 23);
            else
              v30 = *(_QWORD *)(v26 + 8);
            std::string::append((std::string *)(a1 + 24), v29, v30);
            v37 = (std::string *)v26;
            *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v40, (_QWORD *)v26, (__int128 **)&v37)+ 14) = 1;
            std::string::append((std::string *)(a1 + 24), ";");
          }
          v26 += 24;
        }
        ++v36.__r_.__value_.__r.__words[0];
        v16 = *(_QWORD **)(a1 + 144);
      }
      while (v36.__r_.__value_.__r.__words[0] < (uint64_t)(v16[5] - v16[4]) >> 4);
    }
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v43[0] = &off_1E2DAEC70;
  v43[1] = &v37;
  v44 = v43;
  Espresso::net::apply_to_all_globals(v16, v43);
  v31 = v44;
  if (v44 == v43)
  {
    v32 = 4;
    v31 = v43;
  }
  else
  {
    if (!v44)
      goto LABEL_47;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_47:
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  Espresso::string_join(&v36, &v37, (uint64_t)__p);
  v33 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v33);
  *(_OWORD *)v33 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)&v36.__r_.__value_.__l + 2);
  *((_BYTE *)&v36.__r_.__value_.__s + 23) = 0;
  v36.__r_.__value_.__s.__data_[0] = 0;
  if (v35 < 0)
    operator delete(__p[0]);
  v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
  std::__tree<std::string>::destroy((uint64_t)&v40, v41);
}

void sub_19141EC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,char *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a15 < 0)
    operator delete(__p);
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::__tree<std::string>::destroy((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DAEC70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DAEC70;
  a2[1] = v2;
  return result;
}

std::string *std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::operator()(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  std::string *v3;
  std::string *result;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::string **)(v2 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(v2 + 16))
  {
    result = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)v2, (uint64_t)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(v2, a2);
    result = v3 + 1;
  }
  *(_QWORD *)(v2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZL24EspressoWrap__Net__touchP17EspressoWrap__NetE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0,std::allocator<EspressoWrap__Net__touch(EspressoWrap__Net *)::$_0>,void ()(std::pair<std::string,std::shared_ptr<Espresso::abstract_blob_container>> &)>::target_type()
{
}

void EspressoWrap__Net__reshape_from_data_sizes(uint64_t a1, char *__s)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  int v11;
  void *v12;
  int v13;
  void *v14;
  int v15;
  void *v16;
  int v17;
  char *v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  void **v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  void **i;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  void **v45;
  int v46;
  void **v47;
  _OWORD *v48;
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  Espresso *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  std::runtime_error *exception;
  id v61;
  void *v63;
  uint64_t v64;
  id obj;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69[2];
  _QWORD v70[2];
  uint64_t v71;
  void *__p;
  char *v73;
  int v74;
  int v75;
  __int128 v76;
  char *v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  void **p_p;
  char *v84;
  unint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  id v91;
  char **v92;
  char *v93[2];
  _BYTE v94[128];
  void *v95;
  _BYTE v96[128];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v93[0] = 0;
  v93[1] = 0;
  v92 = v93;
  v2 = (void *)MEMORY[0x1E0CB36D8];
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", __s, strlen(__s));
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v91 = 0;
  objc_msgSend(v2, "JSONObjectWithData:options:error:", v3, 0, &v91);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v61 = v91;

  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  obj = v4;
  v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v87, v96, 16);
  if (v5)
  {
    v64 = *(_QWORD *)v88;
    do
    {
      v67 = 0;
      v68 = v5;
      do
      {
        if (*(_QWORD *)v88 != v64)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v87 + 1) + 8 * v67);
        v86 = 0uLL;
        v66 = v6;
        objc_msgSend(obj, "objectForKey:", v61);
        v7 = (void *)objc_claimAutoreleasedReturnValue();
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v95 = v7;
          objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v95, 1);
          v8 = objc_claimAutoreleasedReturnValue();

          v7 = (void *)v8;
        }
        v9 = objc_msgSend(v7, "count");
        if (objc_msgSend(v7, "count") == 4)
        {
          objc_msgSend(v7, "objectAtIndex:", 3);
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v10, "intValue");

          objc_msgSend(v7, "objectAtIndex:", 2);
          v12 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v12, "intValue");

          objc_msgSend(v7, "objectAtIndex:", 1);
          v14 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v14, "intValue");

          objc_msgSend(v7, "objectAtIndex:", 0);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "intValue");

          v18 = 0;
          v19 = 0;
          v20 = 1;
        }
        else if (objc_msgSend(v7, "count") == 5)
        {
          objc_msgSend(v7, "objectAtIndex:", 4);
          v21 = (void *)objc_claimAutoreleasedReturnValue();
          v11 = objc_msgSend(v21, "intValue");

          objc_msgSend(v7, "objectAtIndex:", 3);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          v13 = objc_msgSend(v22, "intValue");

          objc_msgSend(v7, "objectAtIndex:", 2);
          v23 = (void *)objc_claimAutoreleasedReturnValue();
          v15 = objc_msgSend(v23, "intValue");

          objc_msgSend(v7, "objectAtIndex:", 1);
          v24 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v24, "intValue");

          objc_msgSend(v7, "objectAtIndex:", 0);
          v25 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = objc_msgSend(v25, "intValue");

          v18 = 0;
          v19 = 0;
        }
        else
        {
          if ((unint64_t)objc_msgSend(v7, "count") > 5)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Invalid shape length cannot be > 5!");
            __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          objc_msgSend(v7, "count");
          p_p = 0;
          v84 = 0;
          v85 = 0;
          v79 = 0u;
          v80 = 0u;
          v81 = 0u;
          v82 = 0u;
          v26 = v7;
          v27 = (void **)objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v79, v94, 16);
          if (v27)
          {
            v63 = v7;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v31 = *(_QWORD *)v80;
            do
            {
              for (i = 0; i != v27; i = (void **)((char *)i + 1))
              {
                if (*(_QWORD *)v80 != v31)
                  objc_enumerationMutation(v26);
                v33 = objc_msgSend(*(id *)(*((_QWORD *)&v79 + 1) + 8 * (_QWORD)i), "intValue");
                v34 = v33;
                if ((unint64_t)v30 >= v29)
                {
                  v35 = (v30 - v28) >> 2;
                  v36 = v35 + 1;
                  if ((unint64_t)(v35 + 1) >> 62)
                    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                  if ((uint64_t)(v29 - (_QWORD)v28) >> 1 > v36)
                    v36 = (uint64_t)(v29 - (_QWORD)v28) >> 1;
                  if (v29 - (unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
                    v37 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v37 = v36;
                  if (v37)
                    v37 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v37);
                  else
                    v38 = 0;
                  v39 = (_OWORD *)(v37 + 4 * v35);
                  *(_DWORD *)v39 = v34;
                  v40 = (char *)v39 + 4;
                  while (v30 != v28)
                  {
                    v41 = *((_DWORD *)v30 - 1);
                    v30 -= 4;
                    *((_DWORD *)v39 - 1) = v41;
                    v39 = (_OWORD *)((char *)v39 - 4);
                  }
                  v29 = v37 + 4 * v38;
                  p_p = (void **)v39;
                  v84 = v40;
                  v85 = v29;
                  if (v28)
                    operator delete(v28);
                  v28 = (char *)v39;
                  v30 = v40;
                  v5 = v68;
                }
                else
                {
                  *(_DWORD *)v30 = v33;
                  v30 += 4;
                }
                v84 = v30;
              }
              v27 = (void **)objc_msgSend(v26, "countByEnumeratingWithState:objects:count:", &v79, v94, 16);
            }
            while (v27);
            v27 = p_p;
            v7 = v63;
          }
          else
          {
            v30 = 0;
          }

          v70[0] = 0;
          v70[1] = 0;
          v71 = 0;
          v42 = v30 - (char *)v27;
          if (v30 != (char *)v27)
          {
            v43 = v42 >> 2;
            if ((unint64_t)(v42 >> 2) <= 1)
              v43 = 1;
            v44 = v70;
            v45 = v27;
            do
            {
              v46 = *(_DWORD *)v45;
              v45 = (void **)((char *)v45 + 4);
              *v44++ = v46;
              --v43;
            }
            while (v43);
          }
          HIDWORD(v71) = (unint64_t)v42 >> 2;
          Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)v70, 0, (uint64_t)&__p);
          v11 = (int)__p;
          v13 = HIDWORD(__p);
          v15 = (int)v73;
          v17 = HIDWORD(v73);
          v20 = v74;
          v9 = v75;
          v86 = v76;
          v47 = v27;
          v18 = v77;
          v19 = v78;
          if (v47)
            operator delete(v47);
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(v66), "UTF8String"));
        p_p = &__p;
        v48 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v92, &__p, (_OWORD **)&p_p);
        *((_DWORD *)v48 + 14) = v11;
        *((_DWORD *)v48 + 15) = v13;
        *((_DWORD *)v48 + 16) = v15;
        *((_DWORD *)v48 + 17) = v17;
        *((_DWORD *)v48 + 18) = v20;
        *((_DWORD *)v48 + 19) = v9;
        v48[5] = v86;
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>((char *)v48 + 96, v18, v19, (v19 - (uint64_t)v18) >> 2);
        if (SHIBYTE(v75) < 0)
          operator delete(__p);

        if (v18)
          operator delete(v18);
        ++v67;
      }
      while (v67 != v5);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v87, v96, 16);
    }
    while (v5);
  }

  v49 = *(std::__shared_weak_count **)(a1 + 152);
  v69[0] = *(_QWORD *)(a1 + 144);
  v69[1] = (uint64_t)v49;
  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(p_shared_owners);
    while (__stxr(v51 + 1, p_shared_owners));
  }
  Espresso::compute_network_shape_starting_from_data_shapes(v69, (uint64_t)&v92, (uint64_t)&__p);
  if (v49)
  {
    v52 = (unint64_t *)&v49->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v54 = *(Espresso **)(a1 + 144);
  v55 = *(std::__shared_weak_count **)(a1 + 152);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  Espresso::shape_network_recursive(v54, (Espresso::net *)&__p, 0, 0);
  if (v55)
  {
    v58 = (unint64_t *)&v55->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  rebuild_compiler((_QWORD *)(a1 + 144));
  EspressoWrap__Net__touch(a1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v76, *((char **)&v76 + 1));
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__p, v73);

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v92, v93[0]);
}

void sub_19141F4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,char *a60)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  Espresso::network_shape::~network_shape((char **)&__p);

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a59, a60);
  _Unwind_Resume(a1);
}

void rebuild_compiler(_QWORD *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  char v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void (***v31)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t (***v35)(_QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;

  v1 = *(_QWORD *)(*a1 + 16);
  if (!*(_BYTE *)(v1 + 124))
    return;
  v3 = (***(uint64_t (****)(_QWORD))(v1 + 8))(*(_QWORD *)(v1 + 8));
  v4 = *a1;
  v5 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*a1 + 528), v3);
  if (v5)
  {
    v6 = v5;
    v7 = v5[3];
    v8 = (std::__shared_weak_count *)v6[4];
    v47 = v7;
    v48 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    if (v7)
      goto LABEL_37;
    v4 = *a1;
  }
  else
  {
    v47 = 0;
    v48 = 0;
  }
  v11 = *(_QWORD *)(v4 + 16);
  v12 = (std::__shared_weak_count *)a1[1];
  v45 = v4;
  v46 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 88))(v11, &v45);
  v15 = v46;
  if (v46)
  {
    v16 = (unint64_t *)&v46->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::find<Espresso::platform>((_QWORD *)(*a1 + 528), v3);
  if (v18)
  {
    v19 = v18[3];
    v20 = (std::__shared_weak_count *)v18[4];
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
      v25 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v25 = 1;
LABEL_26:
  v26 = v48;
  v47 = v19;
  v48 = v20;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if ((v25 & 1) == 0)
  {
    v29 = (unint64_t *)&v20->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v7 = v47;
  if (!v47)
  {
    v35 = *(uint64_t (****)(_QWORD))(*(_QWORD *)(*a1 + 16) + 8);
    v36 = (**v35)(v35);
    Espresso::throw_exception_selector<Espresso::invalid_context_error,Espresso::platform>(v36, v37, v38, v39, v40, v41, v42, v43);
  }
LABEL_37:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7) & 1) == 0)
  {
    v31 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*a1 + 16);
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 3221225472;
    v44[2] = ___ZL16rebuild_compilerRKNSt3__110shared_ptrIN8Espresso3netEEE_block_invoke;
    v44[3] = &__block_descriptor_40_e10_v16__0r_v8l;
    v44[4] = a1;
    Espresso::abstract_context::compute_batch_sync(v31, v44);
  }
  v32 = v48;
  if (v48)
  {
    v33 = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
}

void sub_19141F8F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_context_error,Espresso::platform>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  Espresso::throw_exception_with_format<Espresso::invalid_context_error>(a1, a2, a3, a4, a5, a6, a7, a8, a1);
}

void ___ZL16rebuild_compilerRKNSt3__110shared_ptrIN8Espresso3netEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  Espresso::net::__build(**(_QWORD **)(a1 + 32), a2, 0, 0xFFFFFFFFLL);
}

uint64_t EspressoWrap__Layer__num_params_blobs(uint64_t *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  const void *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *a1;
  v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = *(const void **)(v1 + 64);
  if (!v5)
    goto LABEL_12;
  {
    {
      v6 = 1;
      goto LABEL_13;
    }
LABEL_12:
    v6 = 0;
    goto LABEL_13;
  }
  v6 = 2;
LABEL_13:
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v6;
}

_OWORD *EspressoWrap__Layer__create_blob_by_index(uint64_t *a1, int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  _OWORD *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  unint64_t *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  void *v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  void *v52;
  int *v53;
  uint64_t v54;
  _DWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v62 = *a1;
  v63 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_OWORD **)(v3 + 64);
  if (!v7)
    goto LABEL_62;
  if (!v8)
  {
    if (v12)
    {
      if (a2 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 440))(&v60);
        v7 = (_OWORD *)operator new();
        v7[4] = 0u;
        v7[5] = 0u;
        v7[2] = 0u;
        v7[3] = 0u;
        *v7 = 0u;
        v7[1] = 0u;
        v31 = v60;
        v32 = *(_DWORD *)(v60 + 8);
        v33 = operator new(0x60uLL);
        v33[1] = 0;
        v33[2] = 0;
        *v33 = &off_1E2DBECA8;
        v34 = *(_QWORD *)(v31 + 16);
        v33[3] = &off_1E2DA11F0;
        *((_OWORD *)v33 + 4) = 0u;
        *((_OWORD *)v33 + 5) = 0u;
        *((_DWORD *)v33 + 8) = v32;
        *(_QWORD *)((char *)v33 + 36) = 0x100000001;
        *((_DWORD *)v33 + 11) = 1;
        v33[6] = v34;
        *((_BYTE *)v33 + 56) = 0;
        *(_QWORD *)&v59 = v33 + 3;
        *((_QWORD *)&v59 + 1) = v33;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v7 + 1), &v59);
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
        if (*((_QWORD *)&v59 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 8, v60, (uint64_t)v61);
        v9 = v61;
        if (!v61)
          goto LABEL_62;
        v38 = (unint64_t *)&v61->__shared_owners_;
        do
          v11 = __ldaxr(v38);
        while (__stlxr(v11 - 1, v38));
      }
      else
      {
        if (a2)
          goto LABEL_51;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v12 + 456))(&v60);
        v7 = (_OWORD *)operator new();
        v7[5] = 0u;
        v7[3] = 0u;
        v7[4] = 0u;
        *v7 = 0u;
        v7[1] = 0u;
        v7[2] = 0u;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 4, v60, (uint64_t)v61);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 8, v60, (uint64_t)v61);
        v9 = v61;
        if (!v61)
          goto LABEL_62;
        v13 = (unint64_t *)&v61->__shared_owners_;
        do
          v11 = __ldaxr(v13);
        while (__stlxr(v11 - 1, v13));
      }
    }
    else
    {
      if (!v22)
      {
        if (v39)
        {
          if (a2)
            goto LABEL_51;
          v55 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v39 + 384))(v39);
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v60, 4 * *v55, 1, 1, 1);
          v54 = operator new();
        }
        else
        {
          v7 = 0;
          if (a2 || !v52)
            goto LABEL_62;
          v53 = (int *)(*(uint64_t (**)(void *))(*(_QWORD *)v52 + 384))(v52);
          std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v60, *v53, v53[1], v53[2], v53[4] * v53[3]);
          v54 = operator new();
        }
        v7 = (_OWORD *)v54;
        *(_OWORD *)(v54 + 80) = 0u;
        *(_OWORD *)(v54 + 32) = 0u;
        *(_OWORD *)(v54 + 48) = 0u;
        *(_OWORD *)(v54 + 64) = 0u;
        v56 = (_QWORD *)(v54 + 64);
        *(_OWORD *)v54 = 0u;
        *(_OWORD *)(v54 + 16) = 0u;
        v57 = v60;
        v58 = (uint64_t)v61;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v54 + 16), v60, (uint64_t)v61);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v56, v57, v58);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v60);
        goto LABEL_62;
      }
      if (a2 == 1)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v22 + 432))(&v60);
        v7 = (_OWORD *)operator new();
        v7[4] = 0u;
        v7[5] = 0u;
        v7[2] = 0u;
        v7[3] = 0u;
        *v7 = 0u;
        v7[1] = 0u;
        v40 = v60;
        v41 = *(_DWORD *)(v60 + 8);
        v42 = operator new(0x60uLL);
        v42[1] = 0;
        v42[2] = 0;
        *v42 = &off_1E2DBECA8;
        v43 = *(_QWORD *)(v40 + 16);
        v42[3] = &off_1E2DA11F0;
        *((_OWORD *)v42 + 4) = 0u;
        *((_OWORD *)v42 + 5) = 0u;
        *((_DWORD *)v42 + 8) = v41;
        *(_QWORD *)((char *)v42 + 36) = 0x100000001;
        *((_DWORD *)v42 + 11) = 1;
        v42[6] = v43;
        *((_BYTE *)v42 + 56) = 0;
        *(_QWORD *)&v59 = v42 + 3;
        *((_QWORD *)&v59 + 1) = v42;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v7 + 1), &v59);
        v44 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
        if (*((_QWORD *)&v59 + 1))
        {
          v45 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 8, v60, (uint64_t)v61);
        v9 = v61;
        if (!v61)
          goto LABEL_62;
        v47 = (unint64_t *)&v61->__shared_owners_;
        do
          v11 = __ldaxr(v47);
        while (__stlxr(v11 - 1, v47));
      }
      else
      {
        if (a2)
          goto LABEL_51;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v22 + 424))(&v60);
        v7 = (_OWORD *)operator new();
        v7[4] = 0u;
        v7[5] = 0u;
        v7[2] = 0u;
        v7[3] = 0u;
        *v7 = 0u;
        v7[1] = 0u;
        v23 = v60;
        v24 = *(_QWORD *)(v60 + 8);
        v25 = operator new(0x60uLL);
        v25[1] = 0;
        v25[2] = 0;
        *v25 = &off_1E2DBECA8;
        v26 = *(_QWORD *)(v23 + 16);
        v25[3] = &off_1E2DA11F0;
        *((_OWORD *)v25 + 4) = 0u;
        *((_OWORD *)v25 + 5) = 0u;
        v25[4] = v24;
        v25[5] = 0x100000001;
        v25[6] = v26;
        *((_BYTE *)v25 + 56) = 0;
        *(_QWORD *)&v59 = v25 + 3;
        *((_QWORD *)&v59 + 1) = v25;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v7 + 1), &v59);
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
        if (*((_QWORD *)&v59 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 8, v60, (uint64_t)v61);
        v9 = v61;
        if (!v61)
          goto LABEL_62;
        v30 = (unint64_t *)&v61->__shared_owners_;
        do
          v11 = __ldaxr(v30);
        while (__stlxr(v11 - 1, v30));
      }
    }
LABEL_60:
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    goto LABEL_62;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 472))(&v60);
      v7 = (_OWORD *)operator new();
      v7[5] = 0u;
      v7[2] = 0u;
      v7[3] = 0u;
      v7[4] = 0u;
      *v7 = 0u;
      v7[1] = 0u;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 2, v60, (uint64_t)v61);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 8, v60, (uint64_t)v61);
      v9 = v61;
      if (!v61)
        goto LABEL_62;
      v10 = (unint64_t *)&v61->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      goto LABEL_60;
    }
LABEL_51:
    v7 = 0;
    goto LABEL_62;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 488))(&v60);
  v7 = (_OWORD *)operator new();
  v7[4] = 0u;
  v7[5] = 0u;
  v7[2] = 0u;
  v7[3] = 0u;
  *v7 = 0u;
  v7[1] = 0u;
  v14 = v60;
  v15 = *(_DWORD *)(v60 + 8);
  v16 = operator new(0x60uLL);
  v16[1] = 0;
  v16[2] = 0;
  *v16 = &off_1E2DBECA8;
  v17 = *(_QWORD *)(v14 + 16);
  v16[3] = &off_1E2DA11F0;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_DWORD *)v16 + 8) = v15;
  *(_QWORD *)((char *)v16 + 36) = 0x100000001;
  *((_DWORD *)v16 + 11) = 1;
  v16[6] = v17;
  *((_BYTE *)v16 + 56) = 0;
  *(_QWORD *)&v59 = v16 + 3;
  *((_QWORD *)&v59 + 1) = v16;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v7 + 1), &v59);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v7 + 8, v60, (uint64_t)v61);
  v9 = v61;
  if (v61)
  {
    v21 = (unint64_t *)&v61->__shared_owners_;
    do
      v11 = __ldaxr(v21);
    while (__stlxr(v11 - 1, v21));
    goto LABEL_60;
  }
LABEL_62:
  v48 = v63;
  if (v63)
  {
    v49 = (unint64_t *)&v63->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  return v7;
}

void sub_1914201CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void EspressoWrap__Layer__set_blob_by_index(uint64_t *a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t *v94;
  unint64_t *v95;
  const void *v96;
  void *v97;
  BOOL v98;
  void *v99;
  _DWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const void *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  const void *v116;
  _DWORD *v117;
  char v118;
  _DWORD *v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const void *v124;
  uint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD v138[2];
  _QWORD v139[2];
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  uint64_t v144;
  std::__shared_weak_count *v145;
  void **v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  std::__shared_weak_count *v149;
  void **v150;
  std::__shared_weak_count *v151;
  void **v152;
  std::__shared_weak_count *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v144 = *a1;
  v145 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(const void **)(v6 + 64);
  if (!v9)
    goto LABEL_133;
  if (!v10)
    goto LABEL_48;
  v11 = v10;
  if (a2 != 1)
  {
    if (a2)
      goto LABEL_48;
    if (a3)
    {
      (*(void (**)(void ***__return_ptr, void *))(*(_QWORD *)v10 + 472))(&v152, v10);
      v12 = 0;
      v13 = *(_QWORD *)(a3 + 16);
      v14 = *(const void **)(v13 + 24);
      v15 = *(int *)(v13 + 8);
      v16 = v13 + 12;
      do
      {
        v15 *= *(int *)(v16 + v12);
        v12 += 4;
      }
      while (v12 != 12);
      memcpy(v152[3], v14, 4 * v15);
      v150 = v152;
      v151 = v153;
      if (v153)
      {
        v17 = (unint64_t *)&v153->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      (*(void (**)(void *, void ***))(*(_QWORD *)v11 + 400))(v11, &v150);
      v19 = v151;
      if (v151)
      {
        v20 = (unint64_t *)&v151->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = v153;
      if (v153)
      {
        v23 = (unint64_t *)&v153->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        goto LABEL_37;
      }
      goto LABEL_48;
    }
    v154 = 0;
    v155 = 0;
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 400))(v10, &v154);
    v22 = v155;
    if (!v155)
      goto LABEL_48;
    v36 = (unint64_t *)&v155->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
LABEL_46:
    if (v37)
      goto LABEL_48;
    goto LABEL_47;
  }
  if (!a3)
  {
    v148 = 0;
    v149 = 0;
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v10 + 392))(v10, &v148);
    v22 = v149;
    if (!v149)
      goto LABEL_48;
    v38 = (unint64_t *)&v149->__shared_owners_;
    do
      v37 = __ldaxr(v38);
    while (__stlxr(v37 - 1, v38));
    goto LABEL_46;
  }
  (*(void (**)(void ***__return_ptr, void *))(*(_QWORD *)v10 + 488))(&v152, v10);
  v25 = 0;
  v26 = *(_QWORD *)(a3 + 16);
  v27 = *(const void **)(v26 + 24);
  v28 = *(int *)(v26 + 8);
  v29 = v26 + 12;
  do
  {
    v28 *= *(int *)(v29 + v25);
    v25 += 4;
  }
  while (v25 != 12);
  memcpy(v152[2], v27, 4 * v28);
  v146 = v152;
  v147 = v153;
  if (v153)
  {
    v30 = (unint64_t *)&v153->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  (*(void (**)(void *, void ***))(*(_QWORD *)v11 + 392))(v11, &v146);
  v32 = v147;
  if (v147)
  {
    v33 = (unint64_t *)&v147->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v22 = v153;
  if (v153)
  {
    v35 = (unint64_t *)&v153->__shared_owners_;
    do
      v24 = __ldaxr(v35);
    while (__stlxr(v24 - 1, v35));
LABEL_37:
    if (v24)
      goto LABEL_48;
LABEL_47:
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
LABEL_48:
  if (!v39)
    goto LABEL_91;
  v40 = v39;
  if (a2 != 1)
  {
    if (a2)
      goto LABEL_91;
    if (a3)
    {
      (*(void (**)(void ***__return_ptr, void *))(*(_QWORD *)v39 + 424))(&v152, v39);
      v41 = 0;
      v42 = *(_QWORD *)(a3 + 16);
      v43 = *(const void **)(v42 + 24);
      v44 = *(int *)(v42 + 8);
      v45 = v42 + 12;
      do
      {
        v44 *= *(int *)(v45 + v41);
        v41 += 4;
      }
      while (v41 != 12);
      memcpy(v152[2], v43, 4 * v44);
      v150 = v152;
      v151 = v153;
      if (v153)
      {
        v46 = (unint64_t *)&v153->__shared_owners_;
        do
          v47 = __ldxr(v46);
        while (__stxr(v47 + 1, v46));
      }
      (*(void (**)(void *, void ***))(*(_QWORD *)v40 + 400))(v40, &v150);
      v48 = v151;
      if (v151)
      {
        v49 = (unint64_t *)&v151->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v153;
      if (v153)
      {
        v52 = (unint64_t *)&v153->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        goto LABEL_80;
      }
      goto LABEL_91;
    }
    v154 = 0;
    v155 = 0;
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v39 + 400))(v39, &v154);
    v51 = v155;
    if (!v155)
      goto LABEL_91;
    v65 = (unint64_t *)&v155->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
LABEL_89:
    if (v66)
      goto LABEL_91;
    goto LABEL_90;
  }
  if (!a3)
  {
    v148 = 0;
    v149 = 0;
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v39 + 392))(v39, &v148);
    v51 = v149;
    if (!v149)
      goto LABEL_91;
    v67 = (unint64_t *)&v149->__shared_owners_;
    do
      v66 = __ldaxr(v67);
    while (__stlxr(v66 - 1, v67));
    goto LABEL_89;
  }
  (*(void (**)(void ***__return_ptr, void *))(*(_QWORD *)v39 + 432))(&v152, v39);
  v54 = 0;
  v55 = *(_QWORD *)(a3 + 16);
  v56 = *(const void **)(v55 + 24);
  v57 = *(int *)(v55 + 8);
  v58 = v55 + 12;
  do
  {
    v57 *= *(int *)(v58 + v54);
    v54 += 4;
  }
  while (v54 != 12);
  memcpy(v152[2], v56, 4 * v57);
  v146 = v152;
  v147 = v153;
  if (v153)
  {
    v59 = (unint64_t *)&v153->__shared_owners_;
    do
      v60 = __ldxr(v59);
    while (__stxr(v60 + 1, v59));
  }
  (*(void (**)(void *, void ***))(*(_QWORD *)v40 + 392))(v40, &v146);
  v61 = v147;
  if (v147)
  {
    v62 = (unint64_t *)&v147->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v51 = v153;
  if (v153)
  {
    v64 = (unint64_t *)&v153->__shared_owners_;
    do
      v53 = __ldaxr(v64);
    while (__stlxr(v53 - 1, v64));
LABEL_80:
    if (v53)
      goto LABEL_91;
LABEL_90:
    ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
    std::__shared_weak_count::__release_weak(v51);
  }
LABEL_91:
  if (!v68)
    goto LABEL_133;
  v69 = v68;
  if (a2 == 1)
  {
    if (!a3)
    {
      v148 = 0;
      v149 = 0;
      (*(void (**)(void *, uint64_t *))(*(_QWORD *)v68 + 392))(v68, &v148);
      v80 = v149;
      if (!v149)
        goto LABEL_133;
      v95 = (unint64_t *)&v149->__shared_owners_;
      do
        v82 = __ldaxr(v95);
      while (__stlxr(v82 - 1, v95));
      goto LABEL_131;
    }
    (*(void (**)(void ***__return_ptr, void *))(*(_QWORD *)v68 + 440))(&v152, v68);
    v83 = 0;
    v84 = *(_QWORD *)(a3 + 16);
    v85 = *(const void **)(v84 + 24);
    v86 = *(int *)(v84 + 8);
    v87 = v84 + 12;
    do
    {
      v86 *= *(int *)(v87 + v83);
      v83 += 4;
    }
    while (v83 != 12);
    memcpy(v152[2], v85, 4 * v86);
    v146 = v152;
    v147 = v153;
    if (v153)
    {
      v88 = (unint64_t *)&v153->__shared_owners_;
      do
        v89 = __ldxr(v88);
      while (__stxr(v89 + 1, v88));
    }
    (*(void (**)(void *, void ***))(*(_QWORD *)v69 + 392))(v69, &v146);
    v90 = v147;
    if (v147)
    {
      v91 = (unint64_t *)&v147->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
        std::__shared_weak_count::__release_weak(v90);
      }
    }
    v80 = v153;
    if (v153)
    {
      v93 = (unint64_t *)&v153->__shared_owners_;
      do
        v82 = __ldaxr(v93);
      while (__stlxr(v82 - 1, v93));
LABEL_131:
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
      }
    }
  }
  else
  {
    if (a2)
      goto LABEL_133;
    if (!a3)
    {
      v154 = 0;
      v155 = 0;
      (*(void (**)(void *, uint64_t *))(*(_QWORD *)v68 + 400))(v68, &v154);
      v80 = v155;
      if (!v155)
        goto LABEL_133;
      v94 = (unint64_t *)&v155->__shared_owners_;
      do
        v82 = __ldaxr(v94);
      while (__stlxr(v82 - 1, v94));
      goto LABEL_131;
    }
    (*(void (**)(void ***__return_ptr, void *))(*(_QWORD *)v68 + 456))(&v152, v68);
    v70 = 0;
    v71 = *(_QWORD *)(a3 + 32);
    v72 = *(const void **)(v71 + 32);
    v73 = *(int *)(v71 + 8);
    v74 = v71 + 12;
    do
    {
      v73 *= *(int *)(v74 + v70);
      v70 += 4;
    }
    while (v70 != 16);
    memcpy(v152[4], v72, 4 * v73);
    v150 = v152;
    v151 = v153;
    if (v153)
    {
      v75 = (unint64_t *)&v153->__shared_owners_;
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    (*(void (**)(void *, void ***))(*(_QWORD *)v69 + 400))(v69, &v150);
    v77 = v151;
    if (v151)
    {
      v78 = (unint64_t *)&v151->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v80 = v153;
    if (v153)
    {
      v81 = (unint64_t *)&v153->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      goto LABEL_131;
    }
  }
LABEL_133:
  v96 = *(const void **)(v6 + 64);
  if (!v96)
  {
    v98 = a2 == 0;
    goto LABEL_158;
  }
  v98 = a2 == 0;
  if (!a2)
  {
    v99 = v97;
    if (v97)
    {
      if (a3)
      {
        v100 = (_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v97 + 384))(v97);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,1>,std::allocator<Espresso::blob<float,1>>,int &,int &,int &,int &,void>(&v154, 4 * *v100, 1, 1, 1);
        v101 = 0;
        v102 = v154;
        v103 = *(_QWORD *)(a3 + 16);
        v104 = *(const void **)(v103 + 24);
        v105 = *(int *)(v103 + 8);
        v106 = v103 + 12;
        do
        {
          v105 *= *(int *)(v106 + v101);
          v101 += 4;
        }
        while (v101 != 12);
        memcpy(*(void **)(v154 + 16), v104, 4 * v105);
        v142 = v102;
        v143 = v155;
        if (v155)
        {
          v107 = (unint64_t *)&v155->__shared_owners_;
          do
            v108 = __ldxr(v107);
          while (__stxr(v108 + 1, v107));
        }
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v99 + 392))(v99, &v142);
        v109 = v143;
        if (v143)
        {
          v110 = (unint64_t *)&v143->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
            std::__shared_weak_count::__release_weak(v109);
          }
        }
        v112 = v155;
        if (!v155)
          goto LABEL_157;
        v113 = (unint64_t *)&v155->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
      }
      else
      {
        v140 = 0;
        v141 = 0;
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v97 + 392))(v97, &v140);
        v112 = v141;
        if (!v141)
        {
LABEL_157:
          v98 = 1;
          goto LABEL_158;
        }
        v115 = (unint64_t *)&v141->__shared_owners_;
        do
          v114 = __ldaxr(v115);
        while (__stlxr(v114 - 1, v115));
      }
      if (!v114)
      {
        ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
        std::__shared_weak_count::__release_weak(v112);
      }
      goto LABEL_157;
    }
  }
LABEL_158:
  v116 = *(const void **)(v144 + 64);
  if (v116)
  {
    v118 = !v98;
    if (!v117)
      v118 = 1;
    if ((v118 & 1) == 0)
    {
      v119 = v117;
      if (a3)
      {
        v120 = (int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v117 + 384))(v117);
        std::allocate_shared[abi:ne180100]<Espresso::blob<float,4>,std::allocator<Espresso::blob<float,4>>,int &,int &,int &,int &,void>(&v154, *v120, v120[1], v120[2], v120[4] * v120[3]);
        v121 = 0;
        v122 = v154;
        v123 = *(_QWORD *)(a3 + 16);
        v124 = *(const void **)(v123 + 24);
        v125 = *(int *)(v123 + 8);
        v126 = v123 + 12;
        do
        {
          v125 *= *(int *)(v126 + v121);
          v121 += 4;
        }
        while (v121 != 12);
        memcpy(*(void **)(v154 + 24), v124, 4 * v125);
        v127 = v155;
        v139[0] = v122;
        v139[1] = v155;
        if (v155)
        {
          v128 = (unint64_t *)&v155->__shared_owners_;
          do
            v129 = __ldxr(v128);
          while (__stxr(v129 + 1, v128));
        }
        Espresso::generic_load_constant_kernel::set_constant_blob(v119, (uint64_t)v139);
        if (v127)
        {
          v130 = (unint64_t *)&v127->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
            std::__shared_weak_count::__release_weak(v127);
          }
        }
        v132 = v155;
        if (v155)
        {
          v133 = (unint64_t *)&v155->__shared_owners_;
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
          if (!v134)
          {
            ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
            std::__shared_weak_count::__release_weak(v132);
          }
        }
      }
      else
      {
        v138[0] = 0;
        v138[1] = 0;
        Espresso::generic_load_constant_kernel::set_constant_blob(v117, (uint64_t)v138);
      }
    }
  }
  v135 = v145;
  if (v145)
  {
    v136 = (unint64_t *)&v145->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
}

void sub_191420D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Layer__readonly_blob_by_index(uint64_t *a1, int a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _QWORD *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t *v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v67 = *a1;
  v68 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(const void **)(v3 + 64);
  if (!v7)
    goto LABEL_81;
  if (!v8)
  {
    if (v11)
    {
      if (a2 != 1)
      {
        if (!a2)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 416))(&v65);
          v9 = v65;
          if (v65)
          {
            v10 = operator new();
            *(_OWORD *)(v10 + 80) = 0u;
            *(_OWORD *)(v10 + 48) = 0u;
            *(_OWORD *)(v10 + 64) = 0u;
            *(_OWORD *)v10 = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            *(_OWORD *)(v10 + 32) = 0u;
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 32), v65, (uint64_t)v66);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
          }
          else
          {
            v10 = 0;
          }
          v31 = v66;
          if (!v66)
            goto LABEL_80;
          v44 = (unint64_t *)&v66->__shared_owners_;
          do
            v33 = __ldaxr(v44);
          while (__stlxr(v33 - 1, v44));
          goto LABEL_78;
        }
        goto LABEL_81;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v11 + 408))(&v65);
      v9 = v65;
      if (v65)
      {
        v10 = operator new();
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)v10 = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        v24 = v65;
        v25 = *(_DWORD *)(v65 + 8);
        v26 = operator new(0x60uLL);
        v26[1] = 0;
        v26[2] = 0;
        *v26 = &off_1E2DBECA8;
        v27 = *(_QWORD *)(v24 + 16);
        v26[3] = &off_1E2DA11F0;
        *((_OWORD *)v26 + 4) = 0u;
        *((_OWORD *)v26 + 5) = 0u;
        *((_DWORD *)v26 + 8) = v25;
        *(_QWORD *)((char *)v26 + 36) = 0x100000001;
        *((_DWORD *)v26 + 11) = 1;
        v26[6] = v27;
        *((_BYTE *)v26 + 56) = 0;
        *(_QWORD *)&v64 = v26 + 3;
        *((_QWORD *)&v64 + 1) = v26;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10 + 16, &v64);
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
        if (*((_QWORD *)&v64 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
      }
      else
      {
        v10 = 0;
      }
      v31 = v66;
      if (!v66)
        goto LABEL_80;
      v45 = (unint64_t *)&v66->__shared_owners_;
      do
        v33 = __ldaxr(v45);
      while (__stlxr(v33 - 1, v45));
    }
    else
    {
      if (v19)
      {
        if (a2 == 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 408))(&v65);
          v9 = v65;
          if (v65)
          {
            v10 = operator new();
            *(_OWORD *)(v10 + 64) = 0u;
            *(_OWORD *)(v10 + 80) = 0u;
            *(_OWORD *)(v10 + 32) = 0u;
            *(_OWORD *)(v10 + 48) = 0u;
            *(_OWORD *)v10 = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            v40 = v65;
            v41 = *(_DWORD *)(v65 + 8);
            v42 = operator new(0x60uLL);
            v42[1] = 0;
            v42[2] = 0;
            *v42 = &off_1E2DBECA8;
            v43 = *(_QWORD *)(v40 + 16);
            v42[3] = &off_1E2DA11F0;
            *((_OWORD *)v42 + 4) = 0u;
            *((_OWORD *)v42 + 5) = 0u;
            *((_DWORD *)v42 + 8) = v41;
            *(_QWORD *)((char *)v42 + 36) = 0x100000001;
            *((_DWORD *)v42 + 11) = 1;
            v42[6] = v43;
            *((_BYTE *)v42 + 56) = 0;
            *(_QWORD *)&v64 = v42 + 3;
            *((_QWORD *)&v64 + 1) = v42;
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10 + 16, &v64);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
          }
          else
          {
            v10 = 0;
          }
          v31 = v66;
          if (!v66)
            goto LABEL_80;
          v50 = (unint64_t *)&v66->__shared_owners_;
          do
            v33 = __ldaxr(v50);
          while (__stlxr(v33 - 1, v50));
          goto LABEL_78;
        }
        if (!a2)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v19 + 416))(&v65);
          v9 = v65;
          if (v65)
          {
            v10 = operator new();
            *(_OWORD *)(v10 + 64) = 0u;
            *(_OWORD *)(v10 + 80) = 0u;
            *(_OWORD *)(v10 + 32) = 0u;
            *(_OWORD *)(v10 + 48) = 0u;
            *(_OWORD *)v10 = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            v20 = v65;
            v21 = *(_QWORD *)(v65 + 8);
            v22 = operator new(0x60uLL);
            v22[1] = 0;
            v22[2] = 0;
            *v22 = &off_1E2DBECA8;
            v23 = *(_QWORD *)(v20 + 16);
            v22[3] = &off_1E2DA11F0;
            *((_OWORD *)v22 + 4) = 0u;
            *((_OWORD *)v22 + 5) = 0u;
            v22[4] = v21;
            v22[5] = 0x100000001;
            v22[6] = v23;
            *((_BYTE *)v22 + 56) = 0;
            *(_QWORD *)&v64 = v22 + 3;
            *((_QWORD *)&v64 + 1) = v22;
            std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10 + 16, &v64);
            std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
            std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
          }
          else
          {
            v10 = 0;
          }
          v31 = v66;
          if (!v66)
            goto LABEL_80;
          v49 = (unint64_t *)&v66->__shared_owners_;
          do
            v33 = __ldaxr(v49);
          while (__stlxr(v33 - 1, v49));
          goto LABEL_78;
        }
        goto LABEL_81;
      }
      if (!v35)
      {
        v10 = (uint64_t)v46;
        if (v46)
        {
          v47 = v46[43];
          if (v47 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47))
          {
            v55 = *(_QWORD *)(v10 + 344);
            v56 = *(_QWORD *)(v55 + 160);
            v57 = *(_QWORD *)(v55 + 168);
            v65 = v56;
            v66 = (std::__shared_weak_count *)v57;
            if (v57)
            {
              v58 = (unint64_t *)(v57 + 8);
              do
                v59 = __ldxr(v58);
              while (__stxr(v59 + 1, v58));
            }
            if (v56)
            {
              v10 = operator new();
              *(_OWORD *)(v10 + 64) = 0u;
              *(_OWORD *)(v10 + 80) = 0u;
              *(_OWORD *)(v10 + 32) = 0u;
              *(_OWORD *)(v10 + 48) = 0u;
              *(_OWORD *)v10 = 0u;
              *(_OWORD *)(v10 + 16) = 0u;
              v60 = v65;
              v63 = *(_OWORD *)(v65 + 8);
              v61 = operator new(0x60uLL);
              v61[1] = 0;
              v61[2] = 0;
              *v61 = &off_1E2DBECA8;
              v62 = *(_QWORD *)(v60 + 24);
              v61[3] = &off_1E2DA11F0;
              *((_OWORD *)v61 + 4) = 0u;
              *((_OWORD *)v61 + 5) = 0u;
              *((_OWORD *)v61 + 2) = v63;
              v61[6] = v62;
              *((_BYTE *)v61 + 56) = 0;
              *(_QWORD *)&v64 = v61 + 3;
              *((_QWORD *)&v64 + 1) = v61;
              std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10 + 16, &v64);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
              std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
              std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
              goto LABEL_82;
            }
          }
          else
          {
            v65 = 0;
            v66 = 0;
          }
          std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v65);
          goto LABEL_81;
        }
        goto LABEL_82;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v35 + 408))(&v65);
      v9 = v65;
      if (v65)
      {
        v10 = operator new();
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)v10 = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        v36 = v65;
        v37 = *(_DWORD *)(v65 + 8);
        v38 = operator new(0x60uLL);
        v38[1] = 0;
        v38[2] = 0;
        *v38 = &off_1E2DBECA8;
        v39 = *(_QWORD *)(v36 + 16);
        v38[3] = &off_1E2DA11F0;
        *((_OWORD *)v38 + 4) = 0u;
        *((_OWORD *)v38 + 5) = 0u;
        *((_DWORD *)v38 + 8) = v37;
        *(_QWORD *)((char *)v38 + 36) = 0x100000001;
        *((_DWORD *)v38 + 11) = 1;
        v38[6] = v39;
        *((_BYTE *)v38 + 56) = 0;
        *(_QWORD *)&v64 = v38 + 3;
        *((_QWORD *)&v64 + 1) = v38;
        std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10 + 16, &v64);
        std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&v64);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
      }
      else
      {
        v10 = 0;
      }
      v31 = v66;
      if (!v66)
        goto LABEL_80;
      v48 = (unint64_t *)&v66->__shared_owners_;
      do
        v33 = __ldaxr(v48);
      while (__stlxr(v33 - 1, v48));
    }
LABEL_78:
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
    goto LABEL_80;
  }
  if (a2 != 1)
  {
    if (!a2)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 456))(&v65);
      v9 = v65;
      if (v65)
      {
        v10 = operator new();
        *(_OWORD *)(v10 + 80) = 0u;
        *(_OWORD *)(v10 + 32) = 0u;
        *(_OWORD *)(v10 + 48) = 0u;
        *(_OWORD *)(v10 + 64) = 0u;
        *(_OWORD *)v10 = 0u;
        *(_OWORD *)(v10 + 16) = 0u;
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 16), v65, (uint64_t)v66);
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
      }
      else
      {
        v10 = 0;
      }
      v31 = v66;
      if (!v66)
        goto LABEL_80;
      v32 = (unint64_t *)&v66->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      goto LABEL_78;
    }
LABEL_81:
    v10 = 0;
    goto LABEL_82;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v8 + 448))(&v65);
  v9 = v65;
  if (v65)
  {
    v10 = operator new();
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)v10 = 0u;
    *(_OWORD *)(v10 + 16) = 0u;
    v12 = v65;
    v13 = *(_DWORD *)(v65 + 8);
    v14 = operator new(0x60uLL);
    v14[1] = 0;
    v14[2] = 0;
    *v14 = &off_1E2DBECA8;
    v15 = *(_QWORD *)(v12 + 16);
    v14[3] = &off_1E2DA11F0;
    *((_OWORD *)v14 + 4) = 0u;
    *((_OWORD *)v14 + 5) = 0u;
    *((_DWORD *)v14 + 8) = v13;
    *(_QWORD *)((char *)v14 + 36) = 0x100000001;
    *((_DWORD *)v14 + 11) = 1;
    v14[6] = v15;
    *((_BYTE *)v14 + 56) = 0;
    *(_QWORD *)&v64 = v14 + 3;
    *((_QWORD *)&v64 + 1) = v14;
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v10 + 16, &v64);
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v10 + 64), v65, (uint64_t)v66);
  }
  else
  {
    v10 = 0;
  }
  v31 = v66;
  if (v66)
  {
    v34 = (unint64_t *)&v66->__shared_owners_;
    do
      v33 = __ldaxr(v34);
    while (__stlxr(v33 - 1, v34));
    goto LABEL_78;
  }
LABEL_80:
  if (!v9)
    goto LABEL_81;
LABEL_82:
  v51 = v68;
  if (v68)
  {
    v52 = (unint64_t *)&v68->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  return v10;
}

void sub_19142168C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Layer__create_blob_by_name(uint64_t *a1, char *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  const void *v7;
  _QWORD **v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *__p;
  std::__shared_weak_count *v23;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v4 = *a1;
  v3 = (std::__shared_weak_count *)a1[1];
  v27 = *a1;
  v28 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(const void **)(v4 + 64);
  if (!v7)
    goto LABEL_20;
  if (!v8)
    goto LABEL_20;
  v9 = v8;
  std::string::basic_string[abi:ne180100]<0>(&__p, a2);
  Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v25, v9, (uint64_t)&__p, *(unsigned int *)(v4 + 12));
  if (v24 < 0)
    operator delete(__p);
  v10 = v25;
  if (v25)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v25 + 56))(&__p, v25);
    v11 = operator new();
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v11 + 16), (uint64_t)__p, (uint64_t)v23);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v11 + 64), (uint64_t)__p, (uint64_t)v23);
    v12 = v23;
    if (v23)
    {
      v13 = (unint64_t *)&v23->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    v11 = 0;
  }
  v15 = v26;
  if (v26)
  {
    v16 = (unint64_t *)&v26->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if (v10)
        goto LABEL_21;
      goto LABEL_20;
    }
  }
  if (!v10)
LABEL_20:
    v11 = 0;
LABEL_21:
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v11;
}

void sub_1914218F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(_QWORD *a1, _QWORD **a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v8;
  uint64_t result;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::string __p;
  __int128 *v17;

  v8 = a2 + 35;
  if (std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[36], (_QWORD *)a3))
  {
    v17 = (__int128 *)a3;
    result = (uint64_t)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (_QWORD *)a3, &v17);
    v10 = *(_QWORD *)(result + 64);
    *a1 = *(_QWORD *)(result + 56);
    a1[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  else
  {
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    ((void (*)(_QWORD **, std::string *, uint64_t))(*a2)[45])(a2, &__p, a4);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    result = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(a2[36], (_QWORD *)a3);
    if (result)
    {
      v17 = (__int128 *)a3;
      result = (uint64_t)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (_QWORD *)a3, &v17);
      v13 = *(_QWORD *)(result + 64);
      *a1 = *(_QWORD *)(result + 56);
      a1[1] = v13;
      if (v13)
      {
        v14 = (unint64_t *)(v13 + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
  return result;
}

void sub_191421A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Layer__set_blob_by_name(_QWORD *a1, char *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  const void *v10;
  _QWORD **v11;
  _QWORD **v12;
  void (***v13)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v26[5];
  std::__shared_weak_count *v27;
  uint64_t v28;
  void *__p[2];
  char v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v7 = *a1;
  v6 = (std::__shared_weak_count *)a1[1];
  v33 = *a1;
  v34 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *(const void **)(v7 + 64);
  if (!v10
  {
    v19 = 0;
    if (!v6)
      return v19;
    goto LABEL_27;
  }
  v12 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v31, v12, (uint64_t)__p, *(unsigned int *)(v7 + 12));
  if (v30 < 0)
    operator delete(__p[0]);
  if (v31)
  {
    v13 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(*a1 + 64) + 8);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3321888768;
    v26[2] = __EspressoWrap__Layer__set_blob_by_name_block_invoke;
    v26[3] = &__block_descriptor_56_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_e10_v16__0r_v8l;
    v26[4] = v31;
    v27 = v32;
    if (v32)
    {
      v14 = (unint64_t *)&v32->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v28 = a3;
    Espresso::abstract_context::compute_batch_sync(v13, v26);
    v16 = v27;
    if (v27)
    {
      v17 = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = 1;
  }
  else
  {
    v19 = 0;
  }
  v20 = v32;
  if (v32)
  {
    v21 = (unint64_t *)&v32->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v6 = v34;
  if (v34)
  {
LABEL_27:
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v19;
}

void sub_191421C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 - 64);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t EspressoWrap__Layer__set_blob_by_name_raw(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  void (***v9)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v10;
  unint64_t v11;
  _QWORD v13[8];
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)a1[1];
  v14 = *a1;
  v15 = v4;
  v5 = v14;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v5 = *a1;
  }
  v8 = *(_QWORD *)(v14 + 64);
  v9 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(v5 + 64) + 8);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __EspressoWrap__Layer__set_blob_by_name_raw_block_invoke;
  v13[3] = &__block_descriptor_64_e10_v16__0r_v8l;
  v13[4] = v8;
  v13[5] = a2;
  v13[6] = a3;
  v13[7] = a4;
  Espresso::abstract_context::compute_batch_sync(v9, v13);
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return 1;
}

void sub_191421DC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

void sub_191421E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__global_by_name(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  char *v12;

  v12 = a2;
  v2 = *(_QWORD *)(a1 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::net::get_global(&v10, v2, (unsigned __int8 *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (!v10)
    Espresso::throw_exception_selector<Espresso::generic_error,char const*&>("No global with name %s", &v12);
  v3 = espresso_wrap_blob(&v10);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v3;
}

void sub_191421F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__loaded_global_name(uint64_t a1, char *a2)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v2 = *(_QWORD **)(a1 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v3 = Espresso::net::loaded_global_name(v2, (uint64_t)__p);
  v4 = *(char *)(v3 + 23);
  v5 = *(_QWORD *)v3;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v4 >= 0)
    return v3;
  else
    return v5;
}

void sub_191421FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__get_global_names(uint64_t a1)
{
  uint64_t result;

  result = a1 + 96;
  if (*(char *)(a1 + 119) < 0)
    return *(_QWORD *)result;
  return result;
}

void EspressoWrap__Net__add_global(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  char *v4;
  uint64_t v5;
  char *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  int v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v38;
  std::__shared_weak_count *v39;
  void *__p[2];
  char v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  _BYTE v44[40];
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;

  v4 = a2;
  v5 = a1;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  if (a4 <= 0)
  {
    LODWORD(v20) = 0;
    v47 = 0;
    v48 = 0;
    LODWORD(v49) = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = a4;
    do
    {
      if ((unint64_t)v9 >= v8)
      {
        v12 = (v9 - v7) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v8 - (_QWORD)v7) >> 1 > v13)
          v13 = (uint64_t)(v8 - (_QWORD)v7) >> 1;
        if (v8 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
          v14 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
          v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
        else
          v15 = 0;
        v16 = (char *)(v14 + 4 * v12);
        *(_DWORD *)v16 = *(_DWORD *)(a3 + 4 * v10);
        v17 = v16 + 4;
        while (v9 != v7)
        {
          v18 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v16 - 1) = v18;
          v16 -= 4;
        }
        v8 = v14 + 4 * v15;
        v50 = v16;
        v52 = v8;
        if (v7)
          operator delete(v7);
        v7 = v16;
        v9 = v17;
      }
      else
      {
        *(_DWORD *)v9 = *(_DWORD *)(a3 + 4 * v10);
        v9 += 4;
      }
      v51 = v9;
      ++v10;
    }
    while (v10 != v11);
    v19 = v50;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v20 = (v9 - v50) >> 2;
    if (v9 == v50)
    {
      v5 = a1;
      v4 = a2;
    }
    else
    {
      if (v20 <= 1)
        v21 = 1;
      else
        v21 = (v9 - v50) >> 2;
      v22 = &v47;
      v5 = a1;
      v4 = a2;
      do
      {
        v23 = *(_DWORD *)v19;
        v19 += 4;
        *(_DWORD *)v22 = v23;
        v22 = (uint64_t *)((char *)v22 + 4);
        --v21;
      }
      while (v21);
    }
  }
  HIDWORD(v49) = v20;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v47, 0, (uint64_t)v44);
  v24 = *(_QWORD *)(v5 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  Espresso::net::get_global(&v42, v24, (unsigned __int8 *)__p);
  v25 = v42;
  v26 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (v41 < 0)
    operator delete(__p[0]);
  if (v25)
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*&>(v4);
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 16)
                                                                                       + 8)
                                                                         + 24))(&v42, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 144) + 16) + 8), *(_QWORD *)(v5 + 144) + 16, 0);
  v38 = 0;
  v39 = 0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v42 + 16))(v42, v44, &v38);
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = *(_QWORD *)(v5 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, v4);
  Espresso::net::set_global(v32, (__int128 *)__p, &v42);
  if (v41 < 0)
    operator delete(__p[0]);
  v33 = v43;
  if (v43)
  {
    v34 = (unint64_t *)&v43->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  if (v50)
  {
    v51 = v50;
    operator delete(v50);
  }
}

void sub_1914222E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  v29 = *(void **)(v27 - 112);
  if (v29)
  {
    *(_QWORD *)(v27 - 104) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*&>(const char *a1)
{
  Espresso::throw_exception_with_format<Espresso::invalid_state_error>("global already exists: %s", a1);
}

void Espresso::net::set_global(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  char *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;

  v6 = *(std::__shared_weak_count **)(a1 + 1096);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_6;
  }
  v7 = std::__shared_weak_count::lock(v6);
  if (!v7 || (v8 = *(_QWORD *)(a1 + 1088)) == 0)
  {
LABEL_6:
    v12 = a2;
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 1440, (unsigned __int8 *)a2, &v12);
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v9 + 5, *a3, a3[1]);
    if (!v7)
      return;
    goto LABEL_7;
  }
  Espresso::net::set_global(v8, a2, a3);
LABEL_7:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_191422464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t EspressoWrap__Layer__blob_names_raw(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  unint64_t *v16;
  unint64_t v17;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(v3 + 64);
  if (v7)
  {
    if (a2)
    {
      v8 = *(_QWORD **)(v7 + 152);
      v9 = (_QWORD *)(v7 + 160);
      if (v8 == v9 || a3 < 1)
      {
        v11 = 0;
      }
      else
      {
        v11 = 0;
        do
        {
          v12 = v8 + 4;
          if (*((char *)v8 + 55) < 0)
            v12 = (_QWORD *)*v12;
          *(_QWORD *)(a2 + 8 * v11) = v12;
          v13 = (_QWORD *)v8[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v8[2];
              v15 = *v14 == (_QWORD)v8;
              v8 = v14;
            }
            while (!v15);
          }
          ++v11;
          if (v14 == v9)
            break;
          v8 = v14;
        }
        while (v11 < a3);
      }
    }
    else
    {
      v11 = *(unsigned int *)(v7 + 168);
    }
  }
  else
  {
    v11 = 0xFFFFFFFFLL;
  }
  if (v4)
  {
    v16 = (unint64_t *)&v4->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v11;
}

uint64_t EspressoWrap__Layer__get_blob_by_name_raw(uint64_t *a1, char *__s)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  void *__p[2];
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void **v30;

  v3 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v28 = *a1;
  v29 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(_QWORD *)(v3 + 64);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v8 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__count_unique<std::string>(*(_QWORD **)(v7 + 160), __p);
  v9 = v8;
  if ((v27 & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_6;
LABEL_27:
    v15 = 0;
    if (!v4)
      return v15;
    goto LABEL_28;
  }
  operator delete(__p[0]);
  if (!v9)
    goto LABEL_27;
LABEL_6:
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v30 = __p;
  v10 = std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v7 + 152), __p, (_OWORD **)&v30);
  v11 = *((_QWORD *)v10 + 7);
  v12 = (std::__shared_weak_count *)*((_QWORD *)v10 + 8);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (v27 < 0)
    operator delete(__p[0]);
  v15 = operator new();
  *(_OWORD *)(v15 + 64) = 0u;
  *(_OWORD *)(v15 + 80) = 0u;
  *(_OWORD *)(v15 + 16) = 0u;
  *(_OWORD *)(v15 + 32) = 0u;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)(v15 + 48) = 0u;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v15 + 48), v11, (uint64_t)v12);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(std::__shared_weak_count **)(v15 + 72);
  *(_QWORD *)(v15 + 64) = v11;
  *(_QWORD *)(v15 + 72) = v12;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v12)
  {
    v21 = (unint64_t *)&v12->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v4 = v29;
  if (v29)
  {
LABEL_28:
    v23 = (unint64_t *)&v4->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v15;
}

void sub_191422764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Layer__readonly_blob_by_name(_QWORD *a1, char *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (***v11)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v27[6];
  std::__shared_weak_count *v28;
  void *__p;
  void **p_p;
  uint64_t v31;
  __n128 (*v32)(__n128 *, __n128 *);
  uint64_t (*v33)(uint64_t);
  const char *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;

  v5 = *a1;
  v4 = (std::__shared_weak_count *)a1[1];
  v39 = *a1;
  v40 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(const void **)(v5 + 64);
  if (!v8)
    goto LABEL_28;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, a2);
    Espresso::abstract_kernel_with_weights_::get_or_create_weights_blobs(&v37, (_QWORD **)v9, (uint64_t)&__p, *(unsigned int *)(v5 + 12));
    if (SHIBYTE(v31) < 0)
      operator delete(__p);
    v10 = v37;
    if (v37)
    {
      __p = 0;
      p_p = &__p;
      v31 = 0x4012000000;
      v32 = __Block_byref_object_copy__3186;
      v33 = __Block_byref_object_dispose__3187;
      v34 = "";
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v37 + 56))(&v35, v37);
      v9 = operator new();
      *(_OWORD *)(v9 + 80) = 0u;
      *(_OWORD *)(v9 + 32) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)v9 = 0u;
      *(_OWORD *)(v9 + 64) = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v9 + 16), (uint64_t)p_p[6], (uint64_t)p_p[7]);
      std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v9 + 64), (uint64_t)p_p[6], (uint64_t)p_p[7]);
      v11 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(*a1 + 64) + 8);
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3321888768;
      v27[2] = __EspressoWrap__Layer__readonly_blob_by_name_block_invoke;
      v27[3] = &unk_1E2DC3FF0;
      v27[5] = v10;
      v28 = v38;
      if (v38)
      {
        v12 = (unint64_t *)&v38->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v27[4] = &__p;
      Espresso::abstract_context::compute_batch_sync(v11, v27);
      v14 = v28;
      if (v28)
      {
        v15 = (unint64_t *)&v28->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      _Block_object_dispose(&__p, 8);
      v17 = v36;
      if (v36)
      {
        v18 = (unint64_t *)&v36->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v20 = v38;
    if (v38)
    {
      v21 = (unint64_t *)&v38->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        if (v10)
          goto LABEL_29;
        goto LABEL_28;
      }
    }
    if (!v10)
LABEL_28:
      v9 = 0;
  }
LABEL_29:
  v23 = v40;
  if (v40)
  {
    v24 = (unint64_t *)&v40->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v9;
}

void sub_191422A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v22);
  _Block_object_dispose(&__p, 8);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24 - 64);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3186(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__3187(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t EspressoWrap__Layer__finalize_weights(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  void (***v6)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;

  v1 = (std::__shared_weak_count *)a1[1];
  v11 = *a1;
  v12 = v1;
  v2 = v11;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    v2 = *a1;
  }
  v5 = *(_QWORD *)(v11 + 64);
  v6 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(v2 + 64) + 8);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __EspressoWrap__Layer__finalize_weights_block_invoke;
  v10[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v10[4] = v5;
  Espresso::abstract_context::compute_batch_sync(v6, v10);
  if (v1)
  {
    v7 = (unint64_t *)&v1->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return 1;
}

void sub_191422BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Layer__type(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = *a1 + 40;
  if (*(char *)(v1 + 63) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t EspressoWrap__Layer__name(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *a1;
  result = *a1 + 16;
  if (*(char *)(v1 + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t EspressoWrap__Layer__platform(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 8);
}

uint64_t EspressoWrap__Layer__path(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)a1 + 12);
}

void EspressoWrap__Net::set_c_net(std::string::size_type *a1, uint64_t a2, std::string::size_type a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  espresso_plan_destroy(a1[20]);
  a1[20] = a2;
  a1[21] = a2;
  a1[22] = a3;
  Espresso::get_internal_network(a2, a3, (uint64_t)&v9);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(a1 + 18), &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t EspressoWrap__Net__load(std::string::size_type *a1, char *a2, uint64_t a3, int a4, Espresso::keys_translation *a5)
{
  uint64_t **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _BYTE *plan;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  LODWORD(v17) = a4;
  v9 = (uint64_t **)std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, a4, &v17)[5];
  Espresso::get_internal_context(v9, &v17);
  if (!v17)
    Espresso::throw_exception_selector<Espresso::invalid_context_error>("Possibly no valid devices found");
  *(_BYTE *)(v17 + 115) = 1;
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  plan = (_BYTE *)espresso_create_plan((EspressoLight::espresso_context *)v9, 0);
  v14 = Espresso::keys_translation::c_api_storage_type_from_cpp_compute_path(a5);
  v15 = espresso_plan_add_network(plan, a2, v14, (uint64_t)&v17);
  if (!(_DWORD)v15)
  {
    EspressoWrap__Net::set_c_net(a1, v17, (std::string::size_type)v18);
    *(_BYTE *)(a1[18] + 500) = 0;
    rebuild_compiler(a1 + 18);
    EspressoWrap__Net__touch((uint64_t)a1);
  }
  return v15;
}

void sub_191422E34(_Unwind_Exception *exception_object, int a2)
{
  EspressoLight *v2;
  std::exception *v3;

  if (a2 == 1)
  {
    v2 = (EspressoLight *)__cxa_begin_catch(exception_object);
    EspressoLight::handle_ex_(v2, v3);
    __cxa_end_catch();
    JUMPOUT(0x191422DF0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__transform_for_training(uint64_t a1, char *a2, char *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t i;
  __int128 v15;
  void *v16;
  void *v17;
  uint64_t **j;
  std::__shared_weak_count *v19;
  void *v20;
  std::string *v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  void **v25;
  void *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::string *v34;
  std::string *v35;
  uint64_t v36;
  __int128 *v37[3];
  char *v38;
  int v39[2];
  uint64_t v40;
  void *__p[2];
  __int128 v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  _QWORD v46[2];
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50[3];
  uint64_t v51;
  char v52;
  _BYTE v53[32];
  int v54;
  std::string v55;
  std::string *v56;
  int v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v52 = 1;
  v5 = *(std::__shared_weak_count **)(a1 + 152);
  v46[0] = *(_QWORD *)(a1 + 144);
  v46[1] = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  Espresso::gradient_builder::gradient_builder((uint64_t)&v47, v46, &v52);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  Espresso::gradient_builder::preprocess_network(&v47, &v44);
  v10 = v45;
  if (v45)
  {
    v11 = (unint64_t *)&v45->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_OWORD *)__p = 0u;
  v42 = 0u;
  v43 = 1065353216;
  if (a2)
  {
    memset(v53, 0, sizeof(v53));
    v54 = 1065353216;
    Espresso::string_split((Espresso *)&v38, a2);
    v13 = v38;
    for (i = *(_QWORD *)v39; v13 != (char *)i; v13 += 24)
    {
      if (v13[23] < 0)
      {
        std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v15 = *(_OWORD *)v13;
        v55.__r_.__value_.__r.__words[2] = *((_QWORD *)v13 + 2);
        *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v15;
      }
      v37[0] = (__int128 *)&v55;
      std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v53, (unsigned __int8 *)&v55, v37)[40] = 1;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
    }
    Espresso::gradient_builder::net_training_transform((uint64_t)&v47, v53, (uint64_t)&v55);
    v43 = v57;
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *> *>>(__p, (uint64_t *)v55.__r_.__value_.__r.__words[2]);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node((_QWORD *)v55.__r_.__value_.__r.__words[2]);
    v16 = (void *)v55.__r_.__value_.__r.__words[0];
    v55.__r_.__value_.__r.__words[0] = 0;
    if (v16)
      operator delete(v16);
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v55);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)v53);
  }
  else
  {
    Espresso::gradient_builder::net_training_transform((Espresso::gradient_builder *)&v47, (uint64_t)v53);
    v43 = v54;
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,void *> *>>(__p, *(uint64_t **)&v53[16]);
    std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node(*(_QWORD **)&v53[16]);
    v17 = *(void **)v53;
    *(_QWORD *)v53 = 0;
    if (v17)
      operator delete(v17);
  }
  v38 = 0;
  *(_QWORD *)v39 = 0;
  v40 = 0;
  for (j = (uint64_t **)v42; j; j = (uint64_t **)*j)
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v38, *(uint64_t *)v39, (std::string *)j[5], (std::string *)j[6], 0xAAAAAAAAAAAAAAABLL * (j[6] - j[5]));
  if (a3)
  {
    Espresso::string_split((Espresso *)v37, a3);
    v19 = v47;
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>((uint64_t)v47);
    v20 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)v19);
    v34 = 0;
    v35 = 0;
    v36 = 0;
    memset(v53, 0, sizeof(v53));
    v54 = 1065353216;
    v56 = 0;
    v21 = (std::string *)operator new(0x28uLL);
    v21->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E2DB1D98;
    v21->__r_.__value_.__l.__size_ = (std::string::size_type)v37;
    v21->__r_.__value_.__r.__words[2] = (std::string::size_type)v20;
    v21[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
    v21[1].__r_.__value_.__l.__size_ = (std::string::size_type)v53;
    v56 = v21;
    Espresso::transform_network_inplace((uint64_t)v19, (uint64_t)&v55);
    v22 = v56;
    if (v56 == &v55)
    {
      v23 = 4;
      v22 = &v55;
    }
    else
    {
      if (!v56)
      {
LABEL_35:
        std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v53);
        std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v38, *(uint64_t *)v39, v34, v35, 0xAAAAAAAAAAAAAAABLL * (((char *)v35 - (char *)v34) >> 3));
        *(_QWORD *)v53 = &v34;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
        *(_QWORD *)v53 = v37;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
        goto LABEL_36;
      }
      v23 = 5;
    }
    (*(void (**)(void))(v22->__r_.__value_.__r.__words[0] + 8 * v23))();
    goto LABEL_35;
  }
LABEL_36:
  v24 = operator new();
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 8) = 0;
  *(_QWORD *)v24 = v24 + 8;
  *(_OWORD *)(v24 + 24) = 0u;
  *(_OWORD *)(v24 + 40) = 0u;
  *(_OWORD *)(v24 + 56) = 0u;
  *(_OWORD *)(v24 + 72) = 0u;
  *(_OWORD *)(v24 + 88) = 0u;
  *(_OWORD *)(v24 + 104) = 0u;
  *(_OWORD *)(v24 + 120) = 0u;
  *(_OWORD *)(v24 + 136) = 0u;
  *(_OWORD *)(v24 + 152) = 0u;
  *(_QWORD *)(v24 + 168) = 0;
  *(_DWORD *)(v24 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v24, (uint64_t *)&v47);
  EspressoWrap__Net__touch(v24);
  std::string::basic_string[abi:ne180100]<0>(&v55, ",");
  Espresso::string_join((std::string *)v53, &v38, (uint64_t)&v55);
  v25 = (void **)(v24 + 48);
  if (*(char *)(v24 + 71) < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = *(_OWORD *)v53;
  *(_QWORD *)(v24 + 64) = *(_QWORD *)&v53[16];
  v53[23] = 0;
  v53[0] = 0;
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  *(_QWORD *)v53 = &v38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v53);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::__deallocate_node((_QWORD *)v42);
  v26 = __p[0];
  __p[0] = 0;
  if (v26)
    operator delete(v26);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v51);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v50, v50[1]);
  v27 = v49;
  if (v49)
  {
    v28 = (unint64_t *)&v49->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v48;
  if (v48)
  {
    v31 = (unint64_t *)&v48->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v24;
}

void sub_191423388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table(v29 - 160);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::layer_training_transform_info>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::layer_training_transform_info>>>::~__hash_table((uint64_t)&a19);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&a29);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__build_gradient(const std::string *a1, char *a2, char *a3)
{
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string __p;
  std::string::size_type v29[3];
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  _QWORD v35[2];
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39[3];
  uint64_t v40;
  char v41;

  v41 = 1;
  size = (std::__shared_weak_count *)a1[6].__r_.__value_.__l.__size_;
  v35[0] = a1[6].__r_.__value_.__l.__data_;
  v35[1] = size;
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  Espresso::gradient_builder::gradient_builder((uint64_t)&v36, v35, &v41);
  if (!size)
    goto LABEL_8;
  v9 = (unint64_t *)&size->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (a2)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (a2)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(&v34, a2);
      goto LABEL_14;
    }
  }
  v11 = *(_QWORD *)(a1[6].__r_.__value_.__r.__words[0] + 256);
  if (*(char *)(v11 + 55) < 0)
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v11 + 32), *(_QWORD *)(v11 + 40));
  else
    v34 = *(std::string *)(v11 + 32);
LABEL_14:
  Espresso::string_split((Espresso *)&v32, a3);
  memset(v29, 0, sizeof(v29));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v29, v32, v33, 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 3));
  Espresso::gradient_builder::build_gradient(&v36, (__int128 *)&v34, v29, (uint64_t)&v30);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  memset(&__p, 0, sizeof(__p));
  v12 = v30;
  if (v31 != v30)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = &v12[v13];
      v16 = *((char *)v15 + 23);
      if (v16 >= 0)
        v17 = (const std::string::value_type *)v15;
      else
        v17 = (const std::string::value_type *)*v15;
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)v15 + 23);
      else
        v18 = (std::string::size_type)v15[1];
      std::string::append(&__p, v17, v18);
      v12 = v30;
      v19 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
      if (v19 - 1 > v14)
      {
        std::string::append(&__p, ",");
        v12 = v30;
        v19 = 0xAAAAAAAAAAAAAAABLL * (v31 - v30);
      }
      ++v14;
      v13 += 3;
    }
    while (v19 > v14);
  }
  v20 = operator new();
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)v20 = v20 + 8;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_OWORD *)(v20 + 152) = 0u;
  *(_QWORD *)(v20 + 168) = 0;
  *(_DWORD *)(v20 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v20, &v36);
  EspressoWrap__Net__touch(v20);
  std::string::operator=((std::string *)(v20 + 48), a1 + 2);
  std::string::operator=((std::string *)(v20 + 72), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v30 = (void **)&v32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v40);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v39, v39[1]);
  v21 = v38;
  if (v38)
  {
    v22 = (unint64_t *)&v38->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v37;
  if (v37)
  {
    v25 = (unint64_t *)&v37->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return v20;
}

void sub_19142380C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&a33);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__build_gradient_given_output_grads(const std::string *a1, char *a2, char *a3, char *a4)
{
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  const std::string::value_type *v35;
  std::string::size_type v36;
  unint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::string __p;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[2];
  uint64_t v62[2];
  uint64_t v63;
  std::__shared_weak_count *v64;
  __int128 **v65;
  std::__shared_weak_count *v66;
  _QWORD *v67[7];
  char v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  __int128 *v73[3];
  _OWORD v74[2];
  int v75;
  _QWORD v76[3];
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  uint64_t v83[3];
  uint64_t v84;
  char v85;

  v85 = 1;
  size = (std::__shared_weak_count *)a1[6].__r_.__value_.__l.__size_;
  v79[0] = a1[6].__r_.__value_.__l.__data_;
  v79[1] = size;
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  Espresso::gradient_builder::gradient_builder((uint64_t)&v80, v79, &v85);
  if (size)
  {
    v11 = (unint64_t *)&size->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  Espresso::string_split((Espresso *)&v77, a2);
  Espresso::string_split((Espresso *)v76, a3);
  memset(v74, 0, sizeof(v74));
  v75 = 1065353216;
  v13 = v77;
  if (v78 != v77)
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v76[0];
      v73[0] = (__int128 *)(v13 + v14);
      v17 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v74, v13 + v14, (uint64_t)&std::piecewise_construct, v73);
      std::string::operator=((std::string *)(v17 + 5), (const std::string *)(v16 + v14));
      ++v15;
      v13 = v77;
      v14 += 24;
    }
    while (v15 < 0xAAAAAAAAAAAAAAABLL * ((v78 - v77) >> 3));
  }
  Espresso::string_split((Espresso *)v73, a4);
  v18 = v80;
  v63 = v80;
  v64 = v81;
  if (v81)
  {
    v19 = (unint64_t *)&v81->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *(std::__shared_weak_count **)(v18 + 24);
  v62[0] = *(_QWORD *)(v18 + 16);
  v62[1] = (uint64_t)v21;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = *(_DWORD *)(**(_QWORD **)(v18 + 32) + 12);
  v61[0] = 0;
  v61[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)&v65, &v63, v62, v24, v61);
  if (v21)
  {
    v25 = (unint64_t *)&v21->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v27 = v64;
  if (v64)
  {
    v28 = (unint64_t *)&v64->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  Espresso::gradient_builder::build_gradient(&v80, (uint64_t)v74, (std::string::size_type *)v73, (uint64_t *)&v65, (uint64_t)&v59);
  memset(&__p, 0, sizeof(__p));
  v30 = v59;
  if (v60 != v59)
  {
    v31 = 0;
    v32 = 0;
    do
    {
      v33 = v30 + v31;
      v34 = *(char *)(v33 + 23);
      if (v34 >= 0)
        v35 = (const std::string::value_type *)v33;
      else
        v35 = *(const std::string::value_type **)v33;
      if (v34 >= 0)
        v36 = *(unsigned __int8 *)(v33 + 23);
      else
        v36 = *(_QWORD *)(v33 + 8);
      std::string::append(&__p, v35, v36);
      v30 = v59;
      v37 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3);
      if (v37 - 1 > v32)
      {
        std::string::append(&__p, ",");
        v30 = v59;
        v37 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3);
      }
      ++v32;
      v31 += 24;
    }
    while (v37 > v32);
  }
  v38 = operator new();
  *(_QWORD *)(v38 + 16) = 0;
  *(_QWORD *)(v38 + 8) = 0;
  *(_QWORD *)v38 = v38 + 8;
  *(_OWORD *)(v38 + 24) = 0u;
  *(_OWORD *)(v38 + 40) = 0u;
  *(_OWORD *)(v38 + 56) = 0u;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_OWORD *)(v38 + 120) = 0u;
  *(_OWORD *)(v38 + 136) = 0u;
  *(_OWORD *)(v38 + 152) = 0u;
  *(_QWORD *)(v38 + 168) = 0;
  *(_DWORD *)(v38 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v38, &v80);
  EspressoWrap__Net__touch(v38);
  std::string::operator=((std::string *)(v38 + 48), a1 + 2);
  std::string::operator=((std::string *)(v38 + 72), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v72);
  v39 = v71;
  if (v71)
  {
    v40 = (unint64_t *)&v71->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v70;
  if (v70)
  {
    v43 = (unint64_t *)&v70->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = v69;
  if (v69)
  {
    v46 = (unint64_t *)&v69->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v68 < 0)
    operator delete(v67[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v67, v67[1]);
  v48 = v66;
  if (v66)
  {
    v49 = (unint64_t *)&v66->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v65 = v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v74);
  v65 = (__int128 **)v76;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  v65 = (__int128 **)&v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v65);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v84);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v83, v83[1]);
  v51 = v82;
  if (v82)
  {
    v52 = (unint64_t *)&v82->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v81;
  if (v81)
  {
    v55 = (unint64_t *)&v81->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  return v38;
}

void sub_191423DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  uint64_t v52;

  Espresso::sequential_builder::~sequential_builder((void **)&a24);
  a24 = &a49;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a52);
  a24 = (char *)(v52 - 240);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = (char *)(v52 - 216);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)(v52 - 176));
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__weight_decay(uint64_t a1, float a2)
{
  uint64_t v3;
  const std::string *v4;
  char *v5;
  char *v6;
  float *v7;
  uint64_t *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *size;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const void **v28;
  size_t v29;
  std::string *p_str;
  const void *v31;
  uint64_t v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string *v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  unint64_t v45;
  uint64_t *v47;
  const std::string *v48;
  std::string *v49;
  std::string *v50;
  unint64_t v51;
  void (**v52)(Espresso::regularizer_builder *__hidden);
  uint64_t v53[27];
  uint64_t *v54;
  _QWORD v55[3];
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  std::string v61;
  void *v62[2];
  char v63;
  std::string v64;
  std::string __str;

  v3 = a1;
  if (a2 >= 0.000001)
  {
    v4 = (const std::string *)(a1 + 48);
    v5 = (char *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v5 = (char *)v4->__r_.__value_.__r.__words[0];
    Espresso::string_split((Espresso *)&v59, v5);
    v6 = (char *)(v3 + 72);
    if (*(char *)(v3 + 95) < 0)
      v6 = *(char **)v6;
    Espresso::string_split((Espresso *)&v57, v6);
    if (v60 - v59 != v58 - v57)
      Espresso::throw_exception_selector<Espresso::generic_error>("variables and gradients don't match");
    v7 = (float *)operator new(4uLL);
    v8 = (uint64_t *)(v3 + 144);
    *v7 = a2;
    v52 = &off_1E2D85550;
    v9 = *(_QWORD *)(v3 + 144);
    v10 = *(_QWORD *)(v3 + 152);
    __str.__r_.__value_.__r.__words[0] = v9;
    __str.__r_.__value_.__l.__size_ = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v9 = *v8;
    }
    v13 = *(std::__shared_weak_count **)(v9 + 24);
    v64.__r_.__value_.__r.__words[0] = *(_QWORD *)(v9 + 16);
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v9 = *v8;
    }
    v16 = *(_DWORD *)(**(_QWORD **)(v9 + 32) + 12);
    v62[0] = 0;
    v62[1] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)v53, (uint64_t *)&__str, (uint64_t *)&v64, v16, (uint64_t *)v62);
    if (v13)
    {
      v17 = (unint64_t *)&v13->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v20 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v22 = *(_QWORD *)(v3 + 144);
    v23 = *(_QWORD *)(v3 + 152);
    v53[25] = v22;
    v53[26] = v23;
    if (v23)
    {
      v24 = (unint64_t *)(v23 + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v22 = *v8;
    }
    v54 = &v59;
    if ((***(unsigned int (****)(_QWORD))(*(_QWORD *)(v22 + 16) + 8))(*(_QWORD *)(*(_QWORD *)(v22 + 16)
                                                                                              + 8)) != 80000)
      Espresso::throw_exception_selector<Espresso::invalid_state_error>("regularizer_builder can be created only for networks on IR platform");
    memset(v55, 0, sizeof(v55));
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v55, v7, (uint64_t)(v7 + 1), 1uLL);
    v56 = v60 - v59 != 24;
    v52 = &off_1E2D8EAC8;
    operator delete(v7);
    v50 = 0;
    v51 = 0;
    v49 = 0;
    if (v54[1] == *v54)
    {
      v37 = 0;
      v36 = 0;
    }
    else
    {
      v47 = (uint64_t *)(v3 + 144);
      v48 = (const std::string *)(v3 + 48);
      v26 = 0;
      v27 = 0;
      do
      {
        v28 = (const void **)(v57 + v26);
        if (*(char *)(v57 + v26 + 23) >= 0)
          v29 = *((unsigned __int8 *)v28 + 23);
        else
          v29 = (size_t)v28[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v29 + 12);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v29)
        {
          if (*((char *)v28 + 23) >= 0)
            v31 = v28;
          else
            v31 = *v28;
          memmove(p_str, v31, v29);
        }
        strcpy((char *)p_str + v29, "/regularized");
        v32 = v57;
        ((void (*)(Espresso::l2_regularizer_builder *@<X0>, uint64_t@<X1>, uint64_t@<X8>))v52[3])((Espresso::l2_regularizer_builder *)&v52, v27, (uint64_t)v62);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v61, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        else
          v61 = __str;
        Espresso::sequential_builder::elementwise_op(0, v53, v32 + v26, (uint64_t)v62, (uint64_t)&v61, (uint64_t)&v64);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        __str = v64;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if (v63 < 0)
          operator delete(v62[0]);
        v33 = v50;
        if ((unint64_t)v50 >= v51)
        {
          v35 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)&v49, (uint64_t)&__str);
        }
        else
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v50, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            v34 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            v50->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
          }
          v35 = v33 + 1;
        }
        v50 = v35;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        ++v27;
        v26 += 24;
      }
      while (v27 < 0xAAAAAAAAAAAAAAABLL * ((v54[1] - *v54) >> 3));
      v36 = v49;
      v37 = v50;
      v8 = v47;
      v4 = v48;
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((uint64_t)&v57, v36, v37, 0xAAAAAAAAAAAAAAABLL * (((char *)v37 - (char *)v36) >> 3));
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    memset(&__str, 0, sizeof(__str));
    v38 = v57;
    if (v58 != v57)
    {
      v39 = 0;
      v40 = 0;
      do
      {
        v41 = v38 + v39;
        v42 = *(char *)(v41 + 23);
        if (v42 >= 0)
          v43 = (const std::string::value_type *)v41;
        else
          v43 = *(const std::string::value_type **)v41;
        if (v42 >= 0)
          v44 = *(unsigned __int8 *)(v41 + 23);
        else
          v44 = *(_QWORD *)(v41 + 8);
        std::string::append(&__str, v43, v44);
        v38 = v57;
        v45 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 3);
        if (v45 - 1 > v40)
        {
          std::string::append(&__str, ",");
          v38 = v57;
          v45 = 0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 3);
        }
        ++v40;
        v39 += 24;
      }
      while (v45 > v40);
    }
    v3 = operator new();
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)v3 = v3 + 8;
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 40) = 0u;
    *(_OWORD *)(v3 + 56) = 0u;
    *(_OWORD *)(v3 + 72) = 0u;
    *(_OWORD *)(v3 + 88) = 0u;
    *(_OWORD *)(v3 + 104) = 0u;
    *(_OWORD *)(v3 + 120) = 0u;
    *(_OWORD *)(v3 + 136) = 0u;
    *(_OWORD *)(v3 + 152) = 0u;
    *(_QWORD *)(v3 + 168) = 0;
    *(_DWORD *)(v3 + 176) = -1;
    EspressoWrap__Net::set_cpp_net((_QWORD *)v3, v8);
    EspressoWrap__Net__touch(v3);
    std::string::operator=((std::string *)(v3 + 48), v4);
    std::string::operator=((std::string *)(v3 + 72), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder((Espresso::regularizer_with_factors_builder *)&v52);
    v52 = (void (**)(Espresso::regularizer_builder *__hidden))&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
    v52 = (void (**)(Espresso::regularizer_builder *__hidden))&v59;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v52);
  }
  return v3;
}

void sub_1914244A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  *(_QWORD *)(v27 - 128) = &a11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 128));
  Espresso::regularizer_with_factors_builder::~regularizer_with_factors_builder((Espresso::regularizer_with_factors_builder *)&a14);
  a14 = v27 - 256;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  a14 = v27 - 232;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__build_sgd(uint64_t a1, char *a2, char *a3, char *a4, float a5, float a6)
{
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;
  uint64_t v18;
  std::__shared_weak_count *v19;
  void *v20[38];
  char v21;
  _BYTE v22[24];
  _BYTE v23[24];

  Espresso::string_split((Espresso *)v23, a2);
  Espresso::string_split((Espresso *)v22, a3);
  v12 = *(_QWORD *)(a1 + 144);
  v11 = *(std::__shared_weak_count **)(a1 + 152);
  v18 = v12;
  v19 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  Espresso::sgd_optimizer_builder::sgd_optimizer_builder((uint64_t)v20, v12, v11, (uint64_t)v23, (uint64_t)v22, &__p, a5, a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  Espresso::sgd_optimizer_builder::build_single_layer_optimizer((Espresso::sgd_optimizer_builder *)v20);
  EspressoWrap__Net__touch(a1);
  v20[0] = off_1E2D8C368;
  if (v21 < 0)
    operator delete(v20[36]);
  Espresso::optimizer_builder::~optimizer_builder(v20);
  v20[0] = v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
  v20[0] = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_19142479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a18 = v18 - 112;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = v18 - 88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__build_adam(uint64_t a1, char *a2, char *a3, char *a4, float a5, float a6, float a7, float a8)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *v24[39];
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  _BYTE v34[24];
  _BYTE v35[24];

  Espresso::string_split((Espresso *)v35, a2);
  Espresso::string_split((Espresso *)v34, a3);
  v16 = *(_QWORD *)(a1 + 144);
  v15 = *(std::__shared_weak_count **)(a1 + 152);
  v22 = v16;
  v23 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, a4);
  Espresso::adam_optimizer_builder::adam_optimizer_builder((uint64_t)v24, v16, v15, (uint64_t)v35, (uint64_t)v34, &__p, a5, a6, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  Espresso::adam_optimizer_builder::build_single_layer_optimizer((Espresso::adam_optimizer_builder *)v24);
  EspressoWrap__Net__touch(a1);
  v24[0] = off_1E2D8C9D0;
  if (v33 < 0)
    operator delete(v32);
  if (v31 < 0)
    operator delete(v30);
  if (v29 < 0)
    operator delete(v28);
  if (v27 < 0)
    operator delete(v26);
  if (v25 < 0)
    operator delete(v24[37]);
  Espresso::optimizer_builder::~optimizer_builder(v24);
  v24[0] = v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
  v24[0] = v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
}

void sub_1914249A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a18 = v18 - 128;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = v18 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__auto_optimize(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  void *v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  _OWORD *v25;
  __int128 v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::string *v31;
  __int128 v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *begin;
  unint64_t *p_size;
  unint64_t v43;
  id v45;
  void *v47;
  void *v48;
  _OWORD v49[3];
  char v50;
  _QWORD v51[3];
  std::string v52;
  int v53;
  __int16 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 __p;
  std::string::size_type v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  id v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  __int128 v68;
  _QWORD v69[4];
  int v70;
  __int16 v71;
  std::__split_buffer<std::string> __v;
  _BYTE v73[128];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v64 = 0x4220000000000000;
  DWORD2(v64) = 0;
  *(_DWORD *)((char *)&v64 + 11) = 0;
  v65 = 0u;
  v66 = 0u;
  v67 = 0;
  v68 = 0u;
  memset(v69, 0, sizeof(v69));
  v70 = 4096;
  v71 = 0;
  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v2, "dataUsingEncoding:allowLossyConversion:", 4, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue();

    v63 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v3, 0, &v63);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v45 = v63;
    v47 = v4;
    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("verbose"));
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    DWORD2(v64) = v5 != 0;

    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("no_opt"));
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    v48 = v3;
    if (objc_msgSend(v6, "BOOLValue"))
    {
      BYTE12(v64) = 1;
    }
    else
    {
      objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("no_optimization"));
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      BYTE12(v64) = objc_msgSend(v7, "BOOLValue");

    }
    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("convert_weights_to_fp16"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v64) = objc_msgSend(v8, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("quantize_conv_weights_u8"));
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE2(v64) = objc_msgSend(v9, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("quantize_fc_weights_u8"));
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE3(v64) = objc_msgSend(v10, "BOOLValue");

    objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("quantize_min_psnr"));
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v12 = v11 == 0;

    if (!v12)
    {
      objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("quantize_min_psnr"));
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "floatValue");
      DWORD1(v64) = v14;

    }
    objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("conv_groups"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE13(v64) = objc_msgSend(v15, "BOOLValue");

    objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("explicit_padding"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE14(v64) = objc_msgSend(v16, "BOOLValue");

    objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("quantize_u8_allow_asymmetric"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v67 = objc_msgSend(v17, "BOOLValue");

    objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("min_num_params_for_quant"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v70 = objc_msgSend(v18, "unsignedIntValue");

    objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("custom_optimizations"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19 == 0;

    if (!v20)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      objc_msgSend(v47, "objectForKeyedSubscript:", CFSTR("custom_optimizations"));
      v21 = (void *)objc_claimAutoreleasedReturnValue();
      v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v59, v73, 16);
      if (v22)
      {
        v23 = *(_QWORD *)v60;
        do
        {
          for (i = 0; i != v22; ++i)
          {
            if (*(_QWORD *)v60 != v23)
              objc_enumerationMutation(v21);
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v59 + 1) + 8 * i)), "UTF8String"));
            v25 = (_OWORD *)*((_QWORD *)&v68 + 1);
            if (*((_QWORD *)&v68 + 1) >= v69[0])
            {
              v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v68 + 1) - v68) >> 3);
              v28 = v27 + 1;
              if (v27 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((uint64_t)(v69[0] - v68) >> 3) > v28)
                v28 = 0x5555555555555556 * ((uint64_t)(v69[0] - v68) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v69[0] - v68) >> 3) >= 0x555555555555555)
                v29 = 0xAAAAAAAAAAAAAAALL;
              else
                v29 = v28;
              __v.__end_cap_.__value_ = (std::allocator<std::string> *)v69;
              if (v29)
                v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v29);
              else
                v30 = 0;
              v31 = (std::string *)(v29 + 24 * v27);
              __v.__first_ = (std::__split_buffer<std::string>::pointer)v29;
              __v.__begin_ = v31;
              __v.__end_cap_.__value_ = (std::string *)(v29 + 24 * v30);
              v32 = __p;
              v31->__r_.__value_.__r.__words[2] = v58;
              *(_OWORD *)&v31->__r_.__value_.__l.__data_ = v32;
              v58 = 0;
              __p = 0uLL;
              __v.__end_ = v31 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v68, &__v);
              v33 = *((_QWORD *)&v68 + 1);
              std::__split_buffer<std::string>::~__split_buffer(&__v);
              *((_QWORD *)&v68 + 1) = v33;
              v3 = v48;
              if (SHIBYTE(v58) < 0)
                operator delete((void *)__p);
            }
            else
            {
              v26 = __p;
              *(_QWORD *)(*((_QWORD *)&v68 + 1) + 16) = v58;
              *v25 = v26;
              *((_QWORD *)&v68 + 1) = (char *)v25 + 24;
            }
          }
          v22 = objc_msgSend(v21, "countByEnumeratingWithState:objects:count:", &v59, v73, 16);
        }
        while (v22);
      }

    }
  }
  v34 = *(std::__shared_weak_count **)(a1 + 152);
  v55 = *(_QWORD *)(a1 + 144);
  v56 = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  v49[0] = v64;
  v49[1] = v65;
  v49[2] = v66;
  v50 = v67;
  memset(v51, 0, sizeof(v51));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v51, v68, *((uint64_t *)&v68 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v68 + 1) - v68) >> 3));
  if (SHIBYTE(v69[3]) < 0)
    std::string::__init_copy_ctor_external(&v52, (const std::string::value_type *)v69[1], v69[2]);
  else
    v52 = *(std::string *)&v69[1];
  v53 = v70;
  v54 = v71;
  Espresso::auto_optimize((uint64_t)&v55, (uint64_t)v49, &__v);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  *(_QWORD *)&__p = v51;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v37 = v56;
  if (v56)
  {
    v38 = (unint64_t *)&v56->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = operator new();
  *(_QWORD *)(v40 + 16) = 0;
  *(_QWORD *)(v40 + 8) = 0;
  *(_QWORD *)v40 = v40 + 8;
  *(_OWORD *)(v40 + 24) = 0u;
  *(_OWORD *)(v40 + 40) = 0u;
  *(_OWORD *)(v40 + 56) = 0u;
  *(_OWORD *)(v40 + 72) = 0u;
  *(_OWORD *)(v40 + 88) = 0u;
  *(_OWORD *)(v40 + 104) = 0u;
  *(_OWORD *)(v40 + 120) = 0u;
  *(_OWORD *)(v40 + 136) = 0u;
  *(_OWORD *)(v40 + 152) = 0u;
  *(_QWORD *)(v40 + 168) = 0;
  *(_DWORD *)(v40 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v40, (uint64_t *)&__v);
  EspressoWrap__Net__touch(v40);
  begin = (std::__shared_weak_count *)__v.__begin_;
  if (__v.__begin_)
  {
    p_size = &__v.__begin_->__r_.__value_.__l.__size_;
    do
      v43 = __ldaxr(p_size);
    while (__stlxr(v43 - 1, p_size));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))begin->__on_zero_shared)(begin);
      std::__shared_weak_count::__release_weak(begin);
    }
  }
  if (SHIBYTE(v69[3]) < 0)
    operator delete((void *)v69[1]);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v68;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return v40;
}

void sub_1914250A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  void *v62;
  void *v63;

  Espresso::auto_optimize_options::~auto_optimize_options(&a48);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__cpu_context_transfer_algo()
{
  return 0;
}

void EspressoWrap__Net__dump(uint64_t a1, char *a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;
  std::string __str;
  uint64_t v12[2];

  v2 = *(std::__shared_weak_count **)(a1 + 152);
  v12[0] = *(_QWORD *)(a1 + 144);
  v12[1] = (uint64_t)v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  Espresso::dump_network(v12, &__str, (uint64_t)v9, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v2)
  {
    v5 = (unint64_t *)&v2->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1914252D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 32);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__dump_binserializer(uint64_t a1, char *a2, char *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint64_t v13[2];

  v4 = *(std::__shared_weak_count **)(a1 + 152);
  v13[0] = *(_QWORD *)(a1 + 144);
  v13[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v11, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  Espresso::dump_network_binserializer(v13, (const char *)v11, (const void **)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1914253E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 32);
  _Unwind_Resume(a1);
}

uint64_t ___Z44setup_memoryMap_with_abstract_blob_containerNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 48) + 16);
}

uint64_t EspressoWrap__Blob_map(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  void (***v14)(uint64_t *__return_ptr, _QWORD);
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v29;
  __int128 v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void (***v38)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v39;

  v2 = *a1;
  v1 = (std::__shared_weak_count *)a1[1];
  v29 = *a1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = operator new();
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  v6 = (uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr;
  LODWORD(v30) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v7 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>(v6, v30, &v30);
  Espresso::get_internal_context((uint64_t **)v7[5], &v38);
  v8 = (uint64_t)v38;
  if (!v38)
    Espresso::throw_exception_selector<Espresso::invalid_context_error>("Possibly no valid devices found");
  v36 = v2;
  v37 = v1;
  if (v1)
  {
    v9 = (unint64_t *)&v1->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v5 + 80), v8, (uint64_t)v39);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v2 + 56))(&v30, v2);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v5 + 16, &v30);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v5, v36, (uint64_t)v37);
  v14 = v38;
  *(_QWORD *)&v30 = MEMORY[0x1E0C809B0];
  *((_QWORD *)&v30 + 1) = 3321888768;
  v31 = ___Z44setup_memoryMap_with_abstract_blob_containerNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_block_invoke;
  v32 = &__block_descriptor_56_ea8_32c62_ZTSNSt3__110shared_ptrIN8Espresso23abstract_blob_containerEEE_e10_v16__0r_v8l;
  v33 = v29;
  v34 = v1;
  if (v1)
  {
    v15 = (unint64_t *)&v1->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v35 = v5;
  Espresso::abstract_context::compute_batch_sync(v14, &v30);
  v17 = v34;
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v37;
  if (v37)
  {
    v21 = (unint64_t *)&v37->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v39;
  if (v39)
  {
    v24 = (unint64_t *)&v39->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  if (v1)
  {
    v26 = (unint64_t *)&v1->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  return v5;
}

void sub_191425704(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3 - 48);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

EspressoWrap__Layer *EspressoWrap__Net__layer_by_name(uint64_t **a1, char *a2)
{
  EspressoWrap__Layer *v4;
  void **v5;
  void *v6;
  uint64_t **v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v4 = (EspressoWrap__Layer *)operator new();
  EspressoWrap__Layer::EspressoWrap__Layer(v4);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__find_equal<std::string>((uint64_t)a1, &v14, __p);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x48uLL);
    v12[1] = a1 + 1;
    *((_OWORD *)v6 + 2) = *(_OWORD *)__p;
    v8 = v11;
    __p[0] = 0;
    __p[1] = 0;
    v11 = 0;
    *((_QWORD *)v6 + 7) = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 6) = v8;
    v13 = 1;
    std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v4, *((_QWORD *)v6 + 7), *((_QWORD *)v6 + 8));
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_191425838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Layer::EspressoWrap__Layer(EspressoWrap__Layer *this)
{
  std::__shared_weak_count *v1;
  unint64_t *v2;
  unint64_t v3;
  __int128 v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v4 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)this, &v4);
  v1 = (std::__shared_weak_count *)*((_QWORD *)&v4 + 1);
  if (*((_QWORD *)&v4 + 1))
  {
    v2 = (unint64_t *)(*((_QWORD *)&v4 + 1) + 8);
    do
      v3 = __ldaxr(v2);
    while (__stlxr(v3 - 1, v2));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void EspressoWrap__Net__set_property(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t **v4;
  _OWORD *v5;
  void *__p[2];
  char v7;
  void **v8;

  v4 = (uint64_t **)(*(_QWORD *)(a1 + 144) + 472);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v8 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v8);
  MEMORY[0x19401C808]((char *)v5 + 56, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_191425940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *EspressoWrap__Net__get_property(uint64_t a1, char *a2)
{
  uint64_t **v2;
  _OWORD *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  std::string v8;
  void *__p[2];
  char v10;
  void **v11;

  v2 = (uint64_t **)(*(_QWORD *)(a1 + 144) + 472);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v11 = __p;
  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, __p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  if (*((char *)v3 + 79) < 0)
    std::string::__init_copy_ctor_external(&v8, *((const std::string::value_type **)v3 + 7), *((_QWORD *)v3 + 8));
  else
    v8 = *(std::string *)((char *)v3 + 56);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (void *)v8.__r_.__value_.__r.__words[0];
    if (SLODWORD(v8.__r_.__value_.__r.__words[1]) >= 0x1FFF)
      v6 = 0x1FFFLL;
    else
      v6 = SLODWORD(v8.__r_.__value_.__r.__words[1]);
    memcpy(return_str(std::string)::buff, v8.__r_.__value_.__l.__data_, v6);
    return_str(std::string)::buff[v6] = 0;
    operator delete(v5);
  }
  else
  {
    v4 = HIBYTE(v8.__r_.__value_.__r.__words[2]);
    memcpy(return_str(std::string)::buff, &v8, HIBYTE(v8.__r_.__value_.__r.__words[2]));
    return_str(std::string)::buff[v4] = 0;
  }
  return return_str(std::string)::buff;
}

void sub_191425A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void EspressoWrap__Net__set_metadata_for_key(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v10;
  unint64_t v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v38;
  _QWORD v39[2];
  __int128 v40[2];
  uint64_t v41;
  void *__p;
  void *v43;
  uint64_t v44;
  void *v45[2];
  char v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;

  v5 = a3;
  v6 = a2;
  v7 = a1;
  v57 = 0;
  v58 = 0;
  v59 = 0;
  if (a5)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    for (i = 0; i != a5; ++i)
    {
      if ((unint64_t)v12 >= v11)
      {
        v14 = (v12 - v10) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if ((uint64_t)(v11 - (_QWORD)v10) >> 1 > v15)
          v15 = (uint64_t)(v11 - (_QWORD)v10) >> 1;
        if (v11 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
        else
          v17 = 0;
        v18 = (char *)(v16 + 4 * v14);
        *(_DWORD *)v18 = *(_DWORD *)(a4 + 4 * i);
        v19 = v18 + 4;
        while (v12 != v10)
        {
          v20 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v18 - 1) = v20;
          v18 -= 4;
        }
        v11 = v16 + 4 * v17;
        v57 = v18;
        v59 = v11;
        if (v10)
          operator delete(v10);
        v10 = v18;
        v12 = v19;
      }
      else
      {
        *(_DWORD *)v12 = *(_DWORD *)(a4 + 4 * i);
        v12 += 4;
      }
      v58 = v12;
    }
    v21 = v57;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v22 = (v12 - v57) >> 2;
    if (v12 == v57)
    {
      v7 = a1;
      v6 = a2;
      v5 = a3;
    }
    else
    {
      if (v22 <= 1)
        v23 = 1;
      else
        v23 = (v12 - v57) >> 2;
      v24 = &v54;
      v7 = a1;
      v6 = a2;
      v5 = a3;
      do
      {
        v25 = *(_DWORD *)v21;
        v21 += 4;
        *(_DWORD *)v24 = v25;
        v24 = (uint64_t *)((char *)v24 + 4);
        --v23;
      }
      while (v23);
    }
  }
  else
  {
    LODWORD(v22) = 0;
    v54 = 0;
    v55 = 0;
    LODWORD(v56) = 0;
  }
  HIDWORD(v56) = v22;
  Espresso::layer_nd_shape::to_canonical_5d_shape((Espresso::layer_nd_shape *)&v54, 0, (uint64_t)&v49);
  v38 = v49;
  v26 = v50;
  v27 = (std::__shared_weak_count *)operator new(0x68uLL);
  v27->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECE0;
  v27[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DA1210;
  v27[3].std::__shared_count = 0u;
  *(_OWORD *)&v27[3].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v27[1].__shared_owners_ = v38;
  LODWORD(v27[2].__vftable) = v26;
  v27[2].__shared_owners_ = v5;
  LOBYTE(v27[2].__shared_weak_owners_) = 0;
  v47 = v27 + 1;
  v48 = v27;
  v29 = *(_QWORD *)(v7 + 144);
  std::string::basic_string[abi:ne180100]<0>(v45, v6);
  v40[0] = v49;
  v40[1] = v50;
  v41 = v51;
  __p = 0;
  v43 = 0;
  v44 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v52, (uint64_t)v53, (v53 - (_BYTE *)v52) >> 2);
  v39[0] = v27 + 1;
  v39[1] = v27;
  do
    v30 = __ldxr(p_shared_owners);
  while (__stxr(v30 + 1, p_shared_owners));
  Espresso::net::set_metadata_for_key(v29, (uint64_t)v45, v40, v39);
  do
    v31 = __ldaxr(p_shared_owners);
  while (__stlxr(v31 - 1, p_shared_owners));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if (v46 < 0)
    operator delete(v45[0]);
  v32 = v48;
  if (v48)
  {
    v33 = (unint64_t *)&v48->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
}

void sub_191425D88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  uint64_t v38;
  void *v40;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (__p)
  {
    a21 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a29 < 0)
    operator delete(a24);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  v40 = *(void **)(v38 - 112);
  if (v40)
  {
    *(_QWORD *)(v38 - 104) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(a1);
}

uint64_t Espresso::blob<float,5>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1210;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return a1;
}

void Espresso::blob<float,5>::~blob(uint64_t a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = &off_1E2DA1210;
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
    {
      Espresso::on_dealloc(*(Espresso **)(a1 + 32), a2);
      free(v3);
    }
  }
  *(_QWORD *)(a1 + 32) = 0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 64);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::blob<float,5>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::blob<float,5>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBECE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::blob<float,5>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t EspressoWrap__Net__get_metadata_for_key(uint64_t a1, char *a2)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p[2];
  __int128 v32;
  uint64_t v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 144) + 1304);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v2, (unsigned __int8 *)__p);
  v4 = (uint64_t)v3;
  if (SBYTE7(v32) < 0)
  {
    operator delete(__p[0]);
    if (!v4)
      return v4;
  }
  else if (!v3)
  {
    return v4;
  }
  std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::pair[abi:ne180100]((uint64_t)__p, (__int128 *)(v4 + 40));
  v4 = operator new();
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  v5 = v36;
  v29 = v36;
  v30 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v6 = (unint64_t *)(v37 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v23 = *(_OWORD *)__p;
  v24 = v32;
  v25 = v33;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v26, v34, (uint64_t)v35, (v35 - (_BYTE *)v34) >> 2);
  v21 = v23;
  v8 = v24;
  v9 = (char *)operator new(0x68uLL);
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 0;
  *(_QWORD *)v9 = &off_1E2DBECE0;
  v10 = *(_QWORD *)(v5 + 32);
  *((_QWORD *)v9 + 3) = &off_1E2DA1210;
  *(_OWORD *)(v9 + 88) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *((_OWORD *)v9 + 2) = v21;
  *((_DWORD *)v9 + 12) = v8;
  *((_QWORD *)v9 + 7) = v10;
  v9[64] = 0;
  *(_QWORD *)&v22 = v9 + 24;
  *((_QWORD *)&v22 + 1) = v9;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](v4 + 32, &v22);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v30;
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v4 + 64), v29, (uint64_t)v30);
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)v37;
  if (v37)
  {
    v18 = (unint64_t *)(v37 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v34)
  {
    v35 = v34;
    operator delete(v34);
  }
  return v4;
}

void sub_191426154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::pair<Espresso::layer_shape,std::shared_ptr<Espresso::blob<float,5>>>::~pair((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__layer_count(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 40) - *(_QWORD *)(*(_QWORD *)(a1 + 144) + 32)) >> 4;
}

_QWORD *EspressoWrap__Net__layer_by_index(uint64_t a1, int a2)
{
  EspressoWrap__Layer *v4;
  uint64_t *v5;
  _QWORD *v6;

  v4 = (EspressoWrap__Layer *)operator new();
  EspressoWrap__Layer::EspressoWrap__Layer(v4);
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 32) + 16 * a2);
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v6, *v5, v5[1]);
}

uint64_t EspressoWrap__Net__blob_by_name(uint64_t a1, char *a2)
{
  uint64_t v2;
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  void *__p[2];
  char v12;
  uint64_t v13[2];
  void **v14;

  v2 = *(_QWORD *)(a1 + 144) + 136;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v14 = __p;
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (unsigned __int8 *)__p, (__int128 **)&v14);
  v4 = (std::__shared_weak_count *)*((_QWORD *)v3 + 6);
  v13[0] = *((_QWORD *)v3 + 5);
  v13[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v12 < 0)
    operator delete(__p[0]);
  v7 = espresso_wrap_blob(v13);
  if (v4)
  {
    v8 = (unint64_t *)&v4->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return v7;
}

void sub_1914262AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL EspressoWrap__Net__has_transform_params(uint64_t a1, char *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v3 = *(_QWORD *)(a1 + 144) + 328;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v4 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v3, __p);
  v5 = *(_QWORD *)(a1 + 144);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5 + 336 != (_QWORD)v4;
}

BOOL EspressoWrap__Net__is_blob_dynamic(uint64_t a1, char *a2)
{
  return Espresso::net::is_blob_dynamic(*(Espresso::net **)(a1 + 144), a2);
}

void EspressoWrap__Net__get_transform_params(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  float v7;
  int v8;
  int v9;
  __int128 v10;
  void *__p[2];
  char v12;

  v5 = *(_QWORD *)(a1 + 144) + 328;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v6 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v5, __p);
  if (v12 < 0)
    operator delete(__p[0]);
  if ((_QWORD *)(*(_QWORD *)(a1 + 144) + 336) == v6)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0uLL;
    v7 = 1.0;
  }
  else
  {
    v7 = *((float *)v6 + 14);
    v8 = *((_DWORD *)v6 + 15);
    v9 = *((_DWORD *)v6 + 17);
    v10 = *(_OWORD *)(v6 + 9);
  }
  *(float *)a3 = v7;
  *(_DWORD *)(a3 + 4) = v8;
  *(_DWORD *)(a3 + 8) = v9;
  *(_OWORD *)(a3 + 12) = v10;
}

void EspressoWrap__Net__set_transform_params(uint64_t a1, char *a2, int *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t **v6;
  char *v7;
  __int128 v13;
  void *__p[2];
  char v15;
  void **v16;

  v3 = *a3;
  v5 = a3[1];
  v4 = a3[2];
  v13 = *(_OWORD *)(a3 + 3);
  v6 = (uint64_t **)(*(_QWORD *)(a1 + 144) + 328);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v16 = __p;
  v7 = std::__tree<std::__value_type<std::string,Espresso::vimage2espresso_param>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::vimage2espresso_param>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::vimage2espresso_param>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v6, __p, (_OWORD **)&v16);
  *((_DWORD *)v7 + 14) = v3;
  *((_DWORD *)v7 + 15) = v5;
  *((_DWORD *)v7 + 16) = 1;
  *((_DWORD *)v7 + 17) = v4;
  *(_OWORD *)(v7 + 72) = v13;
  *((_QWORD *)v7 + 11) = 0;
  *((_QWORD *)v7 + 12) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)v7 + 13) = _D0;
  *((_QWORD *)v7 + 14) = 0;
  *((_QWORD *)v7 + 15) = 0;
  *((_DWORD *)v7 + 32) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_191426498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net_copy_from_image(uint64_t a1, char *__s, void *a3, int a4, int a5, size_t a6, int a7)
{
  int v7;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;
  int v17;
  _QWORD *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  void (***v34)(uint64_t *__return_ptr, _QWORD);
  uint64_t v36;
  _QWORD v37[5];
  vImage_Buffer v38;
  float v39;
  int v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  char *v49;
  int v50;
  uint8_t permuteMap[8];
  char v52;
  __int128 v53;
  __int128 v54;
  int v55;
  vImage_Buffer buf;
  vImage_Buffer src;
  uint8_t *v58;

  v7 = a7;
  src.data = a3;
  src.height = a5;
  src.width = a4;
  src.rowBytes = a6;
  buf.data = 0;
  if (a7 != 1)
  {
    if (a7 == 4)
    {
      vImageBuffer_Init(&buf, a5, a4, 0x20u, 0);
      *(_DWORD *)permuteMap = 50331906;
      vImagePermuteChannels_ARGB8888(&src, &buf, permuteMap, 0);
      src = buf;
    }
    else
    {
      if (a7 != 3)
        return 0xFFFFFFFFLL;
      vImageBuffer_Init(&buf, a5, a4, 0x20u, 0);
      vImageConvert_RGB888toBGRA8888(&src, 0, 0, &buf, 0, 0);
      src = buf;
      v7 = 4;
    }
  }
  v54 = 0uLL;
  v55 = 0;
  v53 = 0uLL;
  v10 = *(_QWORD *)(a1 + 144) + 328;
  std::string::basic_string[abi:ne180100]<0>(permuteMap, __s);
  v11 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::find<std::string>(v10, permuteMap);
  if (v52 < 0)
    operator delete(*(void **)permuteMap);
  v12 = *(_QWORD *)(a1 + 144);
  if ((_QWORD *)(v12 + 336) == v11)
  {
    v14 = 0;
    v17 = 0;
    v36 = 0;
    v15 = 0;
    __asm { FMOV            V10.2S, #1.0 }
    v13 = 1.0;
  }
  else
  {
    v13 = *((float *)v11 + 14);
    v14 = *((_DWORD *)v11 + 15);
    v54 = *(_OWORD *)((char *)v11 + 68);
    v55 = *((_DWORD *)v11 + 21);
    v53 = *(_OWORD *)(v11 + 11);
    _D10 = v11[13];
    v15 = v11[14];
    v36 = v11[15];
    v17 = *((_DWORD *)v11 + 32);
  }
  v22 = (_QWORD *)(v12 + 136);
  std::string::basic_string[abi:ne180100]<0>(permuteMap, __s);
  v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v22, permuteMap);
  v24 = v23;
  if (v52 < 0)
  {
    operator delete(*(void **)permuteMap);
    if (!v24)
      return 0xFFFFFFFFLL;
  }
  else if (!v23)
  {
    return 0xFFFFFFFFLL;
  }
  v25 = *(_QWORD *)(a1 + 144) + 136;
  std::string::basic_string[abi:ne180100]<0>(permuteMap, __s);
  v58 = permuteMap;
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v25, permuteMap, (__int128 **)&v58);
  v28 = *((_QWORD *)v26 + 5);
  v27 = (std::__shared_weak_count *)*((_QWORD *)v26 + 6);
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  if (v52 < 0)
    operator delete(*(void **)permuteMap);
  v31 = *(_DWORD *)(v28 + 20);
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (v31 < 2)
  {
    v34 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 144) + 16);
    v37[1] = 3221225472;
    v38 = src;
    v37[0] = MEMORY[0x1E0C809B0];
    v37[2] = __EspressoWrap__Net_copy_from_image_block_invoke;
    v37[3] = &__block_descriptor_164_e10_v16__0r_v8l;
    v37[4] = a1;
    v50 = v7;
    v39 = v13;
    v40 = v14;
    v41 = 1;
    v43 = v55;
    v42 = v54;
    v44 = v53;
    v45 = _D10;
    v46 = v15;
    v47 = v36;
    v48 = v17;
    v49 = __s;
    Espresso::abstract_context::compute_batch_sync(v34, v37);
    free(buf.data);
    return 0;
  }
  return 0xFFFFFFFFLL;
}

void sub_1914267D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_191426894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap_EnableMontreal(int a1)
{
  espresso_tmp_enable_montreal(a1);
  return 0;
}

uint64_t EspressoWrap__Blob_get_shape(uint64_t a1)
{
  return a1 + 16;
}

void EspressoWrap__Blob_debug_write(_QWORD *a1, const char *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18;
  std::__shared_weak_count *v19;

  v18 = 0;
  v19 = 0;
  v3 = (std::__shared_weak_count *)a1[1];
  v17[0] = *a1;
  v17[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Espresso::sync_copy_to_host(v17, &v18);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = v19;
  v16[0] = v18;
  v16[1] = v19;
  if (v19)
  {
    v9 = (unint64_t *)&v19->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Espresso::debug::write_blob<std::shared_ptr<Espresso::blob<float,4>>>(a2, (uint64_t)v16);
  if (v8)
  {
    v11 = (unint64_t *)&v8->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_191426A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_191426B64(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Espresso::debug::write_blob<std::shared_ptr<Espresso::blob<float,4>>>(const char *a1, uint64_t a2)
{
  FILE *v3;
  FILE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::runtime_error *exception;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = fopen(a1, "wb");
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null file pointer");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = v3;
  v5 = 0;
  v11 = xmmword_191A93A60;
  v6 = *(_QWORD *)a2 + 8;
  do
  {
    *(_DWORD *)((char *)&v11 + v5) = *(_DWORD *)(v6 + v5);
    v5 += 4;
  }
  while (v5 != 16);
  fwrite(&v11, 4uLL, 4uLL, v3);
  v7 = 0;
  v8 = *(int *)(*(_QWORD *)a2 + 8);
  do
  {
    v8 *= *(int *)(*(_QWORD *)a2 + 12 + v7);
    v7 += 4;
  }
  while (v7 != 12);
  fwrite(*(const void **)(*(_QWORD *)a2 + 24), 1uLL, 4 * v8, v4);
  return fclose(v4);
}

void sub_191426C90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8Espresso17sync_copy_to_hostENSt3__110shared_ptrINS_23abstract_blob_containerEEERNS1_INS_4blobIfLi4EEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 48));
}

uint64_t EspressoWrap__Net__forward(uint64_t a1, int a2, int a3)
{
  _QWORD *v4;
  void (***v6)(uint64_t *__return_ptr, _QWORD);
  _QWORD v7[5];
  int v8;
  int v9;

  v4 = *(_QWORD **)(a1 + 160);
  if (v4)
  {
    {
      espresso_plan_build(v4);
      v4 = *(_QWORD **)(a1 + 160);
      if (!v4)
        return (uint64_t)v4;
    }
    {
      return espresso_plan_execute_sync(v4);
    }
  }
  else
  {
    v6 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 144) + 16);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = __EspressoWrap__Net__forward_block_invoke;
    v7[3] = &__block_descriptor_48_e10_v16__0r_v8l;
    v7[4] = a1;
    v8 = a2;
    v9 = a3;
    Espresso::abstract_context::compute_batch_sync(v6, v7);
  }
  return 0;
}

uint64_t EspressoWrap__Net__get_network_t(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

float EspressoWrap__Net__forward_n_times(uint64_t a1, int a2, int a3, int a4, double a5)
{
  void (***v9)(uint64_t *__return_ptr, _QWORD);
  float v10;
  _QWORD v12[5];
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  double v18;
  char v19;

  Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)&v16, "EspressoWrap__Net__forward_n_times", a5);
  v9 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 144) + 16);
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 3221225472;
  v12[2] = __EspressoWrap__Net__forward_n_times_block_invoke;
  v12[3] = &__block_descriptor_52_e10_v16__0r_v8l;
  v12[4] = a1;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  Espresso::abstract_context::compute_batch_sync(v9, v12);
  v19 = 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v18 = (double)(rep - v16) * 0.000001;
  v10 = v18;
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)&v16);
  return v10;
}

void sub_191426EEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)va);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__forward_partial(uint64_t a1, int a2, int a3)
{
  void (***v3)(uint64_t *__return_ptr, _QWORD);
  _QWORD v4[5];
  int v5;
  int v6;

  v3 = *(void (****)(uint64_t *__return_ptr, _QWORD))(*(_QWORD *)(a1 + 144) + 16);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __EspressoWrap__Net__forward_partial_block_invoke;
  v4[3] = &__block_descriptor_48_e10_v16__0r_v8l;
  v4[4] = a1;
  v5 = a2;
  v6 = a3;
  Espresso::abstract_context::compute_batch_sync(v3, v4);
}

void EspressoWrap__Net__delete(uint64_t a1)
{
  espresso_plan_destroy(*(_QWORD *)(a1 + 160));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 144);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 8));
  JUMPOUT(0x19401CD90);
}

uint64_t EspressoWrap__Layer__delete(uint64_t result)
{
  if (result)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

uint64_t EspressoWrap__MemoryMap__delete(_QWORD *a1)
{
  uint64_t v2;
  void (***v3)(uint64_t *__return_ptr, _QWORD);
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  _QWORD v10[5];

  v2 = (uint64_t)(a1 + 10);
  if (!*a1)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 10));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
    std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1);
    JUMPOUT(0x19401CD90);
  }
  v3 = (void (***)(uint64_t *__return_ptr, _QWORD))a1[10];
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = __EspressoWrap__MemoryMap__delete_block_invoke;
  v10[3] = &__block_descriptor_40_e10_v16__0r_v8l;
  v10[4] = a1;
  Espresso::abstract_context::compute_batch_sync(v3, v10);
  v9 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a1, &v9);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 8));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 6));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 4));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 2));
  v7 = std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a1);
  return MEMORY[0x19401CD90](v7, 0x10A0C400EBFD68ALL);
}

uint64_t EspressoWrap__Blob__delete(uint64_t result)
{
  if (result)
  {
    std::shared_ptr<void>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x19401CD90);
  }
  return result;
}

double EspressoWrap__Net__new()
{
  uint64_t v0;
  double result;

  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  v0 = operator new();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)v0 = v0 + 8;
  result = 0.0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_OWORD *)(v0 + 136) = 0u;
  *(_OWORD *)(v0 + 152) = 0u;
  *(_QWORD *)(v0 + 168) = 0;
  *(_DWORD *)(v0 + 176) = -1;
  return result;
}

void EspressoWrap__Layer__new()
{
  EspressoWrap__Layer *v0;

  v0 = (EspressoWrap__Layer *)operator new();
  EspressoWrap__Layer::EspressoWrap__Layer(v0);
}

double EspressoWrap__MemoryMap__new()
{
  _OWORD *v0;
  double result;

  v0 = (_OWORD *)operator new();
  result = 0.0;
  *v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  v0[3] = 0u;
  v0[4] = 0u;
  v0[5] = 0u;
  return result;
}

_QWORD *EspressoWrap__Blob__new()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  return result;
}

_OWORD *EspressoWrap__StatsQuantizer_new(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  _OWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  int v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  _BOOL4 v20;
  void *v21;
  BOOL v22;
  void *v23;
  int v24;
  void *v25;
  BOOL v26;
  void *v27;
  int v28;
  void *v29;
  BOOL v30;
  id v31;
  uint64_t v32;
  uint64_t i;
  void *v34;
  void *v35;
  int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint8x8_t v41;
  unint64_t v42;
  void **v43;
  void *j;
  unint64_t v45;
  float v46;
  _BOOL8 v47;
  unint64_t v48;
  unint64_t v49;
  size_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  void *v54;
  BOOL v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t k;
  void *v60;
  BOOL v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t m;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  _QWORD *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  __int128 v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  _BOOL4 v111;
  id v112;
  _OWORD *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  __int128 v118;
  _OWORD v119[3];
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  void *v123[2];
  uint64_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  id v140;
  _BYTE v141[24];
  __int128 v142;
  __int128 v143;
  float v144;
  _DWORD v145[2];
  _BYTE v146[32];
  int v147;
  _BYTE v148[32];
  int v149;
  void *__p[2];
  uint64_t v151;
  _BYTE v152[40];
  _DWORD v153[2];
  _BYTE v154[40];
  _BYTE v155[40];
  _QWORD v156[2];
  _BYTE v157[128];
  _BYTE v158[128];
  _BYTE v159[128];
  uint64_t v160;

  v160 = *MEMORY[0x1E0C80C00];
  if (!a1 || !a1[18])
    return 0;
  v4 = (_OWORD *)operator new();
  *v4 = 0u;
  v4[1] = 0u;
  v114 = v4;
  v4[2] = 0u;
  *(_QWORD *)&v141[4] = 0;
  *(_QWORD *)&v141[10] = 0;
  *(_DWORD *)v141 = 1065353216;
  *(_DWORD *)&v141[20] = -1082130432;
  v142 = 0u;
  v143 = 0u;
  memset(v146, 0, sizeof(v146));
  v144 = 1.0;
  memset(v145, 0, 7);
  memset(v148, 0, sizeof(v148));
  v147 = 1065353216;
  v149 = 1065353216;
  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "dataUsingEncoding:allowLossyConversion:", 4, 1);
    v6 = (void *)objc_claimAutoreleasedReturnValue();

    v140 = 0;
    objc_msgSend(MEMORY[0x1E0CB36D8], "JSONObjectWithData:options:error:", v6, 0, &v140);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v112 = v140;
    v115 = v7;
    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("quant_relax_factor"));
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v116 = v6;
    if (v8)
    {
      objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("quant_relax_factor"));
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "floatValue");
      *(_DWORD *)v141 = v10;

    }
    else
    {
      *(_DWORD *)v141 = 1065353216;
    }

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("ane_a0_mode_no_mixed_precision"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v141[16] = objc_msgSend(v12, "intValue") != 0;

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("verbose"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)&v141[12] = objc_msgSend(v13, "intValue");

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("hx_compatibility"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v141[17] = objc_msgSend(v14, "intValue") != 0;

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("no_fuse_transform_params"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v111 = objc_msgSend(v15, "intValue") == 0;

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("dont_merge_stats_elementwise"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    LOBYTE(v145[1]) = objc_msgSend(v16, "intValue") != 0;

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("dont_merge_stats_concat"));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE1(v145[1]) = objc_msgSend(v17, "intValue") != 0;

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("discard_original_weights"));
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    BYTE2(v145[1]) = objc_msgSend(v18, "intValue") != 0;

    objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("discard_original_weights"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = v19 == 0;

    if (v20)
      BYTE2(v145[1]) = 1;
    objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("quant_stats_sigma"));
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v21 == 0;

    if (!v22)
    {
      objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("quant_stats_sigma"));
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v23, "floatValue");
      *(_DWORD *)&v141[20] = v24;

    }
    objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("minmax_momentum"));
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    v26 = v25 == 0;

    if (!v26)
    {
      objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("minmax_momentum"));
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v27, "floatValue");
      v145[0] = v28;

    }
    objc_msgSend(v115, "valueForKey:", CFSTR("quant_stats_sigma_per_blob"));
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v30 = v29 == 0;

    if (!v30)
    {
      objc_msgSend(v115, "valueForKey:", CFSTR("quant_stats_sigma_per_blob"));
      v138 = 0u;
      v139 = 0u;
      v136 = 0u;
      v137 = 0u;
      v31 = (id)objc_claimAutoreleasedReturnValue();
      v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v136, v159, 16);
      if (!v32)
        goto LABEL_64;
      v117 = *(_QWORD *)v137;
      while (1)
      {
        for (i = 0; i != v32; ++i)
        {
          if (*(_QWORD *)v137 != v117)
            objc_enumerationMutation(v31);
          v34 = *(void **)(*((_QWORD *)&v136 + 1) + 8 * i);
          objc_msgSend(v31, "objectForKey:", v34);
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v35, "floatValue");
          v37 = v36;
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(v34), "UTF8String"));
          v38 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
          v39 = v38;
          v40 = *((_QWORD *)&v142 + 1);
          if (*((_QWORD *)&v142 + 1))
          {
            v41 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v142 + 8));
            v41.i16[0] = vaddlv_u8(v41);
            v42 = v41.u32[0];
            if (v41.u32[0] > 1uLL)
            {
              v2 = v38;
              if (v38 >= *((_QWORD *)&v142 + 1))
                v2 = v38 % *((_QWORD *)&v142 + 1);
            }
            else
            {
              v2 = (*((_QWORD *)&v142 + 1) - 1) & v38;
            }
            v43 = *(void ***)(v142 + 8 * v2);
            if (v43)
            {
              for (j = *v43; j; j = *(void **)j)
              {
                v45 = *((_QWORD *)j + 1);
                if (v45 == v39)
                {
                  if (std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)j + 16, (unsigned __int8 *)__p))
                  {
                    v6 = v116;
                    goto LABEL_60;
                  }
                }
                else
                {
                  if (v42 > 1)
                  {
                    if (v45 >= v40)
                      v45 %= v40;
                  }
                  else
                  {
                    v45 &= v40 - 1;
                  }
                  if (v45 != v2)
                    break;
                }
              }
            }
            v6 = v116;
          }
          j = operator new(0x30uLL);
          *(_QWORD *)j = 0;
          *((_QWORD *)j + 1) = v39;
          *((_OWORD *)j + 1) = *(_OWORD *)__p;
          *((_QWORD *)j + 4) = v151;
          __p[1] = 0;
          __p[0] = 0;
          v151 = 0;
          *((_DWORD *)j + 10) = 0;
          v46 = (float)(unint64_t)(*((_QWORD *)&v143 + 1) + 1);
          if (!v40 || (float)(v144 * (float)v40) < v46)
          {
            v47 = (v40 & (v40 - 1)) != 0;
            if (v40 < 3)
              v47 = 1;
            v48 = v47 | (2 * v40);
            v49 = vcvtps_u32_f32(v46 / v144);
            if (v48 <= v49)
              v50 = v49;
            else
              v50 = v48;
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__rehash<true>((uint64_t)&v142, v50);
            v40 = *((_QWORD *)&v142 + 1);
            if ((*((_QWORD *)&v142 + 1) & (*((_QWORD *)&v142 + 1) - 1)) != 0)
            {
              if (v39 >= *((_QWORD *)&v142 + 1))
                v2 = v39 % *((_QWORD *)&v142 + 1);
              else
                v2 = v39;
            }
            else
            {
              v2 = (*((_QWORD *)&v142 + 1) - 1) & v39;
            }
          }
          v51 = v142;
          v52 = *(_QWORD **)(v142 + 8 * v2);
          if (v52)
          {
            *(_QWORD *)j = *v52;
LABEL_58:
            *v52 = j;
            goto LABEL_59;
          }
          *(_QWORD *)j = v143;
          *(_QWORD *)&v143 = j;
          *(_QWORD *)(v51 + 8 * v2) = &v143;
          if (*(_QWORD *)j)
          {
            v53 = *(_QWORD *)(*(_QWORD *)j + 8);
            if ((v40 & (v40 - 1)) != 0)
            {
              if (v53 >= v40)
                v53 %= v40;
            }
            else
            {
              v53 &= v40 - 1;
            }
            v52 = (_QWORD *)(v142 + 8 * v53);
            goto LABEL_58;
          }
LABEL_59:
          ++*((_QWORD *)&v143 + 1);
LABEL_60:
          *((_DWORD *)j + 10) = v37;
          if (SHIBYTE(v151) < 0)
            operator delete(__p[0]);

        }
        v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v136, v159, 16);
        if (!v32)
        {
LABEL_64:

          break;
        }
      }
    }
    objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("scale_search_strategy_per_blob"));
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    v55 = v54 == 0;

    if (!v55)
    {
      v134 = 0u;
      v135 = 0u;
      v132 = 0u;
      v133 = 0u;
      objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("scale_search_strategy_per_blob"));
      v56 = (void *)objc_claimAutoreleasedReturnValue();
      v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v132, v158, 16);
      if (v57)
      {
        v58 = *(_QWORD *)v133;
        do
        {
          for (k = 0; k != v57; ++k)
          {
            if (*(_QWORD *)v133 != v58)
              objc_enumerationMutation(v56);
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v132 + 1) + 8 * k)), "UTF8String"));
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v146, (uint64_t)__p, (uint64_t)__p);
            if (SHIBYTE(v151) < 0)
              operator delete(__p[0]);
          }
          v57 = objc_msgSend(v56, "countByEnumeratingWithState:objects:count:", &v132, v158, 16);
        }
        while (v57);
      }

    }
    objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("skip_quantization_for_blobs"));
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = v60 == 0;

    if (!v61)
    {
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      objc_msgSend(v115, "objectForKeyedSubscript:", CFSTR("skip_quantization_for_blobs"));
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v128, v157, 16);
      if (v63)
      {
        v64 = *(_QWORD *)v129;
        do
        {
          for (m = 0; m != v63; ++m)
          {
            if (*(_QWORD *)v129 != v64)
              objc_enumerationMutation(v62);
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v128 + 1) + 8 * m)), "UTF8String"));
            std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v148, (uint64_t)__p, (uint64_t)__p);
            if (SHIBYTE(v151) < 0)
              operator delete(__p[0]);
          }
          v63 = objc_msgSend(v62, "countByEnumeratingWithState:objects:count:", &v128, v157, 16);
        }
        while (v63);
      }

    }
    v11 = v111;
  }
  else
  {
    v11 = 1;
  }
  v66 = (std::__shared_weak_count *)a1[19];
  v125 = a1[18];
  v126 = v66;
  if (v66)
  {
    p_shared_owners = (unint64_t *)&v66->__shared_owners_;
    do
      v68 = __ldxr(p_shared_owners);
    while (__stxr(v68 + 1, p_shared_owners));
  }
  v120 = 0;
  memset(v119, 0, sizeof(v119));
  *(_QWORD *)((char *)v119 + 4) = 1109393408;
  *(_DWORD *)((char *)v119 + 11) = 0;
  v121 = 0u;
  v122 = 0u;
  *(_OWORD *)v123 = 0u;
  v124 = 4096;
  Espresso::auto_optimize((uint64_t)&v125, (uint64_t)v119, &v127);
  if (SHIBYTE(v123[1]) < 0)
    operator delete(*((void **)&v122 + 1));
  __p[0] = &v121;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v69 = v126;
  if (!v126)
    goto LABEL_97;
  v70 = (unint64_t *)&v126->__shared_owners_;
  do
    v71 = __ldaxr(v70);
  while (__stlxr(v71 - 1, v70));
  if (!v71)
  {
    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
    std::__shared_weak_count::__release_weak(v69);
    if (v11)
      goto LABEL_98;
  }
  else
  {
LABEL_97:
    if (v11)
    {
LABEL_98:
      v72 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
      v118 = v127;
      if (*((_QWORD *)&v127 + 1))
      {
        v73 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
      }
      Espresso::quantizer::_fold_transform_params((const Espresso::net **)&v118, __p);
      v75 = *(_OWORD *)__p;
      __p[1] = 0;
      __p[0] = 0;
      v127 = v75;
      if (v72)
      {
        v76 = (unint64_t *)&v72->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v78 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v79 = (unint64_t *)((char *)__p[1] + 8);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
      v81 = (std::__shared_weak_count *)*((_QWORD *)&v118 + 1);
      if (*((_QWORD *)&v118 + 1))
      {
        v82 = (unint64_t *)(*((_QWORD *)&v118 + 1) + 8);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
    }
  }
  EspressoWrap__Net::set_cpp_net(a1, (uint64_t *)&v127);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v114, v127, *((uint64_t *)&v127 + 1));
  v84 = operator new(0x110uLL);
  v84[1] = 0;
  v84[2] = 0;
  *v84 = &off_1E2DC26A0;
  v85 = (std::__shared_weak_count *)a1[19];
  v156[0] = a1[18];
  v156[1] = v85;
  if (v85)
  {
    v86 = (unint64_t *)&v85->__shared_owners_;
    do
      v87 = __ldxr(v86);
    while (__stxr(v87 + 1, v86));
  }
  *(_OWORD *)__p = *(_OWORD *)v141;
  v151 = *(_QWORD *)&v141[16];
  std::unordered_map<std::string,float>::unordered_map((uint64_t)v152, (uint64_t)&v142);
  v153[0] = v145[0];
  *(_DWORD *)((char *)v153 + 3) = *(_DWORD *)((char *)v145 + 3);
  std::unordered_set<std::string>::unordered_set((uint64_t)v154, (uint64_t)v146);
  std::unordered_set<std::string>::unordered_set((uint64_t)v155, (uint64_t)v148);
  Espresso::quantizer::quantizer((uint64_t)(v84 + 3), v156, (__int128 *)__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v155);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v154);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)v152);
  if (v85)
  {
    v88 = (unint64_t *)&v85->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  *(_QWORD *)&v90 = v84 + 3;
  *((_QWORD *)&v90 + 1) = v84;
  v91 = (std::__shared_weak_count *)*((_QWORD *)v114 + 3);
  v114[1] = v90;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = operator new(0x70uLL);
  v95 = v94;
  v94[1] = 0;
  v94[2] = 0;
  *v94 = &off_1E2DBB5C0;
  v96 = a1[18];
  v97 = (std::__shared_weak_count *)a1[19];
  if (v97)
  {
    v98 = (unint64_t *)&v97->__shared_owners_;
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 1, v98));
    v94[3] = v96;
    v94[4] = v97;
    do
      v100 = __ldxr(v98);
    while (__stxr(v100 + 1, v98));
  }
  else
  {
    v94[3] = v96;
    v94[4] = 0;
  }
  v94[12] = 0;
  v94[6] = 0;
  v94[9] = 0;
  v94[5] = v94 + 6;
  v94[7] = 0;
  v94[8] = v94 + 9;
  v94[13] = 0;
  v94[10] = 0;
  v94[11] = v94 + 12;
  if (v97)
  {
    v101 = (unint64_t *)&v97->__shared_owners_;
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  *(_QWORD *)&v103 = v95 + 3;
  *((_QWORD *)&v103 + 1) = v95;
  v104 = (std::__shared_weak_count *)*((_QWORD *)v114 + 5);
  v114[2] = v103;
  if (v104)
  {
    v105 = (unint64_t *)&v104->__shared_owners_;
    do
      v106 = __ldaxr(v105);
    while (__stlxr(v106 - 1, v105));
    if (!v106)
    {
      ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
      std::__shared_weak_count::__release_weak(v104);
    }
  }
  v107 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1))
  {
    v108 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
    do
      v109 = __ldaxr(v108);
    while (__stlxr(v109 - 1, v108));
    if (!v109)
    {
      ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
      std::__shared_weak_count::__release_weak(v107);
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v148);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v146);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&v142);
  return v114;
}

void sub_191428084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a66;
  void *v66;
  void *v67;

  Espresso::quantizer::options_t::~options_t((Espresso::quantizer::options_t *)&a66);
  _Unwind_Resume(a1);
}

void Espresso::quantizer::options_t::~options_t(Espresso::quantizer::options_t *this)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 72);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)this + 24);
}

void std::__shared_ptr_emplace<Espresso::dataset_estimator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB5C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::dataset_estimator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBB5C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::dataset_estimator>::__on_zero_shared(_QWORD **a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 3);
  std::__tree<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>>::destroy(a1[12]);
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(a1[9]);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(a1[6]);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

void std::__shared_ptr_emplace<Espresso::quantizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC26A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::quantizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC26A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::quantizer>::__on_zero_shared(_QWORD **a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 3);
  std::__tree<std::__value_type<std::string,Espresso::blob_numerical_properties>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::blob_numerical_properties>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::blob_numerical_properties>>>::destroy(a1[32]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 26));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(a1 + 21));
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)(a1 + 15));
  std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::destroy(a1[9]);
  std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::destroy(a1[6]);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
}

uint64_t EspressoWrap__StatsQuantizer_load_stats(uint64_t a1, char *a2)
{
  Espresso::quantizer *v3;
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  if (!a1)
    return 0xFFFFFFFFLL;
  v3 = *(Espresso::quantizer **)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::quantizer::load_stats(v3, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 32);
  if (v5 != v4)
  {
    std::__tree<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,std::__tree_node<std::__value_type<std::string,Espresso::dataset_estimator::statistics_entry_t>,void *> *,long>>((char *)(v5 + 16), *(__int128 **)(v4 + 16), (__int128 *)(v4 + 24));
    std::__tree<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,std::__tree_node<std::__value_type<std::string,std::vector<Espresso::dataset_estimator::statistics_entry_t>>,void *> *,long>>((char *)(v5 + 40), *(__int128 **)(v4 + 40), (__int128 *)(v4 + 48));
  }
  return 0;
}

void sub_19142847C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__StatsQuantizer_save_stats(uint64_t a1, char *a2)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  if (!a1)
    return 0xFFFFFFFFLL;
  Espresso::quantizer::set_stats(*(Espresso::quantizer **)(a1 + 16), (const Espresso::dataset_estimator::result_t *)(*(_QWORD *)(a1 + 32) + 16));
  v4 = *(_QWORD *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::dataset_estimator::result_t::save((_QWORD *)(v4 + 16), (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_19142850C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__StatsQuantizer_sample(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  int v6;
  _OWORD v7[2];
  int v8;

  if (!a1)
    return 0xFFFFFFFFLL;
  v4 = 0x100000000;
  memset(v7, 0, sizeof(v7));
  v8 = 1065353216;
  v5 = 1;
  v2 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(v2 + 136);
  if (v7 != (_OWORD *)(v2 + 144))
  {
    v8 = *(_DWORD *)(v2 + 176);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::string,void *> *>>(v7, *(uint64_t **)(v2 + 160), 0);
  }
  Espresso::dataset_estimator::sample_stats_with_current_network_state(*(uint64_t ***)(a1 + 32), (uint64_t)&v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v7);
  return 0;
}

void sub_1914285D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__StatsQuantizer_quantize(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v9[2];

  if (!a1)
    return 0xFFFFFFFFLL;
  Espresso::quantizer::set_stats(*(Espresso::quantizer **)(a1 + 16), (const Espresso::dataset_estimator::result_t *)(*(_QWORD *)(a1 + 32) + 16));
  Espresso::quantizer::quantize(*(Espresso::quantizer **)(a1 + 16));
  if (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 89))
  {
    v2 = *(_QWORD *)a1;
    v3 = *(std::__shared_weak_count **)(a1 + 8);
    v9[0] = v2;
    v9[1] = (uint64_t)v3;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    Espresso::classic_hx_engine_backwards_compatibility(v9);
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  return 0;
}

void sub_191428698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__StatsQuantizer_quantize_layer(_QWORD *a1, char *a2)
{
  _QWORD *i;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  unint64_t v8;
  const void **v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  unsigned __int8 v16;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(a1[2] + 184);
  for (i = *(_QWORD **)(*a1 + 112); i; i = (_QWORD *)*i)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 16 * i[2]);
    v5 = *(unsigned __int8 *)(v4 + 39);
    v6 = *(_QWORD *)(v4 + 24);
    if ((v5 & 0x80u) == 0)
      v7 = (void *)*(unsigned __int8 *)(v4 + 39);
    else
      v7 = *(void **)(v4 + 24);
    v8 = v16;
    if ((v16 & 0x80u) != 0)
      v8 = (unint64_t)__p[1];
    if (v7 != (void *)v8)
      goto LABEL_17;
    v9 = (const void **)(v4 + 16);
    if ((v16 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v5 & 0x80) != 0)
    {
      if (memcmp(*v9, v10, v6))
        goto LABEL_17;
    }
    else if ((_DWORD)v5)
    {
      while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v10)
      {
        v9 = (const void **)((char *)v9 + 1);
        v10 = (void **)((char *)v10 + 1);
        if (!--v5)
          goto LABEL_20;
      }
LABEL_17:
      v11 = i[3];
      v12 = i[4];
      while (v11 != v12)
      {
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1[2] + 184, v11, v11);
        v11 += 24;
      }
    }
LABEL_20:
    ;
  }
  v13 = EspressoWrap__StatsQuantizer_quantize((uint64_t)a1);
  if ((char)v16 < 0)
    operator delete(__p[0]);
  return v13;
}

void sub_1914287E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t EspressoWrap__StatsQuantizer_delete(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  if (!a1)
    return 0xFFFFFFFFLL;
  v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    v6 = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1);
  MEMORY[0x19401CD90](v8, 0x20C40A759441BLL);
  return 0;
}

void **EspressoWrap__Net__get_configurations_json(uint64_t a1)
{
  Espresso::net *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void **v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  __int128 v14;
  uint64_t v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  Espresso::net *v21;
  std::__shared_weak_count *v22;

  v2 = *(Espresso::net **)(a1 + 144);
  v3 = *(std::__shared_weak_count **)(a1 + 152);
  v21 = v2;
  v22 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  Espresso::net::save_additional_configurations(v2, &v19);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 288))(v19, v16);
  std::stringbuf::str();
  v6 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v6);
  *(_OWORD *)v6 = v14;
  *(_QWORD *)(a1 + 136) = v15;
  if (*(char *)(a1 + 143) < 0)
    v6 = (void **)*v6;
  v16[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v16[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v17 < 0)
    operator delete((void *)v16[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](&v18);
  v7 = v20;
  if (v20)
  {
    v8 = (unint64_t *)&v20->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v22;
  if (v22)
  {
    v11 = (unint64_t *)&v22->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return v6;
}

void sub_191428A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4 - 64);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__set_configurations_json(uint64_t a1, char *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22[2];
  std::string v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  void *v28;
  char v29;
  _QWORD v30[21];

  v30[20] = *MEMORY[0x1E0C80C00];
  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v24, (uint64_t)v4, __p);
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v23, a2);
  std::istringstream::basic_istringstream[abi:ne180100](__p, &v23);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v5 = v24;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 280))(v24, __p);
  v6 = *(_QWORD *)(a1 + 144);
  v7 = *(_QWORD *)(a1 + 152);
  v23.__r_.__value_.__r.__words[0] = v6;
  v23.__r_.__value_.__l.__size_ = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)v25;
  v22[0] = v5;
  v22[1] = v25;
  if (v25)
  {
    v11 = (unint64_t *)(v25 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  Espresso::net::restore_additional_configurations(v6, v22);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  size = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  if (v23.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(v23.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  __p[0] = *(void **)MEMORY[0x1E0DE4F58];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
  v27 = MEMORY[0x1E0DE4FB8] + 16;
  if (v29 < 0)
    operator delete(v28);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19401CCD0](v30);
  v18 = (std::__shared_weak_count *)v25;
  if (v25)
  {
    v19 = (unint64_t *)(v25 + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return 1;
}

void sub_191428CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, __int128 buf,int a21,__int16 a22,char a23,char a24)
{
  Espresso *v26;
  const char *v27;
  NSObject *v28;
  uint64_t v29;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::istringstream::~istringstream((uint64_t)&buf);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  if (a2 == 1)
  {
    v26 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v26, v27);
    v28 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      v29 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v26 + 16))(v26);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v29;
      _os_log_error_impl(&dword_190DAF000, v28, OS_LOG_TYPE_ERROR, "Error: %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x191428CC8);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__select_configuration(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD **)(a1 + 160);
  if (!v2)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("invalid plan");
  v3 = *(_QWORD **)(a1 + 168);
  if (!v3)
    Espresso::throw_exception_selector<Espresso::invalid_state_error>("invalid net");
  v5 = *(_QWORD *)(a1 + 176);
  v6 = espresso_plan_build_clean(*(const void **)(a1 + 160));
  if (!(_DWORD)v6)
  {
    v6 = espresso_network_select_configuration(v3, v5, a2);
    if (!(_DWORD)v6)
      return espresso_plan_build(v2);
  }
  return v6;
}

void sub_191428EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  Espresso *v9;
  const char *v10;
  NSObject *v11;
  std::exception *v12;
  uint64_t v13;

  if (a2 == 1)
  {
    v9 = (Espresso *)__cxa_begin_catch(exception_object);
    Espresso::espresso_os_log_subsystem(v9, v10);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v9 + 16))(v9);
      LODWORD(a9) = 136315138;
      *(_QWORD *)((char *)&a9 + 4) = v13;
      _os_log_error_impl(&dword_190DAF000, v11, OS_LOG_TYPE_ERROR, "Error: %s", (uint8_t *)&a9, 0xCu);
    }

    EspressoLight::handle_ex_(v9, v12);
    __cxa_end_catch();
    JUMPOUT(0x191428E84);
  }
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__Net__set_script_json(uint64_t a1, char *a2)
{
  void *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20[2];
  std::string v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  uint64_t v25;
  void *v26;
  char v27;
  _QWORD v28[21];

  v28[20] = *MEMORY[0x1E0C80C00];
  v4 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v22, (uint64_t)v4, __p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v21, a2);
  std::istringstream::basic_istringstream[abi:ne180100](__p, &v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 280))(v22, __p);
  v6 = *(_QWORD *)(a1 + 144);
  v5 = *(std::__shared_weak_count **)(a1 + 152);
  v21.__r_.__value_.__r.__words[0] = v6;
  v21.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v20[0] = 0;
  v20[1] = 0;
  Espresso::net::setup_script(v6, v20, 0);
  if (v5)
  {
    v9 = (unint64_t *)&v5->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  Espresso::shape_network_recursive((Espresso *)v6, (Espresso::net *)(v6 + 184), 0, 0);
  if (v5)
  {
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  size = (std::__shared_weak_count *)v21.__r_.__value_.__l.__size_;
  if (v21.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(v21.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  __p[0] = *(void **)MEMORY[0x1E0DE4F58];
  *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F58] + 24);
  v25 = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete(v26);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x19401CCD0](v28);
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return 1;
}

void sub_1914291D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,__int128 buf,int a23,__int16 a24,char a25,char a26)
{
  Espresso *v28;
  const char *v29;
  NSObject *v30;
  uint64_t v31;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::istringstream::~istringstream((uint64_t)&buf);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  if (a2 == 1)
  {
    v28 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v28, v29);
    v30 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      v31 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v28 + 16))(v28);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v31;
      _os_log_error_impl(&dword_190DAF000, v30, OS_LOG_TYPE_ERROR, "EspressoWrap__Net__set_script_json error: %s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1914291A8);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__set_subnetwork(uint64_t a1, char *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void **v16;
  void *__p[2];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 144);
  v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v16 = __p;
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::net>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5 + 984, (unsigned __int8 *)__p, (__int128 **)&v16);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v8 + 5, *(_QWORD *)(a3 + 144), *(_QWORD *)(a3 + 152));
  if (v18 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a3 + 144);
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)(v9 + 1088) = v5;
  v12 = *(std::__shared_weak_count **)(v9 + 1096);
  *(_QWORD *)(v9 + 1096) = v4;
  if (v12)
    std::__shared_weak_count::__release_weak(v12);
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return 1;
}

void sub_191429420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, __int128 __p, int a14, __int16 a15, char a16, char a17)
{
  Espresso *v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;

  if (a17 < 0)
    operator delete((void *)__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a2 == 1)
  {
    v19 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v19, v20);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v19 + 16))(v19);
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v22;
      _os_log_error_impl(&dword_190DAF000, v21, OS_LOG_TYPE_ERROR, "EspressoWrap__Net__set_script_json error: %s", (uint8_t *)&__p, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1914293F0);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__get_subnetwork(uint64_t a1, char *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17[3];
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 144);
  v2 = *(std::__shared_weak_count **)(a1 + 152);
  v17[2] = v3;
  v18 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>((_QWORD *)(v3 + 984), (unsigned __int8 *)__p);
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 6);
  v17[0] = *((_QWORD *)v6 + 5);
  v17[1] = (uint64_t)v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  if (v20 < 0)
    operator delete(__p[0]);
  v10 = operator new();
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)v10 = v10 + 8;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_QWORD *)(v10 + 168) = 0;
  *(_DWORD *)(v10 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v10, v17);
  EspressoWrap__Net__touch(v10);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v13 = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v10;
}

void sub_191429680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, __int128 __p, int a14, __int16 a15, char a16, char a17)
{
  Espresso *v19;
  const char *v20;
  NSObject *v21;
  uint64_t v22;

  if (a17 < 0)
    operator delete((void *)__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a2 == 1)
  {
    v19 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v19, v20);
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      v22 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v19 + 16))(v19);
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v22;
      _os_log_error_impl(&dword_190DAF000, v21, OS_LOG_TYPE_ERROR, "EspressoWrap__Net__set_script_json error: %s", (uint8_t *)&__p, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x191429640);
  }
  _Unwind_Resume(a1);
}

char *EspressoWrap__Net__get_subnetwork_names(uint64_t a1)
{
  __int128 *v1;
  size_t size;
  void **v3;
  std::string *v4;
  void **v5;
  std::string::size_type v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  void *__p[2];
  unsigned __int8 v13;
  std::string v14;
  std::__shared_weak_count *v15;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  v1 = *(__int128 **)(*(_QWORD *)(a1 + 144) + 1000);
  if (!v1)
    goto LABEL_30;
  do
  {
    std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100](&v14, v1 + 1);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    else
      size = v14.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
    if ((v13 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if (size)
    {
      if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v4 = &v14;
      else
        v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
      memmove(v3, v4, size);
    }
    *(_WORD *)((char *)v3 + size) = 44;
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (std::string::size_type)__p[1];
    std::string::append(&v16, (const std::string::value_type *)v5, v6);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v7 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    v1 = *(__int128 **)v1;
  }
  while (v1);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v10 = (void *)v16.__r_.__value_.__r.__words[0];
    strcpy(EspressoWrap__Net__get_subnetwork_names::ret, v16.__r_.__value_.__l.__data_);
    operator delete(v10);
  }
  else
  {
LABEL_30:
    strcpy(EspressoWrap__Net__get_subnetwork_names::ret, (const char *)&v16);
  }
  return EspressoWrap__Net__get_subnetwork_names::ret;
}

void sub_1914298C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0)
    operator delete(__p);
  std::pair<std::string const,std::shared_ptr<Espresso::net>>::~pair((uint64_t)&a16);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__append_net(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __int128 *v27;
  __int128 *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 *v33;
  BOOL v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 *v57;
  std::__shared_weak_count *v58;
  uint64_t *v59[3];
  char *v60[3];
  _QWORD v61[2];
  const std::string *v62[3];
  uint64_t v63[2];
  uint64_t v64[2];
  uint64_t v65;
  std::__shared_weak_count *v66;
  char v67[8];
  std::__shared_weak_count *v68;
  _QWORD *v69[7];
  char v70;
  std::__shared_weak_count *v71;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;

  v3 = a1[18];
  v4 = (std::__shared_weak_count *)a1[19];
  v77 = v3;
  v78 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = *(std::__shared_weak_count **)(a2 + 152);
  v75 = *(_QWORD *)(a2 + 144);
  v76 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v65 = v3;
  v66 = v4;
  if (v4)
  {
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *(std::__shared_weak_count **)(v3 + 24);
  v64[0] = *(_QWORD *)(v3 + 16);
  v64[1] = (uint64_t)v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(_DWORD *)(**(_QWORD **)(v3 + 32) + 12);
  v63[0] = 0;
  v63[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)v67, &v65, v64, v15, v63);
  if (v12)
  {
    v16 = (unint64_t *)&v12->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v18 = v66;
  if (v66)
  {
    v19 = (unint64_t *)&v66->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  memset(v62, 0, sizeof(v62));
  v21 = v76;
  v61[0] = v75;
  v61[1] = v76;
  if (v76)
  {
    v22 = (unint64_t *)&v76->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  Espresso::sequential_builder::add_network((uint64_t)v67, v61, v62);
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v26 = v75;
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v59, (__int128 **)(v75 + 184));
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v60, (__int128 **)(v26 + 208));
  v27 = *(__int128 **)(v77 + 184);
  v28 = (__int128 *)(v77 + 192);
  if (v27 != (__int128 *)(v77 + 192))
  {
    do
    {
      v57 = v27 + 2;
      v29 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v59, (_QWORD *)v27 + 4, &v57);
      v30 = *(__int128 *)((char *)v27 + 56);
      v31 = *(__int128 *)((char *)v27 + 72);
      *((_QWORD *)v29 + 11) = *((_QWORD *)v27 + 11);
      *(_OWORD *)(v29 + 72) = v31;
      *(_OWORD *)(v29 + 56) = v30;
      if (v27 != (__int128 *)v29)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v29 + 96, *((char **)v27 + 12), *((_QWORD *)v27 + 13), (uint64_t)(*((_QWORD *)v27 + 13) - *((_QWORD *)v27 + 12)) >> 2);
      v32 = (__int128 *)*((_QWORD *)v27 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(__int128 **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (__int128 *)*((_QWORD *)v27 + 2);
          v34 = *(_QWORD *)v33 == (_QWORD)v27;
          v27 = v33;
        }
        while (!v34);
      }
      v27 = v33;
    }
    while (v33 != v28);
  }
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)v67, (const Espresso::network_shape *)v59, &v57);
  EspressoWrap__Net::set_cpp_net(a1, (uint64_t *)&v57);
  v35 = v58;
  if (v58)
  {
    v36 = (unint64_t *)&v58->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  EspressoWrap__Net__touch((uint64_t)a1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v60, v60[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v59, (char *)v59[1]);
  v59[0] = (uint64_t *)v62;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v59);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v74);
  v38 = v73;
  if (v73)
  {
    v39 = (unint64_t *)&v73->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = v72;
  if (v72)
  {
    v42 = (unint64_t *)&v72->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = v71;
  if (v71)
  {
    v45 = (unint64_t *)&v71->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v70 < 0)
    operator delete(v69[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v69, v69[1]);
  v47 = v68;
  if (v68)
  {
    v48 = (unint64_t *)&v68->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v76;
  if (v76)
  {
    v51 = (unint64_t *)&v76->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v78;
  if (v78)
  {
    v54 = (unint64_t *)&v78->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  return 1;
}

void sub_191429D6C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  uint64_t v28;

  Espresso::network_shape::~network_shape(&a11);
  a11 = &a19;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  Espresso::sequential_builder::~sequential_builder(&a28);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 80);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v28 - 64);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x191429D54);
  }
  _Unwind_Resume(a1);
}

_QWORD *EspressoWrap__Net__insert_net(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 *v53;
  __int128 *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 *v77;
  std::__shared_weak_count *v78;
  uint64_t *v79[3];
  char *v80[5];
  _QWORD v81[4];
  const std::string *v82[3];
  std::string v83;
  char v84[40];
  void *v85;
  void *v86;
  void *__p;
  char v88;
  uint64_t v89[2];
  uint64_t v90[2];
  char v91[8];
  std::__shared_weak_count *v92;
  _QWORD *v93[7];
  char v94;
  std::__shared_weak_count *v95;
  std::__shared_weak_count *v96;
  std::__shared_weak_count *v97;
  uint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  _QWORD *v101;
  char *v102;

  v5 = (_QWORD *)a1[18];
  v6 = a1[19];
  v101 = v5;
  v102 = (char *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a2 + 152);
  v99 = *(_QWORD *)(a2 + 144);
  v100 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  v13 = v5[4];
  v12 = v5[5];
  v14 = (std::__shared_weak_count *)v5[3];
  v90[0] = v5[2];
  v90[1] = (uint64_t)v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = v5[4];
  }
  else
  {
    v17 = v13;
  }
  v18 = *(_DWORD *)(*(_QWORD *)v17 + 12);
  v89[0] = 0;
  v89[1] = 0;
  Espresso::sequential_builder::sequential_builder((uint64_t)v91, v90, v18, v89);
  if (v14)
  {
    v19 = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  Espresso::sequential_builder::init_net_shape((Espresso::sequential_builder *)v91);
  v21 = (_QWORD *)v101[29];
  v22 = v101 + 30;
  if (v21 != v101 + 30)
  {
    do
    {
      v79[0] = v21 + 4;
      v23 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v101 + 17), (unsigned __int8 *)v21 + 32, (__int128 **)v79);
      Espresso::abstract_blob_container::shape(v84, *((_QWORD *)v23 + 5));
      if (*((char *)v21 + 55) < 0)
        std::string::__init_copy_ctor_external(&v83, (const std::string::value_type *)v21[4], v21[5]);
      else
        v83 = *(std::string *)(v21 + 4);
      Espresso::sequential_builder::placeholder((Espresso::sequential_builder *)v91, v84, (std::string::size_type)&v83, (uint64_t)&__p);
      if (v88 < 0)
        operator delete(__p);
      if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v83.__r_.__value_.__l.__data_);
      if (v85)
      {
        v86 = v85;
        operator delete(v85);
      }
      v24 = (_QWORD *)v21[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v21[2];
          v26 = *v25 == (_QWORD)v21;
          v21 = v25;
        }
        while (!v26);
      }
      v21 = v25;
    }
    while (v25 != v22);
  }
  memset(v82, 0, sizeof(v82));
  if (a3 >= 1)
  {
    v27 = 0;
    do
    {
      v28 = v101;
      v29 = (std::__shared_weak_count *)v102;
      v81[2] = v101;
      v81[3] = v102;
      if (v102)
      {
        v30 = (unint64_t *)(v102 + 8);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      Espresso::sequential_builder::copy_layer_from_network((uint64_t)v91, v28, v27, v82);
      if (v29)
      {
        v32 = (unint64_t *)&v29->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      ++v27;
    }
    while (v27 != a3);
  }
  v34 = v100;
  v81[0] = v99;
  v81[1] = v100;
  if (v100)
  {
    v35 = (unint64_t *)&v100->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
  }
  Espresso::sequential_builder::add_network((uint64_t)v91, v81, v82);
  v37 = (v12 - v13) >> 4;
  if (v34)
  {
    v38 = (unint64_t *)&v34->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v37 > a3)
  {
    v40 = a3;
    do
    {
      v41 = v101;
      v42 = (std::__shared_weak_count *)v102;
      v80[3] = (char *)v101;
      v80[4] = v102;
      if (v102)
      {
        v43 = (unint64_t *)(v102 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      Espresso::sequential_builder::copy_layer_from_network((uint64_t)v91, v41, (int)v40, v82);
      if (v42)
      {
        v45 = (unint64_t *)&v42->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      ++v40;
    }
    while (v40 != v37);
  }
  v47 = v99;
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v79, (__int128 **)(v99 + 184));
  std::map<std::string,Espresso::layer_shape>::map[abi:ne180100]((uint64_t)v80, (__int128 **)(v47 + 208));
  v48 = (__int128 *)v101[23];
  v49 = (__int128 *)(v101 + 24);
  if (v48 != (__int128 *)(v101 + 24))
  {
    do
    {
      v77 = v48 + 2;
      v50 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v79, (_QWORD *)v48 + 4, &v77);
      v51 = *(__int128 *)((char *)v48 + 56);
      v52 = *(__int128 *)((char *)v48 + 72);
      *((_QWORD *)v50 + 11) = *((_QWORD *)v48 + 11);
      *(_OWORD *)(v50 + 72) = v52;
      *(_OWORD *)(v50 + 56) = v51;
      if (v48 != (__int128 *)v50)
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v50 + 96, *((char **)v48 + 12), *((_QWORD *)v48 + 13), (uint64_t)(*((_QWORD *)v48 + 13) - *((_QWORD *)v48 + 12)) >> 2);
      v53 = (__int128 *)*((_QWORD *)v48 + 1);
      if (v53)
      {
        do
        {
          v54 = v53;
          v53 = *(__int128 **)v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          v54 = (__int128 *)*((_QWORD *)v48 + 2);
          v26 = *(_QWORD *)v54 == (_QWORD)v48;
          v48 = v54;
        }
        while (!v26);
      }
      v48 = v54;
    }
    while (v54 != v49);
  }
  Espresso::sequential_builder::build_from_network_shape((Espresso::sequential_builder *)v91, (const Espresso::network_shape *)v79, &v77);
  EspressoWrap__Net::set_cpp_net(a1, (uint64_t *)&v77);
  v55 = v78;
  if (v78)
  {
    v56 = (unint64_t *)&v78->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  EspressoWrap__Net__touch((uint64_t)a1);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v80, v80[1]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v79, (char *)v79[1]);
  v79[0] = (uint64_t *)v82;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)v79);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v98);
  v58 = v97;
  if (v97)
  {
    v59 = (unint64_t *)&v97->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v96;
  if (v96)
  {
    v62 = (unint64_t *)&v96->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  v64 = v95;
  if (v95)
  {
    v65 = (unint64_t *)&v95->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  if (v94 < 0)
    operator delete(v93[5]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v93, v93[1]);
  v67 = v92;
  if (v92)
  {
    v68 = (unint64_t *)&v92->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = v100;
  if (v100)
  {
    v71 = (unint64_t *)&v100->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v73 = (std::__shared_weak_count *)v102;
  if (v102)
  {
    v74 = (unint64_t *)(v102 + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  return a1;
}

void sub_19142A450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,char a47,uint64_t a48,void *a49)
{
  uint64_t v49;

  Espresso::network_shape::~network_shape(&a12);
  a12 = &a24;
  std::vector<Espresso::profiler_t::compiler_analytics_entry_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  Espresso::sequential_builder::~sequential_builder(&a49);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 96);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 80);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x19142A430);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__rewire_layer_input(uint64_t a1, char *a2, char *a3, char *a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v8 = *(_QWORD *)(a1 + 144);
  v7 = *(std::__shared_weak_count **)(a1 + 152);
  v20 = v8;
  v21 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(v18, a2);
  std::string::basic_string[abi:ne180100]<0>(v16, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, a4);
  Espresso::net::rewire_layer_input(v8, (unsigned __int8 *)v18, (uint64_t)v16, (__int128 *)__p);
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  EspressoWrap__Net__touch(a1);
  return 1;
}

void sub_19142A680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v27 - 64);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x19142A668);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__remove_layer(uint64_t a1, int a2)
{
  Espresso::net *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v3 = *(Espresso::net **)(a1 + 144);
  v4 = *(std::__shared_weak_count **)(a1 + 152);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  Espresso::net::remove_layer(v3, a2);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  EspressoWrap__Net__touch(a1);
  return 1;
}

void sub_19142A790(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x19142A780);
  }
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__quantization_mode(uint64_t a1, int a2, char *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  Espresso *v17;
  std::__shared_weak_count *v18;
  Espresso *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v25;
  _QWORD v26[2];
  void **v27[5];
  uint64_t v28[3];
  _QWORD v29[2];

  v6 = *(std::__shared_weak_count **)(a1 + 152);
  v29[0] = *(_QWORD *)(a1 + 144);
  v29[1] = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = Espresso::net_number_of_bits((uint64_t)v29);
  if (!v6)
    goto LABEL_8;
  v10 = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!a2)
      return v9;
  }
  else
  {
LABEL_8:
    if (!a2)
      return v9;
  }
  Espresso::string_split((Espresso *)v28, a3);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v27, v28[0], v28[1]);
  v12 = *(std::__shared_weak_count **)(a1 + 152);
  v26[0] = *(_QWORD *)(a1 + 144);
  v26[1] = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  Espresso::transform_dequantize((uint64_t)v26, (uint64_t)v27);
  if (v12)
  {
    v15 = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v17 = *(Espresso **)(a1 + 144);
  v18 = *(std::__shared_weak_count **)(a1 + 152);
  v25 = v18;
  v19 = v17;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v19 = *(Espresso **)(a1 + 144);
  }
  Espresso::shape_network_recursive(v17, (Espresso *)((char *)v19 + 184), 0, 0);
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  EspressoWrap__Net__touch(a1);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v27);
  v27[0] = (void **)v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v27);
  return v9;
}

void sub_19142A974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a13);
  a13 = (void **)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_19142AA30(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_BYTE *EspressoWrap__Layer__json_params(uint64_t *a1)
{
  std::__shared_weak_count *v1;
  uint64_t v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  _QWORD *i;
  uint64_t v10;
  void *v11;
  size_t v12;
  std::__shared_weak_count *size;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::runtime_error *exception;
  std::string *v27;
  __int128 v28;
  void *__src;
  uint64_t v30;
  unsigned __int8 v31;
  std::string __p[3];
  void *v33;
  char v34;
  uint64_t v35;
  std::string v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;

  v2 = *a1;
  v1 = (std::__shared_weak_count *)a1[1];
  v41 = *a1;
  v42 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v5 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v39, (uint64_t)v5, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v6 = Espresso::factory_t<Espresso::SerDes::layer_io_base>::shared();
  Espresso::factory_t<Espresso::SerDes::layer_io_base>::get(&v37, (uint64_t)v6, (_QWORD *)(v2 + 40));
  if (!v37)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v27 = std::string::append(&v36, "'");
    v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p[0].__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, __p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v39;
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v37 + 24))(v37, v39, *(_QWORD *)(v2 + 64));
  v8 = Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::shared();
  std::string::basic_string[abi:ne180100]<0>(__p, "json");
  Espresso::factory_t<Espresso::SerDes::generic_serdes_object>::make(&v36, (uint64_t)v8, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  for (i = (_QWORD *)(*(_QWORD *)(v2 + 64) + 256);
        ;
        (*(void (**)(std::string::size_type, _QWORD *, _QWORD *))(*(_QWORD *)v36.__r_.__value_.__l.__data_
                                                                           + 160))(v36.__r_.__value_.__r.__words[0], i + 2, i + 5))
  {
    i = (_QWORD *)*i;
    if (!i)
      break;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "attributes");
  (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)v7 + 240))(v7, __p, &v36);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 288))(v7, __p);
  std::stringbuf::str();
  if ((char)v31 < 0)
  {
    v11 = __src;
    if ((int)v30 >= 0x1FFF)
      v12 = 0x1FFFLL;
    else
      v12 = (int)v30;
    memcpy(return_str(std::string)::buff, __src, v12);
    return_str(std::string)::buff[v12] = 0;
    operator delete(v11);
  }
  else
  {
    v10 = v31;
    memcpy(return_str(std::string)::buff, &__src, v31);
    return_str(std::string)::buff[v10] = 0;
  }
  __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                            + *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                 + 24);
  __p[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
  if (v34 < 0)
    operator delete(v33);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](&v35);
  size = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
  if (v36.__r_.__value_.__l.__size_)
  {
    v14 = (unint64_t *)(v36.__r_.__value_.__l.__size_ + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v16 = v38;
  if (v38)
  {
    v17 = (unint64_t *)&v38->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v40;
  if (v40)
  {
    v20 = (unint64_t *)&v40->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v42;
  if (v42)
  {
    v23 = (unint64_t *)&v42->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return return_str(std::string)::buff;
}

void sub_19142ADF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;
  int v19;
  uint64_t v20;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 97) < 0)
  {
    operator delete(*(void **)(v20 - 120));
    if ((v19 & 1) == 0)
    {
LABEL_8:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 96);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 80);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v20 - 64);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v18);
  goto LABEL_8;
}

uint64_t EspressoWrap__Net__build_variables_loader(uint64_t a1, char *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10[2];
  unsigned __int8 **v11;
  std::__shared_weak_count *v12;
  unsigned __int8 *v13[3];

  v4 = operator new();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)v4 = v4 + 8;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_QWORD *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 176) = -1;
  Espresso::string_split((Espresso *)v13, a2);
  Espresso::build_variable_loader(&v11, (uint64_t *)(a1 + 144), v13);
  EspressoWrap__Net::set_cpp_net((_QWORD *)v4, (uint64_t *)&v11);
  v5 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(_QWORD *)(v4 + 144);
  v10[0] = 0;
  v10[1] = 0;
  Espresso::net::setup_script(v8, v10, 0);
  EspressoWrap__Net__touch(v4);
  v11 = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
  return v4;
}

void sub_19142B01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__build_initializer(uint64_t a1, int a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  std::string *v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD **v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *i;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  std::__shared_weak_count *size;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t *v57;
  __int128 v58;
  int v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  void **v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::string::size_type v69;
  uint64_t v70;
  uint64_t j;
  _DWORD *v72;
  void **v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v108;
  int v110;
  __int128 v111;
  uint64_t v112[2];
  uint64_t v113;
  std::__shared_weak_count *v114;
  void *__p[2];
  __int128 v116;
  float v117;
  uint64_t v118[3];
  std::string *v119;
  std::string *v120;
  std::string *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  std::string v124;
  char v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  std::string *v129;
  std::string *v130;
  std::string *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  _QWORD v137[2];
  std::string *v138;
  std::string *v139;
  std::string *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *lpsrc;
  std::__shared_weak_count *v145;
  std::string v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  std::string __str;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153[2];
  uint64_t v154;
  std::__shared_weak_count *v155;
  __int128 __s;
  _QWORD v157[7];
  char v158;
  std::__shared_weak_count *v159;
  std::__shared_weak_count *v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  void **v163;
  std::__shared_weak_count *v164;
  std::string v165;
  uint64_t v166;
  std::string v167;
  uint64_t v168;
  std::string v169;
  __int128 v170;

  *(_QWORD *)&v170 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__p = 0u;
  v116 = 0u;
  v117 = 1.0;
  if (a2 < 1)
    goto LABEL_97;
  v7 = 0;
  v108 = a2;
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&__s, *(char **)(a3 + 24 * v7));
    Espresso::net::get_global(&__str, *(_QWORD *)(a1 + 144), (unsigned __int8 *)&__s);
    v8 = a3 + 24 * v7;
    v9 = *(_QWORD *)(v8 + 12);
    v110 = *(_DWORD *)(v8 + 8);
    v111 = *(_OWORD *)(__str.__r_.__value_.__r.__words[0] + 8);
    v10 = *(_DWORD *)(__str.__r_.__value_.__r.__words[0] + 24);
    v11 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&__s);
    v12 = v11;
    v13 = (unint64_t)__p[1];
    if (!__p[1])
      goto LABEL_20;
    v14 = a3;
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v4 = v11;
      if ((void *)v11 >= __p[1])
        v4 = v11 % (unint64_t)__p[1];
    }
    else
    {
      v4 = ((unint64_t)__p[1] - 1) & v11;
    }
    v17 = (void **)*((_QWORD *)__p[0] + v4);
    if (!v17 || (v18 = (char *)*v17) == 0)
    {
LABEL_19:
      a3 = v14;
LABEL_20:
      v18 = (char *)operator new(0x58uLL);
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = v12;
      v20 = (std::string *)(v18 + 16);
      if (SHIBYTE(v157[0]) < 0)
      {
        std::string::__init_copy_ctor_external(v20, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
      }
      else
      {
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = __s;
        *((_QWORD *)v18 + 4) = v157[0];
      }
      *(_OWORD *)(v18 + 40) = 0u;
      *(_OWORD *)(v18 + 56) = 0u;
      *(_OWORD *)(v18 + 72) = 0u;
      *((_DWORD *)v18 + 11) = 1065353216;
      *(_OWORD *)(v18 + 52) = xmmword_191A935B0;
      *(_OWORD *)(v18 + 68) = xmmword_191A8D8A0;
      v21 = (float)(unint64_t)(*((_QWORD *)&v116 + 1) + 1);
      if (v13 && (float)(v117 * (float)v13) >= v21)
      {
LABEL_69:
        v37 = __p[0];
        v38 = (_QWORD *)*((_QWORD *)__p[0] + v4);
        if (v38)
        {
          *(_QWORD *)v18 = *v38;
          v43 = v110;
        }
        else
        {
          *(_QWORD *)v18 = v116;
          *(_QWORD *)&v116 = v18;
          v37[v4] = &v116;
          v43 = v110;
          if (!*(_QWORD *)v18)
          {
LABEL_78:
            ++*((_QWORD *)&v116 + 1);
            goto LABEL_79;
          }
          v39 = *(_QWORD *)(*(_QWORD *)v18 + 8);
          if ((v13 & (v13 - 1)) != 0)
          {
            if (v39 >= v13)
              v39 %= v13;
          }
          else
          {
            v39 &= v13 - 1;
          }
          v38 = (char *)__p[0] + 8 * v39;
        }
        *v38 = v18;
        goto LABEL_78;
      }
      v22 = (v13 & (v13 - 1)) != 0;
      if (v13 < 3)
        v22 = 1;
      v23 = v22 | (2 * v13);
      v24 = vcvtps_u32_f32(v21 / v117);
      if (v23 <= v24)
        prime = (int8x8_t)v24;
      else
        prime = (int8x8_t)v23;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v13 = (unint64_t)__p[1];
      if ((void *)*(_QWORD *)&prime > __p[1])
        goto LABEL_35;
      if ((void *)*(_QWORD *)&prime < __p[1])
      {
        v32 = vcvtps_u32_f32((float)*((unint64_t *)&v116 + 1) / v117);
        if (__p[1] < (void *)3
          || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
        {
          v32 = std::__next_prime(v32);
        }
        else
        {
          v34 = 1 << -(char)__clz(v32 - 1);
          if (v32 >= 2)
            v32 = v34;
        }
        if (*(_QWORD *)&prime <= v32)
          prime = (int8x8_t)v32;
        if ((void *)*(_QWORD *)&prime >= __p[1])
        {
          v13 = (unint64_t)__p[1];
        }
        else
        {
          if (prime)
          {
LABEL_35:
            if (*(_QWORD *)&prime >> 61)
              std::__throw_bad_array_new_length[abi:ne180100]();
            v26 = operator new(8 * *(_QWORD *)&prime);
            v27 = __p[0];
            __p[0] = v26;
            if (v27)
              operator delete(v27);
            v28 = 0;
            __p[1] = (void *)prime;
            do
              *((_QWORD *)__p[0] + v28++) = 0;
            while (*(_QWORD *)&prime != v28);
            v29 = (_QWORD **)v116;
            if ((_QWORD)v116)
            {
              v30 = *(_QWORD *)(v116 + 8);
              v31 = (uint8x8_t)vcnt_s8(prime);
              v31.i16[0] = vaddlv_u8(v31);
              if (v31.u32[0] > 1uLL)
              {
                if (v30 >= *(_QWORD *)&prime)
                  v30 %= *(_QWORD *)&prime;
              }
              else
              {
                v30 &= *(_QWORD *)&prime - 1;
              }
              *((_QWORD *)__p[0] + v30) = &v116;
              for (i = *v29; i; v30 = v36)
              {
                v36 = i[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*((_QWORD *)__p[0] + v36))
                  {
                    *((_QWORD *)__p[0] + v36) = v29;
                    goto LABEL_60;
                  }
                  *v29 = (_QWORD *)*i;
                  *i = **((_QWORD **)__p[0] + v36);
                  **((_QWORD **)__p[0] + v36) = i;
                  i = v29;
                }
                v36 = v30;
LABEL_60:
                v29 = (_QWORD **)i;
                i = (_QWORD *)*i;
              }
            }
            v13 = (unint64_t)prime;
            goto LABEL_64;
          }
          v44 = __p[0];
          __p[0] = 0;
          if (v44)
            operator delete(v44);
          v13 = 0;
          __p[1] = 0;
        }
      }
LABEL_64:
      if ((v13 & (v13 - 1)) != 0)
      {
        if (v12 >= v13)
          v4 = v12 % v13;
        else
          v4 = v12;
      }
      else
      {
        v4 = (v13 - 1) & v12;
      }
      goto LABEL_69;
    }
    while (1)
    {
      v19 = *((_QWORD *)v18 + 1);
      if (v19 == v12)
        break;
      if (v16 > 1)
      {
        if ((void *)v19 >= __p[1])
          v19 %= (unint64_t)__p[1];
      }
      else
      {
        v19 &= (unint64_t)__p[1] - 1;
      }
      if (v19 != v4)
        goto LABEL_19;
LABEL_18:
      v18 = *(char **)v18;
      if (!v18)
        goto LABEL_19;
    }
    if (!std::equal_to<std::string>::operator()[abi:ne180100]((unsigned __int8 *)v18 + 16, (unsigned __int8 *)&__s))
      goto LABEL_18;
    a3 = v14;
    v43 = v110;
LABEL_79:
    *((_DWORD *)v18 + 10) = v43;
    *(_QWORD *)(v18 + 44) = v9;
    *((_DWORD *)v18 + 13) = a4;
    *(_OWORD *)(v18 + 56) = v111;
    *((_DWORD *)v18 + 18) = v10;
    *(_QWORD *)(v18 + 76) = 0xFFFFFFFF00000001;
    *((_WORD *)v18 + 42) = 0;
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v41 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (SHIBYTE(v157[0]) < 0)
      operator delete((void *)__s);
    ++v7;
  }
  while (v7 != v108);
LABEL_97:
  v45 = operator new();
  *(_QWORD *)(v45 + 16) = 0;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)v45 = v45 + 8;
  *(_OWORD *)(v45 + 24) = 0u;
  *(_OWORD *)(v45 + 40) = 0u;
  *(_OWORD *)(v45 + 56) = 0u;
  *(_OWORD *)(v45 + 72) = 0u;
  *(_OWORD *)(v45 + 88) = 0u;
  *(_OWORD *)(v45 + 104) = 0u;
  *(_OWORD *)(v45 + 120) = 0u;
  *(_OWORD *)(v45 + 136) = 0u;
  *(_OWORD *)(v45 + 152) = 0u;
  *(_QWORD *)(v45 + 168) = 0;
  *(_DWORD *)(v45 + 176) = -1;
  v46 = *(_QWORD *)(a1 + 144);
  if (v46 && *((_QWORD *)&v116 + 1))
  {
    v47 = *(std::__shared_weak_count **)(v46 + 24);
    v154 = *(_QWORD *)(v46 + 16);
    v155 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(p_shared_owners);
      while (__stxr(v49 + 1, p_shared_owners));
      v46 = *(_QWORD *)(a1 + 144);
    }
    Espresso::net::get_global(&__str, v46, (unsigned __int8 *)(v116 + 16));
    v50 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__data_ + 32))(__str.__r_.__value_.__r.__words[0]);
    v153[1] = 0;
    v153[0] = 0;
    Espresso::sequential_builder::sequential_builder((uint64_t)&__s, &v154, v50, v153);
    v51 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v52 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    v54 = v155;
    if (v155)
    {
      v55 = (unint64_t *)&v155->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    v57 = (uint64_t *)v116;
    if ((_QWORD)v116)
    {
      while (1)
      {
        if (*((char *)v57 + 39) < 0)
          std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v57[2], v57[3]);
        else
          __str = *(std::string *)(v57 + 2);
        v58 = *(_OWORD *)(v57 + 7);
        v150 = *(_OWORD *)(v57 + 5);
        v151 = v58;
        v152 = *(_OWORD *)(v57 + 9);
        Espresso::net::get_global(&v147, *(_QWORD *)(a1 + 144), (unsigned __int8 *)&__str);
        std::operator+<char>();
        if ((_DWORD)v150 || (v59 = DWORD1(v150), *((float *)&v150 + 1) != *((float *)&v150 + 2)))
        {
          std::string::basic_string[abi:ne180100]<0>(&v124, "load_random");
          v132 = 0;
          v133 = 0;
          v134 = 0;
          if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v169, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
          else
            v169 = v146;
          v129 = 0;
          v130 = 0;
          v131 = 0;
          v167.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
          v167.__r_.__value_.__s.__data_[8] = 0;
          v129 = (std::string *)operator new(0x18uLL);
          v130 = v129;
          v131 = v129 + 1;
          v130 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131, (__int128 *)&v169, &v170, v129);
          Espresso::sequential_builder::add<Espresso::load_random_params_t>(&v135, (uint64_t *)&__s, (uint64_t)&v124, (uint64_t)&v146, (uint64_t)&v150, v132, v133, (uint64_t *)&v129);
          v60 = v136;
          if (v136)
          {
            v61 = (unint64_t *)&v136->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
              std::__shared_weak_count::__release_weak(v60);
            }
          }
          v167.__r_.__value_.__r.__words[0] = (std::string::size_type)&v129;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
          if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v169.__r_.__value_.__l.__data_);
          v169.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v169);
          if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v124.__r_.__value_.__l.__data_);
          goto LABEL_173;
        }
        *(_OWORD *)&v124.__r_.__value_.__l.__data_ = v151;
        v124.__r_.__value_.__r.__words[2] = v152 | 0xFFFFFFFF00000000;
        std::string::basic_string[abi:ne180100]<0>(&v169, "load_constant");
        v141 = 0;
        v142 = 0;
        v143 = 0;
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v167, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
        else
          v167 = v146;
        v138 = 0;
        v139 = 0;
        v140 = 0;
        v165.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
        v165.__r_.__value_.__s.__data_[8] = 0;
        v138 = (std::string *)operator new(0x18uLL);
        v139 = v138;
        v140 = v138 + 1;
        v139 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v140, (__int128 *)&v167, (__int128 *)&v168, v138);
        Espresso::sequential_builder::add<Espresso::load_constant_params>((uint64_t *)&lpsrc, (uint64_t *)&__s, (uint64_t)&v169, (uint64_t)&v146, (uint64_t)&v124, v141, v142, (uint64_t *)&v138);
        if (!lpsrc)
          break;
        if (!v63)
          break;
        v163 = v63;
        v164 = v145;
        if (v145)
        {
          v64 = (unint64_t *)&v145->__shared_owners_;
          do
            v65 = __ldxr(v64);
          while (__stxr(v65 + 1, v64));
LABEL_141:
          v66 = v145;
          if (v145)
          {
            v67 = (unint64_t *)&v145->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
        }
        v165.__r_.__value_.__r.__words[0] = (std::string::size_type)&v138;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v165);
        if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v167.__r_.__value_.__l.__data_);
        v167.__r_.__value_.__r.__words[0] = (std::string::size_type)&v141;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v167);
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v147 + 56))(&v169);
        v69 = v169.__r_.__value_.__r.__words[0];
        v70 = *(int *)(v169.__r_.__value_.__r.__words[0] + 8);
        for (j = 12; j != 24; j += 4)
          v70 *= *(int *)(v169.__r_.__value_.__r.__words[0] + j);
        if (v70)
        {
          v72 = *(_DWORD **)(v169.__r_.__value_.__r.__words[0] + 24);
          do
          {
            *v72++ = v59;
            --v70;
          }
          while (v70);
        }
        v73 = v163;
        v74 = (std::__shared_weak_count *)v169.__r_.__value_.__l.__size_;
        v137[0] = v69;
        v137[1] = v169.__r_.__value_.__l.__size_;
        if (v169.__r_.__value_.__l.__size_)
        {
          v75 = (unint64_t *)(v169.__r_.__value_.__l.__size_ + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        Espresso::generic_load_constant_kernel::set_constant_blob(v73, (uint64_t)v137);
        if (v74)
        {
          v77 = (unint64_t *)&v74->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
            std::__shared_weak_count::__release_weak(v74);
          }
        }
        v79 = (std::__shared_weak_count *)v169.__r_.__value_.__l.__size_;
        if (v169.__r_.__value_.__l.__size_)
        {
          v80 = (unint64_t *)(v169.__r_.__value_.__l.__size_ + 8);
          do
            v81 = __ldaxr(v80);
          while (__stlxr(v81 - 1, v80));
          if (!v81)
          {
            ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
            std::__shared_weak_count::__release_weak(v79);
          }
        }
        v82 = v164;
        if (v164)
        {
          v83 = (unint64_t *)&v164->__shared_owners_;
          do
            v84 = __ldaxr(v83);
          while (__stlxr(v84 - 1, v83));
          if (!v84)
          {
            ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
            std::__shared_weak_count::__release_weak(v82);
          }
        }
LABEL_173:
        memset(&v124, 0, sizeof(v124));
        v125 = 0;
        v126 = xmmword_191A8AA80;
        v127 = 0x100000001;
        v128 = 0;
        std::string::operator=(&v124, &__str);
        std::string::basic_string[abi:ne180100]<0>(&v169, "store_global");
        std::operator+<char>();
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v165, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
        else
          v165 = v146;
        v119 = 0;
        v120 = 0;
        v121 = 0;
        v163 = (void **)&v119;
        LOBYTE(v164) = 0;
        v119 = (std::string *)operator new(0x18uLL);
        v120 = v119;
        v121 = v119 + 1;
        v120 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v121, (__int128 *)&v165, (__int128 *)&v166, v119);
        memset(v118, 0, sizeof(v118));
        Espresso::sequential_builder::add<Espresso::store_global_params_t>(&v122, (uint64_t *)&__s, (uint64_t)&v169, (uint64_t)&v167, (uint64_t)&v124, (uint64_t)v119, (uint64_t)v120, v118);
        v85 = v123;
        if (v123)
        {
          v86 = (unint64_t *)&v123->__shared_owners_;
          do
            v87 = __ldaxr(v86);
          while (__stlxr(v87 - 1, v86));
          if (!v87)
          {
            ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
            std::__shared_weak_count::__release_weak(v85);
          }
        }
        v163 = (void **)v118;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v163);
        v163 = (void **)&v119;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v163);
        if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v165.__r_.__value_.__l.__data_);
        if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v167.__r_.__value_.__l.__data_);
        if (SHIBYTE(v169.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v169.__r_.__value_.__l.__data_);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v146.__r_.__value_.__l.__data_);
        v88 = v148;
        if (v148)
        {
          v89 = (unint64_t *)&v148->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v57 = (uint64_t *)*v57;
        if (!v57)
          goto LABEL_199;
      }
      v163 = 0;
      v164 = 0;
      goto LABEL_141;
    }
LABEL_199:
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str.__r_.__value_.__l.__size_;
    Espresso::sequential_builder::build_from_shapes((uint64_t)&__s, (uint64_t)&__str, &v113);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&__str, (char *)__str.__r_.__value_.__l.__size_);
    std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)&v162);
    v91 = v161;
    if (v161)
    {
      v92 = (unint64_t *)&v161->__shared_owners_;
      do
        v93 = __ldaxr(v92);
      while (__stlxr(v93 - 1, v92));
      if (!v93)
      {
        ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
        std::__shared_weak_count::__release_weak(v91);
      }
    }
    v94 = v160;
    if (v160)
    {
      v95 = (unint64_t *)&v160->__shared_owners_;
      do
        v96 = __ldaxr(v95);
      while (__stlxr(v96 - 1, v95));
      if (!v96)
      {
        ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
        std::__shared_weak_count::__release_weak(v94);
      }
    }
    v97 = v159;
    if (v159)
    {
      v98 = (unint64_t *)&v159->__shared_owners_;
      do
        v99 = __ldaxr(v98);
      while (__stlxr(v99 - 1, v98));
      if (!v99)
      {
        ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
        std::__shared_weak_count::__release_weak(v97);
      }
    }
    if (v158 < 0)
      operator delete((void *)v157[5]);
    std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)v157, (_QWORD *)v157[1]);
    v100 = (std::__shared_weak_count *)*((_QWORD *)&__s + 1);
    if (*((_QWORD *)&__s + 1))
    {
      v101 = (unint64_t *)(*((_QWORD *)&__s + 1) + 8);
      do
        v102 = __ldaxr(v101);
      while (__stlxr(v102 - 1, v101));
      if (!v102)
      {
        ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
        std::__shared_weak_count::__release_weak(v100);
      }
    }
  }
  else
  {
    v113 = 0;
    v114 = 0;
  }
  EspressoWrap__Net::set_cpp_net((_QWORD *)v45, &v113);
  v103 = v114;
  if (v114)
  {
    v104 = (unint64_t *)&v114->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
  v106 = *(_QWORD *)(v45 + 144);
  v112[0] = 0;
  v112[1] = 0;
  Espresso::net::setup_script(v106, v112, 0);
  EspressoWrap__Net__touch(v45);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)__p);
  return v45;
}

void sub_19142BF74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  uint64_t a70;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&a69, (char *)a70);
  Espresso::sequential_builder::~sequential_builder((void **)&STACK[0x248]);
  std::__hash_table<std::__hash_value_type<std::string,Espresso::training_transform_options>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,Espresso::training_transform_options>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,Espresso::training_transform_options>>>::~__hash_table((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__batch_split(uint64_t a1, char *a2, char *a3, char *__s, uint64_t a5)
{
  void **v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  Espresso::net *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void (**v30)(Espresso::net_pass *__hidden);
  __int128 v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  char v39;

  std::string::basic_string[abi:ne180100]<0>(v38, __s);
  if (v39 < 0)
  {
    if (v38[1] != (void *)4)
      goto LABEL_31;
    v9 = (void **)v38[0];
  }
  else
  {
    if (v39 != 4)
      goto LABEL_31;
    v9 = v38;
  }
  if (*(_DWORD *)v9 != 1851876717)
LABEL_31:
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("only accumulation_type == mean is supported");
  Espresso::string_split((Espresso *)&v36, a2);
  Espresso::string_split((Espresso *)&v34, a3);
  v10 = (std::__shared_weak_count *)operator new(0x60uLL);
  *(_OWORD *)&v10->__shared_owners_ = 0u;
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  v10->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCF90;
  v10[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D90408;
  LODWORD(v10[1].__shared_owners_) = 0;
  *(_OWORD *)&v10[1].__shared_weak_owners_ = v36;
  v10[2].__shared_owners_ = v37;
  v36 = 0u;
  v37 = 0;
  *(_OWORD *)&v10[2].__shared_weak_owners_ = v34;
  v12 = v35;
  v34 = 0u;
  v35 = 0;
  v10[3].__shared_owners_ = v12;
  v10[3].__shared_weak_owners_ = a5;
  v32 = v10 + 1;
  v33 = v10;
  v31 = 0u;
  v30 = (void (**)(Espresso::net_pass *__hidden))&off_1E2D73218;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v31, (uint64_t)&v10[1], (uint64_t)v10);
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v16 = *(Espresso::net **)(a1 + 144);
  v15 = (uint64_t *)(a1 + 144);
  Espresso::pass_batch_split::run_on_network((Espresso::pass_batch_split *)&v30, v16, (uint64_t)&v28);
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = operator new();
  *(_QWORD *)(v20 + 16) = 0;
  *(_QWORD *)(v20 + 8) = 0;
  *(_QWORD *)v20 = v20 + 8;
  *(_OWORD *)(v20 + 24) = 0u;
  *(_OWORD *)(v20 + 40) = 0u;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *(_OWORD *)(v20 + 88) = 0u;
  *(_OWORD *)(v20 + 104) = 0u;
  *(_OWORD *)(v20 + 120) = 0u;
  *(_OWORD *)(v20 + 136) = 0u;
  *(_OWORD *)(v20 + 152) = 0u;
  *(_QWORD *)(v20 + 168) = 0;
  *(_DWORD *)(v20 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v20, v15);
  EspressoWrap__Net__touch(v20);
  v30 = off_1E2DA6C90;
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v33;
  if (v33)
  {
    v25 = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v30 = (void (**)(Espresso::net_pass *__hidden))&v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
  *(_QWORD *)&v34 = &v36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (v39 < 0)
    operator delete(v38[0]);
  return v20;
}

void sub_19142C4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void ***a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void **a17)
{
  uint64_t v17;

  Espresso::net_pass::~net_pass((Espresso::net_pass *)&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  a12 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a17 = (void **)(v17 - 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a17);
  if (*(char *)(v17 - 33) < 0)
    operator delete(*(void **)(v17 - 56));
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_params_batch_split>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCF90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_params_batch_split>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCF90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_batch_split>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t EspressoWrap__Net__sgd_hoisting(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  Espresso::net *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void (**v21)(Espresso::net_pass *__hidden);
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD380;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E2D92030;
  v24 = v2 + 1;
  v25 = v2;
  v22 = 0;
  v23 = 0;
  v21 = (void (**)(Espresso::net_pass *__hidden))&off_1E2D825A8;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v22, (uint64_t)&v2[1], (uint64_t)v2);
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v7 = *(Espresso::net **)(a1 + 144);
  v6 = (uint64_t *)(a1 + 144);
  Espresso::pass_sgd_hoisting::run_on_network(v7, (uint64_t)&v19);
  v8 = v20;
  if (v20)
  {
    v9 = (unint64_t *)&v20->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = operator new();
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)v11 = v11 + 8;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_QWORD *)(v11 + 168) = 0;
  *(_DWORD *)(v11 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v11, v6);
  EspressoWrap__Net__touch(v11);
  v21 = off_1E2DA6C90;
  v12 = v23;
  if (v23)
  {
    v13 = (unint64_t *)&v23->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return v11;
}

void sub_19142C78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  Espresso::net_pass::~net_pass((Espresso::net_pass *)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::pass_params_sgd_hoisting>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD380;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_params_sgd_hoisting>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBD380;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::pass_params_sgd_hoisting>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t EspressoWrap__Net__reload_on_platform(uint64_t a1, Espresso::net *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t **v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v2 = (int)a2;
  v3 = (_QWORD *)(a1 + 144);
  Espresso::pass_constant_if_conditions::hint_fallback_constant_ifs_from_metal(*(Espresso::pass_constant_if_conditions **)(a1 + 144), a2);
  if (get_pyespresso_contexts(void)::onceToken != -1)
    dispatch_once(&get_pyespresso_contexts(void)::onceToken, &__block_literal_global_3174);
  v13 = v2;
  v4 = std::__tree<std::__value_type<Espresso::platform,void *>,std::__map_value_compare<Espresso::platform,std::__value_type<Espresso::platform,void *>,std::less<Espresso::platform>,true>,std::allocator<std::__value_type<Espresso::platform,void *>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform&&>,std::tuple<>>((uint64_t **)get_pyespresso_contexts(void)::pyespresso_contexts_ptr, v2, &v13);
  Espresso::get_internal_context((uint64_t **)v4[5], &v14);
  Espresso::reload_network_on_context(v3, &v14, *(unsigned int *)(**(_QWORD **)(*v3 + 32) + 12), &v16);
  v5 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)v8 = v8 + 8;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_QWORD *)(v8 + 168) = 0;
  *(_DWORD *)(v8 + 176) = -1;
  EspressoWrap__Net::set_cpp_net((_QWORD *)v8, &v16);
  EspressoWrap__Net__touch(v8);
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_19142C97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t EspressoWrap__Net__pprint(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 144);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v8 = 0;
  Espresso::net::pprint(v1, (uint64_t)__p, (uint64_t)v7);
  v2 = v8;
  if (v8 == v7)
  {
    v3 = 4;
    v2 = v7;
  }
  else
  {
    if (!v8)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  if (v6 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_19142CA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t EspressoWrap__interface_revision()
{
  return 1;
}

void EspressoWrap__Net__mark_block_start(uint64_t a1, char *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  char v9;
  uint64_t v10[2];

  v3 = *(std::__shared_weak_count **)(a1 + 152);
  v10[0] = *(_QWORD *)(a1 + 144);
  v10[1] = (uint64_t)v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::mark_block_start(v10, (uint64_t)__p, 0);
  if (v9 < 0)
    operator delete(__p[0]);
  EspressoWrap__Net__touch(a1);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19142CB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__mark_block_end(uint64_t a1, char *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *__p[2];
  char v9;
  _QWORD v10[2];

  v3 = *(std::__shared_weak_count **)(a1 + 152);
  v10[0] = *(_QWORD *)(a1 + 144);
  v10[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::mark_block_end(v10, (uint64_t)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  EspressoWrap__Net__touch(a1);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19142CC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void EspressoWrap__Net__guard_block_with_if (uint64_t a1, char *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = *(_QWORD *)(a1 + 144);
  v3 = *(std::__shared_weak_count **)(a1 + 152);
  v11 = v4;
  v12 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Espresso::guard_block_with_if (v4, (uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  EspressoWrap__Net__touch(a1);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_19142CD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void EspressoWrap__MILES__extract_consts(char *a1, char *a2, std::vector<std::string>::size_type a3, char **a4)
{
  std::vector<std::string>::pointer begin;
  std::__shared_weak_count *v9;
  std::vector<std::string>::pointer v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::string::size_type v24;
  std::vector<std::string> v25;
  std::vector<std::string>::pointer v26;
  std::__shared_weak_count *v27;
  uint64_t v28[2];
  std::__shared_weak_count *v29;

  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v25);
  begin = v25.__begin_;
  v28[1] = (uint64_t)v25.__begin_;
  if (v25.__begin_)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v25.__begin_;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
    v29 = v9;
    v26 = begin;
    v27 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v9 = 0;
    v29 = 0;
    v26 = 0;
    v27 = 0;
  }
  load_mil_program((MIL::ParserOptions *)v28, (uint64_t)&v26, a1);
  if (begin)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::vector<std::string>::vector(&v25, a3);
  if (a3)
  {
    v15 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, *a4);
      v16 = &v25.__begin_[v15];
      if (SHIBYTE(v25.__begin_[v15].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16->__r_.__value_.__l.__data_);
      v17 = v23;
      v16->__r_.__value_.__r.__words[2] = v24;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      ++v15;
      ++a4;
      --a3;
    }
    while (a3);
  }
  Espresso::MILES::ExtractConsts((uint64_t *)&v23, v28[0], (__int128 **)&v25);
  serialize_mil_program(v23, a2);
  v18 = v23;
  *(_QWORD *)&v23 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *(_QWORD *)&v23 = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v19 = v28[0];
  v28[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19142CF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

uint64_t load_mil_program(MIL::ParserOptions *a1, uint64_t a2, char *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t result;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;
  uint64_t v15;

  MIL::ParserOptions::Make(a1);
  v5 = v15;
  std::string::basic_string[abi:ne180100]<0>(__p, a3);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v5 + 32))(v5, __p, 1);
  if (v14 < 0)
    operator delete(__p[0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 64))(v15, 1);
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v12 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  MIL::Text::ParseProgramFromFile();
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_19142D0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  uint64_t v18;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  v18 = a17;
  a17 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  _Unwind_Resume(a1);
}

void sub_19142D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void serialize_mil_program(uint64_t a1, char *a2)
{
  std::string *p_str;
  std::string::size_type size;
  int v5;
  std::string::size_type v6;
  _QWORD v7[3];
  std::string v8;
  std::string v9;
  std::string v10;
  std::string __str;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(&__str, a2);
  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  while (size)
  {
    v5 = p_str->__r_.__value_.__s.__data_[--size];
    if (v5 == 92 || v5 == 47)
    {
      v6 = size;
      goto LABEL_10;
    }
  }
  v6 = -1;
LABEL_10:
  std::string::basic_string(&v10, &__str, 0, v6, (std::allocator<char> *)&v12);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v9 = __str;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v8, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    v8 = v10;
  memset(v7, 0, sizeof(v7));
  Espresso::MILUtil::SerializeProgram(a1, (uint64_t)&v9, (uint64_t)&v8, (uint64_t)v7, 0, 0);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_19142D2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  if (*(char *)(v25 - 25) < 0)
    operator delete(*(void **)(v25 - 48));
  _Unwind_Resume(exception_object);
}

void EspressoWrap__MILES__consts_as_inputs(char *a1, char *a2, std::vector<std::string>::size_type a3, char **a4)
{
  std::vector<std::string>::pointer begin;
  std::__shared_weak_count *v9;
  std::vector<std::string>::pointer v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  std::string::size_type v24;
  std::vector<std::string> v25;
  std::vector<std::string>::pointer v26;
  std::__shared_weak_count *v27;
  uint64_t v28[2];
  std::__shared_weak_count *v29;

  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v25);
  begin = v25.__begin_;
  v28[1] = (uint64_t)v25.__begin_;
  if (v25.__begin_)
  {
    v9 = (std::__shared_weak_count *)operator new();
    v10 = v25.__begin_;
    v9->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    v9->__shared_weak_owners_ = 0;
    v9[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
    v29 = v9;
    v26 = begin;
    v27 = v9;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  else
  {
    v9 = 0;
    v29 = 0;
    v26 = 0;
    v27 = 0;
  }
  load_mil_program((MIL::ParserOptions *)v28, (uint64_t)&v26, a1);
  if (begin)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::vector<std::string>::vector(&v25, a3);
  if (a3)
  {
    v15 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v23, *a4);
      v16 = &v25.__begin_[v15];
      if (SHIBYTE(v25.__begin_[v15].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16->__r_.__value_.__l.__data_);
      v17 = v23;
      v16->__r_.__value_.__r.__words[2] = v24;
      *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
      ++v15;
      ++a4;
      --a3;
    }
    while (a3);
  }
  Espresso::MILES::ConstsAsInputs((uint64_t)&v23, v28[0], (__int128 **)&v25);
  serialize_mil_program(v23, a2);
  v18 = v23;
  *(_QWORD *)&v23 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  *(_QWORD *)&v23 = &v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v19 = v28[0];
  v28[0] = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_19142D538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

void EspressoWrap__MILES__grad(char *a1, char *a2, unint64_t a3, std::vector<std::string>::size_type a4, char **a5)
{
  std::vector<std::string>::pointer begin;
  std::__shared_weak_count *v11;
  std::vector<std::string>::pointer v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  std::string::size_type v26;
  std::vector<std::string> v27;
  std::vector<std::string>::pointer v28;
  std::__shared_weak_count *v29;
  uint64_t v30[2];
  std::__shared_weak_count *v31;

  Espresso::MILUtil::CreateMILContext((Espresso::MILUtil *)&v27);
  begin = v27.__begin_;
  v30[1] = (uint64_t)v27.__begin_;
  if (v27.__begin_)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v12 = v27.__begin_;
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E2DC2E80;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)v12;
    v31 = v11;
    v28 = begin;
    v29 = v11;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  else
  {
    v11 = 0;
    v31 = 0;
    v28 = 0;
    v29 = 0;
  }
  load_mil_program((MIL::ParserOptions *)v30, (uint64_t)&v28, a1);
  if (begin)
  {
    v15 = (unint64_t *)&v11->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  std::vector<std::string>::vector(&v27, a4);
  if (a4)
  {
    v17 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&v25, *a5);
      v18 = &v27.__begin_[v17];
      if (SHIBYTE(v27.__begin_[v17].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18->__r_.__value_.__l.__data_);
      v19 = v25;
      v18->__r_.__value_.__r.__words[2] = v26;
      *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
      ++v17;
      ++a5;
      --a4;
    }
    while (a4);
  }
  Espresso::MILES::Grad((uint64_t)&v25, v30[0], a3, (uint64_t *)&v27);
  serialize_mil_program(v25, a2);
  v20 = v25;
  *(_QWORD *)&v25 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  *(_QWORD *)&v25 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  v21 = v30[0];
  v30[0] = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_19142D7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  _Unwind_Resume(exception_object);
}

void Espresso::MPSGraphEngine::Kernels::general_slice_kernel::~general_slice_kernel(Espresso::MPSGraphEngine::Kernels::general_slice_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

std::__shared_weak_count *Espresso::MPSGraphEngine::Kernels::general_slice_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v24[2];
  char v25;
  int64x2_t *v26;
  std::__shared_weak_count *v27;
  void *v28[2];
  int v29;
  std::string __p;
  _BYTE v31[24];
  _BYTE v32[32];
  std::__shared_weak_count *v33;
  int64x2_t *v34;
  std::__shared_weak_count *v35;
  void **v36;

  if (*(_QWORD *)(a3 + 8) - *(_QWORD *)a3 == 64 && *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24) == 64)
  {
    Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v28, *(const Espresso::layer_shape **)a3, 0);
    v5 = (std::__shared_weak_count *)(v29 != 0);
    if (!v29)
    {
      v6 = *(std::__shared_weak_count **)(a2 + 8);
      v26 = *(int64x2_t **)a2;
      v27 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      std::string::basic_string[abi:ne180100]<0>(v24, "[Dispatch::MPSGraph::general_slice_kernel] unsupported: input has 0 rank");
      Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v24, a3, 0);
      Espresso::emit_kernel_validation_warning(&v26, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
      v9 = v33;
      if (v33)
      {
        v10 = (unint64_t *)&v33->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v36 = (void **)v32;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v36);
      v36 = (void **)v31;
      std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v36);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v25 < 0)
        operator delete(v24[0]);
      v12 = v27;
      if (v27)
      {
        v13 = (unint64_t *)&v27->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  else
  {
    v15 = *(std::__shared_weak_count **)(a2 + 8);
    v34 = *(int64x2_t **)a2;
    v35 = v15;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    std::string::basic_string[abi:ne180100]<0>(v28, "[Dispatch::MPSGraph::general_slice_kernel] unsupported: invalid number of inputs or outputs. ");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)v28, a3, 0);
    Espresso::emit_kernel_validation_warning(&v34, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v18 = v33;
    if (v33)
    {
      v19 = (unint64_t *)&v33->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v24[0] = v32;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
    v24[0] = v31;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
    v5 = v35;
    if (v35)
    {
      v21 = (unint64_t *)&v35->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return 0;
    }
  }
  return v5;
}

void sub_19142DB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a24);
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC11D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::HXEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC11D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::HXEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::pass_params_batch_split::~pass_params_batch_split(Espresso::pass_params_batch_split *this)
{
  void **v1;
  void **v2;

  *(_QWORD *)this = &off_1E2D90408;
  v1 = (void **)((char *)this + 16);
  v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  void **v1;
  void **v2;

  *(_QWORD *)this = &off_1E2D90408;
  v1 = (void **)((char *)this + 16);
  v2 = (void **)((char *)this + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = v1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_batch_split::~pass_batch_split(Espresso::pass_batch_split *this)
{
  Espresso::net_pass::~net_pass(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::pass_batch_split::get_analysis_usage(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

void Espresso::pass_batch_split::run_on_network(Espresso::pass_batch_split *this@<X0>, Espresso::net *a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int *begin;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  int *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t **v31;
  int v32;
  int v33;
  int v34;
  BOOL v35;
  const void *v36;
  void *v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _QWORD *v67;
  const std::string *v68;
  const std::string *v69;
  char v70;
  std::vector<int>::pointer v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t **v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  std::vector<int>::pointer v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  unsigned __int8 **v105;
  unsigned __int8 *j;
  unint64_t v107;
  _QWORD *v108;
  std::string *v109;
  __int128 v110;
  float v111;
  _BOOL8 v112;
  unint64_t v113;
  unint64_t v114;
  size_t v115;
  _QWORD *v116;
  _QWORD *v117;
  unint64_t v118;
  char **v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  char *v123;
  __int128 v124;
  void *v125;
  _QWORD *v126;
  _QWORD *v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  void *v133;
  void *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  std::runtime_error *exception;
  uint64_t v140;
  Espresso::net *v141;
  std::vector<int>::pointer i;
  std::vector<int>::pointer end;
  _QWORD *v144;
  _BYTE v145[32];
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  char **v149;
  char *v150[2];
  void *v151[2];
  void *v152[2];
  float v153;
  void *v154[2];
  __int128 v155;
  int v156;
  std::string v157;
  std::string v158;
  void *__p;
  char *v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  std::vector<int> v166;
  std::vector<int> v167;
  uint64_t *v168;
  std::__shared_weak_count *v169;
  uint64_t v170[2];
  __int128 *v171;
  _BYTE v172[24];
  _BYTE *v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)a2 + 121))
  {
    v170[0] = 0;
    v170[1] = 0;
    Espresso::net::setup_script((uint64_t)a2, v170, *(unsigned int *)(**((_QWORD **)a2 + 4) + 12));
  }
  v6 = (const void *)*((_QWORD *)this + 1);
  if (!v6
  {
    v168 = 0;
    v169 = 0;
    Espresso::throw_exception_selector<Espresso::generic_error>("before run_on_network, set_options needs to be called to set p as pass_params_batch_splitting");
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  v168 = v7;
  v169 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (*((_DWORD *)v7 + 2))
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("only accumulation_type::mean is supported.");
  v11 = Espresso::net::get_analysis<Espresso::pass_blob_name_indexing_result>((uint64_t)a2);
  blob_names_to_indices(&v167, v168 + 2, (uint64_t)v11);
  blob_names_to_indices(&v166, v168 + 5, (uint64_t)v11);
  v141 = a2;
  v12 = (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4;
  v165 = v12;
  begin = v167.__begin_;
  v14 = v12;
  if (v167.__begin_ != v167.__end_)
  {
    v15 = v11[22];
    v16 = 0xAAAAAAAAAAAAAAABLL * ((v11[23] - v15) >> 3);
    v14 = v12;
    do
    {
      v17 = *begin;
      if (v16 <= v17)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v18 = (unint64_t **)(v15 + 24 * (int)v17);
      v19 = *v18;
      v20 = v18[1];
      while (v19 != v20)
      {
        v21 = *v19;
        if (*v19 < v14)
        {
          v165 = *v19;
          v14 = v21;
        }
        ++v19;
      }
      ++begin;
    }
    while (begin != v167.__end_);
  }
  v164 = 0;
  v22 = v166.__begin_;
  if (v166.__begin_ == v166.__end_)
  {
    v23 = 0;
  }
  else
  {
    v23 = 0;
    v24 = v11[19];
    v25 = (v11[20] - v24) >> 3;
    do
    {
      v26 = *v22;
      if (v25 <= v26)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v27 = *(_QWORD *)(v24 + 8 * v26);
      if (v27 > v23)
      {
        v164 = v27;
        v23 = v27;
      }
      ++v22;
    }
    while (v22 != v166.__end_);
  }
  v140 = a3;
  if (v14 >= v23)
    Espresso::throw_exception_selector<Espresso::generic_error,unsigned long &,unsigned long &>(v14, v23);
  v162 = v12;
  v163 = v12;
  __p = 0;
  v160 = 0;
  v161 = 0;
  memset(&v158, 0, sizeof(v158));
  memset(&v157, 0, sizeof(v157));
  v144 = v11;
  if (v23 + 1 <= v14)
    goto LABEL_111;
  v28 = 0;
  v29 = v14;
  do
  {
    v30 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v29);
    v31 = (uint64_t **)(v30 + 40);
    v32 = *(char *)(v30 + 63);
    if (v32 < 0)
    {
      if (*(_QWORD *)(v30 + 48) != 5)
        goto LABEL_38;
      v31 = (uint64_t **)*v31;
    }
    else if (v32 != 5)
    {
      goto LABEL_38;
    }
    v33 = *(_DWORD *)v31;
    v34 = *((unsigned __int8 *)v31 + 4);
    v35 = v33 == 1767859811 && v34 == 102;
    if (v35)
    {
      v36 = *(const void **)(v30 + 64);
      if (v36
      {
        v38 = *(_QWORD *)(v30 + 72);
        *(_QWORD *)v145 = v37;
        *(_QWORD *)&v145[8] = v38;
        if (v38)
        {
          v39 = (unint64_t *)(v38 + 8);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
      }
      else
      {
        v37 = 0;
        *(_OWORD *)v145 = 0uLL;
      }
      v41 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::find<std::string>((_QWORD *)a2 + 116, (uint64_t)v37 + 296);
      if (!v41)
      {
        v138 = (_QWORD *)(*(_QWORD *)v145 + 296);
        if (*(char *)(*(_QWORD *)v145 + 319) < 0)
          v138 = (_QWORD *)*v138;
        v154[0] = v138;
        Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot find layer %s", v154);
      }
      if (v41[5] > v23)
      {
        if (v28 >= 1)
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("Only support single if inside the transformation region");
        v162 = v29;
        if (v29 == v14)
          Espresso::throw_exception_selector<Espresso::generic_error>("It's not valid to have a cond number to be split");
        v28 = 1;
      }
      if (*(_QWORD *)&v145[8])
      {
        v42 = (unint64_t *)(*(_QWORD *)&v145[8] + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          (*(void (**)(_QWORD))(**(_QWORD **)&v145[8] + 16))(*(_QWORD *)&v145[8]);
          std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v145[8]);
        }
      }
    }
LABEL_38:
    v35 = v29++ == v23;
  }
  while (!v35);
  v11 = v144;
  if (v162 >= v163)
    goto LABEL_111;
  std::string::operator=(&v158, (const std::string *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16 * v162) + 16));
  v44 = (_QWORD *)((char *)a2 + 56);
  *(_QWORD *)v145 = &v162;
  v45 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>((uint64_t)a2 + 56, &v162, (uint64_t)&std::piecewise_construct, (uint64_t **)v145);
  std::string::operator=(&v157, (const std::string *)v45[3]);
  v23 = v162 - 1;
  v46 = v165;
  if (v165 >= v162 - 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
    Espresso::not_implemented_error::not_implemented_error(exception);
  }
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)v145, v157.__r_.__value_.__l.__data_, v157.__r_.__value_.__l.__size_);
  else
    *(std::string *)v145 = v157;
  v47 = (_QWORD *)((char *)a2 + 96);
  while (1)
  {
    v48 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v47, v23);
    if (!v48)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    v49 = v48[3];
    v50 = v48[4];
    if (v49 != v50)
      break;
LABEL_104:
    if (--v23 < v46)
    {
      v70 = 1;
      v11 = v144;
      goto LABEL_108;
    }
  }
  if (v145[23] >= 0)
    v51 = v145[23];
  else
    v51 = *(_QWORD *)&v145[8];
  if (v145[23] >= 0)
    v52 = v145;
  else
    v52 = *(_BYTE **)v145;
  while (2)
  {
    v53 = *(unsigned __int8 *)(v49 + 23);
    if ((v53 & 0x80u) == 0)
      v54 = *(unsigned __int8 *)(v49 + 23);
    else
      v54 = *(_QWORD *)(v49 + 8);
    if (v54 != v51)
      goto LABEL_83;
    if ((v53 & 0x80) == 0)
    {
      if (!*(_BYTE *)(v49 + 23))
        break;
      v55 = 0;
      while (*(unsigned __int8 *)(v49 + v55) == v52[v55])
      {
        if (v53 == ++v55)
          goto LABEL_85;
      }
      goto LABEL_83;
    }
    if (memcmp(*(const void **)v49, v52, *(_QWORD *)(v49 + 8)))
    {
LABEL_83:
      v49 += 24;
      if (v49 == v50)
        goto LABEL_104;
      continue;
    }
    break;
  }
LABEL_85:
  v56 = v160;
  if ((unint64_t)v160 >= v161)
  {
    v58 = (char *)__p;
    v59 = (v160 - (_BYTE *)__p) >> 3;
    v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v61 = v161 - (_QWORD)__p;
    if ((uint64_t)(v161 - (_QWORD)__p) >> 2 > v60)
      v60 = v61 >> 2;
    v62 = (unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8;
    v63 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v62)
      v63 = v60;
    if (v63)
    {
      v63 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v63);
      v58 = (char *)__p;
      v56 = v160;
    }
    else
    {
      v64 = 0;
    }
    v65 = (unint64_t *)(v63 + 8 * v59);
    *v65 = v23;
    v57 = (char *)(v65 + 1);
    while (v56 != v58)
    {
      v66 = *((_QWORD *)v56 - 1);
      v56 -= 8;
      *--v65 = v66;
    }
    __p = v65;
    v160 = v57;
    v161 = v63 + 8 * v64;
    v11 = v144;
    if (v58)
      operator delete(v58);
  }
  else
  {
    *(_QWORD *)v160 = v23;
    v57 = v56 + 8;
    v11 = v144;
  }
  v160 = v57;
  v67 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v44, v23);
  if (!v67)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v68 = (const std::string *)v67[3];
  v69 = (const std::string *)v67[4];
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (char *)v68) >> 3) > 1)
  {
    v70 = 0;
  }
  else
  {
    if (v69 != v68)
    {
      std::string::operator=((std::string *)v145, v68);
      goto LABEL_104;
    }
    v70 = 1;
  }
LABEL_108:
  if ((v145[23] & 0x80000000) != 0)
    operator delete(*(void **)v145);
  if ((v70 & 1) == 0)
    Espresso::throw_exception_selector<Espresso::not_implemented_error>("Only cond number produced by single stream is supported");
LABEL_111:
  *(_OWORD *)v154 = 0u;
  v155 = 0u;
  v156 = 1065353216;
  v71 = v167.__begin_;
  for (i = v167.__end_; v71 != i; v11 = v144)
  {
    v72 = *v71;
    v73 = v11[7];
    if (0xAAAAAAAAAAAAAAABLL * ((v11[8] - v73) >> 3) <= v72)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v23 = v73 + 24 * (int)v72;
    *(_QWORD *)v145 = v23;
    v74 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v154, (unsigned __int8 *)v23, (__int128 **)v145);
    v76 = v74 + 40;
    v75 = (void *)*((_QWORD *)v74 + 5);
    if (v75)
    {
      *((_QWORD *)v74 + 6) = v75;
      operator delete(v75);
      *v76 = 0;
      v76[1] = 0;
      v76[2] = 0;
    }
    *v76 = 0;
    v76[1] = 0;
    v76[2] = 0;
    v77 = v11[22];
    if (0xAAAAAAAAAAAAAAABLL * ((v11[23] - v77) >> 3) <= v72)
      std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
    v78 = (uint64_t **)(v77 + 24 * (int)v72);
    v79 = *v78;
    v80 = v78[1];
    while (v79 != v80)
    {
      v81 = *v79;
      *(_QWORD *)v145 = v23;
      v82 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v154, (unsigned __int8 *)v23, (__int128 **)v145);
      v83 = v82;
      v84 = (char *)*((_QWORD *)v82 + 6);
      v85 = *((_QWORD *)v82 + 7);
      if ((unint64_t)v84 >= v85)
      {
        v87 = (char *)*((_QWORD *)v82 + 5);
        v88 = (v84 - v87) >> 3;
        if ((unint64_t)(v88 + 1) >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v89 = v85 - (_QWORD)v87;
        v90 = (uint64_t)(v85 - (_QWORD)v87) >> 2;
        if (v90 <= v88 + 1)
          v90 = v88 + 1;
        if (v89 >= 0x7FFFFFFFFFFFFFF8)
          v91 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v91 = v90;
        if (v91)
        {
          v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v91);
          v87 = (char *)*((_QWORD *)v83 + 5);
          v84 = (char *)*((_QWORD *)v83 + 6);
        }
        else
        {
          v92 = 0;
        }
        v93 = (_QWORD *)(v91 + 8 * v88);
        *v93 = v81;
        v86 = v93 + 1;
        while (v84 != v87)
        {
          v94 = *((_QWORD *)v84 - 1);
          v84 -= 8;
          *--v93 = v94;
        }
        *((_QWORD *)v83 + 5) = v93;
        *((_QWORD *)v83 + 6) = v86;
        *((_QWORD *)v83 + 7) = v91 + 8 * v92;
        if (v87)
          operator delete(v87);
      }
      else
      {
        *(_QWORD *)v84 = v81;
        v86 = v84 + 8;
      }
      *((_QWORD *)v83 + 6) = v86;
      ++v79;
    }
    ++v71;
  }
  *(_OWORD *)v151 = 0u;
  *(_OWORD *)v152 = 0u;
  v153 = 1.0;
  v95 = v166.__begin_;
  end = v166.__end_;
  if (v166.__begin_ != v166.__end_)
  {
    while (2)
    {
      v96 = *v95;
      v97 = v11[7];
      if (0xAAAAAAAAAAAAAAABLL * ((v11[8] - v97) >> 3) <= v96)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v98 = v11[19];
      if (v96 >= (v11[20] - v98) >> 3)
        std::vector<unsigned long>::__throw_out_of_range[abi:ne180100]();
      v99 = v97 + 24 * (int)v96;
      v100 = std::__string_hash<char>::operator()[abi:ne180100](v99);
      v101 = v100;
      v102 = (unint64_t)v151[1];
      if (v151[1])
      {
        v103 = (uint8x8_t)vcnt_s8((int8x8_t)v151[1]);
        v103.i16[0] = vaddlv_u8(v103);
        v104 = v103.u32[0];
        if (v103.u32[0] > 1uLL)
        {
          v23 = v100;
          if ((void *)v100 >= v151[1])
            v23 = v100 % (unint64_t)v151[1];
        }
        else
        {
          v23 = ((unint64_t)v151[1] - 1) & v100;
        }
        v105 = (unsigned __int8 **)*((_QWORD *)v151[0] + v23);
        if (v105)
        {
          for (j = *v105; j; j = *(unsigned __int8 **)j)
          {
            v107 = *((_QWORD *)j + 1);
            if (v107 == v101)
            {
              if (std::equal_to<std::string>::operator()[abi:ne180100](j + 16, (unsigned __int8 *)v99))
                goto LABEL_180;
            }
            else
            {
              if (v104 > 1)
              {
                if (v107 >= v102)
                  v107 %= v102;
              }
              else
              {
                v107 &= v102 - 1;
              }
              if (v107 != v23)
                break;
            }
          }
        }
      }
      v108 = operator new(0x30uLL);
      *v108 = 0;
      v108[1] = v101;
      v109 = (std::string *)(v108 + 2);
      if (*(char *)(v99 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)v99, *(_QWORD *)(v99 + 8));
      }
      else
      {
        v110 = *(_OWORD *)v99;
        v108[4] = *(_QWORD *)(v99 + 16);
        *(_OWORD *)&v109->__r_.__value_.__l.__data_ = v110;
      }
      v108[5] = *(_QWORD *)(v98 + 8 * v96);
      v111 = (float)((unint64_t)v152[1] + 1);
      if (!v102 || (float)(v153 * (float)v102) < v111)
      {
        v112 = (v102 & (v102 - 1)) != 0;
        if (v102 < 3)
          v112 = 1;
        v113 = v112 | (2 * v102);
        v114 = vcvtps_u32_f32(v111 / v153);
        if (v113 <= v114)
          v115 = v114;
        else
          v115 = v113;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__rehash<true>((uint64_t)v151, v115);
        v102 = (unint64_t)v151[1];
        if (((unint64_t)v151[1] & ((unint64_t)v151[1] - 1)) != 0)
        {
          if ((void *)v101 >= v151[1])
            v23 = v101 % (unint64_t)v151[1];
          else
            v23 = v101;
        }
        else
        {
          v23 = ((unint64_t)v151[1] - 1) & v101;
        }
      }
      v116 = v151[0];
      v117 = (_QWORD *)*((_QWORD *)v151[0] + v23);
      if (v117)
      {
        *v108 = *v117;
        goto LABEL_178;
      }
      *v108 = v152[0];
      v152[0] = v108;
      v116[v23] = v152;
      if (*v108)
      {
        v118 = *(_QWORD *)(*v108 + 8);
        if ((v102 & (v102 - 1)) != 0)
        {
          if (v118 >= v102)
            v118 %= v102;
        }
        else
        {
          v118 &= v102 - 1;
        }
        v117 = (char *)v151[0] + 8 * v118;
LABEL_178:
        *v117 = v108;
      }
      ++v152[1];
LABEL_180:
      ++v95;
      v11 = v144;
      if (v95 == end)
        break;
      continue;
    }
  }
  v119 = v150;
  v150[0] = 0;
  v150[1] = 0;
  v149 = v150;
  v120 = (uint64_t)v141;
  v121 = (_QWORD *)*((_QWORD *)v141 + 29);
  if (v121 != (_QWORD *)((char *)v141 + 240))
  {
    do
    {
      v171 = (__int128 *)(v121 + 4);
      v122 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v141 + 136, (unsigned __int8 *)v121 + 32, &v171);
      Espresso::abstract_blob_container::shape(v145, *((_QWORD *)v122 + 5));
      v171 = (__int128 *)(v121 + 4);
      v123 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v149, v121 + 4, &v171);
      v124 = *(_OWORD *)&v145[16];
      *(_OWORD *)(v123 + 56) = *(_OWORD *)v145;
      *(_OWORD *)(v123 + 72) = v124;
      *((_QWORD *)v123 + 11) = v146;
      v125 = (void *)*((_QWORD *)v123 + 12);
      if (v125)
      {
        *((_QWORD *)v123 + 13) = v125;
        operator delete(v125);
        *((_QWORD *)v123 + 12) = 0;
        *((_QWORD *)v123 + 13) = 0;
        *((_QWORD *)v123 + 14) = 0;
      }
      *((_OWORD *)v123 + 6) = v147;
      *((_QWORD *)v123 + 14) = v148;
      v126 = (_QWORD *)v121[1];
      if (v126)
      {
        do
        {
          v127 = v126;
          v126 = (_QWORD *)*v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          v127 = (_QWORD *)v121[2];
          v35 = *v127 == (_QWORD)v121;
          v121 = v127;
        }
        while (!v35);
      }
      v121 = v127;
    }
    while (v127 != (_QWORD *)((char *)v141 + 240));
    v119 = v149;
    v120 = (uint64_t)v141;
  }
  v128 = *((int *)v119 + 17);
  v129 = v168[8];
  if (v128 / v129 * v129 != v128)
    Espresso::throw_exception_selector<Espresso::invalid_blob_shape_error,int const&,unsigned long const&>("num_splits %lu does not devide batch_size %lu\n", v129, v128);
  *(_QWORD *)v145 = v128 / v129;
  v173 = 0;
  v130 = operator new(0x60uLL);
  *v130 = &off_1E2DB14A8;
  v130[1] = v154;
  v130[2] = v151;
  v130[3] = &v165;
  v130[4] = &__p;
  v130[5] = &v168;
  v130[6] = v145;
  v130[7] = &v164;
  v130[8] = &v162;
  v130[9] = &v163;
  v130[10] = &v158;
  v130[11] = &v157;
  v173 = v130;
  Espresso::transform_network_inplace(v120, (uint64_t)v172);
  v131 = v173;
  if (v173 == v172)
  {
    v132 = 4;
    v131 = v172;
LABEL_196:
    (*(void (**)(void))(*v131 + 8 * v132))();
  }
  else if (v173)
  {
    v132 = 5;
    goto LABEL_196;
  }
  *(_BYTE *)v140 = 0;
  *(_QWORD *)(v140 + 8) = 0;
  *(_QWORD *)(v140 + 16) = 0;
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v149, v150[0]);
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__deallocate_node((void **)v152[0]);
  v133 = v151[0];
  v151[0] = 0;
  if (v133)
    operator delete(v133);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned long>>>>::__deallocate_node((_QWORD *)v155);
  v134 = v154[0];
  v154[0] = 0;
  if (v134)
    operator delete(v134);
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v157.__r_.__value_.__l.__data_);
  if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v158.__r_.__value_.__l.__data_);
  if (__p)
  {
    v160 = (char *)__p;
    operator delete(__p);
  }
  if (v166.__begin_)
  {
    v166.__end_ = v166.__begin_;
    operator delete(v166.__begin_);
  }
  if (v167.__begin_)
  {
    v167.__end_ = v167.__begin_;
    operator delete(v167.__begin_);
  }
  v135 = v169;
  if (v169)
  {
    v136 = (unint64_t *)&v169->__shared_owners_;
    do
      v137 = __ldaxr(v136);
    while (__stlxr(v137 - 1, v136));
    if (!v137)
    {
      ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
      std::__shared_weak_count::__release_weak(v135);
    }
  }
}

void sub_19142EA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57)
{
  void *v57;
  uint64_t v58;
  void *v60;
  void *v61;

  __cxa_free_exception(v57);
  if (a49 < 0)
    operator delete(__p);
  if (a55 < 0)
    operator delete(a50);
  if (a56)
    operator delete(a56);
  v60 = *(void **)(v58 - 216);
  if (v60)
  {
    *(_QWORD *)(v58 - 208) = v60;
    operator delete(v60);
  }
  v61 = *(void **)(v58 - 192);
  if (v61)
  {
    *(_QWORD *)(v58 - 184) = v61;
    operator delete(v61);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v58 - 168);
  _Unwind_Resume(a1);
}

_DWORD *blob_names_to_indices(std::vector<int> *a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;

  result = std::vector<int>::vector(a1, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v7 = *a2;
  if (a2[1] != *a2)
  {
    v8 = 0;
    v9 = 0;
    v10 = (_QWORD *)(a3 + 16);
    do
    {
      result = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::find<std::string>(v10, (unsigned __int8 *)(v7 + v8));
      if (!result)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      a1->__begin_[v9++] = result[10];
      v7 = *a2;
      v8 += 24;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  return result;
}

void sub_19142ECB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Espresso::throw_exception_selector<Espresso::generic_error,unsigned long &,unsigned long &>(int a1, int a2)
{
  Espresso::throw_exception_with_format<Espresso::generic_error>("start = %d, end = %d", a1, a2);
}

void std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

__n128 std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x60uLL);
  *(_QWORD *)v2 = &off_1E2DB14A8;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v2 + 72) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v2 + 11) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::__clone(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_1E2DB14A8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  result = *(__n128 *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  v5 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::operator()(uint64_t a1, Espresso::net *a2, Espresso::sequential_builder *this)
{
  Espresso::sequential_builder *v3;
  const void **v4;
  uint64_t v5;
  std::string::size_type *v6;
  std::string::size_type *v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  int v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  const void **v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  int v25;
  unsigned __int8 *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unsigned int i;
  unint64_t *v32;
  uint64_t *v33;
  const void **v34;
  const void **v35;
  __int128 v36;
  uint64_t v37;
  const void **v38;
  const void **v39;
  std::vector<std::string>::pointer end;
  __int128 v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  std::string *v46;
  __int128 v47;
  std::string *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *p_shared_owners;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  const void **v61;
  const void **v62;
  size_t size;
  std::string *v64;
  std::string *v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t j;
  const void **v70;
  size_t v71;
  std::string *p_s;
  const void *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  float v81;
  __int128 *v82;
  __int128 *v83;
  size_t v84;
  void *begin;
  const std::string::value_type *v86;
  __int128 v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  const void **v91;
  size_t v92;
  std::string *v93;
  const void *v94;
  __int128 *v95;
  __int128 v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v107[3];
  std::string *v108;
  std::string *v109;
  std::string *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  std::string *v116;
  std::string *v117;
  std::string *v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  uint64_t v121[3];
  _QWORD v122[3];
  uint64_t v123;
  std::__shared_weak_count *v124;
  uint64_t v125[3];
  _QWORD v126[3];
  uint64_t v127;
  std::__shared_weak_count *v128;
  std::string *v129;
  std::string *v130;
  std::string *v131;
  std::string *v132;
  std::string *v133;
  std::string *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  std::__split_buffer<std::string> __v;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  std::__shared_weak_count *v146;
  _DWORD v147[2];
  void *v148[2];
  char v149;
  std::string __str;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  void *__p;
  char v155;
  _QWORD v156[4];
  int v157;
  std::string v158;
  std::string __s;
  std::string **v160;
  std::__shared_weak_count *v161;
  void **p_v;
  std::string v163;
  std::string v164;
  __int128 v165;
  std::string v166;
  uint64_t v167;
  std::string v168;
  uint64_t v169;
  std::vector<std::string> v170;
  __int128 v171;

  v3 = this;
  *(_QWORD *)&v171 = *MEMORY[0x1E0C80C00];
  v4 = *(const void ***)(*(_QWORD *)(a1 + 8) + 16);
  if (v4)
  {
    v5 = (uint64_t)a2 + 56;
    do
    {
      name_split((uint64_t)&__str, v4 + 2);
      v7 = (std::string::size_type *)v4[5];
      v6 = (std::string::size_type *)v4[6];
      while (v7 != v6)
      {
        v8 = 0;
        v163.__r_.__value_.__r.__words[0] = 0;
        v163.__r_.__value_.__r.__words[0] = *v7;
        while (1)
        {
          __v.__first_ = &v163;
          v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, (unint64_t *)&v163, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
          if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9[4] - v9[3]) >> 3))
            break;
          __v.__first_ = &v163;
          v10 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, (unint64_t *)&v163, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v)[3]+ 24 * v8);
          v11 = v10[23];
          if ((v11 & 0x80u) == 0)
            v12 = (const void *)v10[23];
          else
            v12 = (const void *)*((_QWORD *)v10 + 1);
          v13 = (const void *)*((unsigned __int8 *)v4 + 39);
          v14 = (char)v13;
          if ((char)v13 < 0)
            v13 = v4[3];
          if (v12 == v13)
          {
            if (v14 >= 0)
              v15 = (unsigned __int8 *)(v4 + 2);
            else
              v15 = (unsigned __int8 *)v4[2];
            if ((v11 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v10, v15, *((_QWORD *)v10 + 1)))
              {
LABEL_23:
                __v.__first_ = &v163;
                v16 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v5, (unint64_t *)&v163, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
                std::string::operator=((std::string *)(v16[3] + 24 * v8), &__str);
                break;
              }
            }
            else
            {
              if (!v10[23])
                goto LABEL_23;
              while (*v10 == *v15)
              {
                ++v10;
                ++v15;
                if (!--v11)
                  goto LABEL_23;
              }
            }
          }
          ++v8;
        }
        ++v7;
      }
      v3 = this;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v4 = (const void **)*v4;
    }
    while (v4);
  }
  v17 = *(const void ***)(*(_QWORD *)(a1 + 16) + 16);
  if (v17)
  {
    v18 = (uint64_t)a2 + 96;
    do
    {
      name_split((uint64_t)&__str, v17 + 2);
      v19 = 0;
      v163.__r_.__value_.__r.__words[0] = (std::string::size_type)v17[5];
      while (1)
      {
        __v.__first_ = &v163;
        v20 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, (unint64_t *)&v163, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
        if (v19 >= 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20[4] - v20[3]) >> 3))
          break;
        __v.__first_ = &v163;
        v21 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, (unint64_t *)&v163, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v)[3]+ 24 * v19);
        v22 = v21[23];
        if ((v22 & 0x80u) == 0)
          v23 = (const void *)v21[23];
        else
          v23 = (const void *)*((_QWORD *)v21 + 1);
        v24 = (const void *)*((unsigned __int8 *)v17 + 39);
        v25 = (char)v24;
        if ((char)v24 < 0)
          v24 = v17[3];
        if (v23 == v24)
        {
          if (v25 >= 0)
            v26 = (unsigned __int8 *)(v17 + 2);
          else
            v26 = (unsigned __int8 *)v17[2];
          if ((v22 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v21, v26, *((_QWORD *)v21 + 1)))
            {
LABEL_48:
              __v.__first_ = &v163;
              v27 = std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v18, (unint64_t *)&v163, (uint64_t)&std::piecewise_construct, (uint64_t **)&__v);
              std::string::operator=((std::string *)(v27[3] + 24 * v19), &__str);
              break;
            }
          }
          else
          {
            if (!v21[23])
              goto LABEL_48;
            while (*v21 == *v26)
            {
              ++v21;
              ++v26;
              if (!--v22)
                goto LABEL_48;
            }
          }
        }
        ++v19;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v17 = (const void **)*v17;
    }
    while (v17);
  }
  memset(v156, 0, sizeof(v156));
  v157 = 1065353216;
  v28 = a1;
  if (*((_QWORD *)a2 + 5) != *((_QWORD *)a2 + 4))
  {
    v29 = 0;
    v102 = (uint64_t)v3 + 112;
    v101 = (uint64_t)v3 + 56;
    do
    {
      if (v29 == **(_QWORD **)(v28 + 24))
      {
        v30 = v29;
        for (i = ((*(_QWORD *)(*(_QWORD *)(v28 + 32) + 8) - **(_QWORD **)(v28 + 32)) >> 3) - 1;
              (i & 0x80000000) == 0;
              --i)
        {
          Espresso::sequential_builder::add_layer_from_network(v3, a2, *(_QWORD *)(**(_QWORD **)(v28 + 32) + 8 * i));
          v32 = (unint64_t *)(**(_QWORD **)(v28 + 32) + 8 * i);
          std::__hash_table<unsigned long,std::hash<unsigned long>,std::equal_to<unsigned long>,std::allocator<unsigned long>>::__emplace_unique_key_args<unsigned long,unsigned long const&>((uint64_t)v156, v32, v32);
        }
        v33 = *(uint64_t **)(v28 + 40);
        v35 = *(const void ***)(*v33 + 40);
        v34 = *(const void ***)(*v33 + 48);
        if (v35 != v34)
        {
          do
          {
            *(_QWORD *)&v36 = 0x100000001;
            *((_QWORD *)&v36 + 1) = 0x100000001;
            *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v36;
            __str.__r_.__value_.__r.__words[2] = 0xFFFFFFFF00000001;
            LOBYTE(v36) = 0;
            BYTE4(v36) = 0;
            BYTE8(v36) = 0;
            BYTE12(v36) = 0;
            v151 = v36;
            v152 = v36;
            v153 = 0;
            name_accum((uint64_t)v148, v35);
            Espresso::sequential_builder::constant((uint64_t *)v3, (__int128 *)&__str, (uint64_t)v148, (uint64_t)&__p, 0.0);
            if (v155 < 0)
              operator delete(__p);
            if (v149 < 0)
              operator delete(v148[0]);
            v35 += 3;
          }
          while (v35 != v34);
          v33 = *(uint64_t **)(v28 + 40);
        }
        v147[0] = 0;
        v147[1] = **(_QWORD **)(v28 + 48);
        memset(&v170, 0, sizeof(v170));
        v37 = *v33;
        v39 = *(const void ***)(v37 + 16);
        v38 = *(const void ***)(v37 + 24);
        while (v39 != v38)
        {
          name_split((uint64_t)&v163, v39);
          end = v170.__end_;
          if (v170.__end_ >= v170.__end_cap_.__value_)
          {
            v42 = 0xAAAAAAAAAAAAAAABLL * (((char *)v170.__end_ - (char *)v170.__begin_) >> 3);
            v43 = v42 + 1;
            if (v42 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v170.__end_cap_.__value_ - (char *)v170.__begin_) >> 3) > v43)
              v43 = 0x5555555555555556 * (((char *)v170.__end_cap_.__value_ - (char *)v170.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v170.__end_cap_.__value_ - (char *)v170.__begin_) >> 3) >= 0x555555555555555)
              v44 = 0xAAAAAAAAAAAAAAALL;
            else
              v44 = v43;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v170.__end_cap_;
            if (v44)
              v44 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v44);
            else
              v45 = 0;
            v46 = (std::string *)(v44 + 24 * v42);
            __v.__first_ = (std::__split_buffer<std::string>::pointer)v44;
            __v.__begin_ = v46;
            __v.__end_cap_.__value_ = (std::string *)(v44 + 24 * v45);
            v47 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
            v46->__r_.__value_.__r.__words[2] = v163.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
            memset(&v163, 0, sizeof(v163));
            __v.__end_ = v46 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v170, &__v);
            v48 = v170.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v170.__end_ = v48;
            v3 = this;
            if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v163.__r_.__value_.__l.__data_);
          }
          else
          {
            v41 = *(_OWORD *)&v163.__r_.__value_.__l.__data_;
            v170.__end_->__r_.__value_.__r.__words[2] = v163.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v41;
            v170.__end_ = end + 1;
          }
          v39 += 3;
        }
        std::string::basic_string[abi:ne180100]<0>(&v168, "cf_for");
        std::string::basic_string[abi:ne180100]<0>(&v166, "for_batch_split");
        v49 = **(_QWORD **)(v28 + 40);
        v144 = 0;
        v142 = 0;
        v143 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v142, *(_QWORD *)(v49 + 16), *(_QWORD *)(v49 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v49 + 24) - *(_QWORD *)(v49 + 16)) >> 3));
        v140 = 0;
        v139 = 0;
        v141 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v139, (uint64_t)v170.__begin_, (uint64_t)v170.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v170.__end_ - (char *)v170.__begin_) >> 3));
        memset(&__s, 0, sizeof(__s));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__s, v142, v143, 0xAAAAAAAAAAAAAAABLL * ((v143 - v142) >> 3));
        memset(&v158, 0, sizeof(v158));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v158, v139, v140, 0xAAAAAAAAAAAAAAABLL * ((v140 - v139) >> 3));
        v50 = *((_QWORD *)v3 + 12);
        LODWORD(__v.__first_) = (***(uint64_t (****)(_QWORD))(*((_QWORD *)v3 + 14) + 8))(*(_QWORD *)(*((_QWORD *)v3 + 14) + 8));
        Espresso::abstract_engine_factory::make_kernel_priv(v50, v102, (uint64_t)&v168, (uint64_t)v147, (int *)&__v);
        v51 = v146;
        v160 = (std::string **)v145;
        v161 = v146;
        if (v146)
        {
          p_shared_owners = (unint64_t *)&v146->__shared_owners_;
          do
            v53 = __ldxr(p_shared_owners);
          while (__stxr(v53 + 1, p_shared_owners));
        }
        memset(&__v, 0, 24);
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&__v, (uint64_t)__s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(__s.__r_.__value_.__l.__size_ - __s.__r_.__value_.__r.__words[0]) >> 3));
        memset(&v163, 0, sizeof(v163));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v163, (uint64_t)v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158.__r_.__value_.__l.__size_ - v158.__r_.__value_.__r.__words[0]) >> 3));
        Espresso::sequential_builder::add_kernel_dbg((uint64_t)v3, (uint64_t *)&v160, (uint64_t)&v168, (uint64_t)&v166, v101, &__v.__first_, (std::string **)&v163);
        p_v = (void **)&v163;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_v);
        p_v = (void **)&__v;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_v);
        if (v51)
        {
          v54 = (unint64_t *)&v51->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        if (*(_QWORD *)v3)
          Espresso::sequential_builder::add_shape_from_kernel((uint64_t *)v3, (uint64_t)v145, (__int128 **)&__s, (uint64_t *)&v158);
        __v.__first_ = &v158;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = &__s;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        v56 = v146;
        if (v146)
        {
          v57 = (unint64_t *)&v146->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v139;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v142;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v166.__r_.__value_.__l.__data_);
        if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v168.__r_.__value_.__l.__data_);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)&v170;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
        v29 = v30;
      }
      v59 = v29;
      if (!std::__hash_table<std::__hash_value_type<unsigned long,std::vector<std::string>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::vector<std::string>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::vector<std::string>>>>::find<unsigned long>(v156, v29))Espresso::sequential_builder::add_layer_from_network(v3, a2, v59);
      if (v59 == **(_QWORD **)(v28 + 56))
      {
        v103 = v59;
        __v.__end_ = (std::__split_buffer<std::string>::pointer)897988541;
        LOBYTE(__v.__end_cap_.__value_) = 0;
        v138 = 0;
        __v.__first_ = 0;
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)1065353216;
        v60 = **(_QWORD **)(v28 + 40);
        v62 = *(const void ***)(v60 + 40);
        v61 = *(const void ***)(v60 + 48);
        while (v62 != v61)
        {
          name_split((uint64_t)&__s, v62);
          name_accum((uint64_t)&v158, v62);
          std::string::basic_string[abi:ne180100]<0>(&v170, "elementwise");
          if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v158.__r_.__value_.__r.__words[2]);
          else
            size = v158.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)&v168, size + 5);
          if ((v168.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v64 = &v168;
          else
            v64 = (std::string *)v168.__r_.__value_.__r.__words[0];
          if (size)
          {
            if ((v158.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = &v158;
            else
              v65 = (std::string *)v158.__r_.__value_.__r.__words[0];
            memmove(v64, v65, size);
          }
          strcpy((char *)v64 + size, "/plus");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v163, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v163 = __s;
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v164, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
          else
            v164 = v158;
          v132 = 0;
          v133 = 0;
          v134 = 0;
          v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
          v166.__r_.__value_.__s.__data_[8] = 0;
          v132 = (std::string *)operator new(0x30uLL);
          v133 = v132;
          v134 = v132 + 2;
          v133 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v134, (__int128 *)&v163, &v165, v132);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v166, v158.__r_.__value_.__l.__data_, v158.__r_.__value_.__l.__size_);
          else
            v166 = v158;
          v129 = 0;
          v130 = 0;
          v131 = 0;
          v160 = &v129;
          LOBYTE(v161) = 0;
          v129 = (std::string *)operator new(0x18uLL);
          v130 = v129;
          v131 = v129 + 1;
          v130 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v131, (__int128 *)&v166, (__int128 *)&v167, v129);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v135, (uint64_t *)v3, (uint64_t)&v170, (uint64_t)&v168, (uint64_t)&__v, (uint64_t)v132, (uint64_t)v133, (uint64_t *)&v129);
          v66 = v136;
          if (v136)
          {
            v67 = (unint64_t *)&v136->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v160 = &v129;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v166.__r_.__value_.__l.__data_);
          v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v132;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
          for (j = 0; j != -6; j -= 3)
          {
            if (SHIBYTE(v164.__r_.__value_.__r.__words[j + 2]) < 0)
              operator delete(*(void **)((char *)&v163 + j * 8 + 24));
          }
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v168.__r_.__value_.__l.__data_);
          if (SHIBYTE(v170.__end_cap_.__value_) < 0)
            operator delete(v170.__begin_);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v158.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          v62 += 3;
        }
        if (**(_QWORD **)(a1 + 64) < **(_QWORD **)(a1 + 72))
        {
          std::string::basic_string[abi:ne180100]<0>(&v163, "cf_end");
          v70 = *(const void ***)(a1 + 80);
          if (*((char *)v70 + 23) >= 0)
            v71 = *((unsigned __int8 *)v70 + 23);
          else
            v71 = (size_t)v70[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&__s, v71 + 12);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_s = &__s;
          else
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          if (v71)
          {
            if (*((char *)v70 + 23) >= 0)
              v73 = v70;
            else
              v73 = *v70;
            memmove(p_s, v73, v71);
          }
          strcpy((char *)p_s + v71, "/in_loop/end");
          memset(v126, 0, sizeof(v126));
          memset(v125, 0, sizeof(v125));
          Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v127, (uint64_t *)v3, (uint64_t)&v163, (uint64_t)&__s, (uint64_t)&v170, 0, 0, v125);
          v74 = v128;
          if (v128)
          {
            v75 = (unint64_t *)&v128->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
          v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v126;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v163.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v163, "cf_end");
        std::string::basic_string[abi:ne180100]<0>(&__s, "for_batch_split_end");
        memset(v122, 0, sizeof(v122));
        memset(v121, 0, sizeof(v121));
        Espresso::sequential_builder::add<Espresso::cf_end_params_t>(&v123, (uint64_t *)v3, (uint64_t)&v163, (uint64_t)&__s, (uint64_t)&p_v, 0, 0, v121);
        v77 = v124;
        if (v124)
        {
          v78 = (unint64_t *)&v124->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v121;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
        v158.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v158);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s.__r_.__value_.__l.__data_);
        if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v163.__r_.__value_.__l.__data_);
        *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 4) = 0x358637BD00000000;
        HIDWORD(v163.__r_.__value_.__r.__words[2]) = 0;
        v164.__r_.__value_.__s.__data_[0] = 0;
        LODWORD(v165) = 0;
        HIDWORD(v164.__r_.__value_.__r.__words[2]) = 0;
        v163.__r_.__value_.__r.__words[0] = 1;
        v80 = **(_QWORD ***)(a1 + 40);
        v81 = 1.0 / (double)(unint64_t)v80[8];
        *(float *)&v163.__r_.__value_.__r.__words[1] = v81;
        v83 = (__int128 *)v80[5];
        v82 = (__int128 *)v80[6];
        while (v83 != v82)
        {
          name_accum((uint64_t)&__s, (const void **)v83);
          std::string::basic_string[abi:ne180100]<0>(&v158, "elementwise");
          if (*((char *)v83 + 23) >= 0)
            v84 = *((unsigned __int8 *)v83 + 23);
          else
            v84 = *((_QWORD *)v83 + 1);
          std::string::basic_string[abi:ne180100]((uint64_t)&v170, v84 + 11);
          if (SHIBYTE(v170.__end_cap_.__value_) >= 0)
            begin = &v170;
          else
            begin = v170.__begin_;
          if (v84)
          {
            if (*((char *)v83 + 23) >= 0)
              v86 = (const std::string::value_type *)v83;
            else
              v86 = *(const std::string::value_type **)v83;
            memmove(begin, v86, v84);
          }
          strcpy((char *)begin + v84, "/aggregated");
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v168, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
          else
            v168 = __s;
          v116 = 0;
          v117 = 0;
          v118 = 0;
          v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
          v166.__r_.__value_.__s.__data_[8] = 0;
          v116 = (std::string *)operator new(0x18uLL);
          v117 = v116;
          v118 = v116 + 1;
          v117 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v118, (__int128 *)&v168, (__int128 *)&v169, v116);
          if (*((char *)v83 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v166, *(const std::string::value_type **)v83, *((_QWORD *)v83 + 1));
          }
          else
          {
            v87 = *v83;
            v166.__r_.__value_.__r.__words[2] = *((_QWORD *)v83 + 2);
            *(_OWORD *)&v166.__r_.__value_.__l.__data_ = v87;
          }
          v113 = 0;
          v114 = 0;
          v115 = 0;
          v160 = &v113;
          LOBYTE(v161) = 0;
          v113 = (std::string *)operator new(0x18uLL);
          v114 = v113;
          v115 = v113 + 1;
          v114 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v115, (__int128 *)&v166, (__int128 *)&v167, v113);
          Espresso::sequential_builder::add<Espresso::elementwise_params>(&v119, (uint64_t *)v3, (uint64_t)&v158, (uint64_t)&v170, (uint64_t)&v163, (uint64_t)v116, (uint64_t)v117, (uint64_t *)&v113);
          v88 = v120;
          if (v120)
          {
            v89 = (unint64_t *)&v120->__shared_owners_;
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v160 = &v113;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v160);
          if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v166.__r_.__value_.__l.__data_);
          v166.__r_.__value_.__r.__words[0] = (std::string::size_type)&v116;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
          if (SHIBYTE(v168.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v168.__r_.__value_.__l.__data_);
          if (SHIBYTE(v170.__end_cap_.__value_) < 0)
            operator delete(v170.__begin_);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v158.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
          v83 = (__int128 *)((char *)v83 + 24);
        }
        v28 = a1;
        if (**(_QWORD **)(a1 + 64) < **(_QWORD **)(a1 + 72))
        {
          v91 = *(const void ***)(a1 + 80);
          if (*((char *)v91 + 23) >= 0)
            v92 = *((unsigned __int8 *)v91 + 23);
          else
            v92 = (size_t)v91[1];
          std::string::basic_string[abi:ne180100]((uint64_t)&__s, v92 + 9);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v93 = &__s;
          else
            v93 = (std::string *)__s.__r_.__value_.__r.__words[0];
          if (v92)
          {
            if (*((char *)v91 + 23) >= 0)
              v94 = v91;
            else
              v94 = *v91;
            memmove(v93, v94, v92);
          }
          strcpy((char *)v93 + v92, "/out_loop");
          std::string::basic_string[abi:ne180100]<0>(&v158, "cf_if");
          v95 = *(__int128 **)(a1 + 88);
          if (*((char *)v95 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v170, *(const std::string::value_type **)v95, *((_QWORD *)v95 + 1));
          }
          else
          {
            v96 = *v95;
            v170.__end_cap_.__value_ = (std::string *)*((_QWORD *)v95 + 2);
            *(_OWORD *)&v170.__begin_ = v96;
          }
          v108 = 0;
          v109 = 0;
          v110 = 0;
          v168.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
          v168.__r_.__value_.__s.__data_[8] = 0;
          v108 = (std::string *)operator new(0x18uLL);
          v109 = v108;
          v110 = v108 + 1;
          v109 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v110, (__int128 *)&v170, &v171, v108);
          memset(v107, 0, sizeof(v107));
          Espresso::sequential_builder::add<Espresso::cf_if_params_t>(&v111, (uint64_t *)v3, (uint64_t)&v158, (uint64_t)&__s, (uint64_t)&v166, (uint64_t)v108, (uint64_t)v109, v107);
          v97 = v112;
          if (v112)
          {
            v98 = (unint64_t *)&v112->__shared_owners_;
            do
              v99 = __ldaxr(v98);
            while (__stlxr(v99 - 1, v98));
            if (!v99)
            {
              ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
              std::__shared_weak_count::__release_weak(v97);
            }
          }
          v168.__r_.__value_.__r.__words[0] = (std::string::size_type)v107;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
          v168.__r_.__value_.__r.__words[0] = (std::string::size_type)&v108;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
          if (SHIBYTE(v170.__end_cap_.__value_) < 0)
            operator delete(v170.__begin_);
          if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v158.__r_.__value_.__l.__data_);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s.__r_.__value_.__l.__data_);
        }
        v59 = v103;
      }
      v29 = v59 + 1;
    }
    while (v59 + 1 < (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 4);
  }
  return std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)v156);
}

void sub_191430074(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x2FF]) < 0)
    operator delete((void *)STACK[0x2E8]);
  if (SLOBYTE(STACK[0x317]) < 0)
    operator delete((void *)STACK[0x300]);
  std::unordered_map<E5RT::IOPort *,std::bitset<32ul>>::~unordered_map[abi:ne180100]((uint64_t)&STACK[0x2C0]);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(a2 + 8), (uint64_t)"ZN8Espresso16pass_batch_split14run_on_networkERNS_3netEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0,std::allocator<Espresso::pass_batch_split::run_on_network(Espresso::net &)::$_0>,void ()(Espresso::net &,Espresso::sequential_builder &)>::target_type()
{
}

uint64_t name_accum(uint64_t a1, const void **a2)
{
  size_t v3;
  uint64_t result;
  void *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a1, v3 + 6);
  if (*(char *)(result + 23) >= 0)
    v5 = (void *)result;
  else
    v5 = *(void **)result;
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/accum");
  return result;
}

uint64_t name_split(uint64_t a1, const void **a2)
{
  size_t v3;
  uint64_t result;
  void *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    v3 = *((unsigned __int8 *)a2 + 23);
  else
    v3 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a1, v3 + 6);
  if (*(char *)(result + 23) >= 0)
    v5 = (void *)result;
  else
    v5 = *(void **)result;
  if (v3)
  {
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    result = (uint64_t)memmove(v5, v6, v3);
  }
  strcpy((char *)v5 + v3, "/split");
  return result;
}

void Espresso::MPSEngine::blob_container::~blob_container(id *this)
{
  Espresso::MPSEngine::blob_container::~blob_container(this);
  JUMPOUT(0x19401CD90);
}

{
  void *v2;

  *this = &off_1E2DA8120;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 33));

  Espresso::MetalLowmemEngine::blob_container::~blob_container(this, v2);
}

void Espresso::MPSEngine::blob_container::resize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  const void *v6;
  void *v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  const void *v12;
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE *v27;
  id *v28;
  id *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  id *v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  __int128 v51;
  const void *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  uint64_t v71;
  id v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  _BOOL4 v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  void *v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  void *v90;
  void *v91;
  BOOL v92;
  uint64_t v93;
  void *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  std::runtime_error *v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type size;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::runtime_error *v119;
  int v120;
  std::string *v121;
  __int128 v122;
  std::runtime_error *exception;
  std::runtime_error *v124;
  std::runtime_error *v125;
  std::runtime_error *v126;
  int v127;
  std::string *v128;
  __int128 v129;
  _BOOL4 v130;
  void *v131;
  void *v132;
  id v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  std::string v138;
  std::string v139;
  std::string v140;
  std::string v141;
  std::string v142;
  std::string v143;
  std::string v144;
  _BYTE v145[32];
  uint64_t v146;
  void *__p;
  void *v148;
  uint64_t v149;
  id *v150;
  std::__shared_weak_count *v151;
  const void *v152;
  std::string::size_type v153;
  _BYTE *v154;
  std::__shared_weak_count *v155;
  _BYTE v156[128];
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(a1 + 88), *a3, a3[1]);
  v6 = (const void *)*a3;
  if (!*a3)
  {
    v7 = 0;
    goto LABEL_8;
  }
  if (!v8)
  {
LABEL_8:
    v154 = 0;
    v155 = 0;
    goto LABEL_9;
  }
  v9 = a3[1];
  v154 = v8;
  v155 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
LABEL_9:
  v152 = 0;
  v153 = 0;
  if (v7)
  {
    v130 = *((_BYTE *)v7 + 88) != 0;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&v152, *((_QWORD *)v7 + 13), *((_QWORD *)v7 + 14));
  }
  else
  {
    v130 = 0;
  }
  v12 = *(const void **)(a1 + 72);
  if (!v12
  {
    v150 = 0;
    v151 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v14 = *(std::__shared_weak_count **)(a1 + 80);
  v150 = v13;
  v151 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, (const Espresso::layer_shape *)a2);
  v17 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;

  v18 = *(void **)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;

  v19 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;

  v20 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;

  v21 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;

  v23 = (id *)(a1 + 192);
  v22 = *(void **)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;

  *(_OWORD *)v145 = 0uLL;
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](a1 + 264, (__int128 *)v145);
  v24 = *(std::__shared_weak_count **)&v145[8];
  if (*(_QWORD *)&v145[8])
  {
    v25 = (unint64_t *)(*(_QWORD *)&v145[8] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v132 = (void *)objc_opt_new();
  v131 = (void *)objc_opt_new();
  if (!(*(_DWORD *)(a1 + 16) * *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 12) * *(_DWORD *)(a1 + 8) * *(_DWORD *)(a1 + 24)))
  {
    if (v130)
      *((_QWORD *)v7 + 12) = 0;
    goto LABEL_109;
  }
  v27 = v154;
  if (v154 && v154[121])
  {
    if (v152
    {
      v29 = v28;
      v30 = (std::__shared_weak_count *)v153;
      v144.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
      v144.__r_.__value_.__l.__size_ = v153;
      if (v153)
      {
        v31 = (unint64_t *)(v153 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
    }
    else
    {
      v30 = 0;
      v29 = 0;
      *(_OWORD *)&v144.__r_.__value_.__l.__data_ = 0uLL;
    }
    objc_msgSend(v29[23], "objectAtIndexedSubscript:", *((_QWORD *)v27 + 16));
    v43 = objc_claimAutoreleasedReturnValue();
    v44 = *(void **)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v43;

    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", *(_QWORD *)(a1 + 168));
    v45 = objc_claimAutoreleasedReturnValue();
    v46 = *(void **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v45;

    objc_msgSend(v29[32], "objectAtIndexedSubscript:", *((_QWORD *)v27 + 16));
    v47 = objc_claimAutoreleasedReturnValue();
    v48 = *(void **)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v47;

    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObject:", *(_QWORD *)(a1 + 240));
    v49 = objc_claimAutoreleasedReturnValue();
    v50 = *(void **)(a1 + 256);
    *(_QWORD *)(a1 + 256) = v49;

    v51 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v145 = *(_OWORD *)a2;
    *(_OWORD *)&v145[16] = v51;
    v52 = *(const void **)(a2 + 40);
    v146 = *(_QWORD *)(a2 + 32);
    __p = 0;
    v148 = 0;
    v149 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v52, *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - (_QWORD)v52) >> 2);
    *(_DWORD *)&v145[12] = 1;
    if (*(_BYTE *)(a1 + 236))
      *(_DWORD *)&v145[12] = *(_DWORD *)(a1 + 232);
    *(_DWORD *)&v145[16] = 1;
    Espresso::abstract_blob_container::set_shape((Espresso::abstract_blob_container *)a1, (const Espresso::layer_shape *)v145);
    if (__p)
    {
      v148 = __p;
      operator delete(__p);
    }
    if (v30)
    {
      v53 = (unint64_t *)&v30->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
    goto LABEL_109;
  }
  v33 = v150;
  v133 = v150[18];
  v35 = *(_DWORD *)(a1 + 16);
  v34 = *(_DWORD *)(a1 + 20);
  v37 = v35 - 1;
  v36 = v35 < 1;
  v38 = v35 + 2;
  if (!v36)
    v38 = v37;
  v39 = (v38 >> 2) + 1;
  v40 = *(_DWORD *)(a1 + 24);
  if (v40 <= 1)
    v40 = 1;
  if (*((_BYTE *)v33 + 113))
  {
    v41 = v40 * v34;
    if (*(_BYTE *)(a1 + 236))
    {
      v42 = *(_DWORD *)(a1 + 232);
      v39 *= v42;
      v41 /= v42;
    }
  }
  else
  {
    v39 *= v34 * v40;
    v41 = 1;
  }
  if (v39 >= 2049)
    Espresso::throw_exception_selector<Espresso::context_exceeded,int &,int &,int &>(*(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), v39);
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v55 = (void *)objc_opt_new();
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != 1)
      {
        v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        v127 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
        std::to_string(&v144, v127);
        v128 = std::string::insert(&v144, 0, "Compute path not supported");
        v129 = *(_OWORD *)&v128->__r_.__value_.__l.__data_;
        *(_QWORD *)&v145[16] = *((_QWORD *)&v128->__r_.__value_.__l + 2);
        *(_OWORD *)v145 = v129;
        v128->__r_.__value_.__l.__size_ = 0;
        v128->__r_.__value_.__r.__words[2] = 0;
        v128->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v126, (const std::string *)v145);
        __cxa_throw(v126, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v56 = 115;
    }
    else
    {
      v56 = 125;
    }
    objc_msgSend(v55, "setPixelFormat:", v56);
    objc_msgSend(v55, "setWidth:", *(int *)(a1 + 8));
    objc_msgSend(v55, "setHeight:", *(int *)(a1 + 12));
    objc_msgSend(v55, "setArrayLength:", v39);
    objc_msgSend(v55, "setUsage:", 3);
    objc_msgSend(v55, "setTextureType:", 3);
    objc_msgSend(v55, "setStorageMode:", 2);
    v57 = objc_msgSend(v133, "heapTextureSizeAndAlignWithDescriptor:", v55);
    v58 = v57;
    if (v130)
    {
      *((_QWORD *)v7 + 12) = v57;
      goto LABEL_108;
    }
    v59 = *v23;
    *v23 = 0;

    if (v152)
    {
      if (v60)
      {
        v61 = (std::__shared_weak_count *)v153;
        if (v153)
        {
          v62 = (unint64_t *)(v153 + 8);
          do
            v63 = __ldxr(v62);
          while (__stxr(v63 + 1, v62));
        }
      }
      else
      {
        v61 = 0;
      }
      objc_storeStrong((id *)(a1 + 192), v60[24]);
      if (v61)
      {
        v64 = (unint64_t *)&v61->__shared_owners_;
        do
          v65 = __ldaxr(v64);
        while (__stlxr(v65 - 1, v64));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
      }
    }
    if (!*v23)
    {
      Espresso::on_alloc((Espresso *)a1, (void *)v58);
      v66 = (void *)objc_opt_new();
      objc_msgSend(v66, "setCpuCacheMode:", 0);
      objc_msgSend(v66, "setStorageMode:", 2);
      if (*((_BYTE *)v150 + 113))
        v67 = v41;
      else
        v67 = 1;
      objc_msgSend(v66, "setSize:", v67 * v58);
      objc_msgSend(v66, "setHazardTrackingMode:", 2);
      v68 = objc_msgSend(v133, "newHeapWithDescriptor:", v66);
      v69 = *v23;
      *v23 = (id)v68;

      if (!*v23)
        Espresso::throw_exception_selector<Espresso::context_exceeded,unsigned long>(objc_msgSend(v66, "size"));

    }
  }
  if (v41 >= 1)
  {
    v70 = 0;
    while (1)
    {
      v55 = (void *)objc_opt_new();
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1))
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) != 1)
        {
          v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          v120 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
          std::to_string(&v144, v120);
          v121 = std::string::insert(&v144, 0, "Compute path not supported");
          v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
          *(_QWORD *)&v145[16] = *((_QWORD *)&v121->__r_.__value_.__l + 2);
          *(_OWORD *)v145 = v122;
          v121->__r_.__value_.__l.__size_ = 0;
          v121->__r_.__value_.__r.__words[2] = 0;
          v121->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v119, (const std::string *)v145);
          __cxa_throw(v119, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v71 = 115;
      }
      else
      {
        v71 = 125;
      }
      objc_msgSend(v55, "setPixelFormat:", v71);
      objc_msgSend(v55, "setWidth:", *(int *)(a1 + 8));
      objc_msgSend(v55, "setHeight:", *(int *)(a1 + 12));
      objc_msgSend(v55, "setArrayLength:", v39);
      objc_msgSend(v55, "setUsage:", 3);
      objc_msgSend(v55, "setTextureType:", 3);
      objc_msgSend(v55, "setStorageMode:", 2);

      if ((objc_opt_respondsToSelector() & 1) == 0
        || (v70 = (void *)objc_msgSend(*v23, "newTextureWithDescriptor:", v55)) == 0)
      {
        if (v130)
        {
          *((_QWORD *)v7 + 12) = -1;
          goto LABEL_108;
        }
        v70 = (void *)objc_msgSend(v133, "newTextureWithDescriptor:", v55);
        if (!v70)
        {
          v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v140, objc_msgSend(v55, "width"));
          v105 = std::string::insert(&v140, 0, "Cannot create texture: ");
          v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          v141.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v141.__r_.__value_.__l.__data_ = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          v107 = std::string::append(&v141, "x");
          v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          v142.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v142.__r_.__value_.__l.__data_ = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v139, objc_msgSend(v55, "height"));
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v109 = &v139;
          else
            v109 = (std::string *)v139.__r_.__value_.__r.__words[0];
          if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          else
            size = v139.__r_.__value_.__l.__size_;
          v111 = std::string::append(&v142, (const std::string::value_type *)v109, size);
          v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v112;
          v111->__r_.__value_.__l.__size_ = 0;
          v111->__r_.__value_.__r.__words[2] = 0;
          v111->__r_.__value_.__r.__words[0] = 0;
          v113 = std::string::append(&v143, "x");
          v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v114;
          v113->__r_.__value_.__l.__size_ = 0;
          v113->__r_.__value_.__r.__words[2] = 0;
          v113->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v138, objc_msgSend(v55, "arrayLength"));
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v115 = &v138;
          else
            v115 = (std::string *)v138.__r_.__value_.__r.__words[0];
          if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v116 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
          else
            v116 = v138.__r_.__value_.__l.__size_;
          v117 = std::string::append(&v144, (const std::string::value_type *)v115, v116);
          v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
          *(_QWORD *)&v145[16] = *((_QWORD *)&v117->__r_.__value_.__l + 2);
          *(_OWORD *)v145 = v118;
          v117->__r_.__value_.__l.__size_ = 0;
          v117->__r_.__value_.__r.__words[2] = 0;
          v117->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v104, (const std::string *)v145);
          __cxa_throw(v104, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
      }
      v72 = objc_alloc(MEMORY[0x1E0CC6DF0]);
      v73 = *(_DWORD *)(a1 + 16);
      if (v73 <= 4)
        v74 = 4;
      else
        v74 = v73;
      v75 = objc_msgSend(v72, "initWithTexture:featureChannels:featureChannelsLayout:", v70, v74, 1);
      v76 = *(void **)(a1 + 240);
      *(_QWORD *)(a1 + 240) = v75;

      objc_msgSend(*(id *)(a1 + 240), "texture");
      v77 = objc_claimAutoreleasedReturnValue();
      v78 = *(void **)(a1 + 168);
      *(_QWORD *)(a1 + 168) = v77;

      objc_msgSend(v131, "addObject:", *(_QWORD *)(a1 + 240));
      objc_msgSend(v132, "addObject:", *(_QWORD *)(a1 + 168));

      if (!--v41)
        goto LABEL_94;
    }
  }
  v70 = 0;
LABEL_94:
  v79 = *(void **)(a1 + 240);
  if (!v79)
  {
    v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v124, "Cannot create MPS image");
    goto LABEL_143;
  }
  objc_msgSend(v79, "texture");
  v80 = (void *)objc_claimAutoreleasedReturnValue();
  v81 = v80 == 0;

  if (v81)
  {
    v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v124, "Cannot create texture");
LABEL_143:
    __cxa_throw(v124, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!v70)
  {
    v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v125, "Cannot create MPS image");
    __cxa_throw(v125, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  objc_msgSend(*(id *)(a1 + 240), "texture");
  v82 = objc_claimAutoreleasedReturnValue();
  v83 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v82;

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v132);
  v84 = objc_claimAutoreleasedReturnValue();
  v85 = *(void **)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v84;

  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v86 = *(id *)(a1 + 184);
  v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v134, v156, 16);
  if (v87)
  {
    v88 = *(_QWORD *)v135;
    do
    {
      for (i = 0; i != v87; ++i)
      {
        if (*(_QWORD *)v135 != v88)
          objc_enumerationMutation(v86);
        v90 = *(void **)(*((_QWORD *)&v134 + 1) + 8 * i);
        objc_msgSend(v90, "heap");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        v92 = v91 == 0;

        if (!v92)
          objc_msgSend(v90, "makeAliasable");
      }
      v87 = objc_msgSend(v86, "countByEnumeratingWithState:objects:count:", &v134, v156, 16);
    }
    while (v87);
  }

  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", v131);
  v93 = objc_claimAutoreleasedReturnValue();
  v94 = *(void **)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v93;

  v55 = v70;
LABEL_108:

LABEL_109:
  v95 = v151;
  if (v151)
  {
    v96 = (unint64_t *)&v151->__shared_owners_;
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  v98 = (std::__shared_weak_count *)v153;
  if (v153)
  {
    v99 = (unint64_t *)(v153 + 8);
    do
      v100 = __ldaxr(v99);
    while (__stlxr(v100 - 1, v99));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  v101 = v155;
  if (v155)
  {
    v102 = (unint64_t *)&v155->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
}

void sub_1914312A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  char a66;
  void *__p;
  char a72;
  char a73;
  int v73;
  void *v74;
  void *v75;
  uint64_t v76;

  if (a72 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a66 < 0)
    operator delete(a61);
  if (a59 < 0)
    operator delete(a54);
  if (a33 < 0)
    operator delete(a28);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
  {
    operator delete(a34);
    if ((v73 & 1) == 0)
    {
LABEL_20:

      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a73);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v76 - 256);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v76 - 240);
      _Unwind_Resume(a1);
    }
  }
  else if (!v73)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v75);
  goto LABEL_20;
}

uint64_t Espresso::MPSEngine::blob_container::platform(Espresso::MPSEngine::blob_container *this)
{
  return (***(uint64_t (****)(_QWORD))(*((_QWORD *)this + 9) + 8))(*(_QWORD *)(*((_QWORD *)this + 9) + 8));
}

uint64_t Espresso::MPSEngine::blob_container::compute_path(Espresso::MPSEngine::blob_container *this)
{
  return *((unsigned int *)this + 50);
}

void Espresso::MPSEngine::blob_container::__copy_to_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  id *v7;
  int32x2_t v8;
  unint64_t *v9;
  unint64_t v10;
  int64x2_t *v11;
  int64x2_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  __int128 v37;
  int64x2_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  int v49;
  void *v50;
  const char *v51;
  void **v52;
  void *v53;
  int v54;
  BOOL v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  __int32 v64;
  uint64_t v65;
  __int32 v66;
  void *v67;
  void *v68;
  int32x2_t v69;
  int32x2_t v70;
  __int128 v71;
  std::__shared_weak_count *v72;
  uint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::runtime_error *exception;
  std::runtime_error *v79;
  std::runtime_error *v80;
  void *v81;
  int64x2_t v82;
  int v83;
  void *v84;
  void *v85;
  int64x2_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *__p[2];
  uint64_t v91;
  int64x2_t *v92;
  std::__shared_weak_count *v93;
  id *v94;
  std::__shared_weak_count *v95;
  uint64_t v96;
  int64x2_t v97;
  uint64_t v98;
  unint64_t v99;

  v4 = (const void *)a1[9];
  if (!v4
  {
    v94 = 0;
    v95 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = a1[10];
  v94 = v7;
  v95 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(*(_QWORD *)&v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  if (!*(_QWORD *)a2
  {
    v92 = 0;
    v93 = 0;
    v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v79, "Espresso: wrong_batch_type");
    v79->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v12 = v11;
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  v92 = v11;
  v93 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (void *)*a3;
  if (!*a3)
  {
    (*(void (**)(uint64_t *__return_ptr, int32x2_t *))(*(_QWORD *)a1 + 56))(&v96, a1);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&v96);
    v17 = (std::__shared_weak_count *)v97.i64[0];
    if (v97.i64[0])
    {
      v18 = (unint64_t *)(v97.i64[0] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v12 = v92;
    v16 = (void *)*a3;
  }
  v20 = (unint64_t *)a3[1];
  __p[0] = v16;
  __p[1] = v20;
  if (v20)
  {
    v21 = v20 + 1;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = v12[11].u64[0];
  v24 = (_QWORD *)v12[10].i64[1];
  if ((unint64_t)v24 >= v23)
  {
    v26 = v12[10].i64[0];
    v27 = ((uint64_t)v24 - v26) >> 4;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v29 = v23 - v26;
    if (v29 >> 3 > v28)
      v28 = v29 >> 3;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0)
      v30 = 0xFFFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v99 = (unint64_t)&v12[11];
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v30);
    v33 = &v31[16 * v27];
    *(_OWORD *)v33 = *(_OWORD *)__p;
    v35 = (_QWORD *)v12[10].i64[0];
    v34 = (_QWORD *)v12[10].i64[1];
    if (v34 == v35)
    {
      v38 = vdupq_n_s64((unint64_t)v34);
      v36 = &v31[16 * v27];
    }
    else
    {
      v36 = &v31[16 * v27];
      do
      {
        v37 = *((_OWORD *)v34 - 1);
        v34 -= 2;
        *((_OWORD *)v36 - 1) = v37;
        v36 -= 16;
        *v34 = 0;
        v34[1] = 0;
      }
      while (v34 != v35);
      v38 = v12[10];
    }
    v25 = v33 + 16;
    v12[10].i64[0] = (uint64_t)v36;
    v12[10].i64[1] = (uint64_t)(v33 + 16);
    v97 = v38;
    v39 = v12[11].i64[0];
    v12[11].i64[0] = (uint64_t)&v31[16 * v32];
    v98 = v39;
    v96 = v38.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v96);
  }
  else
  {
    *v24 = v16;
    v24[1] = v20;
    v25 = v24 + 2;
  }
  v12[10].i64[1] = (uint64_t)v25;
  v96 = (uint64_t)v94;
  v97.i64[0] = (uint64_t)v95;
  if (v95)
  {
    v40 = (unint64_t *)&v95->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  __p[0] = v12;
  __p[1] = v93;
  if (v93)
  {
    v42 = &v93->__shared_owners_;
    do
      v43 = __ldxr((unint64_t *)v42);
    while (__stxr(v43 + 1, (unint64_t *)v42));
  }
  Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>>>((uint64_t)&v96, v12, a3);
  v84 = (void *)objc_claimAutoreleasedReturnValue();
  if (v93)
  {
    v44 = &v93->__shared_owners_;
    do
      v45 = __ldaxr((unint64_t *)v44);
    while (__stlxr(v45 - 1, (unint64_t *)v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v46 = (std::__shared_weak_count *)v97.i64[0];
  if (v97.i64[0])
  {
    v47 = (unint64_t *)(v97.i64[0] + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = objc_msgSend(*(id *)&a1[23], "count");
  objc_msgSend(*(id *)&a1[30], "texture");
  v50 = (void *)objc_claimAutoreleasedReturnValue();
  __p[0] = 0;
  __p[1] = 0;
  v91 = 0;
  if (objc_msgSend(v50, "pixelFormat") == 115)
  {
    v51 = "read_tex2darray_4h_unpacked";
  }
  else
  {
    if (objc_msgSend(v50, "pixelFormat") != 125)
      Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be fp16 or fp32.",
        objc_msgSend(v50, "pixelFormat"));
    v51 = "read_tex2darray_4f_unpacked";
  }
  MEMORY[0x19401C808](__p, v51);
  if (v91 >= 0)
    v52 = __p;
  else
    v52 = (void **)__p[0];
  objc_msgSend(v94[20], "kernelForFunction:cacheString:withConstants:", v52, 0, 0);
  v85 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend((id)v92[9].i64[0], "computeCommandEncoder");
  v53 = (void *)objc_claimAutoreleasedReturnValue();
  v81 = v50;
  if (!v85)
  {
    v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v80, "Kernel not found");
    __cxa_throw(v80, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v54 = a1[2].i32[0];
  v56 = v54 - 1;
  v55 = v54 < 1;
  v57 = v54 + 2;
  if (!v55)
    v57 = v56;
  v58 = a1[3].i32[0];
  if (v58 <= 1)
    v58 = 1;
  v59 = v58 * a1[2].i32[1];
  if (a1[29].i8[4])
    v60 = a1[29].i32[0];
  else
    v60 = 1;
  if (v49 <= 1)
    v61 = v59;
  else
    v61 = v60;
  if (v49 >= 1)
  {
    v62 = 0;
    v63 = 0;
    v64 = a1[1].i32[0];
    v83 = (v57 >> 2) + 1;
    v65 = v49;
    v82 = vdupq_n_s64(8uLL);
    do
    {
      v66 = a1[1].i32[1];
      LODWORD(v96) = a1[1].i32[0];
      HIDWORD(v96) = v66;
      v97.i32[0] = a1[2].i32[0];
      *(uint64_t *)((char *)v97.i64 + 4) = __PAIR64__(v61, v83);
      v97.i32[3] = v64;
      LODWORD(v98) = v66 * v64;
      HIDWORD(v98) = v97.i32[0] * v66 * v64;
      v99 = (v62 * v66 * v97.i32[0]);
      objc_msgSend(v53, "setComputePipelineState:", v85);
      v67 = (void *)objc_msgSend(v94[18], "newBufferWithBytes:length:options:", &v96, 40, 0);
      objc_msgSend(*(id *)&a1[23], "objectAtIndexedSubscript:", v63);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v53, "setTexture:atIndex:", v68, 0);

      objc_msgSend(v53, "setBuffer:offset:atIndex:", v84, 0, 0);
      objc_msgSend(v53, "setBuffer:offset:atIndex:", v67, 0, 1);
      v69 = vadd_s32(a1[1], (int32x2_t)-1);
      v70 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v69, (uint32x2_t)vcltz_s32(v69), 0x1DuLL), 3uLL);
      *(_QWORD *)&v71 = v70.i32[0];
      *((_QWORD *)&v71 + 1) = v70.i32[1];
      v88 = v71;
      v89 = v61 * v83;
      v86 = v82;
      v87 = 1;
      objc_msgSend(v53, "dispatchThreadgroups:threadsPerThreadgroup:", &v88, &v86);

      ++v63;
      v62 += v61 * v64;
    }
    while (v65 != v63);
  }
  objc_msgSend(v53, "endEncoding");

  if (SHIBYTE(v91) < 0)
    operator delete(__p[0]);

  v72 = v93;
  if (v93)
  {
    v73 = &v93->__shared_owners_;
    do
      v74 = __ldaxr((unint64_t *)v73);
    while (__stlxr(v74 - 1, (unint64_t *)v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = v95;
  if (v95)
  {
    v76 = (unint64_t *)&v95->__shared_owners_;
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_191431C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v32 - 144);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::blob_container::__copy_from_host(int32x2_t *a1, uint64_t a2, uint64_t *a3)
{
  const void *v4;
  void *v7;
  void *v8;
  int32x2_t v9;
  unint64_t *v10;
  unint64_t v11;
  int64x2_t *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::runtime_error *exception;
  std::runtime_error *v33;
  std::runtime_error *v34;
  void *v35;
  std::__shared_weak_count *v36;
  int64x2_t *v37;
  std::__shared_weak_count *v38;
  void *v39;
  std::__shared_weak_count *v40;

  v4 = (const void *)a1[9];
  if (!v4
  {
    v39 = 0;
    v40 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_context_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v8 = v7;
  v9 = a1[10];
  v39 = v7;
  v40 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(*(_QWORD *)&v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  if (!*(_QWORD *)a2
  {
    v37 = 0;
    v38 = 0;
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v33, "Espresso: wrong_batch_type");
    v33->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v13 = *(std::__shared_weak_count **)(a2 + 8);
  v37 = v12;
  v38 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  if (!*a3)
  {
    v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v34, "Unexpected null pointer");
    __cxa_throw(v34, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v35 = v8;
  v36 = v40;
  if (v40)
  {
    v16 = (unint64_t *)&v40->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (v13)
  {
    v18 = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>((uint64_t)&v35, v12, a3);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v21 = (unint64_t *)&v13->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v23 = v36;
  if (v36)
  {
    v24 = (unint64_t *)&v36->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(a1, a2, v20, 0, 4 * a1[1].i32[0], 1, 0, 1, 0);

  v26 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v40;
  if (v40)
  {
    v30 = (unint64_t *)&v40->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_191432060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::blob_container::unsafe_opaque_raw_pointer(Espresso::MPSEngine::blob_container *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t Espresso::MPSEngine::blob_container::__copy_from(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  id *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  id *v12;
  id *v13;
  int32x2_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  unsigned int *v18;
  unsigned int *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  size_t BytesPerRow;
  void *v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v53;
  int v54;
  __int32 v55;
  int v56;
  int v57;
  __int32 v58;
  __int32 v59;
  int v60;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  std::runtime_error *exception;
  std::runtime_error *v73;
  __int128 v74;
  uint64_t v75;
  _QWORD v76[3];
  unint64_t v77;
  unint64_t v78;
  int v79;
  __int32 v80;
  int v81;
  int v82;
  uint64_t v83;
  void *v84;
  std::__shared_weak_count *v85;
  unsigned int *v86;
  std::__shared_weak_count *v87;
  id *v88;
  std::__shared_weak_count *v89;
  id *v90;
  std::__shared_weak_count *v91;

  if (!*(_QWORD *)a2
  {
    v90 = 0;
    v91 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v7 = v6;
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  v90 = v6;
  v91 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (const void *)a1[9];
  if (!v11
  {
    v88 = 0;
    v89 = 0;
    v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Espresso: wrong_context_type");
    v73->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v13 = v12;
  v14 = a1[10];
  v88 = v12;
  v89 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(*(_QWORD *)&v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(const void **)a3;
  if (!*(_QWORD *)a3)
  {
    v86 = 0;
    v87 = 0;
LABEL_23:
    v27 = 0;
    v84 = 0;
    v85 = 0;
    goto LABEL_24;
  }
  if (v18)
  {
    v19 = v18;
    v20 = *(std::__shared_weak_count **)(a3 + 8);
    v86 = v18;
    v87 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v7 = (id *)v13[18];
    v23 = v19[45];
    if ((int)v23 >= 1)
    {
      for (i = 0; i != v23; ++i)
      {
        BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)objc_msgSend(*(id *)(*((_QWORD *)v19 + 27) + 8 * i), "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80)));
        objc_msgSend(*(id *)(*((_QWORD *)v19 + 27) + 8 * i), "metalBufferWithDevice:multiBufferFrame:", v7, *(_QWORD *)(*(_QWORD *)a2 + 80));
        v26 = (void *)objc_claimAutoreleasedReturnValue();
        Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(a1, a2, v26, 1, BytesPerRow, v19[48], i, v23, 0);
        if ((unint64_t)objc_msgSend(*(id *)&a1[23], "count") >= 2)
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("ANE<-->MPS with array of textures not yet supported.");

      }
    }

    v27 = 1;
    LOBYTE(v7) = 1;
    if (!v20)
      goto LABEL_33;
    goto LABEL_30;
  }
  v86 = 0;
  v87 = 0;
  if (!v37)
    goto LABEL_23;
  v38 = v37;
  v39 = *(std::__shared_weak_count **)(a3 + 8);
  v84 = v37;
  v85 = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v17 = *(const void **)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_67;
  }
  {
    v42 = *(std::__shared_weak_count **)(a3 + 8);
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
      do
        v45 = __ldaxr(v43);
      while (__stlxr(v45 - 1, v43));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    LOBYTE(v7) = 0;
    v27 = 1;
  }
  else
  {
LABEL_67:
    objc_msgSend(v13[20], "kernelForFunction:cacheString:withConstants:", "tex2dlowmem_to_tex2darray", 0, 0);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v53)
      Espresso::throw_exception_selector<Espresso::generic_error>("Cannot find shader tex2dlowmem_to_tex2darray");
    v54 = a1[2].i32[0];
    v55 = a1[2].i32[1];
    v56 = v54 - 1;
    if (v54 < 1)
      v56 = v54 + 2;
    v57 = (v56 >> 2) + 1;
    v58 = a1[1].i32[0];
    v59 = a1[1].i32[1];
    v77 = __PAIR64__(v59, v58);
    v78 = __PAIR64__(v57, v54);
    v60 = a1[3].i32[0];
    if (v60 <= 1)
      v60 = 1;
    v79 = v60 * v55;
    v80 = v58;
    v81 = v59 * v58;
    v82 = v59 * v58 * v54;
    v83 = 0;
    objc_msgSend(v7[18], "computeCommandEncoder");
    v7 = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setComputePipelineState:", v53);
    objc_msgSend(v7, "setTexture:atIndex:", v38[21], 0);
    objc_msgSend(v7, "setTexture:atIndex:", *(_QWORD *)&a1[21], 1);
    objc_msgSend(v7, "setBytes:length:atIndex:", &v77, 40, 0);
    v61 = a1[1].i32[0];
    v62 = a1[1].i32[1];
    v64 = v61 - 1;
    v63 = v61 < 1;
    v65 = v61 + 6;
    if (!v63)
      v65 = v64;
    v66 = (v65 >> 3) + 1;
    v67 = v62 - 1;
    v63 = v62 < 1;
    v68 = v62 + 2;
    if (!v63)
      v68 = v67;
    v69 = a1[3].i32[0];
    v70 = a1[2].i32[1] * v57;
    v71 = (v68 >> 2) + 1;
    if (v69 <= 1)
      v69 = 1;
    v76[0] = v66;
    v76[1] = v71;
    v76[2] = v70 * v69;
    v74 = xmmword_191A935C0;
    v75 = 1;
    objc_msgSend(v7, "dispatchThreadgroups:threadsPerThreadgroup:", v76, &v74);
    objc_msgSend(v7, "endEncoding");

    v27 = 1;
    LOBYTE(v7) = 1;
  }
LABEL_24:
  v28 = v85;
  if (v85)
  {
    v29 = (unint64_t *)&v85->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v20 = v87;
  if (!v87)
  {
LABEL_33:
    if (v27)
      goto LABEL_56;
    goto LABEL_34;
  }
LABEL_30:
  v31 = (unint64_t *)&v20->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (v32)
    goto LABEL_33;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  if (v27)
    goto LABEL_56;
LABEL_34:
  Espresso::inline_get_cpu_blob<Espresso::blob<float,4>,true>(&v77, *(void **)a3, *(std::__shared_weak_count **)(a3 + 8));
  v33 = v77;
  if (v77)
  {
    (*(void (**)(int32x2_t *, uint64_t, unint64_t *))(*(_QWORD *)a1 + 48))(a1, a2, &v77);
    LOBYTE(v7) = 1;
  }
  v34 = (std::__shared_weak_count *)v78;
  if (v78)
  {
    v35 = (unint64_t *)(v78 + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  LOBYTE(v7) = (v33 != 0) & v7;
LABEL_56:
  v46 = v89;
  if (v89)
  {
    v47 = (unint64_t *)&v89->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v91;
  if (v91)
  {
    v50 = (unint64_t *)&v91->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  return v7 & 1;
}

void sub_1914326D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 104);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSEngine::blob_container::__copy_to(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  id *v6;
  id *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const void *v11;
  id *v12;
  id *v13;
  int32x2_t v14;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  unsigned int *v18;
  unsigned int *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  size_t BytesPerRow;
  void *v27;
  int v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD *v41;
  _QWORD *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  void *v50;
  int v51;
  __int32 v52;
  int v53;
  int v54;
  __int32 v55;
  __int32 v56;
  int v57;
  int v58;
  int v59;
  BOOL v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  std::runtime_error *exception;
  std::runtime_error *v70;
  __int128 v71;
  uint64_t v72;
  _QWORD v73[3];
  _DWORD v74[8];
  uint64_t v75;
  void *v76;
  std::__shared_weak_count *v77;
  unsigned int *v78;
  std::__shared_weak_count *v79;
  id *v80;
  std::__shared_weak_count *v81;
  id *v82;
  std::__shared_weak_count *v83;

  if (!*(_QWORD *)a2
  {
    v82 = 0;
    v83 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v7 = v6;
  v8 = *(std::__shared_weak_count **)(a2 + 8);
  v82 = v6;
  v83 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (const void *)a1[9];
  if (!v11
  {
    v80 = 0;
    v81 = 0;
    v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v70, "Espresso: wrong_context_type");
    v70->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v13 = v12;
  v14 = a1[10];
  v80 = v12;
  v81 = (std::__shared_weak_count *)v14;
  if (v14)
  {
    v15 = (unint64_t *)(*(_QWORD *)&v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = *(const void **)a3;
  if (!*(_QWORD *)a3)
  {
    v78 = 0;
    v79 = 0;
LABEL_24:
    v28 = 0;
    v76 = 0;
    v77 = 0;
    goto LABEL_25;
  }
  if (v18)
  {
    v19 = v18;
    v20 = *(std::__shared_weak_count **)(a3 + 8);
    v78 = v18;
    v79 = v20;
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v7 = (id *)v13[18];
    v23 = v19[45];
    if ((int)v23 >= 1)
    {
      for (i = 0; i != v23; ++i)
      {
        v25 = *((_QWORD *)v19 + 27);
        if (i >= (*((_QWORD *)v19 + 28) - v25) >> 3)
          Espresso::throw_exception_selector<Espresso::invalid_state_error>("Empty blob being copied");
        BytesPerRow = IOSurfaceGetBytesPerRow((IOSurfaceRef)objc_msgSend(*(id *)(v25 + 8 * i), "ioSurfaceForMultiBufferFrame:", *(_QWORD *)(*(_QWORD *)a2 + 80)));
        objc_msgSend(*(id *)(*((_QWORD *)v19 + 27) + 8 * i), "metalBufferWithDevice:multiBufferFrame:", v7, *(_QWORD *)(*(_QWORD *)a2 + 80));
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(a1, a2, v27, 1, BytesPerRow, v19[48], i, v23, 1);
        if ((unint64_t)objc_msgSend(*(id *)&a1[23], "count") >= 2)
          Espresso::throw_exception_selector<Espresso::not_implemented_error>("MPS<-->ANE with array of textures not yet supported.");

      }
    }

    v28 = 1;
    LOBYTE(v7) = 1;
    if (!v20)
      goto LABEL_35;
LABEL_31:
    v32 = (unint64_t *)&v20->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    goto LABEL_35;
  }
  v78 = 0;
  v79 = 0;
  if (!v41)
    goto LABEL_24;
  v42 = v41;
  v43 = *(std::__shared_weak_count **)(a3 + 8);
  v76 = v41;
  v77 = v43;
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v17 = *(const void **)a3;
    if (!*(_QWORD *)a3)
      goto LABEL_59;
  }
  {
    v46 = *(std::__shared_weak_count **)(a3 + 8);
    if (v46)
    {
      v47 = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
      do
        v49 = __ldaxr(v47);
      while (__stlxr(v49 - 1, v47));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    LOBYTE(v7) = 0;
    v28 = 1;
  }
  else
  {
LABEL_59:
    objc_msgSend(v13[20], "kernelForFunction:cacheString:withConstants:", "tex2darray_to_tex2dlowmem", 0, 0);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v50)
      Espresso::throw_exception_selector<Espresso::generic_error>("Cannot find shader tex2darray_to_tex2dlowmem");
    v51 = a1[2].i32[0];
    v52 = a1[2].i32[1];
    v53 = v51 - 1;
    if (v51 < 1)
      v53 = v51 + 2;
    v54 = (v53 >> 2) + 1;
    v55 = a1[1].i32[0];
    v56 = a1[1].i32[1];
    v74[0] = v55;
    v74[1] = v56;
    v74[2] = v51;
    v74[3] = v54;
    v57 = a1[3].i32[0];
    if (v57 <= 1)
      v57 = 1;
    v74[4] = v57 * v52;
    v74[5] = v55;
    v74[6] = v56 * v55;
    v74[7] = v56 * v55 * v51;
    v75 = 0;
    objc_msgSend(v7[18], "computeCommandEncoder");
    v7 = (id *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "setComputePipelineState:", v50);
    objc_msgSend(v7, "setTexture:atIndex:", *(_QWORD *)&a1[21], 0);
    objc_msgSend(v7, "setTexture:atIndex:", v42[21], 1);
    objc_msgSend(v7, "setBytes:length:atIndex:", v74, 40, 0);
    v58 = a1[1].i32[0];
    v59 = a1[1].i32[1];
    v61 = v58 - 1;
    v60 = v58 < 1;
    v62 = v58 + 6;
    if (!v60)
      v62 = v61;
    v63 = (v62 >> 3) + 1;
    v64 = v59 - 1;
    v60 = v59 < 1;
    v65 = v59 + 2;
    if (!v60)
      v65 = v64;
    v66 = a1[3].i32[0];
    v67 = a1[2].i32[1] * v54;
    v68 = (v65 >> 2) + 1;
    if (v66 <= 1)
      v66 = 1;
    v73[0] = v63;
    v73[1] = v68;
    v73[2] = v67 * v66;
    v71 = xmmword_191A935C0;
    v72 = 1;
    objc_msgSend(v7, "dispatchThreadgroups:threadsPerThreadgroup:", v73, &v71);
    objc_msgSend(v7, "endEncoding");

    v28 = 1;
    LOBYTE(v7) = 1;
  }
LABEL_25:
  v29 = v77;
  if (v77)
  {
    v30 = (unint64_t *)&v77->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v20 = v79;
  if (v79)
    goto LABEL_31;
LABEL_35:
  v34 = v81;
  if (v81)
  {
    v35 = (unint64_t *)&v81->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v83;
  if (v83)
  {
    v38 = (unint64_t *)&v83->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return (v28 != 0) & v7;
}

void sub_191432D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  va_list va;
  uint64_t v20;
  va_list va1;

  va_start(va1, a14);
  va_start(va, a14);
  v18 = va_arg(va1, _QWORD);
  v20 = va_arg(va1, _QWORD);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 120);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v16 - 104);
  _Unwind_Resume(a1);
}

void Espresso::MPSEngine::blob_container::__copy_from_or_to_metal_buffer(int32x2_t *a1, uint64_t a2, void *a3, int a4, unint64_t a5, int a6, int a7, int a8, char a9)
{
  id *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  const void *v17;
  id *v18;
  id *v19;
  int32x2_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *v23;
  int v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  __int32 v43;
  int v44;
  void *v45;
  void *v46;
  int32x2_t v47;
  int32x2_t v48;
  __int128 v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::runtime_error *exception;
  std::runtime_error *v57;
  std::runtime_error *v58;
  std::string *v59;
  __int128 v60;
  void *v61;
  void *v62;
  int64x2_t v63;
  int v64;
  id v68;
  int64x2_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  std::string v73;
  int v74;
  int v75;
  int v76;
  int v77;
  std::string v78;
  id *v79;
  std::__shared_weak_count *v80;
  id *v81;
  std::__shared_weak_count *v82;

  v68 = a3;
  if (!*(_QWORD *)a2
  {
    v81 = 0;
    v82 = 0;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Espresso: wrong_batch_type");
    exception->__vftable = (std::runtime_error_vtbl *)&off_1E2D73858;
  }
  v14 = *(std::__shared_weak_count **)(a2 + 8);
  v81 = v13;
  v82 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (const void *)a1[9];
  if (!v17
  {
    v79 = 0;
    v80 = 0;
    v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Espresso: wrong_context_type");
    v57->__vftable = (std::runtime_error_vtbl *)&off_1E2D843D0;
  }
  v19 = v18;
  v20 = a1[10];
  v79 = v18;
  v80 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(*(_QWORD *)&v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  objc_msgSend(*(id *)&a1[30], "texture");
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = objc_msgSend(*(id *)&a1[23], "count");
  if (a6 == 1)
  {
    if (objc_msgSend(v23, "pixelFormat") == 115)
    {
      v25 = "write_tex2darray_4h_unpacked";
      v26 = "write_tex2darray_4h_unpacked_h";
    }
    else
    {
      if (objc_msgSend(v23, "pixelFormat") != 125)
        Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be FP16 or FP32.",
          objc_msgSend(v23, "pixelFormat"));
      v25 = "write_tex2darray_4f_unpacked";
      v26 = "write_tex2darray_4f_unpacked_h";
    }
  }
  else
  {
    if (a6 != 4)
    {
      v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v78, a6);
      v59 = std::string::insert(&v78, 0, "Unsupported interleave factor ");
      v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
      v73.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v73.__r_.__value_.__l.__data_ = v60;
      v59->__r_.__value_.__l.__size_ = 0;
      v59->__r_.__value_.__r.__words[2] = 0;
      v59->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v58, &v73);
      __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (objc_msgSend(v23, "pixelFormat") == 115)
    {
      v25 = "write_tex2darray_4h_interleaved";
      v26 = "write_tex2darray_4h_interleaved_h";
    }
    else
    {
      if (objc_msgSend(v23, "pixelFormat") != 125)
        Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be FP16 or FP32.",
          objc_msgSend(v23, "pixelFormat"));
      v25 = "write_tex2darray_4f_interleaved";
      v26 = "write_tex2darray_4f_interleaved_h";
    }
  }
  if (a4 == 1)
    v27 = v26;
  else
    v27 = v25;
  if (a9)
  {
    if (a6 != 1)
      Espresso::throw_exception_selector<Espresso::context_exceeded,char const(&)[31]>();
    if (objc_msgSend(v23, "pixelFormat", v27) == 115)
    {
      v28 = "read_tex2darray_4h_unpacked";
      v29 = "read_tex2darray_4h_unpacked_h";
    }
    else
    {
      if (objc_msgSend(v23, "pixelFormat") != 125)
        Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>("Unsupported texture format %d; Metal textures must be FP16 or FP32.",
          objc_msgSend(v23, "pixelFormat"));
      v28 = "read_tex2darray_4f_unpacked";
      v29 = "read_tex2darray_4f_unpacked_h";
    }
    if (a4 == 1)
      v27 = v29;
    else
      v27 = v28;
  }
  objc_msgSend(v19[20], "kernelForFunction:cacheString:withConstants:", v27, 0, 0);
  v30 = objc_claimAutoreleasedReturnValue();
  v62 = v23;
  objc_msgSend(v81[18], "computeCommandEncoder");
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  v64 = a6;
  v61 = (void *)v30;
  objc_msgSend(v31, "setComputePipelineState:", v30);
  v32 = a1[3].i32[0];
  if (v32 <= 1)
    v32 = 1;
  v33 = v32 * a1[2].i32[1];
  if (a1[29].i8[4])
    v34 = a1[29].i32[0];
  else
    v34 = 1;
  if (v24 <= 1)
    v35 = v33;
  else
    v35 = v34;
  if (v24 >= 1)
  {
    v36 = 0;
    v37 = 0;
    v38 = v24;
    v39 = a4 - 1;
    v63 = vdupq_n_s64(8uLL);
    do
    {
      v40 = a1[2].i32[0];
      v41 = v40 - 1;
      if (v40 < 1)
        v41 = v40 + 2;
      if (v39 > 0xC)
        v42 = 4;
      else
        v42 = qword_191AC0CA0[v39];
      v43 = a1[1].i32[1];
      LODWORD(v73.__r_.__value_.__l.__data_) = a1[1].i32[0];
      *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 4) = __PAIR64__(v40, v43);
      HIDWORD(v73.__r_.__value_.__r.__words[1]) = (v41 >> 2) + 1;
      LODWORD(v73.__r_.__value_.__r.__words[2]) = v35;
      HIDWORD(v73.__r_.__value_.__r.__words[2]) = (int)(a5 / v42 - 1) / v64 + 1;
      v74 = v43 * HIDWORD(v73.__r_.__value_.__r.__words[2]);
      v75 = v43 * HIDWORD(v73.__r_.__value_.__r.__words[2]) * v40;
      v44 = HIDWORD(v73.__r_.__value_.__r.__words[1]) * v35 / a8;
      v76 = v36 * v40 * HIDWORD(v73.__r_.__value_.__r.__words[2]) * v43;
      v77 = v44 * a7;
      v45 = (void *)objc_msgSend(v79[18], "newBufferWithBytes:length:options:", &v73, 40, 0);
      objc_msgSend(*(id *)&a1[23], "objectAtIndexedSubscript:", v37);
      v46 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v31, "setTexture:atIndex:", v46, 0);

      objc_msgSend(v31, "setBuffer:offset:atIndex:", v68, 0, 0);
      objc_msgSend(v31, "setBuffer:offset:atIndex:", v45, 0, 1);
      v47 = vadd_s32(a1[1], (int32x2_t)-1);
      v48 = vsra_n_s32((int32x2_t)0x100000001, (int32x2_t)vsra_n_u32((uint32x2_t)v47, (uint32x2_t)vcltz_s32(v47), 0x1DuLL), 3uLL);
      *(_QWORD *)&v49 = v48.i32[0];
      *((_QWORD *)&v49 + 1) = v48.i32[1];
      v71 = v49;
      v72 = v44;
      v69 = v63;
      v70 = 1;
      objc_msgSend(v31, "dispatchThreadgroups:threadsPerThreadgroup:", &v71, &v69);

      ++v37;
      v36 += v35;
    }
    while (v38 != v37);
  }
  objc_msgSend(v31, "endEncoding");

  v50 = v80;
  if (v80)
  {
    v51 = (unint64_t *)&v80->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v82;
  if (v82)
  {
    v54 = (unint64_t *)&v82->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }

}

void sub_1914333D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  int v30;
  void *v31;
  void *v32;
  uint64_t v33;

  if (a30 < 0)
    operator delete(__p);
  if (*(char *)(v33 - 121) < 0)
  {
    operator delete(*(void **)(v33 - 144));
    if ((v30 & 1) == 0)
    {
LABEL_8:

      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 120);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v33 - 104);

      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v31);
  goto LABEL_8;
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,MTLPixelFormat>(char *a1, uint64_t a2)
{
  Espresso::throw_exception_with_format<Espresso::context_exceeded>(a1, a2);
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,char const(&)[31]>()
{
  Espresso::throw_exception_with_format<Espresso::context_exceeded>("%s not implemented for stride 4.", "__copy_from_or_to_metal_buffer");
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,char const(&)[31],int &>(int a1)
{
  Espresso::throw_exception_with_format<Espresso::context_exceeded>("%s not implemented for stride %d", "__copy_from_or_to_metal_buffer", a1);
}

id Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>> const>(uint64_t a1, int64x2_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  int64x2_t *v33;

  v4 = *a3;
  if (a2)
  {
    v7 = a3[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = a2[11].u64[0];
    v11 = (_QWORD *)a2[10].i64[1];
    if ((unint64_t)v11 >= v10)
    {
      v13 = a2[10].i64[0];
      v14 = ((uint64_t)v11 - v13) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v16 = v10 - v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      v33 = a2 + 11;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v17);
      v20 = &v18[16 * v14];
      *(_QWORD *)v20 = v4;
      *((_QWORD *)v20 + 1) = v7;
      v22 = (_QWORD *)a2[10].i64[0];
      v21 = (_QWORD *)a2[10].i64[1];
      if (v21 == v22)
      {
        v25 = vdupq_n_s64((unint64_t)v21);
        v23 = &v18[16 * v14];
      }
      else
      {
        v23 = &v18[16 * v14];
        do
        {
          v24 = *((_OWORD *)v21 - 1);
          v21 -= 2;
          *((_OWORD *)v23 - 1) = v24;
          v23 -= 16;
          *v21 = 0;
          v21[1] = 0;
        }
        while (v21 != v22);
        v25 = a2[10];
      }
      v12 = v20 + 16;
      a2[10].i64[0] = (uint64_t)v23;
      a2[10].i64[1] = (uint64_t)(v20 + 16);
      v31 = v25;
      v26 = a2[11].i64[0];
      a2[11].i64[0] = (uint64_t)&v18[16 * v19];
      v32 = v26;
      v30 = v25.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *v11 = v4;
      v11[1] = v7;
      v12 = v11 + 2;
    }
    a2[10].i64[1] = (uint64_t)v12;
    v4 = *a3;
  }
  v27 = 0;
  v28 = *(int *)(v4 + 8);
  do
  {
    v28 *= *(int *)(v4 + 12 + v27);
    v27 += 4;
  }
  while (v27 != 12);
  return (id)objc_msgSend(*(id *)(*(_QWORD *)a1 + 144), "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(v4 + 24), (4 * v28 + 4095) & 0xFFFFFFFFFFFFF000, 0, 0);
}

void sub_1914336C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

id Espresso::noCopyBufferFromBlob<std::shared_ptr<Espresso::blob<float,4>>>(uint64_t a1, int64x2_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  __int128 v24;
  int64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  int64x2_t *v33;

  v4 = *a3;
  if (a2)
  {
    v7 = a3[1];
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = a2[11].u64[0];
    v11 = (_QWORD *)a2[10].i64[1];
    if ((unint64_t)v11 >= v10)
    {
      v13 = a2[10].i64[0];
      v14 = ((uint64_t)v11 - v13) >> 4;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v16 = v10 - v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      v33 = a2 + 11;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v17);
      v20 = &v18[16 * v14];
      *(_QWORD *)v20 = v4;
      *((_QWORD *)v20 + 1) = v7;
      v22 = (_QWORD *)a2[10].i64[0];
      v21 = (_QWORD *)a2[10].i64[1];
      if (v21 == v22)
      {
        v25 = vdupq_n_s64((unint64_t)v21);
        v23 = &v18[16 * v14];
      }
      else
      {
        v23 = &v18[16 * v14];
        do
        {
          v24 = *((_OWORD *)v21 - 1);
          v21 -= 2;
          *((_OWORD *)v23 - 1) = v24;
          v23 -= 16;
          *v21 = 0;
          v21[1] = 0;
        }
        while (v21 != v22);
        v25 = a2[10];
      }
      v12 = v20 + 16;
      a2[10].i64[0] = (uint64_t)v23;
      a2[10].i64[1] = (uint64_t)(v20 + 16);
      v31 = v25;
      v26 = a2[11].i64[0];
      a2[11].i64[0] = (uint64_t)&v18[16 * v19];
      v32 = v26;
      v30 = v25.i64[0];
      std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)&v30);
    }
    else
    {
      *v11 = v4;
      v11[1] = v7;
      v12 = v11 + 2;
    }
    a2[10].i64[1] = (uint64_t)v12;
    v4 = *a3;
  }
  v27 = 0;
  v28 = *(int *)(v4 + 8);
  do
  {
    v28 *= *(int *)(v4 + 12 + v27);
    v27 += 4;
  }
  while (v27 != 12);
  return (id)objc_msgSend(*(id *)(*(_QWORD *)a1 + 144), "newBufferWithBytesNoCopy:length:options:deallocator:", *(_QWORD *)(v4 + 24), (4 * v28 + 4095) & 0xFFFFFFFFFFFFF000, 0, 0);
}

void sub_191433850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,int &,int &,int &>(int a1, int a2, int a3)
{
  Espresso::throw_exception_with_format<Espresso::context_exceeded>("Texture array length too high for dimensions: %dx%dx%d", a1, a2, a3);
}

void Espresso::throw_exception_selector<Espresso::context_exceeded,unsigned long>(uint64_t a1)
{
  Espresso::throw_exception_with_format<Espresso::context_exceeded>("Cannot create %zu-byte metal heap.", a1);
}

void Espresso::MPSEngine::blob_container_options::~blob_container_options(Espresso::MPSEngine::blob_container_options *this)
{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
}

{
  *(_QWORD *)this = &off_1E2DA0BF0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  Espresso::abstract_blob_container_options::~abstract_blob_container_options(this);
  JUMPOUT(0x19401CD90);
}

float Espresso::MPSGraphEngine::context::begin_batch@<S0>(id *this@<X0>, _OWORD *a2@<X8>)
{
  char v4;
  float result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;

  std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSGraphEngine::context *,void>((Espresso::MPSEngine::batch **)&v8, this);
  v4 = *((_BYTE *)this + 184);
  result = *((float *)this + 42);
  v6 = v8;
  v7 = v8;
  *(_BYTE *)(v8 + 216) = *((_BYTE *)this + 172);
  *(float *)(v7 + 212) = result;
  *(_BYTE *)(v7 + 232) = v4;
  *a2 = v6;
  return result;
}

void Espresso::context_metal::get_device_model_name(id *this@<X0>, _QWORD *a2@<X8>)
{
  id v3;

  objc_msgSend(this[18], "name");
  v3 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)objc_msgSend(v3, "UTF8String"));

}

void sub_191433A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::context::~context(id *this)
{
  *this = &off_1E2DAC780;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  Espresso::context_metal::~context_metal(this);
}

{
  *this = &off_1E2DAC780;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 28));
  Espresso::context_metal::~context_metal(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::MPSGraphEngine::context::create_compiler_for_network(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  const void *v10;
  void *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  const void *v15;
  void *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::runtime_error *exception;
  __int128 v39;
  unsigned int v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  __int128 v43;

  v40 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = operator new(0x100uLL);
  v4 = v3;
  v3[1] = 0;
  v3[2] = 0;
  *v3 = &off_1E2DB8028;
  v6 = (_QWORD *)*a2;
  v5 = (std::__shared_weak_count *)a2[1];
  v41 = (_QWORD *)*a2;
  v42 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v3[4] = 0;
  v3[5] = 0;
  *((_BYTE *)v3 + 48) = 0;
  v3[7] = 0;
  v3[11] = 0;
  v3[8] = 0;
  v3[9] = 0;
  v3[10] = v3 + 11;
  v3[12] = 0;
  v3[13] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[3] = &off_1E2D66DC8;
  v3[16] = 0;
  v9 = v3 + 16;
  v3[19] = 0;
  v3[22] = 0;
  v3[21] = 0;
  *((_BYTE *)v3 + 144) = 0;
  v3[24] = 0;
  v3[17] = 0;
  v3[20] = v3 + 21;
  v3[23] = v3 + 24;
  v3[27] = 0;
  v3[28] = 0;
  v3[25] = 0;
  v3[26] = v3 + 27;
  v3[30] = 0;
  v3[31] = 0;
  v3[29] = 0;
  if ((***(unsigned int (****)(_QWORD))(v6[2] + 8))(*(_QWORD *)(v6[2] + 8)) == 50005)
  {
    v10 = (const void *)v6[2];
    if (v10
    {
      v12 = v6[3];
      *(_QWORD *)&v43 = v11;
      *((_QWORD *)&v43 + 1) = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
    }
    else
    {
      v43 = 0uLL;
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v4 + 16), &v43);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      goto LABEL_26;
    }
  }
  else
  {
    v15 = (const void *)v6[157];
    if (v15
    {
      v17 = v6[158];
      *(_QWORD *)&v43 = v16;
      *((_QWORD *)&v43 + 1) = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
    }
    else
    {
      v43 = 0uLL;
    }
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)(v4 + 16), &v43);
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v43 + 1);
    if (*((_QWORD *)&v43 + 1))
    {
      v23 = (unint64_t *)(*((_QWORD *)&v43 + 1) + 8);
      do
        v22 = __ldaxr(v23);
      while (__stlxr(v22 - 1, v23));
LABEL_26:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  v25 = v41;
  v24 = v42;
  if (v42)
  {
    p_shared_weak_owners = (unint64_t *)&v42->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }
  v28 = (std::__shared_weak_count *)v4[5];
  v4[4] = v41;
  v4[5] = v24;
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  v29 = objc_opt_new();
  v30 = (void *)v4[19];
  v4[19] = v29;

  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Error creating compiler");
    goto LABEL_48;
  }
  if (!*v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
LABEL_48:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v24)
  {
    v31 = (unint64_t *)&v24->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_QWORD *)&v39 = v4 + 3;
  *((_QWORD *)&v39 + 1) = v4;
  v33 = *a2 + 528;
  *(_QWORD *)&v43 = &v40;
  v34 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v33, &v40, (uint64_t)&std::piecewise_construct, (_DWORD **)&v43);
  v35 = (std::__shared_weak_count *)v34[4];
  *(_OWORD *)(v34 + 3) = v39;
  if (v35)
  {
    v36 = (unint64_t *)&v35->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
}

void sub_191433E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  void *v21;
  std::__shared_weak_count *v22;
  void *v23;

  __cxa_free_exception(v19);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v15 + 240);
  std::unique_ptr<std::map<int,std::unique_ptr<MIL::IRProgram>>>::reset[abi:ne180100](v18, 0);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(*(char **)(v15 + 216));
  std::__tree<std::__value_type<int,std::map<std::string,BOOL>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,BOOL>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,BOOL>>>>::destroy(*(_QWORD **)(v15 + 192));
  std::__tree<std::__value_type<unsigned long,std::vector<std::string>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::vector<std::string>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::vector<std::string>>>>::destroy(*(char **)(v15 + 168));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v17);
  *(_QWORD *)(v15 + 24) = off_1E2D94680;
  v21 = *(void **)(v15 + 104);
  if (v21)
  {
    *(_QWORD *)(v15 + 112) = v21;
    operator delete(v21);
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy(v16, *(_QWORD **)(v15 + 88));
  std::vector<Espresso::net_compiler_segment_based::segment_t>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  *(_QWORD *)(v15 + 24) = off_1E2D5FD08;
  v22 = *(std::__shared_weak_count **)(v15 + 40);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v15);
  operator delete(v23);
  _Unwind_Resume(a1);
}

uint64_t Espresso::MPSBuffersEngine::context::enable_training(Espresso::MPSBuffersEngine::context *this)
{
  uint64_t result;

  result = Espresso::MPSEngine::context::enable_training(this);
  *((_BYTE *)this + 241) = 1;
  return result;
}

uint64_t Espresso::MPSGraphEngine::context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2)
{
  return (*a2 < 0xFu) & (0x50Bu >> *a2);
}

float Espresso::MPSGraphEngine::context::begin_batch@<S0>(id *this@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  float result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if (a2)
  {
    v6 = operator new(0x120uLL);
    v6[1] = 0;
    v6[2] = 0;
    *v6 = &off_1E2DC2518;
    *(_QWORD *)&v7 = Espresso::MPSEngine::batch::batch((uint64_t)(v6 + 3), (uint64_t)this, a2);
    *((_QWORD *)&v7 + 1) = v6;
    v10 = v7;

    v8 = v10;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSGraphEngine::context *,void>((Espresso::MPSEngine::batch **)&v11, this);
    v8 = v11;
  }
  *(_BYTE *)(v8 + 216) = *((_BYTE *)this + 172);
  *(_QWORD *)(v8 + 224) = this[22];
  result = *((float *)this + 42);
  *(float *)(v8 + 212) = result;
  *(_BYTE *)(v8 + 232) = *((_BYTE *)this + 184);
  *a3 = v8;
  return result;
}

void sub_191434010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

Espresso::MPSEngine::batch *std::allocate_shared[abi:ne180100]<Espresso::MPSEngine::batch,std::allocator<Espresso::MPSEngine::batch>,Espresso::MPSGraphEngine::context *,void>(Espresso::MPSEngine::batch **a1, id *a2)
{
  _QWORD *v4;
  Espresso::MPSEngine::batch *result;

  v4 = operator new(0x120uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DC2518;
  result = Espresso::MPSEngine::batch::batch((Espresso::MPSEngine::batch *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (Espresso::MPSEngine::batch *)v4;
  return result;
}

void sub_191434094(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2518;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC2518;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::compiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB8028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::compiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_DWORD *Espresso::abstract_engine::available_compute_paths@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *v3;
  _DWORD *result;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = operator new(4uLL);
  *a1 = v3;
  *v3 = 0;
  result = v3 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

__n128 Espresso::MPSGraphEngine::engine::make_abstract_blob_container@<Q0>(uint64_t *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 result;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = operator new(0x118uLL);
  v7 = (unint64_t)v6;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7538;
  v8 = v6 + 3;
  v9 = *a1;
  v10 = (std::__shared_weak_count *)a1[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v17 = v9;
    v18 = v10;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    Espresso::MPSBuffersEngine::blob_container::blob_container((uint64_t)(v6 + 3), &v17, a2);
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    *v8 = &off_1E2D628D0;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    v17 = v9;
    v18 = 0;
    Espresso::MPSBuffersEngine::blob_container::blob_container((uint64_t)(v6 + 3), &v17, a2);
    *v8 = &off_1E2D628D0;
  }
  result.n128_u64[0] = (unint64_t)v8;
  result.n128_u64[1] = v7;
  *a3 = result;
  return result;
}

__n128 Espresso::MPSGraphEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 result;

  v6 = operator new(0x110uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DB7FF0;
  v7 = Espresso::MPSEngine::context::context<int>((uint64_t)(v6 + 3), a1, a2);
  *((_WORD *)v6 + 132) = 1;
  v6[3] = &off_1E2D66D08;
  *((_BYTE *)v6 + 96) = 1;
  *((_BYTE *)v6 + 68) = 0;
  *((_BYTE *)v6 + 80) = 1;
  *((_BYTE *)v6 + 148) = 1;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191434338(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::MPSGraphEngine::engine::~engine(Espresso::MPSGraphEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_48@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::upsample_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::upsample_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::upsample_kernel_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_47@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::transpose_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::transpose_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::transpose_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_46@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::topk_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::topk_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::topk_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_45@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tile_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tile_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tile_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_44@<D0>(_QWORD *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::tensor_zero_pad_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::tensor_zero_pad_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_43@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::stack_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::stack_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_42@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::squeeze_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::squeeze_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::squeeze_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_41@<D0>(_QWORD *a1@<X1>, const void *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_nd_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_40@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::split_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::split_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::split_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_39@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::space_to_depth_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::space_to_depth_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_38@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_37@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::softmax_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::softmax_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::softmax_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_36@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_35@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::scatter_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::scatter_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_34@<D0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::rnn_arch_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::rnn_arch_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_33@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_like_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_like_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_32@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reshape_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reshape_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reshape_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_31@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::reduce_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::reduce_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::reduce_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_30@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool3d_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_29@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::pool_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::pool_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::pool_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_28@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::one_hot_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::one_hot_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::one_hot_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_27@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::lrn_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::lrn_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::lrn_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_26@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::load_random_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::load_random_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_random_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_25@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::l2_normalize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::l2_norm_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_24@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::inner_product_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::inner_product_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::inner_product_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_23@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_slice_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_slice_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_slice_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_22@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_padding_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_padding_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_padding_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_21@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::general_concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::general_concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::general_concat_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_20@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::gather_nd_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::gather_nd_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_19@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::flatten_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::flatten_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::flatten_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_18@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::fill_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::fill_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::fill_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_17@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::expand_dims_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::expand_dims_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_16@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::elementwise_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::elementwise_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::elementwise_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_15@<D0>(_QWORD *a1@<X1>, const std::string *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::einsum_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::einsum_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::einsum_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_14@<D0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::dev_op_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::dev_op_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::dev_op_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_13@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::deconvolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_12@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_and_resize_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_and_resize_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_11@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::crop_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::crop_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::crop_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_10@<D0>(_QWORD *a1@<X1>, _DWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::copy_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::copy_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::copy_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_9@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::conv3d_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::conv3d_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::conv3d_params_t const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_8@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::convolution_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::convolution_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::convolution_uniforms const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_7@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::concat_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::concat_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::concat_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_6@<D0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::cast_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::cast_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::cast_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_5@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batchnorm_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batchnorm_params const&,void>(&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::batch_matmul_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::batch_matmul_params_t const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::MPSGraphEngine::Kernels::activation_kernel,std::allocator<Espresso::MPSGraphEngine::Kernels::activation_kernel>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::activation_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<D0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_context_transfer_kernel_impl,std::allocator<Espresso::generic_context_transfer_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::context_transfer_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

double ___ZN8Espresso14MPSGraphEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<D0>(_QWORD *a1@<X1>, __n128 *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  __int128 v5;

  std::allocate_shared[abi:ne180100]<Espresso::generic_load_constant_kernel_impl,std::allocator<Espresso::generic_load_constant_kernel_impl>,std::shared_ptr<Espresso::abstract_context> const&,Espresso::compute_path &,Espresso::load_constant_params const&,void>((uint64_t *)&v5, a1, a2);
  result = *(double *)&v5;
  *a3 = v5;
  return result;
}

uint64_t Espresso::MPSBuffersEngine::blob_container::blob_container(uint64_t result, _QWORD *a2, int a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)result = off_1E2D8F108;
  *(_DWORD *)(result + 28) = -1;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_QWORD *)(result + 64) = 0;
  v3 = a2[1];
  *(_QWORD *)(result + 72) = *a2;
  *(_QWORD *)(result + 80) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = 0;
  *(_DWORD *)(result + 104) = 0;
  *(_DWORD *)(result + 112) = 1065353216;
  *(_QWORD *)(result + 116) = 0xFFFFFFFF00000000;
  *(_DWORD *)(result + 124) = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_OWORD *)(result + 128) = 0uLL;
  *(_OWORD *)(result + 144) = 0uLL;
  *(_QWORD *)result = &off_1E2D711C8;
  *(_QWORD *)(result + 248) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = 0uLL;
  *(_OWORD *)(result + 200) = 0uLL;
  *(_DWORD *)(result + 160) = a3;
  return result;
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7538;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB7538;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::MPSGraphEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void Espresso::trainer::initialize_weights(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const void *v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  float v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  const void *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  float v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t *v48;
  _QWORD v49[6];
  int v50;
  float v51;
  _QWORD v52[2];
  void *v53;
  std::__shared_weak_count *v54;
  void *v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  _QWORD v59[7];
  _QWORD v60[6];
  int v61;

  v60[0] = 0;
  v60[1] = v60;
  v60[2] = 0x3812000000;
  v60[3] = __Block_byref_object_copy__3445;
  v60[4] = __Block_byref_object_dispose__3446;
  v60[5] = "";
  v61 = 1993;
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x3812000000;
  v59[3] = __Block_byref_object_copy__17;
  v59[4] = __Block_byref_object_dispose__18;
  v59[5] = "";
  v59[6] = 0x3F80000000000000;
  v1 = *(uint64_t **)(*(_QWORD *)a1 + 32);
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 40);
  if (v1 != v2)
  {
    v3 = MEMORY[0x1E0C809B0];
    v48 = *(uint64_t **)(*(_QWORD *)a1 + 40);
    do
    {
      v5 = *v1;
      v4 = (std::__shared_weak_count *)v1[1];
      v57 = *v1;
      v58 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      v8 = *(const void **)(v5 + 64);
      if (v8)
      {
        if (v9)
        {
          v10 = *(std::__shared_weak_count **)(v5 + 72);
          v55 = v9;
          v56 = v10;
          if (v10)
          {
            v11 = (unint64_t *)&v10->__shared_owners_;
            do
              v12 = __ldxr(v11);
            while (__stxr(v12 + 1, v11));
            v8 = *(const void **)(v5 + 64);
            if (!v8)
              goto LABEL_21;
          }
          if (v13)
          {
            v14 = v13;
            v15 = *(std::__shared_weak_count **)(v5 + 72);
            v53 = v13;
            v54 = v15;
            if (v15)
            {
              v16 = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            v18 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v13 + 384))(v13) + 48);
            v19 = *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v14 + 384))(v14) + 52);
            v20 = (float)(v19 * v18 * *(_DWORD *)((*(uint64_t (**)(void *))(*(_QWORD *)v14 + 384))(v14) + 44));
            if (v15)
            {
              v21 = (unint64_t *)&v15->__shared_owners_;
              v2 = v48;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            else
            {
              v2 = v48;
            }
          }
          else
          {
LABEL_21:
            v20 = 1.0;
          }
          v23 = v57;
          v24 = *(const void **)(v57 + 64);
          if (v24)
          {
            if (v25)
            {
              v26 = *(std::__shared_weak_count **)(v23 + 72);
              v53 = v25;
              v54 = v26;
              if (v26)
              {
                v27 = (unint64_t *)&v26->__shared_owners_;
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
              v20 = (float)*(unsigned int *)((*(uint64_t (**)(void *))(*(_QWORD *)v25 + 384))(v25) + 4);
              if (v26)
              {
                v29 = (unint64_t *)&v26->__shared_owners_;
                do
                  v30 = __ldaxr(v29);
                while (__stlxr(v30 - 1, v29));
                if (!v30)
                {
                  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                  std::__shared_weak_count::__release_weak(v26);
                }
              }
            }
          }
          v31 = 0;
          v32 = sqrtf(3.0 / v20);
          while (1)
          {
            v33 = v55;
            if ((int)v31 >= (*(int (**)(void *))(*(_QWORD *)v55 + 328))(v55))
              break;
            (*(void (**)(void **__return_ptr, void *, uint64_t))(*(_QWORD *)v33 + 320))(&v53, v33, v31);
            v34 = v54;
            v52[0] = v53;
            v52[1] = v54;
            if (v54)
            {
              v35 = (unint64_t *)&v54->__shared_owners_;
              do
                v36 = __ldxr(v35);
              while (__stxr(v36 + 1, v35));
            }
            v49[0] = v3;
            v49[1] = 3221225472;
            v49[2] = ___ZN8Espresso7trainer18initialize_weightsENSt3__110shared_ptrINS_3netEEE_block_invoke;
            v49[3] = &unk_1E2DD3200;
            v50 = v31;
            v49[4] = v59;
            v49[5] = v60;
            v51 = v32;
            Espresso::sync_copy_from_host(v52, v49);
            if (v34)
            {
              v37 = (unint64_t *)&v34->__shared_owners_;
              do
                v38 = __ldaxr(v37);
              while (__stlxr(v38 - 1, v37));
              if (!v38)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v39 = v54;
            if (v54)
            {
              v40 = (unint64_t *)&v54->__shared_owners_;
              do
                v41 = __ldaxr(v40);
              while (__stlxr(v41 - 1, v40));
              if (!v41)
              {
                ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
                std::__shared_weak_count::__release_weak(v39);
              }
            }
            v31 = (v31 + 1);
          }
          v42 = v56;
          if (v56)
          {
            v43 = (unint64_t *)&v56->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
      }
      v45 = v58;
      if (v58)
      {
        v46 = (unint64_t *)&v58->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      v1 += 2;
    }
    while (v1 != v2);
  }
  _Block_object_dispose(v59, 8);
  _Block_object_dispose(v60, 8);
}

void sub_1914352C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Block_object_dispose(&a26, 8);
  _Block_object_dispose((const void *)(v26 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3445(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

uint64_t __Block_byref_object_copy__17(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  return result;
}

uint64_t ___ZN8Espresso7trainer18initialize_weightsENSt3__110shared_ptrINS_3netEEE_block_invoke(uint64_t result, uint64_t *a2)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  int v21;
  int v22;
  double v23;

  v2 = *(_DWORD *)(result + 48);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = 0;
      v4 = *a2;
      v5 = *(int *)(*a2 + 8);
      v6 = *a2 + 12;
      while (1)
      {
        v7 = 0;
        v8 = v5;
        do
        {
          v8 *= *(int *)(v6 + v7);
          v7 += 4;
        }
        while (v7 != 12);
        if (v8 <= v3)
          break;
        *(_DWORD *)(*(_QWORD *)(v4 + 24) + 4 * v3++) = 0;
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = *a2;
    v11 = *a2 + 12;
    while (1)
    {
      v12 = 0;
      v13 = *(int *)(v10 + 8);
      do
      {
        v13 *= *(int *)(v11 + v12);
        v12 += 4;
      }
      while (v12 != 12);
      if (v13 <= v9)
        break;
      v14 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
      v15 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8);
      v16 = *(float *)(v14 + 48);
      v17 = *(float *)(v14 + 52) - v16;
      LODWORD(v14) = *(_DWORD *)(v15 + 48);
      v18 = v14 / 0xADC8;
      LODWORD(v14) = 48271 * (v14 % 0xADC8);
      v18 *= 3399;
      v19 = v14 >= v18;
      v20 = v14 - v18;
      if (v19)
        v21 = 0;
      else
        v21 = 0x7FFFFFFF;
      v22 = v21 + v20;
      *(_DWORD *)(v15 + 48) = v22;
      v23 = (float)(v16 + (float)(v17 * (float)((float)(v22 - 1) * 4.6566e-10))) + -0.5;
      *(float *)&v23 = v23 * *(float *)(result + 52) + v23 * *(float *)(result + 52);
      *(_DWORD *)(*(_QWORD *)(v10 + 24) + 4 * v9++) = LODWORD(v23);
    }
  }
  return result;
}

std::string *Espresso::trainer::trainer(std::string *this, const Espresso::trainer::options *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  std::string::size_type v14;
  unint64_t *v15;
  unint64_t v16;
  std::string::size_type v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  __int128 v29;
  std::string::pointer data;
  std::__shared_weak_count *size;
  unint64_t *p_shared_owners;
  unint64_t v33;
  const std::string::value_type *v34;
  uint64_t *v35;
  std::string::size_type v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  std::string::size_type v40;
  std::string::pointer v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  std::string::size_type *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::string::size_type v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  const char *v58;
  __int128 v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  std::string::size_type v74;
  unint64_t *v75;
  unint64_t v76;
  std::string::size_type v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  std::string::size_type v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  std::string::pointer v89;
  std::string::size_type v90;
  __int128 v91;
  int64x2_t v92;
  std::string::size_type v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  char *v100;
  std::string *v101;
  char *v102;
  __int128 v103;
  _QWORD *v104;
  _QWORD *v105;
  BOOL v106;
  std::__shared_weak_count *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  __int128 v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  std::string::pointer v117;
  std::string::size_type i;
  Espresso *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t *v125;
  unint64_t v126;
  Espresso *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  int v136;
  int v137;
  std::string::pointer v138;
  std::string::size_type j;
  uint64_t *v140;
  char *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  Espresso *v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  std::__shared_weak_count *v157;
  unint64_t *v158;
  unint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  __int128 v163;
  unint64_t *v164;
  unint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  std::__shared_weak_count *v169;
  unint64_t *v170;
  unint64_t v171;
  std::string::size_type v172;
  __int128 v173;
  unint64_t *v174;
  unint64_t v175;
  std::__shared_weak_count *v176;
  unint64_t *v177;
  unint64_t v178;
  std::__shared_weak_count *v179;
  unint64_t *v180;
  unint64_t v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  __int128 v185;
  unint64_t *v186;
  unint64_t v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t *v191;
  std::__shared_weak_count *v192;
  uint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::string::size_type v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  int v206;
  unint64_t v207;
  unint64_t v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  int v212;
  char *v213;
  char *v214;
  std::string::size_type v215;
  std::__shared_weak_count *v216;
  unint64_t *v217;
  unint64_t v218;
  std::string::size_type v219;
  std::__shared_weak_count *v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t *v224;
  unint64_t v225;
  __int128 v226;
  unint64_t *v227;
  unint64_t v228;
  unint64_t *v229;
  unint64_t v230;
  __int128 v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  std::__shared_weak_count *v238;
  unint64_t *v239;
  unint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  unint64_t v245;
  std::__shared_weak_count *v246;
  unint64_t *v247;
  unint64_t v248;
  std::__shared_weak_count *v250;
  unint64_t *v251;
  unint64_t v252;
  size_t v253;
  std::string *p_str;
  char *v255;
  unint64_t *v256;
  unint64_t v257;
  const char *v258;
  std::runtime_error *exception;
  std::runtime_error *v260;
  std::string *v261;
  std::string::size_type *p_size;
  std::string *v263;
  std::string::size_type *v264;
  void *v265[2];
  char v266;
  void *v267[2];
  char v268;
  std::string __str;
  uint64_t v270[2];
  __int128 v271;
  _BYTE v272[32];
  std::__shared_weak_count *v273;
  void *__p;
  _BYTE *v275;
  uint64_t v276;
  void *v277[2];
  char v278;
  __int128 v279;
  void *v280[2];
  char v281;
  __int128 v282;
  std::string v283;
  __int128 v284;
  uint64_t *v285;
  char *v286;
  uint64_t v287[4];
  uint64_t v288[2];
  std::string *v289;
  uint64_t v290;
  char v291;
  char *v292[3];
  Espresso *v293;
  uint64_t v294;
  __int128 v295;
  uint64_t v296[2];
  std::string v297;
  char v298[8];
  char *v299;
  char **v300;
  char *v301[2];
  __int128 v302;
  __int128 v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  __int128 v306;
  int v307;
  void *v308;
  char v309;
  void *v310;
  char v311;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 7);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[2] = v8;
  }
  v9 = *((_OWORD *)a2 + 4);
  v10 = *((_OWORD *)a2 + 6);
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[1] = *((_OWORD *)a2 + 5);
  *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v10;
  *(_OWORD *)&this[2].__r_.__value_.__r.__words[2] = v9;
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 112), *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v11 = *((_OWORD *)a2 + 7);
    this[5].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 16);
    *(_OWORD *)&this[4].__r_.__value_.__r.__words[2] = v11;
  }
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v12 = *(_OWORD *)((char *)a2 + 136);
    this[6].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 19);
    *(_OWORD *)&this[5].__r_.__value_.__r.__words[2] = v12;
  }
  if (*((char *)a2 + 183) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 160), *((const std::string::value_type **)a2 + 20), *((_QWORD *)a2 + 21));
  }
  else
  {
    v13 = *((_OWORD *)a2 + 10);
    this[7].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 22);
    *(_OWORD *)&this[6].__r_.__value_.__r.__words[2] = v13;
  }
  this[7].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 23);
  v14 = *((_QWORD *)a2 + 24);
  this[8].__r_.__value_.__r.__words[0] = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  this[8].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 25);
  v17 = *((_QWORD *)a2 + 26);
  this[8].__r_.__value_.__r.__words[2] = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (*((char *)a2 + 239) < 0)
  {
    std::string::__init_copy_ctor_external(this + 9, *((const std::string::value_type **)a2 + 27), *((_QWORD *)a2 + 28));
  }
  else
  {
    v20 = *(_OWORD *)((char *)a2 + 216);
    this[9].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 29);
    *(_OWORD *)&this[9].__r_.__value_.__l.__data_ = v20;
  }
  v21 = *((_OWORD *)a2 + 15);
  LODWORD(this[10].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 64);
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = v21;
  v22 = this + 11;
  this[11].__r_.__value_.__l.__size_ = 0;
  this[11].__r_.__value_.__r.__words[2] = 0;
  this[11].__r_.__value_.__r.__words[0] = 0;
  std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>((char *)&this[11], *((_QWORD **)a2 + 33), *((_QWORD **)a2 + 34), (uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 4);
  v23 = *((_QWORD *)a2 + 36);
  LODWORD(this[12].__r_.__value_.__r.__words[1]) = *((_DWORD *)a2 + 74);
  this[12].__r_.__value_.__r.__words[0] = v23;
  v24 = (std::string *)((char *)this + 304);
  if (*((char *)a2 + 327) < 0)
  {
    std::string::__init_copy_ctor_external(v24, *((const std::string::value_type **)a2 + 38), *((_QWORD *)a2 + 39));
    v24 = (std::string *)((char *)this + 304);
  }
  else
  {
    v25 = *((_OWORD *)a2 + 19);
    this[13].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 40);
    *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
  }
  v261 = v24;
  if (*((char *)a2 + 351) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 328), *((const std::string::value_type **)a2 + 41), *((_QWORD *)a2 + 42));
  }
  else
  {
    v26 = *(_OWORD *)((char *)a2 + 328);
    this[14].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 43);
    *(_OWORD *)&this[13].__r_.__value_.__r.__words[2] = v26;
  }
  v27 = (std::string *)((char *)this + 352);
  if (*((char *)a2 + 375) < 0)
  {
    std::string::__init_copy_ctor_external(v27, *((const std::string::value_type **)a2 + 44), *((_QWORD *)a2 + 45));
  }
  else
  {
    v28 = *((_OWORD *)a2 + 22);
    this[15].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 46);
    *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
  }
  *(_OWORD *)&this[21].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[22].__r_.__value_.__r.__words[1] = 0u;
  p_size = &this[18].__r_.__value_.__l.__size_;
  v263 = this + 19;
  v264 = &this[20].__r_.__value_.__r.__words[2];
  *(_OWORD *)&this[20].__r_.__value_.__r.__words[1] = 0u;
  *(_OWORD *)&this[21].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[19].__r_.__value_.__l.__data_ = 0u;
  *(_OWORD *)&this[19].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[17].__r_.__value_.__r.__words[2] = 0u;
  *(_OWORD *)&this[18].__r_.__value_.__r.__words[1] = 0u;
  v29 = *(_OWORD *)&this[3].__r_.__value_.__r.__words[1];
  *(_OWORD *)&this[15].__r_.__value_.__r.__words[2] = *(_OWORD *)&this[2].__r_.__value_.__r.__words[2];
  *(_OWORD *)&this[16].__r_.__value_.__r.__words[1] = v29;
  *(_OWORD *)&this[17].__r_.__value_.__l.__data_ = *(_OWORD *)&this[4].__r_.__value_.__l.__data_;
  v306 = 0x100uLL;
  v307 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v308, "data");
  std::string::basic_string[abi:ne180100]<0>(&v310, "labels");
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&this[20].__r_.__value_.__r.__words[2], this[7].__r_.__value_.__r.__words[2], (uint64_t)this[8].__r_.__value_.__l.__data_);
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&this[21].__r_.__value_.__l.__size_, this[8].__r_.__value_.__l.__size_, this[8].__r_.__value_.__r.__words[2]);
  *(_DWORD *)v272 = HIDWORD(this[10].__r_.__value_.__r.__words[0]);
  Espresso::create_context((int *)v272, &v304);
  if (!this[10].__r_.__value_.__s.__data_[12])
    *(_BYTE *)(v304 + 44) = 0;
  data = this[1].__r_.__value_.__l.__data_;
  size = (std::__shared_weak_count *)this[1].__r_.__value_.__l.__size_;
  *(_QWORD *)&v303 = data;
  *((_QWORD *)&v303 + 1) = size;
  if (size)
  {
    p_shared_owners = (unint64_t *)&size->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  if (!data)
  {
    if (*((char *)a2 + 23) >= 0)
      v58 = (const char *)a2;
    else
      v58 = *(const char **)a2;
    printf("Loading network '%s'\n", v58);
    Espresso::load_network((uint64_t)a2, &v304, this[10].__r_.__value_.__r.__words[1], 0, (uint64_t *)v272);
    v59 = *(_OWORD *)v272;
    *(_OWORD *)v272 = 0uLL;
    v303 = v59;
    if (size)
    {
      v60 = (unint64_t *)&size->__shared_owners_;
      do
        v61 = __ldaxr(v60);
      while (__stlxr(v61 - 1, v60));
      if (!v61)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v62 = *(std::__shared_weak_count **)&v272[8];
    if (*(_QWORD *)&v272[8])
    {
      v63 = (unint64_t *)(*(_QWORD *)&v272[8] + 8);
      do
        v64 = __ldaxr(v63);
      while (__stlxr(v64 - 1, v63));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
  }
  if (*((char *)a2 + 23) >= 0)
    v34 = (const std::string::value_type *)a2;
  else
    v34 = *(const std::string::value_type **)a2;
  NSLog(CFSTR("[trainer::trainer] Loading network %s pl=%d cp=%d"), v34, HIDWORD(this[10].__r_.__value_.__r.__words[0]), LODWORD(this[10].__r_.__value_.__r.__words[1]));
  if (this[12].__r_.__value_.__s.__data_[0] && !this[10].__r_.__value_.__s.__data_[12])
  {
    v67 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
    v302 = v303;
    if (*((_QWORD *)&v303 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    Espresso::trainer::initialize_weights((uint64_t)&v302);
    if (v67)
    {
      v70 = (unint64_t *)&v67->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
        std::__shared_weak_count::__release_weak(v67);
      }
    }
  }
  if (!(_QWORD)v303)
  {
    if (*((char *)a2 + 23) >= 0)
      v258 = (const char *)a2;
    else
      v258 = *(const char **)a2;
    printf("Can't load network: %s\n", v258);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, (const std::string *)v272);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (SHIDWORD(this[16].__r_.__value_.__r.__words[1]) <= 0)
    HIDWORD(this[16].__r_.__value_.__r.__words[1]) = *(_DWORD *)(**(_QWORD **)(**(_QWORD **)(v303 + 32) + 80) + 20);
  v35 = (uint64_t *)this[11].__r_.__value_.__l.__data_;
  v36 = this[11].__r_.__value_.__l.__size_;
  v37 = (uint64_t)(v36 - (_QWORD)v35) >> 4;
  v38 = this[19].__r_.__value_.__r.__words[2];
  v39 = (uint64_t *)this[19].__r_.__value_.__l.__data_;
  if (v37 <= (v38 - (uint64_t)v39) >> 4)
  {
    v49 = this[19].__r_.__value_.__l.__size_;
    v50 = (uint64_t)(v49 - (_QWORD)v39) >> 4;
    if (v50 >= v37)
    {
      if (v35 != (uint64_t *)v36)
      {
        do
        {
          v65 = *v35;
          v66 = v35[1];
          v35 += 2;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v39, v65, v66);
          v39 += 2;
        }
        while (v35 != (uint64_t *)v36);
        v49 = this[19].__r_.__value_.__l.__size_;
      }
      while ((uint64_t *)v49 != v39)
        v49 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v49 - 16);
      this[19].__r_.__value_.__l.__size_ = (std::string::size_type)v39;
    }
    else
    {
      v51 = &v35[2 * v50];
      if ((uint64_t *)v49 != v39)
      {
        do
        {
          v52 = *v35;
          v53 = v35[1];
          v35 += 2;
          std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](v39, v52, v53);
          v39 += 2;
        }
        while (v35 != v51);
        v39 = (uint64_t *)this[19].__r_.__value_.__l.__size_;
      }
      v54 = v39;
      if (v51 != (uint64_t *)v36)
      {
        v54 = v39;
        do
        {
          *v54 = *v51;
          v55 = v51[1];
          v54[1] = v55;
          if (v55)
          {
            v56 = (unint64_t *)(v55 + 8);
            do
              v57 = __ldxr(v56);
            while (__stxr(v57 + 1, v56));
          }
          v51 += 2;
          v54 += 2;
        }
        while (v51 != (uint64_t *)v36);
      }
      this[19].__r_.__value_.__l.__size_ = (std::string::size_type)v54;
    }
    v45 = &this[21].__r_.__value_.__l.__size_;
  }
  else
  {
    if (v39)
    {
      v40 = this[19].__r_.__value_.__l.__size_;
      v41 = this[19].__r_.__value_.__l.__data_;
      if ((uint64_t *)v40 != v39)
      {
        do
          v40 = std::shared_ptr<void>::~shared_ptr[abi:ne180100](v40 - 16);
        while ((uint64_t *)v40 != v39);
        v41 = (std::string::pointer)v263->__r_.__value_.__r.__words[0];
      }
      this[19].__r_.__value_.__l.__size_ = (std::string::size_type)v39;
      operator delete(v41);
      v38 = 0;
      v263->__r_.__value_.__r.__words[0] = 0;
      this[19].__r_.__value_.__l.__size_ = 0;
      this[19].__r_.__value_.__r.__words[2] = 0;
    }
    if (((v36 - (_QWORD)v35) & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v42 = v38 >> 3;
    if (v38 >> 3 <= v37)
      v42 = (uint64_t)(v36 - (_QWORD)v35) >> 4;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
      v43 = 0xFFFFFFFFFFFFFFFLL;
    else
      v43 = v42;
    std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__vallocate[abi:ne180100](v263, v43);
    v44 = (_QWORD *)this[19].__r_.__value_.__l.__size_;
    if (v35 == (uint64_t *)v36)
    {
      v45 = &this[21].__r_.__value_.__l.__size_;
    }
    else
    {
      v45 = &this[21].__r_.__value_.__l.__size_;
      do
      {
        *v44 = *v35;
        v46 = v35[1];
        v44[1] = v46;
        if (v46)
        {
          v47 = (unint64_t *)(v46 + 8);
          do
            v48 = __ldxr(v47);
          while (__stxr(v48 + 1, v47));
        }
        v35 += 2;
        v44 += 2;
      }
      while (v35 != (uint64_t *)v36);
    }
    this[19].__r_.__value_.__l.__size_ = (std::string::size_type)v44;
  }
  if (this[2].__r_.__value_.__s.__data_[15] < 0)
  {
    if (!this[2].__r_.__value_.__r.__words[0])
      goto LABEL_140;
  }
  else if (!this[2].__r_.__value_.__s.__data_[15])
  {
    goto LABEL_140;
  }
  Espresso::load_network((uint64_t)&this[1].__r_.__value_.__r.__words[2], &v304, this[10].__r_.__value_.__r.__words[1], 0, (uint64_t *)&v297);
  v72 = (_QWORD *)this[11].__r_.__value_.__l.__size_;
  v73 = this[11].__r_.__value_.__r.__words[2];
  if ((unint64_t)v72 >= v73)
  {
    v78 = (uint64_t)((uint64_t)v72 - v22->__r_.__value_.__r.__words[0]) >> 4;
    v79 = v78 + 1;
    if ((unint64_t)(v78 + 1) >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v80 = v73 - v22->__r_.__value_.__r.__words[0];
    if (v80 >> 3 > v79)
      v79 = v80 >> 3;
    if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0)
      v81 = 0xFFFFFFFFFFFFFFFLL;
    else
      v81 = v79;
    v273 = (std::__shared_weak_count *)&this[11].__r_.__value_.__r.__words[2];
    v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<Espresso::abstract_blob_container>>>(v81);
    v84 = &v82[16 * v78];
    v85 = v297.__r_.__value_.__l.__size_;
    *(_OWORD *)v84 = *(_OWORD *)&v297.__r_.__value_.__l.__data_;
    if (v85)
    {
      v86 = (unint64_t *)(v85 + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v89 = this[11].__r_.__value_.__l.__data_;
    v88 = (_QWORD *)this[11].__r_.__value_.__l.__size_;
    if (v88 == (_QWORD *)v89)
    {
      v92 = vdupq_n_s64((unint64_t)v88);
      v90 = (std::string::size_type)&v82[16 * v78];
    }
    else
    {
      v90 = (std::string::size_type)&v82[16 * v78];
      do
      {
        v91 = *((_OWORD *)v88 - 1);
        v88 -= 2;
        *(_OWORD *)(v90 - 16) = v91;
        v90 -= 16;
        *v88 = 0;
        v88[1] = 0;
      }
      while (v88 != (_QWORD *)v89);
      v92 = *(int64x2_t *)&v22->__r_.__value_.__l.__data_;
    }
    v77 = (std::string::size_type)(v84 + 16);
    this[11].__r_.__value_.__r.__words[0] = v90;
    this[11].__r_.__value_.__l.__size_ = (std::string::size_type)(v84 + 16);
    *(int64x2_t *)&v272[8] = v92;
    v93 = this[11].__r_.__value_.__r.__words[2];
    this[11].__r_.__value_.__r.__words[2] = (std::string::size_type)&v82[16 * v83];
    *(_QWORD *)&v272[24] = v93;
    *(_QWORD *)v272 = v92.i64[0];
    std::__split_buffer<std::shared_ptr<Espresso::abstract_blob_container>>::~__split_buffer((uint64_t)v272);
  }
  else
  {
    *v72 = v297.__r_.__value_.__r.__words[0];
    v74 = v297.__r_.__value_.__l.__size_;
    v72[1] = v297.__r_.__value_.__l.__size_;
    if (v74)
    {
      v75 = (unint64_t *)(v74 + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    v77 = (std::string::size_type)(v72 + 2);
  }
  this[11].__r_.__value_.__l.__size_ = v77;
  v94 = (std::__shared_weak_count *)v297.__r_.__value_.__l.__size_;
  if (v297.__r_.__value_.__l.__size_)
  {
    v95 = (unint64_t *)(v297.__r_.__value_.__l.__size_ + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
LABEL_140:
  if (!this[10].__r_.__value_.__s.__data_[12] && !*v264)
  {
    std::allocate_shared[abi:ne180100]<Espresso::multikey_data_source,std::allocator<Espresso::multikey_data_source>,Espresso::async_data_source::options &,std::string &,void>(v272, &v306, (uint64_t)&this[4].__r_.__value_.__r.__words[2]);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v264, (__int128 *)v272);
    v209 = *(std::__shared_weak_count **)&v272[8];
    if (*(_QWORD *)&v272[8])
    {
      v210 = (unint64_t *)(*(_QWORD *)&v272[8] + 8);
      do
        v211 = __ldaxr(v210);
      while (__stlxr(v211 - 1, v210));
      if (!v211)
      {
        ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
        std::__shared_weak_count::__release_weak(v209);
      }
    }
  }
  if (!*v45)
  {
    std::allocate_shared[abi:ne180100]<Espresso::multikey_data_source,std::allocator<Espresso::multikey_data_source>,Espresso::async_data_source::options &,std::string &,void>(v272, &v306, (uint64_t)&this[5].__r_.__value_.__r.__words[2]);
    std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)v45, (__int128 *)v272);
    v160 = *(std::__shared_weak_count **)&v272[8];
    if (*(_QWORD *)&v272[8])
    {
      v161 = (unint64_t *)(*(_QWORD *)&v272[8] + 8);
      do
        v162 = __ldaxr(v161);
      while (__stlxr(v162 - 1, v161));
      if (!v162)
      {
        ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
        std::__shared_weak_count::__release_weak(v160);
      }
    }
  }
  v97 = v303;
  if (HIDWORD(this[16].__r_.__value_.__r.__words[1]) != *(_DWORD *)(**(_QWORD **)(**(_QWORD **)(v303 + 32) + 80)
                                                                   + 20))
  {
    v301[0] = 0;
    v301[1] = 0;
    v300 = v301;
    v98 = *(_QWORD **)(v303 + 232);
    v99 = (_QWORD *)(v303 + 240);
    if (v98 != (_QWORD *)(v303 + 240))
    {
      do
      {
        if (*((char *)v98 + 55) < 0)
          std::string::__init_copy_ctor_external(&v297, (const std::string::value_type *)v98[4], v98[5]);
        else
          v297 = *(std::string *)(v98 + 4);
        v298[0] = *((_BYTE *)v98 + 56);
        v289 = &v297;
        v100 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v97 + 136, (unsigned __int8 *)&v297, (__int128 **)&v289);
        Espresso::abstract_blob_container::shape(v272, *((_QWORD *)v100 + 5));
        if ((v297.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v101 = &v297;
        else
          v101 = (std::string *)v297.__r_.__value_.__r.__words[0];
        NSLog(CFSTR("[trainer::trainer input] %s %d %d %d (%d -> %d)"), v101, *(unsigned int *)v272, *(unsigned int *)&v272[4], *(unsigned int *)&v272[8], *(unsigned int *)&v272[12], HIDWORD(this[16].__r_.__value_.__r.__words[1]));
        *(_DWORD *)&v272[12] = HIDWORD(this[16].__r_.__value_.__r.__words[1]);
        v289 = &v297;
        v102 = std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v300, &v297, (__int128 **)&v289);
        v103 = *(_OWORD *)&v272[16];
        *(_OWORD *)(v102 + 56) = *(_OWORD *)v272;
        *(_OWORD *)(v102 + 72) = v103;
        *((_QWORD *)v102 + 11) = v273;
        if (v102 + 56 != v272)
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v102 + 96, (char *)__p, (uint64_t)v275, (v275 - (_BYTE *)__p) >> 2);
        if (__p)
        {
          v275 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v297.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v297.__r_.__value_.__l.__data_);
        v104 = (_QWORD *)v98[1];
        if (v104)
        {
          do
          {
            v105 = v104;
            v104 = (_QWORD *)*v104;
          }
          while (v104);
        }
        else
        {
          do
          {
            v105 = (_QWORD *)v98[2];
            v106 = *v105 == (_QWORD)v98;
            v98 = v105;
          }
          while (!v106);
        }
        v98 = v105;
      }
      while (v105 != v99);
    }
    v107 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
    v296[0] = v97;
    v296[1] = *((_QWORD *)&v303 + 1);
    if (*((_QWORD *)&v303 + 1))
    {
      v108 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
      do
        v109 = __ldxr(v108);
      while (__stxr(v109 + 1, v108));
    }
    Espresso::compute_network_shape_starting_from_data_shapes(v296, (uint64_t)&v300, (uint64_t)&v297);
    if (v107)
    {
      v110 = (unint64_t *)&v107->__shared_owners_;
      do
        v111 = __ldaxr(v110);
      while (__stlxr(v111 - 1, v110));
      if (!v111)
      {
        ((void (*)(std::__shared_weak_count *))v107->__on_zero_shared)(v107);
        std::__shared_weak_count::__release_weak(v107);
      }
    }
    v112 = v303;
    v295 = v303;
    if (*((_QWORD *)&v303 + 1))
    {
      v113 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
      do
        v114 = __ldxr(v113);
      while (__stxr(v114 + 1, v113));
    }
    Espresso::shape_network_recursive((Espresso *)v112, (Espresso::net *)&v297, 0, 0);
    if (*((_QWORD *)&v112 + 1))
    {
      v115 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
      do
        v116 = __ldaxr(v115);
      while (__stlxr(v116 - 1, v115));
      if (!v116)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v112 + 1) + 16))(*((_QWORD *)&v112 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v112 + 1));
      }
    }
    v117 = this[19].__r_.__value_.__l.__data_;
    for (i = this[19].__r_.__value_.__l.__size_; v117 != (std::string::pointer)i; v117 += 16)
    {
      v119 = *(Espresso **)v117;
      v120 = (std::__shared_weak_count *)*((_QWORD *)v117 + 1);
      v293 = *(Espresso **)v117;
      v294 = (uint64_t)v120;
      if (v120)
      {
        v121 = (unint64_t *)&v120->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      Espresso::abstract_blob_container::shape(v272, **(_QWORD **)(**((_QWORD **)v119 + 4) + 80));
      *(_DWORD *)&v272[12] = HIDWORD(this[16].__r_.__value_.__r.__words[1]);
      v288[0] = (uint64_t)v119;
      v288[1] = (uint64_t)v120;
      if (v120)
      {
        v123 = (unint64_t *)&v120->__shared_owners_;
        do
          v124 = __ldxr(v123);
        while (__stxr(v124 + 1, v123));
      }
      Espresso::compute_network_shape_starting_from_data_shape(v288, (__int128 *)v272, (uint64_t)&v289);
      if (v120)
      {
        v125 = (unint64_t *)&v120->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
          std::__shared_weak_count::__release_weak(v120);
        }
      }
      v127 = v293;
      v128 = (std::__shared_weak_count *)v294;
      v287[2] = (uint64_t)v293;
      v287[3] = v294;
      if (v294)
      {
        v129 = (unint64_t *)(v294 + 8);
        do
          v130 = __ldxr(v129);
        while (__stxr(v130 + 1, v129));
      }
      Espresso::shape_network_recursive(v127, (Espresso::net *)&v289, 0, 0);
      if (v128)
      {
        v131 = (unint64_t *)&v128->__shared_owners_;
        do
          v132 = __ldaxr(v131);
        while (__stlxr(v132 - 1, v131));
        if (!v132)
        {
          ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
          std::__shared_weak_count::__release_weak(v128);
        }
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v292, v292[1]);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v289, (char *)v290);
      if (__p)
      {
        v275 = __p;
        operator delete(__p);
      }
      v133 = (std::__shared_weak_count *)v294;
      if (v294)
      {
        v134 = (unint64_t *)(v294 + 8);
        do
          v135 = __ldaxr(v134);
        while (__stlxr(v135 - 1, v134));
        if (!v135)
        {
          ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
          std::__shared_weak_count::__release_weak(v133);
        }
      }
    }
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v298, v299);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v297, (char *)v297.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v300, v301[0]);
  }
  v136 = HIDWORD(this[12].__r_.__value_.__r.__words[0]);
  v137 = this[10].__r_.__value_.__s.__data_[12];
  if (v136)
  {
    if (!this[10].__r_.__value_.__s.__data_[12])
    {
      v260 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v260, "Invalid option");
      __cxa_throw(v260, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v291 = 0;
    HIDWORD(v289) = v136;
    LODWORD(v289) = this[12].__r_.__value_.__r.__words[1];
    v290 = 0x2000007C9;
    v138 = this[19].__r_.__value_.__l.__data_;
    for (j = this[19].__r_.__value_.__l.__size_; v138 != (std::string::pointer)j; v138 += 16)
    {
      v140 = *(uint64_t **)v138;
      v141 = (char *)*((_QWORD *)v138 + 1);
      v300 = *(char ***)v138;
      v301[0] = v141;
      if (v141)
      {
        v142 = (unint64_t *)(v141 + 8);
        do
          v143 = __ldxr(v142);
        while (__stxr(v143 + 1, v142));
      }
      Espresso::abstract_blob_container::shape(v272, **(_QWORD **)(*(_QWORD *)v140[4] + 80));
      *(_DWORD *)&v272[12] = HIDWORD(v289) * HIDWORD(this[16].__r_.__value_.__r.__words[1]);
      v287[0] = (uint64_t)v140;
      v287[1] = (uint64_t)v141;
      if (v141)
      {
        v144 = (unint64_t *)(v141 + 8);
        do
          v145 = __ldxr(v144);
        while (__stxr(v145 + 1, v144));
      }
      Espresso::compute_network_shape_starting_from_data_shape(v287, (__int128 *)v272, (uint64_t)&v297);
      if (v141)
      {
        v146 = (unint64_t *)(v141 + 8);
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 - 1, v146));
        if (!v147)
        {
          (*(void (**)(char *))(*(_QWORD *)v141 + 16))(v141);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v141);
        }
      }
      v148 = (Espresso *)v300;
      v149 = (std::__shared_weak_count *)v301[0];
      v285 = (uint64_t *)v300;
      v286 = v301[0];
      if (v301[0])
      {
        v150 = (unint64_t *)(v301[0] + 8);
        do
          v151 = __ldxr(v150);
        while (__stxr(v151 + 1, v150));
      }
      Espresso::shape_network_recursive(v148, (Espresso::net *)&v297, 0, 0);
      if (v149)
      {
        v152 = (unint64_t *)&v149->__shared_owners_;
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
        if (!v153)
        {
          ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
          std::__shared_weak_count::__release_weak(v149);
        }
      }
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)v298, v299);
      std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy((uint64_t)&v297, (char *)v297.__r_.__value_.__l.__size_);
      if (__p)
      {
        v275 = __p;
        operator delete(__p);
      }
      v154 = (std::__shared_weak_count *)v301[0];
      if (v301[0])
      {
        v155 = (unint64_t *)(v301[0] + 8);
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (!v156)
        {
          ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
          std::__shared_weak_count::__release_weak(v154);
        }
      }
    }
    v157 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
    v284 = v303;
    if (*((_QWORD *)&v303 + 1))
    {
      v158 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
      do
        v159 = __ldxr(v158);
      while (__stxr(v159 + 1, v158));
    }
    if (this[13].__r_.__value_.__s.__data_[15] < 0)
      std::string::__init_copy_ctor_external(&v283, (const std::string::value_type *)this[12].__r_.__value_.__r.__words[2], this[13].__r_.__value_.__r.__words[0]);
    else
      v283 = *v261;
    Espresso::add_dropout_augment_layer(&v284, (uint64_t)&v289, (uint64_t)&v283, v272);
    v163 = *(_OWORD *)v272;
    *(_OWORD *)v272 = 0uLL;
    v303 = v163;
    if (v157)
    {
      v164 = (unint64_t *)&v157->__shared_owners_;
      do
        v165 = __ldaxr(v164);
      while (__stlxr(v165 - 1, v164));
      if (!v165)
      {
        ((void (*)(std::__shared_weak_count *))v157->__on_zero_shared)(v157);
        std::__shared_weak_count::__release_weak(v157);
      }
    }
    v166 = *(std::__shared_weak_count **)&v272[8];
    if (*(_QWORD *)&v272[8])
    {
      v167 = (unint64_t *)(*(_QWORD *)&v272[8] + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    if (SHIBYTE(v283.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v283.__r_.__value_.__l.__data_);
    v169 = (std::__shared_weak_count *)*((_QWORD *)&v284 + 1);
    if (*((_QWORD *)&v284 + 1))
    {
      v170 = (unint64_t *)(*((_QWORD *)&v284 + 1) + 8);
      do
        v171 = __ldaxr(v170);
      while (__stlxr(v171 - 1, v170));
      if (!v171)
      {
        ((void (*)(std::__shared_weak_count *))v169->__on_zero_shared)(v169);
        std::__shared_weak_count::__release_weak(v169);
      }
    }
    v172 = this[19].__r_.__value_.__l.__size_;
    if (v172 == this[19].__r_.__value_.__r.__words[0])
    {
      v182 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
      v282 = v303;
      if (*((_QWORD *)&v303 + 1))
      {
        v183 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
        do
          v184 = __ldxr(v183);
        while (__stxr(v184 + 1, v183));
      }
      std::string::basic_string[abi:ne180100]<0>(v280, "");
      Espresso::add_dropout_augment_join_layer(&v282, (uint64_t)&v289, (uint64_t)v280, v272);
      v185 = *(_OWORD *)v272;
      *(_OWORD *)v272 = 0uLL;
      v303 = v185;
      if (v182)
      {
        v186 = (unint64_t *)&v182->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (!v187)
        {
          ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
          std::__shared_weak_count::__release_weak(v182);
        }
      }
      v188 = *(std::__shared_weak_count **)&v272[8];
      if (*(_QWORD *)&v272[8])
      {
        v189 = (unint64_t *)(*(_QWORD *)&v272[8] + 8);
        do
          v190 = __ldaxr(v189);
        while (__stlxr(v190 - 1, v189));
        if (!v190)
        {
          ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
          std::__shared_weak_count::__release_weak(v188);
        }
      }
      if (v281 < 0)
        operator delete(v280[0]);
      v179 = (std::__shared_weak_count *)*((_QWORD *)&v282 + 1);
      if (!*((_QWORD *)&v282 + 1))
        goto LABEL_301;
      v191 = (unint64_t *)(*((_QWORD *)&v282 + 1) + 8);
      do
        v181 = __ldaxr(v191);
      while (__stlxr(v181 - 1, v191));
    }
    else
    {
      v173 = *(_OWORD *)(v172 - 16);
      v279 = v173;
      if (*((_QWORD *)&v173 + 1))
      {
        v174 = (unint64_t *)(*((_QWORD *)&v173 + 1) + 8);
        do
          v175 = __ldxr(v174);
        while (__stxr(v175 + 1, v174));
      }
      std::string::basic_string[abi:ne180100]<0>(v277, "");
      Espresso::add_dropout_augment_join_layer(&v279, (uint64_t)&v289, (uint64_t)v277, v272);
      std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100](this[19].__r_.__value_.__l.__size_ - 16, (__int128 *)v272);
      v176 = *(std::__shared_weak_count **)&v272[8];
      if (*(_QWORD *)&v272[8])
      {
        v177 = (unint64_t *)(*(_QWORD *)&v272[8] + 8);
        do
          v178 = __ldaxr(v177);
        while (__stlxr(v178 - 1, v177));
        if (!v178)
        {
          ((void (*)(std::__shared_weak_count *))v176->__on_zero_shared)(v176);
          std::__shared_weak_count::__release_weak(v176);
        }
      }
      if (v278 < 0)
        operator delete(v277[0]);
      v179 = (std::__shared_weak_count *)*((_QWORD *)&v279 + 1);
      if (!*((_QWORD *)&v279 + 1))
        goto LABEL_301;
      v180 = (unint64_t *)(*((_QWORD *)&v279 + 1) + 8);
      do
        v181 = __ldaxr(v180);
      while (__stlxr(v181 - 1, v180));
    }
    if (!v181)
    {
      ((void (*)(std::__shared_weak_count *))v179->__on_zero_shared)(v179);
      std::__shared_weak_count::__release_weak(v179);
    }
LABEL_301:
    v137 = this[10].__r_.__value_.__s.__data_[12];
  }
  if (v137)
  {
    v192 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
    v193 = v303;
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](&this[17].__r_.__value_.__r.__words[2], v303, *((uint64_t *)&v303 + 1));
    std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](p_size, v193, (uint64_t)v192);
    if (!v192)
      goto LABEL_384;
    goto LABEL_380;
  }
  LOBYTE(v289) = 1;
  v194 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
  v271 = v303;
  if (*((_QWORD *)&v303 + 1))
  {
    v195 = (unint64_t *)(*((_QWORD *)&v303 + 1) + 8);
    do
      v196 = __ldxr(v195);
    while (__stxr(v196 + 1, v195));
  }
  Espresso::gradient_builder::gradient_builder((uint64_t)v272, &v271, (char *)&v289);
  if (v194)
  {
    v197 = (unint64_t *)&v194->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
      std::__shared_weak_count::__release_weak(v194);
    }
  }
  Espresso::gradient_builder::build_gradient((Espresso::gradient_builder *)v272, (Espresso::net **)&v297);
  std::shared_ptr<Espresso::blob<unsigned short,4>>::operator=[abi:ne180100]((uint64_t)&this[17].__r_.__value_.__r.__words[2], (__int128 *)&v297);
  v199 = (std::__shared_weak_count *)v297.__r_.__value_.__l.__size_;
  if (v297.__r_.__value_.__l.__size_)
  {
    v200 = (unint64_t *)(v297.__r_.__value_.__l.__size_ + 8);
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](p_size, *(uint64_t *)v272, *(uint64_t *)&v272[8]);
  if (LODWORD(this[10].__r_.__value_.__r.__words[1]) || HIDWORD(this[10].__r_.__value_.__r.__words[0]))
  {
    NSLog(CFSTR("disabled DUMPING Ffor fp16 %s %d"), "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/EspressoTrain/EspressoTrain/EspressoTrain.mm", 207);
  }
  else
  {
    v250 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
    v270[0] = this[17].__r_.__value_.__r.__words[2];
    v270[1] = (uint64_t)v250;
    if (v250)
    {
      v251 = (unint64_t *)&v250->__shared_owners_;
      do
        v252 = __ldxr(v251);
      while (__stxr(v252 + 1, v251));
    }
    if (*((char *)a2 + 239) >= 0)
      v253 = *((unsigned __int8 *)a2 + 239);
    else
      v253 = *((_QWORD *)a2 + 28);
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v253 + 16);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v253)
    {
      if (*((char *)a2 + 239) >= 0)
        v255 = (char *)a2 + 216;
      else
        v255 = (char *)*((_QWORD *)a2 + 27);
      memmove(p_str, v255, v253);
    }
    strcpy((char *)p_str + v253, "bwd.espresso.net");
    std::string::basic_string[abi:ne180100]<0>(v267, "");
    std::string::basic_string[abi:ne180100]<0>(v265, "");
    Espresso::dump_network(v270, &__str, (uint64_t)v267, (uint64_t)v265);
    if (v266 < 0)
      operator delete(v265[0]);
    if (v268 < 0)
      operator delete(v267[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    if (v250)
    {
      v256 = (unint64_t *)&v250->__shared_owners_;
      do
        v257 = __ldaxr(v256);
      while (__stlxr(v257 - 1, v256));
      if (!v257)
      {
        ((void (*)(std::__shared_weak_count *))v250->__on_zero_shared)(v250);
        std::__shared_weak_count::__release_weak(v250);
      }
    }
  }
  v202 = this[17].__r_.__value_.__r.__words[2];
  v203 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
  if (v203)
  {
    v204 = (unint64_t *)&v203->__shared_owners_;
    do
      v205 = __ldxr(v204);
    while (__stxr(v205 + 1, v204));
    v206 = (int)this[16].__r_.__value_.__l.__data_;
    v297.__r_.__value_.__r.__words[0] = v202;
    v297.__r_.__value_.__l.__size_ = (std::string::size_type)v203;
    do
      v207 = __ldxr(v204);
    while (__stxr(v207 + 1, v204));
    LODWORD(v297.__r_.__value_.__r.__words[2]) = v206;
    do
      v208 = __ldaxr(v204);
    while (__stlxr(v208 - 1, v204));
    if (!v208)
    {
      ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
      std::__shared_weak_count::__release_weak(v203);
    }
  }
  else
  {
    v212 = (int)this[16].__r_.__value_.__l.__data_;
    *(_OWORD *)&v297.__r_.__value_.__l.__data_ = v202;
    LODWORD(v297.__r_.__value_.__r.__words[2]) = v212;
  }
  v213 = (char *)operator new(0xB0uLL);
  v214 = v213;
  *((_QWORD *)v213 + 1) = 0;
  *((_QWORD *)v213 + 2) = 0;
  *(_QWORD *)v213 = &off_1E2DB67A8;
  v215 = this[17].__r_.__value_.__r.__words[2];
  v216 = (std::__shared_weak_count *)this[18].__r_.__value_.__l.__data_;
  if (v216)
  {
    v217 = (unint64_t *)&v216->__shared_owners_;
    do
      v218 = __ldxr(v217);
    while (__stxr(v218 + 1, v217));
  }
  v219 = this[20].__r_.__value_.__r.__words[2];
  v220 = (std::__shared_weak_count *)this[21].__r_.__value_.__l.__data_;
  if (v220)
  {
    v221 = (unint64_t *)&v220->__shared_owners_;
    do
      v222 = __ldxr(v221);
    while (__stxr(v222 + 1, v221));
    *((_QWORD *)v213 + 3) = 0;
    *((_QWORD *)v213 + 4) = v219;
    *((_QWORD *)v213 + 5) = v220;
    do
      v223 = __ldxr(v221);
    while (__stxr(v223 + 1, v221));
  }
  else
  {
    *((_QWORD *)v213 + 3) = 0;
    *((_QWORD *)v213 + 4) = v219;
    *((_QWORD *)v213 + 5) = 0;
  }
  *((_QWORD *)v213 + 6) = v215;
  *((_QWORD *)v213 + 7) = v216;
  if (v216)
  {
    v224 = (unint64_t *)&v216->__shared_owners_;
    do
      v225 = __ldxr(v224);
    while (__stxr(v225 + 1, v224));
  }
  v226 = *(_OWORD *)&this[16].__r_.__value_.__r.__words[2];
  *((_QWORD *)v213 + 20) = 0;
  *((_OWORD *)v213 + 4) = v226;
  *((_QWORD *)v213 + 10) = this[17].__r_.__value_.__l.__size_;
  *((_QWORD *)v213 + 21) = 0;
  *(_OWORD *)(v213 + 88) = 0u;
  *(_OWORD *)(v213 + 104) = 0u;
  *(_OWORD *)(v213 + 120) = 0u;
  *(_OWORD *)(v213 + 136) = 0u;
  *((_QWORD *)v213 + 19) = v213 + 160;
  if (v220)
  {
    v227 = (unint64_t *)&v220->__shared_owners_;
    do
      v228 = __ldaxr(v227);
    while (__stlxr(v228 - 1, v227));
    if (!v228)
    {
      ((void (*)(std::__shared_weak_count *))v220->__on_zero_shared)(v220);
      std::__shared_weak_count::__release_weak(v220);
    }
  }
  if (v216)
  {
    v229 = (unint64_t *)&v216->__shared_owners_;
    do
      v230 = __ldaxr(v229);
    while (__stlxr(v230 - 1, v229));
    if (!v230)
    {
      ((void (*)(std::__shared_weak_count *))v216->__on_zero_shared)(v216);
      std::__shared_weak_count::__release_weak(v216);
    }
  }
  *(_QWORD *)&v231 = v214 + 24;
  *((_QWORD *)&v231 + 1) = v214;
  v232 = (std::__shared_weak_count *)this[20].__r_.__value_.__l.__size_;
  *(_OWORD *)&this[20].__r_.__value_.__l.__data_ = v231;
  if (v232)
  {
    v233 = (unint64_t *)&v232->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = (std::__shared_weak_count *)v297.__r_.__value_.__l.__size_;
  if (v297.__r_.__value_.__l.__size_)
  {
    v236 = (unint64_t *)(v297.__r_.__value_.__l.__size_ + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v276);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, (uint64_t)v275);
  v238 = v273;
  if (v273)
  {
    v239 = (unint64_t *)&v273->__shared_owners_;
    do
      v240 = __ldaxr(v239);
    while (__stlxr(v240 - 1, v239));
    if (!v240)
    {
      ((void (*)(std::__shared_weak_count *))v238->__on_zero_shared)(v238);
      std::__shared_weak_count::__release_weak(v238);
    }
  }
  v241 = *(std::__shared_weak_count **)&v272[8];
  if (*(_QWORD *)&v272[8])
  {
    v242 = (unint64_t *)(*(_QWORD *)&v272[8] + 8);
    do
      v243 = __ldaxr(v242);
    while (__stlxr(v243 - 1, v242));
    if (!v243)
    {
      ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
      std::__shared_weak_count::__release_weak(v241);
    }
  }
  v192 = (std::__shared_weak_count *)*((_QWORD *)&v303 + 1);
  if (*((_QWORD *)&v303 + 1))
  {
LABEL_380:
    v244 = (unint64_t *)&v192->__shared_owners_;
    do
      v245 = __ldaxr(v244);
    while (__stlxr(v245 - 1, v244));
    if (!v245)
    {
      ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
      std::__shared_weak_count::__release_weak(v192);
    }
  }
LABEL_384:
  v246 = v305;
  if (v305)
  {
    v247 = (unint64_t *)&v305->__shared_owners_;
    do
      v248 = __ldaxr(v247);
    while (__stlxr(v248 - 1, v247));
    if (!v248)
    {
      ((void (*)(std::__shared_weak_count *))v246->__on_zero_shared)(v246);
      std::__shared_weak_count::__release_weak(v246);
    }
  }
  if (v311 < 0)
    operator delete(v310);
  if (v309 < 0)
    operator delete(v308);
  return this;
}

void sub_191436CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a41 < 0)
    operator delete(a36);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a42);
  Espresso::gradient_builder::~gradient_builder((Espresso::gradient_builder *)&a46);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v48 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v48 - 184);
  Espresso::async_data_source::options::~options((void **)(v48 - 168));
  if (*(char *)(v46 + 551) < 0)
    operator delete(*(void **)(v46 + 528));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v46 + 480);
  *(_QWORD *)(v48 - 168) = a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v48 - 168));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v47);
  Espresso::trainer::options::~options((void **)v46);
  _Unwind_Resume(a1);
}

void sub_191436D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 - 184);
  Espresso::async_data_source::options::~options((void **)(v37 - 168));
  if (*(char *)(v35 + 551) < 0)
    operator delete(*(void **)(v35 + 528));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v35 + 480);
  *(_QWORD *)(v37 - 168) = a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 168));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v36);
  Espresso::trainer::options::~options((void **)v35);
  _Unwind_Resume(a1);
}

void sub_191436DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::runtime_error a37)
{
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  std::runtime_error::~runtime_error(&a37);
  __cxa_end_catch();
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v39 - 184);
  Espresso::async_data_source::options::~options((void **)(v39 - 168));
  if (*(char *)(v37 + 551) < 0)
    operator delete(*(void **)(v37 + 528));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v37 + 480);
  *(_QWORD *)(v39 - 168) = a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 168));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38);
  Espresso::trainer::options::~options((void **)v37);
  _Unwind_Resume(a1);
}

void sub_191436E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void **a37)
{
  uint64_t v37;
  uint64_t v38;
  void **v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  void **v44;

  if (*(char *)(v37 + 351) < 0)
    operator delete(*v43);
  if (*(char *)(v37 + 327) < 0)
    operator delete(*a19);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a37);
  if (*(char *)(v37 + 239) < 0)
    operator delete(*v44);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v41);
  if (*(char *)(v37 + 183) < 0)
    operator delete(*v40);
  if (*(char *)(v37 + 159) < 0)
    operator delete(*a18);
  if (*(char *)(v37 + 135) < 0)
    operator delete(*a17);
  if (*(char *)(v37 + 63) < 0)
    operator delete(*v39);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v38);
  if (*(char *)(v37 + 23) < 0)
    operator delete(*(void **)v37);
  JUMPOUT(0x191437118);
}

void sub_191436E4C()
{
  JUMPOUT(0x191436F54);
}

void sub_191436E54()
{
  JUMPOUT(0x191436F74);
}

void sub_191436E5C()
{
  JUMPOUT(0x191436F88);
}

void sub_191436E64()
{
  JUMPOUT(0x191436F9CLL);
}

void sub_191436E6C()
{
  JUMPOUT(0x191436FACLL);
}

void sub_191436E74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,char a56)
{
  if (a55 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a56);
  JUMPOUT(0x1914370A8);
}

void sub_191436E98()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x250]);
  Espresso::network_shape::~network_shape((char **)&STACK[0x270]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v0 - 248, *(char **)(v0 - 240));
  JUMPOUT(0x1914370A8);
}

void sub_191436EA4()
{
  uint64_t v0;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x260]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v0 - 248, *(char **)(v0 - 240));
  JUMPOUT(0x1914370A8);
}

void sub_191436EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;

  if (a42 < 0)
  {
    operator delete(__p);
    if ((v44 & 1) == 0)
    {
LABEL_5:
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 208);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v45 - 184);
      Espresso::async_data_source::options::~options((void **)(v45 - 168));
      if (*(char *)(v42 + 551) < 0)
        operator delete(*(void **)(v42 + 528));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a21);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a23);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v42 + 480);
      *(_QWORD *)(v45 - 168) = a22;
      std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 168));
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](a20);
      std::shared_ptr<void>::~shared_ptr[abi:ne180100](v43);
      Espresso::trainer::options::~options((void **)v42);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_5;
  }
  JUMPOUT(0x191436EDCLL);
}

void sub_191436EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;

  if (a66 < 0)
    operator delete(__p);
  JUMPOUT(0x191437068);
}

void sub_191436F04()
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](&STACK[0x270]);
  JUMPOUT(0x1914370A8);
}

void sub_191436F14()
{
  JUMPOUT(0x1914370BCLL);
}

void sub_191436F1C()
{
  uint64_t v0;

  if (*(char *)(v0 - 121) < 0)
    operator delete(*(void **)(v0 - 144));
  JUMPOUT(0x1914370C4);
}

void sub_191436FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 208);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v25 - 184);
  Espresso::async_data_source::options::~options((void **)(v25 - 168));
  if (*(char *)(v23 + 551) < 0)
    operator delete(*(void **)(v23 + 528));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a21);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a23);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v23 + 480);
  *(_QWORD *)(v25 - 168) = a22;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 168));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a20);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v24);
  Espresso::trainer::options::~options((void **)v23);
  _Unwind_Resume(a1);
}

void sub_191436FD0()
{
  uint64_t v0;

  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v0 - 248, *(_QWORD *)(v0 - 240));
  JUMPOUT(0x1914370A8);
}

void sub_191436FD8()
{
  JUMPOUT(0x191437018);
}

void sub_191437028()
{
  JUMPOUT(0x191437068);
}

void sub_191437070()
{
  uint64_t v0;

  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::__tree<std::__value_type<std::string,Espresso::layer_shape>,std::__map_value_compare<std::string,std::__value_type<std::string,Espresso::layer_shape>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,Espresso::layer_shape>>>::destroy(v0 - 248, *(char **)(v0 - 240));
  JUMPOUT(0x1914370A8);
}

void std::allocate_shared[abi:ne180100]<Espresso::multikey_data_source,std::allocator<Espresso::multikey_data_source>,Espresso::async_data_source::options &,std::string &,void>(_QWORD *a1, __int128 *a2, uint64_t a3)
{
  _QWORD *v6;
  std::string __p;
  __int128 v8;
  int v9;
  std::string v10;
  std::string v11;

  v6 = operator new(0x40uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DBC1C8;
  v8 = *a2;
  v9 = *((_DWORD *)a2 + 4);
  if (*((char *)a2 + 47) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  else
    v10 = *(std::string *)((_BYTE *)a2 + 1);
  if (*((char *)a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  else
    v11 = *(std::string *)((_BYTE *)a2 + 2);
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  Espresso::multikey_data_source::multikey_data_source((uint64_t)(v6 + 3), (uint64_t)&v8, (uint64_t *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *a1 = v6 + 3;
  a1[1] = v6;
}

void sub_191437250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;
  void *v26;

  Espresso::async_data_source::options::~options(&a16);
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  _Unwind_Resume(a1);
}

void Espresso::async_data_source::options::~options(void **this)
{
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

void Espresso::trainer::options::~options(void **this)
{
  void **v2;

  if (*((char *)this + 375) < 0)
    operator delete(this[44]);
  if (*((char *)this + 351) < 0)
    operator delete(this[41]);
  if (*((char *)this + 327) < 0)
    operator delete(this[38]);
  v2 = this + 33;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void std::__shared_ptr_emplace<Espresso::solver_sgd>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB67A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::solver_sgd>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB67A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::solver_sgd>::__on_zero_shared(uint64_t a1)
{
  void **v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<Espresso::quantized_weights_helper>>>>::destroy(*(_QWORD **)(a1 + 160));
  v3 = (void **)(a1 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)(a1 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<Espresso::multikey_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC1C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::multikey_data_source>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBC1C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::multikey_data_source>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void Espresso::trainer::train(Espresso::trainer *this)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  uint64_t v12;
  float v13;
  char *v14;
  uint64_t v15;
  std::chrono::steady_clock::time_point v16;
  double v17;
  size_t v18;
  std::string *v19;
  char *v20;
  std::string *v21;
  std::string::size_type size;
  std::string *v23;
  __int128 v24;
  std::string *v25;
  __int128 v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  void *__p[2];
  char v45;
  void *v46[2];
  char v47;
  std::string __str;
  uint64_t v49[2];
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;
  char v54[8];
  char *v55;
  __int128 v56;
  char v57[8];
  char *v58;

  if (*((_BYTE *)this + 252))
  {
    Espresso::trainer::validation(this, (uint64_t)v57);
    std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v58);
  }
  else
  {
    v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 62) + 32))(*((_QWORD *)this + 62));
    v3 = (v2 - 1) / (unint64_t)*((int *)this + 99) + 1;
    v43 = *((unsigned int *)this + 94);
    if ((v43 & 0x80000000) != 0)
      v43 = v3 * *((int *)this + 95);
    v4 = *((unsigned int *)this + 97);
    if ((v4 & 0x80000000) != 0)
      v4 = -(uint64_t)(*((int *)this + 98) * v3);
    v5 = *((int *)this + 96);
    std::allocate_shared[abi:ne180100]<Espresso::scoped_timer,std::allocator<Espresso::scoped_timer>,char const(&)[9],void>((Espresso::scoped_timer **)&v56);
    NSLog(CFSTR("Training over %zu samples (%d epochs) (%zu batches)"), v2, *((unsigned int *)this + 95), v43);
    if (v43)
    {
      v6 = v43;
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = "";
      do
      {
        Espresso::trainer::step((Espresso::solver_sgd **)this);
        v11 = v7 + 1;
        if (!((v7 + 1) % v3))
        {
          v12 = *((_QWORD *)this + 60);
          v13 = *(float *)(v12 + 44) * *(float *)(v12 + 40);
          *(float *)(v12 + 40) = v13;
          printf("Epoch:%zu. LR decay lr=%f\n", v8++, v13);
        }
        if (!(v7 % v5))
          printf("Loss: %.4e (%.4e) (%zu/%zu/%zu)\n", *(float *)(*((_QWORD *)this + 60) + 68), *(float *)(*((_QWORD *)this + 60) + 64), v7, v6, v3);
        if (!(v7 % v4))
        {
          v14 = (char *)v10;
          v15 = v56;
          *(_BYTE *)(v56 + 56) = 1;
          v16.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
          *(std::chrono::steady_clock::time_point *)(v15 + 8) = v16;
          v17 = (double)(v16.__d_.__rep_ - *(_QWORD *)v15) * 0.000001;
          *(double *)(v15 + 16) = v17;
          *(float *)&v17 = v17 * 0.00100000005;
          printf("dt=%.2f (%.2f/s)\n", *(float *)&v17, (float)((float)((v7 - v9) * *((_DWORD *)this + 99)) / *(float *)&v17));
          Espresso::trainer::validation(this, (uint64_t)v54);
          std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v55);
          v10 = v14;
          if (!*((_DWORD *)this + 62) && !*((_DWORD *)this + 61))
          {
            if (*((char *)this + 239) >= 0)
              v18 = *((unsigned __int8 *)this + 239);
            else
              v18 = *((_QWORD *)this + 28);
            std::string::basic_string[abi:ne180100]((uint64_t)&v51, v18 + 4);
            if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v19 = &v51;
            else
              v19 = (std::string *)v51.__r_.__value_.__r.__words[0];
            if (v18)
            {
              if (*((char *)this + 239) >= 0)
                v20 = (char *)this + 216;
              else
                v20 = (char *)*((_QWORD *)this + 27);
              memmove(v19, v20, v18);
            }
            strcpy((char *)v19 + v18, "fwd_");
            std::to_string(&v50, v7);
            if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v21 = &v50;
            else
              v21 = (std::string *)v50.__r_.__value_.__r.__words[0];
            if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
            else
              size = v50.__r_.__value_.__l.__size_;
            v23 = std::string::append(&v51, (const std::string::value_type *)v21, size);
            v10 = v14;
            v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v52.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            v25 = std::string::append(&v52, ".espresso.net");
            v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
            v53.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v26;
            v25->__r_.__value_.__l.__size_ = 0;
            v25->__r_.__value_.__r.__words[2] = 0;
            v25->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v52.__r_.__value_.__l.__data_);
            if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v50.__r_.__value_.__l.__data_);
            if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v51.__r_.__value_.__l.__data_);
            v27 = &v53;
            if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
            printf("Dumping to: %s\n", (const char *)v27);
            v28 = (std::__shared_weak_count *)*((_QWORD *)this + 56);
            v49[0] = *((_QWORD *)this + 55);
            v49[1] = (uint64_t)v28;
            if (v28)
            {
              p_shared_owners = (unint64_t *)&v28->__shared_owners_;
              do
                v30 = __ldxr(p_shared_owners);
              while (__stxr(v30 + 1, p_shared_owners));
            }
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              std::string::__init_copy_ctor_external(&__str, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
            else
              __str = v53;
            std::string::basic_string[abi:ne180100]<0>(v46, v14);
            std::string::basic_string[abi:ne180100]<0>(__p, v14);
            Espresso::dump_network(v49, &__str, (uint64_t)v46, (uint64_t)__p);
            if (v45 < 0)
              operator delete(__p[0]);
            if (v47 < 0)
              operator delete(v46[0]);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (v28)
            {
              v31 = (unint64_t *)&v28->__shared_owners_;
              do
                v32 = __ldaxr(v31);
              while (__stlxr(v32 - 1, v31));
              if (!v32)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v53.__r_.__value_.__l.__data_);
          }
          std::allocate_shared[abi:ne180100]<Espresso::scoped_timer,std::allocator<Espresso::scoped_timer>,char const(&)[9],void>((Espresso::scoped_timer **)&v53);
          v33 = *(_OWORD *)&v53.__r_.__value_.__l.__data_;
          *(_OWORD *)&v53.__r_.__value_.__l.__data_ = 0uLL;
          v34 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
          v56 = v33;
          v6 = v43;
          if (v34)
          {
            v35 = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v37 = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
          if (v53.__r_.__value_.__l.__size_)
          {
            v38 = (unint64_t *)(v53.__r_.__value_.__l.__size_ + 8);
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
              std::__shared_weak_count::__release_weak(v37);
            }
          }
          v9 = v7;
        }
        ++v7;
      }
      while (v11 != v6);
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
    if (*((_QWORD *)&v56 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
  }
}

void sub_1914379C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (*(char *)(v55 - 169) < 0)
    operator delete(*(void **)(v55 - 192));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v55 - 144);
  _Unwind_Resume(a1);
}

void Espresso::trainer::validation(Espresso::trainer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  double v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t *v18[3];
  unsigned int v19[4];
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  void *__p;
  char v27;
  _QWORD v28[2];
  uint64_t v29;
  std::__shared_weak_count *v30;
  _DWORD v31[4];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void **v38;

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v4 = *((unsigned __int8 *)this + 252);
  v31[0] = *((_DWORD *)this + 60);
  v31[1] = v4;
  v5 = *((_DWORD *)this + 64);
  v31[2] = *((_DWORD *)this + 99);
  v31[3] = v5;
  v32 = 0u;
  v33 = 0u;
  std::string::operator=((std::string *)&v32, (const std::string *)this + 22);
  std::string::operator=((std::string *)((char *)&v33 + 8), (const std::string *)((char *)this + 160));
  std::string::operator=((std::string *)&v35, (const std::string *)((char *)this + 328));
  std::string::operator=((std::string *)((char *)&v36 + 8), (const std::string *)((char *)this + 352));
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 54);
  v29 = *((_QWORD *)this + 53);
  v30 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 65);
  v28[0] = *((_QWORD *)this + 64);
  v28[1] = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  Espresso::validation_options::validation_options((uint64_t)v19, (uint64_t)v31);
  memset(v18, 0, sizeof(v18));
  std::vector<std::shared_ptr<Espresso::net>>::__init_with_size[abi:ne180100]<std::shared_ptr<Espresso::net>*,std::shared_ptr<Espresso::net>*>((char *)v18, *((_QWORD **)this + 57), *((_QWORD **)this + 58), (uint64_t)(*((_QWORD *)this + 58) - *((_QWORD *)this + 57)) >> 4);
  Espresso::run_validation(&v29, v28, v19, v18, a2, v12);
  v38 = (void **)v18;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&v38);
  if (v27 < 0)
    operator delete(__p);
  if (v25 < 0)
    operator delete(v24);
  if (v23 < 0)
    operator delete(v22);
  if (v21 < 0)
    operator delete(v20);
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v37) < 0)
    operator delete(*((void **)&v36 + 1));
  if (SBYTE7(v36) < 0)
    operator delete((void *)v35);
  if (SHIBYTE(v34) < 0)
    operator delete(*((void **)&v33 + 1));
  if (SBYTE7(v33) < 0)
    operator delete((void *)v32);
}

void sub_191437CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)(v29 - 40) = v28;
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 40));
  Espresso::validation_options::~validation_options(&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  Espresso::validation_options::~validation_options((void **)(v29 - 152));
  _Unwind_Resume(a1);
}

Espresso::scoped_timer *std::allocate_shared[abi:ne180100]<Espresso::scoped_timer,std::allocator<Espresso::scoped_timer>,char const(&)[9],void>(Espresso::scoped_timer **a1)
{
  _QWORD *v2;
  double v3;
  Espresso::scoped_timer *result;

  v2 = operator new(0x58uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E2DB6E00;
  result = Espresso::scoped_timer::scoped_timer((Espresso::scoped_timer *)(v2 + 3), "backprop", v3);
  *a1 = result;
  a1[1] = (Espresso::scoped_timer *)v2;
  return result;
}

void sub_191437D38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::trainer::step(Espresso::solver_sgd **this)
{
  void *v2;

  v2 = (void *)MEMORY[0x19401D4A4]();
  Espresso::solver_sgd::step(this[60], *((int *)this + 99));
  objc_autoreleasePoolPop(v2);
}

void std::__shared_ptr_emplace<Espresso::scoped_timer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::scoped_timer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DB6E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::scoped_timer>::__on_zero_shared(uint64_t a1)
{
  Espresso::scoped_timer::~scoped_timer((Espresso::scoped_timer *)(a1 + 24));
}

uint64_t Espresso::validation_options::validation_options(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  v7 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  return a1;
}

void sub_191437EC8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[87] < 0)
    operator delete(*v4);
  if (v1[63] < 0)
    operator delete(*v3);
  if (v1[39] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void Espresso::validation_options::~validation_options(void **this)
{
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

void sub_191437FEC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

_QWORD *__assign_helper_atomic_property__2(_QWORD *a1, uint64_t *a2)
{
  return std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](a1, *a2, a2[1]);
}

_QWORD *__copy_helper_atomic_property__1(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = a2[1];
  *result = *a2;
  result[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __assign_helper_atomic_property__3497(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,void *> *>>((_QWORD *)a1, *(uint64_t **)(a2 + 16));
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::blob<float,4>>>,void *> *>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  _QWORD *v8;
  char *v9;
  std::string *v10;
  _QWORD v11[2];
  char v12;

  v2 = a2;
  v4 = a1[1];
  if (v4)
  {
    for (i = 0; i != v4; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v6 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v6)
      v7 = a2 == 0;
    else
      v7 = 1;
    if (v7)
    {
      v8 = (_QWORD *)v6;
    }
    else
    {
      do
      {
        std::string::operator=((std::string *)(v6 + 16), (const std::string *)(v2 + 2));
        std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)(v6 + 40), v2[5], v2[6]);
        v8 = *(_QWORD **)v6;
        std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, v6);
        v2 = (uint64_t *)*v2;
        if (!v8)
          break;
        v6 = (uint64_t)v8;
      }
      while (v2);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v8);
  }
  for (; v2; v2 = (uint64_t *)*v2)
  {
    v9 = (char *)operator new(0x38uLL);
    v11[0] = v9;
    v11[1] = a1 + 2;
    v12 = 0;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    v10 = std::pair<std::string const,std::shared_ptr<Espresso::blob<float,4>>>::pair[abi:ne180100]((std::string *)(v9 + 16), (__int128 *)v2 + 1);
    v12 = 1;
    *((_QWORD *)v9 + 1) = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v10);
    std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__node_insert_multi((uint64_t)a1, (uint64_t)v9);
    v11[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
}

void sub_191438248(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__deallocate_node(v1);
  __cxa_rethrow();
}

void sub_191438260(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::batch::~batch(Espresso::CVAEngine::batch *this)
{
  Espresso::abstract_batch::~abstract_batch(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::CVAEngine::batch::sync_point(Espresso::CVAEngine::batch *this)
{
  return (*(uint64_t (**)(Espresso::CVAEngine::batch *))(*(_QWORD *)this + 24))(this);
}

char *Espresso::CVAEngine::context::begin_batch@<X0>(Espresso::CVAEngine::context *this@<X0>, char **a2@<X8>)
{
  char *v4;
  char *result;

  v4 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_1E2DC1A98;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[64] = 1;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *((_WORD *)v4 + 60) = 256;
  *((_QWORD *)v4 + 16) = 0;
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = this;
  *((_QWORD *)v4 + 19) = 0;
  a2[1] = v4;
  *((_QWORD *)v4 + 3) = &off_1E2DA74C0;
  result = v4 + 24;
  *a2 = result;
  return result;
}

void Espresso::CVAEngine::context::~context(Espresso::CVAEngine::context *this)
{
  Espresso::CVAEngine::context::~context(this);
  JUMPOUT(0x19401CD90);
}

{
  Espresso *v2;
  const char *v3;
  int v4;
  NSObject *v5;
  _DWORD v6[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E2DA7570;
  v2 = (Espresso *)((uint64_t (*)(uint64_t))softLinkCVANetPipeShutdown[0])(*((_QWORD *)this + 21));
  v4 = (int)v2;
  if ((_DWORD)v2)
  {
    Espresso::espresso_os_log_subsystem(v2, v3);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v6[0] = 67109120;
      v6[1] = v4;
      _os_log_error_impl(&dword_190DAF000, v5, OS_LOG_TYPE_ERROR, "CVA pipe failed to shut down cleanly, return value: %d", (uint8_t *)v6, 8u);
    }

  }
  CFRelease(*((CFTypeRef *)this + 21));
  CFRelease(*((CFTypeRef *)this + 22));
  Espresso::HXEngine::context::~context(this);
}

void Espresso::CVAEngine::context::create_compiler_for_network(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char *v4;
  __int128 v5;
  _OWORD *v6;
  const void *v7;
  void *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::runtime_error *exception;
  __int128 v21;
  unsigned int v22;
  unsigned int *v23;

  v22 = (***(uint64_t (****)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 8));
  v3 = *a2;
  v4 = (char *)operator new(0x118uLL);
  v5 = 0uLL;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_QWORD *)v4 = &off_1E2DC18D8;
  *((_QWORD *)v4 + 3) = &off_1E2DA6CC0;
  *((_OWORD *)v4 + 2) = 0u;
  v4[48] = 0;
  *((_QWORD *)v4 + 7) = 0;
  v6 = v4 + 56;
  *((_OWORD *)v4 + 4) = 0u;
  *((_DWORD *)v4 + 20) = 0;
  *(_QWORD *)(v4 + 84) = 1;
  *((_DWORD *)v4 + 23) = -1;
  *(_OWORD *)(v4 + 200) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_QWORD *)v4 + 14) = 0;
  *((_DWORD *)v4 + 30) = 0;
  *((_OWORD *)v4 + 6) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *((_QWORD *)v4 + 24) = v4 + 200;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *((_QWORD *)v4 + 9) = v3;
  v7 = *(const void **)(v3 + 16);
  if (v7
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = (std::__shared_weak_count *)*((_QWORD *)v4 + 8);
    *(_OWORD *)(v4 + 56) = v5;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    *v6 = v5;
  }
  if (!*(_QWORD *)v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Wrong context");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_QWORD *)&v21 = v4 + 24;
  *((_QWORD *)&v21 + 1) = v4;
  v15 = *a2 + 528;
  v23 = &v22;
  v16 = std::__hash_table<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::__unordered_map_hasher<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::hash<Espresso::platform>,std::equal_to<Espresso::platform>,true>,std::__unordered_map_equal<Espresso::platform,std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>,std::equal_to<Espresso::platform>,std::hash<Espresso::platform>,true>,std::allocator<std::__hash_value_type<Espresso::platform,std::shared_ptr<Espresso::net_compiler>>>>::__emplace_unique_key_args<Espresso::platform,std::piecewise_construct_t const&,std::tuple<Espresso::platform const&>,std::tuple<>>(v15, &v22, (uint64_t)&std::piecewise_construct, &v23);
  v17 = (std::__shared_weak_count *)v16[4];
  *(_OWORD *)(v16 + 3) = v21;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1914385BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v15;
  void *v16;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12 + 256);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v12 + 240);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::__tree<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::__map_value_compare<std::shared_ptr<Espresso::HXEngine::blob_container>,std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>,std::less<std::shared_ptr<Espresso::HXEngine::blob_container>>,true>,std::allocator<std::__value_type<std::shared_ptr<Espresso::HXEngine::blob_container>,unsigned int>>>::destroy(*(_QWORD **)(v12 + 200));
  a12 = (void **)(v12 + 168);
  std::vector<std::shared_ptr<Espresso::abstract_blob_container>>::__destroy_vector::operator()[abi:ne180100](&a12);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v12 + 24) = off_1E2D5FD08;
  v15 = *(std::__shared_weak_count **)(v12 + 40);
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v12);
  operator delete(v16);
  _Unwind_Resume(a1);
}

uint64_t Espresso::abstract_context::supports_custom_compute_path_for_blob(uint64_t a1, _DWORD *a2, int *a3)
{
  int v3;
  _BOOL4 v5;

  v3 = *a3;
  v5 = *a2 == 2 && v3 == 4;
  return *a2 == v3 || v5;
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC18D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC18D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::CVACompiler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1914387AC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t initCVANetPipeShutdown(uint64_t a1)
{
  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13_3506);
  softLinkCVANetPipeShutdown[0] = (uint64_t (*)())dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeShutdown");
  return ((uint64_t (*)(uint64_t))softLinkCVANetPipeShutdown[0])(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1A98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::batch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1A98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::batch>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 Espresso::CVAEngine::engine::make_abstract_blob_container@<Q0>(_QWORD *a1@<X1>, int a2@<W2>, __n128 *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  __n128 result;

  v6 = operator new(0xE8uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = &off_1E2DC19F0;
  Espresso::HXEngine::blob_container::blob_container((uint64_t)(v6 + 3), a1, a2);
  v6[3] = &off_1E2DA7008;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191438904(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

__n128 Espresso::CVAEngine::engine::create_context@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  __n128 result;

  v4 = operator new(0xD0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DC1B08;
  result.n128_u64[0] = Espresso::CVAEngine::context::context((uint64_t)(v4 + 3), a1, 0, 0);
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_19143897C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void Espresso::CVAEngine::engine::~engine(Espresso::CVAEngine::engine *this)
{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &unk_1E2D676D0;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x19401CD90);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_4@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v6 = (char *)operator new(0x178uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1A60;
  v9 = *a2;
  v10 = a2[1];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 3) = &off_1E2DA7368;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *(_DWORD *)(v6 + 367) = 0;
  *((_OWORD *)v6 + 19) = v9;
  *((_OWORD *)v6 + 20) = v10;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191438A94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::context_transfer_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::context_transfer_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_3@<Q0>(_QWORD *a1@<X1>, __n128 *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 result;

  v4 = operator new(0x190uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E2DC1948;
  v5 = Espresso::base_kernel::base_kernel((uint64_t)(v4 + 3), a1);
  *((_BYTE *)v4 + 364) = 0;
  *((_WORD *)v4 + 172) = 0;
  *((_DWORD *)v4 + 76) = 0;
  *((_DWORD *)v4 + 84) = 0;
  v4[3] = &off_1E2DA6EB0;
  *((_OWORD *)v4 + 23) = 0u;
  *((_OWORD *)v4 + 24) = 0u;
  result.n128_u64[0] = v5;
  result.n128_u64[1] = (unint64_t)v4;
  *a2 = result;
  return result;
}

void sub_191438B78(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::concat_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::concat_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke_2@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = (char *)operator new(0x230uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1910;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v7 = Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  *((_QWORD *)v6 + 55) = 0;
  *((_QWORD *)v6 + 56) = 0;
  *((_QWORD *)v6 + 3) = &off_1E2DA6D18;
  *((_OWORD *)v6 + 31) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  *((_DWORD *)v6 + 122) = 0;
  *(_OWORD *)(v6 + 456) = 0u;
  *(_OWORD *)(v6 + 472) = 0u;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 376) = v12;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 360) = v11;
  result.n128_u64[0] = v7;
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191438CB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::pool_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1910;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::pool_kernel>::__on_zero_shared(uint64_t a1)
{
  Espresso::generic_pool_kernel *v2;
  uint64_t v3;

  v2 = (Espresso::generic_pool_kernel *)(a1 + 24);
  v3 = a1 + 496;
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 544);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 528);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 512);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 472);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 456);
  Espresso::generic_pool_kernel::~generic_pool_kernel(v2);
}

__n128 ___ZN8Espresso9CVAEngine6engine16register_kernelsEPNS_23abstract_engine_factoryE_block_invoke@<Q0>(_QWORD *a1@<X1>, __int128 *a2@<X2>, __n128 *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  __n128 result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[24];

  v6 = (char *)operator new(0x2E0uLL);
  *((_QWORD *)v6 + 1) = 0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &off_1E2DC1A28;
  v17 = a2[8];
  *(_OWORD *)v18 = a2[9];
  *(_QWORD *)&v18[16] = *((_QWORD *)a2 + 20);
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  Espresso::base_kernel::base_kernel((uint64_t)(v6 + 24), a1);
  *((_QWORD *)v6 + 39) = 0;
  *((_QWORD *)v6 + 40) = 0;
  *((_QWORD *)v6 + 38) = v6 + 312;
  Espresso::convolution_uniforms::convolution_uniforms((Espresso::convolution_uniforms *)(v6 + 328));
  *((_QWORD *)v6 + 72) = 0;
  *((_OWORD *)v6 + 34) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 32) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 31) = 0u;
  *((_QWORD *)v6 + 3) = &off_1E2DA70E8;
  *((_OWORD *)v6 + 42) = 0u;
  *((_OWORD *)v6 + 43) = 0u;
  *((_OWORD *)v6 + 44) = 0u;
  *((_OWORD *)v6 + 45) = 0u;
  *(_OWORD *)(v6 + 584) = 0u;
  *(_OWORD *)(v6 + 600) = 0u;
  *(_OWORD *)(v6 + 616) = 0u;
  *(_OWORD *)(v6 + 632) = 0u;
  *(_OWORD *)(v6 + 648) = 0u;
  *((_DWORD *)v6 + 166) = 0;
  *(_QWORD *)(v7 + 157) = *(_QWORD *)&v18[13];
  *(_OWORD *)(v6 + 456) = v17;
  *(_OWORD *)(v6 + 472) = *(_OWORD *)v18;
  *(_OWORD *)(v6 + 424) = v15;
  *(_OWORD *)(v6 + 440) = v16;
  *(_OWORD *)(v6 + 392) = v13;
  *(_OWORD *)(v6 + 408) = v14;
  *(_OWORD *)(v6 + 328) = v9;
  *(_OWORD *)(v6 + 344) = v10;
  *(_OWORD *)(v6 + 360) = v11;
  *(_OWORD *)(v6 + 376) = v12;
  result.n128_u64[0] = (unint64_t)(v6 + 24);
  result.n128_u64[1] = (unint64_t)v6;
  *a3 = result;
  return result;
}

void sub_191438E94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::convolution_kernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC1A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

uint64_t std::__shared_ptr_emplace<Espresso::CVAEngine::convolution_kernel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t Espresso::CVAEngine::context::context(uint64_t a1, _QWORD *a2, const void *a3, const void *a4)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  std::runtime_error *exception;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  std::runtime_error *v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::runtime_error *v30;
  std::string *v31;
  __int128 v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  std::string::size_type v36;
  std::string *v37;
  __int128 v38;
  std::string v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;

  v6 = (_QWORD *)Espresso::HXEngine::context::context(a1, a2, a3, a4);
  v6[21] = 0;
  v7 = v6 + 21;
  *v6 = &off_1E2DA7570;
  v6[22] = 0;
  v8 = v6 + 22;
  if (softLinkCVANetPipeCreate(a4, v6 + 21))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAEngine.mm");
    v13 = std::string::insert(&v40, 0, "CVA EXPECT_EQ failed ");
    v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, ":");
    v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, 49);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v39;
    else
      v17 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      size = v39.__r_.__value_.__l.__size_;
    v19 = std::string::append(&v42, (const std::string::value_type *)v17, size);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v43);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!softLinkCVANetPipeGetTypeID())
  {
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAEngine.mm");
    v22 = std::string::insert(&v40, 0, "CVA EXPECT_EQ failed ");
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v41, ":");
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, 51);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v39;
    else
      v26 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v27 = v39.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v42, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v21, &v43);
    __cxa_throw(v21, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = *v7;
  v10 = getkCVANetPipeProperty_HardwareCapabilities();
  if (softLinkCVANetPipeCopyProperty(v9, v10, v8))
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::string::basic_string[abi:ne180100]<0>(&v40, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/AltEngines/CVAEngine/CVAEngine.mm");
    v31 = std::string::insert(&v40, 0, "CVA EXPECT_EQ failed ");
    v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    v33 = std::string::append(&v41, ":");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v39, 55);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = &v39;
    else
      v35 = (std::string *)v39.__r_.__value_.__r.__words[0];
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    else
      v36 = v39.__r_.__value_.__l.__size_;
    v37 = std::string::append(&v42, (const std::string::value_type *)v35, v36);
    v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v30, &v43);
    __cxa_throw(v30, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  *(_BYTE *)(a1 + 158) = 0;
  return a1;
}

void sub_191439260(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  Espresso::HXEngine::context *v33;
  void *v34;
  int v35;
  uint64_t v36;

  if (*(char *)(v36 - 41) < 0)
    operator delete(*(void **)(v36 - 64));
  if (a14 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      Espresso::HXEngine::context::~context(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

uint64_t initValkCVANetPipeProperty_HardwareCapabilities(void)
{
  uint64_t *v0;
  uint64_t result;

  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13_3506);
  v0 = (uint64_t *)dlsym((void *)AppleCVALibrary(void)::sLib, "kCVANetPipeProperty_HardwareCapabilities");
  if (v0)
  {
    result = *v0;
    constantValkCVANetPipeProperty_HardwareCapabilities = result;
  }
  else
  {
    result = constantValkCVANetPipeProperty_HardwareCapabilities;
  }
  getkCVANetPipeProperty_HardwareCapabilities = kCVANetPipeProperty_HardwareCapabilitiesFunction;
  return result;
}

uint64_t kCVANetPipeProperty_HardwareCapabilitiesFunction(void)
{
  return constantValkCVANetPipeProperty_HardwareCapabilities;
}

uint64_t initCVANetPipeCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13_3506);
  softLinkCVANetPipeCopyProperty = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeCopyProperty");
  return softLinkCVANetPipeCopyProperty(a1, a2, a3);
}

uint64_t initCVANetPipeGetTypeID(void)
{
  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13_3506);
  softLinkCVANetPipeGetTypeID = (uint64_t (*)(void))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeGetTypeID");
  return softLinkCVANetPipeGetTypeID();
}

uint64_t initCVANetPipeCreate(uint64_t a1, uint64_t a2)
{
  if (AppleCVALibrary(void)::sOnce != -1)
    dispatch_once(&AppleCVALibrary(void)::sOnce, &__block_literal_global_13_3506);
  softLinkCVANetPipeCreate = (uint64_t (*)(_QWORD, _QWORD))dlsym((void *)AppleCVALibrary(void)::sLib, "CVANetPipeCreate");
  return softLinkCVANetPipeCreate(a1, a2);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC19F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::blob_container>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DC19F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::__shared_ptr_emplace<Espresso::CVAEngine::blob_container>::__on_zero_shared(uint64_t a1)
{
  Espresso::HXEngine::blob_container::~blob_container((Espresso::HXEngine::blob_container *)(a1 + 24));
}

void Espresso::parallel_softmax_chunk(Espresso *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  signed int v4;
  signed int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  int v13;
  float *v14;
  float *v15;
  float v16;
  int v17;
  float *v18;
  int v19;
  uint64_t v20;

  v3 = *((int *)this + 5);
  v2 = *((int *)this + 6);
  v4 = (a2 % v2) << 8;
  v5 = v4 + 256;
  if (v4 + 256 >= (int)v3)
    v5 = *((_DWORD *)this + 5);
  if (v4 < v5)
  {
    v6 = *((_DWORD *)this + 4);
    v7 = v3 * ((int)a2 / (int)v2) * v6;
    v8 = *((_QWORD *)this + 1) + 4 * v7;
    v20 = *(_QWORD *)this + 4 * v7;
    v9 = v4;
    v10 = v5;
    do
    {
      v11 = (float *)(v8 + 4 * v9);
      v12 = *v11;
      v13 = v6 - 1;
      v14 = v11;
      if (v6 > 1)
      {
        do
        {
          v14 += v3;
          if (*v14 > v12)
            v12 = *v14;
          --v13;
        }
        while (v13);
      }
      if (v6 >= 1)
      {
        v15 = (float *)(v20 + 4 * v9);
        v16 = 0.0;
        v17 = v6;
        v18 = (float *)(v8 + 4 * v9);
        do
        {
          v16 = v16 + expf(*v18 - v12);
          v18 += v3;
          --v17;
        }
        while (v17);
        v19 = v6;
        do
        {
          *v15 = expf(*v11 - v12) / v16;
          v15 += v3;
          v11 += v3;
          --v19;
        }
        while (v19);
      }
      ++v9;
    }
    while (v9 != v10);
  }
}

void Espresso::parallel_log_softmax_chunk(Espresso *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  signed int v4;
  signed int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float v12;
  int v13;
  float *v14;
  float *v15;
  float v16;
  int v17;
  float *v18;
  float v19;
  int v20;
  uint64_t v21;

  v3 = *((int *)this + 5);
  v2 = *((int *)this + 6);
  v4 = (a2 % v2) << 8;
  v5 = v4 + 256;
  if (v4 + 256 >= (int)v3)
    v5 = *((_DWORD *)this + 5);
  if (v4 < v5)
  {
    v6 = *((_DWORD *)this + 4);
    v7 = v3 * ((int)a2 / (int)v2) * v6;
    v8 = *((_QWORD *)this + 1) + 4 * v7;
    v21 = *(_QWORD *)this + 4 * v7;
    v9 = v4;
    v10 = v5;
    do
    {
      v11 = (float *)(v8 + 4 * v9);
      v12 = *v11;
      v13 = v6 - 1;
      v14 = v11;
      if (v6 > 1)
      {
        do
        {
          v14 += v3;
          if (*v14 > v12)
            v12 = *v14;
          --v13;
        }
        while (v13);
      }
      if (v6 >= 1)
      {
        v15 = (float *)(v21 + 4 * v9);
        v16 = 0.0;
        v17 = v6;
        v18 = (float *)(v8 + 4 * v9);
        do
        {
          v16 = v16 + expf(*v18 - v12);
          v18 += v3;
          --v17;
        }
        while (v17);
        v19 = logf(v16);
        v20 = v6;
        do
        {
          *v15 = (float)(*v11 - v12) - v19;
          v15 += v3;
          v11 += v3;
          --v20;
        }
        while (v20);
      }
      ++v9;
    }
    while (v9 != v10);
  }
}

void Espresso::parallel_softmax_2channels_chunk(Espresso *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  signed int v4;
  signed int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v3 = *((int *)this + 5);
  v2 = *((int *)this + 6);
  v4 = (a2 % v2) << 8;
  v5 = v4 + 256;
  if (v4 + 256 >= (int)v3)
    v5 = *((_DWORD *)this + 5);
  if (v4 < v5)
  {
    v6 = 2 * (int)a2 / (int)v2 * v3;
    v7 = *((_QWORD *)this + 1) + 4 * v6;
    v8 = *(_QWORD *)this + 4 * v6;
    v9 = v4;
    v10 = v5;
    do
    {
      v11 = (float *)(v7 + 4 * v9);
      v12 = (float *)(v8 + 4 * v9);
      v13 = v11[v3];
      if (*v11 >= v13)
        v14 = *v11;
      else
        v14 = v11[v3];
      v15 = v13 - v14;
      v16 = expf(*v11 - v14);
      v17 = v16 / (float)(v16 + expf(v15));
      *v12 = v17;
      v12[v3] = 1.0 - v17;
      ++v9;
    }
    while (v9 != v10);
  }
}

void Espresso::compute_softmax_cpu(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void (__cdecl *v12)(void *, size_t);
  float *v13;
  float *v14;
  float v15;
  float v16;
  float *v17;
  float *v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;

  v4 = 0;
  LODWORD(v5) = *(_DWORD *)(a1 + 8);
  do
  {
    v5 = (*(_DWORD *)(a1 + 12 + v4) * v5);
    v4 += 4;
  }
  while (v4 != 12);
  if (a4)
  {
LABEL_4:
    v6 = *(_DWORD *)(a2 + 16);
    v7 = *(_DWORD *)(a2 + 20);
    v8 = *(_DWORD *)(a2 + 8) * *(_DWORD *)(a2 + 12);
    v9 = *(_QWORD *)(a2 + 24);
    v10 = v8 - 1;
    if (v8 < 1)
      v10 = v8 + 254;
    v11 = ((uint64_t)v10 >> 8) + 1;
    if (a4 || v6 != 2)
    {
      v20 = *(_QWORD *)(a1 + 24);
      v21 = v9;
      v22 = v6;
      v23 = v8;
      v24 = v11;
      if (a4)
        v12 = (void (__cdecl *)(void *, size_t))Espresso::parallel_log_softmax_chunk;
      else
        v12 = (void (__cdecl *)(void *, size_t))Espresso::parallel_softmax_chunk;
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 24);
      v21 = v9;
      v22 = 2;
      v23 = v8;
      v24 = v11;
      v12 = (void (__cdecl *)(void *, size_t))Espresso::parallel_softmax_2channels_chunk;
    }
    dispatch_apply_f((int)v11 * (uint64_t)v7, 0, &v20, v12);
    return;
  }
  if (a3 != 1)
  {
    if (a3 == 2 && (int)v5 >= 1)
    {
      v13 = *(float **)(a2 + 24);
      v14 = *(float **)(a1 + 24);
      do
      {
        v15 = *v13 * 0.2 + 0.5;
        *v14 = v15;
        v16 = 0.0;
        if (v15 < 0.0 || (v16 = 1.0, v15 > 1.0))
          *v14 = v16;
        ++v14;
        ++v13;
        --v5;
      }
      while (v5);
    }
    goto LABEL_4;
  }
  if ((int)v5 >= 1)
  {
    v17 = *(float **)(a2 + 24);
    v18 = *(float **)(a1 + 24);
    do
    {
      v19 = *v17++;
      *v18++ = 1.0 / (float)(expf(-v19) + 1.0);
      --v5;
    }
    while (v5);
  }
}

void Espresso::MPSGraphEngine::Kernels::concat_kernel::~concat_kernel(Espresso::MPSGraphEngine::Kernels::concat_kernel *this)
{
  Espresso::base_kernel::~base_kernel(this);
  JUMPOUT(0x19401CD90);
}

uint64_t Espresso::MPSGraphEngine::Kernels::concat_kernel::is_valid_for_engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  int64x2_t *v30;
  std::__shared_weak_count *v31;
  int64x2_t *v32;
  std::__shared_weak_count *v33;
  std::string v34;
  std::string v35;
  std::string __p;
  _BYTE v37[24];
  _BYTE v38[32];
  std::__shared_weak_count *v39;
  int64x2_t *v40;
  std::__shared_weak_count *v41;
  void **v42;

  v4 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
  if (v4 != 64)
  {
    v14 = *(std::__shared_weak_count **)(a2 + 8);
    v40 = *(int64x2_t **)a2;
    v41 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
      v4 = *(_QWORD *)(a3 + 32) - *(_QWORD *)(a3 + 24);
    }
    std::to_string(&v34, v4 >> 6);
    v17 = std::string::insert(&v34, 0, "[Dispatch::MPSGraph::concat_kernel] unsupported: number of outputs must be 1, received ");
    v35 = *v17;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v35, a3, 0);
    Espresso::emit_kernel_validation_warning(&v40, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v18 = v39;
    if (v39)
    {
      v19 = (unint64_t *)&v39->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v42 = (void **)v38;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v42);
    v42 = (void **)v37;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100](&v42);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    v11 = v41;
    if (!v41)
      return 0;
    v21 = (unint64_t *)&v41->__shared_owners_;
    do
      v13 = __ldaxr(v21);
    while (__stlxr(v13 - 1, v21));
    goto LABEL_37;
  }
  if (*(_DWORD *)(a1 + 280))
  {
    v5 = *(std::__shared_weak_count **)(a2 + 8);
    v32 = *(int64x2_t **)a2;
    v33 = v5;
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    std::string::basic_string[abi:ne180100]<0>(&v35, "[Dispatch::MPSGraph::concat_kernel] unsupported: fused_relu");
    Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v35, a3, 0);
    Espresso::emit_kernel_validation_warning(&v32, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
    v8 = v39;
    if (v39)
    {
      v9 = (unint64_t *)&v39->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    v11 = v33;
    if (!v33)
      return 0;
    v12 = (unint64_t *)&v33->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    goto LABEL_37;
  }
  if (!*(_BYTE *)(a1 + 340))
    return 1;
  v23 = *(std::__shared_weak_count **)(a2 + 8);
  v30 = *(int64x2_t **)a2;
  v31 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  std::string::basic_string[abi:ne180100]<0>(&v35, "[Dispatch::MPSGraph::concat_kernel] unsupported: nd_mode");
  Espresso::base_kernel::validate_for_engine_warning_t::validate_for_engine_warning_t(&__p, (__int128 *)&v35, a3, 0);
  Espresso::emit_kernel_validation_warning(&v30, (Espresso::base_kernel::validate_for_engine_warning_t *)&__p);
  v26 = v39;
  if (v39)
  {
    v27 = (unint64_t *)&v39->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v38;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  v34.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
  std::vector<Espresso::layer_shape>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  v11 = v31;
  if (v31)
  {
    v29 = (unint64_t *)&v31->__shared_owners_;
    do
      v13 = __ldaxr(v29);
    while (__stlxr(v13 - 1, v29));
LABEL_37:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 0;
}

void sub_191439DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26)
{
  Espresso::base_kernel::validate_for_engine_warning_t::~validate_for_engine_warning_t(&a26);
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t is_espresso_network(uint64_t a1)
{
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  int v17;

  v1 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    v2 = *(_BYTE **)a1;
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      goto LABEL_18;
  }
  else
  {
    v2 = (_BYTE *)a1;
    v3 = *(unsigned __int8 *)(a1 + 23);
    if (!*(_BYTE *)(a1 + 23))
      goto LABEL_18;
  }
  v4 = &v2[v3];
  v5 = v2;
  v6 = v4;
  do
  {
    if (*v5 == 46)
    {
      v7 = 1u;
      while (v7 != 13)
      {
        if (&v5[v7] == v4)
          goto LABEL_15;
        v8 = v5[v7];
        v9 = aEspressoNet[v7++];
        if (v8 != v9)
          goto LABEL_7;
      }
      v6 = v5;
    }
LABEL_7:
    ++v5;
  }
  while (v5 != v4);
LABEL_15:
  if (v6 != v4 && v6 - v2 != -1)
    return 1;
LABEL_18:
  if ((v1 & 0x80) != 0)
  {
    v11 = a1;
    a1 = *(_QWORD *)a1;
    v1 = *(_QWORD *)(v11 + 8);
  }
  v12 = (_BYTE *)(a1 + v1);
  if (v1)
  {
    v13 = (_BYTE *)a1;
    v14 = (_BYTE *)(a1 + v1);
    do
    {
      if (*v13 == 46)
      {
        v15 = 1u;
        while (v15 != 13)
        {
          if (&v13[v15] == v12)
            return v14 != v12 && &v14[-a1 + 1] != 0;
          v16 = v13[v15];
          v17 = aEspressoBin[v15++];
          if (v16 != v17)
            goto LABEL_23;
        }
        v14 = v13;
      }
LABEL_23:
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
    v14 = (_BYTE *)a1;
  }
  return v14 != v12 && &v14[-a1 + 1] != 0;
}

id get_dump_filename(const std::string *a1)
{
  std::string::size_type v2;
  std::string::size_type size;
  char v4;
  std::string::size_type v5;
  std::string *p_str;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  int v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  void *v16;
  std::string __p;
  std::string __str;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v2 = std::string::rfind(a1, 47, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&__str, a1, v2 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v5 = __str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    v7 = (std::string *)((char *)p_str + size);
    v8 = p_str;
    v9 = v7;
    do
    {
      if (v8->__r_.__value_.__s.__data_[0] == 46)
      {
        v10 = 1u;
        while (v10 != 13)
        {
          if ((std::string *)((char *)v8 + v10) == v7)
            goto LABEL_17;
          v11 = v8->__r_.__value_.__s.__data_[v10];
          v12 = aEspressoBin[v10++];
          if (v11 != v12)
            goto LABEL_9;
        }
        v9 = v8;
      }
LABEL_9:
      v8 = (std::string *)((char *)v8 + 1);
    }
    while (v8 != v7);
LABEL_17:
    if (v9 != v7 && (char *)v9 - (char *)p_str != -1)
    {
      v13 = std::string::rfind(&__str, 46, 0xFFFFFFFFFFFFFFFFLL);
      std::string::basic_string(&__p, &__str, 0, v13, (std::allocator<char> *)&v20);
      v14 = std::string::append(&__p, ".net");
      v5 = v14->__r_.__value_.__r.__words[0];
      v21[0] = v14->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
      v4 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str.__r_.__value_.__r.__words[0] = v5;
      __str.__r_.__value_.__l.__size_ = v21[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v21 + 7);
      *((_BYTE *)&__str.__r_.__value_.__s + 23) = v4;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        v5 = __str.__r_.__value_.__r.__words[0];
      }
    }
  }
  if (v4 >= 0)
    v15 = &__str;
  else
    v15 = (std::string *)v5;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v16;
}

void sub_19143A1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t Espresso::tracer::tracer(uint64_t a1, uint64_t *a2, std::string *a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 *v13;
  std::string::size_type size;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 *v21;
  std::string::size_type v22;
  int v23;
  int v24;
  std::string *p_p;
  std::string::size_type v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  int v32;
  std::string::size_type v33;
  std::string::size_type v34;
  size_t v35;
  std::string *v36;
  std::string *v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  void *v41;
  unsigned __int8 v42;
  int v43;
  void *v44;
  id v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  id v54;
  Espresso *v55;
  const char *v56;
  NSObject *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  size_t v65;
  std::string *v66;
  std::string *v67;
  std::string *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  FILE *v74;
  void *v75;
  void *v76;
  void *v77;
  std::string *v78;
  void *v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  Espresso *v84;
  const char *v85;
  NSObject *v86;
  int v87;
  char v88;
  void *v89;
  void *v90;
  std::string::size_type v91;
  std::string *v92;
  void *v93;
  void *v94;
  void *v95;
  std::string *p_str;
  void *v97;
  Espresso *v98;
  const char *v99;
  uint64_t v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string *v104;
  std::string *v105;
  uint64_t v106;
  int v107;
  int v108;
  int64_t v109;
  BOOL v111;
  std::string::size_type v112;
  std::string::size_type v113;
  void *v114;
  std::string *v115;
  void *v116;
  Espresso *v117;
  const char *v118;
  NSObject *v119;
  uint64_t v120;
  uint64_t i;
  id v122;
  const char *v123;
  const char *v124;
  size_t v125;
  size_t v126;
  std::string *v127;
  std::string *v128;
  char *v129;
  void *v130;
  int64_t v131;
  std::string *v132;
  std::string *v133;
  int64_t v134;
  char *v135;
  int v136;
  std::string *v137;
  int64_t v138;
  char *v139;
  char *v140;
  void *v141;
  std::string *v142;
  void *v143;
  std::string *v144;
  std::__shared_weak_count *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  void *v149;
  id v150;
  unint64_t *p_shared_owners;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  NSObject *v159;
  std::string::size_type v160;
  id v162;
  std::string::size_type v163;
  std::string::size_type v164;
  id v165;
  std::string::size_type v166;
  BOOL v167;
  void *v168;
  id v169;
  id v170;
  void *v171;
  void *v172;
  void *v173;
  void *v174;
  id obj;
  uint64_t v176;
  std::string __str;
  id v179;
  std::string v180;
  std::string v181;
  id v182;
  std::string __p;
  void *v184;
  _BYTE v185[15];
  unsigned __int8 v186;
  void *v187[2];
  char v188;
  void *v189[2];
  char v190;
  std::string v191;
  uint64_t v192[2];
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  std::string v197;
  id v198;
  std::string v199;
  std::string v200;
  std::string v201;
  const __CFString *v202;
  void *v203;
  _QWORD v204[5];
  _QWORD v205[5];
  _QWORD v206[6];
  _QWORD v207[6];
  std::string v208;
  _BYTE v209[32];
  __int128 v210;
  __int128 v211;
  uint64_t v212;

  v11 = a1;
  v212 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 80) = objc_opt_new();
  std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100]((_QWORD *)v11, *a2, a2[1]);
  if (a4 > 19999)
  {
    if (a4 > 59999)
    {
      if (a4 > 89999)
      {
        if (a4 == 90000)
          a4 = 209;
      }
      else if (a4 == 60000)
      {
        a4 = 3;
      }
    }
    else
    {
      switch(a4)
      {
        case 50000:
          a4 = 5;
          break;
        case 50001:
        case 50002:
        case 50003:
        case 50004:
        case 50005:
        case 50006:
        case 50007:
        case 50008:
          break;
        default:
          if (a4 == 20000)
            a4 = 2;
          break;
      }
    }
  }
  else
  {
    switch(a4)
    {
      case 10006:
      case 10007:
      case 10008:
      case 10009:
      case 10010:
      case 10011:
        break;
      default:
        switch(a4)
        {
          case 0:
            a4 = 1;
            break;
          case 1:
          case 2:
          case 3:
          case 4:
            goto LABEL_22;
          case 5:
            a4 = 7;
            break;
          case 6:
            a4 = 8;
            break;
          case 7:
            a4 = 9;
            break;
          default:
            if (a4 == 100)
              a4 = 0;
            break;
        }
        break;
    }
  }
LABEL_22:
  *(_DWORD *)(v11 + 72) = a4;
  std::string::basic_string[abi:ne180100]<0>(&v184, "test_data");
  memset(&__p, 0, sizeof(__p));
  v12 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((char)v12 < 0)
  {
    if (!a3->__r_.__value_.__l.__size_)
      goto LABEL_95;
  }
  else if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
  {
    goto LABEL_95;
  }
  if ((v12 & 0x80u) == 0)
    v13 = (unsigned __int8 *)a3;
  else
    v13 = (unsigned __int8 *)a3->__r_.__value_.__r.__words[0];
  if ((v12 & 0x80u) == 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  v15 = &v13[size];
  if (size)
  {
    v16 = v13;
    v17 = &v13[size];
    do
    {
      v18 = v16;
      v19 = v16;
      while (1)
      {
        v20 = *v19++;
        if (v20 == 47)
          break;
        v18 = v19;
        if (v19 == v15)
        {
          v18 = v17;
          goto LABEL_41;
        }
      }
      v16 = v18 + 1;
      v17 = v18;
    }
    while (v19 != v15);
  }
  else
  {
    v18 = v13;
  }
LABEL_41:
  v21 = (unsigned __int8 *)(v18 - v13);
  if (v18 == v15)
    v22 = 0;
  else
    v22 = (std::string::size_type)(v21 + 1);
  std::string::basic_string(&v208, a3, v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v209);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v208;
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v208, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  else
    v208 = *a3;
  v23 = is_espresso_network((uint64_t)&v208);
  v24 = v23;
  if ((SHIBYTE(v208.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v23)
      goto LABEL_74;
LABEL_53:
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v26 = __p.__r_.__value_.__l.__size_;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    v27 = (std::string *)((char *)p_p + v26);
    if (v26)
    {
      v28 = p_p;
      v29 = (std::string *)((char *)p_p + v26);
      do
      {
        if (v28->__r_.__value_.__s.__data_[0] == 46)
        {
          v30 = 1u;
          while (v30 != 10)
          {
            if ((std::string *)((char *)v28 + v30) == v27)
              goto LABEL_68;
            v31 = v28->__r_.__value_.__s.__data_[v30];
            v32 = aEspresso_0[v30++];
            if (v31 != v32)
              goto LABEL_59;
          }
          v29 = v28;
        }
LABEL_59:
        v28 = (std::string *)((char *)v28 + 1);
      }
      while (v28 != v27);
    }
    else
    {
      v29 = p_p;
    }
LABEL_68:
    v33 = (char *)v29 - (char *)p_p;
    if (v29 == v27)
      v34 = -1;
    else
      v34 = v33;
    std::string::basic_string((std::string *)v209, &__p, 0, v34, (std::allocator<char> *)&v201);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)v209;
    goto LABEL_74;
  }
  operator delete(v208.__r_.__value_.__l.__data_);
  if (v24)
    goto LABEL_53;
LABEL_74:
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v35 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v35 = __p.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:ne180100]((uint64_t)&v208, v35 + 1);
  if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v36 = &v208;
  else
    v36 = (std::string *)v208.__r_.__value_.__r.__words[0];
  if (v35)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &__p;
    else
      v37 = (std::string *)__p.__r_.__value_.__r.__words[0];
    memmove(v36, v37, v35);
  }
  *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v35) = 95;
  if ((v186 & 0x80u) == 0)
    v38 = (const std::string::value_type *)&v184;
  else
    v38 = (const std::string::value_type *)v184;
  if ((v186 & 0x80u) == 0)
    v39 = v186;
  else
    v39 = *(_QWORD *)v185;
  v40 = std::string::append(&v208, v38, v39);
  v41 = (void *)v40->__r_.__value_.__r.__words[0];
  *(_QWORD *)v209 = v40->__r_.__value_.__l.__size_;
  *(_QWORD *)&v209[7] = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
  v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if ((char)v186 < 0)
    operator delete(v184);
  v184 = v41;
  *(_QWORD *)v185 = *(_QWORD *)v209;
  *(_QWORD *)&v185[7] = *(_QWORD *)&v209[7];
  v186 = v42;
  if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v208.__r_.__value_.__l.__data_);
LABEL_95:
  v43 = *((char *)a6 + 23);
  if (v43 < 0)
  {
    if (a6[1])
      goto LABEL_100;
  }
  else if (*((_BYTE *)a6 + 23))
  {
    goto LABEL_100;
  }
  NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, 1uLL, 1);
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v44, "objectAtIndex:", 0);
  v45 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  MEMORY[0x19401C808](a6, objc_msgSend(v45, "UTF8String"));

  LOBYTE(v43) = *((_BYTE *)a6 + 23);
  v11 = a1;
LABEL_100:
  if ((v43 & 0x80) != 0)
    a6 = (uint64_t *)*a6;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a6);
  v46 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v186 & 0x80u) == 0)
    v47 = &v184;
  else
    v47 = v184;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v47);
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v46, "stringByAppendingPathComponent:", v48);
  v49 = objc_claimAutoreleasedReturnValue();
  v50 = *(void **)(v11 + 32);
  *(_QWORD *)(v11 + 32) = v49;

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "removeItemAtPath:error:", *(_QWORD *)(a1 + 32), 0);

  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v52 = (void *)objc_claimAutoreleasedReturnValue();
  v53 = *(_QWORD *)(a1 + 32);
  v182 = 0;
  objc_msgSend(v52, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:", v53, 1, 0, &v182);
  v54 = v182;

  if (v54)
  {
    Espresso::espresso_os_log_subsystem(v55, v56);
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v54, "localizedDescription");
      v162 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v163 = objc_msgSend(v162, "UTF8String");
      LODWORD(v208.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v208.__r_.__value_.__r.__words + 4) = v163;
      _os_log_error_impl(&dword_190DAF000, v57, OS_LOG_TYPE_ERROR, "Error creating directory: %s", (uint8_t *)&v208, 0xCu);

    }
  }
  objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:", CFSTR("test_data.json.bin"));
  v58 = objc_claimAutoreleasedReturnValue();
  v59 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v58;

  objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:", CFSTR("test_data.json"));
  v60 = objc_claimAutoreleasedReturnValue();
  v61 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v60;

  objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:", CFSTR("regression_conf.json"));
  v62 = objc_claimAutoreleasedReturnValue();
  v63 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v62;

  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v181, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  else
    v181 = *a3;
  if (is_espresso_network((uint64_t)&v181))
  {
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v180, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
    else
      v180 = *a3;
    get_dump_filename(&v180);
    v72 = objc_claimAutoreleasedReturnValue();
    v73 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v72;

    if (SHIBYTE(v180.__r_.__value_.__r.__words[2]) < 0)
    {
      v71 = (void *)v180.__r_.__value_.__r.__words[0];
      goto LABEL_134;
    }
  }
  else
  {
    v64 = (void *)MEMORY[0x1E0CB3940];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v65 = __p.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&v208, v65 + 13);
    if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v66 = &v208;
    else
      v66 = (std::string *)v208.__r_.__value_.__r.__words[0];
    if (v65)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = &__p;
      else
        v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
      memmove(v66, v67, v65);
    }
    strcpy((char *)v66 + v65, "/code.nitroir");
    if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v208;
    else
      v68 = (std::string *)v208.__r_.__value_.__r.__words[0];
    objc_msgSend(v64, "stringWithUTF8String:", v68);
    v69 = objc_claimAutoreleasedReturnValue();
    v70 = *(void **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v69;

    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
    {
      v71 = (void *)v208.__r_.__value_.__r.__words[0];
LABEL_134:
      operator delete(v71);
    }
  }
  if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v181.__r_.__value_.__l.__data_);
  v74 = fopen((const char *)objc_msgSend(*(id *)(a1 + 40), "UTF8String"), "wb");
  *(_QWORD *)(a1 + 16) = v74;
  if (!v74)
  {
    v208.__r_.__value_.__r.__words[0] = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot create file: %s", &v208);
  }
  v172 = (void *)objc_opt_new();
  v173 = (void *)objc_opt_new();
  v206[0] = CFSTR("platform");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(a1 + 72));
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  v207[0] = v75;
  v206[1] = CFSTR("compute_path");
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a5);
  v76 = (void *)objc_claimAutoreleasedReturnValue();
  v207[1] = v76;
  v207[2] = &unk_1E2DEDAD8;
  v206[2] = CFSTR("tolerance");
  v206[3] = CFSTR("tol_relerr");
  v207[3] = &unk_1E2DEE188;
  v207[4] = &unk_1E2DEE198;
  v206[4] = CFSTR("tol_aerr");
  v206[5] = CFSTR("tol_psnr");
  v207[5] = &unk_1E2DEE1A8;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v207, v206, 6);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v173, "addObject:", v77);

  v174 = (void *)objc_opt_new();
  v204[0] = CFSTR("name");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = &__p;
  else
    v78 = (std::string *)__p.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v78);
  v79 = (void *)objc_claimAutoreleasedReturnValue();
  v80 = *(_QWORD *)(a1 + 64);
  v205[0] = v79;
  v205[1] = v80;
  v204[1] = CFSTR("network");
  v204[2] = CFSTR("data_frames_file");
  v205[2] = CFSTR("test_data.json");
  v205[3] = &unk_1E2DEDAF0;
  v204[3] = CFSTR("n_runs");
  v204[4] = CFSTR("config");
  v202 = CFSTR("default");
  v203 = v173;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &v203, &v202, 1);
  v81 = (void *)objc_claimAutoreleasedReturnValue();
  v205[4] = v81;
  objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v205, v204, 5);
  v82 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v174, "addObject:", v82);

  objc_msgSend(v172, "setObject:forKeyedSubscript:", v174, CFSTR("tests"));
  v179 = v54;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v172, 1, &v179);
  v171 = (void *)objc_claimAutoreleasedReturnValue();
  v170 = v179;

  v83 = a1;
  v84 = (Espresso *)objc_msgSend(v171, "writeToFile:atomically:", *(_QWORD *)(a1 + 56), 1);
  if ((v84 & 1) == 0)
  {
    Espresso::espresso_os_log_subsystem(v84, v85);
    v86 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
      v164 = objc_msgSend(*(id *)(a1 + 56), "UTF8String");
      LODWORD(v208.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v208.__r_.__value_.__r.__words + 4) = v164;
      _os_log_error_impl(&dword_190DAF000, v86, OS_LOG_TYPE_ERROR, "Tracer cannot write file: %s", (uint8_t *)&v208, 0xCu);
    }

    v83 = a1;
  }
  if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__str, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
  else
    __str = *a3;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__str.__r_.__value_.__l.__size_)
      goto LABEL_158;
    std::string::__init_copy_ctor_external(&v201, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((_BYTE *)&__str.__r_.__value_.__s + 23))
      goto LABEL_158;
    v201 = __str;
  }
  v87 = is_espresso_network((uint64_t)&v201);
  v88 = v87;
  if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v201.__r_.__value_.__l.__data_);
    if ((v88 & 1) != 0)
      goto LABEL_155;
LABEL_158:
    v89 = *(void **)(v83 + 32);
    v90 = (void *)MEMORY[0x1E0CB3940];
    v91 = std::string::rfind(&__str, 47, 0xFFFFFFFFFFFFFFFFLL);
    std::string::basic_string(&v208, &__str, v91 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v209);
    if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v92 = &v208;
    else
      v92 = (std::string *)v208.__r_.__value_.__r.__words[0];
    objc_msgSend(v90, "stringWithUTF8String:", v92);
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v89, "stringByAppendingPathComponent:", v93);
    v94 = (void *)objc_claimAutoreleasedReturnValue();

    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v208.__r_.__value_.__l.__data_);
    objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", p_str);
    v97 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v95, "copyItemAtPath:toPath:error:", v97, v94, 0);

    v100 = a1;
    goto LABEL_282;
  }
  if (!v87)
    goto LABEL_158;
LABEL_155:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v200, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v200 = __str;
  v101 = &v200;
  if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    v102 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
  }
  else
  {
    v102 = v200.__r_.__value_.__l.__size_;
    v101 = (std::string *)v200.__r_.__value_.__r.__words[0];
  }
  v103 = (std::string *)((char *)v101 + v102);
  if (v102)
  {
    v104 = v101;
    v105 = (std::string *)((char *)v101 + v102);
    do
    {
      if (v104->__r_.__value_.__s.__data_[0] == 46)
      {
        v106 = 1u;
        while (v106 != 13)
        {
          if ((std::string *)((char *)v104 + v106) == v103)
            goto LABEL_183;
          v107 = v104->__r_.__value_.__s.__data_[v106];
          v108 = aEspressoBin[v106++];
          if (v107 != v108)
            goto LABEL_174;
        }
        v105 = v104;
      }
LABEL_174:
      v104 = (std::string *)((char *)v104 + 1);
    }
    while (v104 != v103);
  }
  else
  {
    v105 = v101;
  }
LABEL_183:
  v109 = (char *)v105 - (char *)v101;
  v111 = v105 == v103 || v109 == -1;
  v167 = v111;
  v112 = std::string::rfind(&v200, 46, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&v208, &v200, 0, v112, (std::allocator<char> *)v209);
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
  v200 = v208;
  v113 = std::string::rfind(&v200, 47, 0xFFFFFFFFFFFFFFFFLL);
  std::string::basic_string(&v199, &v200, 0, v113 + 1, (std::allocator<char> *)&v208);
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v114 = (void *)objc_claimAutoreleasedReturnValue();
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v115 = &v199;
  else
    v115 = (std::string *)v199.__r_.__value_.__r.__words[0];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v115);
  v116 = (void *)objc_claimAutoreleasedReturnValue();
  v198 = 0;
  objc_msgSend(v114, "contentsOfDirectoryAtPath:error:", v116, &v198);
  v168 = (void *)objc_claimAutoreleasedReturnValue();
  v169 = v198;

  if (v169)
  {
    Espresso::espresso_os_log_subsystem(v117, v118);
    v119 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(v169, "localizedDescription");
      v165 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v166 = objc_msgSend(v165, "UTF8String");
      LODWORD(v208.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v208.__r_.__value_.__r.__words + 4) = v166;
      _os_log_error_impl(&dword_190DAF000, v119, OS_LOG_TYPE_ERROR, "Error reading source directory: %s", (uint8_t *)&v208, 0xCu);

    }
  }
  v210 = 0u;
  v211 = 0u;
  memset(v209, 0, sizeof(v209));
  obj = v168;
  v120 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v209, &v208, 16);
  if (v120)
  {
    v176 = **(_QWORD **)&v209[16];
    do
    {
      for (i = 0; i != v120; ++i)
      {
        if (**(_QWORD **)&v209[16] != v176)
          objc_enumerationMutation(obj);
        v122 = objc_retainAutorelease(*(id *)(*(_QWORD *)&v209[8] + 8 * i));
        v123 = (const char *)objc_msgSend(v122, "UTF8String");
        v124 = v123;
        if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v125 = HIBYTE(v199.__r_.__value_.__r.__words[2]);
        else
          v125 = v199.__r_.__value_.__l.__size_;
        v126 = strlen(v123);
        std::string::basic_string[abi:ne180100]((uint64_t)&v197, v125 + v126);
        if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v127 = &v197;
        else
          v127 = (std::string *)v197.__r_.__value_.__r.__words[0];
        if (v125)
        {
          if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v128 = &v199;
          else
            v128 = (std::string *)v199.__r_.__value_.__r.__words[0];
          memmove(v127, v128, v125);
        }
        v129 = (char *)v127 + v125;
        if (v126)
          memmove(v129, v124, v126);
        v129[v126] = 0;
        objc_msgSend(*(id *)(a1 + 32), "stringByAppendingPathComponent:", v122);
        v130 = (void *)objc_claimAutoreleasedReturnValue();
        v131 = HIBYTE(v197.__r_.__value_.__r.__words[2]);
        if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v132 = &v197;
        else
          v132 = (std::string *)v197.__r_.__value_.__r.__words[0];
        if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v133 = &v200;
        else
          v133 = (std::string *)v200.__r_.__value_.__r.__words[0];
        if ((v200.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v134 = HIBYTE(v200.__r_.__value_.__r.__words[2]);
        else
          v134 = v200.__r_.__value_.__l.__size_;
        if (v134)
        {
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v131 = v197.__r_.__value_.__l.__size_;
          if (v131 >= v134)
          {
            v135 = (char *)v132 + v131;
            v136 = v133->__r_.__value_.__s.__data_[0];
            v137 = v132;
            do
            {
              v138 = v131 - v134;
              if (v138 == -1)
                break;
              v139 = (char *)memchr(v137, v136, v138 + 1);
              if (!v139)
                break;
              v140 = v139;
              if (!memcmp(v139, v133, v134))
              {
                if (v140 == v135 || v140 - (char *)v132 == -1)
                  break;
                goto LABEL_237;
              }
              v137 = (std::string *)(v140 + 1);
              v131 = v135 - (v140 + 1);
            }
            while (v131 >= v134);
          }
        }
        else
        {
LABEL_237:
          objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
          v141 = (void *)objc_claimAutoreleasedReturnValue();
          if ((v197.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v142 = &v197;
          else
            v142 = (std::string *)v197.__r_.__value_.__r.__words[0];
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v142);
          v143 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v141, "copyItemAtPath:toPath:error:", v143, v130, 0);

        }
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v197.__r_.__value_.__l.__data_);
      }
      v120 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", v209, &v208, 16);
    }
    while (v120);
  }

  if (!v167)
  {
    LODWORD(v197.__r_.__value_.__l.__data_) = 0;
    Espresso::create_context((int *)&v197, &v195);
    *(_BYTE *)(v195 + 53) = 1;
    if (*(_QWORD *)a1)
      v144 = (std::string *)(*(_QWORD *)a1 + 592);
    else
      v144 = &__str;
    Espresso::load_network((uint64_t)v144, &v195, 0, 0, &v193);
    v145 = (std::__shared_weak_count *)v194;
    v192[0] = v193;
    v192[1] = v194;
    if (v194)
    {
      v146 = (unint64_t *)(v194 + 8);
      do
        v147 = __ldxr(v146);
      while (__stxr(v147 + 1, v146));
    }
    v148 = *(void **)(a1 + 32);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v191, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      v191 = __str;
    get_dump_filename(&v191);
    v149 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v148, "stringByAppendingPathComponent:", v149);
    v150 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    std::string::basic_string[abi:ne180100]<0>(&v197, (char *)objc_msgSend(v150, "UTF8String"));
    std::string::basic_string[abi:ne180100]<0>(v189, "");
    std::string::basic_string[abi:ne180100]<0>(v187, "");
    Espresso::dump_network(v192, &v197, (uint64_t)v189, (uint64_t)v187);
    if (v188 < 0)
      operator delete(v187[0]);
    if (v190 < 0)
      operator delete(v189[0]);
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);

    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v191.__r_.__value_.__l.__data_);
    if (v145)
    {
      p_shared_owners = (unint64_t *)&v145->__shared_owners_;
      do
        v152 = __ldaxr(p_shared_owners);
      while (__stlxr(v152 - 1, p_shared_owners));
      if (!v152)
      {
        ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
        std::__shared_weak_count::__release_weak(v145);
      }
    }
    v153 = (std::__shared_weak_count *)v194;
    if (v194)
    {
      v154 = (unint64_t *)(v194 + 8);
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
        std::__shared_weak_count::__release_weak(v153);
      }
    }
    v156 = v196;
    if (v196)
    {
      v157 = (unint64_t *)&v196->__shared_owners_;
      do
        v158 = __ldaxr(v157);
      while (__stlxr(v158 - 1, v157));
      if (!v158)
      {
        ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
        std::__shared_weak_count::__release_weak(v156);
      }
    }
  }

  if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v199.__r_.__value_.__l.__data_);
  v100 = a1;
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v200.__r_.__value_.__l.__data_);
LABEL_282:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  Espresso::espresso_os_log_subsystem(v98, v99);
  v159 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
  {
    v160 = objc_msgSend(*(id *)(v100 + 32), "UTF8String");
    LODWORD(v208.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v208.__r_.__value_.__r.__words + 4) = v160;
    _os_log_impl(&dword_190DAF000, v159, OS_LOG_TYPE_INFO, "Test data written to: %s", (uint8_t *)&v208, 0xCu);
  }

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v186 < 0)
    operator delete(v184);
  return a1;
}

void sub_19143B5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, id *a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,void *a63)
{
  void *__p;
  char a72;
  void *a73;
  char a74;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a57);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a59);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)&a61);

  if (a72 < 0)
    operator delete(__p);
  if (a74 < 0)
    operator delete(a73);
  if (a26 < 0)
    operator delete(a21);

  if (a41 < 0)
    operator delete(a36);
  if (a47 < 0)
    operator delete(a42);

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)a20);
  _Unwind_Resume(a1);
}

void Espresso::tracer::save_frames(Espresso::tracer *this)
{
  void *v2;
  void *v3;
  id v4;
  Espresso *v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = (void *)objc_opt_new();
  objc_msgSend(v2, "setObject:forKeyedSubscript:", *((_QWORD *)this + 10), CFSTR("frames"));
  v9 = 0;
  objc_msgSend(MEMORY[0x1E0CB36D8], "dataWithJSONObject:options:error:", v2, 1, &v9);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v9;
  v5 = (Espresso *)objc_msgSend(v3, "writeToFile:atomically:", *((_QWORD *)this + 6), 1);
  if ((v5 & 1) == 0)
  {
    Espresso::espresso_os_log_subsystem(v5, v6);
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v8 = objc_msgSend(*((id *)this + 6), "UTF8String");
      *(_DWORD *)buf = 136315138;
      v11 = v8;
      _os_log_error_impl(&dword_190DAF000, v7, OS_LOG_TYPE_ERROR, "Tracer cannot write file: %s", buf, 0xCu);
    }

  }
  fflush(*((FILE **)this + 2));

}

void sub_19143BB1C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void Espresso::tracer::trace_blob(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  std::vector<int> __p;
  _BYTE v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v7 = a2;
  v8 = 0;
  v9 = *(void **)(*(_QWORD *)a4 + 24);
  v10 = *(int *)(*(_QWORD *)a4 + 8);
  do
  {
    v10 *= *(int *)(*(_QWORD *)a4 + 12 + v8);
    v8 += 4;
  }
  while (v8 != 12);
  Espresso::layer_nd_shape::layer_nd_shape((uint64_t)v18, (const Espresso::layer_shape *)(a4 + 16), 0);
  v11 = *(char *)(a3 + 23);
  v12 = *(_QWORD *)a3;
  Espresso::layer_nd_shape::shape_vector(&__p, (uint64_t)v18);
  if (v11 >= 0)
    v13 = a3;
  else
    v13 = v12;
  Espresso::tracer::trace_blob_data(a1, v13, v9, 4 * v10, (uint64_t *)&__p, 0);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  if (*(char *)(a3 + 23) >= 0)
    v15 = a3;
  else
    v15 = *(_QWORD *)a3;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v15);
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setObject:forKeyedSubscript:", v14, v16);

  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }

}

void sub_19143BC90(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, __int128 buf)
{
  void *v13;
  void *v14;
  void *v15;
  Espresso *v18;
  const char *v19;
  NSObject *v20;
  uint64_t v21;

  if (__p)
    operator delete(__p);
  if (a2 == 1)
  {
    v18 = (Espresso *)__cxa_begin_catch(a1);
    Espresso::espresso_os_log_subsystem(v18, v19);
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = (*(uint64_t (**)(Espresso *))(*(_QWORD *)v18 + 16))(v18);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v21;
      _os_log_error_impl(&dword_190DAF000, v20, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x19143BC54);
  }

  _Unwind_Resume(a1);
}

id Espresso::tracer::trace_blob_data(uint64_t a1, uint64_t a2, void *a3, size_t a4, uint64_t *a5, uint64_t a6)
{
  void *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *__ptr;
  uint64_t v24;
  _QWORD v25[6];
  _QWORD v26[6];
  _QWORD v27[7];
  _QWORD v28[9];

  __ptr = a3;
  v28[7] = *MEMORY[0x1E0C80C00];
  v11 = (void *)objc_opt_new();
  v12 = (void *)objc_opt_new();
  v13 = *a5;
  if (a5[1] != *a5)
  {
    v14 = 0;
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *(unsigned int *)(v13 + 4 * v14), __ptr);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "addObject:", v15);

      ++v14;
      v13 = *a5;
    }
    while (v14 < (a5[1] - *a5) >> 2);
  }
  if (a6)
  {
    v27[0] = CFSTR("name");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v28[0] = v16;
    v28[1] = CFSTR("image");
    v27[1] = CFSTR("kind");
    v27[2] = CFSTR("file");
    v28[2] = CFSTR("test_data.json.bin");
    v27[3] = CFSTR("offset");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 24));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v28[3] = v17;
    v27[4] = CFSTR("size");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v28[4] = v18;
    v28[5] = v12;
    v27[5] = CFSTR("shape");
    v27[6] = CFSTR("row_bytes");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a6);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v28[6] = v19;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v28, v27, 7);
    v20 = objc_claimAutoreleasedReturnValue();

    v21 = (void *)v20;
  }
  else
  {
    v25[0] = CFSTR("name");
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a2);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v26[0] = v16;
    v26[1] = CFSTR("tensor");
    v25[1] = CFSTR("kind");
    v25[2] = CFSTR("file");
    v26[2] = CFSTR("test_data.json.bin");
    v25[3] = CFSTR("offset");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 24));
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    v26[3] = v17;
    v25[4] = CFSTR("size");
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a4);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v25[5] = CFSTR("shape");
    v26[4] = v18;
    v26[5] = v12;
    objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", v26, v25, 6);
    v19 = v11;
    v21 = (void *)objc_claimAutoreleasedReturnValue();
  }

  if (fwrite(__ptr, a4, 1uLL, *(FILE **)(a1 + 16)) != 1)
  {
    v24 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
    Espresso::throw_exception_selector<Espresso::invalid_state_error,char const*>("Cannot write file: %s", &v24);
  }
  *(_QWORD *)(a1 + 24) += a4;

  return v21;
}

void sub_19143C074(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void Espresso::tracer::~tracer(Espresso::tracer *this)
{
  Espresso::tracer::save_frames(this);
  fclose(*((FILE **)this + 2));

  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

__n128 __Block_byref_object_copy__3626(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

uint64_t __Block_byref_object_dispose__3627(uint64_t a1)
{
  return std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 48);
}

uint64_t ___ZN8Espresso6tracer11trace_blobsIbEEP19NSMutableDictionaryRKNSt3__13mapINS4_12basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEET_NS4_4lessISB_EENS9_INS4_4pairIKSB_SC_EEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a2, *(_QWORD *)(v2 + 8) + 48);
}

uint64_t std::pair<std::string const,EspressoLight::input_image_buffers>::~pair(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 112);
  if (v2)
  {
    *(_QWORD *)(a1 + 120) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<vImage_Buffer>::__init_with_size[abi:ne180100]<vImage_Buffer*,vImage_Buffer*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<vImage_Buffer>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19143C238(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<vImage_Buffer>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Espresso::ANECompilerEngine::blob_container::ane_blob_mapped_shape>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::pair<std::string const,EspressoLight::input_cvpixel_buffers_t>::~pair(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 136);
  std::vector<EspressoLight::input_cvpixel_buffers_t::cvpixel_buffer_or_mtltexture>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void Espresso::tracer::add_frame<espresso_buffer_t>(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  void *v8;
  void *v9;
  char **v10;
  char *v11[2];
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;

  v8 = (void *)objc_opt_new();
  if (*((char *)a4 + 23) < 0)
  {
    if (!a4[1])
      goto LABEL_7;
    a4 = (uint64_t *)*a4;
    goto LABEL_6;
  }
  if (*((_BYTE *)a4 + 23))
  {
LABEL_6:
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", a4);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "setObject:forKeyedSubscript:", v9, CFSTR("function_name"));

  }
LABEL_7:
  objc_msgSend(*(id *)(a1 + 80), "addObject:", v8);

  std::string::basic_string[abi:ne180100]<0>(__p, "inputs");
  Espresso::tracer::set_attachment<espresso_buffer_t>(a1, (uint64_t *)__p, a2);
  if (v17 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v14, "outputs");
  Espresso::tracer::set_attachment<espresso_buffer_t>(a1, (uint64_t *)v14, a3);
  if (v15 < 0)
    operator delete(v14[0]);
  std::string::basic_string[abi:ne180100]<0>(v12, "ground_truths");
  v11[0] = 0;
  v11[1] = 0;
  v10 = v11;
  Espresso::tracer::set_attachment<espresso_buffer_t>(a1, (uint64_t *)v12, &v10);
  std::__tree<std::__value_type<std::string,std::pair<int,int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<int,int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<int,int>>>>::destroy(v11[0]);
  if (v13 < 0)
    operator delete(v12[0]);
}

