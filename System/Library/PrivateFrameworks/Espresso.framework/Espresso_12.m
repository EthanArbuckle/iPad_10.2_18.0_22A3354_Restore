void sub_1912874E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  void *v61;
  int v62;
  uint64_t v63;

  if (*(char *)(v63 - 169) < 0)
    operator delete(*(void **)(v63 - 192));
  if (*(char *)(v63 - 97) < 0)
  {
    operator delete(*(void **)(v63 - 120));
    if ((v62 & 1) == 0)
    {
LABEL_8:
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a37);
      if (__p)
        operator delete(__p);
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a50);
      if (a60)
      {
        a61 = (uint64_t)a60;
        operator delete(a60);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

void sub_191287858(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35)
{
  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  JUMPOUT(0x19128782CLL);
}

void sub_191287888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  if (a47)
    JUMPOUT(0x191287834);
  JUMPOUT(0x191287838);
}

void nitro::nitro_builtins::Concat(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void **v18;
  void *v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  double *v37;
  int v38;
  _QWORD *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  double v45;
  _DWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  double v49;
  float *v50;
  float v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  void *v64;
  unint64_t *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const nitro::ndarray_container *v73;
  uint64_t v74;
  void *v75;
  void *v76;
  uint64_t v77;
  void *v78;
  void *v79;
  _QWORD *v80;
  void *v81;
  void *v82;
  float *v83;
  uint64_t *v84;
  std::__shared_weak_count *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  void *__p[2];
  uint64_t v95;
  uint64_t v96;
  int64x2_t v97;
  unint64_t v98;

  v4 = (_QWORD *)*a1;
  v3 = (_QWORD *)a1[1];
  v5 = (uint64_t)v3 - *a1;
  v6 = v5 >> 5;
  v90 = v5 >> 5;
  if ((unint64_t)v5 <= 0x3F)
  {
    v84 = &v90;
    nitro::nitro_builtins::Concat(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
  }
  if (v3 != v4)
  {
    if (v6 <= 1)
      v8 = 1;
    else
      v8 = v5 >> 5;
    v9 = v4;
    do
    {
      if (*v9)
        nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
      v9 += 4;
      --v8;
    }
    while (v8);
  }
  if (v4[4 * v6 - 4])
    nitro::nitro_variable::value(void)const::{lambda(void)#1}::operator()();
  v10 = nitro::flexible_type_converter<int>::get((uint64_t)&v90, (unsigned __int8 *)&v4[4 * v6 - 2]);
  v97 = 0uLL;
  v98 = 0;
  v11 = (_QWORD *)*a1;
  if (a1[1] - *a1 != 32)
  {
    v34 = 0;
    while (1)
    {
      if (v11[4 * v34])
        nitro::nitro_variable::value(void)const::{lambda(void)#1}::operator()();
      v36 = &v11[4 * v34];
      v37 = (double *)(v36 + 2);
      v38 = *((unsigned __int8 *)v36 + 24);
      if (!v38)
      {
        v45 = *v37;
        v46 = operator new(4uLL);
        v81 = v46;
        *v46 = LODWORD(v45);
        v82 = v46 + 1;
        v83 = (float *)(v46 + 1);
        v47 = operator new(8uLL);
        v77 = 0;
        v78 = v47;
        *v47 = 1;
        v79 = v47 + 1;
        v80 = v47 + 1;
        v75 = 0;
        v76 = 0;
        nitro::ndarray<int>::ndarray((uint64_t)&v84, (uint64_t)&v81, (char **)&v78, (char **)&v75, 0);
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v90, &v84);
        v48 = v97.i64[1];
        if (v97.i64[1] >= v98)
        {
          v97.i64[1] = (uint64_t)std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container>(&v97, (uint64_t)&v90);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)v97.i64[1] = v90;
          *(_OWORD *)(v48 + 8) = v91;
          v91 = 0uLL;
          *(_QWORD *)(v48 + 32) = 0;
          *(_QWORD *)(v48 + 40) = 0;
          *(_QWORD *)(v48 + 24) = 0;
          *(_OWORD *)(v48 + 24) = v92;
          *(_QWORD *)(v48 + 40) = v93;
          *(_QWORD *)(v48 + 48) = 0;
          v92 = 0uLL;
          v93 = 0;
          *(_QWORD *)(v48 + 56) = 0;
          *(_QWORD *)(v48 + 64) = 0;
          *(_OWORD *)(v48 + 48) = *(_OWORD *)__p;
          *(_QWORD *)(v48 + 64) = v95;
          __p[0] = 0;
          __p[1] = 0;
          v95 = 0;
          *(_QWORD *)(v48 + 72) = v96;
          v97.i64[1] = v48 + 80;
        }
        if ((_QWORD)v92)
        {
          *((_QWORD *)&v92 + 1) = v92;
          operator delete((void *)v92);
        }
        v54 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
        if (!*((_QWORD *)&v91 + 1))
          goto LABEL_68;
        v55 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
          v57 = v88;
          if (v88)
          {
LABEL_69:
            v89 = v57;
            operator delete(v57);
          }
        }
        else
        {
LABEL_68:
          v57 = v88;
          if (v88)
            goto LABEL_69;
        }
        if (v86)
        {
          v87 = v86;
          operator delete(v86);
        }
        v58 = v85;
        if (!v85)
          goto LABEL_92;
        p_shared_owners = (unint64_t *)&v85->__shared_owners_;
        do
          v60 = __ldaxr(p_shared_owners);
        while (__stlxr(v60 - 1, p_shared_owners));
LABEL_91:
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
          v66 = v75;
          if (v75)
          {
LABEL_93:
            v76 = v66;
            operator delete(v66);
          }
        }
        else
        {
LABEL_92:
          v66 = v75;
          if (v75)
            goto LABEL_93;
        }
        if (v78)
        {
          v79 = v78;
          operator delete(v78);
        }
        if (v81)
        {
          v82 = v81;
          operator delete(v81);
        }
        goto LABEL_47;
      }
      if (v38 == 1)
      {
        v49 = *v37;
        v50 = (float *)operator new(4uLL);
        v51 = v49;
        v81 = v50;
        *v50 = v51;
        v82 = v50 + 1;
        v83 = v50 + 1;
        v52 = operator new(8uLL);
        v77 = 0;
        v78 = v52;
        *v52 = 1;
        v79 = v52 + 1;
        v80 = v52 + 1;
        v75 = 0;
        v76 = 0;
        nitro::ndarray<float>::ndarray((uint64_t)&v84, (uint64_t)&v81, (char **)&v78, (char **)&v75, 0);
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v90, &v84);
        v53 = v97.i64[1];
        if (v97.i64[1] >= v98)
        {
          v97.i64[1] = (uint64_t)std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container>(&v97, (uint64_t)&v90);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_DWORD *)v97.i64[1] = v90;
          *(_OWORD *)(v53 + 8) = v91;
          v91 = 0uLL;
          *(_QWORD *)(v53 + 32) = 0;
          *(_QWORD *)(v53 + 40) = 0;
          *(_QWORD *)(v53 + 24) = 0;
          *(_OWORD *)(v53 + 24) = v92;
          *(_QWORD *)(v53 + 40) = v93;
          *(_QWORD *)(v53 + 48) = 0;
          v92 = 0uLL;
          v93 = 0;
          *(_QWORD *)(v53 + 56) = 0;
          *(_QWORD *)(v53 + 64) = 0;
          *(_OWORD *)(v53 + 48) = *(_OWORD *)__p;
          *(_QWORD *)(v53 + 64) = v95;
          __p[0] = 0;
          __p[1] = 0;
          v95 = 0;
          *(_QWORD *)(v53 + 72) = v96;
          v97.i64[1] = v53 + 80;
        }
        if ((_QWORD)v92)
        {
          *((_QWORD *)&v92 + 1) = v92;
          operator delete((void *)v92);
        }
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
        if (!*((_QWORD *)&v91 + 1))
          goto LABEL_84;
        v62 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
          v64 = v88;
          if (v88)
          {
LABEL_85:
            v89 = v64;
            operator delete(v64);
          }
        }
        else
        {
LABEL_84:
          v64 = v88;
          if (v88)
            goto LABEL_85;
        }
        if (v86)
        {
          v87 = v86;
          operator delete(v86);
        }
        v58 = v85;
        if (v85)
        {
          v65 = (unint64_t *)&v85->__shared_owners_;
          do
            v60 = __ldaxr(v65);
          while (__stlxr(v60 - 1, v65));
          goto LABEL_91;
        }
        goto LABEL_92;
      }
      if (v38 == 9)
      {
        v39 = *(_QWORD **)v37;
        v41 = (char *)v39[4];
        v40 = (char *)v39[5];
        if (v40 != v41)
        {
          if (v39[2])
            break;
        }
      }
LABEL_47:
      ++v34;
      v11 = (_QWORD *)*a1;
      if (v34 >= ((uint64_t)(a1[1] - *a1) >> 5) - 1)
        goto LABEL_11;
    }
    v42 = v40 - v41 - 8;
    if (v42 >= 8)
    {
      v67 = (v42 >> 3) + 1;
      v44 = &v41[8 * (v67 & 0x3FFFFFFFFFFFFFFELL)];
      v68 = v41 + 8;
      v69 = v67 & 0x3FFFFFFFFFFFFFFELL;
      v70 = 1;
      v71 = 1;
      do
      {
        v70 *= *(v68 - 1);
        v71 *= *v68;
        v68 += 2;
        v69 -= 2;
      }
      while (v69);
      v43 = v71 * v70;
      if (v67 == (v67 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_108:
        if (v43)
        {
          v73 = (const nitro::ndarray_container *)(v39 + 1);
          v74 = v97.i64[1];
          if (v97.i64[1] >= v98)
          {
            v35 = std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(&v97, v73);
          }
          else
          {
            nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v97.i64[1], v73);
            v35 = v74 + 80;
          }
          v97.i64[1] = v35;
        }
        goto LABEL_47;
      }
    }
    else
    {
      v43 = 1;
      v44 = (char *)v39[4];
    }
    do
    {
      v72 = *(_QWORD *)v44;
      v44 += 8;
      v43 *= v72;
    }
    while (v44 != v40);
    goto LABEL_108;
  }
LABEL_11:
  nitro::ndarray_container::concat((nitro::ndarray_container **)&v97, v10, (nitro::ndarray_container *)&v90);
  v12 = operator new();
  *(_QWORD *)v12 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v12 + 8));
  *(_QWORD *)v12 = 1;
  *(_DWORD *)(v12 + 8) = v90;
  v13 = v91;
  v91 = 0uLL;
  v14 = *(std::__shared_weak_count **)(v12 + 24);
  *(_OWORD *)(v12 + 16) = v13;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v18 = (void **)(v12 + 32);
  v17 = *(void **)(v12 + 32);
  if (v17)
  {
    *(_QWORD *)(v12 + 40) = v17;
    operator delete(v17);
    *v18 = 0;
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
  }
  v20 = (void **)(v12 + 56);
  v19 = *(void **)(v12 + 56);
  *(_OWORD *)(v12 + 32) = v92;
  *(_QWORD *)(v12 + 48) = v93;
  v93 = 0;
  v92 = 0uLL;
  if (v19)
  {
    *(_QWORD *)(v12 + 64) = v19;
    operator delete(v19);
    *v20 = 0;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 72) = 0;
  }
  *(_OWORD *)(v12 + 56) = *(_OWORD *)__p;
  v21 = v95;
  v22 = v96;
  __p[1] = 0;
  v95 = 0;
  __p[0] = 0;
  *(_QWORD *)(v12 + 72) = v21;
  *(_QWORD *)(v12 + 80) = v22;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = v12;
  *(_BYTE *)(a2 + 24) = 9;
  do
    v23 = __ldaxr((unint64_t *)v12);
  while (__stlxr(v23 + 1, (unint64_t *)v12));
  do
  {
    v24 = __ldaxr((unint64_t *)v12);
    v25 = v24 - 1;
  }
  while (__stlxr(v25, (unint64_t *)v12));
  if (!v25)
  {
    v26 = *v20;
    if (*v20)
    {
      *(_QWORD *)(v12 + 64) = v26;
      operator delete(v26);
    }
    v27 = *v18;
    if (*v18)
    {
      *(_QWORD *)(v12 + 40) = v27;
      operator delete(v27);
    }
    v28 = *(std::__shared_weak_count **)(v12 + 24);
    if (v28)
    {
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    MEMORY[0x19401CD90](v12, 0x10B0C4002311774);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v92)
  {
    *((_QWORD *)&v92 + 1) = v92;
    operator delete((void *)v92);
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v90 = (uint64_t)&v97;
  std::vector<nitro::ndarray_container>::__destroy_vector::operator()[abi:ne180100]((void ***)&v90);
}

void sub_191288008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 120) = v27;
  a27 = v28 - 128;
  std::vector<nitro::ndarray_container>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Shape(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  int32x4_t *v8;
  int32x4_t *v9;
  int32x4_t *v10;
  int32x4_t *v11;
  unint64_t v12;
  int32x4_t *v13;
  int32x4_t *v14;
  uint64_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  void *__p[2];
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  int32x4_t *v46;
  int32x4_t *v47;
  __int8 *v48;
  int32x4_t *v49;
  int32x4_t *v50;
  int32x4_t *v51;

  v4 = *(_QWORD *)this;
  v50 = 0;
  v51 = 0;
  v49 = 0;
  v6 = *(_BYTE **)(v4 + 32);
  v5 = *(_BYTE **)(v4 + 40);
  v7 = v5 - v6;
  if (v5 == v6)
  {
    v46 = 0;
    v47 = 0;
    v48 = 0;
  }
  else
  {
    if (v7 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v8 = (int32x4_t *)operator new(v5 - v6);
    v9 = (int32x4_t *)((char *)v8 + 8 * (v7 >> 3));
    v49 = v8;
    v51 = v9;
    memcpy(v8, v6, v7);
    v50 = v9;
    v47 = 0;
    v10 = (int32x4_t *)operator new((unint64_t)v7 >> 1);
    v46 = v10;
    v48 = &v10->i8[4 * (v7 >> 3)];
    v11 = v10;
    if ((unint64_t)(v7 - 8) < 0x38)
      goto LABEL_38;
    v12 = ((unint64_t)(v7 - 8) >> 3) + 1;
    v11 = (int32x4_t *)((char *)v10 + 4 * (v12 & 0x3FFFFFFFFFFFFFF8));
    v13 = v10 + 1;
    v14 = v8 + 2;
    v15 = v12 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v17 = v14[-2];
      v16 = v14[-1];
      v19 = *v14;
      v18 = v14[1];
      v14 += 4;
      v13[-1] = vuzp1q_s32(v17, v16);
      *v13 = vuzp1q_s32(v19, v18);
      v13 += 2;
      v15 -= 8;
    }
    while (v15);
    v8 = (int32x4_t *)((char *)v8 + 8 * (v12 & 0x3FFFFFFFFFFFFFF8));
    if (v12 != (v12 & 0x3FFFFFFFFFFFFFF8))
    {
LABEL_38:
      do
      {
        v20 = v8->i64[0];
        v8 = (int32x4_t *)((char *)v8 + 8);
        v11->i32[0] = v20;
        v11 = (int32x4_t *)((char *)v11 + 4);
      }
      while (v8 != v9);
    }
    v47 = v11;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v39, (uint64_t)&v46, (char **)&v36, (char **)&v33, 0);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 9;
  v21 = operator new();
  *(_QWORD *)v21 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v21 + 8));
  *(_QWORD *)a2 = v21;
  *(_QWORD *)v21 = 1;
  *(_DWORD *)(v21 + 8) = v39;
  v22 = v40;
  v40 = 0uLL;
  v23 = *(std::__shared_weak_count **)(v21 + 24);
  *(_OWORD *)(v21 + 16) = v22;
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = *(void **)(v21 + 32);
  if (v26)
  {
    *(_QWORD *)(v21 + 40) = v26;
    operator delete(v26);
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 48) = 0;
  }
  v27 = *(void **)(v21 + 56);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)__p;
  *(_QWORD *)(v21 + 48) = v42;
  __p[1] = 0;
  v42 = 0;
  __p[0] = 0;
  if (v27)
  {
    *(_QWORD *)(v21 + 64) = v27;
    operator delete(v27);
    *(_QWORD *)(v21 + 56) = 0;
    *(_QWORD *)(v21 + 64) = 0;
    *(_QWORD *)(v21 + 72) = 0;
    v27 = __p[0];
  }
  *(_OWORD *)(v21 + 56) = v43;
  v28 = v44;
  v29 = v45;
  v44 = 0;
  v43 = 0uLL;
  *(_QWORD *)(v21 + 72) = v28;
  *(_QWORD *)(v21 + 80) = v29;
  if (v27)
  {
    __p[1] = v27;
    operator delete(v27);
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
    operator delete(v49);
}

void sub_1912883EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;
  void *v17;
  void *v18;

  v17 = *(void **)(v15 - 96);
  if (v17)
  {
    *(_QWORD *)(v15 - 88) = v17;
    operator delete(v17);
  }
  v18 = *(void **)(v15 - 72);
  if (v18)
    operator delete(v18);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::Slice(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  __n128 v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  int64_t *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void *v28;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int64_t v31;
  char *v32;
  std::vector<int>::pointer v33;
  char *v34;
  unint64_t v35;
  _OWORD *v36;
  std::vector<int>::pointer v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  void *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  void *v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t *v77;
  uint64_t v78;
  void *v79;
  unint64_t *v86;
  uint64_t v87;
  void *v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  file_logger *v93;
  pthread_key_t *started;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *exception;
  char v99;
  std::string *__dst;
  void *v102[2];
  void *v103[2];
  void *v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  void *__p;
  _BYTE *v109;
  uint64_t v110;
  void *v111;
  void *v112;
  _QWORD *v113;
  std::vector<int> v114;
  void *v115;
  _BYTE *v116;
  uint64_t v117;
  _BYTE v118[16];
  std::__shared_weak_count *v119;
  void *v120;
  void *v121;
  void *v122;
  void *v123;
  std::string __str;
  __int128 v125;
  void *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  std::string v130;

  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v118, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  nitro::nitro_builtins::convert_slice_array_to_list(a2, (uint64_t *)&v115);
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a3, &v114);
  v8 = v115;
  v112 = 0;
  v113 = 0;
  v111 = 0;
  v9 = v116 - (_BYTE *)v115;
  if (v116 != v115)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 4;
    v11 = operator new(24 * (v9 >> 4));
    v12 = &v11[3 * v10];
    v111 = v11;
    v113 = v12;
    do
    {
      *v11 = -1;
      v11[1] = -1;
      v11[2] = 1;
      v11 += 3;
    }
    while (v11 != v12);
    v13 = 0;
    v112 = v12;
    do
    {
      v14 = v8[2 * v13];
      v109 = 0;
      v110 = 0;
      __p = 0;
      std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__p, *(_QWORD **)(v14 + 8), *(_QWORD **)(v14 + 16), (uint64_t)(*(_QWORD *)(v14 + 16) - *(_QWORD *)(v14 + 8)) >> 4);
      v15 = (v109 - (_BYTE *)__p) >> 4;
      if (v15 == 2)
      {
        if (nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) == -1
          || nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) == 0x7FFFFFFF)
        {
          __asm { BR              X10 }
        }
        __asm { BR              X10 }
      }
      if (v15 != 3)
      {
        if (*((int *)global_logger() + 169) <= 6)
        {
          v93 = (file_logger *)global_logger();
          started = (pthread_key_t *)file_logger::start_stream(v93, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 730, 1);
          v95 = pthread_getspecific(started[74]);
          if (v95 && *((_BYTE *)v95 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95 + 2, (uint64_t)"Check failed: ", 14);
          v96 = pthread_getspecific(started[74]);
          if (v96 && *((_BYTE *)v96 + 280))
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96 + 2, (uint64_t)"false", 5);
          v97 = pthread_getspecific(started[74]);
          if (v97 && *((_BYTE *)v97 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97 + 2, (uint64_t)":\n", 2);
            file_logger::stream_flush((file_logger *)started);
          }
        }
        log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 730, "Invalid slice specification", v90, v91, v92, v99);
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "assertion failure";
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
      if ((nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p) & 0x80000000) != 0)
      {
        v17 = *((_QWORD *)v120 + v13);
        v16 = v17 + (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p);
      }
      else
      {
        v16 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p);
      }
      if ((nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) & 0x80000000) != 0)
      {
        v19 = *((_QWORD *)v120 + v13);
        v18 = v19 + (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) + 1;
      }
      else if (nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16) == 0x7FFFFFFF)
      {
        v18 = *((_QWORD *)v120 + v13);
      }
      else
      {
        v18 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 16);
      }
      v20 = nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)__p + 32);
      __str.__r_.__value_.__r.__words[0] = v16;
      if (v16 < 0)
      {
        __dst = &__str;
        nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator()();
      }
      __dst = (std::string *)v18;
      v130.__r_.__value_.__r.__words[0] = v16;
      if (v18 < v16)
      {
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)&v130;
        nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator()();
      }
      v21 = (char *)v111;
      v22 = (int64_t *)((char *)v111 + 24 * v13);
      *v22 = v16;
      v22[1] = v18;
      v22[2] = v20;
      v23 = &v21[24 * v13];
      v25 = *((_QWORD *)v23 + 1);
      v24 = v23 + 8;
      if (v25 == 0x7FFFFFFF)
        *v24 = *((_QWORD *)v120 + v13);
      v26 = __p;
      if (__p)
      {
        v27 = (uint64_t)v109;
        v28 = __p;
        if (v109 != __p)
        {
          do
          {
            v27 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v110, v27);
          }
          while ((_BYTE *)v27 != v26);
          v28 = __p;
        }
        v109 = v26;
        operator delete(v28);
      }
      ++v13;
      v8 = v115;
    }
    while (v13 < (v116 - (_BYTE *)v115) >> 4);
  }
  nitro::ndarray_container::slice((uint64_t)v118, (__int128 **)&v111, (uint64_t)&__str, v7);
  begin = v114.__begin_;
  end = v114.__end_;
  v31 = (char *)v114.__end_ - (char *)v114.__begin_;
  if (v114.__end_ != v114.__begin_)
  {
    memset(&v130, 0, sizeof(v130));
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v32 = (char *)operator new(2 * v31);
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
    v130.__r_.__value_.__r.__words[2] = (std::string::size_type)&v32[8 * (v31 >> 2)];
    v33 = begin;
    v34 = v32;
    if ((unint64_t)(v31 - 4) < 0x1C)
      goto LABEL_145;
    v35 = ((unint64_t)(v31 - 4) >> 2) + 1;
    v33 = &begin[v35 & 0x7FFFFFFFFFFFFFF8];
    v34 = &v32[8 * (v35 & 0x7FFFFFFFFFFFFFF8)];
    v36 = v32 + 32;
    v37 = begin + 4;
    v38 = v35 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v39 = *((_OWORD *)v37 - 1);
      *(_QWORD *)&v40 = (int)v39;
      *((_QWORD *)&v40 + 1) = SDWORD1(v39);
      v41 = v40;
      *(_QWORD *)&v40 = SDWORD2(v39);
      *((_QWORD *)&v40 + 1) = SHIDWORD(v39);
      v42 = v40;
      *(_QWORD *)&v40 = (int)*(_OWORD *)v37;
      *((_QWORD *)&v40 + 1) = (int)HIDWORD(*(_QWORD *)v37);
      v43 = v40;
      *(_QWORD *)&v40 = (int)*((_QWORD *)v37 + 1);
      *((_QWORD *)&v40 + 1) = (int)HIDWORD(*(_OWORD *)v37);
      *(v36 - 2) = v41;
      *(v36 - 1) = v42;
      *v36 = v43;
      v36[1] = v40;
      v36 += 4;
      v37 += 8;
      v38 -= 8;
    }
    while (v38);
    if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_145:
      do
      {
        v44 = *v33++;
        *(_QWORD *)v34 = v44;
        v34 += 8;
      }
      while (v33 != end);
    }
    v130.__r_.__value_.__l.__size_ = (std::string::size_type)v34;
    nitro::ndarray_container::squeeze((uint64_t)&__str, &v130, (uint64_t)&__dst);
    LODWORD(__str.__r_.__value_.__l.__data_) = (_DWORD)__dst;
    v45 = *(_OWORD *)v102;
    v102[0] = 0;
    v102[1] = 0;
    v46 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = v45;
    if (v46)
    {
      p_shared_owners = (unint64_t *)&v46->__shared_owners_;
      do
        v48 = __ldaxr(p_shared_owners);
      while (__stlxr(v48 - 1, p_shared_owners));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if ((_QWORD)v125)
    {
      *((_QWORD *)&v125 + 1) = v125;
      operator delete((void *)v125);
    }
    v125 = *(_OWORD *)v103;
    v126 = v104;
    v103[1] = 0;
    v104 = 0;
    v103[0] = 0;
    v49 = (void *)v127;
    if ((_QWORD)v127)
    {
      *((_QWORD *)&v127 + 1) = v127;
      operator delete((void *)v127);
      v49 = v103[0];
    }
    v127 = v105;
    v50 = v106;
    v106 = 0;
    v105 = 0uLL;
    v128 = v50;
    v129 = v107;
    if (v49)
    {
      v103[1] = v49;
      operator delete(v49);
    }
    v51 = (std::__shared_weak_count *)v102[1];
    if (v102[1])
    {
      v52 = (unint64_t *)((char *)v102[1] + 8);
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
    if (v130.__r_.__value_.__r.__words[0])
    {
      v130.__r_.__value_.__l.__size_ = v130.__r_.__value_.__r.__words[0];
      operator delete(v130.__r_.__value_.__l.__data_);
    }
  }
  if (*((_QWORD *)&v125 + 1) == (_QWORD)v125)
  {
    switch(LODWORD(__str.__r_.__value_.__l.__data_))
    {
      case 3:
        nitro::ndarray<int>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
        v70 = v106;
        *(_BYTE *)(a5 + 8) = 0;
        v71 = v104;
        *(_QWORD *)a5 = *((int *)&__dst->__r_.__value_.__l.__data_ + v70);
        if (v71)
        {
          *(_QWORD *)&v105 = v71;
          operator delete(v71);
        }
        if (v102[1])
        {
          v103[0] = v102[1];
          operator delete(v102[1]);
        }
        v72 = (std::__shared_weak_count *)v102[0];
        if (!v102[0])
          goto LABEL_67;
        v73 = (unint64_t *)((char *)v102[0] + 8);
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        break;
      case 5:
        nitro::ndarray<unsigned char>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
        v87 = v106;
        *(_BYTE *)(a5 + 8) = 0;
        v88 = v104;
        *(_QWORD *)a5 = __dst->__r_.__value_.__s.__data_[v87];
        if (v88)
        {
          *(_QWORD *)&v105 = v88;
          operator delete(v88);
        }
        if (v102[1])
        {
          v103[0] = v102[1];
          operator delete(v102[1]);
        }
        v72 = (std::__shared_weak_count *)v102[0];
        if (!v102[0])
          goto LABEL_67;
        v89 = (unint64_t *)((char *)v102[0] + 8);
        do
          v74 = __ldaxr(v89);
        while (__stlxr(v74 - 1, v89));
        break;
      case 9:
        nitro::ndarray<float>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
        v75 = v106;
        *(_BYTE *)(a5 + 8) = 1;
        v76 = v104;
        *(double *)a5 = *((float *)&__dst->__r_.__value_.__l.__data_ + v75);
        if (v76)
        {
          *(_QWORD *)&v105 = v76;
          operator delete(v76);
        }
        if (v102[1])
        {
          v103[0] = v102[1];
          operator delete(v102[1]);
        }
        v72 = (std::__shared_weak_count *)v102[0];
        if (!v102[0])
          goto LABEL_67;
        v77 = (unint64_t *)((char *)v102[0] + 8);
        do
          v74 = __ldaxr(v77);
        while (__stlxr(v74 - 1, v77));
        break;
      case 0xB:
        nitro::ndarray<half>::ndarray((uint64_t)&__dst, (uint64_t)&__str);
        v78 = v106;
        *(_BYTE *)(a5 + 8) = 1;
        v79 = v104;
        _H0 = *((_WORD *)&__dst->__r_.__value_.__l.__data_ + v78);
        __asm { FCVT            D0, H0 }
        *(_QWORD *)a5 = _D0;
        if (v79)
        {
          *(_QWORD *)&v105 = v79;
          operator delete(v79);
        }
        if (v102[1])
        {
          v103[0] = v102[1];
          operator delete(v102[1]);
        }
        v72 = (std::__shared_weak_count *)v102[0];
        if (!v102[0])
          goto LABEL_67;
        v86 = (unint64_t *)((char *)v102[0] + 8);
        do
          v74 = __ldaxr(v86);
        while (__stlxr(v74 - 1, v86));
        break;
      default:
        printf("%d\n", LODWORD(__str.__r_.__value_.__l.__data_));
        nitro::ndarray_container::visit<nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
    }
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_BYTE *)(a5 + 8) = 9;
    v54 = operator new();
    *(_QWORD *)v54 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v54 + 8));
    *(_QWORD *)a5 = v54;
    *(_QWORD *)v54 = 1;
    *(_DWORD *)(v54 + 8) = __str.__r_.__value_.__l.__data_;
    v55 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
    if (__str.__r_.__value_.__r.__words[2])
    {
      v56 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v58 = *(std::__shared_weak_count **)(v54 + 24);
    *(_OWORD *)(v54 + 16) = v55;
    if (v58)
    {
      v59 = (unint64_t *)&v58->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(v54 + 32), (char *)v125, *((char **)&v125 + 1), (uint64_t)(*((_QWORD *)&v125 + 1) - v125) >> 3);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>((_QWORD *)(v54 + 56), (char *)v127, *((char **)&v127 + 1), (uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 3);
    *(_QWORD *)(v54 + 80) = v129;
  }
LABEL_67:
  if ((_QWORD)v127)
  {
    *((_QWORD *)&v127 + 1) = v127;
    operator delete((void *)v127);
  }
  if ((_QWORD)v125)
  {
    *((_QWORD *)&v125 + 1) = v125;
    operator delete((void *)v125);
  }
  v61 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
  if (__str.__r_.__value_.__r.__words[2])
  {
    v62 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v114.__begin_)
  {
    v114.__end_ = v114.__begin_;
    operator delete(v114.__begin_);
  }
  v64 = v115;
  if (v115)
  {
    v65 = (uint64_t)v116;
    v66 = v115;
    if (v116 != v115)
    {
      do
      {
        v65 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v117, v65);
      }
      while ((_BYTE *)v65 != v64);
      v66 = v115;
    }
    v116 = v64;
    operator delete(v66);
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  v67 = v119;
  if (v119)
  {
    v68 = (unint64_t *)&v119->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_191289CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a29);
  if (__p)
  {
    a33 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a38);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a41);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X3>, const nitro::flexible_type *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  void *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  void *v83;
  void *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  _QWORD *v88;
  const nitro::flexible_type *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  _BYTE *v96;
  uint64_t v97;
  void *v98;
  _BYTE *v99;
  uint64_t v100;
  void *v101;
  uint64_t *v102;
  uint64_t *v103;
  void *v104;
  unint64_t v105;
  unint64_t v106;
  void *__p;
  _BYTE *v108;
  uint64_t v109;
  void *v110;
  _BYTE *v111;
  uint64_t v112;
  void *v113;
  char *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t *v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a4 + 8) != 4)
    nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
  if (*((_BYTE *)a5 + 8) != 4)
    nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()();
  nitro::nitro_builtins::convert_slice_array_to_list(a2, (uint64_t *)&v113);
  v12 = *(_QWORD *)a4;
  v111 = 0;
  v112 = 0;
  v110 = 0;
  std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&v110, *(_QWORD **)(v12 + 8), *(_QWORD **)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 4);
  v13 = *(_QWORD *)a5;
  v108 = 0;
  v109 = 0;
  __p = 0;
  std::vector<nitro::flexible_type>::__init_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(&__p, *(_QWORD **)(v13 + 8), *(_QWORD **)(v13 + 16), (uint64_t)(*(_QWORD *)(v13 + 16) - *(_QWORD *)(v13 + 8)) >> 4);
  v14 = v110;
  if (v111 != v110)
  {
    v15 = 0;
    do
    {
      v18 = v14[2 * v15];
      v105 = (v114 - (_BYTE *)v113) >> 4;
      v106 = v18;
      if (v18 >= v105)
      {
        v116 = &v106;
        v117 = &v105;
        nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_2::operator()();
      }
      v19 = *(_QWORD *)(*((_QWORD *)v113 + 2 * v18) + 8);
      switch(*(_BYTE *)(v19 + 8))
      {
        case 2:
          v20 = *(unint64_t **)v19;
          do
          {
            v21 = __ldaxr(v20);
            v22 = v21 - 1;
          }
          while (__stlxr(v22, v20));
          if (!v22)
          {
            v23 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_7;
            if (*((char *)v23 + 31) < 0)
              operator delete((void *)v23[1]);
            v16 = v23;
            v17 = 0x1012C404EF22A49;
            goto LABEL_6;
          }
          break;
        case 3:
          v31 = *(unint64_t **)v19;
          do
          {
            v32 = __ldaxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
          {
            v34 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_7;
            v35 = (void *)v34[1];
            if (v35)
            {
              v34[2] = (unint64_t)v35;
              operator delete(v35);
            }
            v16 = v34;
            v17 = 0x1080C409938AC02;
            goto LABEL_6;
          }
          break;
        case 4:
          v24 = *(unint64_t **)v19;
          do
          {
            v25 = __ldaxr(v24);
            v26 = v25 - 1;
          }
          while (__stlxr(v26, v24));
          if (!v26)
          {
            v27 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_7;
            v28 = v27[1];
            if (v28)
            {
              v29 = v27[2];
              v30 = (void *)v27[1];
              if (v29 != v28)
              {
                do
                {
                  v29 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v27 + 3), v29);
                }
                while (v29 != v28);
                v30 = (void *)v27[1];
              }
              v27[2] = v28;
              goto LABEL_43;
            }
            goto LABEL_44;
          }
          break;
        case 5:
          v36 = *(unint64_t **)v19;
          do
          {
            v37 = __ldaxr(v36);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, v36));
          if (!v38)
          {
            v27 = *(unint64_t **)v19;
            if (!*(_QWORD *)v19)
              goto LABEL_7;
            v39 = v27[1];
            if (v39)
            {
              v40 = v27[2];
              v41 = (void *)v27[1];
              if (v40 != v39)
              {
                do
                  v40 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v40 - 32);
                while (v40 != v39);
                v41 = (void *)v27[1];
              }
              v27[2] = v39;
              v30 = v41;
LABEL_43:
              operator delete(v30);
            }
LABEL_44:
            v16 = v27;
            v17 = 0x1020C405E66F15BLL;
            goto LABEL_6;
          }
          break;
        case 9:
          v42 = *(unint64_t **)v19;
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v45 = *(unint64_t **)v19;
            if (*(_QWORD *)v19)
            {
              v46 = (void *)v45[7];
              if (v46)
              {
                v45[8] = (unint64_t)v46;
                operator delete(v46);
              }
              v47 = (void *)v45[4];
              if (v47)
              {
                v45[5] = (unint64_t)v47;
                operator delete(v47);
              }
              v48 = (std::__shared_weak_count *)v45[3];
              if (v48)
              {
                p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                do
                  v50 = __ldaxr(p_shared_owners);
                while (__stlxr(v50 - 1, p_shared_owners));
                if (!v50)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v48);
                }
              }
              v16 = v45;
              v17 = 0x10B0C4002311774;
LABEL_6:
              MEMORY[0x19401CD90](v16, v17);
            }
LABEL_7:
            *(_QWORD *)v19 = 0;
          }
          break;
        default:
          break;
      }
      ++v15;
      *(_BYTE *)(v19 + 8) = 0;
      *(_QWORD *)v19 = 0;
      v14 = v110;
    }
    while (v15 < (v111 - (_BYTE *)v110) >> 4);
  }
  v51 = __p;
  if (v108 != __p)
  {
    v52 = 0;
    do
    {
      v55 = v51[2 * v52];
      v105 = (v114 - (_BYTE *)v113) >> 4;
      v106 = v55;
      if (v55 >= v105)
      {
        v116 = &v106;
        v117 = &v105;
        nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_3::operator()();
      }
      v56 = *(_QWORD *)(*((_QWORD *)v113 + 2 * v55) + 8);
      switch(*(_BYTE *)(v56 + 24))
      {
        case 2:
          v57 = *(unint64_t **)(v56 + 16);
          do
          {
            v58 = __ldaxr(v57);
            v59 = v58 - 1;
          }
          while (__stlxr(v59, v57));
          if (!v59)
          {
            v60 = *(_QWORD *)(v56 + 16);
            if (!v60)
              goto LABEL_62;
            if (*(char *)(v60 + 31) < 0)
              operator delete(*(void **)(v60 + 8));
            v53 = (_QWORD *)v60;
            v54 = 0x1012C404EF22A49;
            goto LABEL_61;
          }
          break;
        case 3:
          v68 = *(unint64_t **)(v56 + 16);
          do
          {
            v69 = __ldaxr(v68);
            v70 = v69 - 1;
          }
          while (__stlxr(v70, v68));
          if (!v70)
          {
            v71 = *(_QWORD **)(v56 + 16);
            if (!v71)
              goto LABEL_62;
            v72 = (void *)v71[1];
            if (v72)
            {
              v71[2] = v72;
              operator delete(v72);
            }
            v53 = v71;
            v54 = 0x1080C409938AC02;
            goto LABEL_61;
          }
          break;
        case 4:
          v61 = *(unint64_t **)(v56 + 16);
          do
          {
            v62 = __ldaxr(v61);
            v63 = v62 - 1;
          }
          while (__stlxr(v63, v61));
          if (!v63)
          {
            v64 = *(_QWORD **)(v56 + 16);
            if (!v64)
              goto LABEL_62;
            v65 = v64[1];
            if (v65)
            {
              v66 = v64[2];
              v67 = (void *)v64[1];
              if (v66 != v65)
              {
                do
                {
                  v66 -= 16;
                  std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v64 + 3), v66);
                }
                while (v66 != v65);
                v67 = (void *)v64[1];
              }
              v64[2] = v65;
              goto LABEL_98;
            }
            goto LABEL_99;
          }
          break;
        case 5:
          v73 = *(unint64_t **)(v56 + 16);
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            v64 = *(_QWORD **)(v56 + 16);
            if (!v64)
              goto LABEL_62;
            v76 = v64[1];
            if (v76)
            {
              v77 = v64[2];
              v78 = (void *)v64[1];
              if (v77 != v76)
              {
                do
                  v77 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v77 - 32);
                while (v77 != v76);
                v78 = (void *)v64[1];
              }
              v64[2] = v76;
              v67 = v78;
LABEL_98:
              operator delete(v67);
            }
LABEL_99:
            v53 = v64;
            v54 = 0x1020C405E66F15BLL;
            goto LABEL_61;
          }
          break;
        case 9:
          v79 = *(unint64_t **)(v56 + 16);
          do
          {
            v80 = __ldaxr(v79);
            v81 = v80 - 1;
          }
          while (__stlxr(v81, v79));
          if (!v81)
          {
            v82 = *(_QWORD **)(v56 + 16);
            if (v82)
            {
              v83 = (void *)v82[7];
              if (v83)
              {
                v82[8] = v83;
                operator delete(v83);
              }
              v84 = (void *)v82[4];
              if (v84)
              {
                v82[5] = v84;
                operator delete(v84);
              }
              v85 = (std::__shared_weak_count *)v82[3];
              if (v85)
              {
                v86 = (unint64_t *)&v85->__shared_owners_;
                do
                  v87 = __ldaxr(v86);
                while (__stlxr(v87 - 1, v86));
                if (!v87)
                {
                  ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
                  std::__shared_weak_count::__release_weak(v85);
                }
              }
              v53 = v82;
              v54 = 0x10B0C4002311774;
LABEL_61:
              MEMORY[0x19401CD90](v53, v54);
            }
LABEL_62:
            *(_QWORD *)(v56 + 16) = 0;
          }
          break;
        default:
          break;
      }
      *(_BYTE *)(v56 + 24) = 0;
      *(_QWORD *)(v56 + 16) = 0x7FFFFFFFLL;
      ++v52;
      v51 = __p;
    }
    while (v52 < (v108 - (_BYTE *)__p) >> 4);
  }
  v116 = 0;
  LOBYTE(v117) = 4;
  v88 = (_QWORD *)operator new();
  *v88 = 0;
  v88[2] = 0;
  v88[3] = 0;
  v88[1] = 0;
  v116 = v88;
  *v88 = 1;
  std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(v88 + 1, (uint64_t *)v113, (uint64_t *)v114, (v114 - (_BYTE *)v113) >> 4);
  nitro::nitro_builtins::Slice(this, (const nitro::flexible_type *)&v116, a3, v89, a6);
  do
  {
    v90 = __ldaxr(v88);
    v91 = v90 - 1;
  }
  while (__stlxr(v91, v88));
  if (!v91)
  {
    v92 = v116;
    if (v116)
    {
      v93 = v116[1];
      if (v93)
      {
        v94 = v116[2];
        v95 = (void *)v116[1];
        if (v94 != v93)
        {
          do
          {
            v94 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v92 + 3), v94);
          }
          while (v94 != v93);
          v95 = (void *)v92[1];
        }
        v92[2] = v93;
        operator delete(v95);
      }
      MEMORY[0x19401CD90](v92, 0x1020C405E66F15BLL);
    }
  }
  v96 = __p;
  if (__p)
  {
    v97 = (uint64_t)v108;
    v98 = __p;
    if (v108 != __p)
    {
      do
      {
        v97 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v109, v97);
      }
      while ((_BYTE *)v97 != v96);
      v98 = __p;
    }
    v108 = v96;
    operator delete(v98);
  }
  v99 = v110;
  if (v110)
  {
    v100 = (uint64_t)v111;
    v101 = v110;
    if (v111 != v110)
    {
      do
      {
        v100 -= 16;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v112, v100);
      }
      while ((_BYTE *)v100 != v99);
      v101 = v110;
    }
    v111 = v99;
    operator delete(v101);
  }
  v102 = (uint64_t *)v113;
  if (v113)
  {
    v103 = (uint64_t *)v114;
    v104 = v113;
    if (v114 != v113)
    {
      do
      {
        v103 -= 2;
        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v115, (uint64_t)v103);
      }
      while (v103 != v102);
      v104 = v113;
    }
    v114 = (char *)v102;
    operator delete(v104);
  }
}

void sub_19128A8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unint64_t *v22;
  unint64_t v24;
  uint64_t v26;

  do
    v24 = __ldaxr(v22);
  while (__stlxr(v24 - 1, v22));
  if (v24 == 1 && a22 != 0)
  {
    v26 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a22);
    MEMORY[0x19401CD90](v26, 0x1020C405E66F15BLL);
  }
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a13);
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a16);
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Gather(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, __int128 **a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  void *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  int *v24;
  char *v25;
  char *v26;
  int64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  int64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  const void *v46;
  size_t v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  int64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  char *v91;
  __n128 v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  size_t v98;
  __n128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  void *v126[2];
  void *v127[2];
  void *v128;
  void *v129[2];
  void *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  char *v134;
  size_t __idx;
  size_t v136;
  _QWORD *v137;
  void *v138;
  char *v139;
  char *v140;
  __int128 v141;
  void *v142[2];
  void *v143;
  __int128 v144;
  void *v145;
  uint64_t v146;
  void *__p;
  void *v148;
  std::__shared_weak_count *v149;
  void *v150;
  void *v151;
  void *v152;
  void *v153;
  __int128 *v154;
  __int128 *v155;
  __int128 *v156;
  _BYTE __dst[24];
  __int128 v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  v8 = nitro::flexible_type_converter<int>::get((uint64_t)__dst, (unsigned __int8 *)this);
  v9 = *(_QWORD *)a2;
  memset(__dst, 0, sizeof(__dst));
  v126[0] = 0;
  v126[1] = 0;
  v127[0] = 0;
  __p = 0;
  v148 = 0;
  v149 = 0;
  nitro::ndarray<int>::ndarray((uint64_t)&v141, (uint64_t)__dst, (char **)v126, (char **)&__p, 0);
  if (__p)
  {
    v148 = __p;
    operator delete(__p);
  }
  if (v126[0])
  {
    v126[1] = v126[0];
    operator delete(v126[0]);
  }
  if (*(_QWORD *)__dst)
  {
    *(_QWORD *)&__dst[8] = *(_QWORD *)__dst;
    operator delete(*(void **)__dst);
  }
  if (*((unsigned __int8 *)a3 + 8) <= 1u)
  {
    v132 = (void *)0x3FE0000000000000;
    *(_QWORD *)__dst = 0;
    __dst[8] = 0;
    nitro::flexible_type::operator=<double>((uint64_t)__dst, &v132);
    v154 = 0;
    LOBYTE(v155) = 0;
    if (&v154 != a3)
    {
      v154 = *a3;
      LOBYTE(v155) = *((_BYTE *)a3 + 8);
      if (v155 - 2 < 4 || v155 == 9)
      {
        v10 = (unint64_t *)v154;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
    }
    __asm { BR              X10 }
  }
  if (*((_DWORD *)*a3 + 2) == 3)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)__dst, (const nitro::ndarray_container *)((char *)*a3 + 8));
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)*a3 + 2, (uint64_t)__dst);
  nitro::ndarray<int>::ndarray((uint64_t)v126, (uint64_t)__dst);
  v12 = *(_OWORD *)v126;
  v126[0] = 0;
  v126[1] = 0;
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  v141 = v12;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v142[0])
  {
    v142[1] = v142[0];
    operator delete(v142[0]);
  }
  *(_OWORD *)v142 = *(_OWORD *)v127;
  v143 = v128;
  v127[1] = 0;
  v128 = 0;
  v127[0] = 0;
  v16 = (void *)v144;
  if ((_QWORD)v144)
  {
    *((_QWORD *)&v144 + 1) = v144;
    operator delete((void *)v144);
    v16 = v127[0];
  }
  v144 = *(_OWORD *)v129;
  v17 = v130;
  v129[1] = 0;
  v130 = 0;
  v129[0] = 0;
  v145 = v17;
  v146 = v131;
  if (v16)
  {
    v127[1] = v16;
    operator delete(v16);
  }
  v18 = (std::__shared_weak_count *)v126[1];
  if (v126[1])
  {
    v19 = (unint64_t *)((char *)v126[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if ((_QWORD)v160)
  {
    *((_QWORD *)&v160 + 1) = v160;
    operator delete((void *)v160);
  }
  if ((_QWORD)v158)
  {
    *((_QWORD *)&v158 + 1) = v158;
    operator delete((void *)v158);
  }
  v21 = *(std::__shared_weak_count **)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    v22 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (int *)(v9 + 8);
  v26 = (char *)v142[0];
  v25 = (char *)v142[1];
  v27 = (char *)v142[1] - (char *)v142[0];
  v28 = v142[1] == v142[0] || (_QWORD)v141 == 0;
  if (v28)
    goto LABEL_58;
  v29 = v9;
  if ((unint64_t)(v27 - 8) < 8)
  {
    v30 = 1;
    v31 = (uint64_t *)v142[0];
    do
    {
LABEL_51:
      v37 = *v31++;
      v30 *= v37;
    }
    while (v31 != v142[1]);
    goto LABEL_52;
  }
  v32 = ((unint64_t)(v27 - 8) >> 3) + 1;
  v31 = (uint64_t *)((char *)v142[0] + 8 * (v32 & 0x3FFFFFFFFFFFFFFELL));
  v33 = (char *)v142[0] + 8;
  v34 = 1;
  v35 = v32 & 0x3FFFFFFFFFFFFFFELL;
  v36 = 1;
  do
  {
    v34 *= *(v33 - 1);
    v36 *= *v33;
    v33 += 2;
    v35 -= 2;
  }
  while (v35);
  v30 = v36 * v34;
  if (v32 != (v32 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_51;
LABEL_52:
  if (v30)
  {
    v38 = v8;
    v138 = 0;
    v139 = 0;
    v140 = 0;
    v40 = *(_BYTE **)(v9 + 32);
    v39 = *(_BYTE **)(v9 + 40);
    v41 = v39 - v40;
    v125 = v38;
    if (v39 == v40)
    {
      v45 = (char *)(8 * v38);
      v46 = (const void *)(8 * v38 + 8);
      v47 = (8 * v38) ^ 0xFFFFFFFFFFFFFFF8;
    }
    else
    {
      if (v41 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v42 = a5;
      v43 = (char *)operator new(v39 - v40);
      v138 = v43;
      v139 = v43;
      v44 = &v43[8 * (v41 >> 3)];
      v140 = v44;
      memcpy(v43, v40, v41);
      v45 = &v43[8 * v125];
      v46 = v45 + 8;
      v47 = v44 - (v45 + 8);
      v28 = v44 == v45 + 8;
      a5 = v42;
      if (v28)
        goto LABEL_78;
    }
    memmove(v45, v46, v47);
LABEL_78:
    v139 = &v45[v47];
    std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>((unint64_t *)&v138, v45, v26, v25, v27 >> 3);
    nitro::ndarray_container::init_from_shape(*v24, (uint64_t **)&v138, (uint64_t)__dst);
    v63 = *(_QWORD *)(v29 + 32);
    v62 = *(_QWORD *)(v29 + 40);
    v155 = 0;
    v156 = 0;
    v154 = 0;
    v64 = v62 - v63;
    if (v64)
    {
      if ((unint64_t)v64 > 0x5555555555555550)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v65 = v64 >> 3;
      v66 = (__int128 *)operator new(24 * (v64 >> 3));
      v67 = (__int128 *)((char *)v66 + 24 * v65);
      v154 = v66;
      v156 = v67;
      do
      {
        *(_QWORD *)v66 = -1;
        *((_QWORD *)v66 + 1) = -1;
        *((_QWORD *)v66 + 2) = 1;
        v66 = (__int128 *)((char *)v66 + 24);
      }
      while (v66 != v67);
      v155 = v67;
    }
    v136 = 0;
    v137 = 0;
    __idx = 0;
    v68 = v139 - (_BYTE *)v138;
    if (v139 != v138)
    {
      if ((unint64_t)v68 > 0x5555555555555550)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v69 = v68 >> 3;
      v70 = operator new(24 * (v68 >> 3));
      v71 = &v70[3 * v69];
      __idx = (size_t)v70;
      v137 = v71;
      do
      {
        *v70 = -1;
        v70[1] = -1;
        v70[2] = 1;
        v70 += 3;
      }
      while (v70 != v71);
      v136 = (size_t)v71;
    }
    v133 = 0;
    v134 = 0;
    v132 = 0;
    v72 = (char *)v142[1] - (char *)v142[0];
    if (v142[1] == v142[0])
    {
      v73 = 0;
      v74 = 0;
    }
    else
    {
      if (v72 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v73 = (char *)operator new((char *)v142[1] - (char *)v142[0]);
      v74 = &v73[8 * (v72 >> 3)];
      v132 = v73;
      v134 = v74;
      bzero(v73, v72 & 0xFFFFFFFFFFFFFFF8);
      v133 = v74;
    }
    while (1)
    {
      if (v74 == v73)
      {
        v76 = 0;
        goto LABEL_103;
      }
      v75 = (v74 - v73) >> 3;
      if (v75 <= 1)
        v75 = 1;
      if (v75 < 2)
        break;
      v78 = 0;
      v79 = 0;
      v77 = v75 & 0xFFFFFFFFFFFFFFFELL;
      v80 = v73 + 8;
      v81 = (_QWORD *)(v144 + 8);
      v82 = v75 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v78 += *(v81 - 1) * *(v80 - 1);
        v79 += *v81 * *v80;
        v80 += 2;
        v81 += 2;
        v82 -= 2;
      }
      while (v82);
      v76 = v79 + v78;
      if (v75 != v77)
        goto LABEL_101;
LABEL_103:
      v90 = (void *)*(int *)(v141 + 4 * (v146 + v76));
      v126[0] = v90;
      if ((v90 & 0x80000000) != 0)
      {
        __p = v126;
        nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator()();
      }
      v91 = (char *)v154 + 24 * (int)v125;
      *(_QWORD *)v91 = v90;
      v92 = (__n128)xmmword_191A92A20;
      *(_OWORD *)(v91 + 8) = xmmword_191A92A20;
      v93 = v74 - v73;
      if (v74 != v73)
      {
        v94 = 0;
        v95 = v93 >> 3;
        v96 = 24 * v125;
        do
        {
          v97 = *(_QWORD *)&v73[8 * v94];
          v126[0] = (void *)v97;
          if ((v97 & 0x8000000000000000) != 0)
          {
            __p = v126;
            nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
          }
          v98 = __idx + v96;
          *(_QWORD *)v98 = v97;
          v92 = (__n128)xmmword_191A92A20;
          *(_OWORD *)(v98 + 8) = xmmword_191A92A20;
          ++v94;
          v96 += 24;
        }
        while (v94 < v95);
      }
      nitro::ndarray_container::slice((uint64_t)__dst, (__int128 **)&__idx, (uint64_t)v126, v92);
      nitro::ndarray_container::slice((uint64_t)v24, &v154, (uint64_t)&__p, v99);
      nitro::ndarray_container::assign((nitro::ndarray_container *)v126, (const nitro::ndarray_container *)&__p);
      if (v152)
      {
        v153 = v152;
        operator delete(v152);
      }
      if (v150)
      {
        v151 = v150;
        operator delete(v150);
      }
      v100 = v149;
      if (v149)
      {
        v101 = (unint64_t *)&v149->__shared_owners_;
        do
          v102 = __ldaxr(v101);
        while (__stlxr(v102 - 1, v101));
        if (!v102)
        {
          ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
          std::__shared_weak_count::__release_weak(v100);
        }
      }
      if (v129[1])
      {
        v130 = v129[1];
        operator delete(v129[1]);
      }
      if (v127[1])
      {
        v128 = v127[1];
        operator delete(v127[1]);
      }
      v103 = (std::__shared_weak_count *)v127[0];
      if (v127[0])
      {
        v104 = (unint64_t *)((char *)v127[0] + 8);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 - 1, v104));
        if (!v105)
        {
          ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
          std::__shared_weak_count::__release_weak(v103);
        }
      }
      v73 = (char *)v132;
      v74 = v133;
      v106 = (unint64_t)(v133 - (_BYTE *)v132) >> 3;
      if ((int)v106 >= 1)
      {
        v107 = (char *)v142[0];
        v108 = ((unint64_t)(v133 - (_BYTE *)v132) >> 3) + 1;
        while (1)
        {
          v109 = 8 * (v108 - 2);
          v110 = *(_QWORD *)&v73[v109] + 1;
          *(_QWORD *)&v73[v109] = v110;
          if (v110 < *(_QWORD *)&v107[v109])
            break;
          *(_QWORD *)&v73[8 * (v108 - 2)] = 0;
          LODWORD(v106) = v106 - 1;
          if ((unint64_t)--v108 <= 1)
            goto LABEL_136;
        }
        if ((int)v106 > 0)
          continue;
      }
LABEL_136:
      *(_QWORD *)a5 = 0;
      *(_BYTE *)(a5 + 8) = 9;
      v111 = (_QWORD *)operator new();
      *v111 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v111 + 1));
      *(_QWORD *)a5 = v111;
      *v111 = 1;
      *((_DWORD *)v111 + 2) = *(_DWORD *)__dst;
      v113 = *(_QWORD *)&__dst[8];
      v112 = *(_QWORD *)&__dst[16];
      if (*(_QWORD *)&__dst[16])
      {
        v114 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
        do
          v115 = __ldxr(v114);
        while (__stxr(v115 + 1, v114));
      }
      v116 = (std::__shared_weak_count *)v111[3];
      v111[2] = v113;
      v111[3] = v112;
      if (v116)
      {
        v117 = (unint64_t *)&v116->__shared_owners_;
        do
          v118 = __ldaxr(v117);
        while (__stlxr(v118 - 1, v117));
        if (!v118)
        {
          ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
          std::__shared_weak_count::__release_weak(v116);
        }
      }
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v111 + 4, (char *)v158, *((char **)&v158 + 1), (uint64_t)(*((_QWORD *)&v158 + 1) - v158) >> 3);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v111 + 7, (char *)v160, *((char **)&v160 + 1), (uint64_t)(*((_QWORD *)&v160 + 1) - v160) >> 3);
      v111[10] = v162;
      if (v132)
        operator delete(v132);
      if (__idx)
      {
        v136 = __idx;
        operator delete((void *)__idx);
      }
      if (v154)
      {
        v155 = v154;
        operator delete(v154);
      }
      if ((_QWORD)v160)
      {
        *((_QWORD *)&v160 + 1) = v160;
        operator delete((void *)v160);
      }
      if ((_QWORD)v158)
      {
        *((_QWORD *)&v158 + 1) = v158;
        operator delete((void *)v158);
      }
      v119 = *(std::__shared_weak_count **)&__dst[16];
      if (*(_QWORD *)&__dst[16])
      {
        v120 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 - 1, v120));
        if (!v121)
        {
          ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
          std::__shared_weak_count::__release_weak(v119);
        }
      }
      v61 = v138;
      if (v138)
      {
        v139 = (char *)v138;
LABEL_161:
        operator delete(v61);
      }
      goto LABEL_162;
    }
    v76 = 0;
    v77 = 0;
LABEL_101:
    v83 = v75 - v77;
    v84 = 8 * v77;
    v85 = (uint64_t *)(v144 + v84);
    v86 = (uint64_t *)&v73[v84];
    do
    {
      v88 = *v86++;
      v87 = v88;
      v89 = *v85++;
      v76 += v89 * v87;
      --v83;
    }
    while (v83);
    goto LABEL_103;
  }
LABEL_58:
  v48 = *v24;
  v126[0] = 0;
  v126[1] = 0;
  v127[0] = 0;
  nitro::ndarray_container::init_from_shape(v48, (uint64_t **)v126, (uint64_t)__dst);
  *(_QWORD *)a5 = 0;
  *(_BYTE *)(a5 + 8) = 9;
  v49 = operator new();
  *(_QWORD *)v49 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v49 + 8));
  *(_QWORD *)a5 = v49;
  *(_QWORD *)v49 = 1;
  *(_DWORD *)(v49 + 8) = *(_DWORD *)__dst;
  v50 = *(_OWORD *)&__dst[8];
  *(_QWORD *)&__dst[8] = 0;
  *(_QWORD *)&__dst[16] = 0;
  v51 = *(std::__shared_weak_count **)(v49 + 24);
  *(_OWORD *)(v49 + 16) = v50;
  if (v51)
  {
    v52 = (unint64_t *)&v51->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = *(void **)(v49 + 32);
  if (v54)
  {
    *(_QWORD *)(v49 + 40) = v54;
    operator delete(v54);
    *(_QWORD *)(v49 + 32) = 0;
    *(_QWORD *)(v49 + 40) = 0;
    *(_QWORD *)(v49 + 48) = 0;
  }
  v55 = *(void **)(v49 + 56);
  *(_OWORD *)(v49 + 32) = v158;
  *(_QWORD *)(v49 + 48) = v159;
  v159 = 0;
  v158 = 0uLL;
  if (v55)
  {
    *(_QWORD *)(v49 + 64) = v55;
    operator delete(v55);
    *(_QWORD *)(v49 + 56) = 0;
    *(_QWORD *)(v49 + 64) = 0;
    *(_QWORD *)(v49 + 72) = 0;
    v55 = (void *)v158;
  }
  *(_OWORD *)(v49 + 56) = v160;
  v56 = v161;
  v57 = v162;
  v161 = 0;
  v160 = 0uLL;
  *(_QWORD *)(v49 + 72) = v56;
  *(_QWORD *)(v49 + 80) = v57;
  if (v55)
  {
    *((_QWORD *)&v158 + 1) = v55;
    operator delete(v55);
  }
  v58 = *(std::__shared_weak_count **)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    v59 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
  v61 = v126[0];
  if (v126[0])
  {
    v126[1] = v126[0];
    goto LABEL_161;
  }
LABEL_162:
  if ((_QWORD)v144)
  {
    *((_QWORD *)&v144 + 1) = v144;
    operator delete((void *)v144);
  }
  if (v142[0])
  {
    v142[1] = v142[0];
    operator delete(v142[0]);
  }
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
}

void sub_19128C60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  void *v51;

  if (__p)
    operator delete(__p);
  if (a29)
    operator delete(a29);
  v51 = *(void **)(v49 - 216);
  if (v51)
  {
    *(_QWORD *)(v49 - 208) = v51;
    operator delete(v51);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v49 - 192));
  if (a32)
    operator delete(a32);
  nitro::ndarray<float>::~ndarray(&a35);
  _Unwind_Resume(a1);
}

void sub_19128CFD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45)
{
  if (__p)
  {
    a45 = (uint64_t)__p;
    operator delete(__p);
  }
  nitro::ndarray<unsigned char>::concat((uint64_t)&__p, (uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_19128D138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::QuantizeGather(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, __int128 **a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  const nitro::ndarray_container *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  void *v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  float v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  unint64_t v115;
  _QWORD *v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unsigned int v164;
  int v165;
  float v166;
  uint64_t v167;
  BOOL v168;
  int v169;
  double v170;
  unint64_t v171;
  BOOL v172;
  char *v173;
  unint64_t v174;
  unint64_t v175;
  size_t v176;
  unint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  __int128 v185;
  std::__shared_weak_count *v186;
  unint64_t *v187;
  unint64_t v188;
  void *v189;
  void *v190;
  uint64_t v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  unint64_t *v194;
  unint64_t v195;
  std::__shared_weak_count *v196;
  unint64_t *v197;
  unint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  char *v205;
  char *v206;
  char *v207;
  uint64_t v208;
  unint64_t v209;
  char *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  char *v216;
  uint64_t v217;
  void *__p;
  void *v219;
  uint64_t v220;
  void *v221;
  void *v222;
  uint64_t v223;
  void *v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  std::__shared_weak_count *v228;
  void *v229;
  void *v230;
  void *v231;
  void *v232;
  uint64_t v233;
  void *v234;
  char *v235;
  char *v236;
  void *v237;
  char *v238;
  char *v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  void *v242;
  _BYTE *v243;
  void *v244;
  void *v245;
  uint64_t v246;
  int v247;
  __int128 v248;
  __int128 v249;
  void *v250;
  __int128 v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  std::__shared_weak_count *v255;
  unint64_t *v256;
  unint64_t *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;

  v261 = *MEMORY[0x1E0C80C00];
  nitro::nitro_builtins::Gather(this, a2, a3, a4, (uint64_t)&v254);
  v8 = (const nitro::ndarray_container *)(v254 + 8);
  if (*(_DWORD *)(v254 + 8) == 5)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v247, v8);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIhEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v8, (uint64_t)&v247);
  nitro::ndarray<unsigned char>::ndarray((uint64_t)&v240, (uint64_t)&v247);
  if ((_QWORD)v251)
  {
    *((_QWORD *)&v251 + 1) = v251;
    operator delete((void *)v251);
  }
  if ((_QWORD)v249)
  {
    *((_QWORD *)&v249 + 1) = v249;
    operator delete((void *)v249);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
  if (*((_QWORD *)&v248 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  switch((char)v255)
  {
    case 2:
      v12 = (unint64_t *)v254;
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        v15 = (_QWORD *)v254;
        if (v254)
        {
          if (*(char *)(v254 + 31) < 0)
            operator delete(*(void **)(v254 + 8));
          v16 = v15;
          v17 = 0x1012C404EF22A49;
          goto LABEL_62;
        }
      }
      break;
    case 3:
      v25 = (unint64_t *)v254;
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        v28 = (_QWORD *)v254;
        if (v254)
        {
          v29 = *(void **)(v254 + 8);
          if (v29)
          {
            *(_QWORD *)(v254 + 16) = v29;
            operator delete(v29);
          }
          v16 = v28;
          v17 = 0x1080C409938AC02;
          goto LABEL_62;
        }
      }
      break;
    case 4:
      v18 = (unint64_t *)v254;
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        v21 = (_QWORD *)v254;
        if (v254)
        {
          v22 = *(_QWORD *)(v254 + 8);
          if (!v22)
            goto LABEL_47;
          v23 = *(_QWORD *)(v254 + 16);
          v24 = *(void **)(v254 + 8);
          if (v23 != v22)
          {
            do
            {
              v23 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v21 + 3), v23);
            }
            while (v23 != v22);
            v24 = (void *)v21[1];
          }
          v21[2] = v22;
          goto LABEL_46;
        }
      }
      break;
    case 5:
      v30 = (unint64_t *)v254;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        v21 = (_QWORD *)v254;
        if (v254)
        {
          v33 = *(_QWORD *)(v254 + 8);
          if (v33)
          {
            v34 = *(_QWORD *)(v254 + 16);
            v35 = *(void **)(v254 + 8);
            if (v34 != v33)
            {
              do
                v34 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v34 - 32);
              while (v34 != v33);
              v35 = (void *)v21[1];
            }
            v21[2] = v33;
            v24 = v35;
LABEL_46:
            operator delete(v24);
          }
LABEL_47:
          v16 = v21;
          v17 = 0x1020C405E66F15BLL;
          goto LABEL_62;
        }
      }
      break;
    case 9:
      v36 = (unint64_t *)v254;
      do
      {
        v37 = __ldaxr(v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, v36));
      if (!v38)
      {
        v39 = (_QWORD *)v254;
        if (v254)
        {
          v40 = *(void **)(v254 + 56);
          if (v40)
          {
            *(_QWORD *)(v254 + 64) = v40;
            operator delete(v40);
          }
          v41 = (void *)v39[4];
          if (v41)
          {
            v39[5] = v41;
            operator delete(v41);
          }
          v42 = (std::__shared_weak_count *)v39[3];
          if (v42)
          {
            p_shared_owners = (unint64_t *)&v42->__shared_owners_;
            do
              v44 = __ldaxr(p_shared_owners);
            while (__stlxr(v44 - 1, p_shared_owners));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
          v16 = v39;
          v17 = 0x10B0C4002311774;
LABEL_62:
          MEMORY[0x19401CD90](v16, v17);
        }
      }
      break;
    default:
      break;
  }
  if (*(_DWORD *)(*(_QWORD *)a4 + 8) == 9)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v247, (const nitro::ndarray_container *)(*(_QWORD *)a4 + 8));
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(_QWORD *)a4 + 8), (uint64_t)&v247);
  nitro::ndarray<float>::ndarray((uint64_t)&v254, (uint64_t)&v247);
  if ((_QWORD)v251)
  {
    *((_QWORD *)&v251 + 1) = v251;
    operator delete((void *)v251);
  }
  if ((_QWORD)v249)
  {
    *((_QWORD *)&v249 + 1) = v249;
    operator delete((void *)v249);
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
  if (*((_QWORD *)&v248 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v238 = 0;
  v239 = 0;
  v237 = 0;
  v48 = v243 - (_BYTE *)v242;
  if (v243 != v242)
  {
    if (v48 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v49 = (char *)operator new(v243 - (_BYTE *)v242);
    v50 = &v49[8 * (v48 >> 3)];
    v237 = v49;
    v239 = v50;
    bzero(v49, v48 & 0xFFFFFFFFFFFFFFF8);
    v238 = v50;
  }
  v51 = v256;
  v235 = 0;
  v236 = 0;
  v234 = 0;
  v52 = (char *)v257 - (char *)v256;
  if (v257 != v256)
  {
    if (v52 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v53 = (char *)operator new((char *)v257 - (char *)v256);
    v54 = &v53[8 * (v52 >> 3)];
    v234 = v53;
    v236 = v54;
    bzero(v53, v52 & 0xFFFFFFFFFFFFFFF8);
    v235 = v54;
  }
  v215 = *v51;
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v221 = 0;
  v222 = 0;
  v223 = 0;
  __p = 0;
  v219 = 0;
  v220 = 0;
  nitro::ndarray<float>::ndarray((uint64_t)&v247, (uint64_t)&v224, (char **)&v221, (char **)&__p, 0);
  nitro::ndarray<float>::init_from_shape((uint64_t **)&v242, &v227);
  if (v250)
  {
    *(_QWORD *)&v251 = v250;
    operator delete(v250);
  }
  if (*((_QWORD *)&v248 + 1))
  {
    *(_QWORD *)&v249 = *((_QWORD *)&v248 + 1);
    operator delete(*((void **)&v248 + 1));
  }
  v55 = (std::__shared_weak_count *)v248;
  if ((_QWORD)v248)
  {
    v56 = (unint64_t *)(v248 + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  if (__p)
  {
    v219 = __p;
    operator delete(__p);
  }
  if (v221)
  {
    v222 = v221;
    operator delete(v221);
  }
  v213 = a5;
  if (v224)
  {
    v225 = v224;
    operator delete(v224);
  }
  v58 = 0;
  v60 = (char *)v237;
  v59 = v238;
  v62 = (char *)v234;
  v61 = v235;
  v63 = v254;
  v64 = v235 - (_BYTE *)v234;
  v65 = (unint64_t)(v235 - (_BYTE *)v234) >> 3;
  if ((unint64_t)((v235 - (_BYTE *)v234) >> 3) <= 1)
    v66 = 1;
  else
    v66 = (v235 - (_BYTE *)v234) >> 3;
  v67 = (unint64_t)(v238 - (_BYTE *)v237) >> 3;
  if ((unint64_t)((v238 - (_BYTE *)v237) >> 3) <= 1)
    v68 = 1;
  else
    v68 = (v238 - (_BYTE *)v237) >> 3;
  v69 = v227;
  v70 = v240;
  v71 = (char *)v242;
  v72 = 8 * (v65 - (v64 > 7)) + 8;
  v73 = v68 & 0xFFFFFFFFFFFFFFFELL;
  v74 = v66 & 0xFFFFFFFFFFFFFFFELL;
  v206 = (char *)v237 + 8;
  v207 = (char *)v244;
  v205 = (char *)v244 + 8;
  v75 = (v64 >> 3) + 1;
  v214 = ((unint64_t)(v238 - (_BYTE *)v237) >> 3) + 1;
  v216 = (char *)v234 + 8;
  v217 = v75;
  do
  {
    if (v59 == v60)
    {
      v76 = 0;
      goto LABEL_112;
    }
    if (v68 < 2)
    {
      v76 = 0;
      v77 = 0;
LABEL_110:
      v83 = v68 - v77;
      v84 = 8 * v77;
      v85 = &v207[8 * v77];
      v86 = (uint64_t *)&v60[v84];
      do
      {
        v88 = *v86++;
        v87 = v88;
        v89 = *(_QWORD *)v85;
        v85 += 8;
        v76 += v89 * v87;
        --v83;
      }
      while (v83);
      goto LABEL_112;
    }
    v78 = 0;
    v79 = 0;
    v80 = v73;
    v81 = v205;
    v82 = v206;
    do
    {
      v78 += *(v81 - 1) * *(v82 - 1);
      v79 += *v81 * *v82;
      v82 += 2;
      v81 += 2;
      v80 -= 2;
    }
    while (v80);
    v76 = v79 + v78;
    v77 = v73;
    if (v68 != v73)
      goto LABEL_110;
LABEL_112:
    v90 = v258;
    if (v61 == v62)
    {
      v91 = 0;
      goto LABEL_121;
    }
    if (v66 < 2)
    {
      v91 = 0;
      v92 = 0;
LABEL_119:
      v98 = v66 - v92;
      v99 = 8 * v92;
      v100 = &v258[8 * v92];
      v101 = (uint64_t *)&v62[v99];
      do
      {
        v103 = *v101++;
        v102 = v103;
        v104 = *(_QWORD *)v100;
        v100 += 8;
        v91 += v104 * v102;
        --v98;
      }
      while (v98);
      goto LABEL_121;
    }
    v93 = 0;
    v94 = 0;
    v95 = v258 + 8;
    v96 = v74;
    v97 = v216;
    do
    {
      v93 += *(v95 - 1) * *(v97 - 1);
      v94 += *v95 * *v97;
      v97 += 2;
      v95 += 2;
      v96 -= 2;
    }
    while (v96);
    v91 = v94 + v93;
    v92 = v74;
    if (v66 != v74)
      goto LABEL_119;
LABEL_121:
    v105 = (char *)v256;
    v106 = *(float *)(v63 + 4 * (v260 + v91));
    if ((int)v65 >= 1)
    {
      v107 = v75;
      do
      {
        v108 = 8 * (v107 - 2);
        v109 = *(_QWORD *)&v62[v108] + 1;
        *(_QWORD *)&v62[v108] = v109;
        if (v109 < *(_QWORD *)&v105[v108])
          break;
        *(_QWORD *)&v62[8 * (v107-- - 2)] = 0;
      }
      while (v107 > 1);
    }
    if (v61 == v62)
    {
      v110 = 0;
      goto LABEL_134;
    }
    if (v66 < 2)
    {
      v110 = 0;
      v111 = 0;
LABEL_132:
      v117 = v66 - v111;
      v118 = 8 * v111;
      v119 = &v90[8 * v111];
      v120 = (uint64_t *)&v62[v118];
      do
      {
        v122 = *v120++;
        v121 = v122;
        v123 = *(_QWORD *)v119;
        v119 += 8;
        v110 += v123 * v121;
        --v117;
      }
      while (v117);
      goto LABEL_134;
    }
    v112 = 0;
    v113 = 0;
    v114 = v90 + 8;
    v115 = v74;
    v116 = v216;
    do
    {
      v112 += *(v114 - 1) * *(v116 - 1);
      v113 += *v114 * *v116;
      v116 += 2;
      v114 += 2;
      v115 -= 2;
    }
    while (v115);
    v110 = v113 + v112;
    v111 = v74;
    v75 = v217;
    if (v66 != v74)
      goto LABEL_132;
LABEL_134:
    v124 = *(float *)(v63 + 4 * (v260 + v110));
    if ((int)v65 >= 1)
    {
      v125 = v75;
      do
      {
        v126 = 8 * (v125 - 2);
        v127 = *(_QWORD *)&v62[v126] + 1;
        *(_QWORD *)&v62[v126] = v127;
        if (v127 < *(_QWORD *)&v105[v126])
          break;
        *(_QWORD *)&v62[8 * (v125-- - 2)] = 0;
      }
      while (v125 > 1);
    }
    if (v61 == v62)
    {
      v128 = 0;
      goto LABEL_147;
    }
    if (v66 < 2)
    {
      v128 = 0;
      v129 = 0;
LABEL_145:
      v135 = v66 - v129;
      v136 = 8 * v129;
      v137 = &v90[8 * v129];
      v138 = (uint64_t *)&v62[v136];
      do
      {
        v140 = *v138++;
        v139 = v140;
        v141 = *(_QWORD *)v137;
        v137 += 8;
        v128 += v141 * v139;
        --v135;
      }
      while (v135);
      goto LABEL_147;
    }
    v130 = 0;
    v131 = 0;
    v132 = v90 + 8;
    v133 = v74;
    v134 = v216;
    do
    {
      v130 += *(v132 - 1) * *(v134 - 1);
      v131 += *v132 * *v134;
      v134 += 2;
      v132 += 2;
      v133 -= 2;
    }
    while (v133);
    v128 = v131 + v130;
    v129 = v74;
    v75 = v217;
    if (v66 != v74)
      goto LABEL_145;
LABEL_147:
    v142 = *(float *)(v63 + 4 * (v260 + v128));
    if ((int)v65 >= 1)
    {
      v143 = v75;
      do
      {
        v144 = 8 * (v143 - 2);
        v145 = *(_QWORD *)&v62[v144] + 1;
        *(_QWORD *)&v62[v144] = v145;
        if (v145 < *(_QWORD *)&v105[v144])
          break;
        *(_QWORD *)&v62[8 * (v143-- - 2)] = 0;
      }
      while (v143 > 1);
    }
    if (v61 == v62)
    {
      v146 = 0;
    }
    else
    {
      if (v66 >= 2)
      {
        v148 = 0;
        v149 = 0;
        v150 = v90 + 8;
        v151 = v74;
        v152 = v216;
        do
        {
          v148 += *(v150 - 1) * *(v152 - 1);
          v149 += *v150 * *v152;
          v152 += 2;
          v150 += 2;
          v151 -= 2;
        }
        while (v151);
        v146 = v149 + v148;
        v147 = v74;
        v75 = v217;
        if (v66 == v74)
          goto LABEL_160;
      }
      else
      {
        v146 = 0;
        v147 = 0;
      }
      v153 = v66 - v147;
      v154 = 8 * v147;
      v155 = &v90[v154];
      v156 = (uint64_t *)&v62[v154];
      do
      {
        v158 = *v156++;
        v157 = v158;
        v159 = *(_QWORD *)v155;
        v155 += 8;
        v146 += v159 * v157;
        --v153;
      }
      while (v153);
    }
LABEL_160:
    v160 = *(float *)(v63 + 4 * (v260 + v146));
    if ((int)v65 >= 1)
    {
      v161 = v75;
      do
      {
        v162 = 8 * (v161 - 2);
        v163 = *(_QWORD *)&v62[v162] + 1;
        *(_QWORD *)&v62[v162] = v163;
        if (v163 < *(_QWORD *)&v105[v162])
          break;
        *(_QWORD *)&v62[8 * (v161-- - 2)] = 0;
      }
      while (v161 > 1);
    }
    v164 = *(unsigned __int8 *)(v70 + v246 + v76);
    v165 = v164 - 64;
    if (v164 > 0x40)
    {
      v167 = v233 + v76;
      v168 = v164 >= 0xC0;
      v169 = v164 - 192;
      if (v169 != 0 && v168)
        v170 = v142 + (double)v169 * 0.015625 * (float)(v160 - v142);
      else
        v170 = v124 + (double)v165 * 0.0078125 * (float)(v142 - v124);
      v166 = v170;
    }
    else
    {
      v166 = v106 + (double)v164 * 0.015625 * (float)(v124 - v106);
      v167 = v233 + v76;
    }
    *(float *)(v69 + 4 * v167) = v166;
    v171 = (v58 + 1) % v215;
    if (v171)
      ++v58;
    else
      v58 = 0;
    if (v171)
      v172 = 1;
    else
      v172 = (uint64_t)v64 < 1;
    if (!v172)
    {
      v212 = v66;
      v210 = v61;
      v211 = v65;
      v173 = v59;
      v208 = v70;
      v209 = v73;
      v174 = v67;
      v175 = v64;
      v176 = v72;
      v177 = v68;
      v178 = v71;
      v179 = v63;
      bzero(v62, v72);
      v63 = v179;
      v71 = v178;
      v68 = v177;
      v75 = v217;
      v72 = v176;
      v64 = v175;
      v67 = v174;
      v70 = v208;
      v73 = v209;
      v59 = v173;
      v61 = v210;
      v65 = v211;
      v66 = v212;
      v58 = 0;
    }
    if ((int)v67 < 1)
      break;
    v180 = v214;
    v181 = v67;
    while (1)
    {
      v182 = 8 * (v180 - 2);
      v183 = *(_QWORD *)&v60[v182] + 1;
      *(_QWORD *)&v60[v182] = v183;
      if (v183 < *(_QWORD *)&v71[v182])
        break;
      *(_QWORD *)&v60[8 * (v180 - 2)] = 0;
      --v181;
      if ((unint64_t)--v180 <= 1)
        goto LABEL_184;
    }
  }
  while (v181 > 0);
LABEL_184:
  *(_QWORD *)v213 = 0;
  *(_BYTE *)(v213 + 8) = 9;
  v184 = operator new();
  *(_QWORD *)v184 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v184 + 8));
  *(_QWORD *)v213 = v184;
  *(_QWORD *)v184 = 1;
  nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v247, &v227);
  *(_DWORD *)(v184 + 8) = v247;
  v185 = v248;
  v248 = 0uLL;
  v186 = *(std::__shared_weak_count **)(v184 + 24);
  *(_OWORD *)(v184 + 16) = v185;
  if (v186)
  {
    v187 = (unint64_t *)&v186->__shared_owners_;
    do
      v188 = __ldaxr(v187);
    while (__stlxr(v188 - 1, v187));
    if (!v188)
    {
      ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
      std::__shared_weak_count::__release_weak(v186);
    }
  }
  v189 = *(void **)(v184 + 32);
  if (v189)
  {
    *(_QWORD *)(v184 + 40) = v189;
    operator delete(v189);
    *(_QWORD *)(v184 + 32) = 0;
    *(_QWORD *)(v184 + 40) = 0;
    *(_QWORD *)(v184 + 48) = 0;
  }
  v190 = *(void **)(v184 + 56);
  *(_OWORD *)(v184 + 32) = v249;
  *(_QWORD *)(v184 + 48) = v250;
  v250 = 0;
  v249 = 0uLL;
  if (v190)
  {
    *(_QWORD *)(v184 + 64) = v190;
    operator delete(v190);
    *(_QWORD *)(v184 + 56) = 0;
    *(_QWORD *)(v184 + 64) = 0;
    *(_QWORD *)(v184 + 72) = 0;
    v190 = (void *)v249;
  }
  *(_OWORD *)(v184 + 56) = v251;
  v191 = v252;
  v192 = v253;
  v252 = 0;
  v251 = 0uLL;
  *(_QWORD *)(v184 + 72) = v191;
  *(_QWORD *)(v184 + 80) = v192;
  if (v190)
  {
    *((_QWORD *)&v249 + 1) = v190;
    operator delete(v190);
  }
  v193 = (std::__shared_weak_count *)*((_QWORD *)&v248 + 1);
  if (*((_QWORD *)&v248 + 1))
  {
    v194 = (unint64_t *)(*((_QWORD *)&v248 + 1) + 8);
    do
      v195 = __ldaxr(v194);
    while (__stlxr(v195 - 1, v194));
    if (!v195)
    {
      ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
      std::__shared_weak_count::__release_weak(v193);
    }
  }
  if (v231)
  {
    v232 = v231;
    operator delete(v231);
  }
  if (v229)
  {
    v230 = v229;
    operator delete(v229);
  }
  v196 = v228;
  if (v228)
  {
    v197 = (unint64_t *)&v228->__shared_owners_;
    do
      v198 = __ldaxr(v197);
    while (__stlxr(v198 - 1, v197));
    if (!v198)
    {
      ((void (*)(std::__shared_weak_count *))v196->__on_zero_shared)(v196);
      std::__shared_weak_count::__release_weak(v196);
    }
  }
  if (v234)
    operator delete(v234);
  if (v237)
    operator delete(v237);
  if (v258)
  {
    v259 = v258;
    operator delete(v258);
  }
  if (v256)
  {
    v257 = v256;
    operator delete(v256);
  }
  v199 = v255;
  if (v255)
  {
    v200 = (unint64_t *)&v255->__shared_owners_;
    do
      v201 = __ldaxr(v200);
    while (__stlxr(v201 - 1, v200));
    if (!v201)
    {
      ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
      std::__shared_weak_count::__release_weak(v199);
    }
  }
  if (v244)
  {
    v245 = v244;
    operator delete(v244);
  }
  if (v242)
  {
    v243 = v242;
    operator delete(v242);
  }
  v202 = v241;
  if (v241)
  {
    v203 = (unint64_t *)&v241->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
}

void sub_19128DF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v47;
  uint64_t v48;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;

  MEMORY[0x19401CD90](v47, 0x10B0C4002311774);
  do
  {
    v50 = __ldaxr(0);
    v51 = v50 - 1;
  }
  while (__stlxr(v51, 0));
  if (!v51)
  {
    if (*(_QWORD *)a18)
    {
      v52 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*(_QWORD **)a18);
      MEMORY[0x19401CD90](v52, 0x10B0C4002311774);
    }
    *(_QWORD *)a18 = 0;
  }
  *(_QWORD *)a18 = 0;
  *(_BYTE *)(a18 + 8) = 0;
  nitro::ndarray<float>::~ndarray(&a32);
  if (__p)
  {
    a42 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a44)
    operator delete(a44);
  nitro::ndarray<float>::~ndarray((_QWORD *)(v48 - 168));
  nitro::ndarray<float>::~ndarray(&a47);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Stack(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  int64_t v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *size;
  unint64_t *v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  __int128 v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  file_logger *v91;
  file_logger *started;
  void *v93;
  char *v94;
  char *v95;
  std::string v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  void *v101;
  void *v102;
  char *v103;
  char *v104;
  void *v105;
  char *v106;
  char *v107;
  uint64_t __dst;
  __int128 v109;
  __int128 __p;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;

  v5 = *(_QWORD *)this;
  v6 = nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)a2);
  v7 = *(uint64_t **)(v5 + 8);
  v8 = *(uint64_t **)(v5 + 16);
  v9 = (char *)v8 - (char *)v7;
  if (v8 == v7)
  {
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst);
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 9;
    v17 = operator new();
    *(_QWORD *)v17 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v17 + 8));
    *(_QWORD *)a4 = v17;
    *(_QWORD *)v17 = 1;
    *(_DWORD *)(v17 + 8) = __dst;
    v18 = v109;
    v109 = 0uLL;
    v19 = *(std::__shared_weak_count **)(v17 + 24);
    *(_OWORD *)(v17 + 16) = v18;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = *(void **)(v17 + 32);
    if (v22)
    {
      *(_QWORD *)(v17 + 40) = v22;
      operator delete(v22);
      *(_QWORD *)(v17 + 32) = 0;
      *(_QWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
    }
    v23 = *(void **)(v17 + 56);
    *(_OWORD *)(v17 + 32) = __p;
    *(_QWORD *)(v17 + 48) = v111;
    v111 = 0;
    __p = 0uLL;
    if (v23)
    {
      *(_QWORD *)(v17 + 64) = v23;
      operator delete(v23);
      *(_QWORD *)(v17 + 56) = 0;
      *(_QWORD *)(v17 + 64) = 0;
      *(_QWORD *)(v17 + 72) = 0;
      v23 = (void *)__p;
    }
    *(_OWORD *)(v17 + 56) = v112;
    v24 = v113;
    v25 = v114;
    v113 = 0;
    v112 = 0uLL;
    *(_QWORD *)(v17 + 72) = v24;
    *(_QWORD *)(v17 + 80) = v25;
    if (v23)
    {
      *((_QWORD *)&__p + 1) = v23;
      operator delete(v23);
    }
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v27 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  else
  {
    v10 = *((unsigned __int8 *)v7 + 8);
    if (!*((_BYTE *)v7 + 8))
    {
      v29 = (char *)operator new(8uLL);
      v104 = 0;
      v105 = v29;
      *(_QWORD *)v29 = v9 >> 4;
      v106 = v29 + 8;
      v107 = v29 + 8;
      v102 = 0;
      v103 = 0;
      if (v9 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v30 = (unint64_t)v9 >> 2;
      v102 = operator new((unint64_t)v9 >> 2);
      v104 = (char *)v102 + 4 * (v9 >> 4);
      bzero(v102, (unint64_t)v9 >> 2);
      v31 = 0;
      v32 = 0;
      v103 = (char *)v102 + v30;
      do
      {
        v33 = nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)(*(_QWORD *)(v5 + 8) + v31));
        v34 = v102;
        *((_DWORD *)v102 + v32++) = v33;
        v31 += 16;
      }
      while (v32 < (v103 - v34) >> 2);
      v93 = 0;
      v94 = 0;
      v95 = 0;
      nitro::ndarray<int>::ndarray((uint64_t)&v96, (uint64_t)&v102, (char **)&v105, (char **)&v93, 0);
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__dst, &v96);
      *(_QWORD *)a4 = 0;
      *(_BYTE *)(a4 + 8) = 9;
      v35 = operator new();
      *(_QWORD *)v35 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v35 + 8));
      *(_QWORD *)a4 = v35;
      *(_QWORD *)v35 = 1;
      *(_DWORD *)(v35 + 8) = __dst;
      v36 = v109;
      v109 = 0uLL;
      v37 = *(std::__shared_weak_count **)(v35 + 24);
      *(_OWORD *)(v35 + 16) = v36;
      if (v37)
      {
        v38 = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      v40 = *(void **)(v35 + 32);
      if (v40)
      {
        *(_QWORD *)(v35 + 40) = v40;
        operator delete(v40);
        *(_QWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 48) = 0;
      }
      v41 = *(void **)(v35 + 56);
      *(_OWORD *)(v35 + 32) = __p;
      *(_QWORD *)(v35 + 48) = v111;
      v111 = 0;
      __p = 0uLL;
      if (v41)
      {
        *(_QWORD *)(v35 + 64) = v41;
        operator delete(v41);
        *(_QWORD *)(v35 + 56) = 0;
        *(_QWORD *)(v35 + 64) = 0;
        *(_QWORD *)(v35 + 72) = 0;
        v41 = (void *)__p;
      }
      *(_OWORD *)(v35 + 56) = v112;
      v42 = v113;
      v43 = v114;
      v113 = 0;
      v112 = 0uLL;
      *(_QWORD *)(v35 + 72) = v42;
      *(_QWORD *)(v35 + 80) = v43;
      if (v41)
      {
        *((_QWORD *)&__p + 1) = v41;
        operator delete(v41);
      }
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v45 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      if (v99)
      {
        v100 = v99;
        operator delete(v99);
      }
      if (v96.__r_.__value_.__r.__words[2])
      {
        v97 = (void *)v96.__r_.__value_.__r.__words[2];
        operator delete((void *)v96.__r_.__value_.__r.__words[2]);
      }
      size = (std::__shared_weak_count *)v96.__r_.__value_.__l.__size_;
      if (v96.__r_.__value_.__l.__size_)
      {
        v48 = (unint64_t *)(v96.__r_.__value_.__l.__size_ + 8);
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v93)
      {
        v94 = (char *)v93;
        operator delete(v93);
      }
      if (v102)
      {
        v103 = (char *)v102;
        operator delete(v102);
      }
      goto LABEL_129;
    }
    v11 = v6;
    if (v10 != 1)
    {
      if (v10 != 9)
      {
        if (*((int *)global_logger() + 169) <= 6)
        {
          v91 = (file_logger *)global_logger();
          started = file_logger::start_stream(v91, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "Stack", 808, 1);
          file_logger::operator<<((pthread_key_t *)started, "Stacking of invalid types");
        }
        nitro::nitro_builtins::Stack(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
      }
      v12 = *v7;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v14 = *(_BYTE **)(v12 + 32);
      v13 = *(_BYTE **)(v12 + 40);
      v15 = v13 - v14;
      if (v13 == v14)
      {
        v16 = 0;
      }
      else
      {
        if (v15 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v16 = (char *)operator new(v13 - v14);
        v105 = v16;
        v107 = &v16[8 * (v15 >> 3)];
        memcpy(v16, v14, v15);
        v106 = v107;
      }
      __dst = v9 >> 4;
      std::vector<unsigned long>::insert((char **)&v105, (uint64_t)&v16[8 * v11], &__dst);
      nitro::ndarray_container::init_from_shape(*(_DWORD *)(**(_QWORD **)(v5 + 8) + 8), (uint64_t **)&v105, (uint64_t)&__dst);
      v103 = 0;
      v104 = 0;
      v102 = 0;
      v70 = v106 - (_BYTE *)v105;
      if (v106 != v105)
      {
        if ((unint64_t)v70 >= 0x5555555555555551)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v71 = v70 >> 3;
        v72 = (char *)operator new(24 * (v70 >> 3));
        v73 = &v72[24 * v71];
        v102 = v72;
        v104 = v73;
        do
        {
          *(_QWORD *)v72 = -1;
          *((_QWORD *)v72 + 1) = -1;
          *((_QWORD *)v72 + 2) = 1;
          v72 += 24;
        }
        while (v72 != v73);
        v103 = v73;
      }
      if (*(_QWORD *)(v5 + 16) != *(_QWORD *)(v5 + 8))
      {
        v74 = 0;
        do
        {
          v96.__r_.__value_.__r.__words[0] = v74;
          if ((v74 & 0x8000000000000000) != 0)
          {
            v93 = &v96;
            nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
          }
          v75 = (char *)v102 + 24 * (int)v11;
          *(_QWORD *)v75 = v74;
          *(_OWORD *)(v75 + 8) = xmmword_191A92A20;
          nitro::ndarray_container::slice((uint64_t)&__dst, (__int128 **)&v102, (uint64_t)&v96, (__n128)xmmword_191A92A20);
          nitro::ndarray_container::assign((nitro::ndarray_container *)&v96, (const nitro::ndarray_container *)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 16 * v74) + 8));
          if (v100)
          {
            v101 = v100;
            operator delete(v100);
          }
          if (v97)
          {
            v98 = v97;
            operator delete(v97);
          }
          v76 = (std::__shared_weak_count *)v96.__r_.__value_.__r.__words[2];
          if (v96.__r_.__value_.__r.__words[2])
          {
            v77 = (unint64_t *)(v96.__r_.__value_.__r.__words[2] + 8);
            do
              v78 = __ldaxr(v77);
            while (__stlxr(v78 - 1, v77));
            if (!v78)
            {
              ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
              std::__shared_weak_count::__release_weak(v76);
            }
          }
          ++v74;
        }
        while (v74 < (uint64_t)(*(_QWORD *)(v5 + 16) - *(_QWORD *)(v5 + 8)) >> 4);
      }
      *(_QWORD *)a4 = 0;
      *(_BYTE *)(a4 + 8) = 9;
      v79 = operator new();
      *(_QWORD *)v79 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v79 + 8));
      *(_QWORD *)a4 = v79;
      *(_QWORD *)v79 = 1;
      *(_DWORD *)(v79 + 8) = __dst;
      v80 = v109;
      v109 = 0uLL;
      v81 = *(std::__shared_weak_count **)(v79 + 24);
      *(_OWORD *)(v79 + 16) = v80;
      if (v81)
      {
        v82 = (unint64_t *)&v81->__shared_owners_;
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 - 1, v82));
        if (!v83)
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      v84 = *(void **)(v79 + 32);
      if (v84)
      {
        *(_QWORD *)(v79 + 40) = v84;
        operator delete(v84);
        *(_QWORD *)(v79 + 32) = 0;
        *(_QWORD *)(v79 + 40) = 0;
        *(_QWORD *)(v79 + 48) = 0;
      }
      v85 = *(void **)(v79 + 56);
      *(_OWORD *)(v79 + 32) = __p;
      *(_QWORD *)(v79 + 48) = v111;
      v111 = 0;
      __p = 0uLL;
      if (v85)
      {
        *(_QWORD *)(v79 + 64) = v85;
        operator delete(v85);
        *(_QWORD *)(v79 + 56) = 0;
        *(_QWORD *)(v79 + 64) = 0;
        *(_QWORD *)(v79 + 72) = 0;
      }
      *(_OWORD *)(v79 + 56) = v112;
      v86 = v113;
      v87 = v114;
      v113 = 0;
      v112 = 0uLL;
      *(_QWORD *)(v79 + 72) = v86;
      *(_QWORD *)(v79 + 80) = v87;
      if (v102)
      {
        v103 = (char *)v102;
        operator delete(v102);
        if ((_QWORD)v112)
        {
          *((_QWORD *)&v112 + 1) = v112;
          operator delete((void *)v112);
        }
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      v88 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
      if (*((_QWORD *)&v109 + 1))
      {
        v89 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
        do
          v90 = __ldaxr(v89);
        while (__stlxr(v90 - 1, v89));
        if (!v90)
        {
          ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
          std::__shared_weak_count::__release_weak(v88);
        }
      }
LABEL_129:
      v69 = v105;
      if (!v105)
        return;
      v106 = (char *)v105;
      goto LABEL_131;
    }
    v50 = (char *)operator new(8uLL);
    v102 = v50;
    *(_QWORD *)v50 = v9 >> 4;
    v103 = v50 + 8;
    v104 = v50 + 8;
    __dst = v9 >> 4;
    std::vector<unsigned long>::insert((char **)&v102, (uint64_t)&v50[8 * v11], &__dst);
    v52 = *(_QWORD *)(v5 + 8);
    v51 = *(_QWORD *)(v5 + 16);
    v93 = 0;
    v94 = 0;
    v95 = 0;
    v53 = v51 - v52;
    if (v51 != v52)
    {
      if ((v53 & 0x8000000000000000) == 0)
      {
        v93 = operator new(v53 >> 2);
        v95 = (char *)v93 + 4 * ((uint64_t)v53 >> 4);
        bzero(v93, v53 >> 2);
        v94 = (char *)v93 + (v53 >> 2);
        __asm { BR              X10 }
      }
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    }
    v105 = 0;
    v106 = 0;
    v107 = 0;
    nitro::ndarray<float>::ndarray((uint64_t)&v96, (uint64_t)&v93, (char **)&v102, (char **)&v105, 0);
    nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst, &v96);
    *(_QWORD *)a4 = 0;
    *(_BYTE *)(a4 + 8) = 9;
    v54 = operator new();
    *(_QWORD *)v54 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v54 + 8));
    *(_QWORD *)a4 = v54;
    *(_QWORD *)v54 = 1;
    *(_DWORD *)(v54 + 8) = __dst;
    v55 = v109;
    v109 = 0uLL;
    v56 = *(std::__shared_weak_count **)(v54 + 24);
    *(_OWORD *)(v54 + 16) = v55;
    if (v56)
    {
      v57 = (unint64_t *)&v56->__shared_owners_;
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    v59 = *(void **)(v54 + 32);
    if (v59)
    {
      *(_QWORD *)(v54 + 40) = v59;
      operator delete(v59);
      *(_QWORD *)(v54 + 32) = 0;
      *(_QWORD *)(v54 + 40) = 0;
      *(_QWORD *)(v54 + 48) = 0;
    }
    v60 = *(void **)(v54 + 56);
    *(_OWORD *)(v54 + 32) = __p;
    *(_QWORD *)(v54 + 48) = v111;
    v111 = 0;
    __p = 0uLL;
    if (v60)
    {
      *(_QWORD *)(v54 + 64) = v60;
      operator delete(v60);
      *(_QWORD *)(v54 + 56) = 0;
      *(_QWORD *)(v54 + 64) = 0;
      *(_QWORD *)(v54 + 72) = 0;
      v60 = (void *)__p;
    }
    *(_OWORD *)(v54 + 56) = v112;
    v61 = v113;
    v62 = v114;
    v113 = 0;
    v112 = 0uLL;
    *(_QWORD *)(v54 + 72) = v61;
    *(_QWORD *)(v54 + 80) = v62;
    if (v60)
    {
      *((_QWORD *)&__p + 1) = v60;
      operator delete(v60);
    }
    v63 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
    if (*((_QWORD *)&v109 + 1))
    {
      v64 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 - 1, v64));
      if (!v65)
      {
        ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
        std::__shared_weak_count::__release_weak(v63);
      }
    }
    if (v99)
    {
      v100 = v99;
      operator delete(v99);
    }
    if (v96.__r_.__value_.__r.__words[2])
    {
      v97 = (void *)v96.__r_.__value_.__r.__words[2];
      operator delete((void *)v96.__r_.__value_.__r.__words[2]);
    }
    v66 = (std::__shared_weak_count *)v96.__r_.__value_.__l.__size_;
    if (v96.__r_.__value_.__l.__size_)
    {
      v67 = (unint64_t *)(v96.__r_.__value_.__l.__size_ + 8);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 - 1, v67));
      if (!v68)
      {
        ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    if (v105)
    {
      v106 = (char *)v105;
      operator delete(v105);
    }
    if (v93)
    {
      v94 = (char *)v93;
      operator delete(v93);
    }
    v69 = v102;
    if (v102)
    {
      v103 = (char *)v102;
LABEL_131:
      operator delete(v69);
    }
  }
}

void sub_19128EFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (__p)
    operator delete(__p);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a34);
  if (a31)
    operator delete(a31);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::TopK(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  int v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _BYTE v48[16];
  std::__shared_weak_count *v49;
  void *v50;
  void *v51;
  void *v52;
  void *v53;
  int v54;
  void *v55;
  char *v56;
  char *v57;
  int v58;
  __int128 v59;
  __int128 __p;
  uint64_t v61;
  void *v62[2];
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v58, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  v7 = nitro::flexible_type_converter<int>::get((uint64_t)v65, (unsigned __int8 *)a2);
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v8 = (const void *)__p;
  v9 = *((_QWORD *)&__p + 1) - __p;
  if (*((_QWORD *)&__p + 1) == (_QWORD)__p)
  {
    v10 = 0;
    v11 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(*((_QWORD *)&__p + 1) - __p);
    v11 = &v10[8 * (v9 >> 3)];
    v55 = v10;
    v57 = v11;
    memcpy(v10, v8, v9);
    v56 = v11;
  }
  if (v11 - v10 == 8)
  {
    v65[8] = 0;
    *(_QWORD *)v65 = v7;
    nitro::nitro_builtins::TopK_1d(this, (const nitro::flexible_type *)v65, a3);
    switch(v65[8])
    {
      case 2:
        v12 = *(unint64_t **)v65;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          v15 = *(_QWORD *)v65;
          if (*(_QWORD *)v65)
          {
            if (*(char *)(*(_QWORD *)v65 + 31) < 0)
              operator delete(*(void **)(*(_QWORD *)v65 + 8));
            MEMORY[0x19401CD90](v15, 0x1012C404EF22A49);
          }
        }
        break;
      case 3:
        v36 = *(unint64_t **)v65;
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          v39 = *(_QWORD *)v65;
          if (*(_QWORD *)v65)
          {
            v40 = *(void **)(*(_QWORD *)v65 + 8);
            if (v40)
            {
              *(_QWORD *)(*(_QWORD *)v65 + 16) = v40;
              operator delete(v40);
            }
            MEMORY[0x19401CD90](v39, 0x1080C409938AC02);
          }
        }
        break;
      case 4:
        v32 = *(unint64_t **)v65;
        do
        {
          v33 = __ldaxr(v32);
          v34 = v33 - 1;
        }
        while (__stlxr(v34, v32));
        if (!v34 && *(_QWORD *)v65)
        {
          v35 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*(uint64_t *)v65);
          goto LABEL_69;
        }
        break;
      case 5:
        v41 = *(unint64_t **)v65;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43 && *(_QWORD *)v65)
        {
          v35 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*(uint64_t *)v65);
LABEL_69:
          MEMORY[0x19401CD90](v35, 0x1020C405E66F15BLL);
        }
        break;
      case 9:
        v44 = *(unint64_t **)v65;
        do
        {
          v45 = __ldaxr(v44);
          v46 = v45 - 1;
        }
        while (__stlxr(v46, v44));
        if (!v46 && *(_QWORD *)v65)
        {
          v47 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*(_QWORD **)v65);
          MEMORY[0x19401CD90](v47, 0x10B0C4002311774);
        }
        break;
      default:
        break;
    }
  }
  else
  {
    nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)this + 8), (uint64_t)v65);
    v58 = *(_DWORD *)v65;
    v16 = *(_OWORD *)&v65[8];
    *(_QWORD *)&v65[8] = 0;
    *(_QWORD *)&v65[16] = 0;
    v17 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    v59 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(p_shared_owners);
      while (__stlxr(v19 - 1, p_shared_owners));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    __p = v66;
    v61 = v67;
    v67 = 0;
    v66 = 0uLL;
    v20 = v62[0];
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
      v20 = (void *)v66;
    }
    *(_OWORD *)v62 = v68;
    v21 = v69;
    v69 = 0;
    v68 = 0uLL;
    v63 = v21;
    v64 = v70;
    if (v20)
    {
      *((_QWORD *)&v66 + 1) = v20;
      operator delete(v20);
    }
    v22 = *(std::__shared_weak_count **)&v65[16];
    if (*(_QWORD *)&v65[16])
    {
      v23 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v48, (const nitro::ndarray_container *)&v58);
    v54 = v7;
    nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(&v58, (uint64_t)v48, v65);
    if (v52)
    {
      v53 = v52;
      operator delete(v52);
    }
    if (v50)
    {
      v51 = v50;
      operator delete(v50);
    }
    v25 = v49;
    if (v49)
    {
      v26 = (unint64_t *)&v49->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 4;
    v28 = operator new();
    *(_QWORD *)v28 = 0;
    *(_QWORD *)a3 = v28;
    *(_QWORD *)v28 = 1;
    *(_OWORD *)(v28 + 8) = *(_OWORD *)v65;
    *(_QWORD *)(v28 + 24) = *(_QWORD *)&v65[16];
  }
  if (v55)
    operator delete(v55);
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v29 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
  if (*((_QWORD *)&v59 + 1))
  {
    v30 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_19128F844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;

  do
  {
    v26 = __ldaxr(0);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, 0));
  if (!v27)
    nitro::nitro_builtins::TopK(v23);
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 0;
  std::vector<nitro::flexible_type>::~vector[abi:ne180100]((void **)(v24 - 160));
  if (__p)
    operator delete(__p);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a23);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Reshape(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  nitro::ndarray_container *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  std::vector<int>::pointer v32;
  uint64_t v33;
  _OWORD *v34;
  std::vector<int>::pointer v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int8x16_t *v46;
  char *v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int8x16_t *v54;
  int8x16_t *v55;
  uint64_t v56;
  int8x16_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t v63;
  __int128 v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  uint64_t *v81;
  char *v82;
  void *v83;
  int64_t v84;
  char *v85;
  std::vector<int> v86;
  unint64_t *v87;
  __int128 v88;
  void *__p[2];
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;

  v6 = nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v94, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  if (!nitro::ndarray_container::is_contiguous(v6))
    goto LABEL_14;
  v7 = *((_QWORD *)&v98 + 1) - v98;
  if (*((_QWORD *)&v98 + 1) != (_QWORD)v98)
  {
    if (!*(_QWORD *)v98)
      goto LABEL_14;
    if ((unint64_t)v7 >= 0x10)
    {
      v8 = v7 >> 3;
      v9 = 2;
      if (v8 > 2)
        v9 = v8;
      v10 = *(_QWORD *)(v98 + 8);
      if (!v10 || *(_QWORD *)v98 < v10)
        goto LABEL_14;
      v11 = 0;
      v12 = v9 - 2;
      do
      {
        v13 = v11;
        if (v12 == v11)
          break;
        v14 = v98 + 8 * v11;
        v15 = *(_QWORD *)(v14 + 16);
        if (!v15)
          break;
        v16 = *(_QWORD *)(v14 + 8);
        v11 = v13 + 1;
      }
      while (v16 >= v15);
      if (v13 + 2 < v8)
      {
LABEL_14:
        nitro::ndarray_container::canonicalize((nitro::ndarray_container *)&v94, (uint64_t)&v87);
        v94 = (int)v87;
        v17 = v88;
        v88 = 0uLL;
        v18 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
        v95 = v17;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        if ((_QWORD)v96)
        {
          *((_QWORD *)&v96 + 1) = v96;
          operator delete((void *)v96);
        }
        v96 = *(_OWORD *)__p;
        v97 = v90;
        __p[1] = 0;
        v90 = 0;
        __p[0] = 0;
        v21 = (void *)v98;
        if ((_QWORD)v98)
        {
          *((_QWORD *)&v98 + 1) = v98;
          operator delete((void *)v98);
          v21 = __p[0];
        }
        v98 = v91;
        v22 = v92;
        v92 = 0;
        v91 = 0uLL;
        v99 = v22;
        v100 = v93;
        if (v21)
        {
          __p[1] = v21;
          operator delete(v21);
        }
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
        if (*((_QWORD *)&v88 + 1))
        {
          v24 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
    }
  }
  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a2, &v86);
  begin = v86.__begin_;
  end = v86.__end_;
  v84 = 0;
  v85 = 0;
  v83 = 0;
  v28 = (char *)v86.__end_ - (char *)v86.__begin_;
  if (v86.__end_ == v86.__begin_)
  {
    v30 = 0;
  }
  else
  {
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v29 = (char *)operator new(2 * v28);
    v30 = v29;
    v83 = v29;
    v85 = &v29[8 * (v28 >> 2)];
    v31 = v28 - 4;
    v32 = begin;
    v28 = (int64_t)v29;
    if (v31 < 0x1C)
      goto LABEL_96;
    v33 = (v31 >> 2) + 1;
    v32 = &begin[v33 & 0x7FFFFFFFFFFFFFF8];
    v28 = (int64_t)&v29[8 * (v33 & 0x7FFFFFFFFFFFFFF8)];
    v34 = v29 + 32;
    v35 = begin + 4;
    v36 = v33 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v37 = *((_OWORD *)v35 - 1);
      *(_QWORD *)&v38 = (int)v37;
      *((_QWORD *)&v38 + 1) = SDWORD1(v37);
      v39 = v38;
      *(_QWORD *)&v38 = SDWORD2(v37);
      *((_QWORD *)&v38 + 1) = SHIDWORD(v37);
      v40 = v38;
      *(_QWORD *)&v38 = (int)*(_OWORD *)v35;
      *((_QWORD *)&v38 + 1) = (int)HIDWORD(*(_QWORD *)v35);
      v41 = v38;
      *(_QWORD *)&v38 = (int)*((_QWORD *)v35 + 1);
      *((_QWORD *)&v38 + 1) = (int)HIDWORD(*(_OWORD *)v35);
      *(v34 - 2) = v39;
      *(v34 - 1) = v40;
      *v34 = v41;
      v34[1] = v38;
      v34 += 4;
      v35 += 8;
      v36 -= 8;
    }
    while (v36);
    if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_96:
      do
      {
        v42 = *v32++;
        *(_QWORD *)v28 = v42;
        v28 += 8;
      }
      while (v32 != end);
    }
    v84 = v28;
  }
  v44 = *((_QWORD *)&v96 + 1);
  v43 = v96;
  v81 = 0;
  v82 = 0;
  v80 = 0;
  v45 = *((_QWORD *)&v96 + 1) - v96;
  if (*((_QWORD *)&v96 + 1) != (_QWORD)v96)
  {
    if (v45 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v46 = (int8x16_t *)operator new(*((_QWORD *)&v96 + 1) - v96);
    v47 = (char *)v46;
    v80 = v46;
    v82 = &v46->i8[8 * (v45 >> 3)];
    v48 = v45 - 8;
    if ((unint64_t)(v45 - 8) >= 0x88)
    {
      if ((unint64_t)v46 >= v44
        || (v49 = (uint64_t *)v46,
            v44 - (v48 & 0xFFFFFFFFFFFFFFF8) - 8 >= (unint64_t)&v46->u64[1] + (v48 & 0xFFFFFFFFFFFFFFF8)))
      {
        v51 = (v48 >> 3) + 1;
        v52 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        v53 = v44 - v52 * 8;
        v49 = &v46->i64[v52];
        v54 = v46 + 1;
        v55 = (int8x16_t *)(v44 - 16);
        v56 = v51 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v57 = vextq_s8(v55[-1], v55[-1], 8uLL);
          v54[-1] = vextq_s8(*v55, *v55, 8uLL);
          *v54 = v57;
          v54 += 2;
          v55 -= 2;
          v56 -= 4;
        }
        while (v56);
        v44 = v53;
        if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          v81 = v49;
          v50 = v28 - (_QWORD)v30;
          if ((_QWORD *)v28 == v30)
            goto LABEL_60;
          goto LABEL_52;
        }
      }
    }
    else
    {
      v49 = (uint64_t *)v46;
    }
    do
    {
      v58 = *(_QWORD *)(v44 - 8);
      v44 -= 8;
      *v49++ = v58;
    }
    while (v44 != v43);
    goto LABEL_51;
  }
  v47 = 0;
  v49 = 0;
  v50 = v28 - (_QWORD)v30;
  if ((_QWORD *)v28 == v30)
    goto LABEL_60;
LABEL_52:
  v59 = v50 >> 3;
  v60 = ((char *)v49 - v47) >> 3;
  v61 = v50 >> 3 != 0;
  v62 = (v50 >> 3) - 1;
  if (v62 == 0 || !v61)
    v59 = 1;
  do
  {
    if (!*v30)
    {
      v78 = v60;
      v79 = v62;
      if (v62 >= v60)
      {
        v87 = &v79;
        *(_QWORD *)&v88 = &v78;
        nitro::nitro_builtins::Reshape(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()();
      }
      *v30 = *(_QWORD *)&v47[8 * v62];
    }
    --v62;
    ++v30;
    --v59;
  }
  while (v59);
LABEL_60:
  nitro::ndarray_container::reshape(&v94, (int64x2_t **)&v83, (uint64_t)&v87);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 9;
  v63 = operator new();
  *(_QWORD *)v63 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v63 + 8));
  *(_QWORD *)a3 = v63;
  *(_QWORD *)v63 = 1;
  *(_DWORD *)(v63 + 8) = (_DWORD)v87;
  v64 = v88;
  v88 = 0uLL;
  v65 = *(std::__shared_weak_count **)(v63 + 24);
  *(_OWORD *)(v63 + 16) = v64;
  if (v65)
  {
    v66 = (unint64_t *)&v65->__shared_owners_;
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = *(void **)(v63 + 32);
  if (v68)
  {
    *(_QWORD *)(v63 + 40) = v68;
    operator delete(v68);
    *(_QWORD *)(v63 + 32) = 0;
    *(_QWORD *)(v63 + 40) = 0;
    *(_QWORD *)(v63 + 48) = 0;
  }
  v69 = *(void **)(v63 + 56);
  *(_OWORD *)(v63 + 32) = *(_OWORD *)__p;
  *(_QWORD *)(v63 + 48) = v90;
  __p[1] = 0;
  v90 = 0;
  __p[0] = 0;
  if (v69)
  {
    *(_QWORD *)(v63 + 64) = v69;
    operator delete(v69);
    *(_QWORD *)(v63 + 56) = 0;
    *(_QWORD *)(v63 + 64) = 0;
    *(_QWORD *)(v63 + 72) = 0;
    v69 = __p[0];
  }
  *(_OWORD *)(v63 + 56) = v91;
  v70 = v92;
  v71 = v93;
  v92 = 0;
  v91 = 0uLL;
  *(_QWORD *)(v63 + 72) = v70;
  *(_QWORD *)(v63 + 80) = v71;
  if (v69)
  {
    __p[1] = v69;
    operator delete(v69);
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v88 + 1);
  if (*((_QWORD *)&v88 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v88 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v80)
    operator delete(v80);
  if (v83)
  {
    v84 = (int64_t)v83;
    operator delete(v83);
  }
  if (v86.__begin_)
  {
    v86.__end_ = v86.__begin_;
    operator delete(v86.__begin_);
  }
  if ((_QWORD)v98)
  {
    *((_QWORD *)&v98 + 1) = v98;
    operator delete((void *)v98);
  }
  if ((_QWORD)v96)
  {
    *((_QWORD *)&v96 + 1) = v96;
    operator delete((void *)v96);
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
}

void sub_19128FF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v21;

  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v21 - 160));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Softmax(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  __int128 v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  float32x4_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  long double v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t i;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  uint64_t v56;
  float v57;
  unint64_t v58;
  float32x4_t v59;
  unint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  unint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  float16x4_t *v73;
  __int32 *v74;
  uint64_t v75;
  float16x4_t *v76;
  unint64_t v77;
  unint64_t v78;
  __int32 *v79;
  uint64_t v80;
  uint64_t v81;
  float32x4_t v82;
  unint64_t v83;
  __int16 *v84;
  unint64_t v91;
  unint64_t v92;
  float16x4_t *v93;
  unint64_t v94;
  __int16 *v95;
  void *v99;
  unint64_t *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int32x4_t *v109;
  uint64_t v110;
  int32x4_t *v111;
  uint64_t v112;
  long double v113;
  unint64_t v114;
  float32x4_t v115;
  unint64_t v116;
  int32x4_t *v117;
  int32x4_t v118;
  unint64_t *p_shared_owners;
  uint64_t v120;
  __int128 v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  float32x4_t v137;
  unint64_t v138;
  float32x4_t v139;
  unint64_t v140;
  __int128 v141;
  float v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  void *v147;
  void *v148;
  void *v149;
  void *v150;
  void *__p;
  void *v152;
  uint64_t v153;
  int v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;

  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)this + 8), (uint64_t)&v145);
  nitro::ndarray_container::copy((nitro::ndarray_container *)&v145, (uint64_t)&v154);
  if (__p)
  {
    v152 = __p;
    operator delete(__p);
  }
  if (v148)
  {
    v149 = v148;
    operator delete(v148);
  }
  v4 = (std::__shared_weak_count *)v147;
  if (v147)
  {
    v5 = (unint64_t *)((char *)v147 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  switch(v154)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v145, (uint64_t)&v154);
      v133 = a3;
      v8 = v147;
      if (v148 == v147 || !v145)
        goto LABEL_121;
      v9 = (_BYTE *)v148 - (_BYTE *)v147 - 8;
      if (v9 < 8)
      {
        v10 = 1;
        v11 = (uint64_t *)v147;
        do
        {
LABEL_107:
          v106 = *v11++;
          v10 *= v106;
        }
        while (v11 != v148);
        goto LABEL_108;
      }
      v101 = (v9 >> 3) + 1;
      v11 = (uint64_t *)((char *)v147 + 8 * (v101 & 0x3FFFFFFFFFFFFFFELL));
      v102 = (char *)v147 + 8;
      v103 = 1;
      v104 = v101 & 0x3FFFFFFFFFFFFFFELL;
      v105 = 1;
      do
      {
        v103 *= *(v102 - 1);
        v105 *= *v102;
        v102 += 2;
        v104 -= 2;
      }
      while (v104);
      v10 = v105 * v103;
      if (v101 != (v101 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_107;
LABEL_108:
      if (v10)
      {
        v107 = 0;
        v108 = *((_QWORD *)v148 - 1);
        v109 = (int32x4_t *)(v145 + 4 * v153);
        v110 = 4 * v108;
        v111 = v109 + 1;
        do
        {
          if (v108)
          {
            v112 = 0;
            LODWORD(v7) = 0;
            do
            {
              v144 = v7;
              v113 = exp((double)v109->i32[v112]);
              v7 = v144;
              v109->i32[v112] = (int)v113;
              *(float *)&v7 = *(float *)&v144 + (float)(int)v113;
              ++v112;
            }
            while (v108 != v112);
            if (v108 >= 8)
            {
              v115 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v7, 0);
              v116 = v108 & 0xFFFFFFFFFFFFFFF8;
              v117 = v111;
              do
              {
                v118 = vcvtq_s32_f32(vdivq_f32(vcvtq_f32_s32(*v117), v115));
                v117[-1] = vcvtq_s32_f32(vdivq_f32(vcvtq_f32_s32(v117[-1]), v115));
                *v117 = v118;
                v117 += 2;
                v116 -= 8;
              }
              while (v116);
              v114 = v108 & 0xFFFFFFFFFFFFFFF8;
              if (v108 == (v108 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_110;
            }
            else
            {
              v114 = 0;
            }
            do
            {
              v109->i32[v114] = (int)(float)((float)v109->i32[v114] / *(float *)&v7);
              ++v114;
            }
            while (v108 != v114);
          }
LABEL_110:
          v107 += v108;
          v109 = (int32x4_t *)((char *)v109 + v110);
          v111 = (int32x4_t *)((char *)v111 + v110);
        }
        while (v107 < v10);
      }
LABEL_121:
      if (v150)
      {
        __p = v150;
        operator delete(v150);
        v8 = v147;
      }
      a3 = v133;
      if (v8)
      {
        v148 = v8;
        operator delete(v8);
      }
      v42 = v146;
      if (!v146)
        goto LABEL_130;
      p_shared_owners = (unint64_t *)&v146->__shared_owners_;
      do
        v44 = __ldaxr(p_shared_owners);
      while (__stlxr(v44 - 1, p_shared_owners));
      goto LABEL_128;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v145, (uint64_t)&v154);
      if (v148 == v147 || !v145)
        goto LABEL_40;
      v24 = (_BYTE *)v148 - (_BYTE *)v147 - 8;
      if (v24 < 8)
      {
        v25 = 1;
        v26 = (uint64_t *)v147;
        do
        {
LABEL_30:
          v32 = *v26++;
          v25 *= v32;
        }
        while (v26 != v148);
        goto LABEL_31;
      }
      v27 = (v24 >> 3) + 1;
      v26 = (uint64_t *)((char *)v147 + 8 * (v27 & 0x3FFFFFFFFFFFFFFELL));
      v28 = (char *)v147 + 8;
      v29 = 1;
      v30 = v27 & 0x3FFFFFFFFFFFFFFELL;
      v31 = 1;
      do
      {
        v29 *= *(v28 - 1);
        v31 *= *v28;
        v28 += 2;
        v30 -= 2;
      }
      while (v30);
      v25 = v31 * v29;
      if (v27 != (v27 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_30;
LABEL_31:
      if (v25)
      {
        v33 = 0;
        v34 = *((_QWORD *)v148 - 1);
        do
        {
          if (v34)
          {
            v35 = 0;
            v36 = 0.0;
            v37 = v145;
            v38 = v153;
            do
            {
              v39 = v37 + v38 + v33;
              LOBYTE(v23) = *(_BYTE *)(v39 + v35);
              v23 = exp((double)*(unint64_t *)&v23);
              *(_BYTE *)(v39 + v35) = (int)v23;
              v37 = v145;
              v38 = v153;
              LOBYTE(v23) = *(_BYTE *)(v145 + v153 + v33 + v35);
              *(float *)&v23 = (float)LODWORD(v23);
              v36 = v36 + *(float *)&v23;
              ++v35;
            }
            while (v34 != v35);
            for (i = 0; i != v34; ++i)
            {
              v41 = v145 + v153 + v33;
              LOBYTE(v23) = *(_BYTE *)(v41 + i);
              *(float *)&v23 = (float)LODWORD(v23) / v36;
              *(_BYTE *)(v41 + i) = (int)*(float *)&v23;
            }
          }
          v33 += v34;
        }
        while (v33 < v25);
      }
LABEL_40:
      if (v150)
      {
        __p = v150;
        operator delete(v150);
      }
      if (v147)
      {
        v148 = v147;
        operator delete(v147);
      }
      v42 = v146;
      if (!v146)
        goto LABEL_130;
      v43 = (unint64_t *)&v146->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      goto LABEL_128;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v145, (uint64_t)&v154);
      v134 = a3;
      v13 = v147;
      if (v148 == v147 || !v145)
        goto LABEL_65;
      v14 = (_BYTE *)v148 - (_BYTE *)v147 - 8;
      if (v14 < 8)
      {
        v15 = 1;
        v16 = (uint64_t *)v147;
        do
        {
LABEL_51:
          v50 = *v16++;
          v15 *= v50;
        }
        while (v16 != v148);
        goto LABEL_52;
      }
      v45 = (v14 >> 3) + 1;
      v16 = (uint64_t *)((char *)v147 + 8 * (v45 & 0x3FFFFFFFFFFFFFFELL));
      v46 = (char *)v147 + 8;
      v47 = 1;
      v48 = v45 & 0x3FFFFFFFFFFFFFFELL;
      v49 = 1;
      do
      {
        v47 *= *(v46 - 1);
        v49 *= *v46;
        v46 += 2;
        v48 -= 2;
      }
      while (v48);
      v15 = v49 * v47;
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_51;
LABEL_52:
      if (v15)
      {
        v51 = 0;
        v52 = *((_QWORD *)v148 - 1);
        v53 = (float32x4_t *)(v145 + 4 * v153);
        v54 = 4 * v52;
        v55 = v53 + 1;
        do
        {
          if (v52)
          {
            v56 = 0;
            LODWORD(v12) = 0;
            do
            {
              v141 = v12;
              v57 = expf(v53->f32[v56]);
              v12 = v141;
              v53->f32[v56] = v57;
              *(float *)&v12 = *(float *)&v141 + v57;
              ++v56;
            }
            while (v52 != v56);
            if (v52 >= 8)
            {
              v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v12, 0);
              v60 = v52 & 0xFFFFFFFFFFFFFFF8;
              v61 = v55;
              do
              {
                v62 = vdivq_f32(*v61, v59);
                v61[-1] = vdivq_f32(v61[-1], v59);
                *v61 = v62;
                v61 += 2;
                v60 -= 8;
              }
              while (v60);
              v58 = v52 & 0xFFFFFFFFFFFFFFF8;
              if (v52 == (v52 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_54;
            }
            else
            {
              v58 = 0;
            }
            do
            {
              v53->f32[v58] = v53->f32[v58] / *(float *)&v12;
              ++v58;
            }
            while (v52 != v58);
          }
LABEL_54:
          v51 += v52;
          v53 = (float32x4_t *)((char *)v53 + v54);
          v55 = (float32x4_t *)((char *)v55 + v54);
        }
        while (v51 < v15);
      }
LABEL_65:
      if (v150)
      {
        __p = v150;
        operator delete(v150);
        v13 = v147;
      }
      a3 = v134;
      if (v13)
      {
        v148 = v13;
        operator delete(v13);
      }
      v42 = v146;
      if (!v146)
        goto LABEL_130;
      v63 = (unint64_t *)&v146->__shared_owners_;
      do
        v44 = __ldaxr(v63);
      while (__stlxr(v44 - 1, v63));
      goto LABEL_128;
    case 11:
      nitro::ndarray<half>::ndarray((uint64_t)&v145, (uint64_t)&v154);
      v135 = a3;
      v132 = v147;
      if (v148 == v147)
        goto LABEL_96;
      v136 = v145;
      if (!v145)
        goto LABEL_96;
      v20 = (_BYTE *)v148 - (_BYTE *)v147 - 8;
      if (v20 < 8)
      {
        v21 = 1;
        v22 = (uint64_t *)v147;
        do
        {
LABEL_76:
          v69 = *v22++;
          v21 *= v69;
        }
        while (v22 != v148);
        goto LABEL_77;
      }
      v64 = (v20 >> 3) + 1;
      v22 = (uint64_t *)((char *)v147 + 8 * (v64 & 0x3FFFFFFFFFFFFFFELL));
      v65 = (char *)v147 + 8;
      v66 = 1;
      v67 = v64 & 0x3FFFFFFFFFFFFFFELL;
      v68 = 1;
      do
      {
        v66 *= *(v65 - 1);
        v68 *= *v65;
        v65 += 2;
        v67 -= 2;
      }
      while (v67);
      v21 = v68 * v66;
      if (v64 != (v64 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_76;
LABEL_77:
      if (v21)
      {
        v70 = 0;
        v71 = *((_QWORD *)v148 - 1);
        v72 = v153;
        v73 = (float16x4_t *)(v145 + 2 * v153);
        v74 = (__int32 *)v73 + 1;
        v75 = 2 * v71;
        v76 = v73 + 2;
        do
        {
          if (!v71)
            goto LABEL_79;
          if (v71 >= 4)
          {
            LODWORD(v19) = 0;
            v78 = v71 & 0xFFFFFFFFFFFFFFFCLL;
            v79 = v74;
            do
            {
              _Q0.i32[0] = *(v79 - 1);
              v18.i32[0] = *v79;
              v138 = vcvtq_f32_f16(*(float16x4_t *)_Q0.f32).u64[0];
              v140 = vcvtq_f32_f16(*(float16x4_t *)v18.f32).u64[0];
              v142 = *(float *)&v19;
              *(float *)&v80 = expf(*(float *)&v138);
              v139.i64[0] = v80;
              LODWORD(v138) = expf(*((float *)&v138 + 1));
              *(float *)&v81 = expf(*(float *)&v140);
              v137.i64[0] = v81;
              _Q0.f32[0] = expf(*((float *)&v140 + 1));
              v18 = v139;
              v18.i32[1] = v138;
              *(float16x4_t *)v18.f32 = vcvt_f16_f32(v18);
              v82 = v137;
              v82.i32[1] = _Q0.i32[0];
              *(float16x4_t *)_Q0.f32 = vcvt_f16_f32(v82);
              *(int32x2_t *)(v79 - 1) = vzip1_s32(*(int32x2_t *)v18.f32, *(int32x2_t *)_Q0.f32);
              v18.i64[0] = vcvtq_f32_f16(*(float16x4_t *)v18.f32).u64[0];
              _Q0.i64[0] = vcvtq_f32_f16(*(float16x4_t *)_Q0.f32).u64[0];
              *(float *)&v19 = (float)((float)((float)(v142 + v18.f32[0]) + v18.f32[1]) + _Q0.f32[0]) + _Q0.f32[1];
              v79 += 2;
              v78 -= 4;
            }
            while (v78);
            v77 = v71 & 0xFFFFFFFFFFFFFFFCLL;
            if (v71 == (v71 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_88;
          }
          else
          {
            v77 = 0;
            LODWORD(v19) = 0;
          }
          v83 = v71 - v77;
          v84 = (__int16 *)(v136 + 2 * (v77 + v72));
          do
          {
            v143 = v19;
            _H0 = *v84;
            __asm { FCVT            S0, H0; float }
            _Q0.f32[0] = expf(_S0);
            v19 = v143;
            __asm { FCVT            H0, S0 }
            *v84++ = _Q0.i16[0];
            __asm { FCVT            S0, H0 }
            *(float *)&v19 = *(float *)&v143 + _Q0.f32[0];
            --v83;
          }
          while (v83);
LABEL_88:
          if (v71 >= 0x10)
          {
            _Q0 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v19, 0);
            v92 = v71 & 0xFFFFFFFFFFFFFFF0;
            v93 = v76;
            do
            {
              v18 = (float32x4_t)vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvtq_f32_f16(*v93), _Q0)), vdivq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v93->i8), _Q0));
              *(float16x8_t *)v93[-2].i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vdivq_f32(vcvtq_f32_f16(v93[-2]), _Q0)), vdivq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v93[-2].i8), _Q0));
              *(float32x4_t *)v93->i8 = v18;
              v93 += 4;
              v92 -= 16;
            }
            while (v92);
            v91 = v71 & 0xFFFFFFFFFFFFFFF0;
            if (v71 == (v71 & 0xFFFFFFFFFFFFFFF0))
              goto LABEL_79;
          }
          else
          {
            v91 = 0;
          }
          v94 = v71 - v91;
          v95 = (__int16 *)(v136 + 2 * (v91 + v72));
          do
          {
            _H0 = *v95;
            __asm { FCVT            S0, H0 }
            _S0 = _S0 / *(float *)&v19;
            __asm { FCVT            H0, S0 }
            *v95++ = LOWORD(_S0);
            --v94;
          }
          while (v94);
LABEL_79:
          v70 += v71;
          v74 = (__int32 *)((char *)v74 + v75);
          v72 += v71;
          v76 = (float16x4_t *)((char *)v76 + v75);
        }
        while (v70 < v21);
      }
LABEL_96:
      v99 = v132;
      if (v150)
      {
        __p = v150;
        operator delete(v150);
        v99 = v147;
      }
      a3 = v135;
      if (v99)
      {
        v148 = v99;
        operator delete(v99);
      }
      v42 = v146;
      if (v146)
      {
        v100 = (unint64_t *)&v146->__shared_owners_;
        do
          v44 = __ldaxr(v100);
        while (__stlxr(v44 - 1, v100));
LABEL_128:
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
LABEL_130:
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 9;
      v120 = operator new();
      *(_QWORD *)v120 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v120 + 8));
      *(_QWORD *)a3 = v120;
      *(_QWORD *)v120 = 1;
      *(_DWORD *)(v120 + 8) = v154;
      v121 = v155;
      v155 = 0uLL;
      v122 = *(std::__shared_weak_count **)(v120 + 24);
      *(_OWORD *)(v120 + 16) = v121;
      if (v122)
      {
        v123 = (unint64_t *)&v122->__shared_owners_;
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v125 = *(void **)(v120 + 32);
      if (v125)
      {
        *(_QWORD *)(v120 + 40) = v125;
        operator delete(v125);
        *(_QWORD *)(v120 + 32) = 0;
        *(_QWORD *)(v120 + 40) = 0;
        *(_QWORD *)(v120 + 48) = 0;
      }
      v126 = *(void **)(v120 + 56);
      *(_OWORD *)(v120 + 32) = v156;
      *(_QWORD *)(v120 + 48) = v157;
      v157 = 0;
      v156 = 0uLL;
      if (v126)
      {
        *(_QWORD *)(v120 + 64) = v126;
        operator delete(v126);
        *(_QWORD *)(v120 + 56) = 0;
        *(_QWORD *)(v120 + 64) = 0;
        *(_QWORD *)(v120 + 72) = 0;
        v126 = (void *)v156;
      }
      *(_OWORD *)(v120 + 56) = v158;
      v127 = v159;
      v128 = v160;
      v159 = 0;
      v158 = 0uLL;
      *(_QWORD *)(v120 + 72) = v127;
      *(_QWORD *)(v120 + 80) = v128;
      if (v126)
      {
        *((_QWORD *)&v156 + 1) = v126;
        operator delete(v126);
      }
      v129 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
      if (*((_QWORD *)&v155 + 1))
      {
        v130 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
        do
          v131 = __ldaxr(v130);
        while (__stlxr(v131 - 1, v130));
        if (!v131)
        {
          ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
          std::__shared_weak_count::__release_weak(v129);
        }
      }
      return;
    default:
      printf("%d\n", v154);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Softmax(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Softmax(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_191290A1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;

  MEMORY[0x19401CD90](v1, 0x10B0C4002311774);
  do
  {
    v5 = __ldaxr(0);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, 0));
  if (!v6)
    nitro::nitro_builtins::Range(v2);
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v3 - 184));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::ReverseSequence(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  void *v19;
  int64_t v20;
  void *v21;
  int64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  __int128 *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  __int128 *v43;
  __int128 *v44;
  __int128 *v45;
  __int128 *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  __int128 *v51;
  __int128 *v52;
  __int128 *v53;
  __int128 *v54;
  uint64_t v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  int *v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  __n128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  _QWORD *v78;
  __n128 v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  __n128 v95;
  uint64_t v96;
  int *v97;
  unint64_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  __n128 v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t *v115;
  _QWORD *v116;
  __n128 v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t *v128;
  uint64_t v129;
  unint64_t v130;
  __n128 v131;
  uint64_t v132;
  int *v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  char *v140;
  __n128 v141;
  std::__shared_weak_count *v142;
  unint64_t *v143;
  unint64_t v144;
  void *v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t *v151;
  _QWORD *v152;
  __n128 v153;
  std::__shared_weak_count *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  uint64_t v165;
  unint64_t v166;
  __n128 v167;
  uint64_t v168;
  int *v169;
  unint64_t v170;
  int v171;
  unint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  __n128 v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  void *v181;
  std::__shared_weak_count *v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  _QWORD *v188;
  __n128 v189;
  std::__shared_weak_count *v190;
  unint64_t *v191;
  unint64_t v192;
  void *v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  unint64_t *v200;
  uint64_t v201;
  __int128 v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  void *v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  void *v216;
  _BYTE *v217;
  char *v218;
  uint64_t v219;
  void *v220;
  _BYTE *v221;
  char *v222;
  uint64_t v223;
  void *v224;
  char *v225;
  char *v226;
  int v227;
  __int128 v228;
  void *v229[2];
  uint64_t v230;
  void *__p[2];
  uint64_t v232;
  uint64_t v233;
  void *v234;
  _BYTE *v235;
  _DWORD v236[4];
  std::__shared_weak_count *v237;
  void *v238;
  _BYTE *v239;
  void *v240;
  void *v241;
  uint64_t v242;
  std::__shared_weak_count *v243;
  void *v244;
  void *v245;
  void *v246;
  void *v247;
  uint64_t **v248;
  std::__shared_weak_count *v249;
  void *v250;
  void *v251;
  void *v252;
  void *v253;
  uint64_t *v254;
  uint64_t *v255;
  void *v256;
  void *v257;
  void *v258;
  void *v259;
  __int128 *v260;
  __int128 *v261;
  __int128 *v262;
  __int128 *v263;
  __int128 *v264;
  __int128 *v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  void *v268;
  void *v269;
  void *v270;
  void *v271;
  uint64_t v272;

  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v236, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v227, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(_QWORD *)a2 + 8), (uint64_t)&v227);
  v10 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v266, (uint64_t)&v227);
  nitro::ndarray<int>::get_elements_copy(v10, (uint64_t *)&v234);
  if (v270)
  {
    v271 = v270;
    operator delete(v270);
  }
  if (v268)
  {
    v269 = v268;
    operator delete(v268);
  }
  v11 = v267;
  if (v267)
  {
    p_shared_owners = (unint64_t *)&v267->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v229[0])
  {
    v229[1] = v229[0];
    operator delete(v229[0]);
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
  if (*((_QWORD *)&v228 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = nitro::flexible_type_converter<int>::get((uint64_t)&v227, (unsigned __int8 *)a3);
  v18 = nitro::flexible_type_converter<int>::get((uint64_t)&v227, (unsigned __int8 *)a4);
  v224 = 0;
  v225 = 0;
  v226 = 0;
  v19 = v238;
  v20 = v239 - (_BYTE *)v238;
  if (v239 == v238)
  {
    v217 = 0;
    v218 = 0;
    v216 = 0;
  }
  else
  {
    if (v20 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v224 = operator new(v239 - (_BYTE *)v238);
    v226 = (char *)v224 + 8 * (v20 >> 3);
    memcpy(v224, v19, v20);
    v225 = v226;
    v216 = operator new(v20);
    v218 = (char *)v216 + 8 * (v20 >> 3);
    memcpy(v216, v224, v20);
    v217 = v218;
  }
  v219 = v18;
  v220 = 0;
  v221 = 0;
  v222 = 0;
  v21 = v234;
  v22 = v235 - (_BYTE *)v234;
  if (v235 != v234)
  {
    if (v22 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v220 = operator new(v235 - (_BYTE *)v234);
    v222 = (char *)v220 + 4 * (v22 >> 2);
    memcpy(v220, v21, v22);
    v221 = v222;
  }
  v223 = v17;
  switch(v236[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v242, (uint64_t)v236);
      nitro::ndarray<int>::init_from_shape((uint64_t **)&v216, &v266);
      v23 = v216;
      v264 = 0;
      v265 = 0;
      v263 = 0;
      v24 = v217 - (_BYTE *)v216;
      if (v217 == v216)
      {
        v260 = 0;
        v261 = 0;
        v262 = 0;
      }
      else
      {
        if ((unint64_t)v24 > 0x5555555555555550)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v25 = v24 >> 3;
        v26 = 24 * (v24 >> 3);
        v27 = (__int128 *)operator new(v26);
        v28 = (__int128 *)((char *)v27 + 24 * v25);
        v263 = v27;
        v265 = v28;
        do
        {
          *(_QWORD *)v27 = -1;
          *((_QWORD *)v27 + 1) = -1;
          *((_QWORD *)v27 + 2) = 1;
          v27 = (__int128 *)((char *)v27 + 24);
        }
        while (v27 != v28);
        v264 = v28;
        v29 = (__int128 *)operator new(v26);
        v30 = (__int128 *)((char *)v29 + 24 * v25);
        v260 = v29;
        v262 = v30;
        do
        {
          *(_QWORD *)v29 = -1;
          *((_QWORD *)v29 + 1) = -1;
          *((_QWORD *)v29 + 2) = 1;
          v29 = (__int128 *)((char *)v29 + 24);
        }
        while (v29 != v30);
        v261 = v30;
      }
      v129 = v219;
      v248 = (uint64_t **)v23[v219];
      v272 = (v221 - (_BYTE *)v220) >> 2;
      if (v248 != (uint64_t **)v272)
      {
        v254 = (uint64_t *)&v248;
        v255 = &v272;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIiEEEEDaT_ENKUlvE_clEv();
      }
      if (!v248)
        goto LABEL_268;
      v130 = 0;
      v131 = (__n128)xmmword_191A92A20;
      while (1)
      {
        v132 = 24 * v129;
        *(_QWORD *)((char *)v263 + v132) = v130;
        *(_QWORD *)((char *)v260 + v132) = v130;
        v133 = (int *)v220;
        if (*((_DWORD *)v220 + v130))
        {
          v134 = 0;
          while (1)
          {
            v254 = (uint64_t *)v134;
            if ((v134 & 0x8000000000000000) != 0)
            {
              v248 = &v254;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            v137 = v223;
            v138 = (char *)v263 + 24 * v223;
            *(_QWORD *)v138 = v134;
            *(_OWORD *)(v138 + 8) = xmmword_191A92A20;
            v139 = v133[v130] + ~v134;
            v254 = (uint64_t *)v139;
            if (v139 < 0)
            {
              v248 = &v254;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            v140 = (char *)v260 + 24 * v137;
            *(_QWORD *)v140 = v139;
            *(_OWORD *)(v140 + 8) = xmmword_191A92A20;
            nitro::ndarray<int>::slice(&v266, &v260, &v254, (__n128)xmmword_191A92A20);
            nitro::ndarray<int>::slice(&v242, &v263, &v248, v141);
            nitro::ndarray<int>::assign<int>((uint64_t *)&v254, (uint64_t *)&v248);
            if (v252)
            {
              v253 = v252;
              operator delete(v252);
            }
            if (v250)
            {
              v251 = v250;
              operator delete(v250);
            }
            v142 = v249;
            if (v249)
            {
              v143 = (unint64_t *)&v249->__shared_owners_;
              do
                v144 = __ldaxr(v143);
              while (__stlxr(v144 - 1, v143));
              if (!v144)
                break;
            }
            v145 = v258;
            if (v258)
              goto LABEL_232;
LABEL_233:
            if (v256)
            {
              v257 = v256;
              operator delete(v256);
            }
            v146 = (std::__shared_weak_count *)v255;
            if (v255)
            {
              v147 = (unint64_t *)(v255 + 1);
              do
                v148 = __ldaxr(v147);
              while (__stlxr(v148 - 1, v147));
              if (!v148)
              {
                ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                std::__shared_weak_count::__release_weak(v146);
              }
            }
            ++v134;
            v133 = (int *)v220;
            v135 = *((_DWORD *)v220 + v130);
            v136 = v135;
            if (v134 >= v135)
            {
              v23 = v216;
              goto LABEL_246;
            }
          }
          ((void (*)(std::__shared_weak_count *))v142->__on_zero_shared)(v142);
          std::__shared_weak_count::__release_weak(v142);
          v145 = v258;
          if (!v258)
            goto LABEL_233;
LABEL_232:
          v259 = v145;
          operator delete(v145);
          goto LABEL_233;
        }
        v135 = 0;
        v136 = 0;
LABEL_246:
        v149 = v223;
        v150 = v23[v223];
        if (v150 > v136)
          break;
LABEL_217:
        ++v130;
        v129 = v219;
        if (v130 >= v23[v219])
        {
LABEL_268:
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v227, &v266);
          if (v260)
          {
            v261 = v260;
            operator delete(v260);
          }
          if (v263)
          {
            v264 = v263;
            operator delete(v263);
          }
          if (v270)
          {
            v271 = v270;
            operator delete(v270);
          }
          if (v268)
          {
            v269 = v268;
            operator delete(v268);
          }
          v161 = v267;
          if (v267)
          {
            v162 = (unint64_t *)&v267->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          if (v246)
          {
            v247 = v246;
            operator delete(v246);
          }
          if (v244)
          {
            v245 = v244;
            operator delete(v244);
          }
          v90 = v243;
          if (v243)
          {
            v164 = (unint64_t *)&v243->__shared_owners_;
            do
              v92 = __ldaxr(v164);
            while (__stlxr(v92 - 1, v164));
LABEL_365:
            if (!v92)
            {
              ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
              std::__shared_weak_count::__release_weak(v90);
            }
          }
          goto LABEL_367;
        }
      }
      v151 = (unint64_t *)v263 + 3 * v223;
      *v151 = v136;
      v151[1] = v150;
      v151[2] = 1;
      v248 = (uint64_t **)v150;
      v272 = v135;
      if (v150 <= v135)
      {
        v254 = (uint64_t *)&v248;
        v255 = &v272;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      v152 = (_QWORD *)v260 + 3 * v149;
      *v152 = v135;
      v152[1] = v150;
      v152[2] = 1;
      nitro::ndarray<int>::slice(&v266, &v260, &v254, v131);
      nitro::ndarray<int>::slice(&v242, &v263, &v248, v153);
      nitro::ndarray<int>::assign<int>((uint64_t *)&v254, (uint64_t *)&v248);
      if (v252)
      {
        v253 = v252;
        operator delete(v252);
      }
      if (v250)
      {
        v251 = v250;
        operator delete(v250);
      }
      v154 = v249;
      if (!v249)
        goto LABEL_256;
      v155 = (unint64_t *)&v249->__shared_owners_;
      do
        v156 = __ldaxr(v155);
      while (__stlxr(v156 - 1, v155));
      if (!v156)
      {
        ((void (*)(std::__shared_weak_count *))v154->__on_zero_shared)(v154);
        std::__shared_weak_count::__release_weak(v154);
        v157 = v258;
        if (!v258)
          goto LABEL_258;
      }
      else
      {
LABEL_256:
        v157 = v258;
        if (!v258)
        {
LABEL_258:
          if (v256)
          {
            v257 = v256;
            operator delete(v256);
          }
          v158 = (std::__shared_weak_count *)v255;
          if (v255)
          {
            v159 = (unint64_t *)(v255 + 1);
            do
              v160 = __ldaxr(v159);
            while (__stlxr(v160 - 1, v159));
            if (!v160)
            {
              ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
              std::__shared_weak_count::__release_weak(v158);
            }
          }
          v23 = v216;
          goto LABEL_217;
        }
      }
      v259 = v157;
      operator delete(v157);
      goto LABEL_258;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v242, (uint64_t)v236);
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v216, &v266);
      v47 = v216;
      v264 = 0;
      v265 = 0;
      v263 = 0;
      v48 = v217 - (_BYTE *)v216;
      if (v217 == v216)
      {
        v260 = 0;
        v261 = 0;
        v262 = 0;
      }
      else
      {
        if ((unint64_t)v48 > 0x5555555555555550)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v49 = v48 >> 3;
        v50 = 24 * (v48 >> 3);
        v51 = (__int128 *)operator new(v50);
        v52 = (__int128 *)((char *)v51 + 24 * v49);
        v263 = v51;
        v265 = v52;
        do
        {
          *(_QWORD *)v51 = -1;
          *((_QWORD *)v51 + 1) = -1;
          *((_QWORD *)v51 + 2) = 1;
          v51 = (__int128 *)((char *)v51 + 24);
        }
        while (v51 != v52);
        v264 = v52;
        v53 = (__int128 *)operator new(v50);
        v54 = (__int128 *)((char *)v53 + 24 * v49);
        v260 = v53;
        v262 = v54;
        do
        {
          *(_QWORD *)v53 = -1;
          *((_QWORD *)v53 + 1) = -1;
          *((_QWORD *)v53 + 2) = 1;
          v53 = (__int128 *)((char *)v53 + 24);
        }
        while (v53 != v54);
        v261 = v54;
      }
      v165 = v219;
      v248 = (uint64_t **)v47[v219];
      v272 = (v221 - (_BYTE *)v220) >> 2;
      if (v248 != (uint64_t **)v272)
      {
        v254 = (uint64_t *)&v248;
        v255 = &v272;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIhEEEEDaT_ENKUlvE_clEv();
      }
      if (!v248)
        goto LABEL_345;
      v166 = 0;
      v167 = (__n128)xmmword_191A92A20;
      do
      {
        v168 = 24 * v165;
        *(_QWORD *)((char *)v263 + v168) = v166;
        *(_QWORD *)((char *)v260 + v168) = v166;
        v169 = (int *)v220;
        if (*((_DWORD *)v220 + v166))
        {
          v170 = 0;
          while (1)
          {
            v254 = (uint64_t *)v170;
            if ((v170 & 0x8000000000000000) != 0)
            {
              v248 = &v254;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            v173 = v223;
            v174 = (char *)v263 + 24 * v223;
            *(_QWORD *)v174 = v170;
            *(_OWORD *)(v174 + 8) = xmmword_191A92A20;
            v175 = v169[v166] + ~v170;
            v254 = (uint64_t *)v175;
            if (v175 < 0)
            {
              v248 = &v254;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            v176 = (char *)v260 + 24 * v173;
            *(_QWORD *)v176 = v175;
            *(_OWORD *)(v176 + 8) = xmmword_191A92A20;
            nitro::ndarray<unsigned char>::slice(&v266, &v260, &v254, (__n128)xmmword_191A92A20);
            nitro::ndarray<unsigned char>::slice(&v242, &v263, &v248, v177);
            nitro::ndarray<unsigned char>::assign<unsigned char>(&v254, &v248);
            if (v252)
            {
              v253 = v252;
              operator delete(v252);
            }
            if (v250)
            {
              v251 = v250;
              operator delete(v250);
            }
            v178 = v249;
            if (v249)
            {
              v179 = (unint64_t *)&v249->__shared_owners_;
              do
                v180 = __ldaxr(v179);
              while (__stlxr(v180 - 1, v179));
              if (!v180)
                break;
            }
            v181 = v258;
            if (v258)
              goto LABEL_309;
LABEL_310:
            if (v256)
            {
              v257 = v256;
              operator delete(v256);
            }
            v182 = (std::__shared_weak_count *)v255;
            if (v255)
            {
              v183 = (unint64_t *)(v255 + 1);
              do
                v184 = __ldaxr(v183);
              while (__stlxr(v184 - 1, v183));
              if (!v184)
              {
                ((void (*)(std::__shared_weak_count *))v182->__on_zero_shared)(v182);
                std::__shared_weak_count::__release_weak(v182);
              }
            }
            ++v170;
            v169 = (int *)v220;
            v171 = *((_DWORD *)v220 + v166);
            v172 = v171;
            if (v170 >= v171)
            {
              v47 = v216;
              goto LABEL_323;
            }
          }
          ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
          std::__shared_weak_count::__release_weak(v178);
          v181 = v258;
          if (!v258)
            goto LABEL_310;
LABEL_309:
          v259 = v181;
          operator delete(v181);
          goto LABEL_310;
        }
        v171 = 0;
        v172 = 0;
LABEL_323:
        v185 = v223;
        v186 = v47[v223];
        if (v186 > v172)
        {
          v187 = (unint64_t *)v263 + 3 * v223;
          *v187 = v172;
          v187[1] = v186;
          v187[2] = 1;
          v248 = (uint64_t **)v186;
          v272 = v171;
          if (v186 <= v171)
          {
            v254 = (uint64_t *)&v248;
            v255 = &v272;
            nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
          }
          v188 = (_QWORD *)v260 + 3 * v185;
          *v188 = v171;
          v188[1] = v186;
          v188[2] = 1;
          nitro::ndarray<unsigned char>::slice(&v266, &v260, &v254, v167);
          nitro::ndarray<unsigned char>::slice(&v242, &v263, &v248, v189);
          nitro::ndarray<unsigned char>::assign<unsigned char>(&v254, &v248);
          if (v252)
          {
            v253 = v252;
            operator delete(v252);
          }
          if (v250)
          {
            v251 = v250;
            operator delete(v250);
          }
          v190 = v249;
          if (!v249)
            goto LABEL_333;
          v191 = (unint64_t *)&v249->__shared_owners_;
          do
            v192 = __ldaxr(v191);
          while (__stlxr(v192 - 1, v191));
          if (!v192)
          {
            ((void (*)(std::__shared_weak_count *))v190->__on_zero_shared)(v190);
            std::__shared_weak_count::__release_weak(v190);
            v193 = v258;
            if (!v258)
              goto LABEL_335;
          }
          else
          {
LABEL_333:
            v193 = v258;
            if (!v258)
            {
LABEL_335:
              if (v256)
              {
                v257 = v256;
                operator delete(v256);
              }
              v194 = (std::__shared_weak_count *)v255;
              if (v255)
              {
                v195 = (unint64_t *)(v255 + 1);
                do
                  v196 = __ldaxr(v195);
                while (__stlxr(v196 - 1, v195));
                if (!v196)
                {
                  ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
                  std::__shared_weak_count::__release_weak(v194);
                }
              }
              v47 = v216;
              goto LABEL_294;
            }
          }
          v259 = v193;
          operator delete(v193);
          goto LABEL_335;
        }
LABEL_294:
        ++v166;
        v165 = v219;
      }
      while (v166 < v47[v219]);
LABEL_345:
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v227, &v266);
      if (v260)
      {
        v261 = v260;
        operator delete(v260);
      }
      if (v263)
      {
        v264 = v263;
        operator delete(v263);
      }
      if (v270)
      {
        v271 = v270;
        operator delete(v270);
      }
      if (v268)
      {
        v269 = v268;
        operator delete(v268);
      }
      v197 = v267;
      if (v267)
      {
        v198 = (unint64_t *)&v267->__shared_owners_;
        do
          v199 = __ldaxr(v198);
        while (__stlxr(v199 - 1, v198));
        if (!v199)
        {
          ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
          std::__shared_weak_count::__release_weak(v197);
        }
      }
      if (v246)
      {
        v247 = v246;
        operator delete(v246);
      }
      if (v244)
      {
        v245 = v244;
        operator delete(v244);
      }
      v90 = v243;
      if (v243)
      {
        v200 = (unint64_t *)&v243->__shared_owners_;
        do
          v92 = __ldaxr(v200);
        while (__stlxr(v92 - 1, v200));
        goto LABEL_365;
      }
LABEL_367:
      if (v220)
      {
        v221 = v220;
        operator delete(v220);
      }
      if (v216)
      {
        v217 = v216;
        operator delete(v216);
      }
      *(_QWORD *)a5 = 0;
      *(_BYTE *)(a5 + 8) = 9;
      v201 = operator new();
      *(_QWORD *)v201 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v201 + 8));
      *(_QWORD *)a5 = v201;
      *(_QWORD *)v201 = 1;
      *(_DWORD *)(v201 + 8) = v227;
      v202 = v228;
      v228 = 0uLL;
      v203 = *(std::__shared_weak_count **)(v201 + 24);
      *(_OWORD *)(v201 + 16) = v202;
      if (v203)
      {
        v204 = (unint64_t *)&v203->__shared_owners_;
        do
          v205 = __ldaxr(v204);
        while (__stlxr(v205 - 1, v204));
        if (!v205)
        {
          ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
          std::__shared_weak_count::__release_weak(v203);
        }
      }
      v206 = *(void **)(v201 + 32);
      if (v206)
      {
        *(_QWORD *)(v201 + 40) = v206;
        operator delete(v206);
        *(_QWORD *)(v201 + 32) = 0;
        *(_QWORD *)(v201 + 40) = 0;
        *(_QWORD *)(v201 + 48) = 0;
      }
      v207 = *(void **)(v201 + 56);
      *(_OWORD *)(v201 + 32) = *(_OWORD *)v229;
      *(_QWORD *)(v201 + 48) = v230;
      v229[1] = 0;
      v230 = 0;
      v229[0] = 0;
      if (v207)
      {
        *(_QWORD *)(v201 + 64) = v207;
        operator delete(v207);
        *(_QWORD *)(v201 + 56) = 0;
        *(_QWORD *)(v201 + 64) = 0;
        *(_QWORD *)(v201 + 72) = 0;
        v207 = v229[0];
      }
      *(_OWORD *)(v201 + 56) = *(_OWORD *)__p;
      v208 = v232;
      v209 = v233;
      __p[1] = 0;
      v232 = 0;
      __p[0] = 0;
      *(_QWORD *)(v201 + 72) = v208;
      *(_QWORD *)(v201 + 80) = v209;
      if (v207)
      {
        v229[1] = v207;
        operator delete(v207);
      }
      v210 = (std::__shared_weak_count *)*((_QWORD *)&v228 + 1);
      if (*((_QWORD *)&v228 + 1))
      {
        v211 = (unint64_t *)(*((_QWORD *)&v228 + 1) + 8);
        do
          v212 = __ldaxr(v211);
        while (__stlxr(v212 - 1, v211));
        if (!v212)
        {
          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
          std::__shared_weak_count::__release_weak(v210);
        }
      }
      if (v224)
        operator delete(v224);
      if (v234)
      {
        v235 = v234;
        operator delete(v234);
      }
      if (v240)
      {
        v241 = v240;
        operator delete(v240);
      }
      if (v238)
      {
        v239 = v238;
        operator delete(v238);
      }
      v213 = v237;
      if (v237)
      {
        v214 = (unint64_t *)&v237->__shared_owners_;
        do
          v215 = __ldaxr(v214);
        while (__stlxr(v215 - 1, v214));
        if (!v215)
        {
          ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
          std::__shared_weak_count::__release_weak(v213);
        }
      }
      return;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v242, (uint64_t)v236);
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v216, &v266);
      v31 = v216;
      v264 = 0;
      v265 = 0;
      v263 = 0;
      v32 = v217 - (_BYTE *)v216;
      if (v217 == v216)
      {
        v260 = 0;
        v261 = 0;
        v262 = 0;
      }
      else
      {
        if ((unint64_t)v32 > 0x5555555555555550)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v33 = v32 >> 3;
        v34 = 24 * (v32 >> 3);
        v35 = (__int128 *)operator new(v34);
        v36 = (__int128 *)((char *)v35 + 24 * v33);
        v263 = v35;
        v265 = v36;
        do
        {
          *(_QWORD *)v35 = -1;
          *((_QWORD *)v35 + 1) = -1;
          *((_QWORD *)v35 + 2) = 1;
          v35 = (__int128 *)((char *)v35 + 24);
        }
        while (v35 != v36);
        v264 = v36;
        v37 = (__int128 *)operator new(v34);
        v38 = (__int128 *)((char *)v37 + 24 * v33);
        v260 = v37;
        v262 = v38;
        do
        {
          *(_QWORD *)v37 = -1;
          *((_QWORD *)v37 + 1) = -1;
          *((_QWORD *)v37 + 2) = 1;
          v37 = (__int128 *)((char *)v37 + 24);
        }
        while (v37 != v38);
        v261 = v38;
      }
      v55 = v219;
      v248 = (uint64_t **)v31[v219];
      v272 = (v221 - (_BYTE *)v220) >> 2;
      if (v248 != (uint64_t **)v272)
      {
        v254 = (uint64_t *)&v248;
        v255 = &v272;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIfEEEEDaT_ENKUlvE_clEv();
      }
      if (!v248)
        goto LABEL_114;
      v56 = 0;
      v57 = (__n128)xmmword_191A92A20;
      while (1)
      {
        v58 = 24 * v55;
        *(_QWORD *)((char *)v263 + v58) = v56;
        *(_QWORD *)((char *)v260 + v58) = v56;
        v59 = (int *)v220;
        if (*((_DWORD *)v220 + v56))
        {
          v60 = 0;
          while (1)
          {
            v254 = (uint64_t *)v60;
            if ((v60 & 0x8000000000000000) != 0)
            {
              v248 = &v254;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            v63 = v223;
            v64 = (char *)v263 + 24 * v223;
            *(_QWORD *)v64 = v60;
            *(_OWORD *)(v64 + 8) = xmmword_191A92A20;
            v65 = v59[v56] + ~v60;
            v254 = (uint64_t *)v65;
            if (v65 < 0)
            {
              v248 = &v254;
              nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
            }
            v66 = (char *)v260 + 24 * v63;
            *(_QWORD *)v66 = v65;
            *(_OWORD *)(v66 + 8) = xmmword_191A92A20;
            nitro::ndarray<float>::slice(&v266, &v260, &v254, (__n128)xmmword_191A92A20);
            nitro::ndarray<float>::slice(&v242, &v263, &v248, v67);
            nitro::ndarray<float>::assign<float>((uint64_t *)&v254, (uint64_t *)&v248);
            if (v252)
            {
              v253 = v252;
              operator delete(v252);
            }
            if (v250)
            {
              v251 = v250;
              operator delete(v250);
            }
            v68 = v249;
            if (v249)
            {
              v69 = (unint64_t *)&v249->__shared_owners_;
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
                break;
            }
            v71 = v258;
            if (v258)
              goto LABEL_78;
LABEL_79:
            if (v256)
            {
              v257 = v256;
              operator delete(v256);
            }
            v72 = (std::__shared_weak_count *)v255;
            if (v255)
            {
              v73 = (unint64_t *)(v255 + 1);
              do
                v74 = __ldaxr(v73);
              while (__stlxr(v74 - 1, v73));
              if (!v74)
              {
                ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                std::__shared_weak_count::__release_weak(v72);
              }
            }
            ++v60;
            v59 = (int *)v220;
            v61 = *((_DWORD *)v220 + v56);
            v62 = v61;
            if (v60 >= v61)
            {
              v31 = v216;
              goto LABEL_92;
            }
          }
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
          v71 = v258;
          if (!v258)
            goto LABEL_79;
LABEL_78:
          v259 = v71;
          operator delete(v71);
          goto LABEL_79;
        }
        v61 = 0;
        v62 = 0;
LABEL_92:
        v75 = v223;
        v76 = v31[v223];
        if (v76 > v62)
          break;
LABEL_63:
        ++v56;
        v55 = v219;
        if (v56 >= v31[v219])
        {
LABEL_114:
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v227, &v266);
          if (v260)
          {
            v261 = v260;
            operator delete(v260);
          }
          if (v263)
          {
            v264 = v263;
            operator delete(v263);
          }
          if (v270)
          {
            v271 = v270;
            operator delete(v270);
          }
          if (v268)
          {
            v269 = v268;
            operator delete(v268);
          }
          v87 = v267;
          if (v267)
          {
            v88 = (unint64_t *)&v267->__shared_owners_;
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 - 1, v88));
            if (!v89)
            {
              ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
              std::__shared_weak_count::__release_weak(v87);
            }
          }
          if (v246)
          {
            v247 = v246;
            operator delete(v246);
          }
          if (v244)
          {
            v245 = v244;
            operator delete(v244);
          }
          v90 = v243;
          if (v243)
          {
            v91 = (unint64_t *)&v243->__shared_owners_;
            do
              v92 = __ldaxr(v91);
            while (__stlxr(v92 - 1, v91));
            goto LABEL_365;
          }
          goto LABEL_367;
        }
      }
      v77 = (unint64_t *)v263 + 3 * v223;
      *v77 = v62;
      v77[1] = v76;
      v77[2] = 1;
      v248 = (uint64_t **)v76;
      v272 = v61;
      if (v76 <= v61)
      {
        v254 = (uint64_t *)&v248;
        v255 = &v272;
        nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
      }
      v78 = (_QWORD *)v260 + 3 * v75;
      *v78 = v61;
      v78[1] = v76;
      v78[2] = 1;
      nitro::ndarray<float>::slice(&v266, &v260, &v254, v57);
      nitro::ndarray<float>::slice(&v242, &v263, &v248, v79);
      nitro::ndarray<float>::assign<float>((uint64_t *)&v254, (uint64_t *)&v248);
      if (v252)
      {
        v253 = v252;
        operator delete(v252);
      }
      if (v250)
      {
        v251 = v250;
        operator delete(v250);
      }
      v80 = v249;
      if (!v249)
        goto LABEL_102;
      v81 = (unint64_t *)&v249->__shared_owners_;
      do
        v82 = __ldaxr(v81);
      while (__stlxr(v82 - 1, v81));
      if (!v82)
      {
        ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
        std::__shared_weak_count::__release_weak(v80);
        v83 = v258;
        if (!v258)
          goto LABEL_104;
      }
      else
      {
LABEL_102:
        v83 = v258;
        if (!v258)
        {
LABEL_104:
          if (v256)
          {
            v257 = v256;
            operator delete(v256);
          }
          v84 = (std::__shared_weak_count *)v255;
          if (v255)
          {
            v85 = (unint64_t *)(v255 + 1);
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v31 = v216;
          goto LABEL_63;
        }
      }
      v259 = v83;
      operator delete(v83);
      goto LABEL_104;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v242, (uint64_t)v236);
      nitro::ndarray<half>::init_from_shape((uint64_t **)&v216, &v266);
      v39 = v216;
      v264 = 0;
      v265 = 0;
      v263 = 0;
      v40 = v217 - (_BYTE *)v216;
      if (v217 == v216)
      {
        v260 = 0;
        v261 = 0;
        v262 = 0;
      }
      else
      {
        if ((unint64_t)v40 > 0x5555555555555550)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v41 = v40 >> 3;
        v42 = 24 * (v40 >> 3);
        v43 = (__int128 *)operator new(v42);
        v44 = (__int128 *)((char *)v43 + 24 * v41);
        v263 = v43;
        v265 = v44;
        do
        {
          *(_QWORD *)v43 = -1;
          *((_QWORD *)v43 + 1) = -1;
          *((_QWORD *)v43 + 2) = 1;
          v43 = (__int128 *)((char *)v43 + 24);
        }
        while (v43 != v44);
        v264 = v44;
        v45 = (__int128 *)operator new(v42);
        v46 = (__int128 *)((char *)v45 + 24 * v41);
        v260 = v45;
        v262 = v46;
        do
        {
          *(_QWORD *)v45 = -1;
          *((_QWORD *)v45 + 1) = -1;
          *((_QWORD *)v45 + 2) = 1;
          v45 = (__int128 *)((char *)v45 + 24);
        }
        while (v45 != v46);
        v261 = v46;
      }
      v93 = v219;
      v248 = (uint64_t **)v39[v219];
      v272 = (v221 - (_BYTE *)v220) >> 2;
      if (v248 != (uint64_t **)v272)
      {
        v254 = (uint64_t *)&v248;
        v255 = &v272;
        _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIDhEEEEDaT_ENKUlvE_clEv();
      }
      if (!v248)
        goto LABEL_191;
      v94 = 0;
      v95 = (__n128)xmmword_191A92A20;
      break;
    default:
      printf("%d\n", v236[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
  while (1)
  {
    v96 = 24 * v93;
    *(_QWORD *)((char *)v263 + v96) = v94;
    *(_QWORD *)((char *)v260 + v96) = v94;
    v97 = (int *)v220;
    if (*((_DWORD *)v220 + v94))
    {
      v98 = 0;
      while (1)
      {
        v254 = (uint64_t *)v98;
        if ((v98 & 0x8000000000000000) != 0)
        {
          v248 = &v254;
          nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
        }
        v101 = v223;
        v102 = (char *)v263 + 24 * v223;
        *(_QWORD *)v102 = v98;
        *(_OWORD *)(v102 + 8) = xmmword_191A92A20;
        v103 = v97[v94] + ~v98;
        v254 = (uint64_t *)v103;
        if (v103 < 0)
        {
          v248 = &v254;
          nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()();
        }
        v104 = (char *)v260 + 24 * v101;
        *(_QWORD *)v104 = v103;
        *(_OWORD *)(v104 + 8) = xmmword_191A92A20;
        nitro::ndarray<half>::slice(&v266, &v260, &v254, (__n128)xmmword_191A92A20);
        nitro::ndarray<half>::slice(&v242, &v263, &v248, v105);
        nitro::ndarray<half>::assign<half>((uint64_t *)&v254, (uint64_t *)&v248);
        if (v252)
        {
          v253 = v252;
          operator delete(v252);
        }
        if (v250)
        {
          v251 = v250;
          operator delete(v250);
        }
        v106 = v249;
        if (v249)
        {
          v107 = (unint64_t *)&v249->__shared_owners_;
          do
            v108 = __ldaxr(v107);
          while (__stlxr(v108 - 1, v107));
          if (!v108)
            break;
        }
        v109 = v258;
        if (v258)
          goto LABEL_155;
LABEL_156:
        if (v256)
        {
          v257 = v256;
          operator delete(v256);
        }
        v110 = (std::__shared_weak_count *)v255;
        if (v255)
        {
          v111 = (unint64_t *)(v255 + 1);
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        ++v98;
        v97 = (int *)v220;
        v99 = *((_DWORD *)v220 + v94);
        v100 = v99;
        if (v98 >= v99)
        {
          v39 = v216;
          goto LABEL_169;
        }
      }
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
      v109 = v258;
      if (!v258)
        goto LABEL_156;
LABEL_155:
      v259 = v109;
      operator delete(v109);
      goto LABEL_156;
    }
    v99 = 0;
    v100 = 0;
LABEL_169:
    v113 = v223;
    v114 = v39[v223];
    if (v114 > v100)
      break;
LABEL_140:
    ++v94;
    v93 = v219;
    if (v94 >= v39[v219])
    {
LABEL_191:
      nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v227, &v266);
      if (v260)
      {
        v261 = v260;
        operator delete(v260);
      }
      if (v263)
      {
        v264 = v263;
        operator delete(v263);
      }
      if (v270)
      {
        v271 = v270;
        operator delete(v270);
      }
      if (v268)
      {
        v269 = v268;
        operator delete(v268);
      }
      v125 = v267;
      if (v267)
      {
        v126 = (unint64_t *)&v267->__shared_owners_;
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 - 1, v126));
        if (!v127)
        {
          ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
          std::__shared_weak_count::__release_weak(v125);
        }
      }
      if (v246)
      {
        v247 = v246;
        operator delete(v246);
      }
      if (v244)
      {
        v245 = v244;
        operator delete(v244);
      }
      v90 = v243;
      if (v243)
      {
        v128 = (unint64_t *)&v243->__shared_owners_;
        do
          v92 = __ldaxr(v128);
        while (__stlxr(v92 - 1, v128));
        goto LABEL_365;
      }
      goto LABEL_367;
    }
  }
  v115 = (unint64_t *)v263 + 3 * v223;
  *v115 = v100;
  v115[1] = v114;
  v115[2] = 1;
  v248 = (uint64_t **)v114;
  v272 = v99;
  if (v114 <= v99)
  {
    v254 = (uint64_t *)&v248;
    v255 = &v272;
    nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long,unsigned long)::{lambda(void)#2}::operator()();
  }
  v116 = (_QWORD *)v260 + 3 * v113;
  *v116 = v99;
  v116[1] = v114;
  v116[2] = 1;
  nitro::ndarray<half>::slice(&v266, &v260, &v254, v95);
  nitro::ndarray<half>::slice(&v242, &v263, &v248, v117);
  nitro::ndarray<half>::assign<half>((uint64_t *)&v254, (uint64_t *)&v248);
  if (v252)
  {
    v253 = v252;
    operator delete(v252);
  }
  if (v250)
  {
    v251 = v250;
    operator delete(v250);
  }
  v118 = v249;
  if (!v249)
    goto LABEL_179;
  v119 = (unint64_t *)&v249->__shared_owners_;
  do
    v120 = __ldaxr(v119);
  while (__stlxr(v120 - 1, v119));
  if (!v120)
  {
    ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
    std::__shared_weak_count::__release_weak(v118);
    v121 = v258;
    if (!v258)
      goto LABEL_181;
  }
  else
  {
LABEL_179:
    v121 = v258;
    if (!v258)
    {
LABEL_181:
      if (v256)
      {
        v257 = v256;
        operator delete(v256);
      }
      v122 = (std::__shared_weak_count *)v255;
      if (v255)
      {
        v123 = (unint64_t *)(v255 + 1);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 - 1, v123));
        if (!v124)
        {
          ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
          std::__shared_weak_count::__release_weak(v122);
        }
      }
      v39 = v216;
      goto LABEL_140;
    }
  }
  v259 = v121;
  operator delete(v121);
  goto LABEL_181;
}

void sub_19129232C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  uint64_t v48;
  void *v50;
  void *v51;

  v50 = *(void **)(v48 - 208);
  if (v50)
  {
    *(_QWORD *)(v48 - 200) = v50;
    operator delete(v50);
  }
  v51 = *(void **)(v48 - 184);
  if (v51)
  {
    *(_QWORD *)(v48 - 176) = v51;
    operator delete(v51);
  }
  nitro::ndarray<float>::~ndarray((_QWORD *)(v48 - 160));
  nitro::ndarray<float>::~ndarray(&a48);
  nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0((uint64_t)&a14);
  if (__p)
    operator delete(__p);
  if (a35)
  {
    a36 = (uint64_t)a35;
    operator delete(a35);
  }
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a38);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Max(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  int v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  void *v14;
  int64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  int64_t v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  int64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  size_t v35;
  int64_t v36;
  int64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  size_t v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::locale::__imp *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  std::locale::__imp *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  size_t v110;
  char *v111;
  uint64_t v112;
  void *v113;
  unint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  std::__shared_weak_count *v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  unint64_t v170;
  _QWORD *v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  _QWORD *v185;
  unint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  unsigned int v194;
  char *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  std::__shared_weak_count *v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t *v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  std::locale::__imp *v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  size_t v212;
  char *v213;
  uint64_t v214;
  void *v215;
  unint64_t v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  _QWORD *v240;
  unint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  unint64_t v253;
  std::__shared_weak_count *v254;
  unint64_t *v255;
  unint64_t v256;
  unint64_t *v257;
  char *v258;
  uint64_t v259;
  __int128 v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  void *v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::__shared_weak_count *v271;
  unint64_t *v272;
  unint64_t v273;
  std::__shared_weak_count *v274;
  unint64_t *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  std::ios_base *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  _QWORD *v285;
  _QWORD *v286;
  const std::locale::facet *v287;
  file_logger *v288;
  file_logger *started;
  char *v290;
  _QWORD *v291;
  uint64_t p_idx;
  uint64_t v293;
  file_logger *v294;
  file_logger *v295;
  char *v296;
  _QWORD *v297;
  void *locale;
  uint64_t v299;
  _QWORD *v300;
  void *v301;
  _QWORD *exception;
  char *v303;
  char *v304;
  char *v305;
  char *v306;
  char *v307;
  char *v308;
  _QWORD *v309;
  _QWORD *v310;
  _QWORD *v311;
  char *v312;
  char *v313;
  char *v314;
  char *v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int64_t v321;
  int64_t v322;
  int64_t v323;
  unint64_t v324;
  unint64_t v325;
  unint64_t v326;
  unint64_t v327;
  unint64_t v328;
  unint64_t v329;
  int64_t v330;
  int64_t v331;
  int64_t v332;
  size_t __len;
  size_t __lena;
  size_t __lenb;
  unint64_t v336;
  uint64_t v337;
  std::locale v338;
  void *v339[2];
  void *v340[2];
  void *__p;
  __int128 v342;
  uint64_t v343;
  uint64_t v344;
  void *v345;
  void *v346;
  char *v347;
  unint64_t v348;
  void *v349;
  char *v350;
  char *v351;
  _DWORD v352[4];
  std::__shared_weak_count *v353;
  void *v354;
  _BYTE *v355;
  void *v356;
  void *v357;
  uint64_t __dst;
  uint64_t v359;
  std::__shared_weak_count *v360;
  void *v361;
  void *v362;
  void *v363;
  void *v364;
  __int128 v365;
  __int128 v366;
  int v367;
  uint64_t v368;
  size_t __idx;
  size_t v370;
  char *v371;
  _BYTE *v372;
  char *v373;
  char *v374;
  uint64_t v375;
  char *v376;
  char *v377;
  char *v378;

  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v352, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  v6 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a2 + 8))
  {
    if (v6 != 9)
    {
      if (v6 == 4)
        __asm { BR              X11 }
      v277 = MEMORY[0x1E0DE4FE0];
      v278 = MEMORY[0x1E0DE4FE0] + 64;
      v279 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v280 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v368 = MEMORY[0x1E0DE4FE0] + 64;
      __dst = v279;
      *(uint64_t *)((char *)&__dst + *(_QWORD *)(v279 - 24)) = v280;
      v281 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24));
      std::ios_base::init(v281, &v359);
      v281[1].__vftable = 0;
      v281[1].__fmtflags_ = -1;
      __dst = v277 + 24;
      v368 = v278;
      std::streambuf::basic_streambuf();
      v359 = MEMORY[0x1E0DE4FB8] + 16;
      v365 = 0u;
      v366 = 0u;
      v367 = 16;
      v282 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"Check failed (", 14);
      v283 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v282, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v283, (uint64_t)":", 1);
      v284 = (_QWORD *)std::ostream::operator<<();
      v285 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v284, (uint64_t)"): ", 3);
      v286 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v285, (uint64_t)"false", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v286 + *(_QWORD *)(*v286 - 24)));
      v287 = std::locale::use_facet(&v338, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v287->__vftable[2].~facet_0)(v287, 10);
      std::locale::~locale(&v338);
      std::ostream::put();
      std::ostream::flush();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v288 = (file_logger *)global_logger();
        started = file_logger::start_stream(v288, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 976, 1);
        std::stringbuf::str();
        v290 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
        if (v290 && v290[280])
        {
          v291 = v290 + 16;
          if (SHIBYTE(v371) >= 0)
            p_idx = (uint64_t)&__idx;
          else
            p_idx = __idx;
          if (SHIBYTE(v371) >= 0)
            v293 = HIBYTE(v371);
          else
            v293 = v370;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v291, p_idx, v293);
        }
        if (SHIBYTE(v371) < 0)
          operator delete((void *)__idx);
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v294 = (file_logger *)global_logger();
        v295 = file_logger::start_stream(v294, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 976, 1);
        std::stringbuf::str();
        v296 = (char *)pthread_getspecific(*((_QWORD *)v295 + 74));
        if (v296 && v296[280])
        {
          v297 = v296 + 16;
          if (SHIBYTE(v339[1]) >= 0)
            locale = &v338;
          else
            locale = v338.__locale_;
          if (SHIBYTE(v339[1]) >= 0)
            v299 = HIBYTE(v339[1]);
          else
            v299 = (uint64_t)v339[0];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v297, (uint64_t)locale, v299);
        }
        v300 = pthread_getspecific(*((_QWORD *)v295 + 74));
        if (v300)
        {
          if (*((_BYTE *)v300 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v300 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v295);
            if (*((_DWORD *)v295 + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
            }
          }
        }
        if (SHIBYTE(v339[1]) < 0)
          operator delete(v338.__locale_);
      }
      v301 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
    }
    if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
    else
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(_QWORD *)a2 + 8), (uint64_t)&__dst);
    nitro::ndarray<int>::ndarray((uint64_t)&v338, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v338, (uint64_t *)&__idx);
    v7 = *(int *)__idx;
    v370 = __idx;
    operator delete((void *)__idx);
    if (__p)
    {
      *(_QWORD *)&v342 = __p;
      operator delete(__p);
    }
    if (v339[1])
    {
      v340[0] = v339[1];
      operator delete(v339[1]);
    }
    v8 = (std::__shared_weak_count *)v339[0];
    if (v339[0])
    {
      v9 = (unint64_t *)((char *)v339[0] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v363)
    {
      v364 = v363;
      operator delete(v363);
    }
    if (v361)
    {
      v362 = v361;
      operator delete(v361);
    }
    v11 = v360;
    if (v360)
    {
      p_shared_owners = (unint64_t *)&v360->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v7 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__dst, (unsigned __int8 *)a2);
  }
  v349 = 0;
  v350 = 0;
  v351 = 0;
  v14 = v354;
  v15 = v355 - (_BYTE *)v354;
  if (v355 == v354)
  {
    v346 = 0;
    v347 = 0;
    v345 = 0;
  }
  else
  {
    if (v15 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v16 = (char *)operator new(v355 - (_BYTE *)v354);
    v349 = v16;
    v351 = &v16[8 * (v15 >> 3)];
    memcpy(v16, v14, v15);
    v350 = &v16[8 * (v15 >> 3)];
    *(_QWORD *)&v16[8 * v7] = 1;
    v346 = 0;
    v347 = 0;
    v345 = 0;
    v17 = (char *)operator new(v15);
    v18 = &v17[8 * (v15 >> 3)];
    v345 = v17;
    v347 = v18;
    memcpy(v17, v16, v15);
    v346 = v18;
  }
  v348 = v7;
  v336 = v7;
  v337 = a4;
  switch(v352[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&__idx, (uint64_t)v352);
      v377 = 0;
      v378 = 0;
      v376 = 0;
      v19 = v372 - v371;
      if (v372 == v371)
      {
        v22 = 0;
        v20 = 0;
        v24 = 0;
      }
      else
      {
        if (v19 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v20 = (char *)operator new(v372 - v371);
        v21 = v19 >> 3;
        v22 = &v20[8 * (v19 >> 3)];
        v376 = v20;
        v378 = v22;
        v23 = v19 & 0xFFFFFFFFFFFFFFF8;
        bzero(v20, v19 & 0xFFFFFFFFFFFFFFF8);
        v377 = v22;
        v19 = (int64_t)operator new(v19);
        v24 = v19 + 8 * v21;
        bzero((void *)v19, v23);
      }
      nitro::ndarray<int>::init_from_shape((uint64_t **)&v345, &v338);
      if ((unint64_t)((v24 - v19) >> 3) <= 1)
        v204 = 1;
      else
        v204 = (v24 - v19) >> 3;
      v205 = v22 - v20;
      v206 = v348;
      if ((unint64_t)((v22 - v20) >> 3) <= 1)
        v207 = 1;
      else
        v207 = (v22 - v20) >> 3;
      v208 = v338.__locale_;
      v209 = v343;
      v210 = v205 >> 3;
      v211 = v375;
      v332 = v24;
      __lenb = v22 - v20;
      v326 = v204 & 0xFFFFFFFFFFFFFFFELL;
      v329 = v348;
      v323 = v19;
      v212 = __idx;
      v213 = v371;
      v314 = v373;
      v317 = (char *)__p;
      v308 = (char *)__p + 8;
      v311 = (_QWORD *)(v19 + 8);
      v305 = v373 + 8;
      v214 = (v205 >> 3) + 1;
      v320 = v214;
      while (1)
      {
        if (v22 != v20)
        {
          v215 = (void *)v19;
          v216 = v204;
          v217 = v22;
          v218 = v210;
          v219 = v211;
          memmove(v215, v20, __lenb);
          v211 = v219;
          v210 = v218;
          v22 = v217;
          v204 = v216;
          v214 = v320;
          v19 = v323;
          v206 = v329;
          v24 = v332;
        }
        *(_QWORD *)(v19 + 8 * v206) = 0;
        if (v24 == v19)
        {
          v220 = 0;
          goto LABEL_233;
        }
        if (v204 < 2)
          break;
        v222 = 0;
        v223 = 0;
        v224 = v326;
        v225 = v308;
        v226 = v311;
        do
        {
          v222 += *(v225 - 1) * *(v226 - 1);
          v223 += *v225 * *v226;
          v226 += 2;
          v225 += 2;
          v224 -= 2;
        }
        while (v224);
        v220 = v223 + v222;
        v221 = v326;
        if (v204 != v326)
          goto LABEL_231;
LABEL_233:
        if (v22 == v20)
        {
          v234 = 0;
          goto LABEL_242;
        }
        if (v207 < 2)
        {
          v234 = 0;
          v235 = 0;
LABEL_240:
          v241 = v207 - v235;
          v242 = 8 * v235;
          v243 = &v314[8 * v235];
          v244 = (uint64_t *)&v20[v242];
          do
          {
            v246 = *v244++;
            v245 = v246;
            v247 = *(_QWORD *)v243;
            v243 += 8;
            v234 += v247 * v245;
            --v241;
          }
          while (v241);
          goto LABEL_242;
        }
        v236 = 0;
        v237 = 0;
        v238 = v207 & 0xFFFFFFFFFFFFFFFELL;
        v239 = v305;
        v240 = v20 + 8;
        do
        {
          v236 += *(v239 - 1) * *(v240 - 1);
          v237 += *v239 * *v240;
          v240 += 2;
          v239 += 2;
          v238 -= 2;
        }
        while (v238);
        v234 = v237 + v236;
        v235 = v207 & 0xFFFFFFFFFFFFFFFELL;
        if (v207 != (v207 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_240;
LABEL_242:
        v248 = 4 * (v220 + v209);
        v249 = *(_DWORD *)(v212 + 4 * (v234 + v211));
        if (v249 <= *(_DWORD *)((char *)v208 + v248))
          v249 = *(_DWORD *)((char *)v208 + v248);
        *(_DWORD *)((char *)v208 + v248) = v249;
        if ((int)v210 >= 1)
        {
          v250 = v214;
          v251 = v210;
          while (1)
          {
            v252 = 8 * (v250 - 2);
            v253 = *(_QWORD *)&v20[v252] + 1;
            *(_QWORD *)&v20[v252] = v253;
            if (v253 < *(_QWORD *)&v213[v252])
              break;
            *(_QWORD *)&v20[8 * (v250 - 2)] = 0;
            --v251;
            if ((unint64_t)--v250 <= 1)
              goto LABEL_250;
          }
          if (v251 > 0)
            continue;
        }
LABEL_250:
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__dst, &v338);
        v94 = v336;
        v93 = v337;
        if (__p)
        {
          *(_QWORD *)&v342 = __p;
          operator delete(__p);
        }
        if (v339[1])
        {
          v340[0] = v339[1];
          operator delete(v339[1]);
        }
        v254 = (std::__shared_weak_count *)v339[0];
        if (v339[0])
        {
          v255 = (unint64_t *)((char *)v339[0] + 8);
          do
            v256 = __ldaxr(v255);
          while (__stlxr(v256 - 1, v255));
          if (!v256)
          {
            ((void (*)(std::__shared_weak_count *))v254->__on_zero_shared)(v254);
            std::__shared_weak_count::__release_weak(v254);
          }
        }
        if (v19)
          operator delete((void *)v19);
        if (v376)
          operator delete(v376);
        if (v373)
        {
          v374 = v373;
          operator delete(v373);
        }
        if (v371)
        {
          v372 = v371;
          operator delete(v371);
        }
        v98 = (std::__shared_weak_count *)v370;
        if (v370)
        {
          v257 = (unint64_t *)(v370 + 8);
          do
            v100 = __ldaxr(v257);
          while (__stlxr(v100 - 1, v257));
LABEL_270:
          if (!v100)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        goto LABEL_272;
      }
      v220 = 0;
      v221 = 0;
LABEL_231:
      v227 = v204 - v221;
      v228 = 8 * v221;
      v229 = &v317[8 * v221];
      v230 = (uint64_t *)(v19 + v228);
      do
      {
        v232 = *v230++;
        v231 = v232;
        v233 = *(_QWORD *)v229;
        v229 += 8;
        v220 += v233 * v231;
        --v227;
      }
      while (v227);
      goto LABEL_233;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&__idx, (uint64_t)v352);
      v377 = 0;
      v378 = 0;
      v376 = 0;
      v37 = v372 - v371;
      if (v372 == v371)
      {
        v40 = 0;
        v38 = 0;
        v42 = 0;
      }
      else
      {
        if (v37 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v38 = (char *)operator new(v372 - v371);
        v39 = v37 >> 3;
        v40 = &v38[8 * (v37 >> 3)];
        v376 = v38;
        v378 = v40;
        v41 = v37 & 0xFFFFFFFFFFFFFFF8;
        bzero(v38, v37 & 0xFFFFFFFFFFFFFFF8);
        v377 = v40;
        v37 = (int64_t)operator new(v37);
        v42 = v37 + 8 * v39;
        bzero((void *)v37, v41);
      }
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v345, &v338);
      if ((unint64_t)((v42 - v37) >> 3) <= 1)
        v162 = 1;
      else
        v162 = (v42 - v37) >> 3;
      v163 = v40 - v38;
      if ((unint64_t)((v40 - v38) >> 3) <= 1)
        v164 = 1;
      else
        v164 = (v40 - v38) >> 3;
      do
      {
        if (v40 != v38)
          memmove((void *)v37, v38, v40 - v38);
        *(_QWORD *)(v37 + 8 * v348) = 0;
        if (v42 == v37)
        {
          v165 = 0;
          goto LABEL_176;
        }
        if (v162 < 2)
        {
          v165 = 0;
          v166 = 0;
LABEL_174:
          v172 = v162 - v166;
          v173 = 8 * v166;
          v174 = (uint64_t *)((char *)__p + v173);
          v175 = (uint64_t *)(v37 + v173);
          do
          {
            v177 = *v175++;
            v176 = v177;
            v178 = *v174++;
            v165 += v178 * v176;
            --v172;
          }
          while (v172);
          goto LABEL_176;
        }
        v167 = 0;
        v168 = 0;
        v169 = (char *)__p + 8;
        v171 = (_QWORD *)(v37 + 8);
        v170 = v162 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v167 += *(v169 - 1) * *(v171 - 1);
          v168 += *v169 * *v171;
          v171 += 2;
          v169 += 2;
          v170 -= 2;
        }
        while (v170);
        v165 = v168 + v167;
        v166 = v162 & 0xFFFFFFFFFFFFFFFELL;
        if (v162 != (v162 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_174;
LABEL_176:
        if (v40 == v38)
        {
          v179 = 0;
        }
        else
        {
          if (v164 >= 2)
          {
            v181 = 0;
            v182 = 0;
            v183 = v373 + 8;
            v184 = v164 & 0xFFFFFFFFFFFFFFFELL;
            v185 = v38 + 8;
            do
            {
              v181 += *(v183 - 1) * *(v185 - 1);
              v182 += *v183 * *v185;
              v185 += 2;
              v183 += 2;
              v184 -= 2;
            }
            while (v184);
            v179 = v182 + v181;
            v180 = v164 & 0xFFFFFFFFFFFFFFFELL;
            if (v164 == (v164 & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_185;
          }
          else
          {
            v179 = 0;
            v180 = 0;
          }
          v186 = v164 - v180;
          v187 = 8 * v180;
          v188 = &v373[v187];
          v189 = (uint64_t *)&v38[v187];
          do
          {
            v191 = *v189++;
            v190 = v191;
            v192 = *(_QWORD *)v188;
            v188 += 8;
            v179 += v192 * v190;
            --v186;
          }
          while (v186);
        }
LABEL_185:
        v193 = v343 + v165;
        v194 = *(unsigned __int8 *)(__idx + v375 + v179);
        if (v194 <= *((unsigned __int8 *)v338.__locale_ + v193))
          LOBYTE(v194) = *((_BYTE *)v338.__locale_ + v193);
        *((_BYTE *)v338.__locale_ + v193) = v194;
        if ((int)(v163 >> 3) < 1)
          break;
        v195 = v371;
        v196 = (v163 >> 3) + 1;
        v197 = v163 >> 3;
        while (1)
        {
          v198 = 8 * (v196 - 2);
          v199 = *(_QWORD *)&v38[v198] + 1;
          *(_QWORD *)&v38[v198] = v199;
          if (v199 < *(_QWORD *)&v195[v198])
            break;
          *(_QWORD *)&v38[8 * (v196 - 2)] = 0;
          LODWORD(v197) = v197 - 1;
          if ((unint64_t)--v196 <= 1)
            goto LABEL_193;
        }
      }
      while ((int)v197 > 0);
LABEL_193:
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__dst, &v338);
      v94 = v7;
      v93 = v337;
      if (__p)
      {
        *(_QWORD *)&v342 = __p;
        operator delete(__p);
      }
      if (v339[1])
      {
        v340[0] = v339[1];
        operator delete(v339[1]);
      }
      v200 = (std::__shared_weak_count *)v339[0];
      if (v339[0])
      {
        v201 = (unint64_t *)((char *)v339[0] + 8);
        do
          v202 = __ldaxr(v201);
        while (__stlxr(v202 - 1, v201));
        if (!v202)
        {
          ((void (*)(std::__shared_weak_count *))v200->__on_zero_shared)(v200);
          std::__shared_weak_count::__release_weak(v200);
        }
      }
      if (v37)
        operator delete((void *)v37);
      if (v376)
        operator delete(v376);
      if (v373)
      {
        v374 = v373;
        operator delete(v373);
      }
      if (v371)
      {
        v372 = v371;
        operator delete(v371);
      }
      v98 = (std::__shared_weak_count *)v370;
      if (v370)
      {
        v203 = (unint64_t *)(v370 + 8);
        do
          v100 = __ldaxr(v203);
        while (__stlxr(v100 - 1, v203));
        goto LABEL_270;
      }
LABEL_272:
      if (v345)
      {
        v346 = v345;
        operator delete(v345);
      }
      __idx = 0;
      v370 = 0;
      v371 = 0;
      if (v94)
      {
        if (v94 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v258 = (char *)operator new(8 * v94);
        __idx = (size_t)v258;
        v371 = &v258[8 * v94];
        bzero(v258, 8 * v94);
        v370 = (size_t)&v258[8 * v94];
      }
      nitro::ndarray_container::squeeze((uint64_t)&__dst, &__idx, (uint64_t)&v338);
      *(_QWORD *)v93 = 0;
      *(_BYTE *)(v93 + 8) = 9;
      v259 = operator new();
      *(_QWORD *)v259 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v259 + 8));
      *(_QWORD *)v93 = v259;
      *(_QWORD *)v259 = 1;
      *(_DWORD *)(v259 + 8) = v338.__locale_;
      v260 = *(_OWORD *)v339;
      v339[0] = 0;
      v339[1] = 0;
      v261 = *(std::__shared_weak_count **)(v259 + 24);
      *(_OWORD *)(v259 + 16) = v260;
      if (v261)
      {
        v262 = (unint64_t *)&v261->__shared_owners_;
        do
          v263 = __ldaxr(v262);
        while (__stlxr(v263 - 1, v262));
        if (!v263)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
      v264 = *(void **)(v259 + 32);
      if (v264)
      {
        *(_QWORD *)(v259 + 40) = v264;
        operator delete(v264);
        *(_QWORD *)(v259 + 32) = 0;
        *(_QWORD *)(v259 + 40) = 0;
        *(_QWORD *)(v259 + 48) = 0;
      }
      v265 = *(void **)(v259 + 56);
      *(_OWORD *)(v259 + 32) = *(_OWORD *)v340;
      *(_QWORD *)(v259 + 48) = __p;
      v340[1] = 0;
      __p = 0;
      v340[0] = 0;
      if (v265)
      {
        *(_QWORD *)(v259 + 64) = v265;
        operator delete(v265);
        *(_QWORD *)(v259 + 56) = 0;
        *(_QWORD *)(v259 + 64) = 0;
        *(_QWORD *)(v259 + 72) = 0;
        v265 = v340[0];
      }
      *(_OWORD *)(v259 + 56) = v342;
      v266 = v343;
      v267 = v344;
      v343 = 0;
      v342 = 0uLL;
      *(_QWORD *)(v259 + 72) = v266;
      *(_QWORD *)(v259 + 80) = v267;
      if (v265)
      {
        v340[1] = v265;
        operator delete(v265);
      }
      v268 = (std::__shared_weak_count *)v339[1];
      if (v339[1])
      {
        v269 = (unint64_t *)((char *)v339[1] + 8);
        do
          v270 = __ldaxr(v269);
        while (__stlxr(v270 - 1, v269));
        if (!v270)
        {
          ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
          std::__shared_weak_count::__release_weak(v268);
        }
      }
      if (__idx)
      {
        v370 = __idx;
        operator delete((void *)__idx);
      }
      if (v363)
      {
        v364 = v363;
        operator delete(v363);
      }
      if (v361)
      {
        v362 = v361;
        operator delete(v361);
      }
      v271 = v360;
      if (v360)
      {
        v272 = (unint64_t *)&v360->__shared_owners_;
        do
          v273 = __ldaxr(v272);
        while (__stlxr(v273 - 1, v272));
        if (!v273)
        {
          ((void (*)(std::__shared_weak_count *))v271->__on_zero_shared)(v271);
          std::__shared_weak_count::__release_weak(v271);
        }
      }
      if (v349)
        operator delete(v349);
      if (v356)
      {
        v357 = v356;
        operator delete(v356);
      }
      if (v354)
      {
        v355 = v354;
        operator delete(v354);
      }
      v274 = v353;
      if (v353)
      {
        v275 = (unint64_t *)&v353->__shared_owners_;
        do
          v276 = __ldaxr(v275);
        while (__stlxr(v276 - 1, v275));
        if (!v276)
        {
          ((void (*)(std::__shared_weak_count *))v274->__on_zero_shared)(v274);
          std::__shared_weak_count::__release_weak(v274);
        }
      }
      return;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&__idx, (uint64_t)v352);
      v377 = 0;
      v378 = 0;
      v376 = 0;
      v25 = v372 - v371;
      if (v372 == v371)
      {
        v28 = 0;
        v26 = 0;
        v30 = 0;
      }
      else
      {
        if (v25 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v26 = (char *)operator new(v372 - v371);
        v27 = v25 >> 3;
        v28 = &v26[8 * (v25 >> 3)];
        v376 = v26;
        v378 = v28;
        v29 = v25 & 0xFFFFFFFFFFFFFFF8;
        bzero(v26, v25 & 0xFFFFFFFFFFFFFFF8);
        v377 = v28;
        v25 = (int64_t)operator new(v25);
        v30 = v25 + 8 * v27;
        bzero((void *)v25, v29);
      }
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v345, &v338);
      if ((unint64_t)((v30 - v25) >> 3) <= 1)
        v43 = 1;
      else
        v43 = (v30 - v25) >> 3;
      v44 = v28 - v26;
      v45 = v348;
      if ((unint64_t)((v28 - v26) >> 3) <= 1)
        v46 = 1;
      else
        v46 = (v28 - v26) >> 3;
      v47 = v338.__locale_;
      v48 = v343;
      v49 = v44 >> 3;
      v50 = v375;
      v330 = v30;
      __len = v28 - v26;
      v325 = v43 & 0xFFFFFFFFFFFFFFFELL;
      v327 = v348;
      v321 = v25;
      v51 = __idx;
      v52 = v371;
      v312 = v373;
      v315 = (char *)__p;
      v306 = (char *)__p + 8;
      v309 = (_QWORD *)(v25 + 8);
      v303 = v373 + 8;
      v53 = (v44 >> 3) + 1;
      v318 = v53;
      while (1)
      {
        if (v28 != v26)
        {
          v54 = (void *)v25;
          v55 = v43;
          v56 = v28;
          v57 = v49;
          v58 = v50;
          memmove(v54, v26, __len);
          v50 = v58;
          v49 = v57;
          v28 = v56;
          v43 = v55;
          v53 = v318;
          v25 = v321;
          v45 = v327;
          v30 = v330;
        }
        *(_QWORD *)(v25 + 8 * v45) = 0;
        if (v30 == v25)
        {
          v59 = 0;
          goto LABEL_63;
        }
        if (v43 < 2)
          break;
        v61 = 0;
        v62 = 0;
        v63 = v325;
        v64 = v306;
        v65 = v309;
        do
        {
          v61 += *(v64 - 1) * *(v65 - 1);
          v62 += *v64 * *v65;
          v65 += 2;
          v64 += 2;
          v63 -= 2;
        }
        while (v63);
        v59 = v62 + v61;
        v60 = v325;
        if (v43 != v325)
          goto LABEL_61;
LABEL_63:
        if (v28 == v26)
        {
          v73 = 0;
          goto LABEL_72;
        }
        if (v46 < 2)
        {
          v73 = 0;
          v74 = 0;
LABEL_70:
          v80 = v46 - v74;
          v81 = 8 * v74;
          v82 = &v312[8 * v74];
          v83 = (uint64_t *)&v26[v81];
          do
          {
            v85 = *v83++;
            v84 = v85;
            v86 = *(_QWORD *)v82;
            v82 += 8;
            v73 += v86 * v84;
            --v80;
          }
          while (v80);
          goto LABEL_72;
        }
        v75 = 0;
        v76 = 0;
        v77 = v46 & 0xFFFFFFFFFFFFFFFELL;
        v78 = v303;
        v79 = v26 + 8;
        do
        {
          v75 += *(v78 - 1) * *(v79 - 1);
          v76 += *v78 * *v79;
          v79 += 2;
          v78 += 2;
          v77 -= 2;
        }
        while (v77);
        v73 = v76 + v75;
        v74 = v46 & 0xFFFFFFFFFFFFFFFELL;
        if (v46 != (v46 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_70;
LABEL_72:
        v87 = 4 * (v59 + v48);
        v88 = *(float *)(v51 + 4 * (v73 + v50));
        if (v88 < *(float *)((char *)v47 + v87))
          v88 = *(float *)((char *)v47 + v87);
        *(float *)((char *)v47 + v87) = v88;
        if ((int)v49 >= 1)
        {
          v89 = v53;
          v90 = v49;
          while (1)
          {
            v91 = 8 * (v89 - 2);
            v92 = *(_QWORD *)&v26[v91] + 1;
            *(_QWORD *)&v26[v91] = v92;
            if (v92 < *(_QWORD *)&v52[v91])
              break;
            *(_QWORD *)&v26[8 * (v89 - 2)] = 0;
            --v90;
            if ((unint64_t)--v89 <= 1)
              goto LABEL_80;
          }
          if (v90 > 0)
            continue;
        }
LABEL_80:
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst, &v338);
        v94 = v336;
        v93 = v337;
        if (__p)
        {
          *(_QWORD *)&v342 = __p;
          operator delete(__p);
        }
        if (v339[1])
        {
          v340[0] = v339[1];
          operator delete(v339[1]);
        }
        v95 = (std::__shared_weak_count *)v339[0];
        if (v339[0])
        {
          v96 = (unint64_t *)((char *)v339[0] + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
        if (v25)
          operator delete((void *)v25);
        if (v376)
          operator delete(v376);
        if (v373)
        {
          v374 = v373;
          operator delete(v373);
        }
        if (v371)
        {
          v372 = v371;
          operator delete(v371);
        }
        v98 = (std::__shared_weak_count *)v370;
        if (v370)
        {
          v99 = (unint64_t *)(v370 + 8);
          do
            v100 = __ldaxr(v99);
          while (__stlxr(v100 - 1, v99));
          goto LABEL_270;
        }
        goto LABEL_272;
      }
      v59 = 0;
      v60 = 0;
LABEL_61:
      v66 = v43 - v60;
      v67 = 8 * v60;
      v68 = &v315[8 * v60];
      v69 = (uint64_t *)(v25 + v67);
      do
      {
        v71 = *v69++;
        v70 = v71;
        v72 = *(_QWORD *)v68;
        v68 += 8;
        v59 += v72 * v70;
        --v66;
      }
      while (v66);
      goto LABEL_63;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&__idx, (uint64_t)v352);
      v377 = 0;
      v378 = 0;
      v376 = 0;
      v31 = v372 - v371;
      if (v372 == v371)
      {
        v34 = 0;
        v32 = 0;
        v36 = 0;
      }
      else
      {
        if (v31 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v32 = (char *)operator new(v372 - v371);
        v33 = v31 >> 3;
        v34 = &v32[8 * (v31 >> 3)];
        v376 = v32;
        v378 = v34;
        v35 = v31 & 0xFFFFFFFFFFFFFFF8;
        bzero(v32, v31 & 0xFFFFFFFFFFFFFFF8);
        v377 = v34;
        v31 = (int64_t)operator new(v31);
        v36 = v31 + 8 * v33;
        bzero((void *)v31, v35);
      }
      nitro::ndarray<half>::init_from_shape((uint64_t **)&v345, &v338);
      if ((unint64_t)((v36 - v31) >> 3) <= 1)
        v102 = 1;
      else
        v102 = (v36 - v31) >> 3;
      v103 = v34 - v32;
      v104 = v348;
      if ((unint64_t)((v34 - v32) >> 3) <= 1)
        v105 = 1;
      else
        v105 = (v34 - v32) >> 3;
      v106 = v338.__locale_;
      v107 = v343;
      v108 = v103 >> 3;
      v109 = v375;
      v331 = v36;
      __lena = v34 - v32;
      v328 = v348;
      v322 = v31;
      v324 = v105 & 0xFFFFFFFFFFFFFFFELL;
      v110 = __idx;
      v111 = v371;
      v313 = v373;
      v316 = (char *)__p;
      v307 = (char *)__p + 8;
      v310 = (_QWORD *)(v31 + 8);
      v304 = v373 + 8;
      v112 = (v103 >> 3) + 1;
      v319 = v112;
      break;
    default:
      printf("%d\n", v352[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
  while (1)
  {
    if (v34 != v32)
    {
      v113 = (void *)v31;
      v114 = v105;
      v115 = v34;
      v116 = v108;
      v117 = v109;
      memmove(v113, v32, __lena);
      v109 = v117;
      v108 = v116;
      v34 = v115;
      v105 = v114;
      v112 = v319;
      v31 = v322;
      v104 = v328;
      v36 = v331;
    }
    *(_QWORD *)(v31 + 8 * v104) = 0;
    if (v36 == v31)
    {
      v118 = 0;
      goto LABEL_120;
    }
    if (v102 < 2)
      break;
    v120 = 0;
    v121 = 0;
    v122 = v102 & 0xFFFFFFFFFFFFFFFELL;
    v123 = v307;
    v124 = v310;
    do
    {
      v120 += *(v123 - 1) * *(v124 - 1);
      v121 += *v123 * *v124;
      v124 += 2;
      v123 += 2;
      v122 -= 2;
    }
    while (v122);
    v118 = v121 + v120;
    v119 = v102 & 0xFFFFFFFFFFFFFFFELL;
    if (v102 != (v102 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_118;
LABEL_120:
    if (v34 == v32)
    {
      v132 = 0;
      goto LABEL_129;
    }
    if (v105 < 2)
    {
      v132 = 0;
      v133 = 0;
LABEL_127:
      v139 = v105 - v133;
      v140 = 8 * v133;
      v141 = &v313[8 * v133];
      v142 = (uint64_t *)&v32[v140];
      do
      {
        v144 = *v142++;
        v143 = v144;
        v145 = *(_QWORD *)v141;
        v141 += 8;
        v132 += v145 * v143;
        --v139;
      }
      while (v139);
      goto LABEL_129;
    }
    v134 = 0;
    v135 = 0;
    v136 = v324;
    v137 = v304;
    v138 = v32 + 8;
    do
    {
      v134 += *(v137 - 1) * *(v138 - 1);
      v135 += *v137 * *v138;
      v138 += 2;
      v137 += 2;
      v136 -= 2;
    }
    while (v136);
    v132 = v135 + v134;
    v133 = v324;
    if (v105 != v324)
      goto LABEL_127;
LABEL_129:
    v146 = 2 * (v118 + v107);
    LOWORD(_S0) = *(_WORD *)(v110 + 2 * (v132 + v109));
    LOWORD(_S1) = *(_WORD *)((char *)v106 + v146);
    __asm
    {
      FCVT            S2, H0
      FCVT            S3, H1
    }
    if (_S2 < _S3)
      _S0 = _S1;
    *(_WORD *)((char *)v106 + v146) = _S0;
    if ((int)v108 >= 1)
    {
      v154 = v112;
      v155 = v108;
      while (1)
      {
        v156 = 8 * (v154 - 2);
        v157 = *(_QWORD *)&v32[v156] + 1;
        *(_QWORD *)&v32[v156] = v157;
        if (v157 < *(_QWORD *)&v111[v156])
          break;
        *(_QWORD *)&v32[8 * (v154 - 2)] = 0;
        --v155;
        if ((unint64_t)--v154 <= 1)
          goto LABEL_137;
      }
      if (v155 > 0)
        continue;
    }
LABEL_137:
    nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__dst, &v338);
    v94 = v336;
    v93 = v337;
    if (__p)
    {
      *(_QWORD *)&v342 = __p;
      operator delete(__p);
    }
    if (v339[1])
    {
      v340[0] = v339[1];
      operator delete(v339[1]);
    }
    v158 = (std::__shared_weak_count *)v339[0];
    if (v339[0])
    {
      v159 = (unint64_t *)((char *)v339[0] + 8);
      do
        v160 = __ldaxr(v159);
      while (__stlxr(v160 - 1, v159));
      if (!v160)
      {
        ((void (*)(std::__shared_weak_count *))v158->__on_zero_shared)(v158);
        std::__shared_weak_count::__release_weak(v158);
      }
    }
    if (v31)
      operator delete((void *)v31);
    if (v376)
      operator delete(v376);
    if (v373)
    {
      v374 = v373;
      operator delete(v373);
    }
    if (v371)
    {
      v372 = v371;
      operator delete(v371);
    }
    v98 = (std::__shared_weak_count *)v370;
    if (v370)
    {
      v161 = (unint64_t *)(v370 + 8);
      do
        v100 = __ldaxr(v161);
      while (__stlxr(v100 - 1, v161));
      goto LABEL_270;
    }
    goto LABEL_272;
  }
  v118 = 0;
  v119 = 0;
LABEL_118:
  v125 = v102 - v119;
  v126 = 8 * v119;
  v127 = &v316[8 * v119];
  v128 = (uint64_t *)(v31 + v126);
  do
  {
    v130 = *v128++;
    v129 = v130;
    v131 = *(_QWORD *)v127;
    v127 += 8;
    v118 += v131 * v129;
    --v125;
  }
  while (v125);
  goto LABEL_120;
}

void sub_19129402C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  char a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  if (a31 < 0)
    operator delete(__p);
  a56 = *(void **)v71;
  *(void **)((char *)&a56 + *((_QWORD *)a56 - 3)) = *(void **)(v71 + 24);
  a57 = v72 + 16;
  if (a70 < 0)
    operator delete(a65);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v70);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a46);
  _Unwind_Resume(a1);
}

void sub_191294408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40)
    JUMPOUT(0x1912943F4);
  JUMPOUT(0x1912943F8);
}

void nitro::nitro_builtins::Min(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  int64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  size_t v22;
  int64_t v23;
  int64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  int64_t v29;
  int64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  int64_t v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  size_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  float v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  size_t v108;
  char *v109;
  uint64_t v110;
  void *v111;
  unint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  size_t v163;
  char *v164;
  uint64_t v165;
  void *v166;
  unint64_t v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _QWORD *v176;
  _QWORD *v177;
  unint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  unint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v207;
  int v208;
  uint64_t v209;
  unint64_t v210;
  std::__shared_weak_count *v211;
  unint64_t *v212;
  unint64_t v213;
  unint64_t *v214;
  unint64_t v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  _QWORD *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  unint64_t v237;
  _QWORD *v238;
  unint64_t v239;
  uint64_t v240;
  char *v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  char *v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  unint64_t *v256;
  char *v257;
  uint64_t v258;
  __int128 v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  void *v263;
  void *v264;
  uint64_t v265;
  uint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  std::__shared_weak_count *v273;
  unint64_t *v274;
  unint64_t v275;
  char *v276;
  char *v277;
  char *v278;
  char *v279;
  char *v280;
  char *v281;
  _QWORD *v282;
  _QWORD *v283;
  _QWORD *v284;
  char *v285;
  char *v286;
  char *v287;
  char *v288;
  char *v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int64_t v294;
  int64_t v295;
  int64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  unint64_t v302;
  int64_t v303;
  int64_t v304;
  int64_t v305;
  size_t __len;
  size_t __lena;
  size_t __lenb;
  unint64_t v309;
  uint64_t v310;
  uint64_t v311;
  void *v312[2];
  void *v313[2];
  void *__p;
  __int128 v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  void *v319;
  char *v320;
  unint64_t v321;
  void *v322;
  char *v323;
  char *v324;
  _DWORD v325[4];
  std::__shared_weak_count *v326;
  void *v327;
  _BYTE *v328;
  void *v329;
  void *v330;
  uint64_t __dst;
  std::__shared_weak_count *v332;
  void *v333;
  void *v334;
  void *v335;
  void *v336;
  size_t __idx;
  size_t v338;
  char *v339;
  _BYTE *v340;
  char *v341;
  char *v342;
  uint64_t v343;
  char *v344;
  char *v345;
  char *v346;

  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v325, (const nitro::ndarray_container *)(*(_QWORD *)a1 + 8));
  v5 = a2[8];
  if (a2[8])
  {
    if (v5 == 9)
    {
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
      else
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(_QWORD *)a2 + 8), (uint64_t)&__dst);
      nitro::ndarray<int>::ndarray((uint64_t)&v311, (uint64_t)&__dst);
      nitro::ndarray<int>::get_elements_copy(&v311, (uint64_t *)&__idx);
      v6 = *(int *)__idx;
      v338 = __idx;
      operator delete((void *)__idx);
      if (__p)
      {
        *(_QWORD *)&v315 = __p;
        operator delete(__p);
      }
      if (v312[1])
      {
        v313[0] = v312[1];
        operator delete(v312[1]);
      }
      v7 = (std::__shared_weak_count *)v312[0];
      if (v312[0])
      {
        v8 = (unint64_t *)((char *)v312[0] + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      if (v335)
      {
        v336 = v335;
        operator delete(v335);
      }
      if (v333)
      {
        v334 = v333;
        operator delete(v333);
      }
      v10 = v332;
      if (v332)
      {
        p_shared_owners = (unint64_t *)&v332->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    else
    {
      if (v5 == 4)
        __asm { BR              X11 }
      v6 = 0;
    }
  }
  else
  {
    v6 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__dst, a2);
  }
  v322 = 0;
  v323 = 0;
  v324 = 0;
  v13 = v327;
  v14 = v328 - (_BYTE *)v327;
  if (v328 == v327)
  {
    v319 = 0;
    v320 = 0;
    v318 = 0;
  }
  else
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v328 - (_BYTE *)v327);
    v322 = v15;
    v324 = &v15[8 * (v14 >> 3)];
    memcpy(v15, v13, v14);
    v323 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)&v15[8 * v6] = 1;
    v319 = 0;
    v320 = 0;
    v318 = 0;
    v16 = (char *)operator new(v14);
    v17 = &v16[8 * (v14 >> 3)];
    v318 = v16;
    v320 = v17;
    memcpy(v16, v15, v14);
    v319 = v17;
  }
  v321 = v6;
  v309 = v6;
  v310 = a3;
  switch(v325[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&__idx, (uint64_t)v325);
      v345 = 0;
      v346 = 0;
      v344 = 0;
      v18 = v340 - v339;
      if (v340 == v339)
      {
        v21 = 0;
        v19 = 0;
        v23 = 0;
      }
      else
      {
        if (v18 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v19 = (char *)operator new(v340 - v339);
        v20 = v18 >> 3;
        v21 = &v19[8 * (v18 >> 3)];
        v344 = v19;
        v346 = v21;
        v22 = v18 & 0xFFFFFFFFFFFFFFF8;
        bzero(v19, v18 & 0xFFFFFFFFFFFFFFF8);
        v345 = v21;
        v18 = (int64_t)operator new(v18);
        v23 = v18 + 8 * v20;
        bzero((void *)v18, v22);
      }
      nitro::ndarray<int>::init_from_shape((uint64_t **)&v318, &v311);
      if ((unint64_t)((v23 - v18) >> 3) <= 1)
        v100 = 1;
      else
        v100 = (v23 - v18) >> 3;
      v101 = v21 - v19;
      v102 = v321;
      if ((unint64_t)((v21 - v19) >> 3) <= 1)
        v103 = 1;
      else
        v103 = (v21 - v19) >> 3;
      v104 = v311;
      v105 = v316;
      v106 = v101 >> 3;
      v107 = v343;
      v304 = v23;
      __lena = v21 - v19;
      v299 = v100 & 0xFFFFFFFFFFFFFFFELL;
      v301 = v321;
      v295 = v18;
      v108 = __idx;
      v109 = v339;
      v286 = v341;
      v289 = (char *)__p;
      v280 = (char *)__p + 8;
      v283 = (_QWORD *)(v18 + 8);
      v277 = v341 + 8;
      v110 = (v101 >> 3) + 1;
      v292 = v110;
      while (1)
      {
        if (v21 != v19)
        {
          v111 = (void *)v18;
          v112 = v100;
          v113 = v21;
          v114 = v106;
          v115 = v107;
          memmove(v111, v19, __lena);
          v107 = v115;
          v106 = v114;
          v21 = v113;
          v100 = v112;
          v110 = v292;
          v18 = v295;
          v102 = v301;
          v23 = v304;
        }
        *(_QWORD *)(v18 + 8 * v102) = 0;
        if (v23 == v18)
        {
          v116 = 0;
          goto LABEL_121;
        }
        if (v100 < 2)
          break;
        v118 = 0;
        v119 = 0;
        v120 = v299;
        v121 = v280;
        v122 = v283;
        do
        {
          v118 += *(v121 - 1) * *(v122 - 1);
          v119 += *v121 * *v122;
          v122 += 2;
          v121 += 2;
          v120 -= 2;
        }
        while (v120);
        v116 = v119 + v118;
        v117 = v299;
        if (v100 != v299)
          goto LABEL_119;
LABEL_121:
        if (v21 == v19)
        {
          v130 = 0;
          goto LABEL_130;
        }
        if (v103 < 2)
        {
          v130 = 0;
          v131 = 0;
LABEL_128:
          v137 = v103 - v131;
          v138 = 8 * v131;
          v139 = &v286[8 * v131];
          v140 = (uint64_t *)&v19[v138];
          do
          {
            v142 = *v140++;
            v141 = v142;
            v143 = *(_QWORD *)v139;
            v139 += 8;
            v130 += v143 * v141;
            --v137;
          }
          while (v137);
          goto LABEL_130;
        }
        v132 = 0;
        v133 = 0;
        v134 = v103 & 0xFFFFFFFFFFFFFFFELL;
        v135 = v277;
        v136 = v19 + 8;
        do
        {
          v132 += *(v135 - 1) * *(v136 - 1);
          v133 += *v135 * *v136;
          v136 += 2;
          v135 += 2;
          v134 -= 2;
        }
        while (v134);
        v130 = v133 + v132;
        v131 = v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v103 != (v103 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_128;
LABEL_130:
        v144 = 4 * (v116 + v105);
        v145 = *(_DWORD *)(v108 + 4 * (v130 + v107));
        if (*(_DWORD *)(v104 + v144) < v145)
          v145 = *(_DWORD *)(v104 + v144);
        *(_DWORD *)(v104 + v144) = v145;
        if ((int)v106 >= 1)
        {
          v146 = v110;
          v147 = v106;
          while (1)
          {
            v148 = 8 * (v146 - 2);
            v149 = *(_QWORD *)&v19[v148] + 1;
            *(_QWORD *)&v19[v148] = v149;
            if (v149 < *(_QWORD *)&v109[v148])
              break;
            *(_QWORD *)&v19[8 * (v146 - 2)] = 0;
            --v147;
            if ((unint64_t)--v146 <= 1)
              goto LABEL_138;
          }
          if (v147 > 0)
            continue;
        }
LABEL_138:
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__dst, &v311);
        v93 = v309;
        v92 = v310;
        if (__p)
        {
          *(_QWORD *)&v315 = __p;
          operator delete(__p);
        }
        if (v312[1])
        {
          v313[0] = v312[1];
          operator delete(v312[1]);
        }
        v150 = (std::__shared_weak_count *)v312[0];
        if (v312[0])
        {
          v151 = (unint64_t *)((char *)v312[0] + 8);
          do
            v152 = __ldaxr(v151);
          while (__stlxr(v152 - 1, v151));
          if (!v152)
          {
            ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
            std::__shared_weak_count::__release_weak(v150);
          }
        }
        if (v18)
          operator delete((void *)v18);
        if (v344)
          operator delete(v344);
        if (v341)
        {
          v342 = v341;
          operator delete(v341);
        }
        if (v339)
        {
          v340 = v339;
          operator delete(v339);
        }
        v97 = (std::__shared_weak_count *)v338;
        if (v338)
        {
          v153 = (unint64_t *)(v338 + 8);
          do
            v99 = __ldaxr(v153);
          while (__stlxr(v99 - 1, v153));
LABEL_271:
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
            std::__shared_weak_count::__release_weak(v97);
          }
        }
        goto LABEL_273;
      }
      v116 = 0;
      v117 = 0;
LABEL_119:
      v123 = v100 - v117;
      v124 = 8 * v117;
      v125 = &v289[8 * v117];
      v126 = (uint64_t *)(v18 + v124);
      do
      {
        v128 = *v126++;
        v127 = v128;
        v129 = *(_QWORD *)v125;
        v125 += 8;
        v116 += v129 * v127;
        --v123;
      }
      while (v123);
      goto LABEL_121;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&__idx, (uint64_t)v325);
      v345 = 0;
      v346 = 0;
      v344 = 0;
      v36 = v340 - v339;
      if (v340 == v339)
      {
        v39 = 0;
        v37 = 0;
        v41 = 0;
      }
      else
      {
        if (v36 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v37 = (char *)operator new(v340 - v339);
        v38 = v36 >> 3;
        v39 = &v37[8 * (v36 >> 3)];
        v344 = v37;
        v346 = v39;
        v40 = v36 & 0xFFFFFFFFFFFFFFF8;
        bzero(v37, v36 & 0xFFFFFFFFFFFFFFF8);
        v345 = v39;
        v36 = (int64_t)operator new(v36);
        v41 = v36 + 8 * v38;
        bzero((void *)v36, v40);
      }
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v318, &v311);
      if ((unint64_t)((v41 - v36) >> 3) <= 1)
        v215 = 1;
      else
        v215 = (v41 - v36) >> 3;
      v216 = v39 - v37;
      if ((unint64_t)((v39 - v37) >> 3) <= 1)
        v217 = 1;
      else
        v217 = (v39 - v37) >> 3;
      do
      {
        if (v39 != v37)
          memmove((void *)v36, v37, v39 - v37);
        *(_QWORD *)(v36 + 8 * v321) = 0;
        if (v41 == v36)
        {
          v218 = 0;
          goto LABEL_234;
        }
        if (v215 < 2)
        {
          v218 = 0;
          v219 = 0;
LABEL_232:
          v225 = v215 - v219;
          v226 = 8 * v219;
          v227 = (uint64_t *)((char *)__p + v226);
          v228 = (uint64_t *)(v36 + v226);
          do
          {
            v230 = *v228++;
            v229 = v230;
            v231 = *v227++;
            v218 += v231 * v229;
            --v225;
          }
          while (v225);
          goto LABEL_234;
        }
        v220 = 0;
        v221 = 0;
        v222 = (char *)__p + 8;
        v224 = (_QWORD *)(v36 + 8);
        v223 = v215 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v220 += *(v222 - 1) * *(v224 - 1);
          v221 += *v222 * *v224;
          v224 += 2;
          v222 += 2;
          v223 -= 2;
        }
        while (v223);
        v218 = v221 + v220;
        v219 = v215 & 0xFFFFFFFFFFFFFFFELL;
        if (v215 != (v215 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_232;
LABEL_234:
        if (v39 == v37)
        {
          v232 = 0;
        }
        else
        {
          if (v217 >= 2)
          {
            v234 = 0;
            v235 = 0;
            v236 = v341 + 8;
            v237 = v217 & 0xFFFFFFFFFFFFFFFELL;
            v238 = v37 + 8;
            do
            {
              v234 += *(v236 - 1) * *(v238 - 1);
              v235 += *v236 * *v238;
              v238 += 2;
              v236 += 2;
              v237 -= 2;
            }
            while (v237);
            v232 = v235 + v234;
            v233 = v217 & 0xFFFFFFFFFFFFFFFELL;
            if (v217 == (v217 & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_243;
          }
          else
          {
            v232 = 0;
            v233 = 0;
          }
          v239 = v217 - v233;
          v240 = 8 * v233;
          v241 = &v341[v240];
          v242 = (uint64_t *)&v37[v240];
          do
          {
            v244 = *v242++;
            v243 = v244;
            v245 = *(_QWORD *)v241;
            v241 += 8;
            v232 += v245 * v243;
            --v239;
          }
          while (v239);
        }
LABEL_243:
        v246 = v316 + v218;
        v247 = *(unsigned __int8 *)(__idx + v343 + v232);
        if (*(unsigned __int8 *)(v311 + v246) < v247)
          LOBYTE(v247) = *(_BYTE *)(v311 + v246);
        *(_BYTE *)(v311 + v246) = v247;
        if ((int)(v216 >> 3) < 1)
          break;
        v248 = v339;
        v249 = (v216 >> 3) + 1;
        v250 = v216 >> 3;
        while (1)
        {
          v251 = 8 * (v249 - 2);
          v252 = *(_QWORD *)&v37[v251] + 1;
          *(_QWORD *)&v37[v251] = v252;
          if (v252 < *(_QWORD *)&v248[v251])
            break;
          *(_QWORD *)&v37[8 * (v249 - 2)] = 0;
          LODWORD(v250) = v250 - 1;
          if ((unint64_t)--v249 <= 1)
            goto LABEL_251;
        }
      }
      while ((int)v250 > 0);
LABEL_251:
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__dst, &v311);
      v93 = v6;
      v92 = v310;
      if (__p)
      {
        *(_QWORD *)&v315 = __p;
        operator delete(__p);
      }
      if (v312[1])
      {
        v313[0] = v312[1];
        operator delete(v312[1]);
      }
      v253 = (std::__shared_weak_count *)v312[0];
      if (v312[0])
      {
        v254 = (unint64_t *)((char *)v312[0] + 8);
        do
          v255 = __ldaxr(v254);
        while (__stlxr(v255 - 1, v254));
        if (!v255)
        {
          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
          std::__shared_weak_count::__release_weak(v253);
        }
      }
      if (v36)
        operator delete((void *)v36);
      if (v344)
        operator delete(v344);
      if (v341)
      {
        v342 = v341;
        operator delete(v341);
      }
      if (v339)
      {
        v340 = v339;
        operator delete(v339);
      }
      v97 = (std::__shared_weak_count *)v338;
      if (v338)
      {
        v256 = (unint64_t *)(v338 + 8);
        do
          v99 = __ldaxr(v256);
        while (__stlxr(v99 - 1, v256));
        goto LABEL_271;
      }
LABEL_273:
      if (v318)
      {
        v319 = v318;
        operator delete(v318);
      }
      __idx = 0;
      v338 = 0;
      v339 = 0;
      if (v93)
      {
        if (v93 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v257 = (char *)operator new(8 * v93);
        __idx = (size_t)v257;
        v339 = &v257[8 * v93];
        bzero(v257, 8 * v93);
        v338 = (size_t)&v257[8 * v93];
      }
      nitro::ndarray_container::squeeze((uint64_t)&__dst, &__idx, (uint64_t)&v311);
      *(_QWORD *)v92 = 0;
      *(_BYTE *)(v92 + 8) = 9;
      v258 = operator new();
      *(_QWORD *)v258 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v258 + 8));
      *(_QWORD *)v92 = v258;
      *(_QWORD *)v258 = 1;
      *(_DWORD *)(v258 + 8) = v311;
      v259 = *(_OWORD *)v312;
      v312[0] = 0;
      v312[1] = 0;
      v260 = *(std::__shared_weak_count **)(v258 + 24);
      *(_OWORD *)(v258 + 16) = v259;
      if (v260)
      {
        v261 = (unint64_t *)&v260->__shared_owners_;
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
          std::__shared_weak_count::__release_weak(v260);
        }
      }
      v263 = *(void **)(v258 + 32);
      if (v263)
      {
        *(_QWORD *)(v258 + 40) = v263;
        operator delete(v263);
        *(_QWORD *)(v258 + 32) = 0;
        *(_QWORD *)(v258 + 40) = 0;
        *(_QWORD *)(v258 + 48) = 0;
      }
      v264 = *(void **)(v258 + 56);
      *(_OWORD *)(v258 + 32) = *(_OWORD *)v313;
      *(_QWORD *)(v258 + 48) = __p;
      v313[1] = 0;
      __p = 0;
      v313[0] = 0;
      if (v264)
      {
        *(_QWORD *)(v258 + 64) = v264;
        operator delete(v264);
        *(_QWORD *)(v258 + 56) = 0;
        *(_QWORD *)(v258 + 64) = 0;
        *(_QWORD *)(v258 + 72) = 0;
        v264 = v313[0];
      }
      *(_OWORD *)(v258 + 56) = v315;
      v265 = v316;
      v266 = v317;
      v316 = 0;
      v315 = 0uLL;
      *(_QWORD *)(v258 + 72) = v265;
      *(_QWORD *)(v258 + 80) = v266;
      if (v264)
      {
        v313[1] = v264;
        operator delete(v264);
      }
      v267 = (std::__shared_weak_count *)v312[1];
      if (v312[1])
      {
        v268 = (unint64_t *)((char *)v312[1] + 8);
        do
          v269 = __ldaxr(v268);
        while (__stlxr(v269 - 1, v268));
        if (!v269)
        {
          ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
          std::__shared_weak_count::__release_weak(v267);
        }
      }
      if (__idx)
      {
        v338 = __idx;
        operator delete((void *)__idx);
      }
      if (v335)
      {
        v336 = v335;
        operator delete(v335);
      }
      if (v333)
      {
        v334 = v333;
        operator delete(v333);
      }
      v270 = v332;
      if (v332)
      {
        v271 = (unint64_t *)&v332->__shared_owners_;
        do
          v272 = __ldaxr(v271);
        while (__stlxr(v272 - 1, v271));
        if (!v272)
        {
          ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
          std::__shared_weak_count::__release_weak(v270);
        }
      }
      if (v322)
        operator delete(v322);
      if (v329)
      {
        v330 = v329;
        operator delete(v329);
      }
      if (v327)
      {
        v328 = v327;
        operator delete(v327);
      }
      v273 = v326;
      if (v326)
      {
        v274 = (unint64_t *)&v326->__shared_owners_;
        do
          v275 = __ldaxr(v274);
        while (__stlxr(v275 - 1, v274));
        if (!v275)
        {
          ((void (*)(std::__shared_weak_count *))v273->__on_zero_shared)(v273);
          std::__shared_weak_count::__release_weak(v273);
        }
      }
      return;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&__idx, (uint64_t)v325);
      v345 = 0;
      v346 = 0;
      v344 = 0;
      v24 = v340 - v339;
      if (v340 == v339)
      {
        v27 = 0;
        v25 = 0;
        v29 = 0;
      }
      else
      {
        if (v24 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v25 = (char *)operator new(v340 - v339);
        v26 = v24 >> 3;
        v27 = &v25[8 * (v24 >> 3)];
        v344 = v25;
        v346 = v27;
        v28 = v24 & 0xFFFFFFFFFFFFFFF8;
        bzero(v25, v24 & 0xFFFFFFFFFFFFFFF8);
        v345 = v27;
        v24 = (int64_t)operator new(v24);
        v29 = v24 + 8 * v26;
        bzero((void *)v24, v28);
      }
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v318, &v311);
      if ((unint64_t)((v29 - v24) >> 3) <= 1)
        v42 = 1;
      else
        v42 = (v29 - v24) >> 3;
      v43 = v27 - v25;
      v44 = v321;
      if ((unint64_t)((v27 - v25) >> 3) <= 1)
        v45 = 1;
      else
        v45 = (v27 - v25) >> 3;
      v46 = v311;
      v47 = v316;
      v48 = v43 >> 3;
      v49 = v343;
      v303 = v29;
      __len = v27 - v25;
      v298 = v42 & 0xFFFFFFFFFFFFFFFELL;
      v300 = v321;
      v294 = v24;
      v50 = __idx;
      v51 = v339;
      v285 = v341;
      v288 = (char *)__p;
      v279 = (char *)__p + 8;
      v282 = (_QWORD *)(v24 + 8);
      v276 = v341 + 8;
      v52 = (v43 >> 3) + 1;
      v291 = v52;
      while (1)
      {
        if (v27 != v25)
        {
          v53 = (void *)v24;
          v54 = v42;
          v55 = v27;
          v56 = v48;
          v57 = v49;
          memmove(v53, v25, __len);
          v49 = v57;
          v48 = v56;
          v27 = v55;
          v42 = v54;
          v52 = v291;
          v24 = v294;
          v44 = v300;
          v29 = v303;
        }
        *(_QWORD *)(v24 + 8 * v44) = 0;
        if (v29 == v24)
        {
          v58 = 0;
          goto LABEL_64;
        }
        if (v42 < 2)
          break;
        v60 = 0;
        v61 = 0;
        v62 = v298;
        v63 = v279;
        v64 = v282;
        do
        {
          v60 += *(v63 - 1) * *(v64 - 1);
          v61 += *v63 * *v64;
          v64 += 2;
          v63 += 2;
          v62 -= 2;
        }
        while (v62);
        v58 = v61 + v60;
        v59 = v298;
        if (v42 != v298)
          goto LABEL_62;
LABEL_64:
        if (v27 == v25)
        {
          v72 = 0;
          goto LABEL_73;
        }
        if (v45 < 2)
        {
          v72 = 0;
          v73 = 0;
LABEL_71:
          v79 = v45 - v73;
          v80 = 8 * v73;
          v81 = &v285[8 * v73];
          v82 = (uint64_t *)&v25[v80];
          do
          {
            v84 = *v82++;
            v83 = v84;
            v85 = *(_QWORD *)v81;
            v81 += 8;
            v72 += v85 * v83;
            --v79;
          }
          while (v79);
          goto LABEL_73;
        }
        v74 = 0;
        v75 = 0;
        v76 = v45 & 0xFFFFFFFFFFFFFFFELL;
        v77 = v276;
        v78 = v25 + 8;
        do
        {
          v74 += *(v77 - 1) * *(v78 - 1);
          v75 += *v77 * *v78;
          v78 += 2;
          v77 += 2;
          v76 -= 2;
        }
        while (v76);
        v72 = v75 + v74;
        v73 = v45 & 0xFFFFFFFFFFFFFFFELL;
        if (v45 != (v45 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_71;
LABEL_73:
        v86 = 4 * (v58 + v47);
        v87 = *(float *)(v46 + v86);
        if (v87 >= *(float *)(v50 + 4 * (v72 + v49)))
          v87 = *(float *)(v50 + 4 * (v72 + v49));
        *(float *)(v46 + v86) = v87;
        if ((int)v48 >= 1)
        {
          v88 = v52;
          v89 = v48;
          while (1)
          {
            v90 = 8 * (v88 - 2);
            v91 = *(_QWORD *)&v25[v90] + 1;
            *(_QWORD *)&v25[v90] = v91;
            if (v91 < *(_QWORD *)&v51[v90])
              break;
            *(_QWORD *)&v25[8 * (v88 - 2)] = 0;
            --v89;
            if ((unint64_t)--v88 <= 1)
              goto LABEL_81;
          }
          if (v89 > 0)
            continue;
        }
LABEL_81:
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__dst, &v311);
        v93 = v309;
        v92 = v310;
        if (__p)
        {
          *(_QWORD *)&v315 = __p;
          operator delete(__p);
        }
        if (v312[1])
        {
          v313[0] = v312[1];
          operator delete(v312[1]);
        }
        v94 = (std::__shared_weak_count *)v312[0];
        if (v312[0])
        {
          v95 = (unint64_t *)((char *)v312[0] + 8);
          do
            v96 = __ldaxr(v95);
          while (__stlxr(v96 - 1, v95));
          if (!v96)
          {
            ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
            std::__shared_weak_count::__release_weak(v94);
          }
        }
        if (v24)
          operator delete((void *)v24);
        if (v344)
          operator delete(v344);
        if (v341)
        {
          v342 = v341;
          operator delete(v341);
        }
        if (v339)
        {
          v340 = v339;
          operator delete(v339);
        }
        v97 = (std::__shared_weak_count *)v338;
        if (v338)
        {
          v98 = (unint64_t *)(v338 + 8);
          do
            v99 = __ldaxr(v98);
          while (__stlxr(v99 - 1, v98));
          goto LABEL_271;
        }
        goto LABEL_273;
      }
      v58 = 0;
      v59 = 0;
LABEL_62:
      v65 = v42 - v59;
      v66 = 8 * v59;
      v67 = &v288[8 * v59];
      v68 = (uint64_t *)(v24 + v66);
      do
      {
        v70 = *v68++;
        v69 = v70;
        v71 = *(_QWORD *)v67;
        v67 += 8;
        v58 += v71 * v69;
        --v65;
      }
      while (v65);
      goto LABEL_64;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&__idx, (uint64_t)v325);
      v345 = 0;
      v346 = 0;
      v344 = 0;
      v30 = v340 - v339;
      if (v340 == v339)
      {
        v33 = 0;
        v31 = 0;
        v35 = 0;
      }
      else
      {
        if (v30 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v31 = (char *)operator new(v340 - v339);
        v32 = v30 >> 3;
        v33 = &v31[8 * (v30 >> 3)];
        v344 = v31;
        v346 = v33;
        v34 = v30 & 0xFFFFFFFFFFFFFFF8;
        bzero(v31, v30 & 0xFFFFFFFFFFFFFFF8);
        v345 = v33;
        v30 = (int64_t)operator new(v30);
        v35 = v30 + 8 * v32;
        bzero((void *)v30, v34);
      }
      nitro::ndarray<half>::init_from_shape((uint64_t **)&v318, &v311);
      if ((unint64_t)((v35 - v30) >> 3) <= 1)
        v155 = 1;
      else
        v155 = (v35 - v30) >> 3;
      v156 = v33 - v31;
      v157 = v321;
      if ((unint64_t)((v33 - v31) >> 3) <= 1)
        v158 = 1;
      else
        v158 = (v33 - v31) >> 3;
      v159 = v311;
      v160 = v316;
      v161 = v156 >> 3;
      v162 = v343;
      v305 = v35;
      __lenb = v33 - v31;
      v302 = v321;
      v296 = v30;
      v297 = v158 & 0xFFFFFFFFFFFFFFFELL;
      v163 = __idx;
      v164 = v339;
      v287 = v341;
      v290 = (char *)__p;
      v281 = (char *)__p + 8;
      v284 = (_QWORD *)(v30 + 8);
      v278 = v341 + 8;
      v165 = (v156 >> 3) + 1;
      v293 = v165;
      break;
    default:
      printf("%d\n", v325[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
  while (1)
  {
    if (v33 != v31)
    {
      v166 = (void *)v30;
      v167 = v158;
      v168 = v33;
      v169 = v161;
      v170 = v162;
      memmove(v166, v31, __lenb);
      v162 = v170;
      v161 = v169;
      v33 = v168;
      v158 = v167;
      v165 = v293;
      v30 = v296;
      v157 = v302;
      v35 = v305;
    }
    *(_QWORD *)(v30 + 8 * v157) = 0;
    if (v35 == v30)
    {
      v171 = 0;
      goto LABEL_178;
    }
    if (v155 < 2)
      break;
    v173 = 0;
    v174 = 0;
    v175 = v155 & 0xFFFFFFFFFFFFFFFELL;
    v176 = v281;
    v177 = v284;
    do
    {
      v173 += *(v176 - 1) * *(v177 - 1);
      v174 += *v176 * *v177;
      v177 += 2;
      v176 += 2;
      v175 -= 2;
    }
    while (v175);
    v171 = v174 + v173;
    v172 = v155 & 0xFFFFFFFFFFFFFFFELL;
    if (v155 != (v155 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_176;
LABEL_178:
    if (v33 == v31)
    {
      v185 = 0;
      goto LABEL_187;
    }
    if (v158 < 2)
    {
      v185 = 0;
      v186 = 0;
LABEL_185:
      v192 = v158 - v186;
      v193 = 8 * v186;
      v194 = &v287[8 * v186];
      v195 = (uint64_t *)&v31[v193];
      do
      {
        v197 = *v195++;
        v196 = v197;
        v198 = *(_QWORD *)v194;
        v194 += 8;
        v185 += v198 * v196;
        --v192;
      }
      while (v192);
      goto LABEL_187;
    }
    v187 = 0;
    v188 = 0;
    v189 = v297;
    v190 = v278;
    v191 = v31 + 8;
    do
    {
      v187 += *(v190 - 1) * *(v191 - 1);
      v188 += *v190 * *v191;
      v191 += 2;
      v190 += 2;
      v189 -= 2;
    }
    while (v189);
    v185 = v188 + v187;
    v186 = v297;
    if (v158 != v297)
      goto LABEL_185;
LABEL_187:
    v199 = 2 * (v171 + v160);
    LOWORD(_S0) = *(_WORD *)(v159 + v199);
    LOWORD(_S1) = *(_WORD *)(v163 + 2 * (v185 + v162));
    __asm
    {
      FCVT            S2, H1
      FCVT            S3, H0
    }
    if (_S3 >= _S2)
      _S0 = _S1;
    *(_WORD *)(v159 + v199) = _S0;
    if ((int)v161 >= 1)
    {
      v207 = v165;
      v208 = v161;
      while (1)
      {
        v209 = 8 * (v207 - 2);
        v210 = *(_QWORD *)&v31[v209] + 1;
        *(_QWORD *)&v31[v209] = v210;
        if (v210 < *(_QWORD *)&v164[v209])
          break;
        *(_QWORD *)&v31[8 * (v207 - 2)] = 0;
        --v208;
        if ((unint64_t)--v207 <= 1)
          goto LABEL_195;
      }
      if (v208 > 0)
        continue;
    }
LABEL_195:
    nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__dst, &v311);
    v93 = v309;
    v92 = v310;
    if (__p)
    {
      *(_QWORD *)&v315 = __p;
      operator delete(__p);
    }
    if (v312[1])
    {
      v313[0] = v312[1];
      operator delete(v312[1]);
    }
    v211 = (std::__shared_weak_count *)v312[0];
    if (v312[0])
    {
      v212 = (unint64_t *)((char *)v312[0] + 8);
      do
        v213 = __ldaxr(v212);
      while (__stlxr(v213 - 1, v212));
      if (!v213)
      {
        ((void (*)(std::__shared_weak_count *))v211->__on_zero_shared)(v211);
        std::__shared_weak_count::__release_weak(v211);
      }
    }
    if (v30)
      operator delete((void *)v30);
    if (v344)
      operator delete(v344);
    if (v341)
    {
      v342 = v341;
      operator delete(v341);
    }
    if (v339)
    {
      v340 = v339;
      operator delete(v339);
    }
    v97 = (std::__shared_weak_count *)v338;
    if (v338)
    {
      v214 = (unint64_t *)(v338 + 8);
      do
        v99 = __ldaxr(v214);
      while (__stlxr(v99 - 1, v214));
      goto LABEL_271;
    }
    goto LABEL_273;
  }
  v171 = 0;
  v172 = 0;
LABEL_176:
  v178 = v155 - v172;
  v179 = 8 * v172;
  v180 = &v290[8 * v172];
  v181 = (uint64_t *)(v30 + v179);
  do
  {
    v183 = *v181++;
    v182 = v183;
    v184 = *(_QWORD *)v180;
    v180 += 8;
    v171 += v184 * v182;
    --v178;
  }
  while (v178);
  goto LABEL_178;
}

void sub_191295AAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  void *v61;
  int v62;

  if (a61 < 0)
    operator delete(__p);
  if (a31 < 0)
  {
    operator delete(a26);
    if ((v62 & 1) == 0)
    {
LABEL_8:
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a46);
      _Unwind_Resume(a1);
    }
  }
  else if (!v62)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v61);
  goto LABEL_8;
}

void sub_191295DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  if (a40)
    JUMPOUT(0x191295DBCLL);
  JUMPOUT(0x191295DC0);
}

void nitro::nitro_builtins::Maximum(unint64_t **this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  BOOL v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  double v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void **v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  __int128 v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  float32x2_t v300;
  float32x2_t *v301;
  unint64_t v302;
  int32x2_t v303;
  int32x2_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  float *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v317;
  float32x4_t v318;
  unint64_t v319;
  float16x4_t *v320;
  int16x4_t v321;
  unint64_t *v322;
  unint64_t v323;
  __int16 *v324;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  float v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  int v334;
  unint64_t v335;
  float32x4_t v336;
  unint64_t v337;
  int32x4_t *v338;
  int16x4_t v339;
  unint64_t *v340;
  uint64_t v341;
  __int128 v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  void *v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  int *v352;
  int32x2_t v353;
  int v354;
  __int128 v355;
  void *v356[2];
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  __int128 v362;
  void *v363[3];
  void *v364[4];
  int v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  void *__p[2];
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  __int128 v373;
  __int128 v374;
  char *v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  __int128 v380;
  __int128 v381;
  char *v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t *v386;
  char v387;
  uint64_t v388;

  v388 = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int8 *)this + 8);
  v8 = *((unsigned __int8 *)a2 + 8);
  if (v7 <= 1 && v8 <= 1)
  {
    v386 = 0;
    v387 = 0;
    if (&v386 != this)
    {
      v386 = *this;
      v387 = v7;
    }
    nitro::nitro_builtins::flex_max((nitro::nitro_builtins *)&v386, a2);
    switch(v387)
    {
      case 2:
        v25 = v386;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = v386;
          if (v386)
          {
            if (*((char *)v386 + 31) < 0)
              operator delete((void *)v386[1]);
            v29 = (uint64_t)v28;
            v30 = 0x1012C404EF22A49;
            goto LABEL_103;
          }
        }
        break;
      case 3:
        v49 = v386;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          v52 = v386;
          if (v386)
          {
            v53 = (void *)v386[1];
            if (v53)
            {
              v386[2] = (unint64_t)v53;
              operator delete(v53);
            }
            v29 = (uint64_t)v52;
            v30 = 0x1080C409938AC02;
            goto LABEL_103;
          }
        }
        break;
      case 4:
        v46 = v386;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48 && v386)
        {
          v29 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)v386);
          goto LABEL_97;
        }
        break;
      case 5:
        v54 = v386;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56 && v386)
        {
          v29 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)v386);
LABEL_97:
          v30 = 0x1020C405E66F15BLL;
          goto LABEL_103;
        }
        break;
      case 9:
        v57 = v386;
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59 && v386)
        {
          v29 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v386);
          v30 = 0x10B0C4002311774;
LABEL_103:
          MEMORY[0x19401CD90](v29, v30);
        }
        break;
      default:
        return;
    }
    return;
  }
  if (v7 < 2 || v8 < 2)
  {
    v11 = v7 < 2;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v379);
    if (v11)
    {
      nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)a2 + 8), (uint64_t)&v365);
      nitro::ndarray_container::copy((nitro::ndarray_container *)&v365, (uint64_t)&v372);
      v379 = v372;
      v12 = v373;
      v373 = 0uLL;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
      v380 = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((_QWORD)v381)
      {
        *((_QWORD *)&v381 + 1) = v381;
        operator delete((void *)v381);
      }
      v381 = v374;
      v382 = v375;
      v375 = 0;
      v374 = 0uLL;
      v16 = (void *)v383;
      if ((_QWORD)v383)
      {
        *((_QWORD *)&v383 + 1) = v383;
        operator delete((void *)v383);
        v16 = (void *)v374;
      }
      HIDWORD(v17) = DWORD1(v376);
      v383 = v376;
      v18 = v377;
      v377 = 0;
      v376 = 0uLL;
      v384 = v18;
      v385 = v378;
      if (v16)
      {
        *((_QWORD *)&v374 + 1) = v16;
        operator delete(v16);
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
      if (*((_QWORD *)&v373 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((_QWORD)v367)
      {
        *((_QWORD *)&v367 + 1) = v367;
        operator delete((void *)v367);
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
      if (*((_QWORD *)&v366 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (*((_BYTE *)this + 8))
      {
        v17 = *(double *)this;
LABEL_79:
        *(float *)&v17 = v17;
LABEL_218:
        v353 = *(int32x2_t *)&v17;
        switch(v379)
        {
          case 3:
            nitro::ndarray<int>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_414;
            v129 = (void *)*((_QWORD *)&v373 + 1);
            v130 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
            {
              v146 = 0;
              v129 = (void *)v374;
              goto LABEL_416;
            }
            v131 = v372;
            if (!v372)
              goto LABEL_321;
            if ((unint64_t)(v130 - 8) < 8)
            {
              v131 = 1;
              v132 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_320:
                v264 = *v132++;
                v131 *= v264;
              }
              while (v132 != (uint64_t *)v374);
              goto LABEL_321;
            }
            v259 = ((unint64_t)(v130 - 8) >> 3) + 1;
            v132 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v259 & 0x3FFFFFFFFFFFFFFELL));
            v260 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v261 = 1;
            v262 = v259 & 0x3FFFFFFFFFFFFFFELL;
            v263 = 1;
            do
            {
              v261 *= *(v260 - 1);
              v263 *= *v260;
              v260 += 2;
              v262 -= 2;
            }
            while (v262);
            v131 = v263 * v261;
            if (v259 != (v259 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_320;
LABEL_321:
            v265 = v130 >> 3;
            if ((unint64_t)(v130 >> 3) <= 1)
              v265 = 1;
            if (v265 < 2)
            {
              v266 = 0;
              v267 = 0;
LABEL_328:
              v273 = v265 - v266;
              v274 = 8 * v266;
              v275 = &v375[v274];
              v276 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v274);
              do
              {
                v277 = *v276++;
                v278 = v277 - 1;
                v279 = *(_QWORD *)v275;
                v275 += 8;
                v267 += v279 * v278;
                --v273;
              }
              while (v273);
              goto LABEL_330;
            }
            v268 = 0;
            v269 = 0;
            v266 = v265 & 0xFFFFFFFFFFFFFFFELL;
            v270 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v271 = v375 + 8;
            v272 = v265 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v268 += *(v271 - 1) * (*(v270 - 1) - 1);
              v269 += *v271 * (*v270 - 1);
              v270 += 2;
              v271 += 2;
              v272 -= 2;
            }
            while (v272);
            v267 = v269 + v268;
            if (v265 != v266)
              goto LABEL_328;
LABEL_330:
            if (v131 != v267 + 1)
LABEL_414:
              nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
            v280 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 != *((_QWORD *)&v373 + 1))
            {
              v281 = v280 >> 3;
              if ((unint64_t)(v280 >> 3) <= 1)
                v281 = 1;
              if (v281 >= 2)
              {
                v284 = 0;
                v285 = 0;
                v282 = v281 & 0xFFFFFFFFFFFFFFFELL;
                v286 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                v287 = v375 + 8;
                v288 = v281 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  v284 += *(v287 - 1) * (*(v286 - 1) - 1);
                  v285 += *v287 * (*v286 - 1);
                  v286 += 2;
                  v287 += 2;
                  v288 -= 2;
                }
                while (v288);
                v283 = v285 + v284;
                if (v281 == v282)
                  goto LABEL_341;
              }
              else
              {
                v282 = 0;
                v283 = 0;
              }
              v289 = v281 - v282;
              v290 = 8 * v282;
              v291 = &v375[v290];
              v292 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v290);
              do
              {
                v293 = *v292++;
                v294 = v293 - 1;
                v295 = *(_QWORD *)v291;
                v291 += 8;
                v283 += v295 * v294;
                --v289;
              }
              while (v289);
LABEL_341:
              v146 = v283 + 1;
              goto LABEL_416;
            }
            v146 = 0;
LABEL_416:
            v331 = v377;
            v332 = v377 + v146;
            if (!(v377 + v146))
              goto LABEL_431;
            v333 = v372;
            v334 = (int)*(float *)v353.i32;
            if (v332 < 4)
            {
              v335 = 0;
LABEL_457:
              v351 = v146 + v331 - v335;
              v352 = (int *)(v333 + 4 * v335);
              do
              {
                if (*(float *)v353.i32 > (float)*v352)
                  *v352 = v334;
                ++v352;
                --v351;
              }
              while (v351);
LABEL_431:
              if (v375)
              {
                *(_QWORD *)&v376 = v375;
                operator delete(v375);
                v129 = (void *)*((_QWORD *)&v373 + 1);
              }
              if (v129)
              {
                *(_QWORD *)&v374 = v129;
                operator delete(v129);
              }
              v305 = (std::__shared_weak_count *)v373;
              if ((_QWORD)v373)
              {
                v340 = (unint64_t *)(v373 + 8);
                do
                  v307 = __ldaxr(v340);
                while (__stlxr(v307 - 1, v340));
                goto LABEL_438;
              }
LABEL_440:
              *(_QWORD *)a4 = 0;
              *(_BYTE *)(a4 + 8) = 9;
              v341 = operator new();
              *(_QWORD *)v341 = 0;
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v341 + 8));
              *(_QWORD *)a4 = v341;
              *(_QWORD *)v341 = 1;
              *(_DWORD *)(v341 + 8) = v379;
              v342 = v380;
              v380 = 0uLL;
              v343 = *(std::__shared_weak_count **)(v341 + 24);
              *(_OWORD *)(v341 + 16) = v342;
              if (v343)
              {
                v344 = (unint64_t *)&v343->__shared_owners_;
                do
                  v345 = __ldaxr(v344);
                while (__stlxr(v345 - 1, v344));
                if (!v345)
                {
                  ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                  std::__shared_weak_count::__release_weak(v343);
                }
              }
              v346 = *(void **)(v341 + 32);
              if (v346)
              {
                *(_QWORD *)(v341 + 40) = v346;
                operator delete(v346);
                *(_QWORD *)(v341 + 32) = 0;
                *(_QWORD *)(v341 + 40) = 0;
                *(_QWORD *)(v341 + 48) = 0;
              }
              v347 = *(void **)(v341 + 56);
              *(_OWORD *)(v341 + 32) = v381;
              *(_QWORD *)(v341 + 48) = v382;
              v382 = 0;
              v381 = 0uLL;
              if (v347)
              {
                *(_QWORD *)(v341 + 64) = v347;
                operator delete(v347);
                *(_QWORD *)(v341 + 56) = 0;
                *(_QWORD *)(v341 + 64) = 0;
                *(_QWORD *)(v341 + 72) = 0;
                v347 = (void *)v381;
              }
              *(_OWORD *)(v341 + 56) = v383;
              v348 = v384;
              v349 = v385;
              v384 = 0;
              v383 = 0uLL;
              *(_QWORD *)(v341 + 72) = v348;
              *(_QWORD *)(v341 + 80) = v349;
              if (v347)
              {
                *((_QWORD *)&v381 + 1) = v347;
                operator delete(v347);
              }
              v125 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
              if (*((_QWORD *)&v380 + 1))
              {
                v350 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
                do
                  v127 = __ldaxr(v350);
                while (__stlxr(v127 - 1, v350));
                goto LABEL_454;
              }
              return;
            }
            v335 = v332 & 0xFFFFFFFFFFFFFFFCLL;
            v336 = (float32x4_t)vdupq_lane_s32(v353, 0);
            v337 = v332 & 0xFFFFFFFFFFFFFFFCLL;
            v338 = (int32x4_t *)v372;
            while (1)
            {
              v339 = vmovn_s32(vcgtq_f32(v336, vcvtq_f32_s32(*v338)));
              if ((v339.i8[0] & 1) != 0)
              {
                v338->i32[0] = v334;
                if ((v339.i8[2] & 1) == 0)
                  goto LABEL_423;
              }
              else if ((v339.i8[2] & 1) == 0)
              {
LABEL_423:
                if ((v339.i8[4] & 1) != 0)
                  goto LABEL_424;
                goto LABEL_428;
              }
              v338->i32[1] = v334;
              if ((v339.i8[4] & 1) != 0)
              {
LABEL_424:
                v338->i32[2] = v334;
                if ((v339.i8[6] & 1) != 0)
                  goto LABEL_429;
                goto LABEL_420;
              }
LABEL_428:
              if ((v339.i8[6] & 1) != 0)
LABEL_429:
                v338->i32[3] = v334;
LABEL_420:
              ++v338;
              v337 -= 4;
              if (!v337)
              {
                if (v332 == v335)
                  goto LABEL_431;
                goto LABEL_457;
              }
            }
          case 5:
            nitro::ndarray<unsigned char>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_399;
            v141 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
              goto LABEL_400;
            v142 = v372;
            if (!v372)
              goto LABEL_296;
            if ((unint64_t)(v141 - 8) < 8)
            {
              v142 = 1;
              v143 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_295:
                v226 = *v143++;
                v142 *= v226;
              }
              while (v143 != (uint64_t *)v374);
              goto LABEL_296;
            }
            v221 = ((unint64_t)(v141 - 8) >> 3) + 1;
            v143 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v221 & 0x3FFFFFFFFFFFFFFELL));
            v222 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v223 = 1;
            v224 = v221 & 0x3FFFFFFFFFFFFFFELL;
            v225 = 1;
            do
            {
              v223 *= *(v222 - 1);
              v225 *= *v222;
              v222 += 2;
              v224 -= 2;
            }
            while (v224);
            v142 = v225 * v223;
            if (v221 != (v221 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_295;
LABEL_296:
            v227 = v141 >> 3;
            if ((unint64_t)(v141 >> 3) <= 1)
              v227 = 1;
            if (v227 >= 2)
            {
              v230 = 0;
              v231 = 0;
              v228 = v227 & 0xFFFFFFFFFFFFFFFELL;
              v232 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
              v233 = v375 + 8;
              v234 = v227 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v230 += *(v233 - 1) * (*(v232 - 1) - 1);
                v231 += *v233 * (*v232 - 1);
                v232 += 2;
                v233 += 2;
                v234 -= 2;
              }
              while (v234);
              v229 = v231 + v230;
              if (v227 == v228)
              {
LABEL_305:
                if (v142 != v229 + 1)
LABEL_399:
                  nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
                v242 = v374 - *((_QWORD *)&v373 + 1);
                if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
                {
LABEL_400:
                  v258 = 0;
                  goto LABEL_401;
                }
                v243 = v242 >> 3;
                if ((unint64_t)(v242 >> 3) <= 1)
                  v243 = 1;
                if (v243 >= 2)
                {
                  v246 = 0;
                  v247 = 0;
                  v244 = v243 & 0xFFFFFFFFFFFFFFFELL;
                  v248 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                  v249 = v375 + 8;
                  v250 = v243 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    v246 += *(v249 - 1) * (*(v248 - 1) - 1);
                    v247 += *v249 * (*v248 - 1);
                    v248 += 2;
                    v249 += 2;
                    v250 -= 2;
                  }
                  while (v250);
                  v245 = v247 + v246;
                  if (v243 == v244)
                    goto LABEL_316;
                }
                else
                {
                  v244 = 0;
                  v245 = 0;
                }
                v251 = v243 - v244;
                v252 = 8 * v244;
                v253 = &v375[v252];
                v254 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v252);
                do
                {
                  v255 = *v254++;
                  v256 = v255 - 1;
                  v257 = *(_QWORD *)v253;
                  v253 += 8;
                  v245 += v257 * v256;
                  --v251;
                }
                while (v251);
LABEL_316:
                v258 = v245 + 1;
LABEL_401:
                v327 = v377;
                if (v377 + v258)
                {
                  v329 = 0;
                  v330 = *(float *)v353.i32;
                  do
                  {
                    LOBYTE(v330) = *(_BYTE *)(v372 + v329);
                    v330 = (float)LODWORD(v330);
                    if (*(float *)v353.i32 > v330)
                    {
                      *(_BYTE *)(v372 + v329) = (int)*(float *)v353.i32;
                      v327 = v377;
                    }
                    ++v329;
                  }
                  while (v329 < v327 + v258);
                }
                if (v375)
                {
                  *(_QWORD *)&v376 = v375;
                  operator delete(v375);
                }
                if (*((_QWORD *)&v373 + 1))
                {
                  *(_QWORD *)&v374 = *((_QWORD *)&v373 + 1);
                  operator delete(*((void **)&v373 + 1));
                }
                v305 = (std::__shared_weak_count *)v373;
                if (!(_QWORD)v373)
                  goto LABEL_440;
                v328 = (unint64_t *)(v373 + 8);
                do
                  v307 = __ldaxr(v328);
                while (__stlxr(v307 - 1, v328));
                goto LABEL_438;
              }
            }
            else
            {
              v228 = 0;
              v229 = 0;
            }
            v235 = v227 - v228;
            v236 = 8 * v228;
            v237 = &v375[v236];
            v238 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v236);
            do
            {
              v239 = *v238++;
              v240 = v239 - 1;
              v241 = *(_QWORD *)v237;
              v237 += 8;
              v229 += v241 * v240;
              --v235;
            }
            while (v235);
            goto LABEL_305;
          case 9:
            nitro::ndarray<float>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_342;
            v133 = (void *)*((_QWORD *)&v373 + 1);
            v134 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
            {
              v144 = 0;
              v133 = (void *)v374;
              goto LABEL_344;
            }
            v135 = v372;
            if (!v372)
              goto LABEL_246;
            if ((unint64_t)(v134 - 8) < 8)
            {
              v135 = 1;
              v136 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_245:
                v152 = *v136++;
                v135 *= v152;
              }
              while (v136 != (uint64_t *)v374);
              goto LABEL_246;
            }
            v147 = ((unint64_t)(v134 - 8) >> 3) + 1;
            v136 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v147 & 0x3FFFFFFFFFFFFFFELL));
            v148 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v149 = 1;
            v150 = v147 & 0x3FFFFFFFFFFFFFFELL;
            v151 = 1;
            do
            {
              v149 *= *(v148 - 1);
              v151 *= *v148;
              v148 += 2;
              v150 -= 2;
            }
            while (v150);
            v135 = v151 * v149;
            if (v147 != (v147 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_245;
LABEL_246:
            v153 = v134 >> 3;
            if ((unint64_t)(v134 >> 3) <= 1)
              v153 = 1;
            if (v153 >= 2)
            {
              v156 = 0;
              v157 = 0;
              v154 = v153 & 0xFFFFFFFFFFFFFFFELL;
              v158 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
              v159 = v375 + 8;
              v160 = v153 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v156 += *(v159 - 1) * (*(v158 - 1) - 1);
                v157 += *v159 * (*v158 - 1);
                v158 += 2;
                v159 += 2;
                v160 -= 2;
              }
              while (v160);
              v155 = v157 + v156;
              if (v153 == v154)
              {
LABEL_255:
                if (v135 != v155 + 1)
LABEL_342:
                  nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
                v168 = v374 - *((_QWORD *)&v373 + 1);
                if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
                {
                  v144 = 0;
LABEL_344:
                  v296 = v377;
                  v297 = v377 + v144;
                  if (v377 + v144)
                  {
                    v298 = v372;
                    if (v297 >= 4)
                    {
                      v299 = v297 & 0xFFFFFFFFFFFFFFFCLL;
                      v300 = (float32x2_t)vdup_lane_s32(v353, 0);
                      v301 = (float32x2_t *)(v372 + 8);
                      v302 = v297 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v303 = vcgt_f32(v300, v301[-1]);
                        if ((v303.i8[0] & 1) != 0)
                          v301[-1].i32[0] = v353.i32[0];
                        if ((v303.i8[4] & 1) != 0)
                          v301[-1].i32[1] = v353.i32[0];
                        v304 = vcgt_f32(v300, *v301);
                        if ((v304.i8[0] & 1) != 0)
                          v301->i32[0] = v353.i32[0];
                        if ((v304.i8[4] & 1) != 0)
                          v301->i32[1] = v353.i32[0];
                        v301 += 2;
                        v302 -= 4;
                      }
                      while (v302);
                      if (v297 == v299)
                        goto LABEL_358;
                    }
                    else
                    {
                      v299 = 0;
                    }
                    v308 = v144 + v296 - v299;
                    v309 = (float *)(v298 + 4 * v299);
                    do
                    {
                      if (*v309 < *(float *)v353.i32)
                        *v309 = *(float *)v353.i32;
                      ++v309;
                      --v308;
                    }
                    while (v308);
                  }
LABEL_358:
                  if (v375)
                  {
                    *(_QWORD *)&v376 = v375;
                    operator delete(v375);
                    v133 = (void *)*((_QWORD *)&v373 + 1);
                  }
                  if (v133)
                  {
                    *(_QWORD *)&v374 = v133;
                    operator delete(v133);
                  }
                  v305 = (std::__shared_weak_count *)v373;
                  if (!(_QWORD)v373)
                    goto LABEL_440;
                  v306 = (unint64_t *)(v373 + 8);
                  do
                    v307 = __ldaxr(v306);
                  while (__stlxr(v307 - 1, v306));
                  goto LABEL_438;
                }
                v169 = v168 >> 3;
                if ((unint64_t)(v168 >> 3) <= 1)
                  v169 = 1;
                if (v169 >= 2)
                {
                  v172 = 0;
                  v173 = 0;
                  v170 = v169 & 0xFFFFFFFFFFFFFFFELL;
                  v174 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                  v175 = v375 + 8;
                  v176 = v169 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    v172 += *(v175 - 1) * (*(v174 - 1) - 1);
                    v173 += *v175 * (*v174 - 1);
                    v174 += 2;
                    v175 += 2;
                    v176 -= 2;
                  }
                  while (v176);
                  v171 = v173 + v172;
                  if (v169 == v170)
                    goto LABEL_266;
                }
                else
                {
                  v170 = 0;
                  v171 = 0;
                }
                v177 = v169 - v170;
                v178 = 8 * v170;
                v179 = &v375[v178];
                v180 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v178);
                do
                {
                  v181 = *v180++;
                  v182 = v181 - 1;
                  v183 = *(_QWORD *)v179;
                  v179 += 8;
                  v171 += v183 * v182;
                  --v177;
                }
                while (v177);
LABEL_266:
                v144 = v171 + 1;
                goto LABEL_344;
              }
            }
            else
            {
              v154 = 0;
              v155 = 0;
            }
            v161 = v153 - v154;
            v162 = 8 * v154;
            v163 = &v375[v162];
            v164 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v162);
            do
            {
              v165 = *v164++;
              v166 = v165 - 1;
              v167 = *(_QWORD *)v163;
              v163 += 8;
              v155 += v167 * v166;
              --v161;
            }
            while (v161);
            goto LABEL_255;
          case 11:
            nitro::ndarray<half>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_370;
            v137 = (void *)*((_QWORD *)&v373 + 1);
            v138 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
            {
              v145 = 0;
              v137 = (void *)v374;
              goto LABEL_372;
            }
            v139 = v372;
            if (!v372)
              goto LABEL_271;
            if ((unint64_t)(v138 - 8) < 8)
            {
              v139 = 1;
              v140 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_270:
                v189 = *v140++;
                v139 *= v189;
              }
              while (v140 != (uint64_t *)v374);
              goto LABEL_271;
            }
            v184 = ((unint64_t)(v138 - 8) >> 3) + 1;
            v140 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v184 & 0x3FFFFFFFFFFFFFFELL));
            v185 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v186 = 1;
            v187 = v184 & 0x3FFFFFFFFFFFFFFELL;
            v188 = 1;
            do
            {
              v186 *= *(v185 - 1);
              v188 *= *v185;
              v185 += 2;
              v187 -= 2;
            }
            while (v187);
            v139 = v188 * v186;
            if (v184 != (v184 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_270;
LABEL_271:
            v190 = v138 >> 3;
            if ((unint64_t)(v138 >> 3) <= 1)
              v190 = 1;
            if (v190 >= 2)
            {
              v193 = 0;
              v194 = 0;
              v191 = v190 & 0xFFFFFFFFFFFFFFFELL;
              v195 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
              v196 = v375 + 8;
              v197 = v190 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v193 += *(v196 - 1) * (*(v195 - 1) - 1);
                v194 += *v196 * (*v195 - 1);
                v195 += 2;
                v196 += 2;
                v197 -= 2;
              }
              while (v197);
              v192 = v194 + v193;
              if (v190 == v191)
              {
LABEL_280:
                if (v139 != v192 + 1)
LABEL_370:
                  nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
                v205 = v374 - *((_QWORD *)&v373 + 1);
                if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
                {
                  v145 = 0;
                  goto LABEL_372;
                }
                v206 = v205 >> 3;
                if ((unint64_t)(v205 >> 3) <= 1)
                  v206 = 1;
                if (v206 >= 2)
                {
                  v209 = 0;
                  v210 = 0;
                  v207 = v206 & 0xFFFFFFFFFFFFFFFELL;
                  v211 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                  v212 = v375 + 8;
                  v213 = v206 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    v209 += *(v212 - 1) * (*(v211 - 1) - 1);
                    v210 += *v212 * (*v211 - 1);
                    v211 += 2;
                    v212 += 2;
                    v213 -= 2;
                  }
                  while (v213);
                  v208 = v210 + v209;
                  if (v206 == v207)
                    goto LABEL_291;
                }
                else
                {
                  v207 = 0;
                  v208 = 0;
                }
                v214 = v206 - v207;
                v215 = 8 * v207;
                v216 = &v375[v215];
                v217 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v215);
                do
                {
                  v218 = *v217++;
                  v219 = v218 - 1;
                  v220 = *(_QWORD *)v216;
                  v216 += 8;
                  v208 += v220 * v219;
                  --v214;
                }
                while (v214);
LABEL_291:
                v145 = v208 + 1;
LABEL_372:
                v310 = v377;
                v311 = v377 + v145;
                if (!(v377 + v145))
                  goto LABEL_387;
                v312 = v372;
                _S1 = v353.i32[0];
                __asm { FCVT            H0, S1 }
                if (v311 < 4)
                {
                  v317 = 0;
LABEL_395:
                  v323 = v145 + v310 - v317;
                  v324 = (__int16 *)(v312 + 2 * v317);
                  do
                  {
                    _H1 = *v324;
                    __asm { FCVT            S1, H1 }
                    if (*(float *)v353.i32 > _S1)
                      *v324 = _H0;
                    ++v324;
                    --v323;
                  }
                  while (v323);
LABEL_387:
                  if (v375)
                  {
                    *(_QWORD *)&v376 = v375;
                    operator delete(v375);
                    v137 = (void *)*((_QWORD *)&v373 + 1);
                  }
                  if (v137)
                  {
                    *(_QWORD *)&v374 = v137;
                    operator delete(v137);
                  }
                  v305 = (std::__shared_weak_count *)v373;
                  if (!(_QWORD)v373)
                    goto LABEL_440;
                  v322 = (unint64_t *)(v373 + 8);
                  do
                    v307 = __ldaxr(v322);
                  while (__stlxr(v307 - 1, v322));
LABEL_438:
                  if (!v307)
                  {
                    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                    std::__shared_weak_count::__release_weak(v305);
                  }
                  goto LABEL_440;
                }
                v317 = v311 & 0xFFFFFFFFFFFFFFFCLL;
                v318 = (float32x4_t)vdupq_lane_s32(v353, 0);
                v319 = v311 & 0xFFFFFFFFFFFFFFFCLL;
                v320 = (float16x4_t *)v372;
                while (1)
                {
                  v321 = vmovn_s32(vcgtq_f32(v318, vcvtq_f32_f16(*v320)));
                  if ((v321.i8[0] & 1) != 0)
                  {
                    v320->i16[0] = _H0;
                    if ((v321.i8[2] & 1) == 0)
                      goto LABEL_379;
                  }
                  else if ((v321.i8[2] & 1) == 0)
                  {
LABEL_379:
                    if ((v321.i8[4] & 1) != 0)
                      goto LABEL_380;
                    goto LABEL_384;
                  }
                  v320->i16[1] = _H0;
                  if ((v321.i8[4] & 1) != 0)
                  {
LABEL_380:
                    v320->i16[2] = _H0;
                    if ((v321.i8[6] & 1) != 0)
                      goto LABEL_385;
                    goto LABEL_376;
                  }
LABEL_384:
                  if ((v321.i8[6] & 1) != 0)
LABEL_385:
                    v320->i16[3] = _H0;
LABEL_376:
                  ++v320;
                  v319 -= 4;
                  if (!v319)
                  {
                    if (v311 == v317)
                      goto LABEL_387;
                    goto LABEL_395;
                  }
                }
              }
            }
            else
            {
              v191 = 0;
              v192 = 0;
            }
            v198 = v190 - v191;
            v199 = 8 * v191;
            v200 = &v375[v199];
            v201 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v199);
            do
            {
              v202 = *v201++;
              v203 = v202 - 1;
              v204 = *(_QWORD *)v200;
              v200 += 8;
              v192 += v204 * v203;
              --v198;
            }
            while (v198);
            goto LABEL_280;
          default:
            printf("%d\n", v379);
            nitro::ndarray_container::visit<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()();
        }
      }
      v128 = (uint64_t)*this;
    }
    else
    {
      nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*this + 1), (uint64_t)&v365);
      nitro::ndarray_container::copy((nitro::ndarray_container *)&v365, (uint64_t)&v372);
      v379 = v372;
      v34 = v373;
      v373 = 0uLL;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
      v380 = v34;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if ((_QWORD)v381)
      {
        *((_QWORD *)&v381 + 1) = v381;
        operator delete((void *)v381);
      }
      v381 = v374;
      v382 = v375;
      v375 = 0;
      v374 = 0uLL;
      v38 = (void *)v383;
      if ((_QWORD)v383)
      {
        *((_QWORD *)&v383 + 1) = v383;
        operator delete((void *)v383);
        v38 = (void *)v374;
      }
      HIDWORD(v17) = DWORD1(v376);
      v383 = v376;
      v39 = v377;
      v377 = 0;
      v376 = 0uLL;
      v384 = v39;
      v385 = v378;
      if (v38)
      {
        *((_QWORD *)&v374 + 1) = v38;
        operator delete(v38);
      }
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
      if (*((_QWORD *)&v373 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((_QWORD)v367)
      {
        *((_QWORD *)&v367 + 1) = v367;
        operator delete((void *)v367);
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
      if (*((_QWORD *)&v366 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (*((_BYTE *)a2 + 8))
      {
        v17 = *(double *)a2;
        goto LABEL_79;
      }
      v128 = *(_QWORD *)a2;
    }
    *(float *)&v17 = (float)v128;
    goto LABEL_218;
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*this + 1), (uint64_t)&v379);
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)a2 + 8), (uint64_t)&v372);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v365);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v361);
  v31 = 0;
  v32 = *((_QWORD *)&v381 + 1) - v381;
  if (*((_QWORD *)&v381 + 1) != (_QWORD)v381 && (_QWORD)v380)
  {
    if ((unint64_t)(v32 - 8) >= 8)
    {
      v60 = ((unint64_t)(v32 - 8) >> 3) + 1;
      v33 = (uint64_t *)(v381 + 8 * (v60 & 0x3FFFFFFFFFFFFFFELL));
      v61 = (_QWORD *)(v381 + 8);
      v62 = 1;
      v63 = v60 & 0x3FFFFFFFFFFFFFFELL;
      v64 = 1;
      do
      {
        v62 *= *(v61 - 1);
        v64 *= *v61;
        v61 += 2;
        v63 -= 2;
      }
      while (v63);
      v31 = v64 * v62;
      if (v60 == (v60 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_108;
    }
    else
    {
      v31 = 1;
      v33 = (uint64_t *)v381;
    }
    do
    {
      v65 = *v33++;
      v31 *= v65;
    }
    while (v33 != *((uint64_t **)&v381 + 1));
  }
LABEL_108:
  if (*((_QWORD *)&v374 + 1) == (_QWORD)v374 || (_QWORD)v373 == 0)
  {
    v67 = 0;
    goto LABEL_120;
  }
  v68 = *((_QWORD *)&v374 + 1) - v374 - 8;
  if (v68 < 8)
  {
    v67 = 1;
    v69 = (uint64_t *)v374;
    do
    {
LABEL_119:
      v75 = *v69++;
      v67 *= v75;
    }
    while (v69 != *((uint64_t **)&v374 + 1));
    goto LABEL_120;
  }
  v70 = (v68 >> 3) + 1;
  v69 = (uint64_t *)(v374 + 8 * (v70 & 0x3FFFFFFFFFFFFFFELL));
  v71 = (_QWORD *)(v374 + 8);
  v72 = 1;
  v73 = v70 & 0x3FFFFFFFFFFFFFFELL;
  v74 = 1;
  do
  {
    v72 *= *(v71 - 1);
    v74 *= *v71;
    v71 += 2;
    v73 -= 2;
  }
  while (v73);
  v67 = v74 * v72;
  if (v70 != (v70 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_119;
LABEL_120:
  if (v31 >= v67)
  {
    nitro::ndarray_container::copy((nitro::ndarray_container *)&v379, (uint64_t)&v354);
    v365 = v354;
    v92 = v355;
    v355 = 0uLL;
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    v366 = v92;
    if (v93)
    {
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if ((_QWORD)v367)
    {
      *((_QWORD *)&v367 + 1) = v367;
      operator delete((void *)v367);
    }
    v367 = *(_OWORD *)v356;
    v368 = v357;
    v356[1] = 0;
    v357 = 0;
    v356[0] = 0;
    v96 = __p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
      v96 = v356[0];
    }
    *(_OWORD *)__p = v358;
    v97 = v359;
    v359 = 0;
    v358 = 0uLL;
    v370 = v97;
    v371 = v360;
    if (v96)
    {
      v356[1] = v96;
      operator delete(v96);
    }
    v98 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
    if (*((_QWORD *)&v355 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v361 = v372;
    v101 = v373;
    if (*((_QWORD *)&v373 + 1))
    {
      v102 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
    v362 = v101;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v363, (char *)v374, *((char **)&v374 + 1), (uint64_t)(*((_QWORD *)&v374 + 1) - v374) >> 3);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v364, (char *)v376, *((char **)&v376 + 1), (uint64_t)(*((_QWORD *)&v376 + 1) - v376) >> 3);
    v91 = (void **)&v372;
  }
  else
  {
    nitro::ndarray_container::copy((nitro::ndarray_container *)&v372, (uint64_t)&v354);
    v365 = v354;
    v76 = v355;
    v355 = 0uLL;
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    v366 = v76;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if ((_QWORD)v367)
    {
      *((_QWORD *)&v367 + 1) = v367;
      operator delete((void *)v367);
    }
    v367 = *(_OWORD *)v356;
    v368 = v357;
    v356[1] = 0;
    v357 = 0;
    v356[0] = 0;
    v80 = __p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
      v80 = v356[0];
    }
    *(_OWORD *)__p = v358;
    v81 = v359;
    v359 = 0;
    v358 = 0uLL;
    v370 = v81;
    v371 = v360;
    if (v80)
    {
      v356[1] = v80;
      operator delete(v80);
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
    if (*((_QWORD *)&v355 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v361 = v379;
    v85 = v380;
    if (*((_QWORD *)&v380 + 1))
    {
      v86 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
    v362 = v85;
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v363, (char *)v381, *((char **)&v381 + 1), (uint64_t)(*((_QWORD *)&v381 + 1) - v381) >> 3);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v364, (char *)v383, *((char **)&v383 + 1), (uint64_t)(*((_QWORD *)&v383 + 1) - v383) >> 3);
    v91 = (void **)&v379;
  }
  v364[3] = v91[9];
  nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(&v365, &v361);
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 9;
  v107 = operator new();
  *(_QWORD *)v107 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v107 + 8));
  *(_QWORD *)a4 = v107;
  *(_QWORD *)v107 = 1;
  *(_DWORD *)(v107 + 8) = v365;
  v108 = v366;
  v366 = 0uLL;
  v109 = *(std::__shared_weak_count **)(v107 + 24);
  *(_OWORD *)(v107 + 16) = v108;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = *(void **)(v107 + 32);
  if (v112)
  {
    *(_QWORD *)(v107 + 40) = v112;
    operator delete(v112);
    *(_QWORD *)(v107 + 32) = 0;
    *(_QWORD *)(v107 + 40) = 0;
    *(_QWORD *)(v107 + 48) = 0;
  }
  v113 = *(void **)(v107 + 56);
  *(_OWORD *)(v107 + 32) = v367;
  *(_QWORD *)(v107 + 48) = v368;
  v368 = 0;
  v367 = 0uLL;
  if (v113)
  {
    *(_QWORD *)(v107 + 64) = v113;
    operator delete(v113);
    *(_QWORD *)(v107 + 56) = 0;
    *(_QWORD *)(v107 + 64) = 0;
    *(_QWORD *)(v107 + 72) = 0;
  }
  *(_OWORD *)(v107 + 56) = *(_OWORD *)__p;
  v114 = v370;
  v115 = v371;
  __p[1] = 0;
  v370 = 0;
  __p[0] = 0;
  *(_QWORD *)(v107 + 72) = v114;
  *(_QWORD *)(v107 + 80) = v115;
  if (v364[0])
  {
    v364[1] = v364[0];
    operator delete(v364[0]);
  }
  if (v363[0])
  {
    v363[1] = v363[0];
    operator delete(v363[0]);
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
  if (*((_QWORD *)&v362 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v367)
  {
    *((_QWORD *)&v367 + 1) = v367;
    operator delete((void *)v367);
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
  if (*((_QWORD *)&v366 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if ((_QWORD)v376)
  {
    *((_QWORD *)&v376 + 1) = v376;
    operator delete((void *)v376);
  }
  if ((_QWORD)v374)
  {
    *((_QWORD *)&v374 + 1) = v374;
    operator delete((void *)v374);
  }
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
  if (*((_QWORD *)&v373 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  if ((_QWORD)v383)
  {
    *((_QWORD *)&v383 + 1) = v383;
    operator delete((void *)v383);
  }
  if ((_QWORD)v381)
  {
    *((_QWORD *)&v381 + 1) = v381;
    operator delete((void *)v381);
  }
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
  if (*((_QWORD *)&v380 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
LABEL_454:
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
}

void sub_191297758(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 232));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 152));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Minimum(unint64_t **this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  BOOL v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *v16;
  double v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  void *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  void *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  __int128 v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  void **v91;
  __int128 v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  void *v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  __int128 v101;
  unint64_t *v102;
  unint64_t v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  uint64_t v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  _QWORD *v232;
  _QWORD *v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  char *v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  char *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  unint64_t v272;
  unint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  _QWORD *v287;
  unint64_t v288;
  unint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  float32x2_t v300;
  float32x2_t *v301;
  unint64_t v302;
  int32x2_t v303;
  int32x2_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t v308;
  float *v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v317;
  float32x4_t v318;
  unint64_t v319;
  float16x4_t *v320;
  int16x4_t v321;
  unint64_t *v322;
  unint64_t v323;
  __int16 *v324;
  uint64_t v327;
  unint64_t *v328;
  unint64_t v329;
  float v330;
  uint64_t v331;
  unint64_t v332;
  uint64_t v333;
  int v334;
  unint64_t v335;
  float32x4_t v336;
  unint64_t v337;
  int32x4_t *v338;
  int16x4_t v339;
  unint64_t *v340;
  uint64_t v341;
  __int128 v342;
  std::__shared_weak_count *v343;
  unint64_t *v344;
  unint64_t v345;
  void *v346;
  void *v347;
  uint64_t v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  int *v352;
  int32x2_t v353;
  int v354;
  __int128 v355;
  void *v356[2];
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  int v361;
  __int128 v362;
  void *v363[3];
  void *v364[4];
  int v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368;
  void *__p[2];
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  __int128 v373;
  __int128 v374;
  char *v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  __int128 v380;
  __int128 v381;
  char *v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  unint64_t *v386;
  char v387;
  uint64_t v388;

  v388 = *MEMORY[0x1E0C80C00];
  v7 = *((unsigned __int8 *)this + 8);
  v8 = *((unsigned __int8 *)a2 + 8);
  if (v7 <= 1 && v8 <= 1)
  {
    v386 = 0;
    v387 = 0;
    if (&v386 != this)
    {
      v386 = *this;
      v387 = v7;
    }
    nitro::nitro_builtins::flex_min((nitro::nitro_builtins *)&v386, a2);
    switch(v387)
    {
      case 2:
        v25 = v386;
        do
        {
          v26 = __ldaxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
        {
          v28 = v386;
          if (v386)
          {
            if (*((char *)v386 + 31) < 0)
              operator delete((void *)v386[1]);
            v29 = (uint64_t)v28;
            v30 = 0x1012C404EF22A49;
            goto LABEL_103;
          }
        }
        break;
      case 3:
        v49 = v386;
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          v52 = v386;
          if (v386)
          {
            v53 = (void *)v386[1];
            if (v53)
            {
              v386[2] = (unint64_t)v53;
              operator delete(v53);
            }
            v29 = (uint64_t)v52;
            v30 = 0x1080C409938AC02;
            goto LABEL_103;
          }
        }
        break;
      case 4:
        v46 = v386;
        do
        {
          v47 = __ldaxr(v46);
          v48 = v47 - 1;
        }
        while (__stlxr(v48, v46));
        if (!v48 && v386)
        {
          v29 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair((uint64_t)v386);
          goto LABEL_97;
        }
        break;
      case 5:
        v54 = v386;
        do
        {
          v55 = __ldaxr(v54);
          v56 = v55 - 1;
        }
        while (__stlxr(v56, v54));
        if (!v56 && v386)
        {
          v29 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair((uint64_t)v386);
LABEL_97:
          v30 = 0x1020C405E66F15BLL;
          goto LABEL_103;
        }
        break;
      case 9:
        v57 = v386;
        do
        {
          v58 = __ldaxr(v57);
          v59 = v58 - 1;
        }
        while (__stlxr(v59, v57));
        if (!v59 && v386)
        {
          v29 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v386);
          v30 = 0x10B0C4002311774;
LABEL_103:
          MEMORY[0x19401CD90](v29, v30);
        }
        break;
      default:
        return;
    }
    return;
  }
  if (v7 < 2 || v8 < 2)
  {
    v11 = v7 < 2;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v379);
    if (v11)
    {
      nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)a2 + 8), (uint64_t)&v365);
      nitro::ndarray_container::copy((nitro::ndarray_container *)&v365, (uint64_t)&v372);
      v379 = v372;
      v12 = v373;
      v373 = 0uLL;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
      v380 = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((_QWORD)v381)
      {
        *((_QWORD *)&v381 + 1) = v381;
        operator delete((void *)v381);
      }
      v381 = v374;
      v382 = v375;
      v375 = 0;
      v374 = 0uLL;
      v16 = (void *)v383;
      if ((_QWORD)v383)
      {
        *((_QWORD *)&v383 + 1) = v383;
        operator delete((void *)v383);
        v16 = (void *)v374;
      }
      HIDWORD(v17) = DWORD1(v376);
      v383 = v376;
      v18 = v377;
      v377 = 0;
      v376 = 0uLL;
      v384 = v18;
      v385 = v378;
      if (v16)
      {
        *((_QWORD *)&v374 + 1) = v16;
        operator delete(v16);
      }
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
      if (*((_QWORD *)&v373 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((_QWORD)v367)
      {
        *((_QWORD *)&v367 + 1) = v367;
        operator delete((void *)v367);
      }
      v22 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
      if (*((_QWORD *)&v366 + 1))
      {
        v23 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      if (*((_BYTE *)this + 8))
      {
        v17 = *(double *)this;
LABEL_79:
        *(float *)&v17 = v17;
LABEL_218:
        v353 = *(int32x2_t *)&v17;
        switch(v379)
        {
          case 3:
            nitro::ndarray<int>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_414;
            v129 = (void *)*((_QWORD *)&v373 + 1);
            v130 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
            {
              v146 = 0;
              v129 = (void *)v374;
              goto LABEL_416;
            }
            v131 = v372;
            if (!v372)
              goto LABEL_321;
            if ((unint64_t)(v130 - 8) < 8)
            {
              v131 = 1;
              v132 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_320:
                v264 = *v132++;
                v131 *= v264;
              }
              while (v132 != (uint64_t *)v374);
              goto LABEL_321;
            }
            v259 = ((unint64_t)(v130 - 8) >> 3) + 1;
            v132 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v259 & 0x3FFFFFFFFFFFFFFELL));
            v260 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v261 = 1;
            v262 = v259 & 0x3FFFFFFFFFFFFFFELL;
            v263 = 1;
            do
            {
              v261 *= *(v260 - 1);
              v263 *= *v260;
              v260 += 2;
              v262 -= 2;
            }
            while (v262);
            v131 = v263 * v261;
            if (v259 != (v259 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_320;
LABEL_321:
            v265 = v130 >> 3;
            if ((unint64_t)(v130 >> 3) <= 1)
              v265 = 1;
            if (v265 < 2)
            {
              v266 = 0;
              v267 = 0;
LABEL_328:
              v273 = v265 - v266;
              v274 = 8 * v266;
              v275 = &v375[v274];
              v276 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v274);
              do
              {
                v277 = *v276++;
                v278 = v277 - 1;
                v279 = *(_QWORD *)v275;
                v275 += 8;
                v267 += v279 * v278;
                --v273;
              }
              while (v273);
              goto LABEL_330;
            }
            v268 = 0;
            v269 = 0;
            v266 = v265 & 0xFFFFFFFFFFFFFFFELL;
            v270 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v271 = v375 + 8;
            v272 = v265 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v268 += *(v271 - 1) * (*(v270 - 1) - 1);
              v269 += *v271 * (*v270 - 1);
              v270 += 2;
              v271 += 2;
              v272 -= 2;
            }
            while (v272);
            v267 = v269 + v268;
            if (v265 != v266)
              goto LABEL_328;
LABEL_330:
            if (v131 != v267 + 1)
LABEL_414:
              nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
            v280 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 != *((_QWORD *)&v373 + 1))
            {
              v281 = v280 >> 3;
              if ((unint64_t)(v280 >> 3) <= 1)
                v281 = 1;
              if (v281 >= 2)
              {
                v284 = 0;
                v285 = 0;
                v282 = v281 & 0xFFFFFFFFFFFFFFFELL;
                v286 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                v287 = v375 + 8;
                v288 = v281 & 0xFFFFFFFFFFFFFFFELL;
                do
                {
                  v284 += *(v287 - 1) * (*(v286 - 1) - 1);
                  v285 += *v287 * (*v286 - 1);
                  v286 += 2;
                  v287 += 2;
                  v288 -= 2;
                }
                while (v288);
                v283 = v285 + v284;
                if (v281 == v282)
                  goto LABEL_341;
              }
              else
              {
                v282 = 0;
                v283 = 0;
              }
              v289 = v281 - v282;
              v290 = 8 * v282;
              v291 = &v375[v290];
              v292 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v290);
              do
              {
                v293 = *v292++;
                v294 = v293 - 1;
                v295 = *(_QWORD *)v291;
                v291 += 8;
                v283 += v295 * v294;
                --v289;
              }
              while (v289);
LABEL_341:
              v146 = v283 + 1;
              goto LABEL_416;
            }
            v146 = 0;
LABEL_416:
            v331 = v377;
            v332 = v377 + v146;
            if (!(v377 + v146))
              goto LABEL_431;
            v333 = v372;
            v334 = (int)*(float *)v353.i32;
            if (v332 < 4)
            {
              v335 = 0;
LABEL_457:
              v351 = v146 + v331 - v335;
              v352 = (int *)(v333 + 4 * v335);
              do
              {
                if (*(float *)v353.i32 < (float)*v352)
                  *v352 = v334;
                ++v352;
                --v351;
              }
              while (v351);
LABEL_431:
              if (v375)
              {
                *(_QWORD *)&v376 = v375;
                operator delete(v375);
                v129 = (void *)*((_QWORD *)&v373 + 1);
              }
              if (v129)
              {
                *(_QWORD *)&v374 = v129;
                operator delete(v129);
              }
              v305 = (std::__shared_weak_count *)v373;
              if ((_QWORD)v373)
              {
                v340 = (unint64_t *)(v373 + 8);
                do
                  v307 = __ldaxr(v340);
                while (__stlxr(v307 - 1, v340));
                goto LABEL_438;
              }
LABEL_440:
              *(_QWORD *)a4 = 0;
              *(_BYTE *)(a4 + 8) = 9;
              v341 = operator new();
              *(_QWORD *)v341 = 0;
              nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v341 + 8));
              *(_QWORD *)a4 = v341;
              *(_QWORD *)v341 = 1;
              *(_DWORD *)(v341 + 8) = v379;
              v342 = v380;
              v380 = 0uLL;
              v343 = *(std::__shared_weak_count **)(v341 + 24);
              *(_OWORD *)(v341 + 16) = v342;
              if (v343)
              {
                v344 = (unint64_t *)&v343->__shared_owners_;
                do
                  v345 = __ldaxr(v344);
                while (__stlxr(v345 - 1, v344));
                if (!v345)
                {
                  ((void (*)(std::__shared_weak_count *))v343->__on_zero_shared)(v343);
                  std::__shared_weak_count::__release_weak(v343);
                }
              }
              v346 = *(void **)(v341 + 32);
              if (v346)
              {
                *(_QWORD *)(v341 + 40) = v346;
                operator delete(v346);
                *(_QWORD *)(v341 + 32) = 0;
                *(_QWORD *)(v341 + 40) = 0;
                *(_QWORD *)(v341 + 48) = 0;
              }
              v347 = *(void **)(v341 + 56);
              *(_OWORD *)(v341 + 32) = v381;
              *(_QWORD *)(v341 + 48) = v382;
              v382 = 0;
              v381 = 0uLL;
              if (v347)
              {
                *(_QWORD *)(v341 + 64) = v347;
                operator delete(v347);
                *(_QWORD *)(v341 + 56) = 0;
                *(_QWORD *)(v341 + 64) = 0;
                *(_QWORD *)(v341 + 72) = 0;
                v347 = (void *)v381;
              }
              *(_OWORD *)(v341 + 56) = v383;
              v348 = v384;
              v349 = v385;
              v384 = 0;
              v383 = 0uLL;
              *(_QWORD *)(v341 + 72) = v348;
              *(_QWORD *)(v341 + 80) = v349;
              if (v347)
              {
                *((_QWORD *)&v381 + 1) = v347;
                operator delete(v347);
              }
              v125 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
              if (*((_QWORD *)&v380 + 1))
              {
                v350 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
                do
                  v127 = __ldaxr(v350);
                while (__stlxr(v127 - 1, v350));
                goto LABEL_454;
              }
              return;
            }
            v335 = v332 & 0xFFFFFFFFFFFFFFFCLL;
            v336 = (float32x4_t)vdupq_lane_s32(v353, 0);
            v337 = v332 & 0xFFFFFFFFFFFFFFFCLL;
            v338 = (int32x4_t *)v372;
            while (1)
            {
              v339 = vmovn_s32(vcgtq_f32(vcvtq_f32_s32(*v338), v336));
              if ((v339.i8[0] & 1) != 0)
              {
                v338->i32[0] = v334;
                if ((v339.i8[2] & 1) == 0)
                  goto LABEL_423;
              }
              else if ((v339.i8[2] & 1) == 0)
              {
LABEL_423:
                if ((v339.i8[4] & 1) != 0)
                  goto LABEL_424;
                goto LABEL_428;
              }
              v338->i32[1] = v334;
              if ((v339.i8[4] & 1) != 0)
              {
LABEL_424:
                v338->i32[2] = v334;
                if ((v339.i8[6] & 1) != 0)
                  goto LABEL_429;
                goto LABEL_420;
              }
LABEL_428:
              if ((v339.i8[6] & 1) != 0)
LABEL_429:
                v338->i32[3] = v334;
LABEL_420:
              ++v338;
              v337 -= 4;
              if (!v337)
              {
                if (v332 == v335)
                  goto LABEL_431;
                goto LABEL_457;
              }
            }
          case 5:
            nitro::ndarray<unsigned char>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_399;
            v141 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
              goto LABEL_400;
            v142 = v372;
            if (!v372)
              goto LABEL_296;
            if ((unint64_t)(v141 - 8) < 8)
            {
              v142 = 1;
              v143 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_295:
                v226 = *v143++;
                v142 *= v226;
              }
              while (v143 != (uint64_t *)v374);
              goto LABEL_296;
            }
            v221 = ((unint64_t)(v141 - 8) >> 3) + 1;
            v143 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v221 & 0x3FFFFFFFFFFFFFFELL));
            v222 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v223 = 1;
            v224 = v221 & 0x3FFFFFFFFFFFFFFELL;
            v225 = 1;
            do
            {
              v223 *= *(v222 - 1);
              v225 *= *v222;
              v222 += 2;
              v224 -= 2;
            }
            while (v224);
            v142 = v225 * v223;
            if (v221 != (v221 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_295;
LABEL_296:
            v227 = v141 >> 3;
            if ((unint64_t)(v141 >> 3) <= 1)
              v227 = 1;
            if (v227 >= 2)
            {
              v230 = 0;
              v231 = 0;
              v228 = v227 & 0xFFFFFFFFFFFFFFFELL;
              v232 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
              v233 = v375 + 8;
              v234 = v227 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v230 += *(v233 - 1) * (*(v232 - 1) - 1);
                v231 += *v233 * (*v232 - 1);
                v232 += 2;
                v233 += 2;
                v234 -= 2;
              }
              while (v234);
              v229 = v231 + v230;
              if (v227 == v228)
              {
LABEL_305:
                if (v142 != v229 + 1)
LABEL_399:
                  nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
                v242 = v374 - *((_QWORD *)&v373 + 1);
                if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
                {
LABEL_400:
                  v258 = 0;
                  goto LABEL_401;
                }
                v243 = v242 >> 3;
                if ((unint64_t)(v242 >> 3) <= 1)
                  v243 = 1;
                if (v243 >= 2)
                {
                  v246 = 0;
                  v247 = 0;
                  v244 = v243 & 0xFFFFFFFFFFFFFFFELL;
                  v248 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                  v249 = v375 + 8;
                  v250 = v243 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    v246 += *(v249 - 1) * (*(v248 - 1) - 1);
                    v247 += *v249 * (*v248 - 1);
                    v248 += 2;
                    v249 += 2;
                    v250 -= 2;
                  }
                  while (v250);
                  v245 = v247 + v246;
                  if (v243 == v244)
                    goto LABEL_316;
                }
                else
                {
                  v244 = 0;
                  v245 = 0;
                }
                v251 = v243 - v244;
                v252 = 8 * v244;
                v253 = &v375[v252];
                v254 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v252);
                do
                {
                  v255 = *v254++;
                  v256 = v255 - 1;
                  v257 = *(_QWORD *)v253;
                  v253 += 8;
                  v245 += v257 * v256;
                  --v251;
                }
                while (v251);
LABEL_316:
                v258 = v245 + 1;
LABEL_401:
                v327 = v377;
                if (v377 + v258)
                {
                  v329 = 0;
                  v330 = *(float *)v353.i32;
                  do
                  {
                    LOBYTE(v330) = *(_BYTE *)(v372 + v329);
                    v330 = (float)LODWORD(v330);
                    if (*(float *)v353.i32 < v330)
                    {
                      *(_BYTE *)(v372 + v329) = (int)*(float *)v353.i32;
                      v327 = v377;
                    }
                    ++v329;
                  }
                  while (v329 < v327 + v258);
                }
                if (v375)
                {
                  *(_QWORD *)&v376 = v375;
                  operator delete(v375);
                }
                if (*((_QWORD *)&v373 + 1))
                {
                  *(_QWORD *)&v374 = *((_QWORD *)&v373 + 1);
                  operator delete(*((void **)&v373 + 1));
                }
                v305 = (std::__shared_weak_count *)v373;
                if (!(_QWORD)v373)
                  goto LABEL_440;
                v328 = (unint64_t *)(v373 + 8);
                do
                  v307 = __ldaxr(v328);
                while (__stlxr(v307 - 1, v328));
                goto LABEL_438;
              }
            }
            else
            {
              v228 = 0;
              v229 = 0;
            }
            v235 = v227 - v228;
            v236 = 8 * v228;
            v237 = &v375[v236];
            v238 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v236);
            do
            {
              v239 = *v238++;
              v240 = v239 - 1;
              v241 = *(_QWORD *)v237;
              v237 += 8;
              v229 += v241 * v240;
              --v235;
            }
            while (v235);
            goto LABEL_305;
          case 9:
            nitro::ndarray<float>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_342;
            v133 = (void *)*((_QWORD *)&v373 + 1);
            v134 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
            {
              v144 = 0;
              v133 = (void *)v374;
              goto LABEL_344;
            }
            v135 = v372;
            if (!v372)
              goto LABEL_246;
            if ((unint64_t)(v134 - 8) < 8)
            {
              v135 = 1;
              v136 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_245:
                v152 = *v136++;
                v135 *= v152;
              }
              while (v136 != (uint64_t *)v374);
              goto LABEL_246;
            }
            v147 = ((unint64_t)(v134 - 8) >> 3) + 1;
            v136 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v147 & 0x3FFFFFFFFFFFFFFELL));
            v148 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v149 = 1;
            v150 = v147 & 0x3FFFFFFFFFFFFFFELL;
            v151 = 1;
            do
            {
              v149 *= *(v148 - 1);
              v151 *= *v148;
              v148 += 2;
              v150 -= 2;
            }
            while (v150);
            v135 = v151 * v149;
            if (v147 != (v147 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_245;
LABEL_246:
            v153 = v134 >> 3;
            if ((unint64_t)(v134 >> 3) <= 1)
              v153 = 1;
            if (v153 >= 2)
            {
              v156 = 0;
              v157 = 0;
              v154 = v153 & 0xFFFFFFFFFFFFFFFELL;
              v158 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
              v159 = v375 + 8;
              v160 = v153 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v156 += *(v159 - 1) * (*(v158 - 1) - 1);
                v157 += *v159 * (*v158 - 1);
                v158 += 2;
                v159 += 2;
                v160 -= 2;
              }
              while (v160);
              v155 = v157 + v156;
              if (v153 == v154)
              {
LABEL_255:
                if (v135 != v155 + 1)
LABEL_342:
                  nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
                v168 = v374 - *((_QWORD *)&v373 + 1);
                if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
                {
                  v144 = 0;
LABEL_344:
                  v296 = v377;
                  v297 = v377 + v144;
                  if (v377 + v144)
                  {
                    v298 = v372;
                    if (v297 >= 4)
                    {
                      v299 = v297 & 0xFFFFFFFFFFFFFFFCLL;
                      v300 = (float32x2_t)vdup_lane_s32(v353, 0);
                      v301 = (float32x2_t *)(v372 + 8);
                      v302 = v297 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        v303 = vcgt_f32(v301[-1], v300);
                        if ((v303.i8[0] & 1) != 0)
                          v301[-1].i32[0] = v353.i32[0];
                        if ((v303.i8[4] & 1) != 0)
                          v301[-1].i32[1] = v353.i32[0];
                        v304 = vcgt_f32(*v301, v300);
                        if ((v304.i8[0] & 1) != 0)
                          v301->i32[0] = v353.i32[0];
                        if ((v304.i8[4] & 1) != 0)
                          v301->i32[1] = v353.i32[0];
                        v301 += 2;
                        v302 -= 4;
                      }
                      while (v302);
                      if (v297 == v299)
                        goto LABEL_358;
                    }
                    else
                    {
                      v299 = 0;
                    }
                    v308 = v144 + v296 - v299;
                    v309 = (float *)(v298 + 4 * v299);
                    do
                    {
                      if (*v309 > *(float *)v353.i32)
                        *v309 = *(float *)v353.i32;
                      ++v309;
                      --v308;
                    }
                    while (v308);
                  }
LABEL_358:
                  if (v375)
                  {
                    *(_QWORD *)&v376 = v375;
                    operator delete(v375);
                    v133 = (void *)*((_QWORD *)&v373 + 1);
                  }
                  if (v133)
                  {
                    *(_QWORD *)&v374 = v133;
                    operator delete(v133);
                  }
                  v305 = (std::__shared_weak_count *)v373;
                  if (!(_QWORD)v373)
                    goto LABEL_440;
                  v306 = (unint64_t *)(v373 + 8);
                  do
                    v307 = __ldaxr(v306);
                  while (__stlxr(v307 - 1, v306));
                  goto LABEL_438;
                }
                v169 = v168 >> 3;
                if ((unint64_t)(v168 >> 3) <= 1)
                  v169 = 1;
                if (v169 >= 2)
                {
                  v172 = 0;
                  v173 = 0;
                  v170 = v169 & 0xFFFFFFFFFFFFFFFELL;
                  v174 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                  v175 = v375 + 8;
                  v176 = v169 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    v172 += *(v175 - 1) * (*(v174 - 1) - 1);
                    v173 += *v175 * (*v174 - 1);
                    v174 += 2;
                    v175 += 2;
                    v176 -= 2;
                  }
                  while (v176);
                  v171 = v173 + v172;
                  if (v169 == v170)
                    goto LABEL_266;
                }
                else
                {
                  v170 = 0;
                  v171 = 0;
                }
                v177 = v169 - v170;
                v178 = 8 * v170;
                v179 = &v375[v178];
                v180 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v178);
                do
                {
                  v181 = *v180++;
                  v182 = v181 - 1;
                  v183 = *(_QWORD *)v179;
                  v179 += 8;
                  v171 += v183 * v182;
                  --v177;
                }
                while (v177);
LABEL_266:
                v144 = v171 + 1;
                goto LABEL_344;
              }
            }
            else
            {
              v154 = 0;
              v155 = 0;
            }
            v161 = v153 - v154;
            v162 = 8 * v154;
            v163 = &v375[v162];
            v164 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v162);
            do
            {
              v165 = *v164++;
              v166 = v165 - 1;
              v167 = *(_QWORD *)v163;
              v163 += 8;
              v155 += v167 * v166;
              --v161;
            }
            while (v161);
            goto LABEL_255;
          case 11:
            nitro::ndarray<half>::ndarray((uint64_t)&v372, (uint64_t)&v379);
            if (v377)
              goto LABEL_370;
            v137 = (void *)*((_QWORD *)&v373 + 1);
            v138 = v374 - *((_QWORD *)&v373 + 1);
            if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
            {
              v145 = 0;
              v137 = (void *)v374;
              goto LABEL_372;
            }
            v139 = v372;
            if (!v372)
              goto LABEL_271;
            if ((unint64_t)(v138 - 8) < 8)
            {
              v139 = 1;
              v140 = (uint64_t *)*((_QWORD *)&v373 + 1);
              do
              {
LABEL_270:
                v189 = *v140++;
                v139 *= v189;
              }
              while (v140 != (uint64_t *)v374);
              goto LABEL_271;
            }
            v184 = ((unint64_t)(v138 - 8) >> 3) + 1;
            v140 = (uint64_t *)(*((_QWORD *)&v373 + 1) + 8 * (v184 & 0x3FFFFFFFFFFFFFFELL));
            v185 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
            v186 = 1;
            v187 = v184 & 0x3FFFFFFFFFFFFFFELL;
            v188 = 1;
            do
            {
              v186 *= *(v185 - 1);
              v188 *= *v185;
              v185 += 2;
              v187 -= 2;
            }
            while (v187);
            v139 = v188 * v186;
            if (v184 != (v184 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_270;
LABEL_271:
            v190 = v138 >> 3;
            if ((unint64_t)(v138 >> 3) <= 1)
              v190 = 1;
            if (v190 >= 2)
            {
              v193 = 0;
              v194 = 0;
              v191 = v190 & 0xFFFFFFFFFFFFFFFELL;
              v195 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
              v196 = v375 + 8;
              v197 = v190 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v193 += *(v196 - 1) * (*(v195 - 1) - 1);
                v194 += *v196 * (*v195 - 1);
                v195 += 2;
                v196 += 2;
                v197 -= 2;
              }
              while (v197);
              v192 = v194 + v193;
              if (v190 == v191)
              {
LABEL_280:
                if (v139 != v192 + 1)
LABEL_370:
                  nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
                v205 = v374 - *((_QWORD *)&v373 + 1);
                if ((_QWORD)v374 == *((_QWORD *)&v373 + 1))
                {
                  v145 = 0;
                  goto LABEL_372;
                }
                v206 = v205 >> 3;
                if ((unint64_t)(v205 >> 3) <= 1)
                  v206 = 1;
                if (v206 >= 2)
                {
                  v209 = 0;
                  v210 = 0;
                  v207 = v206 & 0xFFFFFFFFFFFFFFFELL;
                  v211 = (_QWORD *)(*((_QWORD *)&v373 + 1) + 8);
                  v212 = v375 + 8;
                  v213 = v206 & 0xFFFFFFFFFFFFFFFELL;
                  do
                  {
                    v209 += *(v212 - 1) * (*(v211 - 1) - 1);
                    v210 += *v212 * (*v211 - 1);
                    v211 += 2;
                    v212 += 2;
                    v213 -= 2;
                  }
                  while (v213);
                  v208 = v210 + v209;
                  if (v206 == v207)
                    goto LABEL_291;
                }
                else
                {
                  v207 = 0;
                  v208 = 0;
                }
                v214 = v206 - v207;
                v215 = 8 * v207;
                v216 = &v375[v215];
                v217 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v215);
                do
                {
                  v218 = *v217++;
                  v219 = v218 - 1;
                  v220 = *(_QWORD *)v216;
                  v216 += 8;
                  v208 += v220 * v219;
                  --v214;
                }
                while (v214);
LABEL_291:
                v145 = v208 + 1;
LABEL_372:
                v310 = v377;
                v311 = v377 + v145;
                if (!(v377 + v145))
                  goto LABEL_387;
                v312 = v372;
                _S1 = v353.i32[0];
                __asm { FCVT            H0, S1 }
                if (v311 < 4)
                {
                  v317 = 0;
LABEL_395:
                  v323 = v145 + v310 - v317;
                  v324 = (__int16 *)(v312 + 2 * v317);
                  do
                  {
                    _H1 = *v324;
                    __asm { FCVT            S1, H1 }
                    if (*(float *)v353.i32 < _S1)
                      *v324 = _H0;
                    ++v324;
                    --v323;
                  }
                  while (v323);
LABEL_387:
                  if (v375)
                  {
                    *(_QWORD *)&v376 = v375;
                    operator delete(v375);
                    v137 = (void *)*((_QWORD *)&v373 + 1);
                  }
                  if (v137)
                  {
                    *(_QWORD *)&v374 = v137;
                    operator delete(v137);
                  }
                  v305 = (std::__shared_weak_count *)v373;
                  if (!(_QWORD)v373)
                    goto LABEL_440;
                  v322 = (unint64_t *)(v373 + 8);
                  do
                    v307 = __ldaxr(v322);
                  while (__stlxr(v307 - 1, v322));
LABEL_438:
                  if (!v307)
                  {
                    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                    std::__shared_weak_count::__release_weak(v305);
                  }
                  goto LABEL_440;
                }
                v317 = v311 & 0xFFFFFFFFFFFFFFFCLL;
                v318 = (float32x4_t)vdupq_lane_s32(v353, 0);
                v319 = v311 & 0xFFFFFFFFFFFFFFFCLL;
                v320 = (float16x4_t *)v372;
                while (1)
                {
                  v321 = vmovn_s32(vcgtq_f32(vcvtq_f32_f16(*v320), v318));
                  if ((v321.i8[0] & 1) != 0)
                  {
                    v320->i16[0] = _H0;
                    if ((v321.i8[2] & 1) == 0)
                      goto LABEL_379;
                  }
                  else if ((v321.i8[2] & 1) == 0)
                  {
LABEL_379:
                    if ((v321.i8[4] & 1) != 0)
                      goto LABEL_380;
                    goto LABEL_384;
                  }
                  v320->i16[1] = _H0;
                  if ((v321.i8[4] & 1) != 0)
                  {
LABEL_380:
                    v320->i16[2] = _H0;
                    if ((v321.i8[6] & 1) != 0)
                      goto LABEL_385;
                    goto LABEL_376;
                  }
LABEL_384:
                  if ((v321.i8[6] & 1) != 0)
LABEL_385:
                    v320->i16[3] = _H0;
LABEL_376:
                  ++v320;
                  v319 -= 4;
                  if (!v319)
                  {
                    if (v311 == v317)
                      goto LABEL_387;
                    goto LABEL_395;
                  }
                }
              }
            }
            else
            {
              v191 = 0;
              v192 = 0;
            }
            v198 = v190 - v191;
            v199 = 8 * v191;
            v200 = &v375[v199];
            v201 = (uint64_t *)(*((_QWORD *)&v373 + 1) + v199);
            do
            {
              v202 = *v201++;
              v203 = v202 - 1;
              v204 = *(_QWORD *)v200;
              v200 += 8;
              v192 += v204 * v203;
              --v198;
            }
            while (v198);
            goto LABEL_280;
          default:
            printf("%d\n", v379);
            nitro::ndarray_container::visit<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()();
        }
      }
      v128 = (uint64_t)*this;
    }
    else
    {
      nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*this + 1), (uint64_t)&v365);
      nitro::ndarray_container::copy((nitro::ndarray_container *)&v365, (uint64_t)&v372);
      v379 = v372;
      v34 = v373;
      v373 = 0uLL;
      v35 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
      v380 = v34;
      if (v35)
      {
        v36 = (unint64_t *)&v35->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if ((_QWORD)v381)
      {
        *((_QWORD *)&v381 + 1) = v381;
        operator delete((void *)v381);
      }
      v381 = v374;
      v382 = v375;
      v375 = 0;
      v374 = 0uLL;
      v38 = (void *)v383;
      if ((_QWORD)v383)
      {
        *((_QWORD *)&v383 + 1) = v383;
        operator delete((void *)v383);
        v38 = (void *)v374;
      }
      HIDWORD(v17) = DWORD1(v376);
      v383 = v376;
      v39 = v377;
      v377 = 0;
      v376 = 0uLL;
      v384 = v39;
      v385 = v378;
      if (v38)
      {
        *((_QWORD *)&v374 + 1) = v38;
        operator delete(v38);
      }
      v40 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
      if (*((_QWORD *)&v373 + 1))
      {
        v41 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if ((_QWORD)v367)
      {
        *((_QWORD *)&v367 + 1) = v367;
        operator delete((void *)v367);
      }
      v43 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
      if (*((_QWORD *)&v366 + 1))
      {
        v44 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      if (*((_BYTE *)a2 + 8))
      {
        v17 = *(double *)a2;
        goto LABEL_79;
      }
      v128 = *(_QWORD *)a2;
    }
    *(float *)&v17 = (float)v128;
    goto LABEL_218;
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*this + 1), (uint64_t)&v379);
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)a2 + 8), (uint64_t)&v372);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v365);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v361);
  v31 = 0;
  v32 = *((_QWORD *)&v381 + 1) - v381;
  if (*((_QWORD *)&v381 + 1) != (_QWORD)v381 && (_QWORD)v380)
  {
    if ((unint64_t)(v32 - 8) >= 8)
    {
      v60 = ((unint64_t)(v32 - 8) >> 3) + 1;
      v33 = (uint64_t *)(v381 + 8 * (v60 & 0x3FFFFFFFFFFFFFFELL));
      v61 = (_QWORD *)(v381 + 8);
      v62 = 1;
      v63 = v60 & 0x3FFFFFFFFFFFFFFELL;
      v64 = 1;
      do
      {
        v62 *= *(v61 - 1);
        v64 *= *v61;
        v61 += 2;
        v63 -= 2;
      }
      while (v63);
      v31 = v64 * v62;
      if (v60 == (v60 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_108;
    }
    else
    {
      v31 = 1;
      v33 = (uint64_t *)v381;
    }
    do
    {
      v65 = *v33++;
      v31 *= v65;
    }
    while (v33 != *((uint64_t **)&v381 + 1));
  }
LABEL_108:
  if (*((_QWORD *)&v374 + 1) == (_QWORD)v374 || (_QWORD)v373 == 0)
  {
    v67 = 0;
    goto LABEL_120;
  }
  v68 = *((_QWORD *)&v374 + 1) - v374 - 8;
  if (v68 < 8)
  {
    v67 = 1;
    v69 = (uint64_t *)v374;
    do
    {
LABEL_119:
      v75 = *v69++;
      v67 *= v75;
    }
    while (v69 != *((uint64_t **)&v374 + 1));
    goto LABEL_120;
  }
  v70 = (v68 >> 3) + 1;
  v69 = (uint64_t *)(v374 + 8 * (v70 & 0x3FFFFFFFFFFFFFFELL));
  v71 = (_QWORD *)(v374 + 8);
  v72 = 1;
  v73 = v70 & 0x3FFFFFFFFFFFFFFELL;
  v74 = 1;
  do
  {
    v72 *= *(v71 - 1);
    v74 *= *v71;
    v71 += 2;
    v73 -= 2;
  }
  while (v73);
  v67 = v74 * v72;
  if (v70 != (v70 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_119;
LABEL_120:
  if (v31 >= v67)
  {
    nitro::ndarray_container::copy((nitro::ndarray_container *)&v379, (uint64_t)&v354);
    v365 = v354;
    v92 = v355;
    v355 = 0uLL;
    v93 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    v366 = v92;
    if (v93)
    {
      v94 = (unint64_t *)&v93->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
    if ((_QWORD)v367)
    {
      *((_QWORD *)&v367 + 1) = v367;
      operator delete((void *)v367);
    }
    v367 = *(_OWORD *)v356;
    v368 = v357;
    v356[1] = 0;
    v357 = 0;
    v356[0] = 0;
    v96 = __p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
      v96 = v356[0];
    }
    *(_OWORD *)__p = v358;
    v97 = v359;
    v359 = 0;
    v358 = 0uLL;
    v370 = v97;
    v371 = v360;
    if (v96)
    {
      v356[1] = v96;
      operator delete(v96);
    }
    v98 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
    if (*((_QWORD *)&v355 + 1))
    {
      v99 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    v361 = v372;
    v101 = v373;
    if (*((_QWORD *)&v373 + 1))
    {
      v102 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
      do
        v103 = __ldxr(v102);
      while (__stxr(v103 + 1, v102));
    }
    v104 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
    v362 = v101;
    if (v104)
    {
      v105 = (unint64_t *)&v104->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
        std::__shared_weak_count::__release_weak(v104);
      }
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v363, (char *)v374, *((char **)&v374 + 1), (uint64_t)(*((_QWORD *)&v374 + 1) - v374) >> 3);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v364, (char *)v376, *((char **)&v376 + 1), (uint64_t)(*((_QWORD *)&v376 + 1) - v376) >> 3);
    v91 = (void **)&v372;
  }
  else
  {
    nitro::ndarray_container::copy((nitro::ndarray_container *)&v372, (uint64_t)&v354);
    v365 = v354;
    v76 = v355;
    v355 = 0uLL;
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
    v366 = v76;
    if (v77)
    {
      v78 = (unint64_t *)&v77->__shared_owners_;
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    if ((_QWORD)v367)
    {
      *((_QWORD *)&v367 + 1) = v367;
      operator delete((void *)v367);
    }
    v367 = *(_OWORD *)v356;
    v368 = v357;
    v356[1] = 0;
    v357 = 0;
    v356[0] = 0;
    v80 = __p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
      v80 = v356[0];
    }
    *(_OWORD *)__p = v358;
    v81 = v359;
    v359 = 0;
    v358 = 0uLL;
    v370 = v81;
    v371 = v360;
    if (v80)
    {
      v356[1] = v80;
      operator delete(v80);
    }
    v82 = (std::__shared_weak_count *)*((_QWORD *)&v355 + 1);
    if (*((_QWORD *)&v355 + 1))
    {
      v83 = (unint64_t *)(*((_QWORD *)&v355 + 1) + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
        std::__shared_weak_count::__release_weak(v82);
      }
    }
    v361 = v379;
    v85 = v380;
    if (*((_QWORD *)&v380 + 1))
    {
      v86 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
      do
        v87 = __ldxr(v86);
      while (__stxr(v87 + 1, v86));
    }
    v88 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
    v362 = v85;
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldaxr(v89);
      while (__stlxr(v90 - 1, v89));
      if (!v90)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v363, (char *)v381, *((char **)&v381 + 1), (uint64_t)(*((_QWORD *)&v381 + 1) - v381) >> 3);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v364, (char *)v383, *((char **)&v383 + 1), (uint64_t)(*((_QWORD *)&v383 + 1) - v383) >> 3);
    v91 = (void **)&v379;
  }
  v364[3] = v91[9];
  nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(&v365, &v361);
  *(_QWORD *)a4 = 0;
  *(_BYTE *)(a4 + 8) = 9;
  v107 = operator new();
  *(_QWORD *)v107 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v107 + 8));
  *(_QWORD *)a4 = v107;
  *(_QWORD *)v107 = 1;
  *(_DWORD *)(v107 + 8) = v365;
  v108 = v366;
  v366 = 0uLL;
  v109 = *(std::__shared_weak_count **)(v107 + 24);
  *(_OWORD *)(v107 + 16) = v108;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  v112 = *(void **)(v107 + 32);
  if (v112)
  {
    *(_QWORD *)(v107 + 40) = v112;
    operator delete(v112);
    *(_QWORD *)(v107 + 32) = 0;
    *(_QWORD *)(v107 + 40) = 0;
    *(_QWORD *)(v107 + 48) = 0;
  }
  v113 = *(void **)(v107 + 56);
  *(_OWORD *)(v107 + 32) = v367;
  *(_QWORD *)(v107 + 48) = v368;
  v368 = 0;
  v367 = 0uLL;
  if (v113)
  {
    *(_QWORD *)(v107 + 64) = v113;
    operator delete(v113);
    *(_QWORD *)(v107 + 56) = 0;
    *(_QWORD *)(v107 + 64) = 0;
    *(_QWORD *)(v107 + 72) = 0;
  }
  *(_OWORD *)(v107 + 56) = *(_OWORD *)__p;
  v114 = v370;
  v115 = v371;
  __p[1] = 0;
  v370 = 0;
  __p[0] = 0;
  *(_QWORD *)(v107 + 72) = v114;
  *(_QWORD *)(v107 + 80) = v115;
  if (v364[0])
  {
    v364[1] = v364[0];
    operator delete(v364[0]);
  }
  if (v363[0])
  {
    v363[1] = v363[0];
    operator delete(v363[0]);
  }
  v116 = (std::__shared_weak_count *)*((_QWORD *)&v362 + 1);
  if (*((_QWORD *)&v362 + 1))
  {
    v117 = (unint64_t *)(*((_QWORD *)&v362 + 1) + 8);
    do
      v118 = __ldaxr(v117);
    while (__stlxr(v118 - 1, v117));
    if (!v118)
    {
      ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
      std::__shared_weak_count::__release_weak(v116);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v367)
  {
    *((_QWORD *)&v367 + 1) = v367;
    operator delete((void *)v367);
  }
  v119 = (std::__shared_weak_count *)*((_QWORD *)&v366 + 1);
  if (*((_QWORD *)&v366 + 1))
  {
    v120 = (unint64_t *)(*((_QWORD *)&v366 + 1) + 8);
    do
      v121 = __ldaxr(v120);
    while (__stlxr(v121 - 1, v120));
    if (!v121)
    {
      ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
      std::__shared_weak_count::__release_weak(v119);
    }
  }
  if ((_QWORD)v376)
  {
    *((_QWORD *)&v376 + 1) = v376;
    operator delete((void *)v376);
  }
  if ((_QWORD)v374)
  {
    *((_QWORD *)&v374 + 1) = v374;
    operator delete((void *)v374);
  }
  v122 = (std::__shared_weak_count *)*((_QWORD *)&v373 + 1);
  if (*((_QWORD *)&v373 + 1))
  {
    v123 = (unint64_t *)(*((_QWORD *)&v373 + 1) + 8);
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  if ((_QWORD)v383)
  {
    *((_QWORD *)&v383 + 1) = v383;
    operator delete((void *)v383);
  }
  if ((_QWORD)v381)
  {
    *((_QWORD *)&v381 + 1) = v381;
    operator delete((void *)v381);
  }
  v125 = (std::__shared_weak_count *)*((_QWORD *)&v380 + 1);
  if (*((_QWORD *)&v380 + 1))
  {
    v126 = (unint64_t *)(*((_QWORD *)&v380 + 1) + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
LABEL_454:
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
}

void sub_1912992FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 232));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)(v1 - 152));
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::All(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v5;
  int is_zero;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;
  unint64_t *v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  _DWORD *v33;
  unint64_t v34;
  int v35;
  int64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  float *v52;
  unint64_t v53;
  void *v54;
  __int16 *v55;
  unint64_t v56;
  void *v62;
  unsigned __int8 *v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  float *v103;
  char *v104;
  char *v105;
  int v106;
  float v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  std::string::size_type v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  _QWORD *v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  _DWORD *v170;
  char *v171;
  char *v172;
  int v173;
  int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  std::string::size_type v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  unint64_t v193;
  std::__shared_weak_count *v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t *p_shared_owners;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  unint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  char *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  _QWORD *v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  unsigned __int8 *v237;
  char *v238;
  char *v239;
  int v240;
  int v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  unint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  std::string::size_type v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  std::__shared_weak_count *v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t *v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  char *v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  _QWORD *v275;
  unint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  _QWORD *v292;
  unint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unint64_t v302;
  _WORD *v303;
  char *v304;
  char *v305;
  int v306;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  char *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  std::string::size_type v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t v326;
  unint64_t v327;
  std::__shared_weak_count *v328;
  unint64_t *v329;
  unint64_t v330;
  unint64_t *v331;
  uint64_t v332;
  __int128 v333;
  std::__shared_weak_count *v334;
  unint64_t *v335;
  unint64_t v336;
  void *v337;
  void *v338;
  uint64_t v339;
  uint64_t v340;
  std::__shared_weak_count *v341;
  unint64_t *v342;
  unint64_t v343;
  void *v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  unint64_t *v352;
  unint64_t *v353;
  file_logger *v354;
  file_logger *started;
  _QWORD *v356;
  _QWORD *v357;
  _QWORD *exception;
  _QWORD *v359;
  void *v360;
  void *v361;
  char *v362;
  uint64_t v363;
  unint64_t v364;
  void *v365;
  char *v366;
  char *v367;
  _DWORD v368[4];
  std::__shared_weak_count *v369;
  void *v370[2];
  void *v371;
  void *v372;
  std::string __str;
  __int128 v374;
  void *v375;
  void *v376[2];
  uint64_t v377;
  uint64_t v378;
  void *__p;
  std::__shared_weak_count *v380;
  void *v381;
  _BYTE *v382;
  void *v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  char *v388;
  char *v389;
  std::string v390;
  std::string::size_type v391;
  char *v392;
  char *v393;
  uint64_t v394;
  char *v395;
  char *v396;
  char *v397;

  v5 = *((unsigned __int8 *)this + 8);
  if (v5 != 9)
  {
    if (v5 > 1)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        v354 = (file_logger *)global_logger();
        started = file_logger::start_stream(v354, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 1244, 1);
        v356 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v356 && *((_BYTE *)v356 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v356 + 2, (uint64_t)"Unsupported type for All operation", 34);
        v357 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v357 && *((_BYTE *)v357 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v357 + 2, (uint64_t)"\n", 1);
          file_logger::stream_flush(started);
          if (*((_DWORD *)started + 150) == 7)
          {
            __print_back_trace();
            exception = __cxa_allocate_exception(8uLL);
            *exception = "LOG_FATAL encountered";
            __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
          }
        }
      }
      v359 = __cxa_allocate_exception(0x18uLL);
      std::string::basic_string[abi:ne180100]<0>(v359, "Unsupported type for All operation");
    }
    is_zero = nitro::flexible_type::is_zero(this);
    *(_BYTE *)(a4 + 8) = 0;
    *(_QWORD *)a4 = is_zero ^ 1u;
    return;
  }
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v368, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  v8 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a2 + 8))
  {
    if (v8 == 9)
    {
      if (*(_DWORD *)(*(_QWORD *)a2 + 8) == 3)
        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__str, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
      else
        _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_((_DWORD *)(*(_QWORD *)a2 + 8), (uint64_t)&__str);
      v10 = (uint64_t *)nitro::ndarray<int>::ndarray((uint64_t)&v390, (uint64_t)&__str);
      nitro::ndarray<int>::get_elements_copy(v10, (uint64_t *)&__p);
      v9 = *(int *)__p;
      v380 = (std::__shared_weak_count *)__p;
      operator delete(__p);
      if (v392)
      {
        v393 = v392;
        operator delete(v392);
      }
      if (v390.__r_.__value_.__r.__words[2])
      {
        v391 = v390.__r_.__value_.__r.__words[2];
        operator delete((void *)v390.__r_.__value_.__r.__words[2]);
      }
      size = (std::__shared_weak_count *)v390.__r_.__value_.__l.__size_;
      if (v390.__r_.__value_.__l.__size_)
      {
        v12 = (unint64_t *)(v390.__r_.__value_.__l.__size_ + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (v376[0])
      {
        v376[1] = v376[0];
        operator delete(v376[0]);
      }
      if ((_QWORD)v374)
      {
        *((_QWORD *)&v374 + 1) = v374;
        operator delete((void *)v374);
      }
      v14 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
      if (__str.__r_.__value_.__r.__words[2])
      {
        v15 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      if (v8 == 4)
        __asm { BR              X11 }
      v9 = 0;
    }
  }
  else
  {
    v9 = (int)nitro::flexible_type_converter<int>::get((uint64_t)&__str, (unsigned __int8 *)a2);
  }
  v365 = 0;
  v366 = 0;
  v367 = 0;
  v17 = v370[0];
  v18 = (char *)v370[1] - (char *)v370[0];
  if ((char *)v370[1] - (char *)v370[0] < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v19 = (char *)operator new((char *)v370[1] - (char *)v370[0]);
  v20 = &v19[8 * (v18 >> 3)];
  v365 = v19;
  v367 = v20;
  memcpy(v19, v17, v18);
  v21 = (unint64_t *)&v19[8 * v9];
  v24 = *v21;
  v22 = v21 + 1;
  v23 = v24;
  v25 = v20 - v22;
  if (v20 != v22)
    memmove(&v19[8 * v9], v22, v20 - v22);
  v366 = &v19[8 * v9 + v25];
  v26 = 8 * v9 + v25;
  if (!v26)
  {
    switch(v368[0])
    {
      case 3:
        nitro::ndarray<int>::ndarray((uint64_t)&__str, (uint64_t)v368);
        if (v23)
        {
          v32 = v375;
          v33 = (_DWORD *)(__str.__r_.__value_.__r.__words[0] + 4 * v377);
          v34 = 1;
          v35 = 1;
          do
          {
            v35 *= *v33;
            if (v34 >= v23)
              break;
            ++v34;
            v33 += *(_QWORD *)v375;
          }
          while (v35);
        }
        else
        {
          v35 = 1;
          v32 = v375;
        }
        if (v32)
        {
          v376[0] = v32;
          operator delete(v32);
        }
        if (__str.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)&v374 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          operator delete((void *)__str.__r_.__value_.__r.__words[2]);
        }
        v348 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (!__str.__r_.__value_.__l.__size_)
          goto LABEL_434;
        v352 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v350 = __ldaxr(v352);
        while (__stlxr(v350 - 1, v352));
        break;
      case 5:
        nitro::ndarray<unsigned char>::ndarray((uint64_t)&__str, (uint64_t)v368);
        if (v23)
        {
          v62 = v375;
          v63 = (unsigned __int8 *)(__str.__r_.__value_.__r.__words[0] + v377);
          v64 = 1;
          v35 = 1;
          do
          {
            v35 *= *v63;
            if (v64 >= v23)
              break;
            ++v64;
            v63 += *(_QWORD *)v375;
          }
          while (v35);
        }
        else
        {
          v35 = 1;
          v62 = v375;
        }
        if (v62)
        {
          v376[0] = v62;
          operator delete(v62);
        }
        if (__str.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)&v374 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          operator delete((void *)__str.__r_.__value_.__r.__words[2]);
        }
        v348 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (!__str.__r_.__value_.__l.__size_)
          goto LABEL_434;
        v353 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v350 = __ldaxr(v353);
        while (__stlxr(v350 - 1, v353));
        break;
      case 9:
        nitro::ndarray<float>::ndarray((uint64_t)&__str, (uint64_t)v368);
        if (v23)
        {
          v51 = v375;
          v52 = (float *)(__str.__r_.__value_.__r.__words[0] + 4 * v377);
          v53 = 1;
          v35 = 1;
          do
          {
            v35 = (int)(float)(*v52 * (float)v35);
            if (v53 >= v23)
              break;
            ++v53;
            v52 += *(_QWORD *)v375;
          }
          while (v35);
        }
        else
        {
          v35 = 1;
          v51 = v375;
        }
        if (v51)
        {
          v376[0] = v51;
          operator delete(v51);
        }
        if (__str.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)&v374 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          operator delete((void *)__str.__r_.__value_.__r.__words[2]);
        }
        v348 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (!__str.__r_.__value_.__l.__size_)
          goto LABEL_434;
        v349 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v350 = __ldaxr(v349);
        while (__stlxr(v350 - 1, v349));
        break;
      case 0xB:
        nitro::ndarray<half>::ndarray((uint64_t)&__str, (uint64_t)v368);
        if (v23)
        {
          v54 = v375;
          v55 = (__int16 *)(__str.__r_.__value_.__r.__words[0] + 2 * v377);
          v56 = 1;
          v35 = 1;
          do
          {
            _H0 = *v55;
            __asm { FCVT            S0, H0 }
            v35 = (int)(float)((float)v35 * _S0);
            if (v56 >= v23)
              break;
            ++v56;
            v55 += *(_QWORD *)v375;
          }
          while (v35);
        }
        else
        {
          v35 = 1;
          v54 = v375;
        }
        if (v54)
        {
          v376[0] = v54;
          operator delete(v54);
        }
        if (__str.__r_.__value_.__r.__words[2])
        {
          *(_QWORD *)&v374 = *((_QWORD *)&__str.__r_.__value_.__l + 2);
          operator delete((void *)__str.__r_.__value_.__r.__words[2]);
        }
        v348 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (!__str.__r_.__value_.__l.__size_)
          goto LABEL_434;
        v351 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
        do
          v350 = __ldaxr(v351);
        while (__stlxr(v350 - 1, v351));
        break;
      default:
        printf("%d\n", v368[0]);
        nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
    }
    if (!v350)
    {
      ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
      std::__shared_weak_count::__release_weak(v348);
    }
LABEL_434:
    *(_BYTE *)(a4 + 8) = 0;
    *(_QWORD *)a4 = v35;
    v344 = v365;
    if (v365)
      goto LABEL_387;
    goto LABEL_388;
  }
  v361 = 0;
  v362 = 0;
  v360 = 0;
  if (v26 < 0)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  v360 = operator new(v26);
  v362 = (char *)v360 + 8 * (v26 >> 3);
  memcpy(v360, v19, v26);
  v361 = v362;
  v363 = v9;
  v364 = v23;
  switch(v368[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&__p, (uint64_t)v368);
      v27 = v382 - (_BYTE *)v381;
      v28 = (v382 - (_BYTE *)v381) >> 3;
      v396 = 0;
      v397 = 0;
      v395 = 0;
      v29 = v28 - 1;
      if (v28 == 1)
      {
        v31 = 0;
        v30 = 0;
      }
      else
      {
        if (v29 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v30 = (char *)operator new(8 * v29);
        v31 = &v30[8 * v29];
        v395 = v30;
        v397 = v31;
        bzero(v30, (v27 & 0xFFFFFFFFFFFFFFF8) - 8);
        v396 = v31;
      }
      nitro::ndarray<int>::init_from_shape((uint64_t **)&v360, &v390);
      v132 = v31 - v30;
      v133 = (v31 - v30) >> 3;
      if (v133 <= 1)
        v134 = 1;
      else
        v134 = (v31 - v30) >> 3;
      while (1)
      {
        v387 = 0;
        v388 = 0;
        v389 = 0;
        if (v31 == v30)
        {
          v135 = 0;
        }
        else
        {
          if ((v132 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v135 = (char *)operator new(v31 - v30);
          v387 = v135;
          v389 = &v135[8 * v133];
          memcpy(v135, v30, v31 - v30);
          v388 = &v135[8 * v133];
        }
        v386 = 0;
        std::vector<unsigned long>::insert(&v387, (uint64_t)&v135[8 * v363], &v386);
        if (v31 == v30)
        {
          v136 = 0;
          goto LABEL_160;
        }
        if (v134 < 2)
          break;
        v138 = 0;
        v139 = 0;
        v140 = v392 + 8;
        v142 = v30 + 8;
        v141 = v134 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v138 += *(v140 - 1) * *(v142 - 1);
          v139 += *v140 * *v142;
          v142 += 2;
          v140 += 2;
          v141 -= 2;
        }
        while (v141);
        v136 = v139 + v138;
        v137 = v134 & 0xFFFFFFFFFFFFFFFELL;
        if (v134 != (v134 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_158;
LABEL_160:
        v150 = v387;
        v151 = v388;
        v152 = v388 - v387;
        if (v388 == v387)
        {
          v154 = 0;
          goto LABEL_172;
        }
        if ((unint64_t)(v152 >> 3) <= 1)
          v153 = 1;
        else
          v153 = v152 >> 3;
        if (v153 < 2)
        {
          v154 = 0;
          v155 = 0;
LABEL_170:
          v161 = v153 - v155;
          v162 = 8 * v155;
          v163 = (uint64_t *)((char *)v383 + v162);
          v164 = &v387[v162];
          do
          {
            v166 = *(_QWORD *)v164;
            v164 += 8;
            v165 = v166;
            v167 = *v163++;
            v154 += v167 * v165;
            --v161;
          }
          while (v161);
          goto LABEL_172;
        }
        v156 = 0;
        v157 = 0;
        v155 = v153 & 0xFFFFFFFFFFFFFFFELL;
        v158 = v387 + 8;
        v159 = (char *)v383 + 8;
        v160 = v153 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v156 += *(v159 - 1) * *((_QWORD *)v158 - 1);
          v157 += *v159 * *(_QWORD *)v158;
          v158 += 16;
          v159 += 2;
          v160 -= 2;
        }
        while (v160);
        v154 = v157 + v156;
        if (v153 != v155)
          goto LABEL_170;
LABEL_172:
        if (v364)
        {
          v168 = 0;
          v169 = v152 >> 3;
          if (v169 <= 1)
            v169 = 1;
          v170 = __p;
          v171 = (char *)v383;
          v172 = (char *)v383 + 8;
          v173 = 1;
          while (1)
          {
            v175 = v170[v385 + v154];
            ++*(_QWORD *)&v150[8 * v363];
            if (v151 == v150)
            {
              v154 = 0;
              goto LABEL_177;
            }
            if (v169 < 2)
              break;
            v177 = 0;
            v178 = 0;
            v179 = v169 & 0xFFFFFFFFFFFFFFFELL;
            v180 = v172;
            v181 = v150 + 8;
            do
            {
              v177 += *(v180 - 1) * *(v181 - 1);
              v178 += *v180 * *v181;
              v181 += 2;
              v180 += 2;
              v179 -= 2;
            }
            while (v179);
            v154 = v178 + v177;
            v176 = v169 & 0xFFFFFFFFFFFFFFFELL;
            if (v169 != (v169 & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_187;
LABEL_177:
            v173 *= v175;
            if (++v168 >= v364 || v173 == 0)
            {
              *(_DWORD *)(v390.__r_.__value_.__r.__words[0] + 4 * (v394 + v136)) = v173;
              goto LABEL_192;
            }
          }
          v154 = 0;
          v176 = 0;
LABEL_187:
          v182 = v169 - v176;
          v183 = 8 * v176;
          v184 = &v171[8 * v176];
          v185 = &v150[v183];
          do
          {
            v187 = *(_QWORD *)v185;
            v185 += 8;
            v186 = v187;
            v188 = *(_QWORD *)v184;
            v184 += 8;
            v154 += v188 * v186;
            --v182;
          }
          while (v182);
          goto LABEL_177;
        }
        *(_DWORD *)(v390.__r_.__value_.__r.__words[0] + 4 * (v394 + v136)) = 1;
        if (v150)
        {
LABEL_192:
          v388 = v150;
          operator delete(v150);
        }
        if ((int)(v132 >> 3) >= 1)
        {
          v189 = v390.__r_.__value_.__r.__words[2];
          v190 = (v132 >> 3) + 1;
          v191 = v132 >> 3;
          while (1)
          {
            v192 = 8 * (v190 - 2);
            v193 = *(_QWORD *)&v30[v192] + 1;
            *(_QWORD *)&v30[v192] = v193;
            if (v193 < *(_QWORD *)(v189 + v192))
              break;
            *(_QWORD *)&v30[8 * (v190 - 2)] = 0;
            LODWORD(v191) = v191 - 1;
            if ((unint64_t)--v190 <= 1)
              goto LABEL_199;
          }
          if ((int)v191 >= 1)
            continue;
        }
LABEL_199:
        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__str, &v390);
        if (v392)
        {
          v393 = v392;
          operator delete(v392);
        }
        if (v390.__r_.__value_.__r.__words[2])
        {
          v391 = v390.__r_.__value_.__r.__words[2];
          operator delete((void *)v390.__r_.__value_.__r.__words[2]);
        }
        v194 = (std::__shared_weak_count *)v390.__r_.__value_.__l.__size_;
        if (v390.__r_.__value_.__l.__size_)
        {
          v195 = (unint64_t *)(v390.__r_.__value_.__l.__size_ + 8);
          do
            v196 = __ldaxr(v195);
          while (__stlxr(v196 - 1, v195));
          if (!v196)
          {
            ((void (*)(std::__shared_weak_count *))v194->__on_zero_shared)(v194);
            std::__shared_weak_count::__release_weak(v194);
          }
        }
        if (v395)
          operator delete(v395);
        if (v383)
        {
          v384 = v383;
          operator delete(v383);
        }
        if (v381)
        {
          v382 = v381;
          operator delete(v381);
        }
        v129 = v380;
        if (v380)
        {
          p_shared_owners = (unint64_t *)&v380->__shared_owners_;
          do
            v131 = __ldaxr(p_shared_owners);
          while (__stlxr(v131 - 1, p_shared_owners));
LABEL_366:
          if (!v131)
          {
            ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
            std::__shared_weak_count::__release_weak(v129);
          }
        }
        goto LABEL_368;
      }
      v136 = 0;
      v137 = 0;
LABEL_158:
      v143 = v134 - v137;
      v144 = 8 * v137;
      v145 = &v392[v144];
      v146 = (uint64_t *)&v30[v144];
      do
      {
        v148 = *v146++;
        v147 = v148;
        v149 = *(_QWORD *)v145;
        v145 += 8;
        v136 += v149 * v147;
        --v143;
      }
      while (v143);
      goto LABEL_160;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&__p, (uint64_t)v368);
      v41 = v382 - (_BYTE *)v381;
      v42 = (v382 - (_BYTE *)v381) >> 3;
      v396 = 0;
      v397 = 0;
      v395 = 0;
      v43 = v42 - 1;
      if (v42 == 1)
      {
        v45 = 0;
        v44 = 0;
      }
      else
      {
        if (v43 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v44 = (char *)operator new(8 * v43);
        v45 = &v44[8 * v43];
        v395 = v44;
        v397 = v45;
        bzero(v44, (v41 & 0xFFFFFFFFFFFFFFF8) - 8);
        v396 = v45;
      }
      nitro::ndarray<unsigned char>::init_from_shape((uint64_t **)&v360, &v390);
      v198 = v45 - v44;
      v199 = (v45 - v44) >> 3;
      if (v199 <= 1)
        v200 = 1;
      else
        v200 = (v45 - v44) >> 3;
      do
      {
        v387 = 0;
        v388 = 0;
        v389 = 0;
        if (v45 == v44)
        {
          v201 = 0;
        }
        else
        {
          if ((v198 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v201 = (char *)operator new(v45 - v44);
          v387 = v201;
          v389 = &v201[8 * v199];
          memcpy(v201, v44, v45 - v44);
          v388 = &v201[8 * v199];
        }
        v386 = 0;
        std::vector<unsigned long>::insert(&v387, (uint64_t)&v201[8 * v363], &v386);
        if (v45 == v44)
        {
          v202 = 0;
          goto LABEL_235;
        }
        if (v200 < 2)
        {
          v202 = 0;
          v203 = 0;
LABEL_233:
          v209 = v200 - v203;
          v210 = 8 * v203;
          v211 = &v392[v210];
          v212 = (uint64_t *)&v44[v210];
          do
          {
            v214 = *v212++;
            v213 = v214;
            v215 = *(_QWORD *)v211;
            v211 += 8;
            v202 += v215 * v213;
            --v209;
          }
          while (v209);
          goto LABEL_235;
        }
        v204 = 0;
        v205 = 0;
        v206 = v392 + 8;
        v208 = v44 + 8;
        v207 = v200 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v204 += *(v206 - 1) * *(v208 - 1);
          v205 += *v206 * *v208;
          v208 += 2;
          v206 += 2;
          v207 -= 2;
        }
        while (v207);
        v202 = v205 + v204;
        v203 = v200 & 0xFFFFFFFFFFFFFFFELL;
        if (v200 != (v200 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_233;
LABEL_235:
        v217 = v387;
        v216 = v388;
        v218 = v388 - v387;
        if (v388 == v387)
        {
          v220 = 0;
          goto LABEL_247;
        }
        if ((unint64_t)(v218 >> 3) <= 1)
          v219 = 1;
        else
          v219 = v218 >> 3;
        if (v219 < 2)
        {
          v220 = 0;
          v221 = 0;
LABEL_245:
          v227 = v219 - v221;
          v228 = 8 * v221;
          v229 = (uint64_t *)((char *)v383 + v228);
          v230 = &v387[v228];
          do
          {
            v232 = *(_QWORD *)v230;
            v230 += 8;
            v231 = v232;
            v233 = *v229++;
            v220 += v233 * v231;
            --v227;
          }
          while (v227);
          goto LABEL_247;
        }
        v222 = 0;
        v223 = 0;
        v221 = v219 & 0xFFFFFFFFFFFFFFFELL;
        v224 = v387 + 8;
        v225 = (char *)v383 + 8;
        v226 = v219 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v222 += *(v225 - 1) * *((_QWORD *)v224 - 1);
          v223 += *v225 * *(_QWORD *)v224;
          v224 += 16;
          v225 += 2;
          v226 -= 2;
        }
        while (v226);
        v220 = v223 + v222;
        if (v219 != v221)
          goto LABEL_245;
LABEL_247:
        if (v364)
        {
          v234 = 0;
          v235 = v218 >> 3;
          if (v235 <= 1)
            v236 = 1;
          else
            v236 = v235;
          v237 = (unsigned __int8 *)__p;
          v238 = (char *)v383;
          v239 = (char *)v383 + 8;
          v240 = 1;
          while (1)
          {
            v242 = v237[v385 + v220];
            ++*(_QWORD *)&v217[8 * v363];
            if (v216 == v217)
            {
              v220 = 0;
              goto LABEL_253;
            }
            if (v236 < 2)
              break;
            v244 = 0;
            v245 = 0;
            v246 = v236 & 0xFFFFFFFFFFFFFFFELL;
            v247 = v239;
            v248 = v217 + 8;
            do
            {
              v244 += *(v247 - 1) * *(v248 - 1);
              v245 += *v247 * *v248;
              v248 += 2;
              v247 += 2;
              v246 -= 2;
            }
            while (v246);
            v220 = v245 + v244;
            v243 = v236 & 0xFFFFFFFFFFFFFFFELL;
            if (v236 != (v236 & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_263;
LABEL_253:
            v240 *= v242;
            if (++v234 >= v364 || v240 == 0)
              goto LABEL_267;
          }
          v220 = 0;
          v243 = 0;
LABEL_263:
          v249 = v236 - v243;
          v250 = 8 * v243;
          v251 = &v238[8 * v243];
          v252 = &v217[v250];
          do
          {
            v254 = *(_QWORD *)v252;
            v252 += 8;
            v253 = v254;
            v255 = *(_QWORD *)v251;
            v251 += 8;
            v220 += v255 * v253;
            --v249;
          }
          while (v249);
          goto LABEL_253;
        }
        LOBYTE(v240) = 1;
LABEL_267:
        *(_BYTE *)(v390.__r_.__value_.__r.__words[0] + v394 + v202) = v240;
        if (v387)
        {
          v388 = v387;
          operator delete(v387);
        }
        if ((int)(v198 >> 3) < 1)
          break;
        v256 = v390.__r_.__value_.__r.__words[2];
        v257 = (v198 >> 3) + 1;
        v258 = v198 >> 3;
        while (1)
        {
          v259 = 8 * (v257 - 2);
          v260 = *(_QWORD *)&v44[v259] + 1;
          *(_QWORD *)&v44[v259] = v260;
          if (v260 < *(_QWORD *)(v256 + v259))
            break;
          *(_QWORD *)&v44[8 * (v257 - 2)] = 0;
          LODWORD(v258) = v258 - 1;
          if ((unint64_t)--v257 <= 1)
            goto LABEL_275;
        }
      }
      while ((int)v258 >= 1);
LABEL_275:
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__str, &v390);
      if (v392)
      {
        v393 = v392;
        operator delete(v392);
      }
      if (v390.__r_.__value_.__r.__words[2])
      {
        v391 = v390.__r_.__value_.__r.__words[2];
        operator delete((void *)v390.__r_.__value_.__r.__words[2]);
      }
      v261 = (std::__shared_weak_count *)v390.__r_.__value_.__l.__size_;
      if (v390.__r_.__value_.__l.__size_)
      {
        v262 = (unint64_t *)(v390.__r_.__value_.__l.__size_ + 8);
        do
          v263 = __ldaxr(v262);
        while (__stlxr(v263 - 1, v262));
        if (!v263)
        {
          ((void (*)(std::__shared_weak_count *))v261->__on_zero_shared)(v261);
          std::__shared_weak_count::__release_weak(v261);
        }
      }
      if (v395)
        operator delete(v395);
      if (v383)
      {
        v384 = v383;
        operator delete(v383);
      }
      if (v381)
      {
        v382 = v381;
        operator delete(v381);
      }
      v129 = v380;
      if (v380)
      {
        v264 = (unint64_t *)&v380->__shared_owners_;
        do
          v131 = __ldaxr(v264);
        while (__stlxr(v131 - 1, v264));
        goto LABEL_366;
      }
LABEL_368:
      *(_QWORD *)a4 = 0;
      *(_BYTE *)(a4 + 8) = 9;
      v332 = operator new();
      *(_QWORD *)v332 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v332 + 8));
      *(_QWORD *)a4 = v332;
      *(_QWORD *)v332 = 1;
      *(_DWORD *)(v332 + 8) = __str.__r_.__value_.__l.__data_;
      v333 = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0uLL;
      v334 = *(std::__shared_weak_count **)(v332 + 24);
      *(_OWORD *)(v332 + 16) = v333;
      if (v334)
      {
        v335 = (unint64_t *)&v334->__shared_owners_;
        do
          v336 = __ldaxr(v335);
        while (__stlxr(v336 - 1, v335));
        if (!v336)
        {
          ((void (*)(std::__shared_weak_count *))v334->__on_zero_shared)(v334);
          std::__shared_weak_count::__release_weak(v334);
        }
      }
      v337 = *(void **)(v332 + 32);
      if (v337)
      {
        *(_QWORD *)(v332 + 40) = v337;
        operator delete(v337);
        *(_QWORD *)(v332 + 32) = 0;
        *(_QWORD *)(v332 + 40) = 0;
        *(_QWORD *)(v332 + 48) = 0;
      }
      v338 = *(void **)(v332 + 56);
      *(_OWORD *)(v332 + 32) = v374;
      *(_QWORD *)(v332 + 48) = v375;
      v375 = 0;
      v374 = 0uLL;
      if (v338)
      {
        *(_QWORD *)(v332 + 64) = v338;
        operator delete(v338);
        *(_QWORD *)(v332 + 56) = 0;
        *(_QWORD *)(v332 + 64) = 0;
        *(_QWORD *)(v332 + 72) = 0;
        v338 = (void *)v374;
      }
      *(_OWORD *)(v332 + 56) = *(_OWORD *)v376;
      v339 = v377;
      v340 = v378;
      v376[1] = 0;
      v377 = 0;
      v376[0] = 0;
      *(_QWORD *)(v332 + 72) = v339;
      *(_QWORD *)(v332 + 80) = v340;
      if (v338)
      {
        *((_QWORD *)&v374 + 1) = v338;
        operator delete(v338);
      }
      v341 = (std::__shared_weak_count *)__str.__r_.__value_.__r.__words[2];
      if (__str.__r_.__value_.__r.__words[2])
      {
        v342 = (unint64_t *)(__str.__r_.__value_.__r.__words[2] + 8);
        do
          v343 = __ldaxr(v342);
        while (__stlxr(v343 - 1, v342));
        if (!v343)
        {
          ((void (*)(std::__shared_weak_count *))v341->__on_zero_shared)(v341);
          std::__shared_weak_count::__release_weak(v341);
        }
      }
      if (v360)
      {
        v361 = v360;
        operator delete(v360);
      }
      v344 = v365;
      if (v365)
LABEL_387:
        operator delete(v344);
LABEL_388:
      if (v371)
      {
        v372 = v371;
        operator delete(v371);
      }
      if (v370[0])
      {
        v370[1] = v370[0];
        operator delete(v370[0]);
      }
      v345 = v369;
      if (v369)
      {
        v346 = (unint64_t *)&v369->__shared_owners_;
        do
          v347 = __ldaxr(v346);
        while (__stlxr(v347 - 1, v346));
        if (!v347)
        {
          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
          std::__shared_weak_count::__release_weak(v345);
        }
      }
      return;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&__p, (uint64_t)v368);
      v36 = v382 - (_BYTE *)v381;
      v37 = (v382 - (_BYTE *)v381) >> 3;
      v396 = 0;
      v397 = 0;
      v395 = 0;
      v38 = v37 - 1;
      if (v37 == 1)
      {
        v40 = 0;
        v39 = 0;
      }
      else
      {
        if (v38 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v39 = (char *)operator new(8 * v38);
        v40 = &v39[8 * v38];
        v395 = v39;
        v397 = v40;
        bzero(v39, (v36 & 0xFFFFFFFFFFFFFFF8) - 8);
        v396 = v40;
      }
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v360, &v390);
      v65 = v40 - v39;
      v66 = (v40 - v39) >> 3;
      if (v66 <= 1)
        v67 = 1;
      else
        v67 = (v40 - v39) >> 3;
      while (1)
      {
        v387 = 0;
        v388 = 0;
        v389 = 0;
        if (v40 == v39)
        {
          v68 = 0;
        }
        else
        {
          if ((v65 & 0x8000000000000000) != 0)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          v68 = (char *)operator new(v40 - v39);
          v387 = v68;
          v389 = &v68[8 * v66];
          memcpy(v68, v39, v40 - v39);
          v388 = &v68[8 * v66];
        }
        v386 = 0;
        std::vector<unsigned long>::insert(&v387, (uint64_t)&v68[8 * v363], &v386);
        if (v40 == v39)
        {
          v69 = 0;
          goto LABEL_88;
        }
        if (v67 < 2)
          break;
        v71 = 0;
        v72 = 0;
        v73 = v392 + 8;
        v75 = v39 + 8;
        v74 = v67 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v71 += *(v73 - 1) * *(v75 - 1);
          v72 += *v73 * *v75;
          v75 += 2;
          v73 += 2;
          v74 -= 2;
        }
        while (v74);
        v69 = v72 + v71;
        v70 = v67 & 0xFFFFFFFFFFFFFFFELL;
        if (v67 != (v67 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_86;
LABEL_88:
        v83 = v387;
        v84 = v388;
        v85 = v388 - v387;
        if (v388 == v387)
        {
          v87 = 0;
          goto LABEL_100;
        }
        if ((unint64_t)(v85 >> 3) <= 1)
          v86 = 1;
        else
          v86 = v85 >> 3;
        if (v86 < 2)
        {
          v87 = 0;
          v88 = 0;
LABEL_98:
          v94 = v86 - v88;
          v95 = 8 * v88;
          v96 = (uint64_t *)((char *)v383 + v95);
          v97 = &v387[v95];
          do
          {
            v99 = *(_QWORD *)v97;
            v97 += 8;
            v98 = v99;
            v100 = *v96++;
            v87 += v100 * v98;
            --v94;
          }
          while (v94);
          goto LABEL_100;
        }
        v89 = 0;
        v90 = 0;
        v88 = v86 & 0xFFFFFFFFFFFFFFFELL;
        v91 = v387 + 8;
        v92 = (char *)v383 + 8;
        v93 = v86 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v89 += *(v92 - 1) * *((_QWORD *)v91 - 1);
          v90 += *v92 * *(_QWORD *)v91;
          v91 += 16;
          v92 += 2;
          v93 -= 2;
        }
        while (v93);
        v87 = v90 + v89;
        if (v86 != v88)
          goto LABEL_98;
LABEL_100:
        if (v364)
        {
          v101 = 0;
          v102 = v85 >> 3;
          if (v102 <= 1)
            v102 = 1;
          v103 = (float *)__p;
          v104 = (char *)v383;
          v105 = (char *)v383 + 8;
          v106 = 1;
          while (1)
          {
            v107 = v103[v385 + v87];
            ++*(_QWORD *)&v83[8 * v363];
            if (v84 == v83)
            {
              v87 = 0;
            }
            else
            {
              if (v102 >= 2)
              {
                v109 = 0;
                v110 = 0;
                v111 = v102 & 0xFFFFFFFFFFFFFFFELL;
                v112 = v105;
                v113 = v83 + 8;
                do
                {
                  v109 += *(v112 - 1) * *(v113 - 1);
                  v110 += *v112 * *v113;
                  v113 += 2;
                  v112 += 2;
                  v111 -= 2;
                }
                while (v111);
                v87 = v110 + v109;
                v108 = v102 & 0xFFFFFFFFFFFFFFFELL;
                if (v102 == (v102 & 0xFFFFFFFFFFFFFFFELL))
                  goto LABEL_113;
              }
              else
              {
                v87 = 0;
                v108 = 0;
              }
              v114 = v102 - v108;
              v115 = 8 * v108;
              v116 = &v104[8 * v108];
              v117 = &v83[v115];
              do
              {
                v119 = *(_QWORD *)v117;
                v117 += 8;
                v118 = v119;
                v120 = *(_QWORD *)v116;
                v116 += 8;
                v87 += v120 * v118;
                --v114;
              }
              while (v114);
            }
LABEL_113:
            v106 = (int)(float)(v107 * (float)v106);
            if (++v101 >= v364 || !v106)
            {
              *(float *)(v390.__r_.__value_.__r.__words[0] + 4 * (v394 + v69)) = (float)v106;
              goto LABEL_117;
            }
          }
        }
        *(_DWORD *)(v390.__r_.__value_.__r.__words[0] + 4 * (v394 + v69)) = 1065353216;
        if (v83)
        {
LABEL_117:
          v388 = v83;
          operator delete(v83);
        }
        if ((int)(v65 >> 3) >= 1)
        {
          v121 = v390.__r_.__value_.__r.__words[2];
          v122 = (v65 >> 3) + 1;
          v123 = v65 >> 3;
          while (1)
          {
            v124 = 8 * (v122 - 2);
            v125 = *(_QWORD *)&v39[v124] + 1;
            *(_QWORD *)&v39[v124] = v125;
            if (v125 < *(_QWORD *)(v121 + v124))
              break;
            *(_QWORD *)&v39[8 * (v122 - 2)] = 0;
            LODWORD(v123) = v123 - 1;
            if ((unint64_t)--v122 <= 1)
              goto LABEL_124;
          }
          if ((int)v123 >= 1)
            continue;
        }
LABEL_124:
        nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__str, &v390);
        if (v392)
        {
          v393 = v392;
          operator delete(v392);
        }
        if (v390.__r_.__value_.__r.__words[2])
        {
          v391 = v390.__r_.__value_.__r.__words[2];
          operator delete((void *)v390.__r_.__value_.__r.__words[2]);
        }
        v126 = (std::__shared_weak_count *)v390.__r_.__value_.__l.__size_;
        if (v390.__r_.__value_.__l.__size_)
        {
          v127 = (unint64_t *)(v390.__r_.__value_.__l.__size_ + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        if (v395)
          operator delete(v395);
        if (v383)
        {
          v384 = v383;
          operator delete(v383);
        }
        if (v381)
        {
          v382 = v381;
          operator delete(v381);
        }
        v129 = v380;
        if (v380)
        {
          v130 = (unint64_t *)&v380->__shared_owners_;
          do
            v131 = __ldaxr(v130);
          while (__stlxr(v131 - 1, v130));
          goto LABEL_366;
        }
        goto LABEL_368;
      }
      v69 = 0;
      v70 = 0;
LABEL_86:
      v76 = v67 - v70;
      v77 = 8 * v70;
      v78 = &v392[v77];
      v79 = (uint64_t *)&v39[v77];
      do
      {
        v81 = *v79++;
        v80 = v81;
        v82 = *(_QWORD *)v78;
        v78 += 8;
        v69 += v82 * v80;
        --v76;
      }
      while (v76);
      goto LABEL_88;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&__p, (uint64_t)v368);
      v46 = v382 - (_BYTE *)v381;
      v47 = (v382 - (_BYTE *)v381) >> 3;
      v396 = 0;
      v397 = 0;
      v395 = 0;
      v48 = v47 - 1;
      if (v47 == 1)
      {
        v50 = 0;
        v49 = 0;
      }
      else
      {
        if (v48 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v49 = (char *)operator new(8 * v48);
        v50 = &v49[8 * v48];
        v395 = v49;
        v397 = v50;
        bzero(v49, (v46 & 0xFFFFFFFFFFFFFFF8) - 8);
        v396 = v50;
      }
      nitro::ndarray<half>::init_from_shape((uint64_t **)&v360, &v390);
      v265 = v50 - v49;
      v266 = (v50 - v49) >> 3;
      if (v266 <= 1)
        v267 = 1;
      else
        v267 = (v50 - v49) >> 3;
      break;
    default:
      printf("%d\n", v368[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()();
  }
  while (1)
  {
    v387 = 0;
    v388 = 0;
    v389 = 0;
    if (v50 == v49)
    {
      v268 = 0;
    }
    else
    {
      if ((v265 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v268 = (char *)operator new(v50 - v49);
      v387 = v268;
      v389 = &v268[8 * v266];
      memcpy(v268, v49, v50 - v49);
      v388 = &v268[8 * v266];
    }
    v386 = 0;
    std::vector<unsigned long>::insert(&v387, (uint64_t)&v268[8 * v363], &v386);
    if (v50 == v49)
    {
      v269 = 0;
      goto LABEL_311;
    }
    if (v267 < 2)
      break;
    v271 = 0;
    v272 = 0;
    v273 = v392 + 8;
    v275 = v49 + 8;
    v274 = v267 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v271 += *(v273 - 1) * *(v275 - 1);
      v272 += *v273 * *v275;
      v275 += 2;
      v273 += 2;
      v274 -= 2;
    }
    while (v274);
    v269 = v272 + v271;
    v270 = v267 & 0xFFFFFFFFFFFFFFFELL;
    if (v267 != (v267 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_309;
LABEL_311:
    v283 = v387;
    v284 = v388;
    v285 = v388 - v387;
    if (v388 == v387)
    {
      v287 = 0;
      goto LABEL_323;
    }
    if ((unint64_t)(v285 >> 3) <= 1)
      v286 = 1;
    else
      v286 = v285 >> 3;
    if (v286 < 2)
    {
      v287 = 0;
      v288 = 0;
LABEL_321:
      v294 = v286 - v288;
      v295 = 8 * v288;
      v296 = (uint64_t *)((char *)v383 + v295);
      v297 = &v387[v295];
      do
      {
        v299 = *(_QWORD *)v297;
        v297 += 8;
        v298 = v299;
        v300 = *v296++;
        v287 += v300 * v298;
        --v294;
      }
      while (v294);
      goto LABEL_323;
    }
    v289 = 0;
    v290 = 0;
    v288 = v286 & 0xFFFFFFFFFFFFFFFELL;
    v291 = v387 + 8;
    v292 = (char *)v383 + 8;
    v293 = v286 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      v289 += *(v292 - 1) * *((_QWORD *)v291 - 1);
      v290 += *v292 * *(_QWORD *)v291;
      v291 += 16;
      v292 += 2;
      v293 -= 2;
    }
    while (v293);
    v287 = v290 + v289;
    if (v286 != v288)
      goto LABEL_321;
LABEL_323:
    if (v364)
    {
      v301 = 0;
      v302 = v285 >> 3;
      if (v302 <= 1)
        v302 = 1;
      v303 = __p;
      v304 = (char *)v383;
      v305 = (char *)v383 + 8;
      v306 = 1;
      while (1)
      {
        _H0 = v303[v385 + v287];
        ++*(_QWORD *)&v283[8 * v363];
        if (v284 == v283)
        {
          v287 = 0;
        }
        else
        {
          if (v302 >= 2)
          {
            v309 = 0;
            v310 = 0;
            v311 = v302 & 0xFFFFFFFFFFFFFFFELL;
            v312 = v305;
            v313 = v283 + 8;
            do
            {
              v309 += *(v312 - 1) * *(v313 - 1);
              v310 += *v312 * *v313;
              v313 += 2;
              v312 += 2;
              v311 -= 2;
            }
            while (v311);
            v287 = v310 + v309;
            v308 = v302 & 0xFFFFFFFFFFFFFFFELL;
            if (v302 == (v302 & 0xFFFFFFFFFFFFFFFELL))
              goto LABEL_336;
          }
          else
          {
            v287 = 0;
            v308 = 0;
          }
          v314 = v302 - v308;
          v315 = 8 * v308;
          v316 = &v304[8 * v308];
          v317 = &v283[v315];
          do
          {
            v319 = *(_QWORD *)v317;
            v317 += 8;
            v318 = v319;
            v320 = *(_QWORD *)v316;
            v316 += 8;
            v287 += v320 * v318;
            --v314;
          }
          while (v314);
        }
LABEL_336:
        __asm { FCVT            S0, H0 }
        v306 = (int)(float)((float)v306 * _S0);
        if (++v301 >= v364 || !v306)
          goto LABEL_340;
      }
    }
    v306 = 1;
LABEL_340:
    _S0 = (float)v306;
    __asm { FCVT            H0, S0 }
    *(_WORD *)(v390.__r_.__value_.__r.__words[0] + 2 * (v394 + v269)) = LOWORD(_S0);
    if (v283)
    {
      v388 = v283;
      operator delete(v283);
    }
    if ((int)(v265 >> 3) >= 1)
    {
      v323 = v390.__r_.__value_.__r.__words[2];
      v324 = (v265 >> 3) + 1;
      v325 = v265 >> 3;
      while (1)
      {
        v326 = 8 * (v324 - 2);
        v327 = *(_QWORD *)&v49[v326] + 1;
        *(_QWORD *)&v49[v326] = v327;
        if (v327 < *(_QWORD *)(v323 + v326))
          break;
        *(_QWORD *)&v49[8 * (v324 - 2)] = 0;
        LODWORD(v325) = v325 - 1;
        if ((unint64_t)--v324 <= 1)
          goto LABEL_348;
      }
      if ((int)v325 >= 1)
        continue;
    }
LABEL_348:
    nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__str, &v390);
    if (v392)
    {
      v393 = v392;
      operator delete(v392);
    }
    if (v390.__r_.__value_.__r.__words[2])
    {
      v391 = v390.__r_.__value_.__r.__words[2];
      operator delete((void *)v390.__r_.__value_.__r.__words[2]);
    }
    v328 = (std::__shared_weak_count *)v390.__r_.__value_.__l.__size_;
    if (v390.__r_.__value_.__l.__size_)
    {
      v329 = (unint64_t *)(v390.__r_.__value_.__l.__size_ + 8);
      do
        v330 = __ldaxr(v329);
      while (__stlxr(v330 - 1, v329));
      if (!v330)
      {
        ((void (*)(std::__shared_weak_count *))v328->__on_zero_shared)(v328);
        std::__shared_weak_count::__release_weak(v328);
      }
    }
    if (v395)
      operator delete(v395);
    if (v383)
    {
      v384 = v383;
      operator delete(v383);
    }
    if (v381)
    {
      v382 = v381;
      operator delete(v381);
    }
    v129 = v380;
    if (v380)
    {
      v331 = (unint64_t *)&v380->__shared_owners_;
      do
        v131 = __ldaxr(v331);
      while (__stlxr(v131 - 1, v331));
      goto LABEL_366;
    }
    goto LABEL_368;
  }
  v269 = 0;
  v270 = 0;
LABEL_309:
  v276 = v267 - v270;
  v277 = 8 * v270;
  v278 = &v392[v277];
  v279 = (uint64_t *)&v49[v277];
  do
  {
    v281 = *v279++;
    v280 = v281;
    v282 = *(_QWORD *)v278;
    v278 += 8;
    v269 += v282 * v280;
    --v276;
  }
  while (v276);
  goto LABEL_311;
}

void sub_19129B0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;

  if (a36 < 0)
    operator delete(__p);
  if (*(char *)(v47 - 169) < 0)
  {
    operator delete(*(void **)(v47 - 192));
    if ((v46 & 1) == 0)
    {
LABEL_8:
      nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

void sub_19129B41C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a18)
    JUMPOUT(0x19129B408);
  JUMPOUT(0x19129B40CLL);
}

void nitro::nitro_builtins::Pad(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, const nitro::flexible_type *a3@<X2>, const nitro::flexible_type *a4@<X3>, uint64_t a5@<X8>)
{
  float v7;
  uint64_t v8;
  const nitro::ndarray_container *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;
  void *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  int64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const float *v45;
  float32x4_t *v46;
  uint64_t v47;
  unint64_t v48;
  int64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  size_t v165;
  int64_t v166;
  char *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  const float *v171;
  _OWORD *v172;
  unint64_t v173;
  const float *v174;
  unsigned __int128 v175;
  unsigned __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  unint64_t v181;
  uint64_t v182;
  _QWORD *v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  _DWORD *v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  int *v234;
  _QWORD *v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  std::__shared_weak_count *v242;
  unint64_t *v243;
  unint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  _QWORD *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  size_t v270;
  int64_t v271;
  char *v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  const float *v276;
  _OWORD *v277;
  unint64_t v278;
  const float *v279;
  unsigned __int128 v280;
  unsigned __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  unint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  _DWORD *v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  char *v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  unint64_t v314;
  uint64_t v315;
  char *v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  unint64_t v325;
  _QWORD *v326;
  _QWORD *v327;
  unint64_t v328;
  uint64_t v329;
  char *v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v341;
  uint64_t v342;
  unint64_t v343;
  unint64_t v344;
  int *v345;
  _QWORD *v346;
  unint64_t v347;
  unint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  __int128 v374;
  int64_t v375;
  char *v376;
  uint64_t v377;
  char *v378;
  size_t v379;
  int64_t v380;
  char *v381;
  unint64_t v382;
  unint64_t v383;
  uint64_t v384;
  const float *v385;
  _OWORD *v386;
  unint64_t v387;
  const float *v388;
  unsigned __int128 v389;
  unsigned __int128 v390;
  __int128 v391;
  __int128 v392;
  __int128 v393;
  unint64_t v394;
  uint64_t v395;
  _QWORD *v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  _DWORD *v404;
  unint64_t v405;
  uint64_t v406;
  unint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  _QWORD *v420;
  _QWORD *v421;
  unint64_t v422;
  uint64_t v423;
  char *v424;
  uint64_t *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  uint64_t v432;
  unint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  unint64_t v436;
  uint64_t v437;
  char *v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  unint64_t v445;
  unint64_t v446;
  int *v447;
  _QWORD *v448;
  unint64_t v449;
  unint64_t v450;
  std::__shared_weak_count *v451;
  unint64_t *v452;
  unint64_t v453;
  unint64_t *v454;
  unint64_t v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  _QWORD *v466;
  _QWORD *v467;
  unint64_t v468;
  unint64_t v469;
  uint64_t v470;
  char *v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  int64_t v476;
  char *v477;
  uint64_t v478;
  char *v479;
  size_t v480;
  int64_t v481;
  char *v482;
  unint64_t v483;
  unint64_t v484;
  uint64_t v485;
  const float *v486;
  _OWORD *v487;
  unint64_t v488;
  const float *v489;
  unsigned __int128 v490;
  unsigned __int128 v491;
  __int128 v492;
  __int128 v493;
  __int128 v494;
  __int128 v495;
  unint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  char *v499;
  uint64_t v500;
  uint64_t v501;
  unint64_t v502;
  unint64_t v503;
  unint64_t v504;
  unint64_t v505;
  float *v506;
  unint64_t v507;
  uint64_t v508;
  unint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  char *v513;
  unint64_t v514;
  unint64_t v515;
  uint64_t v516;
  uint64_t v517;
  unint64_t v518;
  uint64_t v519;
  uint64_t v520;
  unint64_t v521;
  _QWORD *v522;
  _QWORD *v523;
  unint64_t v524;
  uint64_t v525;
  char *v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  unint64_t v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  _QWORD *v536;
  _QWORD *v537;
  unint64_t v538;
  uint64_t v539;
  char *v540;
  uint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  unint64_t v547;
  unint64_t v548;
  int *v549;
  _QWORD *v550;
  unint64_t v551;
  unint64_t v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  unint64_t *v556;
  _QWORD *v557;
  std::__shared_weak_count *v558;
  uint64_t v559;
  unint64_t *v560;
  unint64_t v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  char *v565;
  std::__shared_weak_count *v566;
  unint64_t *v567;
  unint64_t v568;
  std::__shared_weak_count *v569;
  unint64_t *v570;
  unint64_t v571;
  std::__shared_weak_count *v572;
  unint64_t *v573;
  unint64_t v574;
  char *v575;
  char *v576;
  char *v577;
  char *v578;
  char *v579;
  char *v580;
  char *v581;
  char *v582;
  uint64_t v583;
  char *v584;
  char *v585;
  char *v586;
  char *v587;
  char *v588;
  char *v589;
  char *v590;
  char *v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  void *v600;
  char *v601;
  char *v602;
  void *v603;
  char *v604;
  char *v605;
  float v606;
  void *v607;
  char *v608;
  char *v609;
  void *v610;
  char *v611;
  char *v612;
  void *v613;
  char *v614;
  char *v615;
  void *v616;
  char *v617;
  char *v618;
  void *v619;
  char *v620;
  char *v621;
  int v622;
  uint64_t v623;
  std::__shared_weak_count *v624;
  void *v625;
  char *v626;
  void *v627;
  char *v628;
  uint64_t v629;
  _DWORD v630[4];
  std::__shared_weak_count *v631;
  void *v632;
  _BYTE *v633;
  void *__p;
  _BYTE *v635;
  uint64_t v636;
  std::__shared_weak_count *v637;
  void *v638;
  void *v639;
  void *v640;
  void *v641;
  uint64_t v642;
  uint64_t v643;
  std::__shared_weak_count *v644;
  void *v645;
  void *v646;
  void *v647;
  void *v648;
  uint64_t v649;
  char *v650;
  uint64_t v651;
  char *v652;
  void *v653;
  std::__shared_weak_count *v654;
  char *v655;
  char *v656;
  char *v657;
  char *v658;
  uint64_t v659;
  float32x4x2_t v660;
  float32x4x2_t v661;

  if (*((_BYTE *)a3 + 8))
  {
    v7 = 0.0;
    if (*((_BYTE *)this + 8) == 1)
      v7 = *(double *)a3;
  }
  else
  {
    v7 = (float)*(uint64_t *)a3;
  }
  v8 = *(_QWORD *)a2;
  v10 = *(_DWORD *)(v8 + 8);
  v9 = (const nitro::ndarray_container *)(v8 + 8);
  if (v10 == 3)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v630, v9);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v9, (uint64_t)v630);
  nitro::ndarray<int>::ndarray((uint64_t)&v636, (uint64_t)v630);
  if (__p)
  {
    v635 = __p;
    operator delete(__p);
  }
  if (v632)
  {
    v633 = v632;
    operator delete(v632);
  }
  v11 = v631;
  if (v631)
  {
    p_shared_owners = (unint64_t *)&v631->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)this + 8), (uint64_t)&v622);
  nitro::ndarray_container::copy((nitro::ndarray_container *)&v622, (uint64_t)v630);
  if (v627)
  {
    v628 = (char *)v627;
    operator delete(v627);
  }
  if (v625)
  {
    v626 = (char *)v625;
    operator delete(v625);
  }
  v14 = v624;
  if (v624)
  {
    v15 = (unint64_t *)&v624->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v619 = 0;
  v620 = 0;
  v621 = 0;
  v17 = v632;
  v18 = v633;
  v19 = v633 - (_BYTE *)v632;
  v20 = (v633 - (_BYTE *)v632) >> 3;
  if (v633 == v632)
  {
    v21 = 0;
    v22 = 0;
  }
  else
  {
    if ((v19 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v21 = (char *)operator new(v633 - (_BYTE *)v632);
    v22 = &v21[8 * v20];
    v619 = v21;
    v621 = v22;
    memcpy(v21, v17, v19);
    v620 = v22;
  }
  v616 = 0;
  v617 = 0;
  v618 = 0;
  v23 = __p;
  v24 = v635 - (_BYTE *)__p;
  if (v635 != __p)
  {
    if (v24 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v25 = (char *)operator new(v635 - (_BYTE *)__p);
    v26 = &v25[8 * (v24 >> 3)];
    v616 = v25;
    v618 = v26;
    memcpy(v25, v23, v24);
    v617 = v26;
  }
  v613 = 0;
  v614 = 0;
  v615 = 0;
  if (v18 == v17)
  {
    v28 = 0;
    v27 = 0;
  }
  else
  {
    if ((v19 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v27 = (char *)operator new(v19);
    v28 = &v27[8 * v20];
    v613 = v27;
    v615 = v28;
    memcpy(v27, v17, v19);
    v614 = v28;
  }
  v610 = 0;
  v611 = 0;
  v612 = 0;
  v29 = v22 - v21;
  v30 = (v22 - v21) >> 3;
  if (v22 == v21)
  {
    v33 = 0;
    v31 = 0;
  }
  else
  {
    if (v29 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v31 = (char *)operator new(v22 - v21);
    v610 = v31;
    v612 = &v31[8 * v30];
    bzero(v31, v22 - v21);
    v32 = 0;
    v33 = &v31[v29];
    v611 = &v31[v29];
    v34 = v636;
    v35 = v642;
    if (v30 <= 1)
      v36 = 1;
    else
      v36 = (v22 - v21) >> 3;
    v37 = *(_QWORD *)v640;
    v38 = v31 + 4;
    v39 = *((_QWORD *)v640 + 1) + v642;
    v40 = v36;
    do
    {
      v41 = v37 * (v32 >> 32);
      *(v38 - 1) = *(_DWORD *)(v34 + 4 * (v35 + v41));
      *v38 = *(_DWORD *)(v34 + 4 * (v39 + v41));
      v38 += 2;
      v32 += 0x100000000;
      --v40;
    }
    while (v40);
    if (v36 >= 8)
    {
      v43 = 0;
      v42 = v36 & 0xFFFFFFFFFFFFFFF8;
      v44 = v36 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v45 = (const float *)&v31[v43];
        v660 = vld2q_f32(v45);
        v45 += 8;
        v661 = vld2q_f32(v45);
        v660.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v660.val[1], (int32x4_t)v660.val[0]);
        v660.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v661.val[1], (int32x4_t)v661.val[0]);
        v46 = (float32x4_t *)&v27[v43];
        v661.val[1] = (float32x4_t)vaddw_s32(*(int64x2_t *)&v27[v43], *(int32x2_t *)v660.val[0].f32);
        v660.val[0] = (float32x4_t)vaddw_high_s32(*(int64x2_t *)&v27[v43 + 16], (int32x4_t)v660.val[0]);
        v661.val[0] = (float32x4_t)vaddw_s32(*(int64x2_t *)&v27[v43 + 32], *(int32x2_t *)v660.val[1].f32);
        v660.val[1] = (float32x4_t)vaddw_high_s32(*(int64x2_t *)&v27[v43 + 48], (int32x4_t)v660.val[1]);
        *v46 = v661.val[1];
        v46[1] = v660.val[0];
        v46[2] = v661.val[0];
        v46[3] = v660.val[1];
        v43 += 64;
        v44 -= 8;
      }
      while (v44);
      if (v36 == v42)
        goto LABEL_52;
    }
    else
    {
      v42 = 0;
    }
    v47 = 8 * v42;
    v48 = v36 - v42;
    do
    {
      *(_QWORD *)&v27[v47] += *(int *)&v31[v47 + 4] + (uint64_t)*(int *)&v31[v47];
      v47 += 8;
      --v48;
    }
    while (v48);
  }
LABEL_52:
  v601 = 0;
  v602 = 0;
  v600 = 0;
  v49 = v28 - v27;
  if (v49)
  {
    if (v49 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v50 = (char *)operator new(v49);
    v51 = &v50[8 * (v49 >> 3)];
    v600 = v50;
    v602 = v51;
    memcpy(v50, v27, v49);
    v601 = v51;
  }
  v603 = 0;
  v604 = 0;
  v605 = 0;
  if (v22 != v21)
  {
    if (v29 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v52 = (char *)operator new(v22 - v21);
    v53 = &v52[8 * v30];
    v603 = v52;
    v605 = v53;
    memcpy(v52, v21, v22 - v21);
    v604 = v53;
  }
  v606 = v7;
  v608 = 0;
  v609 = 0;
  v607 = 0;
  v54 = v33 - v31;
  if (v33 != v31)
  {
    if (v54 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v607 = operator new(v33 - v31);
    v609 = (char *)v607 + 8 * (v54 >> 3);
    v55 = v54 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v607, v31, v55);
    v608 = (char *)v607 + v55;
  }
  v583 = a5;
  switch(v630[0])
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v643, (uint64_t)v630);
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v600, &v653);
      if (v604 == v603)
      {
        v57 = 1;
        goto LABEL_133;
      }
      v56 = v604 - (_BYTE *)v603 - 8;
      if (v56 < 8)
      {
        v57 = 1;
        v58 = (char *)v603;
        do
        {
LABEL_132:
          v127 = *(_QWORD *)v58;
          v58 += 8;
          v57 *= v127;
        }
        while (v58 != v604);
        goto LABEL_133;
      }
      v122 = (v56 >> 3) + 1;
      v58 = (char *)v603 + 8 * (v122 & 0x3FFFFFFFFFFFFFFELL);
      v123 = (char *)v603 + 8;
      v124 = 1;
      v125 = v122 & 0x3FFFFFFFFFFFFFFELL;
      v126 = 1;
      do
      {
        v124 *= *(v123 - 1);
        v126 *= *v123;
        v123 += 2;
        v125 -= 2;
      }
      while (v125);
      v57 = v126 * v124;
      if (v122 != (v122 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_132;
LABEL_133:
      if (v601 == v600)
      {
        v129 = 1;
        goto LABEL_141;
      }
      v128 = v601 - (_BYTE *)v600 - 8;
      if (v128 < 8)
      {
        v129 = 1;
        v130 = (char *)v600;
        do
        {
LABEL_140:
          v136 = *(_QWORD *)v130;
          v130 += 8;
          v129 *= v136;
        }
        while (v130 != v601);
        goto LABEL_141;
      }
      v131 = (v128 >> 3) + 1;
      v130 = (char *)v600 + 8 * (v131 & 0x3FFFFFFFFFFFFFFELL);
      v132 = (char *)v600 + 8;
      v133 = 1;
      v134 = v131 & 0x3FFFFFFFFFFFFFFELL;
      v135 = 1;
      do
      {
        v133 *= *(v132 - 1);
        v135 *= *v132;
        v132 += 2;
        v134 -= 2;
      }
      while (v134);
      v129 = v135 * v133;
      if (v131 != (v131 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_140;
LABEL_141:
      if (v659)
        goto LABEL_536;
      v137 = v656 - v655;
      if (v656 == v655)
        goto LABEL_413;
      if (!v653)
      {
        v138 = 0;
        goto LABEL_403;
      }
      if ((unint64_t)(v137 - 8) < 8)
      {
        v138 = 1;
        v139 = v655;
        do
        {
LABEL_402:
          v460 = *(_QWORD *)v139;
          v139 += 8;
          v138 *= v460;
        }
        while (v139 != v656);
        goto LABEL_403;
      }
      v455 = ((unint64_t)(v137 - 8) >> 3) + 1;
      v139 = &v655[8 * (v455 & 0x3FFFFFFFFFFFFFFELL)];
      v456 = v655 + 8;
      v457 = 1;
      v458 = v455 & 0x3FFFFFFFFFFFFFFELL;
      v459 = 1;
      do
      {
        v457 *= *(v456 - 1);
        v459 *= *v456;
        v456 += 2;
        v458 -= 2;
      }
      while (v458);
      v138 = v459 * v457;
      if (v455 != (v455 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_402;
LABEL_403:
      v461 = v137 >> 3;
      if ((unint64_t)(v137 >> 3) <= 1)
        v461 = 1;
      if (v461 < 2)
      {
        v462 = 0;
        v463 = 0;
LABEL_410:
        v469 = v461 - v462;
        v470 = 8 * v462;
        v471 = &v657[v470];
        v472 = &v655[v470];
        do
        {
          v473 = *(_QWORD *)v472;
          v472 += 8;
          v474 = v473 - 1;
          v475 = *(_QWORD *)v471;
          v471 += 8;
          v463 += v475 * v474;
          --v469;
        }
        while (v469);
        goto LABEL_412;
      }
      v464 = 0;
      v465 = 0;
      v462 = v461 & 0xFFFFFFFFFFFFFFFELL;
      v466 = v655 + 8;
      v467 = v657 + 8;
      v468 = v461 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v464 += *(v467 - 1) * (*(v466 - 1) - 1);
        v465 += *v467 * (*v466 - 1);
        v466 += 2;
        v467 += 2;
        v468 -= 2;
      }
      while (v468);
      v463 = v465 + v464;
      if (v461 != v462)
        goto LABEL_410;
LABEL_412:
      if (v138 != v463 + 1)
LABEL_536:
        nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
LABEL_413:
      memset(v653, (int)v606, 4 * v129);
      v651 = 0;
      v652 = 0;
      v650 = 0;
      v476 = v604 - (_BYTE *)v603;
      if (v604 == v603)
      {
        v477 = 0;
        v479 = 0;
        v481 = 0;
      }
      else
      {
        if (v476 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v477 = (char *)operator new(v604 - (_BYTE *)v603);
        v478 = v476 >> 3;
        v479 = &v477[8 * (v476 >> 3)];
        v650 = v477;
        v652 = v479;
        v480 = v476 & 0xFFFFFFFFFFFFFFF8;
        bzero(v477, v476 & 0xFFFFFFFFFFFFFFF8);
        v476 = (int64_t)operator new(v476);
        v481 = v476 + 8 * v478;
        bzero((void *)v476, v480);
      }
      v482 = (char *)v607;
      if (v608 != v607)
      {
        v483 = (v608 - (_BYTE *)v607) >> 3;
        if (v483 <= 1)
          v483 = 1;
        if (v483 > 8)
        {
          v485 = v483 & 7;
          if ((v483 & 7) == 0)
            v485 = 8;
          v484 = v483 - v485;
          v486 = (const float *)((char *)v607 + 32);
          v487 = (_OWORD *)(v476 + 32);
          v488 = v484;
          do
          {
            v489 = v486 - 8;
            v490 = (unsigned __int128)vld2q_f32(v489);
            v491 = (unsigned __int128)vld2q_f32(v486);
            *(_QWORD *)&v492 = (int)v490;
            *((_QWORD *)&v492 + 1) = SDWORD1(v490);
            v493 = v492;
            *(_QWORD *)&v492 = SDWORD2(v490);
            *((_QWORD *)&v492 + 1) = SHIDWORD(v490);
            v494 = v492;
            *(_QWORD *)&v492 = (int)v491;
            *((_QWORD *)&v492 + 1) = SDWORD1(v491);
            v495 = v492;
            *(_QWORD *)&v492 = SDWORD2(v491);
            *((_QWORD *)&v492 + 1) = SHIDWORD(v491);
            *(v487 - 2) = v493;
            *(v487 - 1) = v494;
            *v487 = v495;
            v487[1] = v492;
            v487 += 4;
            v486 += 16;
            v488 -= 8;
          }
          while (v488);
        }
        else
        {
          v484 = 0;
        }
        v496 = v483 - v484;
        v497 = 8 * v484;
        v498 = (_QWORD *)(v476 + 8 * v484);
        v499 = &v482[v497];
        do
        {
          v500 = *(int *)v499;
          v499 += 8;
          *v498++ = v500;
          --v496;
        }
        while (v496);
      }
      if (v57)
      {
        v501 = 0;
        v502 = v479 - v477;
        v503 = (v479 - v477) >> 3;
        if (v503 <= 1)
          v503 = 1;
        v504 = (v481 - v476) >> 3;
        v505 = v504 - 1;
        if (v504 <= 1)
          v504 = 1;
        v506 = (float *)v653;
        v507 = v502 >> 3;
        v508 = (v502 >> 3);
        v509 = *(int *)&v482[8 * v505 + 4];
        v510 = v659;
        v511 = v649;
        v512 = v643;
        v513 = (char *)v645;
        v587 = (char *)v647;
        v591 = v657;
        v582 = (char *)v647 + 8;
        v578 = v657 + 8;
        v514 = v508 + 1;
        v515 = (v481 - v476) & 0xFFFFFFFFFFFFFFF8;
        v599 = v515 + v476 - 16;
        v595 = (uint64_t)&v482[v515 - 12];
        v516 = 8 * v505;
        while (1)
        {
          if (v479 == v477)
          {
            v517 = 0;
            goto LABEL_444;
          }
          if (v503 < 2)
            break;
          v519 = 0;
          v520 = 0;
          v521 = v503 & 0xFFFFFFFFFFFFFFFELL;
          v522 = v582;
          v523 = v477 + 8;
          do
          {
            v519 += *(v522 - 1) * *(v523 - 1);
            v520 += *v522 * *v523;
            v523 += 2;
            v522 += 2;
            v521 -= 2;
          }
          while (v521);
          v517 = v520 + v519;
          v518 = v503 & 0xFFFFFFFFFFFFFFFELL;
          if (v503 != (v503 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_442;
LABEL_444:
          if (v481 == v476)
          {
            v531 = 0;
          }
          else
          {
            if (v504 >= 2)
            {
              v533 = 0;
              v534 = 0;
              v535 = v504 & 0xFFFFFFFFFFFFFFFELL;
              v537 = v578;
              v536 = (_QWORD *)(v476 + 8);
              do
              {
                v533 += *(v537 - 1) * *(v536 - 1);
                v534 += *v537 * *v536;
                v536 += 2;
                v537 += 2;
                v535 -= 2;
              }
              while (v535);
              v531 = v534 + v533;
              v532 = v504 & 0xFFFFFFFFFFFFFFFELL;
              if (v504 == (v504 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_453;
            }
            else
            {
              v531 = 0;
              v532 = 0;
            }
            v538 = v504 - v532;
            v539 = 8 * v532;
            v540 = &v591[8 * v532];
            v541 = (uint64_t *)(v476 + v539);
            do
            {
              v543 = *v541++;
              v542 = v543;
              v544 = *(_QWORD *)v540;
              v540 += 8;
              v531 += v544 * v542;
              --v538;
            }
            while (v538);
          }
LABEL_453:
          v506[v531 + v510] = (float)*(int *)(v512 + 4 * (v517 + v511));
          if ((int)v507 >= 1)
          {
            v545 = v514;
            do
            {
              v546 = 8 * (v545 - 2);
              v547 = *(_QWORD *)&v477[v546] + 1;
              *(_QWORD *)&v477[v546] = v547;
              if (v547 < *(_QWORD *)&v513[v546])
                break;
              *(_QWORD *)&v477[8 * (v545-- - 2)] = 0;
            }
            while (v545 > 1);
          }
          v548 = *(_QWORD *)(v476 + v516) + 1;
          *(_QWORD *)(v476 + v516) = v548;
          if (v548 >= v509)
          {
            v549 = (int *)v595;
            v550 = (_QWORD *)v599;
            do
            {
              v551 = *v550 + 2;
              *v550 = v551;
              v550[1] = 0;
              --v550;
              v552 = *v549;
              v549 -= 2;
            }
            while (v551 >= v552);
          }
          if (++v501 == v57)
            goto LABEL_461;
        }
        v517 = 0;
        v518 = 0;
LABEL_442:
        v524 = v503 - v518;
        v525 = 8 * v518;
        v526 = &v587[8 * v518];
        v527 = (uint64_t *)&v477[v525];
        do
        {
          v529 = *v527++;
          v528 = v529;
          v530 = *(_QWORD *)v526;
          v526 += 8;
          v517 += v530 * v528;
          --v524;
        }
        while (v524);
        goto LABEL_444;
      }
LABEL_461:
      nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v622, &v653);
      v238 = v583;
      if (v476)
        operator delete((void *)v476);
      if (v477)
        operator delete(v477);
      if (v657)
      {
        v658 = v657;
        operator delete(v657);
      }
      if (v655)
      {
        v656 = v655;
        operator delete(v655);
      }
      v553 = v654;
      if (v654)
      {
        v554 = (unint64_t *)&v654->__shared_owners_;
        do
          v555 = __ldaxr(v554);
        while (__stlxr(v555 - 1, v554));
        if (!v555)
        {
          ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
          std::__shared_weak_count::__release_weak(v553);
        }
      }
      if (v647)
      {
        v648 = v647;
        operator delete(v647);
      }
      if (v645)
      {
        v646 = v645;
        operator delete(v645);
      }
      v242 = v644;
      if (!v644)
        goto LABEL_483;
      v556 = (unint64_t *)&v644->__shared_owners_;
      do
        v244 = __ldaxr(v556);
      while (__stlxr(v244 - 1, v556));
      goto LABEL_481;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v643, (uint64_t)v630);
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v600, &v653);
      if (v604 == v603)
      {
        v66 = 1;
        goto LABEL_116;
      }
      v65 = v604 - (_BYTE *)v603 - 8;
      if (v65 < 8)
      {
        v66 = 1;
        v67 = (char *)v603;
        do
        {
LABEL_115:
          v109 = *(_QWORD *)v67;
          v67 += 8;
          v66 *= v109;
        }
        while (v67 != v604);
        goto LABEL_116;
      }
      v104 = (v65 >> 3) + 1;
      v67 = (char *)v603 + 8 * (v104 & 0x3FFFFFFFFFFFFFFELL);
      v105 = (char *)v603 + 8;
      v106 = 1;
      v107 = v104 & 0x3FFFFFFFFFFFFFFELL;
      v108 = 1;
      do
      {
        v106 *= *(v105 - 1);
        v108 *= *v105;
        v105 += 2;
        v107 -= 2;
      }
      while (v107);
      v66 = v108 * v106;
      if (v104 != (v104 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_115;
LABEL_116:
      if (v601 == v600)
      {
        v111 = 1;
        goto LABEL_124;
      }
      v110 = v601 - (_BYTE *)v600 - 8;
      if (v110 < 8)
      {
        v111 = 1;
        v112 = (char *)v600;
        do
        {
LABEL_123:
          v118 = *(_QWORD *)v112;
          v112 += 8;
          v111 *= v118;
        }
        while (v112 != v601);
        goto LABEL_124;
      }
      v113 = (v110 >> 3) + 1;
      v112 = (char *)v600 + 8 * (v113 & 0x3FFFFFFFFFFFFFFELL);
      v114 = (char *)v600 + 8;
      v115 = 1;
      v116 = v113 & 0x3FFFFFFFFFFFFFFELL;
      v117 = 1;
      do
      {
        v115 *= *(v114 - 1);
        v117 *= *v114;
        v114 += 2;
        v116 -= 2;
      }
      while (v116);
      v111 = v117 * v115;
      if (v113 != (v113 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_123;
LABEL_124:
      if (v659)
        goto LABEL_535;
      v119 = v656 - v655;
      if (v656 == v655)
        goto LABEL_330;
      if (!v653)
      {
        v120 = 0;
        goto LABEL_320;
      }
      if ((unint64_t)(v119 - 8) < 8)
      {
        v120 = 1;
        v121 = v655;
        do
        {
LABEL_319:
          v358 = *(_QWORD *)v121;
          v121 += 8;
          v120 *= v358;
        }
        while (v121 != v656);
        goto LABEL_320;
      }
      v353 = ((unint64_t)(v119 - 8) >> 3) + 1;
      v121 = &v655[8 * (v353 & 0x3FFFFFFFFFFFFFFELL)];
      v354 = v655 + 8;
      v355 = 1;
      v356 = v353 & 0x3FFFFFFFFFFFFFFELL;
      v357 = 1;
      do
      {
        v355 *= *(v354 - 1);
        v357 *= *v354;
        v354 += 2;
        v356 -= 2;
      }
      while (v356);
      v120 = v357 * v355;
      if (v353 != (v353 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_319;
LABEL_320:
      v359 = v119 >> 3;
      if ((unint64_t)(v119 >> 3) <= 1)
        v359 = 1;
      if (v359 < 2)
      {
        v360 = 0;
        v361 = 0;
LABEL_327:
        v367 = v359 - v360;
        v368 = 8 * v360;
        v369 = &v657[v368];
        v370 = &v655[v368];
        do
        {
          v371 = *(_QWORD *)v370;
          v370 += 8;
          v372 = v371 - 1;
          v373 = *(_QWORD *)v369;
          v369 += 8;
          v361 += v373 * v372;
          --v367;
        }
        while (v367);
        goto LABEL_329;
      }
      v362 = 0;
      v363 = 0;
      v360 = v359 & 0xFFFFFFFFFFFFFFFELL;
      v364 = v655 + 8;
      v365 = v657 + 8;
      v366 = v359 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v362 += *(v365 - 1) * (*(v364 - 1) - 1);
        v363 += *v365 * (*v364 - 1);
        v364 += 2;
        v365 += 2;
        v366 -= 2;
      }
      while (v366);
      v361 = v363 + v362;
      if (v359 != v360)
        goto LABEL_327;
LABEL_329:
      if (v120 != v361 + 1)
LABEL_535:
        nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
LABEL_330:
      memset(v653, (int)v606, 4 * v111);
      v651 = 0;
      v652 = 0;
      v650 = 0;
      v375 = v604 - (_BYTE *)v603;
      if (v604 == v603)
      {
        v376 = 0;
        v378 = 0;
        v380 = 0;
      }
      else
      {
        if (v375 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v376 = (char *)operator new(v604 - (_BYTE *)v603);
        v377 = v375 >> 3;
        v378 = &v376[8 * (v375 >> 3)];
        v650 = v376;
        v652 = v378;
        v379 = v375 & 0xFFFFFFFFFFFFFFF8;
        bzero(v376, v375 & 0xFFFFFFFFFFFFFFF8);
        v375 = (int64_t)operator new(v375);
        v380 = v375 + 8 * v377;
        bzero((void *)v375, v379);
      }
      v381 = (char *)v607;
      if (v608 != v607)
      {
        v382 = (v608 - (_BYTE *)v607) >> 3;
        if (v382 <= 1)
          v382 = 1;
        if (v382 > 8)
        {
          v384 = v382 & 7;
          if ((v382 & 7) == 0)
            v384 = 8;
          v383 = v382 - v384;
          v385 = (const float *)((char *)v607 + 32);
          v386 = (_OWORD *)(v375 + 32);
          v387 = v383;
          do
          {
            v388 = v385 - 8;
            v389 = (unsigned __int128)vld2q_f32(v388);
            v390 = (unsigned __int128)vld2q_f32(v385);
            *(_QWORD *)&v391 = (int)v389;
            *((_QWORD *)&v391 + 1) = SDWORD1(v389);
            v392 = v391;
            *(_QWORD *)&v391 = SDWORD2(v389);
            *((_QWORD *)&v391 + 1) = SHIDWORD(v389);
            v374 = v391;
            *(_QWORD *)&v391 = (int)v390;
            *((_QWORD *)&v391 + 1) = SDWORD1(v390);
            v393 = v391;
            *(_QWORD *)&v391 = SDWORD2(v390);
            *((_QWORD *)&v391 + 1) = SHIDWORD(v390);
            *(v386 - 2) = v392;
            *(v386 - 1) = v374;
            *v386 = v393;
            v386[1] = v391;
            v386 += 4;
            v385 += 16;
            v387 -= 8;
          }
          while (v387);
        }
        else
        {
          v383 = 0;
        }
        v394 = v382 - v383;
        v395 = 8 * v383;
        v396 = (_QWORD *)(v375 + 8 * v383);
        v397 = &v381[v395];
        do
        {
          v398 = *(int *)v397;
          v397 += 8;
          *v396++ = v398;
          --v394;
        }
        while (v394);
      }
      if (v66)
      {
        v399 = 0;
        v400 = v378 - v376;
        v401 = (v378 - v376) >> 3;
        if (v401 <= 1)
          v401 = 1;
        v402 = (v380 - v375) >> 3;
        v403 = v402 - 1;
        if (v402 <= 1)
          v402 = 1;
        v404 = v653;
        v405 = v400 >> 3;
        v406 = (v400 >> 3);
        v407 = *(int *)&v381[8 * v403 + 4];
        v408 = v659;
        v409 = v649;
        v410 = v643;
        v411 = (char *)v645;
        v586 = (char *)v647;
        v590 = v657;
        v581 = (char *)v647 + 8;
        v577 = v657 + 8;
        v412 = v406 + 1;
        v413 = (v380 - v375) & 0xFFFFFFFFFFFFFFF8;
        v598 = v413 + v375 - 16;
        v594 = (uint64_t)&v381[v413 - 12];
        v414 = 8 * v403;
        while (1)
        {
          if (v378 == v376)
          {
            v415 = 0;
            goto LABEL_361;
          }
          if (v401 < 2)
            break;
          v417 = 0;
          v418 = 0;
          v419 = v401 & 0xFFFFFFFFFFFFFFFELL;
          v420 = v581;
          v421 = v376 + 8;
          do
          {
            v417 += *(v420 - 1) * *(v421 - 1);
            v418 += *v420 * *v421;
            v421 += 2;
            v420 += 2;
            v419 -= 2;
          }
          while (v419);
          v415 = v418 + v417;
          v416 = v401 & 0xFFFFFFFFFFFFFFFELL;
          if (v401 != (v401 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_359;
LABEL_361:
          if (v380 == v375)
          {
            v429 = 0;
          }
          else
          {
            if (v402 >= 2)
            {
              v431 = 0;
              v432 = 0;
              v433 = v402 & 0xFFFFFFFFFFFFFFFELL;
              v435 = v577;
              v434 = (_QWORD *)(v375 + 8);
              do
              {
                v431 += *(v435 - 1) * *(v434 - 1);
                v432 += *v435 * *v434;
                v434 += 2;
                v435 += 2;
                v433 -= 2;
              }
              while (v433);
              v429 = v432 + v431;
              v430 = v402 & 0xFFFFFFFFFFFFFFFELL;
              if (v402 == (v402 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_370;
            }
            else
            {
              v429 = 0;
              v430 = 0;
            }
            v436 = v402 - v430;
            v437 = 8 * v430;
            v438 = &v590[8 * v430];
            v439 = (uint64_t *)(v375 + v437);
            do
            {
              v441 = *v439++;
              v440 = v441;
              v442 = *(_QWORD *)v438;
              v438 += 8;
              v429 += v442 * v440;
              --v436;
            }
            while (v436);
          }
LABEL_370:
          LOBYTE(v374) = *(_BYTE *)(v410 + v415 + v409);
          *(float *)&v374 = (float)v374;
          v404[v429 + v408] = v374;
          if ((int)v405 >= 1)
          {
            v443 = v412;
            do
            {
              v444 = 8 * (v443 - 2);
              v445 = *(_QWORD *)&v376[v444] + 1;
              *(_QWORD *)&v376[v444] = v445;
              if (v445 < *(_QWORD *)&v411[v444])
                break;
              *(_QWORD *)&v376[8 * (v443-- - 2)] = 0;
            }
            while (v443 > 1);
          }
          v446 = *(_QWORD *)(v375 + v414) + 1;
          *(_QWORD *)(v375 + v414) = v446;
          if (v446 >= v407)
          {
            v447 = (int *)v594;
            v448 = (_QWORD *)v598;
            do
            {
              v449 = *v448 + 2;
              *v448 = v449;
              v448[1] = 0;
              --v448;
              v450 = *v447;
              v447 -= 2;
            }
            while (v449 >= v450);
          }
          if (++v399 == v66)
            goto LABEL_378;
        }
        v415 = 0;
        v416 = 0;
LABEL_359:
        v422 = v401 - v416;
        v423 = 8 * v416;
        v424 = &v586[8 * v416];
        v425 = (uint64_t *)&v376[v423];
        do
        {
          v427 = *v425++;
          v426 = v427;
          v428 = *(_QWORD *)v424;
          v424 += 8;
          v415 += v428 * v426;
          --v422;
        }
        while (v422);
        goto LABEL_361;
      }
LABEL_378:
      nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v622, &v653);
      v238 = v583;
      if (v375)
        operator delete((void *)v375);
      if (v376)
        operator delete(v376);
      if (v657)
      {
        v658 = v657;
        operator delete(v657);
      }
      if (v655)
      {
        v656 = v655;
        operator delete(v655);
      }
      v451 = v654;
      if (v654)
      {
        v452 = (unint64_t *)&v654->__shared_owners_;
        do
          v453 = __ldaxr(v452);
        while (__stlxr(v453 - 1, v452));
        if (!v453)
        {
          ((void (*)(std::__shared_weak_count *))v451->__on_zero_shared)(v451);
          std::__shared_weak_count::__release_weak(v451);
        }
      }
      if (v647)
      {
        v648 = v647;
        operator delete(v647);
      }
      if (v645)
      {
        v646 = v645;
        operator delete(v645);
      }
      v242 = v644;
      if (!v644)
        goto LABEL_483;
      v454 = (unint64_t *)&v644->__shared_owners_;
      do
        v244 = __ldaxr(v454);
      while (__stlxr(v244 - 1, v454));
      goto LABEL_481;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v643, (uint64_t)v630);
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v600, &v653);
      if (v604 == v603)
      {
        v60 = 1;
        goto LABEL_82;
      }
      v59 = v604 - (_BYTE *)v603 - 8;
      if (v59 < 8)
      {
        v60 = 1;
        v61 = (char *)v603;
        do
        {
LABEL_81:
          v73 = *(_QWORD *)v61;
          v61 += 8;
          v60 *= v73;
        }
        while (v61 != v604);
        goto LABEL_82;
      }
      v68 = (v59 >> 3) + 1;
      v61 = (char *)v603 + 8 * (v68 & 0x3FFFFFFFFFFFFFFELL);
      v69 = (char *)v603 + 8;
      v70 = 1;
      v71 = v68 & 0x3FFFFFFFFFFFFFFELL;
      v72 = 1;
      do
      {
        v70 *= *(v69 - 1);
        v72 *= *v69;
        v69 += 2;
        v71 -= 2;
      }
      while (v71);
      v60 = v72 * v70;
      if (v68 != (v68 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_81;
LABEL_82:
      if (v601 == v600)
      {
        v75 = 1;
        goto LABEL_90;
      }
      v74 = v601 - (_BYTE *)v600 - 8;
      if (v74 < 8)
      {
        v75 = 1;
        v76 = (char *)v600;
        do
        {
LABEL_89:
          v82 = *(_QWORD *)v76;
          v76 += 8;
          v75 *= v82;
        }
        while (v76 != v601);
        goto LABEL_90;
      }
      v77 = (v74 >> 3) + 1;
      v76 = (char *)v600 + 8 * (v77 & 0x3FFFFFFFFFFFFFFELL);
      v78 = (char *)v600 + 8;
      v79 = 1;
      v80 = v77 & 0x3FFFFFFFFFFFFFFELL;
      v81 = 1;
      do
      {
        v79 *= *(v78 - 1);
        v81 *= *v78;
        v78 += 2;
        v80 -= 2;
      }
      while (v80);
      v75 = v81 * v79;
      if (v77 != (v77 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_89;
LABEL_90:
      if (v659)
        goto LABEL_533;
      v83 = v656 - v655;
      if (v656 == v655)
        goto LABEL_164;
      if (!v653)
      {
        v84 = 0;
        goto LABEL_154;
      }
      if ((unint64_t)(v83 - 8) < 8)
      {
        v84 = 1;
        v85 = v655;
        do
        {
LABEL_153:
          v145 = *(_QWORD *)v85;
          v85 += 8;
          v84 *= v145;
        }
        while (v85 != v656);
        goto LABEL_154;
      }
      v140 = ((unint64_t)(v83 - 8) >> 3) + 1;
      v85 = &v655[8 * (v140 & 0x3FFFFFFFFFFFFFFELL)];
      v141 = v655 + 8;
      v142 = 1;
      v143 = v140 & 0x3FFFFFFFFFFFFFFELL;
      v144 = 1;
      do
      {
        v142 *= *(v141 - 1);
        v144 *= *v141;
        v141 += 2;
        v143 -= 2;
      }
      while (v143);
      v84 = v144 * v142;
      if (v140 != (v140 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_153;
LABEL_154:
      v146 = v83 >> 3;
      if ((unint64_t)(v83 >> 3) <= 1)
        v146 = 1;
      if (v146 < 2)
      {
        v147 = 0;
        v148 = 0;
LABEL_161:
        v154 = v146 - v147;
        v155 = 8 * v147;
        v156 = &v657[v155];
        v157 = &v655[v155];
        do
        {
          v158 = *(_QWORD *)v157;
          v157 += 8;
          v159 = v158 - 1;
          v160 = *(_QWORD *)v156;
          v156 += 8;
          v148 += v160 * v159;
          --v154;
        }
        while (v154);
        goto LABEL_163;
      }
      v149 = 0;
      v150 = 0;
      v147 = v146 & 0xFFFFFFFFFFFFFFFELL;
      v151 = v655 + 8;
      v152 = v657 + 8;
      v153 = v146 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v149 += *(v152 - 1) * (*(v151 - 1) - 1);
        v150 += *v152 * (*v151 - 1);
        v151 += 2;
        v152 += 2;
        v153 -= 2;
      }
      while (v153);
      v148 = v150 + v149;
      if (v146 != v147)
        goto LABEL_161;
LABEL_163:
      if (v84 != v148 + 1)
LABEL_533:
        nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
LABEL_164:
      memset(v653, (int)v606, 4 * v75);
      v651 = 0;
      v652 = 0;
      v650 = 0;
      v161 = v604 - (_BYTE *)v603;
      if (v604 == v603)
      {
        v162 = 0;
        v164 = 0;
        v166 = 0;
      }
      else
      {
        if (v161 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v162 = (char *)operator new(v604 - (_BYTE *)v603);
        v163 = v161 >> 3;
        v164 = &v162[8 * (v161 >> 3)];
        v650 = v162;
        v652 = v164;
        v165 = v161 & 0xFFFFFFFFFFFFFFF8;
        bzero(v162, v161 & 0xFFFFFFFFFFFFFFF8);
        v161 = (int64_t)operator new(v161);
        v166 = v161 + 8 * v163;
        bzero((void *)v161, v165);
      }
      v167 = (char *)v607;
      if (v608 != v607)
      {
        v168 = (v608 - (_BYTE *)v607) >> 3;
        if (v168 <= 1)
          v168 = 1;
        if (v168 > 8)
        {
          v170 = v168 & 7;
          if ((v168 & 7) == 0)
            v170 = 8;
          v169 = v168 - v170;
          v171 = (const float *)((char *)v607 + 32);
          v172 = (_OWORD *)(v161 + 32);
          v173 = v169;
          do
          {
            v174 = v171 - 8;
            v175 = (unsigned __int128)vld2q_f32(v174);
            v176 = (unsigned __int128)vld2q_f32(v171);
            *(_QWORD *)&v177 = (int)v175;
            *((_QWORD *)&v177 + 1) = SDWORD1(v175);
            v178 = v177;
            *(_QWORD *)&v177 = SDWORD2(v175);
            *((_QWORD *)&v177 + 1) = SHIDWORD(v175);
            v179 = v177;
            *(_QWORD *)&v177 = (int)v176;
            *((_QWORD *)&v177 + 1) = SDWORD1(v176);
            v180 = v177;
            *(_QWORD *)&v177 = SDWORD2(v176);
            *((_QWORD *)&v177 + 1) = SHIDWORD(v176);
            *(v172 - 2) = v178;
            *(v172 - 1) = v179;
            *v172 = v180;
            v172[1] = v177;
            v172 += 4;
            v171 += 16;
            v173 -= 8;
          }
          while (v173);
        }
        else
        {
          v169 = 0;
        }
        v181 = v168 - v169;
        v182 = 8 * v169;
        v183 = (_QWORD *)(v161 + 8 * v169);
        v184 = &v167[v182];
        do
        {
          v185 = *(int *)v184;
          v184 += 8;
          *v183++ = v185;
          --v181;
        }
        while (v181);
      }
      if (v60)
      {
        v186 = 0;
        v187 = v164 - v162;
        v188 = (v164 - v162) >> 3;
        if (v188 <= 1)
          v188 = 1;
        v189 = (v166 - v161) >> 3;
        v190 = v189 - 1;
        if (v189 <= 1)
          v189 = 1;
        v191 = v653;
        v192 = v187 >> 3;
        v193 = (v187 >> 3);
        v194 = *(int *)&v167[8 * v190 + 4];
        v195 = v659;
        v196 = v649;
        v197 = v643;
        v198 = (char *)v645;
        v584 = (char *)v647;
        v588 = v657;
        v579 = (char *)v647 + 8;
        v575 = v657 + 8;
        v199 = v193 + 1;
        v200 = (v166 - v161) & 0xFFFFFFFFFFFFFFF8;
        v596 = v200 + v161 - 16;
        v592 = (uint64_t)&v167[v200 - 12];
        v201 = 8 * v190;
        while (1)
        {
          if (v164 == v162)
          {
            v202 = 0;
            goto LABEL_195;
          }
          if (v188 < 2)
            break;
          v204 = 0;
          v205 = 0;
          v206 = v188 & 0xFFFFFFFFFFFFFFFELL;
          v207 = v579;
          v208 = v162 + 8;
          do
          {
            v204 += *(v207 - 1) * *(v208 - 1);
            v205 += *v207 * *v208;
            v208 += 2;
            v207 += 2;
            v206 -= 2;
          }
          while (v206);
          v202 = v205 + v204;
          v203 = v188 & 0xFFFFFFFFFFFFFFFELL;
          if (v188 != (v188 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_193;
LABEL_195:
          if (v166 == v161)
          {
            v216 = 0;
          }
          else
          {
            if (v189 >= 2)
            {
              v218 = 0;
              v219 = 0;
              v220 = v189 & 0xFFFFFFFFFFFFFFFELL;
              v222 = v575;
              v221 = (_QWORD *)(v161 + 8);
              do
              {
                v218 += *(v222 - 1) * *(v221 - 1);
                v219 += *v222 * *v221;
                v221 += 2;
                v222 += 2;
                v220 -= 2;
              }
              while (v220);
              v216 = v219 + v218;
              v217 = v189 & 0xFFFFFFFFFFFFFFFELL;
              if (v189 == (v189 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_204;
            }
            else
            {
              v216 = 0;
              v217 = 0;
            }
            v223 = v189 - v217;
            v224 = 8 * v217;
            v225 = &v588[8 * v217];
            v226 = (uint64_t *)(v161 + v224);
            do
            {
              v228 = *v226++;
              v227 = v228;
              v229 = *(_QWORD *)v225;
              v225 += 8;
              v216 += v229 * v227;
              --v223;
            }
            while (v223);
          }
LABEL_204:
          v191[v216 + v195] = *(_DWORD *)(v197 + 4 * (v202 + v196));
          if ((int)v192 >= 1)
          {
            v230 = v199;
            do
            {
              v231 = 8 * (v230 - 2);
              v232 = *(_QWORD *)&v162[v231] + 1;
              *(_QWORD *)&v162[v231] = v232;
              if (v232 < *(_QWORD *)&v198[v231])
                break;
              *(_QWORD *)&v162[8 * (v230-- - 2)] = 0;
            }
            while (v230 > 1);
          }
          v233 = *(_QWORD *)(v161 + v201) + 1;
          *(_QWORD *)(v161 + v201) = v233;
          if (v233 >= v194)
          {
            v234 = (int *)v592;
            v235 = (_QWORD *)v596;
            do
            {
              v236 = *v235 + 2;
              *v235 = v236;
              v235[1] = 0;
              --v235;
              v237 = *v234;
              v234 -= 2;
            }
            while (v236 >= v237);
          }
          if (++v186 == v60)
            goto LABEL_212;
        }
        v202 = 0;
        v203 = 0;
LABEL_193:
        v209 = v188 - v203;
        v210 = 8 * v203;
        v211 = &v584[8 * v203];
        v212 = (uint64_t *)&v162[v210];
        do
        {
          v214 = *v212++;
          v213 = v214;
          v215 = *(_QWORD *)v211;
          v211 += 8;
          v202 += v215 * v213;
          --v209;
        }
        while (v209);
        goto LABEL_195;
      }
LABEL_212:
      nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v622, &v653);
      v238 = v583;
      if (v161)
        operator delete((void *)v161);
      if (v162)
        operator delete(v162);
      if (v657)
      {
        v658 = v657;
        operator delete(v657);
      }
      if (v655)
      {
        v656 = v655;
        operator delete(v655);
      }
      v239 = v654;
      if (v654)
      {
        v240 = (unint64_t *)&v654->__shared_owners_;
        do
          v241 = __ldaxr(v240);
        while (__stlxr(v241 - 1, v240));
        if (!v241)
        {
          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
          std::__shared_weak_count::__release_weak(v239);
        }
      }
      if (v647)
      {
        v648 = v647;
        operator delete(v647);
      }
      if (v645)
      {
        v646 = v645;
        operator delete(v645);
      }
      v242 = v644;
      if (!v644)
        goto LABEL_483;
      v243 = (unint64_t *)&v644->__shared_owners_;
      do
        v244 = __ldaxr(v243);
      while (__stlxr(v244 - 1, v243));
      goto LABEL_481;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v643, (uint64_t)v630);
      nitro::ndarray<float>::init_from_shape((uint64_t **)&v600, &v653);
      if (v604 == v603)
      {
        v63 = 1;
        goto LABEL_99;
      }
      v62 = v604 - (_BYTE *)v603 - 8;
      if (v62 < 8)
      {
        v63 = 1;
        v64 = (char *)v603;
        do
        {
LABEL_98:
          v91 = *(_QWORD *)v64;
          v64 += 8;
          v63 *= v91;
        }
        while (v64 != v604);
        goto LABEL_99;
      }
      v86 = (v62 >> 3) + 1;
      v64 = (char *)v603 + 8 * (v86 & 0x3FFFFFFFFFFFFFFELL);
      v87 = (char *)v603 + 8;
      v88 = 1;
      v89 = v86 & 0x3FFFFFFFFFFFFFFELL;
      v90 = 1;
      do
      {
        v88 *= *(v87 - 1);
        v90 *= *v87;
        v87 += 2;
        v89 -= 2;
      }
      while (v89);
      v63 = v90 * v88;
      if (v86 != (v86 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_98;
LABEL_99:
      if (v601 == v600)
      {
        v93 = 1;
        goto LABEL_107;
      }
      v92 = v601 - (_BYTE *)v600 - 8;
      if (v92 < 8)
      {
        v93 = 1;
        v94 = (char *)v600;
        do
        {
LABEL_106:
          v100 = *(_QWORD *)v94;
          v94 += 8;
          v93 *= v100;
        }
        while (v94 != v601);
        goto LABEL_107;
      }
      v95 = (v92 >> 3) + 1;
      v94 = (char *)v600 + 8 * (v95 & 0x3FFFFFFFFFFFFFFELL);
      v96 = (char *)v600 + 8;
      v97 = 1;
      v98 = v95 & 0x3FFFFFFFFFFFFFFELL;
      v99 = 1;
      do
      {
        v97 *= *(v96 - 1);
        v99 *= *v96;
        v96 += 2;
        v98 -= 2;
      }
      while (v98);
      v93 = v99 * v97;
      if (v95 != (v95 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_106;
LABEL_107:
      if (v659)
        goto LABEL_534;
      v101 = v656 - v655;
      if (v656 == v655)
        goto LABEL_247;
      if (!v653)
      {
        v102 = 0;
        goto LABEL_237;
      }
      if ((unint64_t)(v101 - 8) < 8)
      {
        v102 = 1;
        v103 = v655;
        do
        {
LABEL_236:
          v250 = *(_QWORD *)v103;
          v103 += 8;
          v102 *= v250;
        }
        while (v103 != v656);
        goto LABEL_237;
      }
      v245 = ((unint64_t)(v101 - 8) >> 3) + 1;
      v103 = &v655[8 * (v245 & 0x3FFFFFFFFFFFFFFELL)];
      v246 = v655 + 8;
      v247 = 1;
      v248 = v245 & 0x3FFFFFFFFFFFFFFELL;
      v249 = 1;
      do
      {
        v247 *= *(v246 - 1);
        v249 *= *v246;
        v246 += 2;
        v248 -= 2;
      }
      while (v248);
      v102 = v249 * v247;
      if (v245 != (v245 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_236;
LABEL_237:
      v251 = v101 >> 3;
      if ((unint64_t)(v101 >> 3) <= 1)
        v251 = 1;
      if (v251 < 2)
      {
        v252 = 0;
        v253 = 0;
LABEL_244:
        v259 = v251 - v252;
        v260 = 8 * v252;
        v261 = &v657[v260];
        v262 = &v655[v260];
        do
        {
          v263 = *(_QWORD *)v262;
          v262 += 8;
          v264 = v263 - 1;
          v265 = *(_QWORD *)v261;
          v261 += 8;
          v253 += v265 * v264;
          --v259;
        }
        while (v259);
        goto LABEL_246;
      }
      v254 = 0;
      v255 = 0;
      v252 = v251 & 0xFFFFFFFFFFFFFFFELL;
      v256 = v655 + 8;
      v257 = v657 + 8;
      v258 = v251 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v254 += *(v257 - 1) * (*(v256 - 1) - 1);
        v255 += *v257 * (*v256 - 1);
        v256 += 2;
        v257 += 2;
        v258 -= 2;
      }
      while (v258);
      v253 = v255 + v254;
      if (v251 != v252)
        goto LABEL_244;
LABEL_246:
      if (v102 != v253 + 1)
LABEL_534:
        nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
LABEL_247:
      memset(v653, (int)v606, 4 * v93);
      v651 = 0;
      v652 = 0;
      v650 = 0;
      v266 = v604 - (_BYTE *)v603;
      if (v604 == v603)
      {
        v267 = 0;
        v269 = 0;
        v271 = 0;
      }
      else
      {
        if (v266 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v267 = (char *)operator new(v604 - (_BYTE *)v603);
        v268 = v266 >> 3;
        v269 = &v267[8 * (v266 >> 3)];
        v650 = v267;
        v652 = v269;
        v270 = v266 & 0xFFFFFFFFFFFFFFF8;
        bzero(v267, v266 & 0xFFFFFFFFFFFFFFF8);
        v266 = (int64_t)operator new(v266);
        v271 = v266 + 8 * v268;
        bzero((void *)v266, v270);
      }
      v272 = (char *)v607;
      if (v608 != v607)
      {
        v273 = (v608 - (_BYTE *)v607) >> 3;
        if (v273 <= 1)
          v273 = 1;
        if (v273 > 8)
        {
          v275 = v273 & 7;
          if ((v273 & 7) == 0)
            v275 = 8;
          v274 = v273 - v275;
          v276 = (const float *)((char *)v607 + 32);
          v277 = (_OWORD *)(v266 + 32);
          v278 = v274;
          do
          {
            v279 = v276 - 8;
            v280 = (unsigned __int128)vld2q_f32(v279);
            v281 = (unsigned __int128)vld2q_f32(v276);
            *(_QWORD *)&v282 = (int)v280;
            *((_QWORD *)&v282 + 1) = SDWORD1(v280);
            v283 = v282;
            *(_QWORD *)&v282 = SDWORD2(v280);
            *((_QWORD *)&v282 + 1) = SHIDWORD(v280);
            v284 = v282;
            *(_QWORD *)&v282 = (int)v281;
            *((_QWORD *)&v282 + 1) = SDWORD1(v281);
            v285 = v282;
            *(_QWORD *)&v282 = SDWORD2(v281);
            *((_QWORD *)&v282 + 1) = SHIDWORD(v281);
            *(v277 - 2) = v283;
            *(v277 - 1) = v284;
            *v277 = v285;
            v277[1] = v282;
            v277 += 4;
            v276 += 16;
            v278 -= 8;
          }
          while (v278);
        }
        else
        {
          v274 = 0;
        }
        v286 = v273 - v274;
        v287 = 8 * v274;
        v288 = (_QWORD *)(v266 + 8 * v274);
        v289 = &v272[v287];
        do
        {
          v290 = *(int *)v289;
          v289 += 8;
          *v288++ = v290;
          --v286;
        }
        while (v286);
      }
      if (v63)
      {
        v291 = 0;
        v292 = v269 - v267;
        v293 = (v269 - v267) >> 3;
        if (v293 <= 1)
          v293 = 1;
        v294 = (v271 - v266) >> 3;
        v295 = v294 - 1;
        if (v294 <= 1)
          v294 = 1;
        v296 = v653;
        v297 = v292 >> 3;
        v298 = (v292 >> 3);
        v299 = *(int *)&v272[8 * v295 + 4];
        v300 = v659;
        v301 = v649;
        v302 = v643;
        v303 = (char *)v645;
        v585 = (char *)v647;
        v589 = v657;
        v580 = (char *)v647 + 8;
        v576 = v657 + 8;
        v304 = v298 + 1;
        v305 = (v271 - v266) & 0xFFFFFFFFFFFFFFF8;
        v597 = v305 + v266 - 16;
        v593 = (uint64_t)&v272[v305 - 12];
        v306 = 8 * v295;
        while (1)
        {
          if (v269 == v267)
          {
            v307 = 0;
            goto LABEL_278;
          }
          if (v293 < 2)
            break;
          v309 = 0;
          v310 = 0;
          v311 = v293 & 0xFFFFFFFFFFFFFFFELL;
          v312 = v580;
          v313 = v267 + 8;
          do
          {
            v309 += *(v312 - 1) * *(v313 - 1);
            v310 += *v312 * *v313;
            v313 += 2;
            v312 += 2;
            v311 -= 2;
          }
          while (v311);
          v307 = v310 + v309;
          v308 = v293 & 0xFFFFFFFFFFFFFFFELL;
          if (v293 != (v293 & 0xFFFFFFFFFFFFFFFELL))
            goto LABEL_276;
LABEL_278:
          if (v271 == v266)
          {
            v321 = 0;
          }
          else
          {
            if (v294 >= 2)
            {
              v323 = 0;
              v324 = 0;
              v325 = v294 & 0xFFFFFFFFFFFFFFFELL;
              v327 = v576;
              v326 = (_QWORD *)(v266 + 8);
              do
              {
                v323 += *(v327 - 1) * *(v326 - 1);
                v324 += *v327 * *v326;
                v326 += 2;
                v327 += 2;
                v325 -= 2;
              }
              while (v325);
              v321 = v324 + v323;
              v322 = v294 & 0xFFFFFFFFFFFFFFFELL;
              if (v294 == (v294 & 0xFFFFFFFFFFFFFFFELL))
                goto LABEL_287;
            }
            else
            {
              v321 = 0;
              v322 = 0;
            }
            v328 = v294 - v322;
            v329 = 8 * v322;
            v330 = &v589[8 * v322];
            v331 = (uint64_t *)(v266 + v329);
            do
            {
              v333 = *v331++;
              v332 = v333;
              v334 = *(_QWORD *)v330;
              v330 += 8;
              v321 += v334 * v332;
              --v328;
            }
            while (v328);
          }
LABEL_287:
          _H0 = *(_WORD *)(v302 + 2 * (v307 + v301));
          __asm { FCVT            S0, H0 }
          v296[v321 + v300] = _S0;
          if ((int)v297 >= 1)
          {
            v341 = v304;
            do
            {
              v342 = 8 * (v341 - 2);
              v343 = *(_QWORD *)&v267[v342] + 1;
              *(_QWORD *)&v267[v342] = v343;
              if (v343 < *(_QWORD *)&v303[v342])
                break;
              *(_QWORD *)&v267[8 * (v341-- - 2)] = 0;
            }
            while (v341 > 1);
          }
          v344 = *(_QWORD *)(v266 + v306) + 1;
          *(_QWORD *)(v266 + v306) = v344;
          if (v344 >= v299)
          {
            v345 = (int *)v593;
            v346 = (_QWORD *)v597;
            do
            {
              v347 = *v346 + 2;
              *v346 = v347;
              v346[1] = 0;
              --v346;
              v348 = *v345;
              v345 -= 2;
            }
            while (v347 >= v348);
          }
          if (++v291 == v63)
            goto LABEL_295;
        }
        v307 = 0;
        v308 = 0;
LABEL_276:
        v314 = v293 - v308;
        v315 = 8 * v308;
        v316 = &v585[8 * v308];
        v317 = (uint64_t *)&v267[v315];
        do
        {
          v319 = *v317++;
          v318 = v319;
          v320 = *(_QWORD *)v316;
          v316 += 8;
          v307 += v320 * v318;
          --v314;
        }
        while (v314);
        goto LABEL_278;
      }
LABEL_295:
      nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v622, &v653);
      v238 = v583;
      if (v266)
        operator delete((void *)v266);
      if (v267)
        operator delete(v267);
      if (v657)
      {
        v658 = v657;
        operator delete(v657);
      }
      if (v655)
      {
        v656 = v655;
        operator delete(v655);
      }
      v349 = v654;
      if (v654)
      {
        v350 = (unint64_t *)&v654->__shared_owners_;
        do
          v351 = __ldaxr(v350);
        while (__stlxr(v351 - 1, v350));
        if (!v351)
        {
          ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
          std::__shared_weak_count::__release_weak(v349);
        }
      }
      if (v647)
      {
        v648 = v647;
        operator delete(v647);
      }
      if (v645)
      {
        v646 = v645;
        operator delete(v645);
      }
      v242 = v644;
      if (v644)
      {
        v352 = (unint64_t *)&v644->__shared_owners_;
        do
          v244 = __ldaxr(v352);
        while (__stlxr(v244 - 1, v352));
LABEL_481:
        if (!v244)
        {
          ((void (*)(std::__shared_weak_count *))v242->__on_zero_shared)(v242);
          std::__shared_weak_count::__release_weak(v242);
        }
      }
LABEL_483:
      if (v607)
      {
        v608 = (char *)v607;
        operator delete(v607);
      }
      if (v603)
      {
        v604 = (char *)v603;
        operator delete(v603);
      }
      if (v600)
      {
        v601 = (char *)v600;
        operator delete(v600);
      }
      *(_QWORD *)v238 = 0;
      *(_BYTE *)(v238 + 8) = 9;
      v557 = (_QWORD *)operator new();
      *v557 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v557 + 1));
      *(_QWORD *)v238 = v557;
      *v557 = 1;
      *((_DWORD *)v557 + 2) = v622;
      v559 = v623;
      v558 = v624;
      if (v624)
      {
        v560 = (unint64_t *)&v624->__shared_owners_;
        do
          v561 = __ldxr(v560);
        while (__stxr(v561 + 1, v560));
      }
      v562 = (std::__shared_weak_count *)v557[3];
      v557[2] = v559;
      v557[3] = v558;
      if (v562)
      {
        v563 = (unint64_t *)&v562->__shared_owners_;
        do
          v564 = __ldaxr(v563);
        while (__stlxr(v564 - 1, v563));
        if (!v564)
        {
          ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
          std::__shared_weak_count::__release_weak(v562);
        }
      }
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v557 + 4, (char *)v625, v626, (v626 - (_BYTE *)v625) >> 3);
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v557 + 7, (char *)v627, v628, (v628 - (_BYTE *)v627) >> 3);
      v565 = (char *)v627;
      v557[10] = v629;
      if (v565)
      {
        v628 = v565;
        operator delete(v565);
      }
      if (v625)
      {
        v626 = (char *)v625;
        operator delete(v625);
      }
      v566 = v624;
      if (v624)
      {
        v567 = (unint64_t *)&v624->__shared_owners_;
        do
          v568 = __ldaxr(v567);
        while (__stlxr(v568 - 1, v567));
        if (!v568)
        {
          ((void (*)(std::__shared_weak_count *))v566->__on_zero_shared)(v566);
          std::__shared_weak_count::__release_weak(v566);
        }
      }
      if (v610)
        operator delete(v610);
      if (v613)
        operator delete(v613);
      if (v616)
        operator delete(v616);
      if (v619)
        operator delete(v619);
      if (__p)
      {
        v635 = __p;
        operator delete(__p);
      }
      if (v632)
      {
        v633 = v632;
        operator delete(v632);
      }
      v569 = v631;
      if (v631)
      {
        v570 = (unint64_t *)&v631->__shared_owners_;
        do
          v571 = __ldaxr(v570);
        while (__stlxr(v571 - 1, v570));
        if (!v571)
        {
          ((void (*)(std::__shared_weak_count *))v569->__on_zero_shared)(v569);
          std::__shared_weak_count::__release_weak(v569);
        }
      }
      if (v640)
      {
        v641 = v640;
        operator delete(v640);
      }
      if (v638)
      {
        v639 = v638;
        operator delete(v638);
      }
      v572 = v637;
      if (v637)
      {
        v573 = (unint64_t *)&v637->__shared_owners_;
        do
          v574 = __ldaxr(v573);
        while (__stlxr(v574 - 1, v573));
        if (!v574)
        {
          ((void (*)(std::__shared_weak_count *))v572->__on_zero_shared)(v572);
          std::__shared_weak_count::__release_weak(v572);
        }
      }
      return;
    default:
      printf("%d\n", v630[0]);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_19129D550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a71;
  uint64_t v71;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v71 - 176));
  nitro::ndarray<float>::~ndarray(&a71);
  nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0((uint64_t)&a20);
  if (__p)
    operator delete(__p);
  if (a33)
    operator delete(a33);
  if (a36)
    operator delete(a36);
  if (a39)
    operator delete(a39);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a52);
  nitro::ndarray<float>::~ndarray(&a62);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::LogicalNot@<X0>(nitro::nitro_builtins *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = nitro::flexible_type::is_zero(this);
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)a2 = result;
  return result;
}

void nitro::nitro_builtins::Fill(nitro::nitro_builtins *this, const nitro::flexible_type *a2, const nitro::flexible_type *a3)
{
  std::vector<int> v4;

  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)this, &v4);
  __asm { BR              X10 }
}

void sub_19129D9C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,__int128 __p,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  uint64_t *v43;
  double v44;
  char *v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  uint64_t *v49;
  unint64_t v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  float v88;
  BOOL v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  void *v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t *v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;

  v44 = (double)*v43;
  v45 = v123;
  v125 = 0uLL;
  v124 = 0;
  v46 = v123 - v122;
  if (v123 != v122)
  {
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v47 = (uint64_t *)operator new(2 * v46);
    v124 = v47;
    *((_QWORD *)&v125 + 1) = &v47[v46 >> 2];
    v48 = v122;
    v49 = v47;
    if ((unint64_t)(v46 - 4) < 0x1C)
      goto LABEL_82;
    v50 = ((unint64_t)(v46 - 4) >> 2) + 1;
    v48 = &v122[4 * (v50 & 0x7FFFFFFFFFFFFFF8)];
    v49 = &v47[v50 & 0x7FFFFFFFFFFFFFF8];
    v51 = v47 + 4;
    v52 = v122 + 16;
    v53 = v50 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v54 = *((_OWORD *)v52 - 1);
      *(_QWORD *)&v55 = (int)v54;
      *((_QWORD *)&v55 + 1) = SDWORD1(v54);
      v56 = v55;
      *(_QWORD *)&v55 = SDWORD2(v54);
      *((_QWORD *)&v55 + 1) = SHIDWORD(v54);
      v57 = v55;
      *(_QWORD *)&v55 = (int)*(_OWORD *)v52;
      *((_QWORD *)&v55 + 1) = (int)HIDWORD(*(_QWORD *)v52);
      v58 = v55;
      *(_QWORD *)&v55 = (int)*((_QWORD *)v52 + 1);
      *((_QWORD *)&v55 + 1) = (int)HIDWORD(*(_OWORD *)v52);
      *(v51 - 2) = v56;
      *(v51 - 1) = v57;
      *v51 = v58;
      v51[1] = v55;
      v51 += 4;
      v52 += 32;
      v53 -= 8;
    }
    while (v53);
    if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_82:
      do
      {
        v59 = *(int *)v48;
        v48 += 4;
        *v49++ = v59;
      }
      while (v48 != v45);
    }
    *(_QWORD *)&v125 = v49;
  }
  nitro::ndarray<float>::init_from_shape(&v124, &v115);
  if (v124)
  {
    *(_QWORD *)&v125 = v124;
    operator delete(v124);
  }
  if (v121)
    goto LABEL_78;
  v61 = v117;
  v60 = v118;
  v62 = v115;
  v63 = v118 - v117;
  if (v118 != v117)
  {
    if (!v115)
    {
      v64 = 0;
      goto LABEL_22;
    }
    if ((unint64_t)(v63 - 8) >= 8)
    {
      v66 = ((unint64_t)(v63 - 8) >> 3) + 1;
      v65 = &v117[8 * (v66 & 0x3FFFFFFFFFFFFFFELL)];
      v67 = v117 + 8;
      v68 = 1;
      v69 = v66 & 0x3FFFFFFFFFFFFFFELL;
      v70 = 1;
      do
      {
        v68 *= *(v67 - 1);
        v70 *= *v67;
        v67 += 2;
        v69 -= 2;
      }
      while (v69);
      v64 = v70 * v68;
      if (v66 == (v66 & 0x3FFFFFFFFFFFFFFELL))
      {
LABEL_22:
        v72 = v63 >> 3;
        if ((unint64_t)(v63 >> 3) <= 1)
          v72 = 1;
        if (v72 >= 2)
        {
          v75 = 0;
          v76 = 0;
          v73 = v72 & 0xFFFFFFFFFFFFFFFELL;
          v77 = v117 + 8;
          v78 = v119 + 8;
          v79 = v72 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v75 += *(v78 - 1) * (*(v77 - 1) - 1);
            v76 += *v78 * (*v77 - 1);
            v77 += 2;
            v78 += 2;
            v79 -= 2;
          }
          while (v79);
          v74 = v76 + v75;
          if (v72 == v73)
          {
LABEL_31:
            if (v64 == v74 + 1)
              goto LABEL_32;
LABEL_78:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          }
        }
        else
        {
          v73 = 0;
          v74 = 0;
        }
        v80 = v72 - v73;
        v81 = 8 * v73;
        v82 = &v119[v81];
        v83 = &v117[v81];
        do
        {
          v84 = *(_QWORD *)v83;
          v83 += 8;
          v85 = v84 - 1;
          v86 = *(_QWORD *)v82;
          v82 += 8;
          v74 += v86 * v85;
          --v80;
        }
        while (v80);
        goto LABEL_31;
      }
    }
    else
    {
      v64 = 1;
      v65 = v117;
    }
    do
    {
      v71 = *(_QWORD *)v65;
      v65 += 8;
      v64 *= v71;
    }
    while (v65 != v118);
    goto LABEL_22;
  }
  v61 = v118;
LABEL_32:
  v87 = 0;
  v90 = v118 == v61 || v115 == 0;
  v91 = v118 - v61 - 8;
  v92 = (v91 >> 3) + 1;
  if (!v90)
    goto LABEL_41;
LABEL_48:
  v93 = 0;
  while (v87 < v93)
  {
    v88 = v44;
    *(float *)(v62 + 4 * v87++) = v88;
    if (v90)
      goto LABEL_48;
LABEL_41:
    if (v91 < 8)
    {
      v93 = 1;
      v94 = v61;
      goto LABEL_46;
    }
    v95 = v92 & 0x3FFFFFFFFFFFFFFELL;
    v96 = v61 + 8;
    v97 = 1;
    v98 = 1;
    do
    {
      v97 *= *(v96 - 1);
      v98 *= *v96;
      v96 += 2;
      v95 -= 2;
    }
    while (v95);
    v93 = v98 * v97;
    v94 = &v61[8 * (v92 & 0x3FFFFFFFFFFFFFFELL)];
    if (v92 != (v92 & 0x3FFFFFFFFFFFFFFELL))
    {
      do
      {
LABEL_46:
        v99 = *(_QWORD *)v94;
        v94 += 8;
        v93 *= v99;
      }
      while (v94 != v60);
    }
  }
  nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v124, &v115);
  *(_QWORD *)v42 = 0;
  *(_BYTE *)(v42 + 8) = 9;
  v100 = operator new();
  *(_QWORD *)v100 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v100 + 8));
  *(_QWORD *)v42 = v100;
  *(_QWORD *)v100 = 1;
  *(_DWORD *)(v100 + 8) = (_DWORD)v124;
  v101 = v125;
  v125 = 0uLL;
  v102 = *(std::__shared_weak_count **)(v100 + 24);
  *(_OWORD *)(v100 + 16) = v101;
  if (v102)
  {
    p_shared_owners = (unint64_t *)&v102->__shared_owners_;
    do
      v104 = __ldaxr(p_shared_owners);
    while (__stlxr(v104 - 1, p_shared_owners));
    if (!v104)
    {
      ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
      std::__shared_weak_count::__release_weak(v102);
    }
  }
  v105 = *(void **)(v100 + 32);
  if (v105)
  {
    *(_QWORD *)(v100 + 40) = v105;
    operator delete(v105);
    *(_QWORD *)(v100 + 32) = 0;
    *(_QWORD *)(v100 + 40) = 0;
    *(_QWORD *)(v100 + 48) = 0;
  }
  v106 = *(void **)(v100 + 56);
  *(_OWORD *)(v100 + 32) = v126;
  *(_QWORD *)(v100 + 48) = v127;
  v127 = 0;
  v126 = 0uLL;
  if (v106)
  {
    *(_QWORD *)(v100 + 64) = v106;
    operator delete(v106);
    *(_QWORD *)(v100 + 56) = 0;
    *(_QWORD *)(v100 + 64) = 0;
    *(_QWORD *)(v100 + 72) = 0;
    v106 = (void *)v126;
  }
  *(_OWORD *)(v100 + 56) = v128;
  v107 = v129;
  v108 = v130;
  v129 = 0;
  v128 = 0uLL;
  *(_QWORD *)(v100 + 72) = v107;
  *(_QWORD *)(v100 + 80) = v108;
  if (v106)
  {
    *((_QWORD *)&v126 + 1) = v106;
    operator delete(v106);
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)&v125 + 1);
  if (*((_QWORD *)&v125 + 1))
  {
    v110 = (unint64_t *)(*((_QWORD *)&v125 + 1) + 8);
    do
      v111 = __ldaxr(v110);
    while (__stlxr(v111 - 1, v110));
    if (!v111)
    {
      ((void (*)(std::__shared_weak_count *))v109->__on_zero_shared)(v109);
      std::__shared_weak_count::__release_weak(v109);
    }
  }
  if (v119)
  {
    v120 = v119;
    operator delete(v119);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  v112 = v116;
  if (v116)
  {
    v113 = (unint64_t *)&v116->__shared_owners_;
    do
      v114 = __ldaxr(v113);
    while (__stlxr(v114 - 1, v113));
    if (!v114)
    {
      ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
      std::__shared_weak_count::__release_weak(v112);
    }
  }
  if (v122)
  {
    v123 = v122;
    operator delete(v122);
  }
}

void sub_19129E19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  nitro::ndarray<float>::~ndarray(&a9);
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Squeeze(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  int64_t v8;
  _OWORD *v9;
  std::vector<int>::pointer v10;
  _QWORD *v11;
  unint64_t v12;
  _OWORD *v13;
  std::vector<int>::pointer v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  void *v48;
  char *v49;
  int v50;
  __int128 v51;
  void *__p[2];
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[16];
  std::__shared_weak_count *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  std::vector<int> v63;

  nitro::flexible_type_converter<std::vector<int>>::get((unsigned __int8 *)a2, &v63);
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v57, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
  begin = v63.__begin_;
  end = v63.__end_;
  v8 = (char *)v63.__end_ - (char *)v63.__begin_;
  if (v63.__end_ == v63.__begin_)
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    nitro::ndarray_container::squeeze((uint64_t)v57, &v47, (uint64_t)&v50);
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 9;
    v34 = operator new();
    *(_QWORD *)v34 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v34 + 8));
    *(_QWORD *)a3 = v34;
    *(_QWORD *)v34 = 1;
    *(_DWORD *)(v34 + 8) = v50;
    v35 = v51;
    v51 = 0uLL;
    v36 = *(std::__shared_weak_count **)(v34 + 24);
    *(_OWORD *)(v34 + 16) = v35;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    v39 = *(void **)(v34 + 32);
    if (v39)
    {
      *(_QWORD *)(v34 + 40) = v39;
      operator delete(v39);
      *(_QWORD *)(v34 + 32) = 0;
      *(_QWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
    }
    v40 = *(void **)(v34 + 56);
    *(_OWORD *)(v34 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(v34 + 48) = v53;
    __p[1] = 0;
    v53 = 0;
    __p[0] = 0;
    if (v40)
    {
      *(_QWORD *)(v34 + 64) = v40;
      operator delete(v40);
      *(_QWORD *)(v34 + 56) = 0;
      *(_QWORD *)(v34 + 64) = 0;
      *(_QWORD *)(v34 + 72) = 0;
      v40 = __p[0];
    }
    *(_OWORD *)(v34 + 56) = v54;
    v41 = v55;
    v42 = v56;
    v55 = 0;
    v54 = 0uLL;
    *(_QWORD *)(v34 + 72) = v41;
    *(_QWORD *)(v34 + 80) = v42;
    if (v40)
    {
      __p[1] = v40;
      operator delete(v40);
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v33 = __ldaxr(v43);
      while (__stlxr(v33 - 1, v43));
LABEL_37:
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v49 = 0;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = operator new(2 * v8);
    v47 = v9;
    v49 = (char *)v9 + 8 * (v8 >> 2);
    v10 = begin;
    v11 = v9;
    if ((unint64_t)(v8 - 4) < 0x1C)
      goto LABEL_56;
    v12 = ((unint64_t)(v8 - 4) >> 2) + 1;
    v10 = &begin[v12 & 0x7FFFFFFFFFFFFFF8];
    v11 = (_QWORD *)v9 + (v12 & 0x7FFFFFFFFFFFFFF8);
    v13 = v9 + 2;
    v14 = begin + 4;
    v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v16 = *((_OWORD *)v14 - 1);
      *(_QWORD *)&v17 = (int)v16;
      *((_QWORD *)&v17 + 1) = SDWORD1(v16);
      v18 = v17;
      *(_QWORD *)&v17 = SDWORD2(v16);
      *((_QWORD *)&v17 + 1) = SHIDWORD(v16);
      v19 = v17;
      *(_QWORD *)&v17 = (int)*(_OWORD *)v14;
      *((_QWORD *)&v17 + 1) = (int)HIDWORD(*(_QWORD *)v14);
      v20 = v17;
      *(_QWORD *)&v17 = (int)*((_QWORD *)v14 + 1);
      *((_QWORD *)&v17 + 1) = (int)HIDWORD(*(_OWORD *)v14);
      *(v13 - 2) = v18;
      *(v13 - 1) = v19;
      *v13 = v20;
      v13[1] = v17;
      v13 += 4;
      v14 += 8;
      v15 -= 8;
    }
    while (v15);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_56:
      do
      {
        v21 = *v10++;
        *v11++ = v21;
      }
      while (v10 != end);
    }
    v48 = v11;
    nitro::ndarray_container::squeeze((uint64_t)v57, &v47, (uint64_t)&v50);
    *(_QWORD *)a3 = 0;
    *(_BYTE *)(a3 + 8) = 9;
    v22 = operator new();
    *(_QWORD *)v22 = 0;
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v22 + 8));
    *(_QWORD *)a3 = v22;
    *(_QWORD *)v22 = 1;
    *(_DWORD *)(v22 + 8) = v50;
    v23 = v51;
    v51 = 0uLL;
    v24 = *(std::__shared_weak_count **)(v22 + 24);
    *(_OWORD *)(v22 + 16) = v23;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = *(void **)(v22 + 32);
    if (v27)
    {
      *(_QWORD *)(v22 + 40) = v27;
      operator delete(v27);
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
    }
    v28 = *(void **)(v22 + 56);
    *(_OWORD *)(v22 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(v22 + 48) = v53;
    __p[1] = 0;
    v53 = 0;
    __p[0] = 0;
    if (v28)
    {
      *(_QWORD *)(v22 + 64) = v28;
      operator delete(v28);
      *(_QWORD *)(v22 + 56) = 0;
      *(_QWORD *)(v22 + 64) = 0;
      *(_QWORD *)(v22 + 72) = 0;
      v28 = __p[0];
    }
    *(_OWORD *)(v22 + 56) = v54;
    v29 = v55;
    v30 = v56;
    v55 = 0;
    v54 = 0uLL;
    *(_QWORD *)(v22 + 72) = v29;
    *(_QWORD *)(v22 + 80) = v30;
    if (v28)
    {
      __p[1] = v28;
      operator delete(v28);
    }
    v31 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
    if (*((_QWORD *)&v51 + 1))
    {
      v32 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      goto LABEL_37;
    }
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v61)
  {
    v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  v44 = v58;
  if (v58)
  {
    v45 = (unint64_t *)&v58->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  if (v63.__begin_)
  {
    v63.__end_ = v63.__begin_;
    operator delete(v63.__begin_);
  }
}

void sub_19129E73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unint64_t v28;
  void *v29;

  v25 = v23;
  MEMORY[0x19401CD90](v25, 0x10B0C4002311774);
  do
  {
    v27 = __ldaxr(0);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, 0));
  if (!v28)
    nitro::nitro_builtins::Range(v22);
  *(_QWORD *)v22 = 0;
  *(_BYTE *)(v22 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a12);
  if (__p)
    operator delete(__p);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a22);
  v29 = *(void **)(v24 - 72);
  if (v29)
  {
    *(_QWORD *)(v24 - 64) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Tanh(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  long double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  double v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float *v42;
  unint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int16 *v50;
  unint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  unint64_t *p_shared_owners;
  uint64_t v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *__p;
  void *v86;
  uint64_t v87;
  int v88;
  __int128 v89;
  void *v90[2];
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;

  if (*((_BYTE *)this + 8) == 1)
  {
    v4 = *(double *)this;
    goto LABEL_5;
  }
  if (!*((_BYTE *)this + 8))
  {
    v4 = (double)*(uint64_t *)this;
LABEL_5:
    v5 = tanh(v4);
    *(_BYTE *)(a3 + 8) = 1;
    *(long double *)a3 = v5;
    return;
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)this + 8), (uint64_t)&v79);
  nitro::ndarray_container::copy((nitro::ndarray_container *)&v79, (uint64_t)&v88);
  if (__p)
  {
    v86 = __p;
    operator delete(__p);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  v6 = (std::__shared_weak_count *)v81;
  if (v81)
  {
    v7 = (unint64_t *)((char *)v81 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  switch(v88)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v79, (uint64_t)&v88);
      v9 = v81;
      if (v82 == v81 || !v79)
        goto LABEL_85;
      v10 = (_BYTE *)v82 - (_BYTE *)v81 - 8;
      if (v10 < 8)
      {
        v11 = 1;
        v12 = (uint64_t *)v81;
        do
        {
LABEL_81:
          v64 = *v12++;
          v11 *= v64;
        }
        while (v12 != v82);
        goto LABEL_82;
      }
      v59 = (v10 >> 3) + 1;
      v12 = (uint64_t *)((char *)v81 + 8 * (v59 & 0x3FFFFFFFFFFFFFFELL));
      v60 = (char *)v81 + 8;
      v61 = 1;
      v62 = v59 & 0x3FFFFFFFFFFFFFFELL;
      v63 = 1;
      do
      {
        v61 *= *(v60 - 1);
        v63 *= *v60;
        v60 += 2;
        v62 -= 2;
      }
      while (v62);
      v11 = v63 * v61;
      if (v59 != (v59 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_81;
LABEL_82:
      if (v11)
      {
        v65 = (int *)(v79 + 4 * v87);
        do
        {
          *v65 = (int)tanh((double)*v65);
          ++v65;
          --v11;
        }
        while (v11);
      }
LABEL_85:
      if (v84)
      {
        __p = v84;
        operator delete(v84);
        v9 = v81;
      }
      if (v9)
      {
        v82 = v9;
        operator delete(v9);
      }
      v33 = v80;
      if (!v80)
        goto LABEL_94;
      p_shared_owners = (unint64_t *)&v80->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      goto LABEL_92;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v79, (uint64_t)&v88);
      if (v82 == v81 || !v79)
        goto LABEL_40;
      v22 = (_BYTE *)v82 - (_BYTE *)v81 - 8;
      if (v22 < 8)
      {
        v23 = 1;
        v24 = (uint64_t *)v81;
        do
        {
LABEL_36:
          v30 = *v24++;
          v23 *= v30;
        }
        while (v24 != v82);
        goto LABEL_37;
      }
      v25 = (v22 >> 3) + 1;
      v24 = (uint64_t *)((char *)v81 + 8 * (v25 & 0x3FFFFFFFFFFFFFFELL));
      v26 = (char *)v81 + 8;
      v27 = 1;
      v28 = v25 & 0x3FFFFFFFFFFFFFFELL;
      v29 = 1;
      do
      {
        v27 *= *(v26 - 1);
        v29 *= *v26;
        v26 += 2;
        v28 -= 2;
      }
      while (v28);
      v23 = v29 * v27;
      if (v25 != (v25 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_36;
LABEL_37:
      if (v23)
      {
        for (i = 0; i != v23; ++i)
        {
          v32 = v79 + v87;
          LOBYTE(v21) = *(_BYTE *)(v79 + v87 + i);
          v21 = tanh((double)*(unint64_t *)&v21);
          *(_BYTE *)(v32 + i) = (int)v21;
        }
      }
LABEL_40:
      if (v84)
      {
        __p = v84;
        operator delete(v84);
      }
      if (v81)
      {
        v82 = v81;
        operator delete(v81);
      }
      v33 = v80;
      if (!v80)
        goto LABEL_94;
      v34 = (unint64_t *)&v80->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_92;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v79, (uint64_t)&v88);
      v13 = v81;
      if (v82 == v81 || !v79)
        goto LABEL_55;
      v14 = (_BYTE *)v82 - (_BYTE *)v81 - 8;
      if (v14 < 8)
      {
        v15 = 1;
        v16 = (uint64_t *)v81;
        do
        {
LABEL_51:
          v41 = *v16++;
          v15 *= v41;
        }
        while (v16 != v82);
        goto LABEL_52;
      }
      v36 = (v14 >> 3) + 1;
      v16 = (uint64_t *)((char *)v81 + 8 * (v36 & 0x3FFFFFFFFFFFFFFELL));
      v37 = (char *)v81 + 8;
      v38 = 1;
      v39 = v36 & 0x3FFFFFFFFFFFFFFELL;
      v40 = 1;
      do
      {
        v38 *= *(v37 - 1);
        v40 *= *v37;
        v37 += 2;
        v39 -= 2;
      }
      while (v39);
      v15 = v40 * v38;
      if (v36 != (v36 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_51;
LABEL_52:
      if (v15)
      {
        v42 = (float *)(v79 + 4 * v87);
        do
        {
          *v42 = tanhf(*v42);
          ++v42;
          --v15;
        }
        while (v15);
      }
LABEL_55:
      if (v84)
      {
        __p = v84;
        operator delete(v84);
        v13 = v81;
      }
      if (v13)
      {
        v82 = v13;
        operator delete(v13);
      }
      v33 = v80;
      if (!v80)
        goto LABEL_94;
      v43 = (unint64_t *)&v80->__shared_owners_;
      do
        v35 = __ldaxr(v43);
      while (__stlxr(v35 - 1, v43));
      goto LABEL_92;
    case 11:
      nitro::ndarray<half>::ndarray((uint64_t)&v79, (uint64_t)&v88);
      v17 = v81;
      if (v82 == v81 || !v79)
        goto LABEL_70;
      v18 = (_BYTE *)v82 - (_BYTE *)v81 - 8;
      if (v18 < 8)
      {
        v19 = 1;
        v20 = (uint64_t *)v81;
        do
        {
LABEL_66:
          v49 = *v20++;
          v19 *= v49;
        }
        while (v20 != v82);
        goto LABEL_67;
      }
      v44 = (v18 >> 3) + 1;
      v20 = (uint64_t *)((char *)v81 + 8 * (v44 & 0x3FFFFFFFFFFFFFFELL));
      v45 = (char *)v81 + 8;
      v46 = 1;
      v47 = v44 & 0x3FFFFFFFFFFFFFFELL;
      v48 = 1;
      do
      {
        v46 *= *(v45 - 1);
        v48 *= *v45;
        v45 += 2;
        v47 -= 2;
      }
      while (v47);
      v19 = v48 * v46;
      if (v44 != (v44 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_66;
LABEL_67:
      if (v19)
      {
        v50 = (__int16 *)(v79 + 2 * v87);
        do
        {
          _H0 = *v50;
          __asm { FCVT            S0, H0; float }
          _S0 = tanhf(_S0);
          __asm { FCVT            H0, S0 }
          *v50++ = LOWORD(_S0);
          --v19;
        }
        while (v19);
      }
LABEL_70:
      if (v84)
      {
        __p = v84;
        operator delete(v84);
        v17 = v81;
      }
      if (v17)
      {
        v82 = v17;
        operator delete(v17);
      }
      v33 = v80;
      if (v80)
      {
        v58 = (unint64_t *)&v80->__shared_owners_;
        do
          v35 = __ldaxr(v58);
        while (__stlxr(v35 - 1, v58));
LABEL_92:
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
LABEL_94:
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 9;
      v67 = operator new();
      *(_QWORD *)v67 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v67 + 8));
      *(_QWORD *)a3 = v67;
      *(_QWORD *)v67 = 1;
      *(_DWORD *)(v67 + 8) = v88;
      v68 = v89;
      v89 = 0uLL;
      v69 = *(std::__shared_weak_count **)(v67 + 24);
      *(_OWORD *)(v67 + 16) = v68;
      if (v69)
      {
        v70 = (unint64_t *)&v69->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      v72 = *(void **)(v67 + 32);
      if (v72)
      {
        *(_QWORD *)(v67 + 40) = v72;
        operator delete(v72);
        *(_QWORD *)(v67 + 32) = 0;
        *(_QWORD *)(v67 + 40) = 0;
        *(_QWORD *)(v67 + 48) = 0;
      }
      v73 = *(void **)(v67 + 56);
      *(_OWORD *)(v67 + 32) = *(_OWORD *)v90;
      *(_QWORD *)(v67 + 48) = v91;
      v90[1] = 0;
      v91 = 0;
      v90[0] = 0;
      if (v73)
      {
        *(_QWORD *)(v67 + 64) = v73;
        operator delete(v73);
        *(_QWORD *)(v67 + 56) = 0;
        *(_QWORD *)(v67 + 64) = 0;
        *(_QWORD *)(v67 + 72) = 0;
        v73 = v90[0];
      }
      *(_OWORD *)(v67 + 56) = v92;
      v74 = v93;
      v75 = v94;
      v93 = 0;
      v92 = 0uLL;
      *(_QWORD *)(v67 + 72) = v74;
      *(_QWORD *)(v67 + 80) = v75;
      if (v73)
      {
        v90[1] = v73;
        operator delete(v73);
      }
      v76 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
      if (*((_QWORD *)&v89 + 1))
      {
        v77 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
          std::__shared_weak_count::__release_weak(v76);
        }
      }
      return;
    default:
      printf("%d\n", v88);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Tanh(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Tanh(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_19129EE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  va_list va;

  va_start(va, a13);
  MEMORY[0x19401CD90](v14, 0x10B0C4002311774);
  do
  {
    v16 = __ldaxr(0);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, 0));
  if (!v17)
    nitro::nitro_builtins::Range(v13);
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)va);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Cos(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  long double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float *v67;
  unint64_t *v68;
  float16x8_t *v69;
  unint64_t v70;
  float32x4_t v71;
  float v72;
  float32x4_t v73;
  float v74;
  float32x4_t v75;
  float32x4_t v76;
  float v77;
  float32x4_t v78;
  float v79;
  float32x4_t v80;
  unint64_t v81;
  __int16 *v82;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  int64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  unint64_t v96;
  int *v97;
  unint64_t *p_shared_owners;
  uint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  float32x4_t __x;
  float32x4_t __xa;
  float32x4_t __xb;
  float64x2_t __xc;
  float v115;
  float32x4_t v116;
  long double v117;
  float64x2_t v118;
  float v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float64x2_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *__p;
  void *v132;
  uint64_t v133;
  int v134;
  __int128 v135;
  void *v136[2];
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;

  if (*((_BYTE *)this + 8) == 1)
  {
    v4 = *(double *)this;
    goto LABEL_5;
  }
  if (!*((_BYTE *)this + 8))
  {
    v4 = (double)*(uint64_t *)this;
LABEL_5:
    v5 = cos(v4);
    *(_BYTE *)(a3 + 8) = 1;
    *(long double *)a3 = v5;
    return;
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)this + 8), (uint64_t)&v125);
  nitro::ndarray_container::copy((nitro::ndarray_container *)&v125, (uint64_t)&v134);
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  v6 = (std::__shared_weak_count *)v127;
  if (v127)
  {
    v7 = (unint64_t *)((char *)v127 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  switch(v134)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      v9 = v127;
      if (v128 == v127)
        goto LABEL_100;
      v10 = v125;
      if (!v125)
        goto LABEL_100;
      v11 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v11 < 8)
      {
        v12 = 1;
        v13 = (uint64_t *)v127;
        do
        {
LABEL_65:
          v60 = *v13++;
          v12 *= v60;
        }
        while (v13 != v128);
        goto LABEL_66;
      }
      v55 = (v11 >> 3) + 1;
      v13 = (uint64_t *)((char *)v127 + 8 * (v55 & 0x3FFFFFFFFFFFFFFELL));
      v56 = (char *)v127 + 8;
      v57 = 1;
      v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
      v59 = 1;
      do
      {
        v57 *= *(v56 - 1);
        v59 *= *v56;
        v56 += 2;
        v58 -= 2;
      }
      while (v58);
      v12 = v59 * v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_65;
LABEL_66:
      if (!v12)
        goto LABEL_100;
      v61 = v133;
      if (v12 < 4)
      {
        v62 = 0;
LABEL_98:
        v96 = v12 - v62;
        v97 = (int *)(v10 + 4 * (v62 + v61));
        do
        {
          *v97 = (int)cos((double)*v97);
          ++v97;
          --v96;
        }
        while (v96);
        goto LABEL_100;
      }
      v62 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      v91 = v125 + 4 * v133;
      v92 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v93.i64[0] = (int)*(_QWORD *)(v91 + 8);
        v93.i64[1] = (int)HIDWORD(*(_OWORD *)v91);
        v124 = vcvtq_f64_s64(v93);
        v93.i64[0] = (int)*(_OWORD *)v91;
        v93.i64[1] = (int)HIDWORD(*(_QWORD *)v91);
        __xc = vcvtq_f64_s64(v93);
        v117 = cos(__xc.f64[1]);
        v94.f64[0] = cos(__xc.f64[0]);
        v94.f64[1] = v117;
        v118 = v94;
        __xc.f64[0] = cos(v124.f64[1]);
        v95.f64[0] = cos(v124.f64[0]);
        v95.f64[1] = __xc.f64[0];
        *(int32x4_t *)v91 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v118), (int32x4_t)vcvtq_s64_f64(v95));
        v91 += 16;
        v92 -= 4;
      }
      while (v92);
      if (v12 != v62)
        goto LABEL_98;
LABEL_100:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
        v9 = v127;
      }
      if (v9)
      {
        v128 = v9;
        operator delete(v9);
      }
      v36 = v126;
      if (!v126)
        goto LABEL_109;
      p_shared_owners = (unint64_t *)&v126->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      goto LABEL_107;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      if (v128 == v127 || !v125)
        goto LABEL_40;
      v25 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v25 < 8)
      {
        v26 = 1;
        v27 = (uint64_t *)v127;
        do
        {
LABEL_36:
          v33 = *v27++;
          v26 *= v33;
        }
        while (v27 != v128);
        goto LABEL_37;
      }
      v28 = (v25 >> 3) + 1;
      v27 = (uint64_t *)((char *)v127 + 8 * (v28 & 0x3FFFFFFFFFFFFFFELL));
      v29 = (char *)v127 + 8;
      v30 = 1;
      v31 = v28 & 0x3FFFFFFFFFFFFFFELL;
      v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      v26 = v32 * v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_36;
LABEL_37:
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v35 = v125 + v133;
          LOBYTE(v24) = *(_BYTE *)(v125 + v133 + i);
          v24 = cos((double)*(unint64_t *)&v24);
          *(_BYTE *)(v35 + i) = (int)v24;
        }
      }
LABEL_40:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
      }
      if (v127)
      {
        v128 = v127;
        operator delete(v127);
      }
      v36 = v126;
      if (!v126)
        goto LABEL_109;
      v37 = (unint64_t *)&v126->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_107;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      v14 = v127;
      if (v128 == v127)
        goto LABEL_74;
      v15 = v125;
      if (!v125)
        goto LABEL_74;
      v16 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v16 < 8)
      {
        v17 = 1;
        v18 = (uint64_t *)v127;
        do
        {
LABEL_51:
          v44 = *v18++;
          v17 *= v44;
        }
        while (v18 != v128);
        goto LABEL_52;
      }
      v39 = (v16 >> 3) + 1;
      v18 = (uint64_t *)((char *)v127 + 8 * (v39 & 0x3FFFFFFFFFFFFFFELL));
      v40 = (char *)v127 + 8;
      v41 = 1;
      v42 = v39 & 0x3FFFFFFFFFFFFFFELL;
      v43 = 1;
      do
      {
        v41 *= *(v40 - 1);
        v43 *= *v40;
        v40 += 2;
        v42 -= 2;
      }
      while (v42);
      v17 = v43 * v41;
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_51;
LABEL_52:
      if (!v17)
        goto LABEL_74;
      v45 = v133;
      if (v17 == 1)
      {
        v46 = 0;
LABEL_72:
        v66 = v17 - v46;
        v67 = (float *)(v15 + 4 * (v46 + v45));
        do
        {
          *v67 = cosf(*v67);
          ++v67;
          --v66;
        }
        while (v66);
        goto LABEL_74;
      }
      v46 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v63 = (_QWORD *)(v125 + 4 * v133);
      v64 = v17 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        LODWORD(v115) = *v63;
        v119 = cosf(COERCE_FLOAT(HIDWORD(*v63)));
        *(float *)&v65 = cosf(v115);
        *((float *)&v65 + 1) = v119;
        *v63++ = v65;
        v64 -= 2;
      }
      while (v64);
      if (v17 != v46)
        goto LABEL_72;
LABEL_74:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
        v14 = v127;
      }
      if (v14)
      {
        v128 = v14;
        operator delete(v14);
      }
      v36 = v126;
      if (!v126)
        goto LABEL_109;
      v68 = (unint64_t *)&v126->__shared_owners_;
      do
        v38 = __ldaxr(v68);
      while (__stlxr(v38 - 1, v68));
      goto LABEL_107;
    case 11:
      nitro::ndarray<half>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      v19 = v127;
      if (v128 == v127)
        goto LABEL_87;
      v20 = v125;
      if (!v125)
        goto LABEL_87;
      v21 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v21 < 8)
      {
        v22 = 1;
        v23 = (uint64_t *)v127;
        do
        {
LABEL_58:
          v52 = *v23++;
          v22 *= v52;
        }
        while (v23 != v128);
        goto LABEL_59;
      }
      v47 = (v21 >> 3) + 1;
      v23 = (uint64_t *)((char *)v127 + 8 * (v47 & 0x3FFFFFFFFFFFFFFELL));
      v48 = (char *)v127 + 8;
      v49 = 1;
      v50 = v47 & 0x3FFFFFFFFFFFFFFELL;
      v51 = 1;
      do
      {
        v49 *= *(v48 - 1);
        v51 *= *v48;
        v48 += 2;
        v50 -= 2;
      }
      while (v50);
      v22 = v51 * v49;
      if (v47 != (v47 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_58;
LABEL_59:
      if (!v22)
        goto LABEL_87;
      v53 = v133;
      if (v22 < 8)
      {
        v54 = 0;
LABEL_85:
        v81 = v22 - v54;
        v82 = (__int16 *)(v20 + 2 * (v54 + v53));
        do
        {
          _H0 = *v82;
          __asm { FCVT            S0, H0; float }
          _S0 = cosf(_S0);
          __asm { FCVT            H0, S0 }
          *v82++ = LOWORD(_S0);
          --v81;
        }
        while (v81);
        goto LABEL_87;
      }
      v54 = v22 & 0xFFFFFFFFFFFFFFF8;
      v69 = (float16x8_t *)(v125 + 2 * v133);
      v70 = v22 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        __x = vcvt_hight_f32_f16(*v69);
        v116 = vcvtq_f32_f16(*(float16x4_t *)v69->i8);
        v120 = cosf(__x.f32[1]);
        v71.f32[0] = cosf(__x.f32[0]);
        v71.f32[1] = v120;
        v121 = v71;
        v72 = cosf(__x.f32[2]);
        v73 = v121;
        v73.f32[2] = v72;
        v122 = v73;
        v74 = cosf(__x.f32[3]);
        v75 = v122;
        v75.f32[3] = v74;
        v123 = v75;
        __x.i32[0] = cosf(v116.f32[1]);
        v76.f32[0] = cosf(v116.f32[0]);
        v76.i32[1] = __x.i32[0];
        __xa = v76;
        v77 = cosf(v116.f32[2]);
        v78 = __xa;
        v78.f32[2] = v77;
        __xb = v78;
        v79 = cosf(v116.f32[3]);
        v80 = __xb;
        v80.f32[3] = v79;
        *v69++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v80), v123);
        v70 -= 8;
      }
      while (v70);
      if (v22 != v54)
        goto LABEL_85;
LABEL_87:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
        v19 = v127;
      }
      if (v19)
      {
        v128 = v19;
        operator delete(v19);
      }
      v36 = v126;
      if (v126)
      {
        v90 = (unint64_t *)&v126->__shared_owners_;
        do
          v38 = __ldaxr(v90);
        while (__stlxr(v38 - 1, v90));
LABEL_107:
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
LABEL_109:
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 9;
      v99 = operator new();
      *(_QWORD *)v99 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v99 + 8));
      *(_QWORD *)a3 = v99;
      *(_QWORD *)v99 = 1;
      *(_DWORD *)(v99 + 8) = v134;
      v100 = v135;
      v135 = 0uLL;
      v101 = *(std::__shared_weak_count **)(v99 + 24);
      *(_OWORD *)(v99 + 16) = v100;
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = *(void **)(v99 + 32);
      if (v104)
      {
        *(_QWORD *)(v99 + 40) = v104;
        operator delete(v104);
        *(_QWORD *)(v99 + 32) = 0;
        *(_QWORD *)(v99 + 40) = 0;
        *(_QWORD *)(v99 + 48) = 0;
      }
      v105 = *(void **)(v99 + 56);
      *(_OWORD *)(v99 + 32) = *(_OWORD *)v136;
      *(_QWORD *)(v99 + 48) = v137;
      v136[1] = 0;
      v137 = 0;
      v136[0] = 0;
      if (v105)
      {
        *(_QWORD *)(v99 + 64) = v105;
        operator delete(v105);
        *(_QWORD *)(v99 + 56) = 0;
        *(_QWORD *)(v99 + 64) = 0;
        *(_QWORD *)(v99 + 72) = 0;
        v105 = v136[0];
      }
      *(_OWORD *)(v99 + 56) = v138;
      v106 = v139;
      v107 = v140;
      v139 = 0;
      v138 = 0uLL;
      *(_QWORD *)(v99 + 72) = v106;
      *(_QWORD *)(v99 + 80) = v107;
      if (v105)
      {
        v136[1] = v105;
        operator delete(v105);
      }
      v108 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      if (*((_QWORD *)&v135 + 1))
      {
        v109 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      return;
    default:
      printf("%d\n", v134);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Cos(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Cos(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_19129F74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  unint64_t v31;

  MEMORY[0x19401CD90](v28, 0x10B0C4002311774);
  do
  {
    v30 = __ldaxr(0);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, 0));
  if (!v31)
    nitro::nitro_builtins::Range(v27);
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a27);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Sin(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  double v4;
  long double v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  float *v67;
  unint64_t *v68;
  float16x8_t *v69;
  unint64_t v70;
  float32x4_t v71;
  float v72;
  float32x4_t v73;
  float v74;
  float32x4_t v75;
  float32x4_t v76;
  float v77;
  float32x4_t v78;
  float v79;
  float32x4_t v80;
  unint64_t v81;
  __int16 *v82;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  int64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  unint64_t v96;
  int *v97;
  unint64_t *p_shared_owners;
  uint64_t v99;
  __int128 v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  float32x4_t __x;
  float32x4_t __xa;
  float32x4_t __xb;
  float64x2_t __xc;
  float v115;
  float32x4_t v116;
  long double v117;
  float64x2_t v118;
  float v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float64x2_t v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *v127;
  void *v128;
  void *v129;
  void *v130;
  void *__p;
  void *v132;
  uint64_t v133;
  int v134;
  __int128 v135;
  void *v136[2];
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;

  if (*((_BYTE *)this + 8) == 1)
  {
    v4 = *(double *)this;
    goto LABEL_5;
  }
  if (!*((_BYTE *)this + 8))
  {
    v4 = (double)*(uint64_t *)this;
LABEL_5:
    v5 = sin(v4);
    *(_BYTE *)(a3 + 8) = 1;
    *(long double *)a3 = v5;
    return;
  }
  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)this + 8), (uint64_t)&v125);
  nitro::ndarray_container::copy((nitro::ndarray_container *)&v125, (uint64_t)&v134);
  if (__p)
  {
    v132 = __p;
    operator delete(__p);
  }
  if (v128)
  {
    v129 = v128;
    operator delete(v128);
  }
  v6 = (std::__shared_weak_count *)v127;
  if (v127)
  {
    v7 = (unint64_t *)((char *)v127 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  switch(v134)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      v9 = v127;
      if (v128 == v127)
        goto LABEL_100;
      v10 = v125;
      if (!v125)
        goto LABEL_100;
      v11 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v11 < 8)
      {
        v12 = 1;
        v13 = (uint64_t *)v127;
        do
        {
LABEL_65:
          v60 = *v13++;
          v12 *= v60;
        }
        while (v13 != v128);
        goto LABEL_66;
      }
      v55 = (v11 >> 3) + 1;
      v13 = (uint64_t *)((char *)v127 + 8 * (v55 & 0x3FFFFFFFFFFFFFFELL));
      v56 = (char *)v127 + 8;
      v57 = 1;
      v58 = v55 & 0x3FFFFFFFFFFFFFFELL;
      v59 = 1;
      do
      {
        v57 *= *(v56 - 1);
        v59 *= *v56;
        v56 += 2;
        v58 -= 2;
      }
      while (v58);
      v12 = v59 * v57;
      if (v55 != (v55 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_65;
LABEL_66:
      if (!v12)
        goto LABEL_100;
      v61 = v133;
      if (v12 < 4)
      {
        v62 = 0;
LABEL_98:
        v96 = v12 - v62;
        v97 = (int *)(v10 + 4 * (v62 + v61));
        do
        {
          *v97 = (int)sin((double)*v97);
          ++v97;
          --v96;
        }
        while (v96);
        goto LABEL_100;
      }
      v62 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      v91 = v125 + 4 * v133;
      v92 = v12 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v93.i64[0] = (int)*(_QWORD *)(v91 + 8);
        v93.i64[1] = (int)HIDWORD(*(_OWORD *)v91);
        v124 = vcvtq_f64_s64(v93);
        v93.i64[0] = (int)*(_OWORD *)v91;
        v93.i64[1] = (int)HIDWORD(*(_QWORD *)v91);
        __xc = vcvtq_f64_s64(v93);
        v117 = sin(__xc.f64[1]);
        v94.f64[0] = sin(__xc.f64[0]);
        v94.f64[1] = v117;
        v118 = v94;
        __xc.f64[0] = sin(v124.f64[1]);
        v95.f64[0] = sin(v124.f64[0]);
        v95.f64[1] = __xc.f64[0];
        *(int32x4_t *)v91 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v118), (int32x4_t)vcvtq_s64_f64(v95));
        v91 += 16;
        v92 -= 4;
      }
      while (v92);
      if (v12 != v62)
        goto LABEL_98;
LABEL_100:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
        v9 = v127;
      }
      if (v9)
      {
        v128 = v9;
        operator delete(v9);
      }
      v36 = v126;
      if (!v126)
        goto LABEL_109;
      p_shared_owners = (unint64_t *)&v126->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      goto LABEL_107;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      if (v128 == v127 || !v125)
        goto LABEL_40;
      v25 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v25 < 8)
      {
        v26 = 1;
        v27 = (uint64_t *)v127;
        do
        {
LABEL_36:
          v33 = *v27++;
          v26 *= v33;
        }
        while (v27 != v128);
        goto LABEL_37;
      }
      v28 = (v25 >> 3) + 1;
      v27 = (uint64_t *)((char *)v127 + 8 * (v28 & 0x3FFFFFFFFFFFFFFELL));
      v29 = (char *)v127 + 8;
      v30 = 1;
      v31 = v28 & 0x3FFFFFFFFFFFFFFELL;
      v32 = 1;
      do
      {
        v30 *= *(v29 - 1);
        v32 *= *v29;
        v29 += 2;
        v31 -= 2;
      }
      while (v31);
      v26 = v32 * v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_36;
LABEL_37:
      if (v26)
      {
        for (i = 0; i != v26; ++i)
        {
          v35 = v125 + v133;
          LOBYTE(v24) = *(_BYTE *)(v125 + v133 + i);
          v24 = sin((double)*(unint64_t *)&v24);
          *(_BYTE *)(v35 + i) = (int)v24;
        }
      }
LABEL_40:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
      }
      if (v127)
      {
        v128 = v127;
        operator delete(v127);
      }
      v36 = v126;
      if (!v126)
        goto LABEL_109;
      v37 = (unint64_t *)&v126->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_107;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      v14 = v127;
      if (v128 == v127)
        goto LABEL_74;
      v15 = v125;
      if (!v125)
        goto LABEL_74;
      v16 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v16 < 8)
      {
        v17 = 1;
        v18 = (uint64_t *)v127;
        do
        {
LABEL_51:
          v44 = *v18++;
          v17 *= v44;
        }
        while (v18 != v128);
        goto LABEL_52;
      }
      v39 = (v16 >> 3) + 1;
      v18 = (uint64_t *)((char *)v127 + 8 * (v39 & 0x3FFFFFFFFFFFFFFELL));
      v40 = (char *)v127 + 8;
      v41 = 1;
      v42 = v39 & 0x3FFFFFFFFFFFFFFELL;
      v43 = 1;
      do
      {
        v41 *= *(v40 - 1);
        v43 *= *v40;
        v40 += 2;
        v42 -= 2;
      }
      while (v42);
      v17 = v43 * v41;
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_51;
LABEL_52:
      if (!v17)
        goto LABEL_74;
      v45 = v133;
      if (v17 == 1)
      {
        v46 = 0;
LABEL_72:
        v66 = v17 - v46;
        v67 = (float *)(v15 + 4 * (v46 + v45));
        do
        {
          *v67 = sinf(*v67);
          ++v67;
          --v66;
        }
        while (v66);
        goto LABEL_74;
      }
      v46 = v17 & 0xFFFFFFFFFFFFFFFELL;
      v63 = (_QWORD *)(v125 + 4 * v133);
      v64 = v17 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        LODWORD(v115) = *v63;
        v119 = sinf(COERCE_FLOAT(HIDWORD(*v63)));
        *(float *)&v65 = sinf(v115);
        *((float *)&v65 + 1) = v119;
        *v63++ = v65;
        v64 -= 2;
      }
      while (v64);
      if (v17 != v46)
        goto LABEL_72;
LABEL_74:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
        v14 = v127;
      }
      if (v14)
      {
        v128 = v14;
        operator delete(v14);
      }
      v36 = v126;
      if (!v126)
        goto LABEL_109;
      v68 = (unint64_t *)&v126->__shared_owners_;
      do
        v38 = __ldaxr(v68);
      while (__stlxr(v38 - 1, v68));
      goto LABEL_107;
    case 11:
      nitro::ndarray<half>::ndarray((uint64_t)&v125, (uint64_t)&v134);
      v19 = v127;
      if (v128 == v127)
        goto LABEL_87;
      v20 = v125;
      if (!v125)
        goto LABEL_87;
      v21 = (_BYTE *)v128 - (_BYTE *)v127 - 8;
      if (v21 < 8)
      {
        v22 = 1;
        v23 = (uint64_t *)v127;
        do
        {
LABEL_58:
          v52 = *v23++;
          v22 *= v52;
        }
        while (v23 != v128);
        goto LABEL_59;
      }
      v47 = (v21 >> 3) + 1;
      v23 = (uint64_t *)((char *)v127 + 8 * (v47 & 0x3FFFFFFFFFFFFFFELL));
      v48 = (char *)v127 + 8;
      v49 = 1;
      v50 = v47 & 0x3FFFFFFFFFFFFFFELL;
      v51 = 1;
      do
      {
        v49 *= *(v48 - 1);
        v51 *= *v48;
        v48 += 2;
        v50 -= 2;
      }
      while (v50);
      v22 = v51 * v49;
      if (v47 != (v47 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_58;
LABEL_59:
      if (!v22)
        goto LABEL_87;
      v53 = v133;
      if (v22 < 8)
      {
        v54 = 0;
LABEL_85:
        v81 = v22 - v54;
        v82 = (__int16 *)(v20 + 2 * (v54 + v53));
        do
        {
          _H0 = *v82;
          __asm { FCVT            S0, H0; float }
          _S0 = sinf(_S0);
          __asm { FCVT            H0, S0 }
          *v82++ = LOWORD(_S0);
          --v81;
        }
        while (v81);
        goto LABEL_87;
      }
      v54 = v22 & 0xFFFFFFFFFFFFFFF8;
      v69 = (float16x8_t *)(v125 + 2 * v133);
      v70 = v22 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        __x = vcvt_hight_f32_f16(*v69);
        v116 = vcvtq_f32_f16(*(float16x4_t *)v69->i8);
        v120 = sinf(__x.f32[1]);
        v71.f32[0] = sinf(__x.f32[0]);
        v71.f32[1] = v120;
        v121 = v71;
        v72 = sinf(__x.f32[2]);
        v73 = v121;
        v73.f32[2] = v72;
        v122 = v73;
        v74 = sinf(__x.f32[3]);
        v75 = v122;
        v75.f32[3] = v74;
        v123 = v75;
        __x.i32[0] = sinf(v116.f32[1]);
        v76.f32[0] = sinf(v116.f32[0]);
        v76.i32[1] = __x.i32[0];
        __xa = v76;
        v77 = sinf(v116.f32[2]);
        v78 = __xa;
        v78.f32[2] = v77;
        __xb = v78;
        v79 = sinf(v116.f32[3]);
        v80 = __xb;
        v80.f32[3] = v79;
        *v69++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v80), v123);
        v70 -= 8;
      }
      while (v70);
      if (v22 != v54)
        goto LABEL_85;
LABEL_87:
      if (v130)
      {
        __p = v130;
        operator delete(v130);
        v19 = v127;
      }
      if (v19)
      {
        v128 = v19;
        operator delete(v19);
      }
      v36 = v126;
      if (v126)
      {
        v90 = (unint64_t *)&v126->__shared_owners_;
        do
          v38 = __ldaxr(v90);
        while (__stlxr(v38 - 1, v90));
LABEL_107:
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
LABEL_109:
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a3 + 8) = 9;
      v99 = operator new();
      *(_QWORD *)v99 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v99 + 8));
      *(_QWORD *)a3 = v99;
      *(_QWORD *)v99 = 1;
      *(_DWORD *)(v99 + 8) = v134;
      v100 = v135;
      v135 = 0uLL;
      v101 = *(std::__shared_weak_count **)(v99 + 24);
      *(_OWORD *)(v99 + 16) = v100;
      if (v101)
      {
        v102 = (unint64_t *)&v101->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (!v103)
        {
          ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
          std::__shared_weak_count::__release_weak(v101);
        }
      }
      v104 = *(void **)(v99 + 32);
      if (v104)
      {
        *(_QWORD *)(v99 + 40) = v104;
        operator delete(v104);
        *(_QWORD *)(v99 + 32) = 0;
        *(_QWORD *)(v99 + 40) = 0;
        *(_QWORD *)(v99 + 48) = 0;
      }
      v105 = *(void **)(v99 + 56);
      *(_OWORD *)(v99 + 32) = *(_OWORD *)v136;
      *(_QWORD *)(v99 + 48) = v137;
      v136[1] = 0;
      v137 = 0;
      v136[0] = 0;
      if (v105)
      {
        *(_QWORD *)(v99 + 64) = v105;
        operator delete(v105);
        *(_QWORD *)(v99 + 56) = 0;
        *(_QWORD *)(v99 + 64) = 0;
        *(_QWORD *)(v99 + 72) = 0;
        v105 = v136[0];
      }
      *(_OWORD *)(v99 + 56) = v138;
      v106 = v139;
      v107 = v140;
      v139 = 0;
      v138 = 0uLL;
      *(_QWORD *)(v99 + 72) = v106;
      *(_QWORD *)(v99 + 80) = v107;
      if (v105)
      {
        v136[1] = v105;
        operator delete(v105);
      }
      v108 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      if (*((_QWORD *)&v135 + 1))
      {
        v109 = (unint64_t *)(*((_QWORD *)&v135 + 1) + 8);
        do
          v110 = __ldaxr(v109);
        while (__stlxr(v110 - 1, v109));
        if (!v110)
        {
          ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
          std::__shared_weak_count::__release_weak(v108);
        }
      }
      return;
    default:
      printf("%d\n", v134);
      nitro::ndarray_container::visit<nitro::nitro_builtins::Sin(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Sin(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_1912A001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;
  uint64_t v28;
  unint64_t v30;
  unint64_t v31;

  MEMORY[0x19401CD90](v28, 0x10B0C4002311774);
  do
  {
    v30 = __ldaxr(0);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, 0));
  if (!v31)
    nitro::nitro_builtins::Range(v27);
  *(_QWORD *)v27 = 0;
  *(_BYTE *)(v27 + 8) = 0;
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a27);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::get_scalar(nitro::nitro_builtins *this@<X0>, nitro::nitro_builtins *a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const nitro::ndarray_container *v17;
  int *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[2];
  std::__shared_weak_count *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  void *v33;
  void *v34;
  void *__p;
  void *v36;
  uint64_t v37[3];

  v4 = *((unsigned __int8 *)this + 8);
  if (v4 < 2)
  {
    *(_QWORD *)a2 = 0;
    *((_BYTE *)a2 + 8) = 0;
    if (this != a2)
    {
      *(_QWORD *)a2 = *(_QWORD *)this;
      *((_BYTE *)a2 + 8) = v4;
    }
    return;
  }
  if (v4 != 9)
    nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_1::operator()();
  v5 = *(_QWORD *)this;
  v7 = *(char **)(*(_QWORD *)this + 32);
  v6 = *(char **)(*(_QWORD *)this + 40);
  if (v6 == v7 || !*(_QWORD *)(v5 + 16))
  {
    v25[0] = 0;
LABEL_38:
    v31 = v25;
    nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_0::operator()();
  }
  v8 = v6 - v7 - 8;
  if (v8 < 8)
  {
    v9 = 1;
    v10 = *(char **)(*(_QWORD *)this + 32);
    do
    {
LABEL_12:
      v16 = *(_QWORD *)v10;
      v10 += 8;
      v9 *= v16;
    }
    while (v10 != v6);
    goto LABEL_13;
  }
  v11 = (v8 >> 3) + 1;
  v10 = &v7[8 * (v11 & 0x3FFFFFFFFFFFFFFELL)];
  v12 = v7 + 8;
  v13 = 1;
  v14 = v11 & 0x3FFFFFFFFFFFFFFELL;
  v15 = 1;
  do
  {
    v13 *= *(v12 - 1);
    v15 *= *v12;
    v12 += 2;
    v14 -= 2;
  }
  while (v14);
  v9 = v15 * v13;
  if (v11 != (v11 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_12;
LABEL_13:
  v25[0] = v9;
  if (v9 != 1)
    goto LABEL_38;
  v17 = (const nitro::ndarray_container *)(v5 + 8);
  if (*(_DWORD *)(v5 + 8) == 3)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v25, v17);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v17, (uint64_t)v25);
  nitro::ndarray<int>::ndarray((uint64_t)&v31, (uint64_t)v25);
  nitro::ndarray<int>::get_elements_copy((uint64_t *)&v31, v37);
  v18 = (int *)v37[0];
  *((_BYTE *)a2 + 8) = 0;
  *(_QWORD *)a2 = *v18;
  v37[1] = (uint64_t)v18;
  operator delete(v18);
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  v19 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v22 = v26;
  if (v26)
  {
    v23 = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"nda.num_elem()", 14);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 152, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 152, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A065C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A06C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::get_elements_copy(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v5 = a1[2];
  v4 = (uint64_t *)a1[3];
  if (v4 == (uint64_t *)v5 || !*a1)
  {
    a2[1] = 0;
    *a2 = 0;
    a2[2] = 0;
    goto LABEL_13;
  }
  v6 = (unint64_t)v4 - v5 - 8;
  if (v6 < 8)
  {
    v7 = 1;
    v8 = (uint64_t *)a1[2];
    do
    {
LABEL_9:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v4);
    goto LABEL_10;
  }
  v9 = (v6 >> 3) + 1;
  v8 = (uint64_t *)(v5 + 8 * (v9 & 0x3FFFFFFFFFFFFFFELL));
  v10 = (_QWORD *)(v5 + 8);
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_9;
LABEL_10:
  a2[1] = 0;
  *a2 = 0;
  a2[2] = 0;
  if (v7)
  {
    if (v7 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = operator new(4 * v7);
    *a2 = (uint64_t)v15;
    a2[2] = (uint64_t)v15 + 4 * v7;
    bzero(v15, 4 * v7);
    a2[1] = (uint64_t)v15 + 4 * v7;
  }
LABEL_13:
  v16 = 0;
  nitro::ndarray<int>::element_visitor<nitro::ndarray<int>::get_elements_copy(void)::{lambda(int const&)#1}>(a1, a2, &v16);
}

void sub_1912A0820(_Unwind_Exception *exception_object)
{
  void **v1;
  _QWORD *v2;
  void *v4;

  v4 = *v1;
  if (*v1)
  {
    *v2 = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void nitro::nitro_builtins::get_scalar(nitro::flexible_type const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"a.get_type() == flex_type_enum::INTEGER || a.get_type() == flex_type_enum::FLOAT", 80);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 156, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 156, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A0B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A0BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"splitdim", 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"tensor.shape().size()", 21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<", 1);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 434, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 434, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A0F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A0FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Split(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"sum", 3);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"tensor.shape()[splitdim]", 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 435, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 435, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A13C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A142C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void std::vector<nitro::flexible_type>::reserve(char **a1, unint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;

  v2 = (uint64_t)(a1 + 2);
  v3 = *a1;
  if (a2 > (a1[2] - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1];
    v6 = 16 * a2;
    v7 = (char *)operator new(16 * a2);
    v8 = &v7[v6];
    v9 = &v7[v5 - v3];
    if (v5 == v3)
    {
      *a1 = v9;
      a1[1] = v9;
      a1[2] = v8;
      if (v3)
LABEL_10:
        operator delete(v3);
    }
    else
    {
      v10 = &v7[v5 - v3];
      do
      {
        v11 = *((_QWORD *)v5 - 2);
        v5 -= 16;
        *((_QWORD *)v10 - 2) = v11;
        v10 -= 16;
        v10[8] = v5[8];
        v5[8] = 0;
      }
      while (v5 != v3);
      v12 = *a1;
      v3 = a1[1];
      *a1 = v10;
      a1[1] = v9;
      a1[2] = v8;
      if (v3 != v12)
      {
        do
        {
          v3 -= 16;
          std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v2, (uint64_t)v3);
        }
        while (v3 != v12);
        v3 = v12;
      }
      if (v3)
        goto LABEL_10;
    }
  }
}

void nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"bias.shape().size()", 19);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 471, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 471, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A18E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A194C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"bias.shape()[0]", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ret_tensor.shape()[ret_tensor.shape().size() - 1]", 49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 481, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 481, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A1D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A1D84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(_DWORD *a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  float v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  unint64_t *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  unint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  unint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  unint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  _QWORD *v232;
  unint64_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  unint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  uint64_t *v263;
  uint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  _QWORD *v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char *v300;
  unint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  std::__shared_weak_count *v322;
  unint64_t *v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  char *v327;
  unint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  _QWORD *v340;
  unint64_t v341;
  unint64_t v342;
  uint64_t v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  std::__shared_weak_count *v349;
  unint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  unint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  _QWORD *v366;
  _QWORD *v367;
  unint64_t v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t *v371;
  uint64_t *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  std::__shared_weak_count *v376;
  unint64_t *v377;
  unint64_t v378;
  uint64_t v379;
  uint64_t v380;
  char *v381;
  unint64_t v382;
  _QWORD *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unint64_t v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  _QWORD *v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t *v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  std::__shared_weak_count *v403;
  unint64_t *v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  char *v408;
  unint64_t v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  unint64_t v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  _QWORD *v420;
  _QWORD *v421;
  unint64_t v422;
  unint64_t v423;
  uint64_t v424;
  char *v425;
  char *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  std::__shared_weak_count *v430;
  unint64_t *v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t v434;
  char *v435;
  unint64_t v436;
  _QWORD *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  _QWORD *v447;
  _QWORD *v448;
  unint64_t v449;
  unint64_t v450;
  uint64_t v451;
  char *v452;
  char *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  std::__shared_weak_count *v457;
  unint64_t *v458;
  unint64_t v459;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  unint64_t v463;
  _QWORD *v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  _QWORD *v475;
  unint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t *v479;
  uint64_t *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  uint64_t v487;
  uint64_t v488;
  char *v489;
  unint64_t v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  _QWORD *v501;
  _QWORD *v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t *v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  std::__shared_weak_count *v511;
  unint64_t *p_shared_owners;
  unint64_t v513;
  uint64_t v514;
  uint64_t v515;
  char *v516;
  unint64_t v517;
  _QWORD *v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  unint64_t v523;
  unint64_t v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  _QWORD *v528;
  _QWORD *v529;
  unint64_t v530;
  unint64_t v531;
  uint64_t v532;
  char *v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  unint64_t v539;
  unint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  _QWORD *v544;
  _QWORD *v545;
  unint64_t v546;
  unint64_t v547;
  uint64_t v548;
  char *v549;
  char *v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  _QWORD *v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  unint64_t v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  _QWORD *v566;
  _QWORD *v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  char *v571;
  char *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  _QWORD *v582;
  _QWORD *v583;
  unint64_t v584;
  unint64_t v585;
  uint64_t v586;
  char *v587;
  char *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  unint64_t v593;
  _QWORD *v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  unint64_t v599;
  unint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  _QWORD *v604;
  _QWORD *v605;
  unint64_t v606;
  unint64_t v607;
  uint64_t v608;
  char *v609;
  char *v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  _QWORD *v620;
  _QWORD *v621;
  unint64_t v622;
  unint64_t v623;
  uint64_t v624;
  char *v625;
  char *v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  _QWORD *v642;
  _QWORD *v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t v646;
  char *v647;
  char *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  unint64_t v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  _QWORD *v658;
  _QWORD *v659;
  unint64_t v660;
  unint64_t v661;
  uint64_t v662;
  char *v663;
  char *v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  unint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  unint64_t v675;
  unint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  _QWORD *v680;
  _QWORD *v681;
  unint64_t v682;
  unint64_t v683;
  uint64_t v684;
  char *v685;
  char *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  unint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  _QWORD *v696;
  _QWORD *v697;
  unint64_t v698;
  unint64_t v699;
  uint64_t v700;
  char *v701;
  char *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  unint64_t v707;
  _QWORD *v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  _QWORD *v718;
  _QWORD *v719;
  unint64_t v720;
  unint64_t v721;
  uint64_t v722;
  char *v723;
  char *v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  unint64_t v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  _QWORD *v734;
  _QWORD *v735;
  unint64_t v736;
  unint64_t v737;
  uint64_t v738;
  char *v739;
  char *v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  unint64_t v745;
  _QWORD *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  unint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  _QWORD *v756;
  _QWORD *v757;
  unint64_t v758;
  unint64_t v759;
  uint64_t v760;
  char *v761;
  char *v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  unint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  _QWORD *v772;
  _QWORD *v773;
  unint64_t v774;
  unint64_t v775;
  uint64_t v776;
  char *v777;
  char *v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  unint64_t v783;
  _QWORD *v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  unint64_t v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  _QWORD *v794;
  _QWORD *v795;
  unint64_t v796;
  unint64_t v797;
  uint64_t v798;
  char *v799;
  char *v800;
  uint64_t v801;
  uint64_t v802;
  uint64_t v803;
  uint64_t v804;
  unint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  _QWORD *v810;
  _QWORD *v811;
  unint64_t v812;
  unint64_t v813;
  uint64_t v814;
  char *v815;
  char *v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  uint64_t v820;
  unint64_t v821;
  _QWORD *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  unint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  _QWORD *v832;
  _QWORD *v833;
  unint64_t v834;
  unint64_t v835;
  uint64_t v836;
  char *v837;
  char *v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  unint64_t v843;
  unint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  _QWORD *v848;
  _QWORD *v849;
  unint64_t v850;
  unint64_t v851;
  uint64_t v852;
  char *v853;
  char *v854;
  uint64_t v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  unint64_t v859;
  _QWORD *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unint64_t v865;
  unint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  _QWORD *v870;
  _QWORD *v871;
  unint64_t v872;
  unint64_t v873;
  uint64_t v874;
  char *v875;
  char *v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t v880;
  unint64_t v881;
  unint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  _QWORD *v886;
  _QWORD *v887;
  unint64_t v888;
  unint64_t v889;
  uint64_t v890;
  char *v891;
  char *v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  unint64_t v897;
  _QWORD *v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  unint64_t v903;
  unint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t v907;
  _QWORD *v908;
  _QWORD *v909;
  unint64_t v910;
  unint64_t v911;
  uint64_t v912;
  char *v913;
  char *v914;
  uint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  unint64_t v919;
  unint64_t v920;
  uint64_t v921;
  uint64_t v922;
  uint64_t v923;
  _QWORD *v924;
  _QWORD *v925;
  unint64_t v926;
  unint64_t v927;
  uint64_t v928;
  char *v929;
  char *v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  unint64_t v935;
  _QWORD *v936;
  uint64_t v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  unint64_t v941;
  unint64_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  _QWORD *v946;
  _QWORD *v947;
  unint64_t v948;
  unint64_t v949;
  uint64_t v950;
  char *v951;
  char *v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  uint64_t v956;
  unint64_t v957;
  unint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  _QWORD *v962;
  _QWORD *v963;
  unint64_t v964;
  unint64_t v965;
  uint64_t v966;
  char *v967;
  char *v968;
  uint64_t v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  unint64_t v973;
  _QWORD *v974;
  uint64_t v975;
  uint64_t v976;
  uint64_t v977;
  uint64_t v978;
  unint64_t v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  _QWORD *v984;
  _QWORD *v985;
  unint64_t v986;
  unint64_t v987;
  uint64_t v988;
  char *v989;
  char *v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  unint64_t v995;
  unint64_t v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  _QWORD *v1000;
  _QWORD *v1001;
  unint64_t v1002;
  unint64_t v1003;
  uint64_t v1004;
  char *v1005;
  char *v1006;
  uint64_t v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  unint64_t v1011;
  _QWORD *v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  unint64_t v1017;
  unint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  _QWORD *v1022;
  _QWORD *v1023;
  unint64_t v1024;
  unint64_t v1025;
  uint64_t v1026;
  char *v1027;
  char *v1028;
  uint64_t v1029;
  uint64_t v1030;
  uint64_t v1031;
  uint64_t v1032;
  unint64_t v1033;
  unint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  _QWORD *v1038;
  _QWORD *v1039;
  unint64_t v1040;
  unint64_t v1041;
  uint64_t v1042;
  char *v1043;
  char *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  unint64_t v1049;
  _QWORD *v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  unint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  _QWORD *v1060;
  _QWORD *v1061;
  unint64_t v1062;
  unint64_t v1063;
  uint64_t v1064;
  char *v1065;
  char *v1066;
  uint64_t v1067;
  uint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  unint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  uint64_t v1075;
  _QWORD *v1076;
  _QWORD *v1077;
  unint64_t v1078;
  unint64_t v1079;
  uint64_t v1080;
  char *v1081;
  char *v1082;
  uint64_t v1083;
  uint64_t v1084;
  uint64_t v1085;
  uint64_t v1086;
  unint64_t v1087;
  _QWORD *v1088;
  uint64_t v1089;
  uint64_t v1090;
  uint64_t v1091;
  uint64_t v1092;
  unint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  uint64_t v1097;
  _QWORD *v1098;
  _QWORD *v1099;
  unint64_t v1100;
  unint64_t v1101;
  uint64_t v1102;
  char *v1103;
  char *v1104;
  uint64_t v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  unint64_t v1109;
  unint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  uint64_t v1113;
  _QWORD *v1114;
  _QWORD *v1115;
  unint64_t v1116;
  unint64_t v1117;
  uint64_t v1118;
  char *v1119;
  char *v1120;
  uint64_t v1121;
  uint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  float *v1127;
  unint64_t *v1128;
  unint64_t v1129;
  std::__shared_weak_count *v1130;
  unint64_t *v1131;
  unint64_t v1132;
  uint64_t v1133;
  unint64_t v1134;
  __int16 *v1135;
  unint64_t *v1145;
  unint64_t v1146;
  unint64_t *v1147;
  uint64_t v1148;
  unint64_t v1149;
  float *v1150;
  unint64_t *v1153;
  unint64_t v1154;
  std::__shared_weak_count *v1155;
  unint64_t *v1156;
  unint64_t v1157;
  unint64_t v1158;
  unint64_t v1159;
  unint64_t *v1160;
  unint64_t v1161;
  unint64_t *v1162;
  uint64_t v1163;
  unint64_t v1164;
  float *v1165;
  unint64_t *v1166;
  unint64_t v1167;
  std::__shared_weak_count *v1168;
  unint64_t *v1169;
  unint64_t v1170;
  uint64_t v1171;
  unint64_t v1172;
  _DWORD *v1173;
  unint64_t *v1174;
  unint64_t v1175;
  unint64_t *v1176;
  std::__shared_weak_count *v1177;
  unint64_t *v1178;
  unint64_t v1179;
  std::__shared_weak_count *v1180;
  unint64_t *v1181;
  unint64_t v1182;
  uint64_t v1183;
  unint64_t v1184;
  float *v1185;
  unint64_t *v1186;
  unint64_t v1187;
  std::__shared_weak_count *v1188;
  unint64_t *v1189;
  unint64_t v1190;
  uint64_t v1191;
  unint64_t v1192;
  __int16 *v1193;
  unint64_t *v1199;
  unint64_t v1200;
  unint64_t *v1201;
  unint64_t v1202;
  unint64_t v1203;
  unint64_t *v1206;
  unint64_t v1207;
  unint64_t *v1208;
  uint64_t v1209;
  unint64_t v1210;
  __int16 *v1211;
  unint64_t *v1214;
  unint64_t v1215;
  unint64_t *v1216;
  uint64_t v1217;
  unint64_t v1218;
  _DWORD *v1219;
  unint64_t *v1222;
  unint64_t v1223;
  unint64_t *v1224;
  std::__shared_weak_count *v1225;
  unint64_t *v1226;
  unint64_t v1227;
  unint64_t *v1228;
  uint64_t v1229;
  unint64_t v1230;
  __int16 *v1231;
  unint64_t *v1237;
  unint64_t v1238;
  unint64_t *v1239;
  unint64_t v1240;
  unint64_t v1241;
  unint64_t *v1242;
  unint64_t v1243;
  unint64_t *v1244;
  uint64_t v1245;
  unint64_t v1246;
  _DWORD *v1247;
  unint64_t *v1248;
  unint64_t v1249;
  unint64_t *v1250;
  std::__shared_weak_count *v1251;
  unint64_t *v1252;
  unint64_t v1253;
  unint64_t *v1254;
  unint64_t v1255;
  unint64_t v1256;
  unint64_t *v1257;
  unint64_t v1258;
  unint64_t *v1259;
  uint64_t v1260;
  unint64_t v1261;
  _DWORD *v1262;
  unint64_t *v1263;
  unint64_t v1264;
  unint64_t *v1265;
  std::__shared_weak_count *v1266;
  unint64_t *v1267;
  unint64_t v1268;
  unint64_t *v1269;
  uint64_t v1270;
  std::__shared_weak_count *v1271;
  void *v1272;
  void *v1273;
  void *v1274;
  void *v1275;
  char *v1276;
  uint64_t v1277;
  std::__shared_weak_count *v1278;
  void *v1279;
  char *v1280;
  void *__p;
  void *v1282;
  uint64_t v1283;
  uint64_t v1284;
  std::__shared_weak_count *v1285;
  void *v1286;
  void *v1287;
  void *v1288;
  void *v1289;
  char *v1290;
  uint64_t v1291;
  std::__shared_weak_count *v1292;
  void *v1293;
  char *v1294;
  void *v1295;
  void *v1296;
  uint64_t v1297;
  uint64_t v1298;
  std::__shared_weak_count *v1299;
  void *v1300;
  void *v1301;
  void *v1302;
  void *v1303;
  char *v1304;
  uint64_t v1305;
  std::__shared_weak_count *v1306;
  void *v1307;
  char *v1308;
  void *v1309;
  void *v1310;
  uint64_t v1311;
  uint64_t v1312;
  std::__shared_weak_count *v1313;
  void *v1314;
  void *v1315;
  void *v1316;
  void *v1317;
  char *v1318;
  uint64_t v1319;
  std::__shared_weak_count *v1320;
  char *v1321;
  char *v1322;
  char *v1323;
  char *v1324;
  uint64_t v1325;
  char v1326;
  _DWORD *v1327;
  std::__shared_weak_count *v1328;
  char *v1329;
  char *v1330;
  char *v1331;
  char *v1332;
  uint64_t v1333;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1298, (uint64_t)a2);
      v1304 = &v1326;
      nitro::ndarray<int>::ndarray(&v1305, &v1298);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v3 = *(_QWORD *)v1307;
          if (v1311)
            goto LABEL_869;
          v4 = v1305;
          v5 = v1308 - (_BYTE *)v1307;
          if (v1308 == v1307)
            goto LABEL_446;
          if (!v1305)
          {
            v6 = 0;
            goto LABEL_436;
          }
          if ((unint64_t)(v5 - 8) < 8)
          {
            v6 = 1;
            v7 = (char *)v1307;
            do
            {
LABEL_435:
              v495 = *(_QWORD *)v7;
              v7 += 8;
              v6 *= v495;
            }
            while (v7 != v1308);
            goto LABEL_436;
          }
          v490 = ((unint64_t)(v5 - 8) >> 3) + 1;
          v7 = (char *)v1307 + 8 * (v490 & 0x3FFFFFFFFFFFFFFELL);
          v491 = (char *)v1307 + 8;
          v492 = 1;
          v493 = v490 & 0x3FFFFFFFFFFFFFFELL;
          v494 = 1;
          do
          {
            v492 *= *(v491 - 1);
            v494 *= *v491;
            v491 += 2;
            v493 -= 2;
          }
          while (v493);
          v6 = v494 * v492;
          if (v490 != (v490 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_435;
LABEL_436:
          v496 = v5 >> 3;
          if ((unint64_t)(v5 >> 3) <= 1)
            v496 = 1;
          if (v496 < 2)
          {
            v497 = 0;
            v498 = 0;
LABEL_443:
            v504 = v496 - v497;
            v505 = 8 * v497;
            v506 = (uint64_t *)((char *)v1309 + v505);
            v507 = (uint64_t *)((char *)v1307 + v505);
            do
            {
              v508 = *v507++;
              v509 = v508 - 1;
              v510 = *v506++;
              v498 += v510 * v509;
              --v504;
            }
            while (v504);
            goto LABEL_445;
          }
          v499 = 0;
          v500 = 0;
          v497 = v496 & 0xFFFFFFFFFFFFFFFELL;
          v501 = (char *)v1307 + 8;
          v502 = (char *)v1309 + 8;
          v503 = v496 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v499 += *(v502 - 1) * (*(v501 - 1) - 1);
            v500 += *v502 * (*v501 - 1);
            v501 += 2;
            v502 += 2;
            v503 -= 2;
          }
          while (v503);
          v498 = v500 + v499;
          if (v496 != v497)
            goto LABEL_443;
LABEL_445:
          if (v6 != v498 + 1)
LABEL_869:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_446:
          v511 = v1306;
          if (v1306)
          {
            p_shared_owners = (unint64_t *)&v1306->__shared_owners_;
            do
              v513 = __ldxr(p_shared_owners);
            while (__stxr(v513 + 1, p_shared_owners));
          }
          if (v1333)
            goto LABEL_1194;
          v514 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1195;
          v515 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_833;
          if ((unint64_t)(v514 - 8) < 8)
          {
            v515 = 1;
            v516 = v1329;
            do
            {
LABEL_832:
              v1092 = *(_QWORD *)v516;
              v516 += 8;
              v515 *= v1092;
            }
            while (v516 != v1330);
            goto LABEL_833;
          }
          v1087 = ((unint64_t)(v514 - 8) >> 3) + 1;
          v516 = &v1329[8 * (v1087 & 0x3FFFFFFFFFFFFFFELL)];
          v1088 = v1329 + 8;
          v1089 = 1;
          v1090 = v1087 & 0x3FFFFFFFFFFFFFFELL;
          v1091 = 1;
          do
          {
            v1089 *= *(v1088 - 1);
            v1091 *= *v1088;
            v1088 += 2;
            v1090 -= 2;
          }
          while (v1090);
          v515 = v1091 * v1089;
          if (v1087 != (v1087 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_832;
LABEL_833:
          v1093 = v514 >> 3;
          if ((unint64_t)(v514 >> 3) <= 1)
            v1093 = 1;
          if (v1093 < 2)
          {
            v1094 = 0;
            v1095 = 0;
LABEL_840:
            v1101 = v1093 - v1094;
            v1102 = 8 * v1094;
            v1103 = &v1331[v1102];
            v1104 = &v1329[v1102];
            do
            {
              v1105 = *(_QWORD *)v1104;
              v1104 += 8;
              v1106 = v1105 - 1;
              v1107 = *(_QWORD *)v1103;
              v1103 += 8;
              v1095 += v1107 * v1106;
              --v1101;
            }
            while (v1101);
            goto LABEL_842;
          }
          v1096 = 0;
          v1097 = 0;
          v1094 = v1093 & 0xFFFFFFFFFFFFFFFELL;
          v1098 = v1329 + 8;
          v1099 = v1331 + 8;
          v1100 = v1093 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1096 += *(v1099 - 1) * (*(v1098 - 1) - 1);
            v1097 += *v1099 * (*v1098 - 1);
            v1098 += 2;
            v1099 += 2;
            v1100 -= 2;
          }
          while (v1100);
          v1095 = v1097 + v1096;
          if (v1093 != v1094)
            goto LABEL_840;
LABEL_842:
          if (v515 != v1095 + 1)
LABEL_1194:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v1108 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v1109 = v1108 >> 3;
            if ((unint64_t)(v1108 >> 3) <= 1)
              v1109 = 1;
            if (v1109 >= 2)
            {
              v1112 = 0;
              v1113 = 0;
              v1110 = v1109 & 0xFFFFFFFFFFFFFFFELL;
              v1114 = v1329 + 8;
              v1115 = v1331 + 8;
              v1116 = v1109 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1112 += *(v1115 - 1) * (*(v1114 - 1) - 1);
                v1113 += *v1115 * (*v1114 - 1);
                v1114 += 2;
                v1115 += 2;
                v1116 -= 2;
              }
              while (v1116);
              v1111 = v1113 + v1112;
              if (v1109 == v1110)
                goto LABEL_853;
            }
            else
            {
              v1110 = 0;
              v1111 = 0;
            }
            v1117 = v1109 - v1110;
            v1118 = 8 * v1110;
            v1119 = &v1331[v1118];
            v1120 = &v1329[v1118];
            do
            {
              v1121 = *(_QWORD *)v1120;
              v1120 += 8;
              v1122 = v1121 - 1;
              v1123 = *(_QWORD *)v1119;
              v1119 += 8;
              v1111 += v1123 * v1122;
              --v1117;
            }
            while (v1117);
LABEL_853:
            v1124 = v1111 + 1;
            goto LABEL_1196;
          }
LABEL_1195:
          v1124 = 0;
LABEL_1196:
          v1260 = v1333 + v1124;
          if (v1260)
          {
            v1261 = 0;
            v1262 = v1327;
            do
            {
              *v1262++ += *(_DWORD *)(v4 + 4 * v1261);
              v1261 = (v1261 + 1) % v3;
              --v1260;
            }
            while (v1260);
          }
          if (v511)
          {
            v1263 = (unint64_t *)&v511->__shared_owners_;
            do
              v1264 = __ldaxr(v1263);
            while (__stlxr(v1264 - 1, v1263));
            if (!v1264)
            {
              ((void (*)(std::__shared_weak_count *))v511->__on_zero_shared)(v511);
              std::__shared_weak_count::__release_weak(v511);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1188 = v1328;
          if (!v1328)
            goto LABEL_1213;
          v1265 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1190 = __ldaxr(v1265);
          while (__stlxr(v1190 - 1, v1265));
          goto LABEL_1211;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v80 = *(_QWORD *)v1307;
          if (v1311)
            goto LABEL_868;
          v81 = v1305;
          v82 = v1308 - (_BYTE *)v1307;
          if (v1308 == v1307)
            goto LABEL_424;
          if (!v1305)
          {
            v83 = 0;
            goto LABEL_414;
          }
          if ((unint64_t)(v82 - 8) < 8)
          {
            v83 = 1;
            v84 = (char *)v1307;
            do
            {
LABEL_413:
              v468 = *(_QWORD *)v84;
              v84 += 8;
              v83 *= v468;
            }
            while (v84 != v1308);
            goto LABEL_414;
          }
          v463 = ((unint64_t)(v82 - 8) >> 3) + 1;
          v84 = (char *)v1307 + 8 * (v463 & 0x3FFFFFFFFFFFFFFELL);
          v464 = (char *)v1307 + 8;
          v465 = 1;
          v466 = v463 & 0x3FFFFFFFFFFFFFFELL;
          v467 = 1;
          do
          {
            v465 *= *(v464 - 1);
            v467 *= *v464;
            v464 += 2;
            v466 -= 2;
          }
          while (v466);
          v83 = v467 * v465;
          if (v463 != (v463 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_413;
LABEL_414:
          v469 = v82 >> 3;
          if ((unint64_t)(v82 >> 3) <= 1)
            v469 = 1;
          if (v469 < 2)
          {
            v470 = 0;
            v471 = 0;
LABEL_421:
            v477 = v469 - v470;
            v478 = 8 * v470;
            v479 = (uint64_t *)((char *)v1309 + v478);
            v480 = (uint64_t *)((char *)v1307 + v478);
            do
            {
              v481 = *v480++;
              v482 = v481 - 1;
              v483 = *v479++;
              v471 += v483 * v482;
              --v477;
            }
            while (v477);
            goto LABEL_423;
          }
          v472 = 0;
          v473 = 0;
          v470 = v469 & 0xFFFFFFFFFFFFFFFELL;
          v474 = (char *)v1307 + 8;
          v475 = (char *)v1309 + 8;
          v476 = v469 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v472 += *(v475 - 1) * (*(v474 - 1) - 1);
            v473 += *v475 * (*v474 - 1);
            v474 += 2;
            v475 += 2;
            v476 -= 2;
          }
          while (v476);
          v471 = v473 + v472;
          if (v469 != v470)
            goto LABEL_421;
LABEL_423:
          if (v83 != v471 + 1)
LABEL_868:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_424:
          v484 = v1306;
          if (v1306)
          {
            v485 = (unint64_t *)&v1306->__shared_owners_;
            do
              v486 = __ldxr(v485);
            while (__stxr(v486 + 1, v485));
          }
          if (v1333)
            goto LABEL_1176;
          v487 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1177;
          v488 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_808;
          if ((unint64_t)(v487 - 8) < 8)
          {
            v488 = 1;
            v489 = v1329;
            do
            {
LABEL_807:
              v1054 = *(_QWORD *)v489;
              v489 += 8;
              v488 *= v1054;
            }
            while (v489 != v1330);
            goto LABEL_808;
          }
          v1049 = ((unint64_t)(v487 - 8) >> 3) + 1;
          v489 = &v1329[8 * (v1049 & 0x3FFFFFFFFFFFFFFELL)];
          v1050 = v1329 + 8;
          v1051 = 1;
          v1052 = v1049 & 0x3FFFFFFFFFFFFFFELL;
          v1053 = 1;
          do
          {
            v1051 *= *(v1050 - 1);
            v1053 *= *v1050;
            v1050 += 2;
            v1052 -= 2;
          }
          while (v1052);
          v488 = v1053 * v1051;
          if (v1049 != (v1049 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_807;
LABEL_808:
          v1055 = v487 >> 3;
          if ((unint64_t)(v487 >> 3) <= 1)
            v1055 = 1;
          if (v1055 < 2)
          {
            v1056 = 0;
            v1057 = 0;
LABEL_815:
            v1063 = v1055 - v1056;
            v1064 = 8 * v1056;
            v1065 = &v1331[v1064];
            v1066 = &v1329[v1064];
            do
            {
              v1067 = *(_QWORD *)v1066;
              v1066 += 8;
              v1068 = v1067 - 1;
              v1069 = *(_QWORD *)v1065;
              v1065 += 8;
              v1057 += v1069 * v1068;
              --v1063;
            }
            while (v1063);
            goto LABEL_817;
          }
          v1058 = 0;
          v1059 = 0;
          v1056 = v1055 & 0xFFFFFFFFFFFFFFFELL;
          v1060 = v1329 + 8;
          v1061 = v1331 + 8;
          v1062 = v1055 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1058 += *(v1061 - 1) * (*(v1060 - 1) - 1);
            v1059 += *v1061 * (*v1060 - 1);
            v1060 += 2;
            v1061 += 2;
            v1062 -= 2;
          }
          while (v1062);
          v1057 = v1059 + v1058;
          if (v1055 != v1056)
            goto LABEL_815;
LABEL_817:
          if (v488 != v1057 + 1)
LABEL_1176:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v1070 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v1071 = v1070 >> 3;
            if ((unint64_t)(v1070 >> 3) <= 1)
              v1071 = 1;
            if (v1071 >= 2)
            {
              v1074 = 0;
              v1075 = 0;
              v1072 = v1071 & 0xFFFFFFFFFFFFFFFELL;
              v1076 = v1329 + 8;
              v1077 = v1331 + 8;
              v1078 = v1071 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1074 += *(v1077 - 1) * (*(v1076 - 1) - 1);
                v1075 += *v1077 * (*v1076 - 1);
                v1076 += 2;
                v1077 += 2;
                v1078 -= 2;
              }
              while (v1078);
              v1073 = v1075 + v1074;
              if (v1071 == v1072)
                goto LABEL_828;
            }
            else
            {
              v1072 = 0;
              v1073 = 0;
            }
            v1079 = v1071 - v1072;
            v1080 = 8 * v1072;
            v1081 = &v1331[v1080];
            v1082 = &v1329[v1080];
            do
            {
              v1083 = *(_QWORD *)v1082;
              v1082 += 8;
              v1084 = v1083 - 1;
              v1085 = *(_QWORD *)v1081;
              v1081 += 8;
              v1073 += v1085 * v1084;
              --v1079;
            }
            while (v1079);
LABEL_828:
            v1086 = v1073 + 1;
            goto LABEL_1178;
          }
LABEL_1177:
          v1086 = 0;
LABEL_1178:
          if (v1333 + v1086)
          {
            v1255 = 0;
            v1256 = 0;
            do
            {
              *((_BYTE *)v1327 + v1255) += *(_DWORD *)(v81 + 4 * v1256);
              v1256 = (v1256 + 1) % v80;
              ++v1255;
            }
            while (v1255 < v1333 + v1086);
          }
          if (v484)
          {
            v1257 = (unint64_t *)&v484->__shared_owners_;
            do
              v1258 = __ldaxr(v1257);
            while (__stlxr(v1258 - 1, v1257));
            if (!v1258)
            {
              ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
              std::__shared_weak_count::__release_weak(v484);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1188 = v1328;
          if (!v1328)
            goto LABEL_1213;
          v1259 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1190 = __ldaxr(v1259);
          while (__stlxr(v1190 - 1, v1259));
          goto LABEL_1211;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v49 = *(_QWORD *)v1307;
          if (v1311)
            goto LABEL_860;
          v50 = v1305;
          v51 = v1308 - (_BYTE *)v1307;
          if (v1308 == v1307)
            goto LABEL_248;
          if (!v1305)
          {
            v52 = 0;
            goto LABEL_238;
          }
          if ((unint64_t)(v51 - 8) < 8)
          {
            v52 = 1;
            v53 = (char *)v1307;
            do
            {
LABEL_237:
              v252 = *(_QWORD *)v53;
              v53 += 8;
              v52 *= v252;
            }
            while (v53 != v1308);
            goto LABEL_238;
          }
          v247 = ((unint64_t)(v51 - 8) >> 3) + 1;
          v53 = (char *)v1307 + 8 * (v247 & 0x3FFFFFFFFFFFFFFELL);
          v248 = (char *)v1307 + 8;
          v249 = 1;
          v250 = v247 & 0x3FFFFFFFFFFFFFFELL;
          v251 = 1;
          do
          {
            v249 *= *(v248 - 1);
            v251 *= *v248;
            v248 += 2;
            v250 -= 2;
          }
          while (v250);
          v52 = v251 * v249;
          if (v247 != (v247 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_237;
LABEL_238:
          v253 = v51 >> 3;
          if ((unint64_t)(v51 >> 3) <= 1)
            v253 = 1;
          if (v253 < 2)
          {
            v254 = 0;
            v255 = 0;
LABEL_245:
            v261 = v253 - v254;
            v262 = 8 * v254;
            v263 = (uint64_t *)((char *)v1309 + v262);
            v264 = (uint64_t *)((char *)v1307 + v262);
            do
            {
              v265 = *v264++;
              v266 = v265 - 1;
              v267 = *v263++;
              v255 += v267 * v266;
              --v261;
            }
            while (v261);
            goto LABEL_247;
          }
          v256 = 0;
          v257 = 0;
          v254 = v253 & 0xFFFFFFFFFFFFFFFELL;
          v258 = (char *)v1307 + 8;
          v259 = (char *)v1309 + 8;
          v260 = v253 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v256 += *(v259 - 1) * (*(v258 - 1) - 1);
            v257 += *v259 * (*v258 - 1);
            v258 += 2;
            v259 += 2;
            v260 -= 2;
          }
          while (v260);
          v255 = v257 + v256;
          if (v253 != v254)
            goto LABEL_245;
LABEL_247:
          if (v52 != v255 + 1)
LABEL_860:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_248:
          v268 = v1306;
          if (v1306)
          {
            v269 = (unint64_t *)&v1306->__shared_owners_;
            do
              v270 = __ldxr(v269);
            while (__stxr(v270 + 1, v269));
          }
          if (v1333)
            goto LABEL_996;
          v271 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_997;
          v272 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_608;
          if ((unint64_t)(v271 - 8) < 8)
          {
            v272 = 1;
            v273 = v1329;
            do
            {
LABEL_607:
              v750 = *(_QWORD *)v273;
              v273 += 8;
              v272 *= v750;
            }
            while (v273 != v1330);
            goto LABEL_608;
          }
          v745 = ((unint64_t)(v271 - 8) >> 3) + 1;
          v273 = &v1329[8 * (v745 & 0x3FFFFFFFFFFFFFFELL)];
          v746 = v1329 + 8;
          v747 = 1;
          v748 = v745 & 0x3FFFFFFFFFFFFFFELL;
          v749 = 1;
          do
          {
            v747 *= *(v746 - 1);
            v749 *= *v746;
            v746 += 2;
            v748 -= 2;
          }
          while (v748);
          v272 = v749 * v747;
          if (v745 != (v745 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_607;
LABEL_608:
          v751 = v271 >> 3;
          if ((unint64_t)(v271 >> 3) <= 1)
            v751 = 1;
          if (v751 < 2)
          {
            v752 = 0;
            v753 = 0;
LABEL_615:
            v759 = v751 - v752;
            v760 = 8 * v752;
            v761 = &v1331[v760];
            v762 = &v1329[v760];
            do
            {
              v763 = *(_QWORD *)v762;
              v762 += 8;
              v764 = v763 - 1;
              v765 = *(_QWORD *)v761;
              v761 += 8;
              v753 += v765 * v764;
              --v759;
            }
            while (v759);
            goto LABEL_617;
          }
          v754 = 0;
          v755 = 0;
          v752 = v751 & 0xFFFFFFFFFFFFFFFELL;
          v756 = v1329 + 8;
          v757 = v1331 + 8;
          v758 = v751 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v754 += *(v757 - 1) * (*(v756 - 1) - 1);
            v755 += *v757 * (*v756 - 1);
            v756 += 2;
            v757 += 2;
            v758 -= 2;
          }
          while (v758);
          v753 = v755 + v754;
          if (v751 != v752)
            goto LABEL_615;
LABEL_617:
          if (v272 != v753 + 1)
LABEL_996:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v766 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v767 = v766 >> 3;
            if ((unint64_t)(v766 >> 3) <= 1)
              v767 = 1;
            if (v767 >= 2)
            {
              v770 = 0;
              v771 = 0;
              v768 = v767 & 0xFFFFFFFFFFFFFFFELL;
              v772 = v1329 + 8;
              v773 = v1331 + 8;
              v774 = v767 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v770 += *(v773 - 1) * (*(v772 - 1) - 1);
                v771 += *v773 * (*v772 - 1);
                v772 += 2;
                v773 += 2;
                v774 -= 2;
              }
              while (v774);
              v769 = v771 + v770;
              if (v767 == v768)
                goto LABEL_628;
            }
            else
            {
              v768 = 0;
              v769 = 0;
            }
            v775 = v767 - v768;
            v776 = 8 * v768;
            v777 = &v1331[v776];
            v778 = &v1329[v776];
            do
            {
              v779 = *(_QWORD *)v778;
              v778 += 8;
              v780 = v779 - 1;
              v781 = *(_QWORD *)v777;
              v777 += 8;
              v769 += v781 * v780;
              --v775;
            }
            while (v775);
LABEL_628:
            v782 = v769 + 1;
            goto LABEL_998;
          }
LABEL_997:
          v782 = 0;
LABEL_998:
          v1183 = v1333 + v782;
          if (v1183)
          {
            v1184 = 0;
            v1185 = (float *)v1327;
            do
            {
              *v1185 = *v1185 + (float)*(int *)(v50 + 4 * v1184);
              ++v1185;
              v1184 = (v1184 + 1) % v49;
              --v1183;
            }
            while (v1183);
          }
          if (v268)
          {
            v1186 = (unint64_t *)&v268->__shared_owners_;
            do
              v1187 = __ldaxr(v1186);
            while (__stlxr(v1187 - 1, v1186));
            if (!v1187)
            {
              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
              std::__shared_weak_count::__release_weak(v268);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1188 = v1328;
          if (!v1328)
            goto LABEL_1213;
          v1189 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1190 = __ldaxr(v1189);
          while (__stlxr(v1190 - 1, v1189));
          goto LABEL_1211;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v70 = *(_QWORD *)v1307;
          if (v1311)
            goto LABEL_865;
          v71 = v1305;
          v72 = v1308 - (_BYTE *)v1307;
          if (v1308 == v1307)
            goto LABEL_358;
          if (!v1305)
          {
            v73 = 0;
            goto LABEL_348;
          }
          if ((unint64_t)(v72 - 8) < 8)
          {
            v73 = 1;
            v74 = (char *)v1307;
            do
            {
LABEL_347:
              v387 = *(_QWORD *)v74;
              v74 += 8;
              v73 *= v387;
            }
            while (v74 != v1308);
            goto LABEL_348;
          }
          v382 = ((unint64_t)(v72 - 8) >> 3) + 1;
          v74 = (char *)v1307 + 8 * (v382 & 0x3FFFFFFFFFFFFFFELL);
          v383 = (char *)v1307 + 8;
          v384 = 1;
          v385 = v382 & 0x3FFFFFFFFFFFFFFELL;
          v386 = 1;
          do
          {
            v384 *= *(v383 - 1);
            v386 *= *v383;
            v383 += 2;
            v385 -= 2;
          }
          while (v385);
          v73 = v386 * v384;
          if (v382 != (v382 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_347;
LABEL_348:
          v388 = v72 >> 3;
          if ((unint64_t)(v72 >> 3) <= 1)
            v388 = 1;
          if (v388 < 2)
          {
            v389 = 0;
            v390 = 0;
LABEL_355:
            v396 = v388 - v389;
            v397 = 8 * v389;
            v398 = (uint64_t *)((char *)v1309 + v397);
            v399 = (uint64_t *)((char *)v1307 + v397);
            do
            {
              v400 = *v399++;
              v401 = v400 - 1;
              v402 = *v398++;
              v390 += v402 * v401;
              --v396;
            }
            while (v396);
            goto LABEL_357;
          }
          v391 = 0;
          v392 = 0;
          v389 = v388 & 0xFFFFFFFFFFFFFFFELL;
          v393 = (char *)v1307 + 8;
          v394 = (char *)v1309 + 8;
          v395 = v388 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v391 += *(v394 - 1) * (*(v393 - 1) - 1);
            v392 += *v394 * (*v393 - 1);
            v393 += 2;
            v394 += 2;
            v395 -= 2;
          }
          while (v395);
          v390 = v392 + v391;
          if (v388 != v389)
            goto LABEL_355;
LABEL_357:
          if (v73 != v390 + 1)
LABEL_865:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_358:
          v403 = v1306;
          if (v1306)
          {
            v404 = (unint64_t *)&v1306->__shared_owners_;
            do
              v405 = __ldxr(v404);
            while (__stxr(v405 + 1, v404));
          }
          if (v1333)
            goto LABEL_1104;
          v406 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1105;
          v407 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_733;
          if ((unint64_t)(v406 - 8) < 8)
          {
            v407 = 1;
            v408 = v1329;
            do
            {
LABEL_732:
              v940 = *(_QWORD *)v408;
              v408 += 8;
              v407 *= v940;
            }
            while (v408 != v1330);
            goto LABEL_733;
          }
          v935 = ((unint64_t)(v406 - 8) >> 3) + 1;
          v408 = &v1329[8 * (v935 & 0x3FFFFFFFFFFFFFFELL)];
          v936 = v1329 + 8;
          v937 = 1;
          v938 = v935 & 0x3FFFFFFFFFFFFFFELL;
          v939 = 1;
          do
          {
            v937 *= *(v936 - 1);
            v939 *= *v936;
            v936 += 2;
            v938 -= 2;
          }
          while (v938);
          v407 = v939 * v937;
          if (v935 != (v935 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_732;
LABEL_733:
          v941 = v406 >> 3;
          if ((unint64_t)(v406 >> 3) <= 1)
            v941 = 1;
          if (v941 < 2)
          {
            v942 = 0;
            v943 = 0;
LABEL_740:
            v949 = v941 - v942;
            v950 = 8 * v942;
            v951 = &v1331[v950];
            v952 = &v1329[v950];
            do
            {
              v953 = *(_QWORD *)v952;
              v952 += 8;
              v954 = v953 - 1;
              v955 = *(_QWORD *)v951;
              v951 += 8;
              v943 += v955 * v954;
              --v949;
            }
            while (v949);
            goto LABEL_742;
          }
          v944 = 0;
          v945 = 0;
          v942 = v941 & 0xFFFFFFFFFFFFFFFELL;
          v946 = v1329 + 8;
          v947 = v1331 + 8;
          v948 = v941 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v944 += *(v947 - 1) * (*(v946 - 1) - 1);
            v945 += *v947 * (*v946 - 1);
            v946 += 2;
            v947 += 2;
            v948 -= 2;
          }
          while (v948);
          v943 = v945 + v944;
          if (v941 != v942)
            goto LABEL_740;
LABEL_742:
          if (v407 != v943 + 1)
LABEL_1104:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v956 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v957 = v956 >> 3;
            if ((unint64_t)(v956 >> 3) <= 1)
              v957 = 1;
            if (v957 >= 2)
            {
              v960 = 0;
              v961 = 0;
              v958 = v957 & 0xFFFFFFFFFFFFFFFELL;
              v962 = v1329 + 8;
              v963 = v1331 + 8;
              v964 = v957 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v960 += *(v963 - 1) * (*(v962 - 1) - 1);
                v961 += *v963 * (*v962 - 1);
                v962 += 2;
                v963 += 2;
                v964 -= 2;
              }
              while (v964);
              v959 = v961 + v960;
              if (v957 == v958)
                goto LABEL_753;
            }
            else
            {
              v958 = 0;
              v959 = 0;
            }
            v965 = v957 - v958;
            v966 = 8 * v958;
            v967 = &v1331[v966];
            v968 = &v1329[v966];
            do
            {
              v969 = *(_QWORD *)v968;
              v968 += 8;
              v970 = v969 - 1;
              v971 = *(_QWORD *)v967;
              v967 += 8;
              v959 += v971 * v970;
              --v965;
            }
            while (v965);
LABEL_753:
            v972 = v959 + 1;
            goto LABEL_1106;
          }
LABEL_1105:
          v972 = 0;
LABEL_1106:
          v1229 = v1333 + v972;
          if (v1229)
          {
            v1230 = 0;
            v1231 = (__int16 *)v1327;
            do
            {
              _S0 = (float)*(int *)(v71 + 4 * v1230);
              __asm { FCVT            H0, S0 }
              _H1 = *v1231;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              _S0 = _S1 + _S0;
              __asm { FCVT            H0, S0 }
              *v1231++ = LOWORD(_S0);
              v1230 = (v1230 + 1) % v70;
              --v1229;
            }
            while (v1229);
          }
          if (v403)
          {
            v1237 = (unint64_t *)&v403->__shared_owners_;
            do
              v1238 = __ldaxr(v1237);
            while (__stlxr(v1238 - 1, v1237));
            if (!v1238)
            {
              ((void (*)(std::__shared_weak_count *))v403->__on_zero_shared)(v403);
              std::__shared_weak_count::__release_weak(v403);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1188 = v1328;
          if (v1328)
          {
            v1239 = (unint64_t *)&v1328->__shared_owners_;
            do
              v1190 = __ldaxr(v1239);
            while (__stlxr(v1190 - 1, v1239));
LABEL_1211:
            if (!v1190)
            {
              ((void (*)(std::__shared_weak_count *))v1188->__on_zero_shared)(v1188);
              std::__shared_weak_count::__release_weak(v1188);
            }
          }
LABEL_1213:
          if (v1309)
          {
            v1310 = v1309;
            operator delete(v1309);
          }
          if (v1307)
          {
            v1308 = (char *)v1307;
            operator delete(v1307);
          }
          v1266 = v1306;
          if (v1306)
          {
            v1267 = (unint64_t *)&v1306->__shared_owners_;
            do
              v1268 = __ldaxr(v1267);
            while (__stlxr(v1268 - 1, v1267));
            if (!v1268)
            {
              ((void (*)(std::__shared_weak_count *))v1266->__on_zero_shared)(v1266);
              std::__shared_weak_count::__release_weak(v1266);
            }
          }
          if (v1302)
          {
            v1303 = v1302;
            operator delete(v1302);
          }
          if (v1300)
          {
            v1301 = v1300;
            operator delete(v1300);
          }
          v1180 = v1299;
          if (!v1299)
            return;
          v1269 = (unint64_t *)&v1299->__shared_owners_;
          do
            v1182 = __ldaxr(v1269);
          while (__stlxr(v1182 - 1, v1269));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1229;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1312, (uint64_t)a2);
      v1318 = &v1326;
      nitro::ndarray<unsigned char>::ndarray(&v1319, &v1312);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v18 = *(_QWORD *)v1321;
          if (v1325)
            goto LABEL_867;
          v19 = v1319;
          v20 = v1322 - v1321;
          if (v1322 == v1321)
            goto LABEL_402;
          if (!v1319)
          {
            v21 = 0;
            goto LABEL_392;
          }
          if ((unint64_t)(v20 - 8) < 8)
          {
            v21 = 1;
            v22 = v1321;
            do
            {
LABEL_391:
              v441 = *(_QWORD *)v22;
              v22 += 8;
              v21 *= v441;
            }
            while (v22 != v1322);
            goto LABEL_392;
          }
          v436 = ((unint64_t)(v20 - 8) >> 3) + 1;
          v22 = &v1321[8 * (v436 & 0x3FFFFFFFFFFFFFFELL)];
          v437 = v1321 + 8;
          v438 = 1;
          v439 = v436 & 0x3FFFFFFFFFFFFFFELL;
          v440 = 1;
          do
          {
            v438 *= *(v437 - 1);
            v440 *= *v437;
            v437 += 2;
            v439 -= 2;
          }
          while (v439);
          v21 = v440 * v438;
          if (v436 != (v436 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_391;
LABEL_392:
          v442 = v20 >> 3;
          if ((unint64_t)(v20 >> 3) <= 1)
            v442 = 1;
          if (v442 < 2)
          {
            v443 = 0;
            v444 = 0;
LABEL_399:
            v450 = v442 - v443;
            v451 = 8 * v443;
            v452 = &v1323[v451];
            v453 = &v1321[v451];
            do
            {
              v454 = *(_QWORD *)v453;
              v453 += 8;
              v455 = v454 - 1;
              v456 = *(_QWORD *)v452;
              v452 += 8;
              v444 += v456 * v455;
              --v450;
            }
            while (v450);
            goto LABEL_401;
          }
          v445 = 0;
          v446 = 0;
          v443 = v442 & 0xFFFFFFFFFFFFFFFELL;
          v447 = v1321 + 8;
          v448 = v1323 + 8;
          v449 = v442 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v445 += *(v448 - 1) * (*(v447 - 1) - 1);
            v446 += *v448 * (*v447 - 1);
            v447 += 2;
            v448 += 2;
            v449 -= 2;
          }
          while (v449);
          v444 = v446 + v445;
          if (v442 != v443)
            goto LABEL_399;
LABEL_401:
          if (v21 != v444 + 1)
LABEL_867:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_402:
          v457 = v1320;
          if (v1320)
          {
            v458 = (unint64_t *)&v1320->__shared_owners_;
            do
              v459 = __ldxr(v458);
            while (__stxr(v459 + 1, v458));
          }
          if (v1333)
            goto LABEL_1140;
          v460 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1141;
          v461 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_783;
          if ((unint64_t)(v460 - 8) < 8)
          {
            v461 = 1;
            v462 = v1329;
            do
            {
LABEL_782:
              v1016 = *(_QWORD *)v462;
              v462 += 8;
              v461 *= v1016;
            }
            while (v462 != v1330);
            goto LABEL_783;
          }
          v1011 = ((unint64_t)(v460 - 8) >> 3) + 1;
          v462 = &v1329[8 * (v1011 & 0x3FFFFFFFFFFFFFFELL)];
          v1012 = v1329 + 8;
          v1013 = 1;
          v1014 = v1011 & 0x3FFFFFFFFFFFFFFELL;
          v1015 = 1;
          do
          {
            v1013 *= *(v1012 - 1);
            v1015 *= *v1012;
            v1012 += 2;
            v1014 -= 2;
          }
          while (v1014);
          v461 = v1015 * v1013;
          if (v1011 != (v1011 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_782;
LABEL_783:
          v1017 = v460 >> 3;
          if ((unint64_t)(v460 >> 3) <= 1)
            v1017 = 1;
          if (v1017 < 2)
          {
            v1018 = 0;
            v1019 = 0;
LABEL_790:
            v1025 = v1017 - v1018;
            v1026 = 8 * v1018;
            v1027 = &v1331[v1026];
            v1028 = &v1329[v1026];
            do
            {
              v1029 = *(_QWORD *)v1028;
              v1028 += 8;
              v1030 = v1029 - 1;
              v1031 = *(_QWORD *)v1027;
              v1027 += 8;
              v1019 += v1031 * v1030;
              --v1025;
            }
            while (v1025);
            goto LABEL_792;
          }
          v1020 = 0;
          v1021 = 0;
          v1018 = v1017 & 0xFFFFFFFFFFFFFFFELL;
          v1022 = v1329 + 8;
          v1023 = v1331 + 8;
          v1024 = v1017 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1020 += *(v1023 - 1) * (*(v1022 - 1) - 1);
            v1021 += *v1023 * (*v1022 - 1);
            v1022 += 2;
            v1023 += 2;
            v1024 -= 2;
          }
          while (v1024);
          v1019 = v1021 + v1020;
          if (v1017 != v1018)
            goto LABEL_790;
LABEL_792:
          if (v461 != v1019 + 1)
LABEL_1140:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v1032 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v1033 = v1032 >> 3;
            if ((unint64_t)(v1032 >> 3) <= 1)
              v1033 = 1;
            if (v1033 >= 2)
            {
              v1036 = 0;
              v1037 = 0;
              v1034 = v1033 & 0xFFFFFFFFFFFFFFFELL;
              v1038 = v1329 + 8;
              v1039 = v1331 + 8;
              v1040 = v1033 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1036 += *(v1039 - 1) * (*(v1038 - 1) - 1);
                v1037 += *v1039 * (*v1038 - 1);
                v1038 += 2;
                v1039 += 2;
                v1040 -= 2;
              }
              while (v1040);
              v1035 = v1037 + v1036;
              if (v1033 == v1034)
                goto LABEL_803;
            }
            else
            {
              v1034 = 0;
              v1035 = 0;
            }
            v1041 = v1033 - v1034;
            v1042 = 8 * v1034;
            v1043 = &v1331[v1042];
            v1044 = &v1329[v1042];
            do
            {
              v1045 = *(_QWORD *)v1044;
              v1044 += 8;
              v1046 = v1045 - 1;
              v1047 = *(_QWORD *)v1043;
              v1043 += 8;
              v1035 += v1047 * v1046;
              --v1041;
            }
            while (v1041);
LABEL_803:
            v1048 = v1035 + 1;
            goto LABEL_1142;
          }
LABEL_1141:
          v1048 = 0;
LABEL_1142:
          v1245 = v1333 + v1048;
          if (v1245)
          {
            v1246 = 0;
            v1247 = v1327;
            do
            {
              *v1247++ += *(unsigned __int8 *)(v19 + v1246);
              v1246 = (v1246 + 1) % v18;
              --v1245;
            }
            while (v1245);
          }
          if (v457)
          {
            v1248 = (unint64_t *)&v457->__shared_owners_;
            do
              v1249 = __ldaxr(v1248);
            while (__stlxr(v1249 - 1, v1248));
            if (!v1249)
            {
              ((void (*)(std::__shared_weak_count *))v457->__on_zero_shared)(v457);
              std::__shared_weak_count::__release_weak(v457);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1168 = v1328;
          if (!v1328)
            goto LABEL_1159;
          v1250 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1170 = __ldaxr(v1250);
          while (__stlxr(v1170 - 1, v1250));
          goto LABEL_1157;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v75 = *(_QWORD *)v1321;
          if (v1325)
            goto LABEL_866;
          v76 = v1319;
          v77 = v1322 - v1321;
          if (v1322 == v1321)
            goto LABEL_380;
          if (!v1319)
          {
            v78 = 0;
            goto LABEL_370;
          }
          if ((unint64_t)(v77 - 8) < 8)
          {
            v78 = 1;
            v79 = v1321;
            do
            {
LABEL_369:
              v414 = *(_QWORD *)v79;
              v79 += 8;
              v78 *= v414;
            }
            while (v79 != v1322);
            goto LABEL_370;
          }
          v409 = ((unint64_t)(v77 - 8) >> 3) + 1;
          v79 = &v1321[8 * (v409 & 0x3FFFFFFFFFFFFFFELL)];
          v410 = v1321 + 8;
          v411 = 1;
          v412 = v409 & 0x3FFFFFFFFFFFFFFELL;
          v413 = 1;
          do
          {
            v411 *= *(v410 - 1);
            v413 *= *v410;
            v410 += 2;
            v412 -= 2;
          }
          while (v412);
          v78 = v413 * v411;
          if (v409 != (v409 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_369;
LABEL_370:
          v415 = v77 >> 3;
          if ((unint64_t)(v77 >> 3) <= 1)
            v415 = 1;
          if (v415 < 2)
          {
            v416 = 0;
            v417 = 0;
LABEL_377:
            v423 = v415 - v416;
            v424 = 8 * v416;
            v425 = &v1323[v424];
            v426 = &v1321[v424];
            do
            {
              v427 = *(_QWORD *)v426;
              v426 += 8;
              v428 = v427 - 1;
              v429 = *(_QWORD *)v425;
              v425 += 8;
              v417 += v429 * v428;
              --v423;
            }
            while (v423);
            goto LABEL_379;
          }
          v418 = 0;
          v419 = 0;
          v416 = v415 & 0xFFFFFFFFFFFFFFFELL;
          v420 = v1321 + 8;
          v421 = v1323 + 8;
          v422 = v415 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v418 += *(v421 - 1) * (*(v420 - 1) - 1);
            v419 += *v421 * (*v420 - 1);
            v420 += 2;
            v421 += 2;
            v422 -= 2;
          }
          while (v422);
          v417 = v419 + v418;
          if (v415 != v416)
            goto LABEL_377;
LABEL_379:
          if (v78 != v417 + 1)
LABEL_866:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_380:
          v430 = v1320;
          if (v1320)
          {
            v431 = (unint64_t *)&v1320->__shared_owners_;
            do
              v432 = __ldxr(v431);
            while (__stxr(v432 + 1, v431));
          }
          if (v1333)
            goto LABEL_1122;
          v433 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1123;
          v434 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_758;
          if ((unint64_t)(v433 - 8) < 8)
          {
            v434 = 1;
            v435 = v1329;
            do
            {
LABEL_757:
              v978 = *(_QWORD *)v435;
              v435 += 8;
              v434 *= v978;
            }
            while (v435 != v1330);
            goto LABEL_758;
          }
          v973 = ((unint64_t)(v433 - 8) >> 3) + 1;
          v435 = &v1329[8 * (v973 & 0x3FFFFFFFFFFFFFFELL)];
          v974 = v1329 + 8;
          v975 = 1;
          v976 = v973 & 0x3FFFFFFFFFFFFFFELL;
          v977 = 1;
          do
          {
            v975 *= *(v974 - 1);
            v977 *= *v974;
            v974 += 2;
            v976 -= 2;
          }
          while (v976);
          v434 = v977 * v975;
          if (v973 != (v973 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_757;
LABEL_758:
          v979 = v433 >> 3;
          if ((unint64_t)(v433 >> 3) <= 1)
            v979 = 1;
          if (v979 < 2)
          {
            v980 = 0;
            v981 = 0;
LABEL_765:
            v987 = v979 - v980;
            v988 = 8 * v980;
            v989 = &v1331[v988];
            v990 = &v1329[v988];
            do
            {
              v991 = *(_QWORD *)v990;
              v990 += 8;
              v992 = v991 - 1;
              v993 = *(_QWORD *)v989;
              v989 += 8;
              v981 += v993 * v992;
              --v987;
            }
            while (v987);
            goto LABEL_767;
          }
          v982 = 0;
          v983 = 0;
          v980 = v979 & 0xFFFFFFFFFFFFFFFELL;
          v984 = v1329 + 8;
          v985 = v1331 + 8;
          v986 = v979 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v982 += *(v985 - 1) * (*(v984 - 1) - 1);
            v983 += *v985 * (*v984 - 1);
            v984 += 2;
            v985 += 2;
            v986 -= 2;
          }
          while (v986);
          v981 = v983 + v982;
          if (v979 != v980)
            goto LABEL_765;
LABEL_767:
          if (v434 != v981 + 1)
LABEL_1122:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v994 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v995 = v994 >> 3;
            if ((unint64_t)(v994 >> 3) <= 1)
              v995 = 1;
            if (v995 >= 2)
            {
              v998 = 0;
              v999 = 0;
              v996 = v995 & 0xFFFFFFFFFFFFFFFELL;
              v1000 = v1329 + 8;
              v1001 = v1331 + 8;
              v1002 = v995 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v998 += *(v1001 - 1) * (*(v1000 - 1) - 1);
                v999 += *v1001 * (*v1000 - 1);
                v1000 += 2;
                v1001 += 2;
                v1002 -= 2;
              }
              while (v1002);
              v997 = v999 + v998;
              if (v995 == v996)
                goto LABEL_778;
            }
            else
            {
              v996 = 0;
              v997 = 0;
            }
            v1003 = v995 - v996;
            v1004 = 8 * v996;
            v1005 = &v1331[v1004];
            v1006 = &v1329[v1004];
            do
            {
              v1007 = *(_QWORD *)v1006;
              v1006 += 8;
              v1008 = v1007 - 1;
              v1009 = *(_QWORD *)v1005;
              v1005 += 8;
              v997 += v1009 * v1008;
              --v1003;
            }
            while (v1003);
LABEL_778:
            v1010 = v997 + 1;
            goto LABEL_1124;
          }
LABEL_1123:
          v1010 = 0;
LABEL_1124:
          if (v1333 + v1010)
          {
            v1240 = 0;
            v1241 = 0;
            do
            {
              *((_BYTE *)v1327 + v1240) += *(_BYTE *)(v76 + v1241);
              v1241 = (v1241 + 1) % v75;
              ++v1240;
            }
            while (v1240 < v1333 + v1010);
          }
          if (v430)
          {
            v1242 = (unint64_t *)&v430->__shared_owners_;
            do
              v1243 = __ldaxr(v1242);
            while (__stlxr(v1243 - 1, v1242));
            if (!v1243)
            {
              ((void (*)(std::__shared_weak_count *))v430->__on_zero_shared)(v430);
              std::__shared_weak_count::__release_weak(v430);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1168 = v1328;
          if (!v1328)
            goto LABEL_1159;
          v1244 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1170 = __ldaxr(v1244);
          while (__stlxr(v1170 - 1, v1244));
          goto LABEL_1157;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v44 = *(_QWORD *)v1321;
          if (v1325)
            goto LABEL_858;
          v45 = v1319;
          v46 = v1322 - v1321;
          if (v1322 == v1321)
            goto LABEL_204;
          if (!v1319)
          {
            v47 = 0;
            goto LABEL_194;
          }
          if ((unint64_t)(v46 - 8) < 8)
          {
            v47 = 1;
            v48 = v1321;
            do
            {
LABEL_193:
              v198 = *(_QWORD *)v48;
              v48 += 8;
              v47 *= v198;
            }
            while (v48 != v1322);
            goto LABEL_194;
          }
          v193 = ((unint64_t)(v46 - 8) >> 3) + 1;
          v48 = &v1321[8 * (v193 & 0x3FFFFFFFFFFFFFFELL)];
          v194 = v1321 + 8;
          v195 = 1;
          v196 = v193 & 0x3FFFFFFFFFFFFFFELL;
          v197 = 1;
          do
          {
            v195 *= *(v194 - 1);
            v197 *= *v194;
            v194 += 2;
            v196 -= 2;
          }
          while (v196);
          v47 = v197 * v195;
          if (v193 != (v193 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_193;
LABEL_194:
          v199 = v46 >> 3;
          if ((unint64_t)(v46 >> 3) <= 1)
            v199 = 1;
          if (v199 < 2)
          {
            v200 = 0;
            v201 = 0;
LABEL_201:
            v207 = v199 - v200;
            v208 = 8 * v200;
            v209 = &v1323[v208];
            v210 = &v1321[v208];
            do
            {
              v211 = *(_QWORD *)v210;
              v210 += 8;
              v212 = v211 - 1;
              v213 = *(_QWORD *)v209;
              v209 += 8;
              v201 += v213 * v212;
              --v207;
            }
            while (v207);
            goto LABEL_203;
          }
          v202 = 0;
          v203 = 0;
          v200 = v199 & 0xFFFFFFFFFFFFFFFELL;
          v204 = v1321 + 8;
          v205 = v1323 + 8;
          v206 = v199 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v202 += *(v205 - 1) * (*(v204 - 1) - 1);
            v203 += *v205 * (*v204 - 1);
            v204 += 2;
            v205 += 2;
            v206 -= 2;
          }
          while (v206);
          v201 = v203 + v202;
          if (v199 != v200)
            goto LABEL_201;
LABEL_203:
          if (v47 != v201 + 1)
LABEL_858:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_204:
          v214 = v1320;
          if (v1320)
          {
            v215 = (unint64_t *)&v1320->__shared_owners_;
            do
              v216 = __ldxr(v215);
            while (__stxr(v216 + 1, v215));
          }
          if (v1333)
            goto LABEL_942;
          v217 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_943;
          v218 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_558;
          if ((unint64_t)(v217 - 8) < 8)
          {
            v218 = 1;
            v219 = v1329;
            do
            {
LABEL_557:
              v674 = *(_QWORD *)v219;
              v219 += 8;
              v218 *= v674;
            }
            while (v219 != v1330);
            goto LABEL_558;
          }
          v669 = ((unint64_t)(v217 - 8) >> 3) + 1;
          v219 = &v1329[8 * (v669 & 0x3FFFFFFFFFFFFFFELL)];
          v670 = v1329 + 8;
          v671 = 1;
          v672 = v669 & 0x3FFFFFFFFFFFFFFELL;
          v673 = 1;
          do
          {
            v671 *= *(v670 - 1);
            v673 *= *v670;
            v670 += 2;
            v672 -= 2;
          }
          while (v672);
          v218 = v673 * v671;
          if (v669 != (v669 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_557;
LABEL_558:
          v675 = v217 >> 3;
          if ((unint64_t)(v217 >> 3) <= 1)
            v675 = 1;
          if (v675 < 2)
          {
            v676 = 0;
            v677 = 0;
LABEL_565:
            v683 = v675 - v676;
            v684 = 8 * v676;
            v685 = &v1331[v684];
            v686 = &v1329[v684];
            do
            {
              v687 = *(_QWORD *)v686;
              v686 += 8;
              v688 = v687 - 1;
              v689 = *(_QWORD *)v685;
              v685 += 8;
              v677 += v689 * v688;
              --v683;
            }
            while (v683);
            goto LABEL_567;
          }
          v678 = 0;
          v679 = 0;
          v676 = v675 & 0xFFFFFFFFFFFFFFFELL;
          v680 = v1329 + 8;
          v681 = v1331 + 8;
          v682 = v675 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v678 += *(v681 - 1) * (*(v680 - 1) - 1);
            v679 += *v681 * (*v680 - 1);
            v680 += 2;
            v681 += 2;
            v682 -= 2;
          }
          while (v682);
          v677 = v679 + v678;
          if (v675 != v676)
            goto LABEL_565;
LABEL_567:
          if (v218 != v677 + 1)
LABEL_942:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v690 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v691 = v690 >> 3;
            if ((unint64_t)(v690 >> 3) <= 1)
              v691 = 1;
            if (v691 >= 2)
            {
              v694 = 0;
              v695 = 0;
              v692 = v691 & 0xFFFFFFFFFFFFFFFELL;
              v696 = v1329 + 8;
              v697 = v1331 + 8;
              v698 = v691 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v694 += *(v697 - 1) * (*(v696 - 1) - 1);
                v695 += *v697 * (*v696 - 1);
                v696 += 2;
                v697 += 2;
                v698 -= 2;
              }
              while (v698);
              v693 = v695 + v694;
              if (v691 == v692)
                goto LABEL_578;
            }
            else
            {
              v692 = 0;
              v693 = 0;
            }
            v699 = v691 - v692;
            v700 = 8 * v692;
            v701 = &v1331[v700];
            v702 = &v1329[v700];
            do
            {
              v703 = *(_QWORD *)v702;
              v702 += 8;
              v704 = v703 - 1;
              v705 = *(_QWORD *)v701;
              v701 += 8;
              v693 += v705 * v704;
              --v699;
            }
            while (v699);
LABEL_578:
            v706 = v693 + 1;
            goto LABEL_944;
          }
LABEL_943:
          v706 = 0;
LABEL_944:
          v1163 = v1333 + v706;
          if (v1163)
          {
            v1164 = 0;
            v1165 = (float *)v1327;
            do
            {
              LOBYTE(v43) = *(_BYTE *)(v45 + v1164);
              v43 = *v1165 + (float)LODWORD(v43);
              *v1165++ = v43;
              v1164 = (v1164 + 1) % v44;
              --v1163;
            }
            while (v1163);
          }
          if (v214)
          {
            v1166 = (unint64_t *)&v214->__shared_owners_;
            do
              v1167 = __ldaxr(v1166);
            while (__stlxr(v1167 - 1, v1166));
            if (!v1167)
            {
              ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
              std::__shared_weak_count::__release_weak(v214);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1168 = v1328;
          if (!v1328)
            goto LABEL_1159;
          v1169 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1170 = __ldaxr(v1169);
          while (__stlxr(v1170 - 1, v1169));
          goto LABEL_1157;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v65 = *(_QWORD *)v1321;
          if (v1325)
            goto LABEL_863;
          v66 = v1319;
          v67 = v1322 - v1321;
          if (v1322 == v1321)
            goto LABEL_314;
          if (!v1319)
          {
            v68 = 0;
            goto LABEL_304;
          }
          if ((unint64_t)(v67 - 8) < 8)
          {
            v68 = 1;
            v69 = v1321;
            do
            {
LABEL_303:
              v333 = *(_QWORD *)v69;
              v69 += 8;
              v68 *= v333;
            }
            while (v69 != v1322);
            goto LABEL_304;
          }
          v328 = ((unint64_t)(v67 - 8) >> 3) + 1;
          v69 = &v1321[8 * (v328 & 0x3FFFFFFFFFFFFFFELL)];
          v329 = v1321 + 8;
          v330 = 1;
          v331 = v328 & 0x3FFFFFFFFFFFFFFELL;
          v332 = 1;
          do
          {
            v330 *= *(v329 - 1);
            v332 *= *v329;
            v329 += 2;
            v331 -= 2;
          }
          while (v331);
          v68 = v332 * v330;
          if (v328 != (v328 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_303;
LABEL_304:
          v334 = v67 >> 3;
          if ((unint64_t)(v67 >> 3) <= 1)
            v334 = 1;
          if (v334 < 2)
          {
            v335 = 0;
            v336 = 0;
LABEL_311:
            v342 = v334 - v335;
            v343 = 8 * v335;
            v344 = &v1323[v343];
            v345 = &v1321[v343];
            do
            {
              v346 = *(_QWORD *)v345;
              v345 += 8;
              v347 = v346 - 1;
              v348 = *(_QWORD *)v344;
              v344 += 8;
              v336 += v348 * v347;
              --v342;
            }
            while (v342);
            goto LABEL_313;
          }
          v337 = 0;
          v338 = 0;
          v335 = v334 & 0xFFFFFFFFFFFFFFFELL;
          v339 = v1321 + 8;
          v340 = v1323 + 8;
          v341 = v334 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v337 += *(v340 - 1) * (*(v339 - 1) - 1);
            v338 += *v340 * (*v339 - 1);
            v339 += 2;
            v340 += 2;
            v341 -= 2;
          }
          while (v341);
          v336 = v338 + v337;
          if (v334 != v335)
            goto LABEL_311;
LABEL_313:
          if (v68 != v336 + 1)
LABEL_863:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_314:
          v349 = v1320;
          if (v1320)
          {
            v350 = (unint64_t *)&v1320->__shared_owners_;
            do
              v351 = __ldxr(v350);
            while (__stxr(v351 + 1, v350));
          }
          if (v1333)
            goto LABEL_1050;
          v352 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1051;
          v353 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_683;
          if ((unint64_t)(v352 - 8) < 8)
          {
            v353 = 1;
            v354 = v1329;
            do
            {
LABEL_682:
              v864 = *(_QWORD *)v354;
              v354 += 8;
              v353 *= v864;
            }
            while (v354 != v1330);
            goto LABEL_683;
          }
          v859 = ((unint64_t)(v352 - 8) >> 3) + 1;
          v354 = &v1329[8 * (v859 & 0x3FFFFFFFFFFFFFFELL)];
          v860 = v1329 + 8;
          v861 = 1;
          v862 = v859 & 0x3FFFFFFFFFFFFFFELL;
          v863 = 1;
          do
          {
            v861 *= *(v860 - 1);
            v863 *= *v860;
            v860 += 2;
            v862 -= 2;
          }
          while (v862);
          v353 = v863 * v861;
          if (v859 != (v859 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_682;
LABEL_683:
          v865 = v352 >> 3;
          if ((unint64_t)(v352 >> 3) <= 1)
            v865 = 1;
          if (v865 < 2)
          {
            v866 = 0;
            v867 = 0;
LABEL_690:
            v873 = v865 - v866;
            v874 = 8 * v866;
            v875 = &v1331[v874];
            v876 = &v1329[v874];
            do
            {
              v877 = *(_QWORD *)v876;
              v876 += 8;
              v878 = v877 - 1;
              v879 = *(_QWORD *)v875;
              v875 += 8;
              v867 += v879 * v878;
              --v873;
            }
            while (v873);
            goto LABEL_692;
          }
          v868 = 0;
          v869 = 0;
          v866 = v865 & 0xFFFFFFFFFFFFFFFELL;
          v870 = v1329 + 8;
          v871 = v1331 + 8;
          v872 = v865 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v868 += *(v871 - 1) * (*(v870 - 1) - 1);
            v869 += *v871 * (*v870 - 1);
            v870 += 2;
            v871 += 2;
            v872 -= 2;
          }
          while (v872);
          v867 = v869 + v868;
          if (v865 != v866)
            goto LABEL_690;
LABEL_692:
          if (v353 != v867 + 1)
LABEL_1050:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v880 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v881 = v880 >> 3;
            if ((unint64_t)(v880 >> 3) <= 1)
              v881 = 1;
            if (v881 >= 2)
            {
              v884 = 0;
              v885 = 0;
              v882 = v881 & 0xFFFFFFFFFFFFFFFELL;
              v886 = v1329 + 8;
              v887 = v1331 + 8;
              v888 = v881 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v884 += *(v887 - 1) * (*(v886 - 1) - 1);
                v885 += *v887 * (*v886 - 1);
                v886 += 2;
                v887 += 2;
                v888 -= 2;
              }
              while (v888);
              v883 = v885 + v884;
              if (v881 == v882)
                goto LABEL_703;
            }
            else
            {
              v882 = 0;
              v883 = 0;
            }
            v889 = v881 - v882;
            v890 = 8 * v882;
            v891 = &v1331[v890];
            v892 = &v1329[v890];
            do
            {
              v893 = *(_QWORD *)v892;
              v892 += 8;
              v894 = v893 - 1;
              v895 = *(_QWORD *)v891;
              v891 += 8;
              v883 += v895 * v894;
              --v889;
            }
            while (v889);
LABEL_703:
            v896 = v883 + 1;
            goto LABEL_1052;
          }
LABEL_1051:
          v896 = 0;
LABEL_1052:
          v1209 = v1333 + v896;
          if (v1209)
          {
            v1210 = 0;
            v1211 = (__int16 *)v1327;
            do
            {
              LOBYTE(_S0) = *(_BYTE *)(v66 + v1210);
              _H1 = *v1211;
              __asm { FCVT            S1, H1 }
              _S0 = (float)LODWORD(_S0) + _S1;
              __asm { FCVT            H0, S0 }
              *v1211++ = LOWORD(_S0);
              v1210 = (v1210 + 1) % v65;
              --v1209;
            }
            while (v1209);
          }
          if (v349)
          {
            v1214 = (unint64_t *)&v349->__shared_owners_;
            do
              v1215 = __ldaxr(v1214);
            while (__stlxr(v1215 - 1, v1214));
            if (!v1215)
            {
              ((void (*)(std::__shared_weak_count *))v349->__on_zero_shared)(v349);
              std::__shared_weak_count::__release_weak(v349);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1168 = v1328;
          if (v1328)
          {
            v1216 = (unint64_t *)&v1328->__shared_owners_;
            do
              v1170 = __ldaxr(v1216);
            while (__stlxr(v1170 - 1, v1216));
LABEL_1157:
            if (!v1170)
            {
              ((void (*)(std::__shared_weak_count *))v1168->__on_zero_shared)(v1168);
              std::__shared_weak_count::__release_weak(v1168);
            }
          }
LABEL_1159:
          if (v1323)
          {
            v1324 = v1323;
            operator delete(v1323);
          }
          if (v1321)
          {
            v1322 = v1321;
            operator delete(v1321);
          }
          v1251 = v1320;
          if (v1320)
          {
            v1252 = (unint64_t *)&v1320->__shared_owners_;
            do
              v1253 = __ldaxr(v1252);
            while (__stlxr(v1253 - 1, v1252));
            if (!v1253)
            {
              ((void (*)(std::__shared_weak_count *))v1251->__on_zero_shared)(v1251);
              std::__shared_weak_count::__release_weak(v1251);
            }
          }
          if (v1316)
          {
            v1317 = v1316;
            operator delete(v1316);
          }
          if (v1314)
          {
            v1315 = v1314;
            operator delete(v1314);
          }
          v1180 = v1313;
          if (!v1313)
            return;
          v1254 = (unint64_t *)&v1313->__shared_owners_;
          do
            v1182 = __ldaxr(v1254);
          while (__stlxr(v1182 - 1, v1254));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1229;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1270, (uint64_t)a2);
      v1276 = &v1326;
      nitro::ndarray<float>::ndarray(&v1277, &v1270);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v8 = *(_QWORD *)v1279;
          if (v1283)
            goto LABEL_859;
          v9 = v1277;
          v10 = v1280 - (_BYTE *)v1279;
          if (v1280 == v1279)
            goto LABEL_226;
          if (!v1277)
          {
            v11 = 0;
            goto LABEL_216;
          }
          if ((unint64_t)(v10 - 8) < 8)
          {
            v11 = 1;
            v12 = (char *)v1279;
            do
            {
LABEL_215:
              v225 = *(_QWORD *)v12;
              v12 += 8;
              v11 *= v225;
            }
            while (v12 != v1280);
            goto LABEL_216;
          }
          v220 = ((unint64_t)(v10 - 8) >> 3) + 1;
          v12 = (char *)v1279 + 8 * (v220 & 0x3FFFFFFFFFFFFFFELL);
          v221 = (char *)v1279 + 8;
          v222 = 1;
          v223 = v220 & 0x3FFFFFFFFFFFFFFELL;
          v224 = 1;
          do
          {
            v222 *= *(v221 - 1);
            v224 *= *v221;
            v221 += 2;
            v223 -= 2;
          }
          while (v223);
          v11 = v224 * v222;
          if (v220 != (v220 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_215;
LABEL_216:
          v226 = v10 >> 3;
          if ((unint64_t)(v10 >> 3) <= 1)
            v226 = 1;
          if (v226 < 2)
          {
            v227 = 0;
            v228 = 0;
LABEL_223:
            v234 = v226 - v227;
            v235 = 8 * v227;
            v236 = (uint64_t *)((char *)__p + v235);
            v237 = (uint64_t *)((char *)v1279 + v235);
            do
            {
              v238 = *v237++;
              v239 = v238 - 1;
              v240 = *v236++;
              v228 += v240 * v239;
              --v234;
            }
            while (v234);
            goto LABEL_225;
          }
          v229 = 0;
          v230 = 0;
          v227 = v226 & 0xFFFFFFFFFFFFFFFELL;
          v231 = (char *)v1279 + 8;
          v232 = (char *)__p + 8;
          v233 = v226 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v229 += *(v232 - 1) * (*(v231 - 1) - 1);
            v230 += *v232 * (*v231 - 1);
            v231 += 2;
            v232 += 2;
            v233 -= 2;
          }
          while (v233);
          v228 = v230 + v229;
          if (v226 != v227)
            goto LABEL_223;
LABEL_225:
          if (v11 != v228 + 1)
LABEL_859:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_226:
          v241 = v1278;
          if (v1278)
          {
            v242 = (unint64_t *)&v1278->__shared_owners_;
            do
              v243 = __ldxr(v242);
            while (__stxr(v243 + 1, v242));
          }
          if (v1333)
            goto LABEL_960;
          v244 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_961;
          v245 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_583;
          if ((unint64_t)(v244 - 8) < 8)
          {
            v245 = 1;
            v246 = v1329;
            do
            {
LABEL_582:
              v712 = *(_QWORD *)v246;
              v246 += 8;
              v245 *= v712;
            }
            while (v246 != v1330);
            goto LABEL_583;
          }
          v707 = ((unint64_t)(v244 - 8) >> 3) + 1;
          v246 = &v1329[8 * (v707 & 0x3FFFFFFFFFFFFFFELL)];
          v708 = v1329 + 8;
          v709 = 1;
          v710 = v707 & 0x3FFFFFFFFFFFFFFELL;
          v711 = 1;
          do
          {
            v709 *= *(v708 - 1);
            v711 *= *v708;
            v708 += 2;
            v710 -= 2;
          }
          while (v710);
          v245 = v711 * v709;
          if (v707 != (v707 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_582;
LABEL_583:
          v713 = v244 >> 3;
          if ((unint64_t)(v244 >> 3) <= 1)
            v713 = 1;
          if (v713 < 2)
          {
            v714 = 0;
            v715 = 0;
LABEL_590:
            v721 = v713 - v714;
            v722 = 8 * v714;
            v723 = &v1331[v722];
            v724 = &v1329[v722];
            do
            {
              v725 = *(_QWORD *)v724;
              v724 += 8;
              v726 = v725 - 1;
              v727 = *(_QWORD *)v723;
              v723 += 8;
              v715 += v727 * v726;
              --v721;
            }
            while (v721);
            goto LABEL_592;
          }
          v716 = 0;
          v717 = 0;
          v714 = v713 & 0xFFFFFFFFFFFFFFFELL;
          v718 = v1329 + 8;
          v719 = v1331 + 8;
          v720 = v713 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v716 += *(v719 - 1) * (*(v718 - 1) - 1);
            v717 += *v719 * (*v718 - 1);
            v718 += 2;
            v719 += 2;
            v720 -= 2;
          }
          while (v720);
          v715 = v717 + v716;
          if (v713 != v714)
            goto LABEL_590;
LABEL_592:
          if (v245 != v715 + 1)
LABEL_960:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v728 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v729 = v728 >> 3;
            if ((unint64_t)(v728 >> 3) <= 1)
              v729 = 1;
            if (v729 >= 2)
            {
              v732 = 0;
              v733 = 0;
              v730 = v729 & 0xFFFFFFFFFFFFFFFELL;
              v734 = v1329 + 8;
              v735 = v1331 + 8;
              v736 = v729 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v732 += *(v735 - 1) * (*(v734 - 1) - 1);
                v733 += *v735 * (*v734 - 1);
                v734 += 2;
                v735 += 2;
                v736 -= 2;
              }
              while (v736);
              v731 = v733 + v732;
              if (v729 == v730)
                goto LABEL_603;
            }
            else
            {
              v730 = 0;
              v731 = 0;
            }
            v737 = v729 - v730;
            v738 = 8 * v730;
            v739 = &v1331[v738];
            v740 = &v1329[v738];
            do
            {
              v741 = *(_QWORD *)v740;
              v740 += 8;
              v742 = v741 - 1;
              v743 = *(_QWORD *)v739;
              v739 += 8;
              v731 += v743 * v742;
              --v737;
            }
            while (v737);
LABEL_603:
            v744 = v731 + 1;
            goto LABEL_962;
          }
LABEL_961:
          v744 = 0;
LABEL_962:
          v1171 = v1333 + v744;
          if (v1171)
          {
            v1172 = 0;
            v1173 = v1327;
            do
            {
              *v1173++ += (int)*(float *)(v9 + 4 * v1172);
              v1172 = (v1172 + 1) % v8;
              --v1171;
            }
            while (v1171);
          }
          if (v241)
          {
            v1174 = (unint64_t *)&v241->__shared_owners_;
            do
              v1175 = __ldaxr(v1174);
            while (__stlxr(v1175 - 1, v1174));
            if (!v1175)
            {
              ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
              std::__shared_weak_count::__release_weak(v241);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1130 = v1328;
          if (!v1328)
            goto LABEL_979;
          v1176 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1132 = __ldaxr(v1176);
          while (__stlxr(v1132 - 1, v1176));
          goto LABEL_977;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v38 = *(_QWORD *)v1279;
          if (v1283)
            goto LABEL_857;
          v39 = v1277;
          v40 = v1280 - (_BYTE *)v1279;
          if (v1280 == v1279)
            goto LABEL_182;
          if (!v1277)
          {
            v41 = 0;
            goto LABEL_172;
          }
          if ((unint64_t)(v40 - 8) < 8)
          {
            v41 = 1;
            v42 = (char *)v1279;
            do
            {
LABEL_171:
              v171 = *(_QWORD *)v42;
              v42 += 8;
              v41 *= v171;
            }
            while (v42 != v1280);
            goto LABEL_172;
          }
          v166 = ((unint64_t)(v40 - 8) >> 3) + 1;
          v42 = (char *)v1279 + 8 * (v166 & 0x3FFFFFFFFFFFFFFELL);
          v167 = (char *)v1279 + 8;
          v168 = 1;
          v169 = v166 & 0x3FFFFFFFFFFFFFFELL;
          v170 = 1;
          do
          {
            v168 *= *(v167 - 1);
            v170 *= *v167;
            v167 += 2;
            v169 -= 2;
          }
          while (v169);
          v41 = v170 * v168;
          if (v166 != (v166 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_171;
LABEL_172:
          v172 = v40 >> 3;
          if ((unint64_t)(v40 >> 3) <= 1)
            v172 = 1;
          if (v172 < 2)
          {
            v173 = 0;
            v174 = 0;
LABEL_179:
            v180 = v172 - v173;
            v181 = 8 * v173;
            v182 = (uint64_t *)((char *)__p + v181);
            v183 = (uint64_t *)((char *)v1279 + v181);
            do
            {
              v184 = *v183++;
              v185 = v184 - 1;
              v186 = *v182++;
              v174 += v186 * v185;
              --v180;
            }
            while (v180);
            goto LABEL_181;
          }
          v175 = 0;
          v176 = 0;
          v173 = v172 & 0xFFFFFFFFFFFFFFFELL;
          v177 = (char *)v1279 + 8;
          v178 = (char *)__p + 8;
          v179 = v172 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v175 += *(v178 - 1) * (*(v177 - 1) - 1);
            v176 += *v178 * (*v177 - 1);
            v177 += 2;
            v178 += 2;
            v179 -= 2;
          }
          while (v179);
          v174 = v176 + v175;
          if (v172 != v173)
            goto LABEL_179;
LABEL_181:
          if (v41 != v174 + 1)
LABEL_857:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_182:
          v187 = v1278;
          if (v1278)
          {
            v188 = (unint64_t *)&v1278->__shared_owners_;
            do
              v189 = __ldxr(v188);
            while (__stxr(v189 + 1, v188));
          }
          if (v1333)
            goto LABEL_924;
          v190 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_925;
          v191 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_533;
          if ((unint64_t)(v190 - 8) < 8)
          {
            v191 = 1;
            v192 = v1329;
            do
            {
LABEL_532:
              v636 = *(_QWORD *)v192;
              v192 += 8;
              v191 *= v636;
            }
            while (v192 != v1330);
            goto LABEL_533;
          }
          v631 = ((unint64_t)(v190 - 8) >> 3) + 1;
          v192 = &v1329[8 * (v631 & 0x3FFFFFFFFFFFFFFELL)];
          v632 = v1329 + 8;
          v633 = 1;
          v634 = v631 & 0x3FFFFFFFFFFFFFFELL;
          v635 = 1;
          do
          {
            v633 *= *(v632 - 1);
            v635 *= *v632;
            v632 += 2;
            v634 -= 2;
          }
          while (v634);
          v191 = v635 * v633;
          if (v631 != (v631 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_532;
LABEL_533:
          v637 = v190 >> 3;
          if ((unint64_t)(v190 >> 3) <= 1)
            v637 = 1;
          if (v637 < 2)
          {
            v638 = 0;
            v639 = 0;
LABEL_540:
            v645 = v637 - v638;
            v646 = 8 * v638;
            v647 = &v1331[v646];
            v648 = &v1329[v646];
            do
            {
              v649 = *(_QWORD *)v648;
              v648 += 8;
              v650 = v649 - 1;
              v651 = *(_QWORD *)v647;
              v647 += 8;
              v639 += v651 * v650;
              --v645;
            }
            while (v645);
            goto LABEL_542;
          }
          v640 = 0;
          v641 = 0;
          v638 = v637 & 0xFFFFFFFFFFFFFFFELL;
          v642 = v1329 + 8;
          v643 = v1331 + 8;
          v644 = v637 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v640 += *(v643 - 1) * (*(v642 - 1) - 1);
            v641 += *v643 * (*v642 - 1);
            v642 += 2;
            v643 += 2;
            v644 -= 2;
          }
          while (v644);
          v639 = v641 + v640;
          if (v637 != v638)
            goto LABEL_540;
LABEL_542:
          if (v191 != v639 + 1)
LABEL_924:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v652 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v653 = v652 >> 3;
            if ((unint64_t)(v652 >> 3) <= 1)
              v653 = 1;
            if (v653 >= 2)
            {
              v656 = 0;
              v657 = 0;
              v654 = v653 & 0xFFFFFFFFFFFFFFFELL;
              v658 = v1329 + 8;
              v659 = v1331 + 8;
              v660 = v653 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v656 += *(v659 - 1) * (*(v658 - 1) - 1);
                v657 += *v659 * (*v658 - 1);
                v658 += 2;
                v659 += 2;
                v660 -= 2;
              }
              while (v660);
              v655 = v657 + v656;
              if (v653 == v654)
                goto LABEL_553;
            }
            else
            {
              v654 = 0;
              v655 = 0;
            }
            v661 = v653 - v654;
            v662 = 8 * v654;
            v663 = &v1331[v662];
            v664 = &v1329[v662];
            do
            {
              v665 = *(_QWORD *)v664;
              v664 += 8;
              v666 = v665 - 1;
              v667 = *(_QWORD *)v663;
              v663 += 8;
              v655 += v667 * v666;
              --v661;
            }
            while (v661);
LABEL_553:
            v668 = v655 + 1;
            goto LABEL_926;
          }
LABEL_925:
          v668 = 0;
LABEL_926:
          if (v1333 + v668)
          {
            v1158 = 0;
            v1159 = 0;
            do
            {
              *((_BYTE *)v1327 + v1158) += (int)*(float *)(v39 + 4 * v1159);
              v1159 = (v1159 + 1) % v38;
              ++v1158;
            }
            while (v1158 < v1333 + v668);
          }
          if (v187)
          {
            v1160 = (unint64_t *)&v187->__shared_owners_;
            do
              v1161 = __ldaxr(v1160);
            while (__stlxr(v1161 - 1, v1160));
            if (!v1161)
            {
              ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
              std::__shared_weak_count::__release_weak(v187);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1130 = v1328;
          if (!v1328)
            goto LABEL_979;
          v1162 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1132 = __ldaxr(v1162);
          while (__stlxr(v1132 - 1, v1162));
          goto LABEL_977;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v23 = *(_QWORD *)v1279;
          if (v1283)
            goto LABEL_854;
          v24 = v1277;
          v25 = v1280 - (_BYTE *)v1279;
          if (v1280 == v1279)
            goto LABEL_116;
          if (!v1277)
          {
            v26 = 0;
            goto LABEL_106;
          }
          if ((unint64_t)(v25 - 8) < 8)
          {
            v26 = 1;
            v27 = (char *)v1279;
            do
            {
LABEL_105:
              v90 = *(_QWORD *)v27;
              v27 += 8;
              v26 *= v90;
            }
            while (v27 != v1280);
            goto LABEL_106;
          }
          v85 = ((unint64_t)(v25 - 8) >> 3) + 1;
          v27 = (char *)v1279 + 8 * (v85 & 0x3FFFFFFFFFFFFFFELL);
          v86 = (char *)v1279 + 8;
          v87 = 1;
          v88 = v85 & 0x3FFFFFFFFFFFFFFELL;
          v89 = 1;
          do
          {
            v87 *= *(v86 - 1);
            v89 *= *v86;
            v86 += 2;
            v88 -= 2;
          }
          while (v88);
          v26 = v89 * v87;
          if (v85 != (v85 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_105;
LABEL_106:
          v91 = v25 >> 3;
          if ((unint64_t)(v25 >> 3) <= 1)
            v91 = 1;
          if (v91 < 2)
          {
            v92 = 0;
            v93 = 0;
LABEL_113:
            v99 = v91 - v92;
            v100 = 8 * v92;
            v101 = (uint64_t *)((char *)__p + v100);
            v102 = (uint64_t *)((char *)v1279 + v100);
            do
            {
              v103 = *v102++;
              v104 = v103 - 1;
              v105 = *v101++;
              v93 += v105 * v104;
              --v99;
            }
            while (v99);
            goto LABEL_115;
          }
          v94 = 0;
          v95 = 0;
          v92 = v91 & 0xFFFFFFFFFFFFFFFELL;
          v96 = (char *)v1279 + 8;
          v97 = (char *)__p + 8;
          v98 = v91 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v94 += *(v97 - 1) * (*(v96 - 1) - 1);
            v95 += *v97 * (*v96 - 1);
            v96 += 2;
            v97 += 2;
            v98 -= 2;
          }
          while (v98);
          v93 = v95 + v94;
          if (v91 != v92)
            goto LABEL_113;
LABEL_115:
          if (v26 != v93 + 1)
LABEL_854:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_116:
          v106 = v1278;
          if (v1278)
          {
            v107 = (unint64_t *)&v1278->__shared_owners_;
            do
              v108 = __ldxr(v107);
            while (__stxr(v108 + 1, v107));
          }
          if (v1333)
            goto LABEL_870;
          v109 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_871;
          v110 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_458;
          if ((unint64_t)(v109 - 8) < 8)
          {
            v110 = 1;
            v111 = v1329;
            do
            {
LABEL_457:
              v522 = *(_QWORD *)v111;
              v111 += 8;
              v110 *= v522;
            }
            while (v111 != v1330);
            goto LABEL_458;
          }
          v517 = ((unint64_t)(v109 - 8) >> 3) + 1;
          v111 = &v1329[8 * (v517 & 0x3FFFFFFFFFFFFFFELL)];
          v518 = v1329 + 8;
          v519 = 1;
          v520 = v517 & 0x3FFFFFFFFFFFFFFELL;
          v521 = 1;
          do
          {
            v519 *= *(v518 - 1);
            v521 *= *v518;
            v518 += 2;
            v520 -= 2;
          }
          while (v520);
          v110 = v521 * v519;
          if (v517 != (v517 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_457;
LABEL_458:
          v523 = v109 >> 3;
          if ((unint64_t)(v109 >> 3) <= 1)
            v523 = 1;
          if (v523 < 2)
          {
            v524 = 0;
            v525 = 0;
LABEL_465:
            v531 = v523 - v524;
            v532 = 8 * v524;
            v533 = &v1331[v532];
            v534 = &v1329[v532];
            do
            {
              v535 = *(_QWORD *)v534;
              v534 += 8;
              v536 = v535 - 1;
              v537 = *(_QWORD *)v533;
              v533 += 8;
              v525 += v537 * v536;
              --v531;
            }
            while (v531);
            goto LABEL_467;
          }
          v526 = 0;
          v527 = 0;
          v524 = v523 & 0xFFFFFFFFFFFFFFFELL;
          v528 = v1329 + 8;
          v529 = v1331 + 8;
          v530 = v523 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v526 += *(v529 - 1) * (*(v528 - 1) - 1);
            v527 += *v529 * (*v528 - 1);
            v528 += 2;
            v529 += 2;
            v530 -= 2;
          }
          while (v530);
          v525 = v527 + v526;
          if (v523 != v524)
            goto LABEL_465;
LABEL_467:
          if (v110 != v525 + 1)
LABEL_870:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v538 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v539 = v538 >> 3;
            if ((unint64_t)(v538 >> 3) <= 1)
              v539 = 1;
            if (v539 >= 2)
            {
              v542 = 0;
              v543 = 0;
              v540 = v539 & 0xFFFFFFFFFFFFFFFELL;
              v544 = v1329 + 8;
              v545 = v1331 + 8;
              v546 = v539 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v542 += *(v545 - 1) * (*(v544 - 1) - 1);
                v543 += *v545 * (*v544 - 1);
                v544 += 2;
                v545 += 2;
                v546 -= 2;
              }
              while (v546);
              v541 = v543 + v542;
              if (v539 == v540)
                goto LABEL_478;
            }
            else
            {
              v540 = 0;
              v541 = 0;
            }
            v547 = v539 - v540;
            v548 = 8 * v540;
            v549 = &v1331[v548];
            v550 = &v1329[v548];
            do
            {
              v551 = *(_QWORD *)v550;
              v550 += 8;
              v552 = v551 - 1;
              v553 = *(_QWORD *)v549;
              v549 += 8;
              v541 += v553 * v552;
              --v547;
            }
            while (v547);
LABEL_478:
            v554 = v541 + 1;
            goto LABEL_872;
          }
LABEL_871:
          v554 = 0;
LABEL_872:
          v1125 = v1333 + v554;
          if (v1125)
          {
            v1126 = 0;
            v1127 = (float *)v1327;
            do
            {
              *v1127 = *(float *)(v24 + 4 * v1126) + *v1127;
              ++v1127;
              v1126 = (v1126 + 1) % v23;
              --v1125;
            }
            while (v1125);
          }
          if (v106)
          {
            v1128 = (unint64_t *)&v106->__shared_owners_;
            do
              v1129 = __ldaxr(v1128);
            while (__stlxr(v1129 - 1, v1128));
            if (!v1129)
            {
              ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
              std::__shared_weak_count::__release_weak(v106);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1130 = v1328;
          if (!v1328)
            goto LABEL_979;
          v1131 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1132 = __ldaxr(v1131);
          while (__stlxr(v1132 - 1, v1131));
          goto LABEL_977;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v28 = *(_QWORD *)v1279;
          if (v1283)
            goto LABEL_855;
          v29 = v1277;
          v30 = v1280 - (_BYTE *)v1279;
          if (v1280 == v1279)
            goto LABEL_138;
          if (!v1277)
          {
            v31 = 0;
            goto LABEL_128;
          }
          if ((unint64_t)(v30 - 8) < 8)
          {
            v31 = 1;
            v32 = (char *)v1279;
            do
            {
LABEL_127:
              v117 = *(_QWORD *)v32;
              v32 += 8;
              v31 *= v117;
            }
            while (v32 != v1280);
            goto LABEL_128;
          }
          v112 = ((unint64_t)(v30 - 8) >> 3) + 1;
          v32 = (char *)v1279 + 8 * (v112 & 0x3FFFFFFFFFFFFFFELL);
          v113 = (char *)v1279 + 8;
          v114 = 1;
          v115 = v112 & 0x3FFFFFFFFFFFFFFELL;
          v116 = 1;
          do
          {
            v114 *= *(v113 - 1);
            v116 *= *v113;
            v113 += 2;
            v115 -= 2;
          }
          while (v115);
          v31 = v116 * v114;
          if (v112 != (v112 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_127;
LABEL_128:
          v118 = v30 >> 3;
          if ((unint64_t)(v30 >> 3) <= 1)
            v118 = 1;
          if (v118 < 2)
          {
            v119 = 0;
            v120 = 0;
LABEL_135:
            v126 = v118 - v119;
            v127 = 8 * v119;
            v128 = (uint64_t *)((char *)__p + v127);
            v129 = (uint64_t *)((char *)v1279 + v127);
            do
            {
              v130 = *v129++;
              v131 = v130 - 1;
              v132 = *v128++;
              v120 += v132 * v131;
              --v126;
            }
            while (v126);
            goto LABEL_137;
          }
          v121 = 0;
          v122 = 0;
          v119 = v118 & 0xFFFFFFFFFFFFFFFELL;
          v123 = (char *)v1279 + 8;
          v124 = (char *)__p + 8;
          v125 = v118 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v121 += *(v124 - 1) * (*(v123 - 1) - 1);
            v122 += *v124 * (*v123 - 1);
            v123 += 2;
            v124 += 2;
            v125 -= 2;
          }
          while (v125);
          v120 = v122 + v121;
          if (v118 != v119)
            goto LABEL_135;
LABEL_137:
          if (v31 != v120 + 1)
LABEL_855:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_138:
          v133 = v1278;
          if (v1278)
          {
            v134 = (unint64_t *)&v1278->__shared_owners_;
            do
              v135 = __ldxr(v134);
            while (__stxr(v135 + 1, v134));
          }
          if (v1333)
            goto LABEL_888;
          v136 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_889;
          v137 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_483;
          if ((unint64_t)(v136 - 8) < 8)
          {
            v137 = 1;
            v138 = v1329;
            do
            {
LABEL_482:
              v560 = *(_QWORD *)v138;
              v138 += 8;
              v137 *= v560;
            }
            while (v138 != v1330);
            goto LABEL_483;
          }
          v555 = ((unint64_t)(v136 - 8) >> 3) + 1;
          v138 = &v1329[8 * (v555 & 0x3FFFFFFFFFFFFFFELL)];
          v556 = v1329 + 8;
          v557 = 1;
          v558 = v555 & 0x3FFFFFFFFFFFFFFELL;
          v559 = 1;
          do
          {
            v557 *= *(v556 - 1);
            v559 *= *v556;
            v556 += 2;
            v558 -= 2;
          }
          while (v558);
          v137 = v559 * v557;
          if (v555 != (v555 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_482;
LABEL_483:
          v561 = v136 >> 3;
          if ((unint64_t)(v136 >> 3) <= 1)
            v561 = 1;
          if (v561 < 2)
          {
            v562 = 0;
            v563 = 0;
LABEL_490:
            v569 = v561 - v562;
            v570 = 8 * v562;
            v571 = &v1331[v570];
            v572 = &v1329[v570];
            do
            {
              v573 = *(_QWORD *)v572;
              v572 += 8;
              v574 = v573 - 1;
              v575 = *(_QWORD *)v571;
              v571 += 8;
              v563 += v575 * v574;
              --v569;
            }
            while (v569);
            goto LABEL_492;
          }
          v564 = 0;
          v565 = 0;
          v562 = v561 & 0xFFFFFFFFFFFFFFFELL;
          v566 = v1329 + 8;
          v567 = v1331 + 8;
          v568 = v561 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v564 += *(v567 - 1) * (*(v566 - 1) - 1);
            v565 += *v567 * (*v566 - 1);
            v566 += 2;
            v567 += 2;
            v568 -= 2;
          }
          while (v568);
          v563 = v565 + v564;
          if (v561 != v562)
            goto LABEL_490;
LABEL_492:
          if (v137 != v563 + 1)
LABEL_888:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v576 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v577 = v576 >> 3;
            if ((unint64_t)(v576 >> 3) <= 1)
              v577 = 1;
            if (v577 >= 2)
            {
              v580 = 0;
              v581 = 0;
              v578 = v577 & 0xFFFFFFFFFFFFFFFELL;
              v582 = v1329 + 8;
              v583 = v1331 + 8;
              v584 = v577 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v580 += *(v583 - 1) * (*(v582 - 1) - 1);
                v581 += *v583 * (*v582 - 1);
                v582 += 2;
                v583 += 2;
                v584 -= 2;
              }
              while (v584);
              v579 = v581 + v580;
              if (v577 == v578)
                goto LABEL_503;
            }
            else
            {
              v578 = 0;
              v579 = 0;
            }
            v585 = v577 - v578;
            v586 = 8 * v578;
            v587 = &v1331[v586];
            v588 = &v1329[v586];
            do
            {
              v589 = *(_QWORD *)v588;
              v588 += 8;
              v590 = v589 - 1;
              v591 = *(_QWORD *)v587;
              v587 += 8;
              v579 += v591 * v590;
              --v585;
            }
            while (v585);
LABEL_503:
            v592 = v579 + 1;
            goto LABEL_890;
          }
LABEL_889:
          v592 = 0;
LABEL_890:
          v1133 = v1333 + v592;
          if (v1133)
          {
            v1134 = 0;
            v1135 = (__int16 *)v1327;
            do
            {
              _S0 = *(_DWORD *)(v29 + 4 * v1134);
              __asm { FCVT            H0, S0 }
              _H1 = *v1135;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              _S0 = _S1 + _S0;
              __asm { FCVT            H0, S0 }
              *v1135++ = LOWORD(_S0);
              v1134 = (v1134 + 1) % v28;
              --v1133;
            }
            while (v1133);
          }
          if (v133)
          {
            v1145 = (unint64_t *)&v133->__shared_owners_;
            do
              v1146 = __ldaxr(v1145);
            while (__stlxr(v1146 - 1, v1145));
            if (!v1146)
            {
              ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
              std::__shared_weak_count::__release_weak(v133);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1130 = v1328;
          if (v1328)
          {
            v1147 = (unint64_t *)&v1328->__shared_owners_;
            do
              v1132 = __ldaxr(v1147);
            while (__stlxr(v1132 - 1, v1147));
LABEL_977:
            if (!v1132)
            {
              ((void (*)(std::__shared_weak_count *))v1130->__on_zero_shared)(v1130);
              std::__shared_weak_count::__release_weak(v1130);
            }
          }
LABEL_979:
          if (__p)
          {
            v1282 = __p;
            operator delete(__p);
          }
          if (v1279)
          {
            v1280 = (char *)v1279;
            operator delete(v1279);
          }
          v1177 = v1278;
          if (v1278)
          {
            v1178 = (unint64_t *)&v1278->__shared_owners_;
            do
              v1179 = __ldaxr(v1178);
            while (__stlxr(v1179 - 1, v1178));
            if (!v1179)
            {
              ((void (*)(std::__shared_weak_count *))v1177->__on_zero_shared)(v1177);
              std::__shared_weak_count::__release_weak(v1177);
            }
          }
          if (v1274)
          {
            v1275 = v1274;
            operator delete(v1274);
          }
          if (v1272)
          {
            v1273 = v1272;
            operator delete(v1272);
          }
          v1180 = v1271;
          if (!v1271)
            return;
          v1181 = (unint64_t *)&v1271->__shared_owners_;
          do
            v1182 = __ldaxr(v1181);
          while (__stlxr(v1182 - 1, v1181));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1229;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1284, (uint64_t)a2);
      v1290 = &v1326;
      nitro::ndarray<half>::ndarray(&v1291, &v1284);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v13 = *(_QWORD *)v1293;
          if (v1297)
            goto LABEL_864;
          v14 = v1291;
          v15 = v1294 - (_BYTE *)v1293;
          if (v1294 == v1293)
            goto LABEL_336;
          if (!v1291)
          {
            v16 = 0;
            goto LABEL_326;
          }
          if ((unint64_t)(v15 - 8) < 8)
          {
            v16 = 1;
            v17 = (char *)v1293;
            do
            {
LABEL_325:
              v360 = *(_QWORD *)v17;
              v17 += 8;
              v16 *= v360;
            }
            while (v17 != v1294);
            goto LABEL_326;
          }
          v355 = ((unint64_t)(v15 - 8) >> 3) + 1;
          v17 = (char *)v1293 + 8 * (v355 & 0x3FFFFFFFFFFFFFFELL);
          v356 = (char *)v1293 + 8;
          v357 = 1;
          v358 = v355 & 0x3FFFFFFFFFFFFFFELL;
          v359 = 1;
          do
          {
            v357 *= *(v356 - 1);
            v359 *= *v356;
            v356 += 2;
            v358 -= 2;
          }
          while (v358);
          v16 = v359 * v357;
          if (v355 != (v355 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_325;
LABEL_326:
          v361 = v15 >> 3;
          if ((unint64_t)(v15 >> 3) <= 1)
            v361 = 1;
          if (v361 < 2)
          {
            v362 = 0;
            v363 = 0;
LABEL_333:
            v369 = v361 - v362;
            v370 = 8 * v362;
            v371 = (uint64_t *)((char *)v1295 + v370);
            v372 = (uint64_t *)((char *)v1293 + v370);
            do
            {
              v373 = *v372++;
              v374 = v373 - 1;
              v375 = *v371++;
              v363 += v375 * v374;
              --v369;
            }
            while (v369);
            goto LABEL_335;
          }
          v364 = 0;
          v365 = 0;
          v362 = v361 & 0xFFFFFFFFFFFFFFFELL;
          v366 = (char *)v1293 + 8;
          v367 = (char *)v1295 + 8;
          v368 = v361 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v364 += *(v367 - 1) * (*(v366 - 1) - 1);
            v365 += *v367 * (*v366 - 1);
            v366 += 2;
            v367 += 2;
            v368 -= 2;
          }
          while (v368);
          v363 = v365 + v364;
          if (v361 != v362)
            goto LABEL_333;
LABEL_335:
          if (v16 != v363 + 1)
LABEL_864:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_336:
          v376 = v1292;
          if (v1292)
          {
            v377 = (unint64_t *)&v1292->__shared_owners_;
            do
              v378 = __ldxr(v377);
            while (__stxr(v378 + 1, v377));
          }
          if (v1333)
            goto LABEL_1068;
          v379 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1069;
          v380 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_708;
          if ((unint64_t)(v379 - 8) < 8)
          {
            v380 = 1;
            v381 = v1329;
            do
            {
LABEL_707:
              v902 = *(_QWORD *)v381;
              v381 += 8;
              v380 *= v902;
            }
            while (v381 != v1330);
            goto LABEL_708;
          }
          v897 = ((unint64_t)(v379 - 8) >> 3) + 1;
          v381 = &v1329[8 * (v897 & 0x3FFFFFFFFFFFFFFELL)];
          v898 = v1329 + 8;
          v899 = 1;
          v900 = v897 & 0x3FFFFFFFFFFFFFFELL;
          v901 = 1;
          do
          {
            v899 *= *(v898 - 1);
            v901 *= *v898;
            v898 += 2;
            v900 -= 2;
          }
          while (v900);
          v380 = v901 * v899;
          if (v897 != (v897 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_707;
LABEL_708:
          v903 = v379 >> 3;
          if ((unint64_t)(v379 >> 3) <= 1)
            v903 = 1;
          if (v903 < 2)
          {
            v904 = 0;
            v905 = 0;
LABEL_715:
            v911 = v903 - v904;
            v912 = 8 * v904;
            v913 = &v1331[v912];
            v914 = &v1329[v912];
            do
            {
              v915 = *(_QWORD *)v914;
              v914 += 8;
              v916 = v915 - 1;
              v917 = *(_QWORD *)v913;
              v913 += 8;
              v905 += v917 * v916;
              --v911;
            }
            while (v911);
            goto LABEL_717;
          }
          v906 = 0;
          v907 = 0;
          v904 = v903 & 0xFFFFFFFFFFFFFFFELL;
          v908 = v1329 + 8;
          v909 = v1331 + 8;
          v910 = v903 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v906 += *(v909 - 1) * (*(v908 - 1) - 1);
            v907 += *v909 * (*v908 - 1);
            v908 += 2;
            v909 += 2;
            v910 -= 2;
          }
          while (v910);
          v905 = v907 + v906;
          if (v903 != v904)
            goto LABEL_715;
LABEL_717:
          if (v380 != v905 + 1)
LABEL_1068:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v918 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v919 = v918 >> 3;
            if ((unint64_t)(v918 >> 3) <= 1)
              v919 = 1;
            if (v919 >= 2)
            {
              v922 = 0;
              v923 = 0;
              v920 = v919 & 0xFFFFFFFFFFFFFFFELL;
              v924 = v1329 + 8;
              v925 = v1331 + 8;
              v926 = v919 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v922 += *(v925 - 1) * (*(v924 - 1) - 1);
                v923 += *v925 * (*v924 - 1);
                v924 += 2;
                v925 += 2;
                v926 -= 2;
              }
              while (v926);
              v921 = v923 + v922;
              if (v919 == v920)
                goto LABEL_728;
            }
            else
            {
              v920 = 0;
              v921 = 0;
            }
            v927 = v919 - v920;
            v928 = 8 * v920;
            v929 = &v1331[v928];
            v930 = &v1329[v928];
            do
            {
              v931 = *(_QWORD *)v930;
              v930 += 8;
              v932 = v931 - 1;
              v933 = *(_QWORD *)v929;
              v929 += 8;
              v921 += v933 * v932;
              --v927;
            }
            while (v927);
LABEL_728:
            v934 = v921 + 1;
            goto LABEL_1070;
          }
LABEL_1069:
          v934 = 0;
LABEL_1070:
          v1217 = v1333 + v934;
          if (v1217)
          {
            v1218 = 0;
            v1219 = v1327;
            do
            {
              _H0 = *(_WORD *)(v14 + 2 * v1218);
              __asm { FCVT            S0, H0 }
              *v1219++ += (int)_S0;
              v1218 = (v1218 + 1) % v13;
              --v1217;
            }
            while (v1217);
          }
          if (v376)
          {
            v1222 = (unint64_t *)&v376->__shared_owners_;
            do
              v1223 = __ldaxr(v1222);
            while (__stlxr(v1223 - 1, v1222));
            if (!v1223)
            {
              ((void (*)(std::__shared_weak_count *))v376->__on_zero_shared)(v376);
              std::__shared_weak_count::__release_weak(v376);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1155 = v1328;
          if (!v1328)
            goto LABEL_1087;
          v1224 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1157 = __ldaxr(v1224);
          while (__stlxr(v1157 - 1, v1224));
          goto LABEL_1085;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v59 = *(_QWORD *)v1293;
          if (v1297)
            goto LABEL_862;
          v60 = v1291;
          v61 = v1294 - (_BYTE *)v1293;
          if (v1294 == v1293)
            goto LABEL_292;
          if (!v1291)
          {
            v62 = 0;
            goto LABEL_282;
          }
          if ((unint64_t)(v61 - 8) < 8)
          {
            v62 = 1;
            v63 = (char *)v1293;
            do
            {
LABEL_281:
              v306 = *(_QWORD *)v63;
              v63 += 8;
              v62 *= v306;
            }
            while (v63 != v1294);
            goto LABEL_282;
          }
          v301 = ((unint64_t)(v61 - 8) >> 3) + 1;
          v63 = (char *)v1293 + 8 * (v301 & 0x3FFFFFFFFFFFFFFELL);
          v302 = (char *)v1293 + 8;
          v303 = 1;
          v304 = v301 & 0x3FFFFFFFFFFFFFFELL;
          v305 = 1;
          do
          {
            v303 *= *(v302 - 1);
            v305 *= *v302;
            v302 += 2;
            v304 -= 2;
          }
          while (v304);
          v62 = v305 * v303;
          if (v301 != (v301 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_281;
LABEL_282:
          v307 = v61 >> 3;
          if ((unint64_t)(v61 >> 3) <= 1)
            v307 = 1;
          if (v307 < 2)
          {
            v308 = 0;
            v309 = 0;
LABEL_289:
            v315 = v307 - v308;
            v316 = 8 * v308;
            v317 = (uint64_t *)((char *)v1295 + v316);
            v318 = (uint64_t *)((char *)v1293 + v316);
            do
            {
              v319 = *v318++;
              v320 = v319 - 1;
              v321 = *v317++;
              v309 += v321 * v320;
              --v315;
            }
            while (v315);
            goto LABEL_291;
          }
          v310 = 0;
          v311 = 0;
          v308 = v307 & 0xFFFFFFFFFFFFFFFELL;
          v312 = (char *)v1293 + 8;
          v313 = (char *)v1295 + 8;
          v314 = v307 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v310 += *(v313 - 1) * (*(v312 - 1) - 1);
            v311 += *v313 * (*v312 - 1);
            v312 += 2;
            v313 += 2;
            v314 -= 2;
          }
          while (v314);
          v309 = v311 + v310;
          if (v307 != v308)
            goto LABEL_289;
LABEL_291:
          if (v62 != v309 + 1)
LABEL_862:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_292:
          v322 = v1292;
          if (v1292)
          {
            v323 = (unint64_t *)&v1292->__shared_owners_;
            do
              v324 = __ldxr(v323);
            while (__stxr(v324 + 1, v323));
          }
          if (v1333)
            goto LABEL_1032;
          v325 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1033;
          v326 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_658;
          if ((unint64_t)(v325 - 8) < 8)
          {
            v326 = 1;
            v327 = v1329;
            do
            {
LABEL_657:
              v826 = *(_QWORD *)v327;
              v327 += 8;
              v326 *= v826;
            }
            while (v327 != v1330);
            goto LABEL_658;
          }
          v821 = ((unint64_t)(v325 - 8) >> 3) + 1;
          v327 = &v1329[8 * (v821 & 0x3FFFFFFFFFFFFFFELL)];
          v822 = v1329 + 8;
          v823 = 1;
          v824 = v821 & 0x3FFFFFFFFFFFFFFELL;
          v825 = 1;
          do
          {
            v823 *= *(v822 - 1);
            v825 *= *v822;
            v822 += 2;
            v824 -= 2;
          }
          while (v824);
          v326 = v825 * v823;
          if (v821 != (v821 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_657;
LABEL_658:
          v827 = v325 >> 3;
          if ((unint64_t)(v325 >> 3) <= 1)
            v827 = 1;
          if (v827 < 2)
          {
            v828 = 0;
            v829 = 0;
LABEL_665:
            v835 = v827 - v828;
            v836 = 8 * v828;
            v837 = &v1331[v836];
            v838 = &v1329[v836];
            do
            {
              v839 = *(_QWORD *)v838;
              v838 += 8;
              v840 = v839 - 1;
              v841 = *(_QWORD *)v837;
              v837 += 8;
              v829 += v841 * v840;
              --v835;
            }
            while (v835);
            goto LABEL_667;
          }
          v830 = 0;
          v831 = 0;
          v828 = v827 & 0xFFFFFFFFFFFFFFFELL;
          v832 = v1329 + 8;
          v833 = v1331 + 8;
          v834 = v827 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v830 += *(v833 - 1) * (*(v832 - 1) - 1);
            v831 += *v833 * (*v832 - 1);
            v832 += 2;
            v833 += 2;
            v834 -= 2;
          }
          while (v834);
          v829 = v831 + v830;
          if (v827 != v828)
            goto LABEL_665;
LABEL_667:
          if (v326 != v829 + 1)
LABEL_1032:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v842 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v843 = v842 >> 3;
            if ((unint64_t)(v842 >> 3) <= 1)
              v843 = 1;
            if (v843 >= 2)
            {
              v846 = 0;
              v847 = 0;
              v844 = v843 & 0xFFFFFFFFFFFFFFFELL;
              v848 = v1329 + 8;
              v849 = v1331 + 8;
              v850 = v843 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v846 += *(v849 - 1) * (*(v848 - 1) - 1);
                v847 += *v849 * (*v848 - 1);
                v848 += 2;
                v849 += 2;
                v850 -= 2;
              }
              while (v850);
              v845 = v847 + v846;
              if (v843 == v844)
                goto LABEL_678;
            }
            else
            {
              v844 = 0;
              v845 = 0;
            }
            v851 = v843 - v844;
            v852 = 8 * v844;
            v853 = &v1331[v852];
            v854 = &v1329[v852];
            do
            {
              v855 = *(_QWORD *)v854;
              v854 += 8;
              v856 = v855 - 1;
              v857 = *(_QWORD *)v853;
              v853 += 8;
              v845 += v857 * v856;
              --v851;
            }
            while (v851);
LABEL_678:
            v858 = v845 + 1;
            goto LABEL_1034;
          }
LABEL_1033:
          v858 = 0;
LABEL_1034:
          if (v1333 + v858)
          {
            v1202 = 0;
            v1203 = 0;
            do
            {
              _H0 = *(_WORD *)(v60 + 2 * v1203);
              __asm { FCVT            S0, H0 }
              *((_BYTE *)v1327 + v1202) += (int)_S0;
              v1203 = (v1203 + 1) % v59;
              ++v1202;
            }
            while (v1202 < v1333 + v858);
          }
          if (v322)
          {
            v1206 = (unint64_t *)&v322->__shared_owners_;
            do
              v1207 = __ldaxr(v1206);
            while (__stlxr(v1207 - 1, v1206));
            if (!v1207)
            {
              ((void (*)(std::__shared_weak_count *))v322->__on_zero_shared)(v322);
              std::__shared_weak_count::__release_weak(v322);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1155 = v1328;
          if (!v1328)
            goto LABEL_1087;
          v1208 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1157 = __ldaxr(v1208);
          while (__stlxr(v1157 - 1, v1208));
          goto LABEL_1085;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v33 = *(_QWORD *)v1293;
          if (v1297)
            goto LABEL_856;
          v34 = v1291;
          v35 = v1294 - (_BYTE *)v1293;
          if (v1294 == v1293)
            goto LABEL_160;
          if (!v1291)
          {
            v36 = 0;
            goto LABEL_150;
          }
          if ((unint64_t)(v35 - 8) < 8)
          {
            v36 = 1;
            v37 = (char *)v1293;
            do
            {
LABEL_149:
              v144 = *(_QWORD *)v37;
              v37 += 8;
              v36 *= v144;
            }
            while (v37 != v1294);
            goto LABEL_150;
          }
          v139 = ((unint64_t)(v35 - 8) >> 3) + 1;
          v37 = (char *)v1293 + 8 * (v139 & 0x3FFFFFFFFFFFFFFELL);
          v140 = (char *)v1293 + 8;
          v141 = 1;
          v142 = v139 & 0x3FFFFFFFFFFFFFFELL;
          v143 = 1;
          do
          {
            v141 *= *(v140 - 1);
            v143 *= *v140;
            v140 += 2;
            v142 -= 2;
          }
          while (v142);
          v36 = v143 * v141;
          if (v139 != (v139 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_149;
LABEL_150:
          v145 = v35 >> 3;
          if ((unint64_t)(v35 >> 3) <= 1)
            v145 = 1;
          if (v145 < 2)
          {
            v146 = 0;
            v147 = 0;
LABEL_157:
            v153 = v145 - v146;
            v154 = 8 * v146;
            v155 = (uint64_t *)((char *)v1295 + v154);
            v156 = (uint64_t *)((char *)v1293 + v154);
            do
            {
              v157 = *v156++;
              v158 = v157 - 1;
              v159 = *v155++;
              v147 += v159 * v158;
              --v153;
            }
            while (v153);
            goto LABEL_159;
          }
          v148 = 0;
          v149 = 0;
          v146 = v145 & 0xFFFFFFFFFFFFFFFELL;
          v150 = (char *)v1293 + 8;
          v151 = (char *)v1295 + 8;
          v152 = v145 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v148 += *(v151 - 1) * (*(v150 - 1) - 1);
            v149 += *v151 * (*v150 - 1);
            v150 += 2;
            v151 += 2;
            v152 -= 2;
          }
          while (v152);
          v147 = v149 + v148;
          if (v145 != v146)
            goto LABEL_157;
LABEL_159:
          if (v36 != v147 + 1)
LABEL_856:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_160:
          v160 = v1292;
          if (v1292)
          {
            v161 = (unint64_t *)&v1292->__shared_owners_;
            do
              v162 = __ldxr(v161);
            while (__stxr(v162 + 1, v161));
          }
          if (v1333)
            goto LABEL_906;
          v163 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_907;
          v164 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_508;
          if ((unint64_t)(v163 - 8) < 8)
          {
            v164 = 1;
            v165 = v1329;
            do
            {
LABEL_507:
              v598 = *(_QWORD *)v165;
              v165 += 8;
              v164 *= v598;
            }
            while (v165 != v1330);
            goto LABEL_508;
          }
          v593 = ((unint64_t)(v163 - 8) >> 3) + 1;
          v165 = &v1329[8 * (v593 & 0x3FFFFFFFFFFFFFFELL)];
          v594 = v1329 + 8;
          v595 = 1;
          v596 = v593 & 0x3FFFFFFFFFFFFFFELL;
          v597 = 1;
          do
          {
            v595 *= *(v594 - 1);
            v597 *= *v594;
            v594 += 2;
            v596 -= 2;
          }
          while (v596);
          v164 = v597 * v595;
          if (v593 != (v593 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_507;
LABEL_508:
          v599 = v163 >> 3;
          if ((unint64_t)(v163 >> 3) <= 1)
            v599 = 1;
          if (v599 < 2)
          {
            v600 = 0;
            v601 = 0;
LABEL_515:
            v607 = v599 - v600;
            v608 = 8 * v600;
            v609 = &v1331[v608];
            v610 = &v1329[v608];
            do
            {
              v611 = *(_QWORD *)v610;
              v610 += 8;
              v612 = v611 - 1;
              v613 = *(_QWORD *)v609;
              v609 += 8;
              v601 += v613 * v612;
              --v607;
            }
            while (v607);
            goto LABEL_517;
          }
          v602 = 0;
          v603 = 0;
          v600 = v599 & 0xFFFFFFFFFFFFFFFELL;
          v604 = v1329 + 8;
          v605 = v1331 + 8;
          v606 = v599 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v602 += *(v605 - 1) * (*(v604 - 1) - 1);
            v603 += *v605 * (*v604 - 1);
            v604 += 2;
            v605 += 2;
            v606 -= 2;
          }
          while (v606);
          v601 = v603 + v602;
          if (v599 != v600)
            goto LABEL_515;
LABEL_517:
          if (v164 != v601 + 1)
LABEL_906:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v614 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v615 = v614 >> 3;
            if ((unint64_t)(v614 >> 3) <= 1)
              v615 = 1;
            if (v615 >= 2)
            {
              v618 = 0;
              v619 = 0;
              v616 = v615 & 0xFFFFFFFFFFFFFFFELL;
              v620 = v1329 + 8;
              v621 = v1331 + 8;
              v622 = v615 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v618 += *(v621 - 1) * (*(v620 - 1) - 1);
                v619 += *v621 * (*v620 - 1);
                v620 += 2;
                v621 += 2;
                v622 -= 2;
              }
              while (v622);
              v617 = v619 + v618;
              if (v615 == v616)
                goto LABEL_528;
            }
            else
            {
              v616 = 0;
              v617 = 0;
            }
            v623 = v615 - v616;
            v624 = 8 * v616;
            v625 = &v1331[v624];
            v626 = &v1329[v624];
            do
            {
              v627 = *(_QWORD *)v626;
              v626 += 8;
              v628 = v627 - 1;
              v629 = *(_QWORD *)v625;
              v625 += 8;
              v617 += v629 * v628;
              --v623;
            }
            while (v623);
LABEL_528:
            v630 = v617 + 1;
            goto LABEL_908;
          }
LABEL_907:
          v630 = 0;
LABEL_908:
          v1148 = v1333 + v630;
          if (v1148)
          {
            v1149 = 0;
            v1150 = (float *)v1327;
            do
            {
              _H0 = *(_WORD *)(v34 + 2 * v1149);
              __asm { FCVT            S0, H0 }
              *v1150 = *v1150 + _S0;
              ++v1150;
              v1149 = (v1149 + 1) % v33;
              --v1148;
            }
            while (v1148);
          }
          if (v160)
          {
            v1153 = (unint64_t *)&v160->__shared_owners_;
            do
              v1154 = __ldaxr(v1153);
            while (__stlxr(v1154 - 1, v1153));
            if (!v1154)
            {
              ((void (*)(std::__shared_weak_count *))v160->__on_zero_shared)(v160);
              std::__shared_weak_count::__release_weak(v160);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1155 = v1328;
          if (!v1328)
            goto LABEL_1087;
          v1156 = (unint64_t *)&v1328->__shared_owners_;
          do
            v1157 = __ldaxr(v1156);
          while (__stlxr(v1157 - 1, v1156));
          goto LABEL_1085;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1327, (uint64_t)a1);
          v54 = *(_QWORD *)v1293;
          if (v1297)
            goto LABEL_861;
          v55 = v1291;
          v56 = v1294 - (_BYTE *)v1293;
          if (v1294 == v1293)
            goto LABEL_270;
          if (!v1291)
          {
            v57 = 0;
            goto LABEL_260;
          }
          if ((unint64_t)(v56 - 8) < 8)
          {
            v57 = 1;
            v58 = (char *)v1293;
            do
            {
LABEL_259:
              v279 = *(_QWORD *)v58;
              v58 += 8;
              v57 *= v279;
            }
            while (v58 != v1294);
            goto LABEL_260;
          }
          v274 = ((unint64_t)(v56 - 8) >> 3) + 1;
          v58 = (char *)v1293 + 8 * (v274 & 0x3FFFFFFFFFFFFFFELL);
          v275 = (char *)v1293 + 8;
          v276 = 1;
          v277 = v274 & 0x3FFFFFFFFFFFFFFELL;
          v278 = 1;
          do
          {
            v276 *= *(v275 - 1);
            v278 *= *v275;
            v275 += 2;
            v277 -= 2;
          }
          while (v277);
          v57 = v278 * v276;
          if (v274 != (v274 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_259;
LABEL_260:
          v280 = v56 >> 3;
          if ((unint64_t)(v56 >> 3) <= 1)
            v280 = 1;
          if (v280 < 2)
          {
            v281 = 0;
            v282 = 0;
LABEL_267:
            v288 = v280 - v281;
            v289 = 8 * v281;
            v290 = (uint64_t *)((char *)v1295 + v289);
            v291 = (uint64_t *)((char *)v1293 + v289);
            do
            {
              v292 = *v291++;
              v293 = v292 - 1;
              v294 = *v290++;
              v282 += v294 * v293;
              --v288;
            }
            while (v288);
            goto LABEL_269;
          }
          v283 = 0;
          v284 = 0;
          v281 = v280 & 0xFFFFFFFFFFFFFFFELL;
          v285 = (char *)v1293 + 8;
          v286 = (char *)v1295 + 8;
          v287 = v280 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v283 += *(v286 - 1) * (*(v285 - 1) - 1);
            v284 += *v286 * (*v285 - 1);
            v285 += 2;
            v286 += 2;
            v287 -= 2;
          }
          while (v287);
          v282 = v284 + v283;
          if (v280 != v281)
            goto LABEL_267;
LABEL_269:
          if (v57 != v282 + 1)
LABEL_861:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_270:
          v295 = v1292;
          if (v1292)
          {
            v296 = (unint64_t *)&v1292->__shared_owners_;
            do
              v297 = __ldxr(v296);
            while (__stxr(v297 + 1, v296));
          }
          if (v1333)
            goto LABEL_1014;
          v298 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_1015;
          v299 = (uint64_t)v1327;
          if (!v1327)
            goto LABEL_633;
          if ((unint64_t)(v298 - 8) < 8)
          {
            v299 = 1;
            v300 = v1329;
            do
            {
LABEL_632:
              v788 = *(_QWORD *)v300;
              v300 += 8;
              v299 *= v788;
            }
            while (v300 != v1330);
            goto LABEL_633;
          }
          v783 = ((unint64_t)(v298 - 8) >> 3) + 1;
          v300 = &v1329[8 * (v783 & 0x3FFFFFFFFFFFFFFELL)];
          v784 = v1329 + 8;
          v785 = 1;
          v786 = v783 & 0x3FFFFFFFFFFFFFFELL;
          v787 = 1;
          do
          {
            v785 *= *(v784 - 1);
            v787 *= *v784;
            v784 += 2;
            v786 -= 2;
          }
          while (v786);
          v299 = v787 * v785;
          if (v783 != (v783 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_632;
LABEL_633:
          v789 = v298 >> 3;
          if ((unint64_t)(v298 >> 3) <= 1)
            v789 = 1;
          if (v789 < 2)
          {
            v790 = 0;
            v791 = 0;
LABEL_640:
            v797 = v789 - v790;
            v798 = 8 * v790;
            v799 = &v1331[v798];
            v800 = &v1329[v798];
            do
            {
              v801 = *(_QWORD *)v800;
              v800 += 8;
              v802 = v801 - 1;
              v803 = *(_QWORD *)v799;
              v799 += 8;
              v791 += v803 * v802;
              --v797;
            }
            while (v797);
            goto LABEL_642;
          }
          v792 = 0;
          v793 = 0;
          v790 = v789 & 0xFFFFFFFFFFFFFFFELL;
          v794 = v1329 + 8;
          v795 = v1331 + 8;
          v796 = v789 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v792 += *(v795 - 1) * (*(v794 - 1) - 1);
            v793 += *v795 * (*v794 - 1);
            v794 += 2;
            v795 += 2;
            v796 -= 2;
          }
          while (v796);
          v791 = v793 + v792;
          if (v789 != v790)
            goto LABEL_640;
LABEL_642:
          if (v299 != v791 + 1)
LABEL_1014:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v804 = v1330 - v1329;
          if (v1330 != v1329)
          {
            v805 = v804 >> 3;
            if ((unint64_t)(v804 >> 3) <= 1)
              v805 = 1;
            if (v805 >= 2)
            {
              v808 = 0;
              v809 = 0;
              v806 = v805 & 0xFFFFFFFFFFFFFFFELL;
              v810 = v1329 + 8;
              v811 = v1331 + 8;
              v812 = v805 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v808 += *(v811 - 1) * (*(v810 - 1) - 1);
                v809 += *v811 * (*v810 - 1);
                v810 += 2;
                v811 += 2;
                v812 -= 2;
              }
              while (v812);
              v807 = v809 + v808;
              if (v805 == v806)
                goto LABEL_653;
            }
            else
            {
              v806 = 0;
              v807 = 0;
            }
            v813 = v805 - v806;
            v814 = 8 * v806;
            v815 = &v1331[v814];
            v816 = &v1329[v814];
            do
            {
              v817 = *(_QWORD *)v816;
              v816 += 8;
              v818 = v817 - 1;
              v819 = *(_QWORD *)v815;
              v815 += 8;
              v807 += v819 * v818;
              --v813;
            }
            while (v813);
LABEL_653:
            v820 = v807 + 1;
            goto LABEL_1016;
          }
LABEL_1015:
          v820 = 0;
LABEL_1016:
          v1191 = v1333 + v820;
          if (v1191)
          {
            v1192 = 0;
            v1193 = (__int16 *)v1327;
            do
            {
              _H0 = *(_WORD *)(v55 + 2 * v1192);
              _H1 = *v1193;
              __asm
              {
                FCVT            S0, H0
                FCVT            S1, H1
              }
              _S0 = _S0 + _S1;
              __asm { FCVT            H0, S0 }
              *v1193++ = LOWORD(_S0);
              v1192 = (v1192 + 1) % v54;
              --v1191;
            }
            while (v1191);
          }
          if (v295)
          {
            v1199 = (unint64_t *)&v295->__shared_owners_;
            do
              v1200 = __ldaxr(v1199);
            while (__stlxr(v1200 - 1, v1199));
            if (!v1200)
            {
              ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
              std::__shared_weak_count::__release_weak(v295);
            }
          }
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1155 = v1328;
          if (v1328)
          {
            v1201 = (unint64_t *)&v1328->__shared_owners_;
            do
              v1157 = __ldaxr(v1201);
            while (__stlxr(v1157 - 1, v1201));
LABEL_1085:
            if (!v1157)
            {
              ((void (*)(std::__shared_weak_count *))v1155->__on_zero_shared)(v1155);
              std::__shared_weak_count::__release_weak(v1155);
            }
          }
LABEL_1087:
          if (v1295)
          {
            v1296 = v1295;
            operator delete(v1295);
          }
          if (v1293)
          {
            v1294 = (char *)v1293;
            operator delete(v1293);
          }
          v1225 = v1292;
          if (v1292)
          {
            v1226 = (unint64_t *)&v1292->__shared_owners_;
            do
              v1227 = __ldaxr(v1226);
            while (__stlxr(v1227 - 1, v1226));
            if (!v1227)
            {
              ((void (*)(std::__shared_weak_count *))v1225->__on_zero_shared)(v1225);
              std::__shared_weak_count::__release_weak(v1225);
            }
          }
          if (v1288)
          {
            v1289 = v1288;
            operator delete(v1288);
          }
          if (v1286)
          {
            v1287 = v1286;
            operator delete(v1286);
          }
          v1180 = v1285;
          if (v1285)
          {
            v1228 = (unint64_t *)&v1285->__shared_owners_;
            do
              v1182 = __ldaxr(v1228);
            while (__stlxr(v1182 - 1, v1228));
LABEL_1229:
            if (!v1182)
            {
              ((void (*)(std::__shared_weak_count *))v1180->__on_zero_shared)(v1180);
              std::__shared_weak_count::__release_weak(v1180);
            }
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_1912A643C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v61;

  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  nitro::ndarray<float>::~ndarray((_QWORD *)(v58 - 112));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void nitro::nitro_builtins::MatMul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[80];
  _BYTE v6[184];

  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v6, (const nitro::ndarray_container *)(*(_QWORD *)a1 + 8));
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v5, (const nitro::ndarray_container *)(*(_QWORD *)a2 + 8));
  __asm { BR              X10 }
}

#error "1912A6E14: call analysis failed (funcsize=86)"

void sub_1912A6E18()
{
  uint64_t v0;
  _DWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  _BYTE v49[16];
  std::__shared_weak_count *v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  std::__shared_weak_count *v63;
  void *v64;
  void *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  _DWORD v80[4];
  std::__shared_weak_count *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD v88[4];
  std::__shared_weak_count *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;

  if (*v1)
  {
    v5 = operator new(0x10uLL);
    v61 = v5;
    *v5 = xmmword_191A92A30;
    v62 = v5 + 1;
    v63 = (std::__shared_weak_count *)(v5 + 1);
    nitro::ndarray_container::transpose((uint64_t)v80, (uint64_t)&v61, v4 - 176);
    v80[0] = *(_DWORD *)(v4 - 176);
    v6 = v2[11];
    *(_QWORD *)(v4 - 168) = 0;
    *(_QWORD *)(v4 - 160) = 0;
    v7 = v81;
    *(_OWORD *)(v3 + 240) = v6;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    *(_OWORD *)((char *)v2 + 24) = v2[12];
    v84 = *(_QWORD *)(v4 - 136);
    *(_QWORD *)(v4 - 144) = 0;
    *(_QWORD *)(v4 - 136) = 0;
    *(_QWORD *)(v4 - 152) = 0;
    v10 = (void *)v85;
    if ((_QWORD)v85)
    {
      *((_QWORD *)&v85 + 1) = v85;
      operator delete((void *)v85);
      v10 = *(void **)(v4 - 152);
    }
    v85 = *(_OWORD *)((char *)v2 + 216);
    v11 = *(_QWORD *)(v4 - 112);
    v12 = *(_QWORD *)(v4 - 104);
    *(_QWORD *)(v4 - 120) = 0;
    *(_QWORD *)(v4 - 112) = 0;
    *(_QWORD *)(v4 - 128) = 0;
    v86 = v11;
    v87 = v12;
    if (v10)
    {
      *(_QWORD *)(v4 - 144) = v10;
      operator delete(v10);
    }
    v13 = *(std::__shared_weak_count **)(v4 - 160);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    if (v61)
    {
      v62 = v61;
      operator delete(v61);
    }
  }
  if (v88[0] == 9)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v61, (const nitro::ndarray_container *)v88);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v88, (uint64_t)&v61);
  nitro::ndarray<float>::ndarray((uint64_t)&v68, (uint64_t)&v61);
  if (v80[0] == 9)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v49, (const nitro::ndarray_container *)v80);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIfEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v80, (uint64_t)v49);
  nitro::ndarray<float>::ndarray((uint64_t)&v55, (uint64_t)v49);
  nitro::matmul<float>(&v68, &v55, &v74);
  *(_QWORD *)v0 = 0;
  *(_BYTE *)(v0 + 8) = 9;
  v16 = operator new();
  *(_QWORD *)v16 = 0;
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v16 + 8));
  *(_QWORD *)v0 = v16;
  *(_QWORD *)v16 = 1;
  nitro::ndarray_container::ndarray_container<float,(void *)0>(v4 - 176, &v74);
  *(_DWORD *)(v16 + 8) = *(_DWORD *)(v4 - 176);
  v17 = v2[11];
  *(_QWORD *)(v4 - 168) = 0;
  *(_QWORD *)(v4 - 160) = 0;
  v18 = *(std::__shared_weak_count **)(v16 + 24);
  *(_OWORD *)(v16 + 16) = v17;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = *(void **)(v16 + 32);
  if (v21)
  {
    *(_QWORD *)(v16 + 40) = v21;
    operator delete(v21);
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0;
  }
  v22 = *(void **)(v16 + 56);
  *(_OWORD *)(v16 + 32) = v2[12];
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v4 - 136);
  *(_QWORD *)(v4 - 144) = 0;
  *(_QWORD *)(v4 - 136) = 0;
  *(_QWORD *)(v4 - 152) = 0;
  if (v22)
  {
    *(_QWORD *)(v16 + 64) = v22;
    operator delete(v22);
    *(_QWORD *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 64) = 0;
    *(_QWORD *)(v16 + 72) = 0;
    v22 = *(void **)(v4 - 152);
  }
  *(_OWORD *)(v16 + 56) = *(_OWORD *)((char *)v2 + 216);
  v23 = *(_QWORD *)(v4 - 112);
  v24 = *(_QWORD *)(v4 - 104);
  *(_QWORD *)(v4 - 120) = 0;
  *(_QWORD *)(v4 - 112) = 0;
  *(_QWORD *)(v4 - 128) = 0;
  *(_QWORD *)(v16 + 72) = v23;
  *(_QWORD *)(v16 + 80) = v24;
  if (v22)
  {
    *(_QWORD *)(v4 - 144) = v22;
    operator delete(v22);
  }
  v25 = *(std::__shared_weak_count **)(v4 - 160);
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  v28 = v75;
  if (v75)
  {
    v29 = (unint64_t *)&v75->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  v31 = v56;
  if (v56)
  {
    v32 = (unint64_t *)&v56->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  v34 = v50;
  if (v50)
  {
    v35 = (unint64_t *)&v50->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
  v37 = v69;
  if (v69)
  {
    v38 = (unint64_t *)&v69->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v64)
  {
    v65 = v64;
    operator delete(v64);
  }
  v40 = v63;
  if (v63)
  {
    v41 = (unint64_t *)&v63->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if ((_QWORD)v85)
  {
    *((_QWORD *)&v85 + 1) = v85;
    operator delete((void *)v85);
  }
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  v43 = v81;
  if (v81)
  {
    v44 = (unint64_t *)&v81->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  v46 = v89;
  if (v89)
  {
    v47 = (unint64_t *)&v89->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_1912A7754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  char a72;
  void *v72;
  int v73;

  if (a37 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v73 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v73)
  {
LABEL_8:
    nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a64);
    nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a72);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v72);
  goto LABEL_8;
}

void nitro::nitro_builtins::Concat(std::vector<nitro::nitro_variable> const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"nv.size()", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 553, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 553, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A7D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A7D80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::convert_slice_array_to_list(nitro::nitro_builtins *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  void *v5;
  int64_t v6;
  char *v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  void *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  unint64_t *v53;
  char *v54;
  int v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  void *v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t *v90;
  std::locale::__imp *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  file_logger *v98;
  file_logger *started;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::ios_base *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  const std::locale::facet *v112;
  file_logger *v113;
  file_logger *v114;
  char *v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  file_logger *v119;
  file_logger *v120;
  char *v121;
  _QWORD *v122;
  void *locale;
  uint64_t v124;
  _QWORD *v125;
  void *v126;
  _QWORD *exception;
  _QWORD *v128;
  std::locale v129;
  uint64_t *v130;
  int64_t v131;
  void *v132;
  void *v133;
  void *__p;
  void *v135;
  void *v136;
  std::__shared_weak_count *v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  std::__shared_weak_count *v148;
  void *v149;
  _BYTE *v150;
  void *v151;
  void *v152;
  __int128 v153;
  __int128 v154;
  int v155;
  uint64_t v156;
  unint64_t *v157;
  unsigned __int8 v158;
  uint64_t v159;
  char v160;
  uint64_t v161;

  v161 = *MEMORY[0x1E0C80C00];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = *((unsigned __int8 *)this + 8);
  if (v4 == 4)
  {
    if ((uint64_t *)(*(_QWORD *)this + 8) != a2)
      std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(a2, *(uint64_t **)(*(_QWORD *)this + 8), *(uint64_t **)(*(_QWORD *)this + 16), (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8)) >> 4);
  }
  else
  {
    if (v4 != 9)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        v98 = (file_logger *)global_logger();
        started = file_logger::start_stream(v98, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "convert_slice_array_to_list", 683, 1);
        v100 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v100 && *((_BYTE *)v100 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100 + 2, (uint64_t)"We can only slice with list or ndarray indices", 46);
        v101 = pthread_getspecific(*((_QWORD *)started + 74));
        if (v101)
        {
          if (*((_BYTE *)v101 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(started);
            if (*((_DWORD *)started + 150) == 7)
            {
              __print_back_trace();
              exception = __cxa_allocate_exception(8uLL);
              *exception = "LOG_FATAL encountered";
              __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
            }
          }
        }
      }
      v102 = MEMORY[0x1E0DE4FE0];
      v103 = MEMORY[0x1E0DE4FE0] + 64;
      v104 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v105 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v156 = MEMORY[0x1E0DE4FE0] + 64;
      v146 = v104;
      *(uint64_t *)((char *)&v146 + *(_QWORD *)(v104 - 24)) = v105;
      v106 = (std::ios_base *)((char *)&v146 + *(_QWORD *)(v146 - 24));
      std::ios_base::init(v106, &v147);
      v106[1].__vftable = 0;
      v106[1].__fmtflags_ = -1;
      v146 = v102 + 24;
      v156 = v103;
      std::streambuf::basic_streambuf();
      v147 = MEMORY[0x1E0DE4FB8] + 16;
      v153 = 0u;
      v154 = 0u;
      v155 = 16;
      v107 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v146, (uint64_t)"Check failed (", 14);
      v108 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v108, (uint64_t)":", 1);
      v109 = (_QWORD *)std::ostream::operator<<();
      v110 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"): ", 3);
      v111 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"false", 5);
      std::ios_base::getloc((const std::ios_base *)((char *)v111 + *(_QWORD *)(*v111 - 24)));
      v112 = std::locale::use_facet(&v129, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
      std::locale::~locale(&v129);
      std::ostream::put();
      std::ostream::flush();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v113 = (file_logger *)global_logger();
        v114 = file_logger::start_stream(v113, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 684, 1);
        std::stringbuf::str();
        v115 = (char *)pthread_getspecific(*((_QWORD *)v114 + 74));
        if (v115 && v115[280])
        {
          v116 = v115 + 16;
          if (SHIBYTE(v138) >= 0)
            v117 = &v136;
          else
            v117 = v136;
          if (SHIBYTE(v138) >= 0)
            v118 = HIBYTE(v138);
          else
            v118 = (uint64_t)v137;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
        }
        if (SHIBYTE(v138) < 0)
          operator delete(v136);
      }
      __print_back_trace();
      if (*((int *)global_logger() + 169) <= 6)
      {
        v119 = (file_logger *)global_logger();
        v120 = file_logger::start_stream(v119, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 684, 1);
        std::stringbuf::str();
        v121 = (char *)pthread_getspecific(*((_QWORD *)v120 + 74));
        if (v121 && v121[280])
        {
          v122 = v121 + 16;
          if (v131 >= 0)
            locale = &v129;
          else
            locale = v129.__locale_;
          if (v131 >= 0)
            v124 = HIBYTE(v131);
          else
            v124 = (uint64_t)v130;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)locale, v124);
        }
        v125 = pthread_getspecific(*((_QWORD *)v120 + 74));
        if (v125)
        {
          if (*((_BYTE *)v125 + 280))
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125 + 2, (uint64_t)"\n", 1);
            file_logger::stream_flush(v120);
            if (*((_DWORD *)v120 + 150) == 7)
            {
              __print_back_trace();
              v128 = __cxa_allocate_exception(8uLL);
              *v128 = "LOG_FATAL encountered";
              __cxa_throw(v128, MEMORY[0x1E0DE4E50], 0);
            }
          }
        }
        if (SHIBYTE(v131) < 0)
          operator delete(v129.__locale_);
      }
      v126 = __cxa_allocate_exception(0x18uLL);
      std::stringbuf::str();
    }
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v146, (const nitro::ndarray_container *)(*(_QWORD *)this + 8));
    v143 = 0;
    v144 = 0;
    v145 = 0;
    v5 = v149;
    v6 = v150 - (_BYTE *)v149;
    if (v150 == v149)
    {
      v7 = 0;
      v8 = 0;
    }
    else
    {
      if (v6 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v7 = (char *)operator new(v150 - (_BYTE *)v149);
      v8 = &v7[8 * (v6 >> 3)];
      v143 = v7;
      v145 = v8;
      memcpy(v7, v5, v6);
      v144 = v8;
    }
    v129.__locale_ = (std::locale::__imp *)((v8 - v7) >> 3);
    if (v8 - v7 != 16)
    {
      v136 = &v129;
      nitro::nitro_builtins::convert_slice_array_to_list(nitro::flexible_type const&)::$_0::operator()();
    }
    if ((_DWORD)v146 == 3)
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&v129, (const nitro::ndarray_container *)&v146);
    else
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(&v146, (uint64_t)&v129);
    nitro::ndarray<int>::ndarray((uint64_t)&v136, (uint64_t)&v129);
    if (__p)
    {
      v135 = __p;
      operator delete(__p);
    }
    if (v132)
    {
      v133 = v132;
      operator delete(v132);
    }
    v9 = (std::__shared_weak_count *)v131;
    if (v131)
    {
      v10 = (unint64_t *)(v131 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v143;
    if (*(_QWORD *)v143)
    {
      v13 = 0;
      do
      {
        v130 = 0;
        v131 = 0;
        v129.__locale_ = 0;
        if (v12[1])
        {
          v14 = 0;
          do
          {
            v16 = v142 + *(_QWORD *)v140 * v13 + *((_QWORD *)v140 + 1) * v14;
            v160 = 0;
            v159 = 0;
            v159 = *((int *)v136 + v16);
            v17 = v130;
            if ((unint64_t)v130 < v131)
            {
              *v130 = 0;
              *((_BYTE *)v17 + 8) = 0;
              v15 = v159;
              *((_BYTE *)v17 + 8) = v160;
              *v17 = v15;
              *((_BYTE *)v17 + 8) = v160;
              v130 = v17 + 2;
            }
            else
            {
              v130 = (uint64_t *)std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)&v129, (uint64_t)&v159);
              switch(v160)
              {
                case 2:
                  v18 = (unint64_t *)v159;
                  do
                  {
                    v19 = __ldaxr(v18);
                    v20 = v19 - 1;
                  }
                  while (__stlxr(v20, v18));
                  if (!v20)
                  {
                    v21 = (_QWORD *)v159;
                    if (v159)
                    {
                      if (*(char *)(v159 + 31) < 0)
                        operator delete(*(void **)(v159 + 8));
                      v22 = v21;
                      v23 = 0x1012C404EF22A49;
                      goto LABEL_80;
                    }
                  }
                  break;
                case 3:
                  v31 = (unint64_t *)v159;
                  do
                  {
                    v32 = __ldaxr(v31);
                    v33 = v32 - 1;
                  }
                  while (__stlxr(v33, v31));
                  if (!v33)
                  {
                    v34 = (_QWORD *)v159;
                    if (v159)
                    {
                      v35 = *(void **)(v159 + 8);
                      if (v35)
                      {
                        *(_QWORD *)(v159 + 16) = v35;
                        operator delete(v35);
                      }
                      v22 = v34;
                      v23 = 0x1080C409938AC02;
                      goto LABEL_80;
                    }
                  }
                  break;
                case 4:
                  v24 = (unint64_t *)v159;
                  do
                  {
                    v25 = __ldaxr(v24);
                    v26 = v25 - 1;
                  }
                  while (__stlxr(v26, v24));
                  if (!v26)
                  {
                    v27 = (_QWORD *)v159;
                    if (v159)
                    {
                      v28 = *(_QWORD *)(v159 + 8);
                      if (!v28)
                        goto LABEL_65;
                      v29 = *(_QWORD *)(v159 + 16);
                      v30 = *(void **)(v159 + 8);
                      if (v29 != v28)
                      {
                        do
                        {
                          v29 -= 16;
                          std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v27 + 3), v29);
                        }
                        while (v29 != v28);
                        v30 = (void *)v27[1];
                      }
                      v27[2] = v28;
                      goto LABEL_64;
                    }
                  }
                  break;
                case 5:
                  v36 = (unint64_t *)v159;
                  do
                  {
                    v37 = __ldaxr(v36);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, v36));
                  if (!v38)
                  {
                    v27 = (_QWORD *)v159;
                    if (v159)
                    {
                      v39 = *(_QWORD *)(v159 + 8);
                      if (v39)
                      {
                        v40 = *(_QWORD *)(v159 + 16);
                        v41 = *(void **)(v159 + 8);
                        if (v40 != v39)
                        {
                          do
                            v40 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v40 - 32);
                          while (v40 != v39);
                          v41 = (void *)v27[1];
                        }
                        v27[2] = v39;
                        v30 = v41;
LABEL_64:
                        operator delete(v30);
                      }
LABEL_65:
                      v22 = v27;
                      v23 = 0x1020C405E66F15BLL;
                      goto LABEL_80;
                    }
                  }
                  break;
                case 9:
                  v42 = (unint64_t *)v159;
                  do
                  {
                    v43 = __ldaxr(v42);
                    v44 = v43 - 1;
                  }
                  while (__stlxr(v44, v42));
                  if (!v44)
                  {
                    v45 = (_QWORD *)v159;
                    if (v159)
                    {
                      v46 = *(void **)(v159 + 56);
                      if (v46)
                      {
                        *(_QWORD *)(v159 + 64) = v46;
                        operator delete(v46);
                      }
                      v47 = (void *)v45[4];
                      if (v47)
                      {
                        v45[5] = v47;
                        operator delete(v47);
                      }
                      v48 = (std::__shared_weak_count *)v45[3];
                      if (v48)
                      {
                        p_shared_owners = (unint64_t *)&v48->__shared_owners_;
                        do
                          v50 = __ldaxr(p_shared_owners);
                        while (__stlxr(v50 - 1, p_shared_owners));
                        if (!v50)
                        {
                          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                          std::__shared_weak_count::__release_weak(v48);
                        }
                      }
                      v22 = v45;
                      v23 = 0x10B0C4002311774;
LABEL_80:
                      MEMORY[0x19401CD90](v22, v23);
                    }
                  }
                  break;
                default:
                  break;
              }
            }
            ++v14;
          }
          while (v14 < *((_QWORD *)v143 + 1));
        }
        v157 = 0;
        v158 = 4;
        v51 = (_QWORD *)operator new();
        *v51 = 0;
        v51[2] = 0;
        v51[3] = 0;
        v51[1] = 0;
        v157 = v51;
        *v51 = 1;
        std::vector<nitro::flexible_type>::__assign_with_size[abi:ne180100]<nitro::flexible_type*,nitro::flexible_type*>(v51 + 1, (uint64_t *)v129.__locale_, v130, ((char *)v130 - (char *)v129.__locale_) >> 4);
        v52 = a2[1];
        if (v52 >= a2[2])
        {
          v54 = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)a2, (uint64_t)&v157);
          v55 = v158;
          a2[1] = (uint64_t)v54;
          switch(v55)
          {
            case 2:
              v56 = v157;
              do
              {
                v57 = __ldaxr(v56);
                v58 = v57 - 1;
              }
              while (__stlxr(v58, v56));
              if (!v58)
              {
                v59 = v157;
                if (v157)
                {
                  if (*((char *)v157 + 31) < 0)
                    operator delete((void *)v157[1]);
                  v60 = v59;
                  v61 = 0x1012C404EF22A49;
                  goto LABEL_132;
                }
              }
              break;
            case 3:
              v69 = v157;
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                v72 = v157;
                if (v157)
                {
                  v73 = (void *)v157[1];
                  if (v73)
                  {
                    v157[2] = (unint64_t)v73;
                    operator delete(v73);
                  }
                  v60 = v72;
                  v61 = 0x1080C409938AC02;
                  goto LABEL_132;
                }
              }
              break;
            case 4:
              v62 = v157;
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
              {
                v65 = v157;
                if (v157)
                {
                  v66 = v157[1];
                  if (!v66)
                    goto LABEL_117;
                  v67 = v157[2];
                  v68 = (void *)v157[1];
                  if (v67 != v66)
                  {
                    do
                    {
                      v67 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v65 + 3), v67);
                    }
                    while (v67 != v66);
                    v68 = (void *)v65[1];
                  }
                  v65[2] = v66;
                  goto LABEL_116;
                }
              }
              break;
            case 5:
              v74 = v157;
              do
              {
                v75 = __ldaxr(v74);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, v74));
              if (!v76)
              {
                v65 = v157;
                if (v157)
                {
                  v77 = v157[1];
                  if (v77)
                  {
                    v78 = v157[2];
                    v79 = (void *)v157[1];
                    if (v78 != v77)
                    {
                      do
                        v78 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v78 - 32);
                      while (v78 != v77);
                      v79 = (void *)v65[1];
                    }
                    v65[2] = v77;
                    v68 = v79;
LABEL_116:
                    operator delete(v68);
                  }
LABEL_117:
                  v60 = v65;
                  v61 = 0x1020C405E66F15BLL;
                  goto LABEL_132;
                }
              }
              break;
            case 9:
              v80 = v157;
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                v83 = v157;
                if (v157)
                {
                  v84 = (void *)v157[7];
                  if (v84)
                  {
                    v157[8] = (unint64_t)v84;
                    operator delete(v84);
                  }
                  v85 = (void *)v83[4];
                  if (v85)
                  {
                    v83[5] = (unint64_t)v85;
                    operator delete(v85);
                  }
                  v86 = (std::__shared_weak_count *)v83[3];
                  if (v86)
                  {
                    v87 = (unint64_t *)&v86->__shared_owners_;
                    do
                      v88 = __ldaxr(v87);
                    while (__stlxr(v88 - 1, v87));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }
                  v60 = v83;
                  v61 = 0x10B0C4002311774;
LABEL_132:
                  MEMORY[0x19401CD90](v60, v61);
                }
              }
              break;
            default:
              break;
          }
        }
        else
        {
          *(_QWORD *)v52 = 0;
          *(_BYTE *)(v52 + 8) = 0;
          v53 = v157;
          *(_BYTE *)(v52 + 8) = v158;
          *(_QWORD *)v52 = v53;
          *(_BYTE *)(v52 + 8) = v158;
          a2[1] = v52 + 16;
        }
        v89 = (uint64_t *)v129.__locale_;
        if (v129.__locale_)
        {
          v90 = v130;
          v91 = v129.__locale_;
          if (v130 != (uint64_t *)v129.__locale_)
          {
            do
            {
              v90 -= 2;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v131, (uint64_t)v90);
            }
            while (v90 != v89);
            v91 = v129.__locale_;
          }
          v130 = v89;
          operator delete(v91);
        }
        ++v13;
        v12 = v143;
      }
      while (v13 < *(_QWORD *)v143);
    }
    if (v140)
    {
      v141 = v140;
      operator delete(v140);
    }
    if (v138)
    {
      v139 = v138;
      operator delete(v138);
    }
    v92 = v137;
    if (v137)
    {
      v93 = (unint64_t *)&v137->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    if (v143)
      operator delete(v143);
    if (v151)
    {
      v152 = v151;
      operator delete(v151);
    }
    if (v149)
    {
      v150 = v149;
      operator delete(v149);
    }
    v95 = v148;
    if (v148)
    {
      v96 = (unint64_t *)&v148->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
  }
}

void sub_1912A89E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  void **v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;

  if (a15 < 0)
    operator delete(__p);
  a38 = *v54;
  *(uint64_t *)((char *)&a38 + *(_QWORD *)(a38 - 24)) = v54[3];
  a39 = v55 + 16;
  if (a52 < 0)
    operator delete(a47);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v53);
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](v52);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fbeginmask.get_type() == flex_type_enum::LIST", 45);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 755, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 755, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A8FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A903C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fendmask.get_type() == flex_type_enum::LIST", 43);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 756, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 756, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A9378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A93E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_2::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"maskidx", 7);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"slice_tensor.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<", 1);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 763, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 763, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A97B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A9818(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::SliceMask(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_3::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"maskidx", 7);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"slice_tensor.size()", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<", 1);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 768, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 768, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A9BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A9C50(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Stack(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 809, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 809, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912A9F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912A9FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::Reshape(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"right_aligned_i", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"<", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"reverse_input_shape.size()", 26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"<", 1);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 827, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 827, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912AA3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912AA42C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::TopK_1d(nitro::nitro_builtins *this@<X0>, const nitro::flexible_type *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  _DWORD v13[4];
  std::__shared_weak_count *v14;
  void *v15;
  void *v16;
  void *__p;
  void *v18;

  nitro::ndarray_container::canonicalize((nitro::ndarray_container *)(*(_QWORD *)this + 8), (uint64_t)v13);
  v6 = nitro::flexible_type_converter<int>::get((uint64_t)&v11, (unsigned __int8 *)a2);
  nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(v13, v6, (uint64_t)&v11);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 4;
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)v7 = 1;
  *(_OWORD *)(v7 + 8) = v11;
  *(_QWORD *)(v7 + 24) = v12;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1912AA544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;

  do
  {
    v15 = __ldaxr(0);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, 0));
  if (!v16)
    nitro::nitro_builtins::TopK(v13);
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 0;
  std::vector<nitro::flexible_type>::~vector[abi:ne180100](&a9);
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a13);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(_DWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float16x8_t *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  float *v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v127;
  float *v128;
  int32x4_t v129;
  float32x4_t *v130;
  int32x4_t v131;
  int32x4_t v132;
  unint64_t v133;
  float32x4_t v134;
  float *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  float *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  float *v152;
  float32x4_t v153;
  int32x4_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  char *v158;
  unint64_t v159;
  BOOL v160;
  BOOL v162;
  unint64_t v163;
  float *v164;
  float *v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  float *v172;
  uint64_t v173;
  unint64_t v174;
  BOOL v175;
  unint64_t v176;
  float *v177;
  int32x4_t v178;
  int32x4_t *v179;
  int32x4_t v180;
  int32x4_t v181;
  unint64_t v182;
  int32x4_t v183;
  float32x4_t v184;
  float *v185;
  char *v186;
  float *v187;
  float *v188;
  float *v189;
  float *v190;
  float *v191;
  int32x4_t v192;
  int32x4_t v193;
  float16x8_t *v194;
  int32x4_t v195;
  int32x4_t v196;
  unint64_t v197;
  float16x8_t v198;
  float16x8_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float *v202;
  float *v203;
  float *v204;
  float *v205;
  float *v206;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  unint64_t v215;
  int8x16_t *v216;
  float *v217;
  int8x16_t v218;
  float32x4_t v219;
  float *v220;
  float32x4_t v221;
  float32x4_t v222;
  float *v223;
  float *v224;
  unint64_t v225;
  int32x4_t v226;
  float *v227;
  __int32 *v228;
  unint64_t v229;
  int32x4_t v230;
  __int32 v231;
  uint64_t *v232;
  unint64_t v233;
  float32x4_t *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  __int32 *v241;
  char *v242;
  _DWORD *v243;
  __int32 v244;
  _QWORD *v245;
  _QWORD *v246;
  __int128 v247;
  std::__shared_weak_count *v248;
  unint64_t *v249;
  unint64_t v250;
  void *v251;
  void *v252;
  std::__shared_weak_count *v253;
  unint64_t *v254;
  unint64_t v255;
  char *v256;
  _QWORD *v257;
  unint64_t *v258;
  unint64_t v259;
  unint64_t v260;
  _QWORD *v261;
  _QWORD *v262;
  uint64_t v263;
  const float *v264;
  float32x4_t *v265;
  float32x4_t *v266;
  unint64_t v267;
  const float *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  void *v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t v278;
  _QWORD *v279;
  void *v280;
  unint64_t *v281;
  unint64_t v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  unint64_t *v287;
  unint64_t v288;
  unint64_t v289;
  _QWORD *v290;
  void *v291;
  void *v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  _QWORD *v296;
  _QWORD *v297;
  __int128 v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  void *v302;
  void *v303;
  std::__shared_weak_count *v304;
  unint64_t *v305;
  unint64_t v306;
  char *v307;
  _QWORD *v308;
  unint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  uint64_t v314;
  unint64_t *v315;
  unint64_t v316;
  unint64_t v317;
  _QWORD *v318;
  uint64_t v319;
  uint64_t v320;
  void *v321;
  unint64_t *v322;
  unint64_t v323;
  unint64_t v324;
  _QWORD *v325;
  void *v326;
  unint64_t *v327;
  unint64_t v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void *v332;
  unint64_t *v333;
  unint64_t v334;
  unint64_t v335;
  _QWORD *v336;
  void *v337;
  void *v338;
  std::__shared_weak_count *v339;
  unint64_t *v340;
  unint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  char *v348;
  char *v349;
  void *v350;
  std::__shared_weak_count *v351;
  unint64_t *v352;
  unint64_t v353;
  uint64_t *v354;
  unint64_t v355;
  float32x4_t *v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t v359;
  unint64_t v360;
  float16x8_t *v361;
  unint64_t v362;
  float32x4_t *v363;
  const float *v364;
  const float *v365;
  unint64_t v366;
  __int32 *v367;
  float *v368;
  _WORD *v369;
  __int32 v371;
  _QWORD *v372;
  _QWORD *v373;
  __int128 v374;
  std::__shared_weak_count *v375;
  unint64_t *v376;
  unint64_t v377;
  void *v378;
  void *v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  char *v383;
  _QWORD *v384;
  unint64_t *v385;
  unint64_t v386;
  unint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  uint64_t v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  uint64_t v396;
  void *v397;
  unint64_t *v398;
  unint64_t v399;
  unint64_t v400;
  _QWORD *v401;
  void *v402;
  unint64_t *v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  unint64_t *v409;
  unint64_t v410;
  unint64_t v411;
  _QWORD *v412;
  void *v413;
  void *v414;
  std::__shared_weak_count *v415;
  unint64_t *v416;
  unint64_t v417;
  _QWORD *v418;
  _QWORD *v419;
  __int128 v420;
  std::__shared_weak_count *v421;
  unint64_t *v422;
  unint64_t v423;
  void *v424;
  void *v425;
  std::__shared_weak_count *v426;
  unint64_t *v427;
  unint64_t v428;
  char *v429;
  _QWORD *v430;
  unint64_t *v431;
  unint64_t v432;
  unint64_t v433;
  _QWORD *v434;
  _QWORD *v435;
  uint64_t v436;
  unint64_t *v437;
  unint64_t v438;
  unint64_t v439;
  _QWORD *v440;
  uint64_t v441;
  uint64_t v442;
  void *v443;
  unint64_t *v444;
  unint64_t v445;
  unint64_t v446;
  _QWORD *v447;
  void *v448;
  unint64_t *v449;
  unint64_t v450;
  unint64_t v451;
  uint64_t v452;
  uint64_t v453;
  void *v454;
  unint64_t *v455;
  unint64_t v456;
  unint64_t v457;
  _QWORD *v458;
  void *v459;
  void *v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  std::__shared_weak_count *v464;
  unint64_t *v465;
  unint64_t v466;
  std::__shared_weak_count *v467;
  unint64_t *v468;
  unint64_t v469;
  char *v470;
  char *v471;
  void *v472;
  unint64_t *v473;
  uint64_t *v474;
  unint64_t v475;
  char *v476;
  uint64_t v477;
  uint64_t v478;
  float *v479;
  float v480;
  _QWORD *v481;
  _QWORD *v482;
  __int128 v483;
  std::__shared_weak_count *v484;
  unint64_t *v485;
  unint64_t v486;
  void *v487;
  void *v488;
  std::__shared_weak_count *v489;
  unint64_t *v490;
  unint64_t v491;
  char *v492;
  _QWORD *v493;
  unint64_t *v494;
  unint64_t v495;
  unint64_t v496;
  _QWORD *v497;
  _QWORD *v498;
  uint64_t v499;
  unint64_t *v500;
  unint64_t v501;
  unint64_t v502;
  _QWORD *v503;
  uint64_t v504;
  uint64_t v505;
  void *v506;
  unint64_t *v507;
  unint64_t v508;
  unint64_t v509;
  _QWORD *v510;
  void *v511;
  unint64_t *v512;
  unint64_t v513;
  unint64_t v514;
  uint64_t v515;
  uint64_t v516;
  void *v517;
  unint64_t *v518;
  unint64_t v519;
  unint64_t v520;
  _QWORD *v521;
  void *v522;
  void *v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  _QWORD *v527;
  _QWORD *v528;
  __int128 v529;
  std::__shared_weak_count *v530;
  unint64_t *v531;
  unint64_t v532;
  void *v533;
  void *v534;
  std::__shared_weak_count *v535;
  unint64_t *v536;
  unint64_t v537;
  char *v538;
  _QWORD *v539;
  unint64_t *v540;
  unint64_t v541;
  unint64_t v542;
  _QWORD *v543;
  _QWORD *v544;
  uint64_t v545;
  unint64_t *v546;
  unint64_t v547;
  unint64_t v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  void *v552;
  unint64_t *v553;
  unint64_t v554;
  unint64_t v555;
  _QWORD *v556;
  void *v557;
  unint64_t *v558;
  unint64_t v559;
  unint64_t v560;
  uint64_t v561;
  uint64_t v562;
  void *v563;
  unint64_t *v564;
  unint64_t v565;
  unint64_t v566;
  _QWORD *v567;
  void *v568;
  void *v569;
  std::__shared_weak_count *v570;
  unint64_t *v571;
  unint64_t v572;
  std::__shared_weak_count *v573;
  unint64_t *v574;
  unint64_t v575;
  std::__shared_weak_count *v576;
  unint64_t *v577;
  unint64_t v578;
  char *v579;
  char *v580;
  void *v581;
  unint64_t *v582;
  uint64_t *v583;
  unint64_t v584;
  float32x4_t *v585;
  uint64_t v586;
  uint64_t v587;
  unint64_t v588;
  unint64_t v589;
  unint64_t v590;
  float *v591;
  float *v592;
  _DWORD *v593;
  float v594;
  _QWORD *v595;
  _QWORD *v596;
  __int128 v597;
  std::__shared_weak_count *v598;
  unint64_t *p_shared_owners;
  unint64_t v600;
  void *v601;
  void *v602;
  std::__shared_weak_count *v603;
  unint64_t *v604;
  unint64_t v605;
  char *v606;
  _QWORD *v607;
  unint64_t *v608;
  unint64_t v609;
  unint64_t v610;
  _QWORD *v611;
  _QWORD *v612;
  uint64_t v613;
  unint64_t v614;
  unint64_t v615;
  char *v616;
  float32x4_t *v617;
  BOOL v619;
  __int8 *v620;
  char v622;
  const float *v624;
  int32x4_t *v625;
  float32x4_t *v626;
  unint64_t v627;
  const float *v628;
  unint64_t *v629;
  unint64_t v630;
  unint64_t v631;
  _QWORD *v632;
  uint64_t v633;
  uint64_t v634;
  void *v635;
  unint64_t *v636;
  unint64_t v637;
  unint64_t v638;
  _QWORD *v639;
  void *v640;
  unint64_t *v641;
  unint64_t v642;
  unint64_t v643;
  uint64_t v644;
  uint64_t v645;
  void *v646;
  unint64_t *v647;
  unint64_t v648;
  unint64_t v649;
  _QWORD *v650;
  void *v651;
  void *v652;
  std::__shared_weak_count *v653;
  unint64_t *v654;
  unint64_t v655;
  _QWORD *v656;
  _QWORD *v657;
  __int128 v658;
  std::__shared_weak_count *v659;
  unint64_t *v660;
  unint64_t v661;
  void *v662;
  void *v663;
  std::__shared_weak_count *v664;
  unint64_t *v665;
  unint64_t v666;
  char *v667;
  _QWORD *v668;
  unint64_t *v669;
  unint64_t v670;
  unint64_t v671;
  _QWORD *v672;
  _QWORD *v673;
  uint64_t v674;
  unint64_t *v675;
  unint64_t v676;
  unint64_t v677;
  _QWORD *v678;
  uint64_t v679;
  uint64_t v680;
  void *v681;
  unint64_t *v682;
  unint64_t v683;
  unint64_t v684;
  _QWORD *v685;
  void *v686;
  unint64_t *v687;
  unint64_t v688;
  unint64_t v689;
  uint64_t v690;
  uint64_t v691;
  void *v692;
  unint64_t *v693;
  unint64_t v694;
  unint64_t v695;
  _QWORD *v696;
  void *v697;
  void *v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  std::__shared_weak_count *v702;
  unint64_t *v703;
  unint64_t v704;
  std::__shared_weak_count *v705;
  unint64_t *v706;
  unint64_t v707;
  char *v708;
  char *v709;
  void *v710;
  unint64_t *v711;
  unint64_t v712;
  std::__shared_weak_count *v713;
  void *v714;
  char *v715;
  void *v716;
  void *v717;
  uint64_t v718;
  uint64_t v719;
  std::__shared_weak_count *v720;
  void *v721;
  char *v722;
  void *v723;
  void *v724;
  uint64_t v725;
  unint64_t v726;
  std::__shared_weak_count *v727;
  void *v728;
  char *v729;
  void *v730;
  void *v731;
  uint64_t v732;
  unint64_t v733;
  std::__shared_weak_count *v734;
  void *v735;
  char *v736;
  void *v737;
  void *v738;
  uint64_t v739;
  void *__p;
  void *v741;
  uint64_t v742;
  void *v743;
  void *v744;
  uint64_t v745;
  void *v746;
  char *v747;
  __int8 *v748;
  uint64_t v749;
  std::__shared_weak_count *v750;
  void *v751;
  void *v752;
  void *v753;
  void *v754;
  uint64_t v755;
  void *v756[2];
  void *v757;
  void *v758;
  float *v759;
  float *v760;
  uint64_t *v761;
  __int128 v762;
  __int128 v763;
  uint64_t v764;
  __int128 v765;
  uint64_t v766;
  uint64_t v767;
  _QWORD *v768;
  std::__shared_weak_count *v769;
  void *v770;
  void *v771;
  void *v772;
  void *v773;
  _QWORD *v774;
  char v775;
  uint64_t v776;
  float32x4x2_t v777;
  float32x4x2_t v778;
  float32x4x2_t v779;
  float32x4x2_t v780;
  float32x4x2_t v781;
  float32x4x2_t v782;
  float32x4x2_t v783;
  float32x4x2_t v784;
  float32x4x2_t v785;
  float32x4x2_t v786;

  v776 = *MEMORY[0x1E0C80C00];
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v726, (uint64_t)a1);
      if (v732)
        goto LABEL_784;
      v5 = v729 - (_BYTE *)v728;
      if (v729 == v728)
        goto LABEL_785;
      v6 = v726;
      if (!v726)
        goto LABEL_80;
      if ((unint64_t)(v5 - 8) < 8)
      {
        v6 = 1;
        v7 = (char *)v728;
        do
        {
LABEL_79:
          v97 = *(_QWORD *)v7;
          v7 += 8;
          v6 *= v97;
        }
        while (v7 != v729);
        goto LABEL_80;
      }
      v92 = ((unint64_t)(v5 - 8) >> 3) + 1;
      v7 = (char *)v728 + 8 * (v92 & 0x3FFFFFFFFFFFFFFELL);
      v93 = (char *)v728 + 8;
      v94 = 1;
      v95 = v92 & 0x3FFFFFFFFFFFFFFELL;
      v96 = 1;
      do
      {
        v94 *= *(v93 - 1);
        v96 *= *v93;
        v93 += 2;
        v95 -= 2;
      }
      while (v95);
      v6 = v96 * v94;
      if (v92 != (v92 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_79;
LABEL_80:
      v98 = v5 >> 3;
      if ((unint64_t)(v5 >> 3) <= 1)
        v98 = 1;
      if (v98 < 2)
      {
        v99 = 0;
        v100 = 0;
LABEL_87:
        v106 = v98 - v99;
        v107 = 8 * v99;
        v108 = (uint64_t *)((char *)v730 + v107);
        v109 = (uint64_t *)((char *)v728 + v107);
        do
        {
          v110 = *v109++;
          v111 = v110 - 1;
          v112 = *v108++;
          v100 += v112 * v111;
          --v106;
        }
        while (v106);
        goto LABEL_89;
      }
      v101 = 0;
      v102 = 0;
      v99 = v98 & 0xFFFFFFFFFFFFFFFELL;
      v103 = (char *)v728 + 8;
      v104 = (char *)v730 + 8;
      v105 = v98 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v101 += *(v104 - 1) * (*(v103 - 1) - 1);
        v102 += *v104 * (*v103 - 1);
        v103 += 2;
        v104 += 2;
        v105 -= 2;
      }
      while (v105);
      v100 = v102 + v101;
      if (v98 != v99)
        goto LABEL_87;
LABEL_89:
      if (v6 != v100 + 1)
LABEL_784:
        nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
      if (v729 == v728 || (v113 = v726) == 0)
      {
LABEL_785:
        v189 = 0;
        v173 = 0;
        v172 = 0;
        v758 = 0;
        v759 = 0;
        v760 = 0;
        if (!a2)
          goto LABEL_787;
        goto LABEL_786;
      }
      v114 = v729 - (_BYTE *)v728 - 8;
      if (v114 < 8)
      {
        v115 = 1;
        v116 = (char *)v728;
        do
        {
LABEL_154:
          v171 = *(_QWORD *)v116;
          v116 += 8;
          v115 *= v171;
        }
        while (v116 != v729);
        goto LABEL_155;
      }
      v166 = (v114 >> 3) + 1;
      v116 = (char *)v728 + 8 * (v166 & 0x3FFFFFFFFFFFFFFELL);
      v167 = (char *)v728 + 8;
      v168 = 1;
      v169 = v166 & 0x3FFFFFFFFFFFFFFELL;
      v170 = 1;
      do
      {
        v168 *= *(v167 - 1);
        v170 *= *v167;
        v167 += 2;
        v169 -= 2;
      }
      while (v169);
      v115 = v170 * v168;
      if (v166 != (v166 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_154;
LABEL_155:
      v758 = 0;
      v759 = 0;
      v760 = 0;
      if (v115)
      {
        if (v115 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v172 = (float *)operator new(8 * v115);
        v758 = v172;
        v760 = &v172[2 * v115];
        bzero(v172, 8 * v115);
        v173 = (uint64_t)&v172[2 * v115];
        v759 = (float *)v173;
        v174 = (uint64_t)(8 * v115) >> 3;
        if (v174 <= 1)
          v174 = 1;
        if (v174 >= 8
          && ((unint64_t)(v172 + 1) < v113 + 4 * v174
            ? (v175 = v113 >= (unint64_t)&v172[2 * v174])
            : (v175 = 1),
              v175))
        {
          v176 = v174 & 0xFFFFFFFFFFFFFFF8;
          v177 = v172 + 8;
          v178 = (int32x4_t)xmmword_191A761E0;
          v179 = (int32x4_t *)(v113 + 16);
          v180.i64[0] = 0x400000004;
          v180.i64[1] = 0x400000004;
          v181.i64[0] = 0x800000008;
          v181.i64[1] = 0x800000008;
          v182 = v174 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v784.val[1] = (float32x4_t)vaddq_s32(v178, v180);
            v183 = *v179;
            v184 = vcvtq_f32_s32(v179[-1]);
            v185 = v177 - 8;
            vst2q_f32(v185, *(float32x4x2_t *)(&v178 - 1));
            v784.val[0] = vcvtq_f32_s32(v183);
            vst2q_f32(v177, v784);
            v178 = vaddq_s32(v178, v181);
            v177 += 16;
            v179 += 2;
            v182 -= 8;
          }
          while (v182);
          if (v174 == v176)
          {
LABEL_177:
            v189 = v172;
            if (!a2)
              goto LABEL_787;
            goto LABEL_786;
          }
        }
        else
        {
          v176 = 0;
        }
        v188 = &v172[2 * v176 + 1];
        do
        {
          *(v188 - 1) = (float)*(int *)(v113 + 4 * v176);
          *(_DWORD *)v188 = v176;
          v188 += 2;
          ++v176;
        }
        while (v174 != v176);
        goto LABEL_177;
      }
      v189 = 0;
      v173 = 0;
      v172 = 0;
      if (!a2)
        goto LABEL_787;
LABEL_786:
      std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v189, &v172[2 * a2], v173, (uint64_t)&v761);
LABEL_787:
      v756[0] = 0;
      v756[1] = 0;
      v757 = 0;
      v583 = (uint64_t *)operator new(8uLL);
      v761 = v583;
      *v583 = a2;
      *(_QWORD *)&v762 = v583 + 1;
      *((_QWORD *)&v762 + 1) = v583 + 1;
      nitro::ndarray<int>::init_from_shape(&v761, &v749);
      if (v761)
      {
        *(_QWORD *)&v762 = v761;
        operator delete(v761);
      }
      v747 = 0;
      v748 = 0;
      v746 = 0;
      if (v759 == v172)
      {
        v585 = 0;
        if (!a2)
          goto LABEL_801;
      }
      else
      {
        v584 = (char *)v759 - (char *)v189;
        if ((char *)v759 - (char *)v189 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v585 = (float32x4_t *)operator new(v584 >> 1);
        v746 = v585;
        v748 = &v585->i8[4 * ((uint64_t)v584 >> 3)];
        bzero(v585, v584 >> 1);
        v747 = (char *)v585 + (v584 >> 1);
        if (!a2)
        {
LABEL_801:
          v768 = 0;
          LOBYTE(v769) = 9;
          v595 = (_QWORD *)operator new();
          *v595 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v595 + 1));
          v768 = v595;
          *v595 = 1;
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v761, &v749);
          v596 = v768;
          *((_DWORD *)v768 + 2) = (_DWORD)v761;
          v597 = v762;
          v762 = 0uLL;
          v598 = (std::__shared_weak_count *)v596[3];
          *((_OWORD *)v596 + 1) = v597;
          if (v598)
          {
            p_shared_owners = (unint64_t *)&v598->__shared_owners_;
            do
              v600 = __ldaxr(p_shared_owners);
            while (__stlxr(v600 - 1, p_shared_owners));
            if (!v600)
            {
              ((void (*)(std::__shared_weak_count *))v598->__on_zero_shared)(v598);
              std::__shared_weak_count::__release_weak(v598);
            }
          }
          v601 = (void *)v596[4];
          if (v601)
          {
            v596[5] = v601;
            operator delete(v601);
            v596[4] = 0;
            v596[5] = 0;
            v596[6] = 0;
          }
          v602 = (void *)v596[7];
          *((_OWORD *)v596 + 2) = v763;
          v596[6] = v764;
          v763 = 0uLL;
          v764 = 0;
          if (v602)
          {
            v596[8] = v602;
            operator delete(v602);
            v596[7] = 0;
            v596[8] = 0;
            v596[9] = 0;
            v602 = (void *)v763;
          }
          *(_OWORD *)(v596 + 7) = v765;
          v596[9] = v766;
          v765 = 0uLL;
          v766 = 0;
          v596[10] = v767;
          if (v602)
          {
            *((_QWORD *)&v763 + 1) = v602;
            operator delete(v602);
          }
          v603 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
          if (*((_QWORD *)&v762 + 1))
          {
            v604 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
            do
              v605 = __ldaxr(v604);
            while (__stlxr(v605 - 1, v604));
            if (!v605)
            {
              ((void (*)(std::__shared_weak_count *))v603->__on_zero_shared)(v603);
              std::__shared_weak_count::__release_weak(v603);
            }
          }
          v606 = (char *)v756[1];
          if (v756[1] >= v757)
          {
            v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v768);
            switch((char)v769)
            {
              case 2:
                v608 = v768;
                do
                {
                  v609 = __ldaxr(v608);
                  v610 = v609 - 1;
                }
                while (__stlxr(v610, v608));
                if (!v610)
                {
                  v611 = v768;
                  if (v768)
                  {
                    if (*((char *)v768 + 31) < 0)
                      operator delete((void *)v768[1]);
                    v612 = v611;
                    v613 = 0x1012C404EF22A49;
                    goto LABEL_891;
                  }
                }
                break;
              case 3:
                v636 = v768;
                do
                {
                  v637 = __ldaxr(v636);
                  v638 = v637 - 1;
                }
                while (__stlxr(v638, v636));
                if (!v638)
                {
                  v639 = v768;
                  if (v768)
                  {
                    v640 = (void *)v768[1];
                    if (v640)
                    {
                      v768[2] = v640;
                      operator delete(v640);
                    }
                    v612 = v639;
                    v613 = 0x1080C409938AC02;
                    goto LABEL_891;
                  }
                }
                break;
              case 4:
                v629 = v768;
                do
                {
                  v630 = __ldaxr(v629);
                  v631 = v630 - 1;
                }
                while (__stlxr(v631, v629));
                if (!v631)
                {
                  v632 = v768;
                  if (v768)
                  {
                    v633 = v768[1];
                    if (!v633)
                      goto LABEL_876;
                    v634 = v768[2];
                    v635 = (void *)v768[1];
                    if (v634 != v633)
                    {
                      do
                      {
                        v634 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v632 + 3), v634);
                      }
                      while (v634 != v633);
                      v635 = (void *)v632[1];
                    }
                    v632[2] = v633;
                    goto LABEL_875;
                  }
                }
                break;
              case 5:
                v641 = v768;
                do
                {
                  v642 = __ldaxr(v641);
                  v643 = v642 - 1;
                }
                while (__stlxr(v643, v641));
                if (!v643)
                {
                  v632 = v768;
                  if (v768)
                  {
                    v644 = v768[1];
                    if (v644)
                    {
                      v645 = v768[2];
                      v646 = (void *)v768[1];
                      if (v645 != v644)
                      {
                        do
                          v645 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v645 - 32);
                        while (v645 != v644);
                        v646 = (void *)v632[1];
                      }
                      v632[2] = v644;
                      v635 = v646;
LABEL_875:
                      operator delete(v635);
                    }
LABEL_876:
                    v612 = v632;
                    v613 = 0x1020C405E66F15BLL;
                    goto LABEL_891;
                  }
                }
                break;
              case 9:
                v647 = v768;
                do
                {
                  v648 = __ldaxr(v647);
                  v649 = v648 - 1;
                }
                while (__stlxr(v649, v647));
                if (!v649)
                {
                  v650 = v768;
                  if (v768)
                  {
                    v651 = (void *)v768[7];
                    if (v651)
                    {
                      v768[8] = v651;
                      operator delete(v651);
                    }
                    v652 = (void *)v650[4];
                    if (v652)
                    {
                      v650[5] = v652;
                      operator delete(v652);
                    }
                    v653 = (std::__shared_weak_count *)v650[3];
                    if (v653)
                    {
                      v654 = (unint64_t *)&v653->__shared_owners_;
                      do
                        v655 = __ldaxr(v654);
                      while (__stlxr(v655 - 1, v654));
                      if (!v655)
                      {
                        ((void (*)(std::__shared_weak_count *))v653->__on_zero_shared)(v653);
                        std::__shared_weak_count::__release_weak(v653);
                      }
                    }
                    v612 = v650;
                    v613 = 0x10B0C4002311774;
LABEL_891:
                    MEMORY[0x19401CD90](v612, v613);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            *(_QWORD *)v756[1] = 0;
            v606[8] = 0;
            v607 = v768;
            v606[8] = (char)v769;
            *(_QWORD *)v606 = v607;
            v606[8] = (char)v769;
            v756[1] = v606 + 16;
          }
          v743 = 0;
          v744 = 0;
          v745 = 0;
          __p = 0;
          v741 = 0;
          v742 = 0;
          nitro::ndarray<int>::ndarray((uint64_t)&v768, (uint64_t)&v746, (char **)&v743, (char **)&__p, 0);
          v774 = 0;
          v775 = 9;
          v656 = (_QWORD *)operator new();
          *v656 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v656 + 1));
          v774 = v656;
          *v656 = 1;
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v761, &v768);
          v657 = v774;
          *((_DWORD *)v774 + 2) = (_DWORD)v761;
          v658 = v762;
          v762 = 0uLL;
          v659 = (std::__shared_weak_count *)v657[3];
          *((_OWORD *)v657 + 1) = v658;
          if (v659)
          {
            v660 = (unint64_t *)&v659->__shared_owners_;
            do
              v661 = __ldaxr(v660);
            while (__stlxr(v661 - 1, v660));
            if (!v661)
            {
              ((void (*)(std::__shared_weak_count *))v659->__on_zero_shared)(v659);
              std::__shared_weak_count::__release_weak(v659);
            }
          }
          v662 = (void *)v657[4];
          if (v662)
          {
            v657[5] = v662;
            operator delete(v662);
            v657[4] = 0;
            v657[5] = 0;
            v657[6] = 0;
          }
          v663 = (void *)v657[7];
          *((_OWORD *)v657 + 2) = v763;
          v657[6] = v764;
          v763 = 0uLL;
          v764 = 0;
          if (v663)
          {
            v657[8] = v663;
            operator delete(v663);
            v657[7] = 0;
            v657[8] = 0;
            v657[9] = 0;
            v663 = (void *)v763;
          }
          *(_OWORD *)(v657 + 7) = v765;
          v657[9] = v766;
          v765 = 0uLL;
          v766 = 0;
          v657[10] = v767;
          if (v663)
          {
            *((_QWORD *)&v763 + 1) = v663;
            operator delete(v663);
          }
          v664 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
          if (*((_QWORD *)&v762 + 1))
          {
            v665 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
            do
              v666 = __ldaxr(v665);
            while (__stlxr(v666 - 1, v665));
            if (!v666)
            {
              ((void (*)(std::__shared_weak_count *))v664->__on_zero_shared)(v664);
              std::__shared_weak_count::__release_weak(v664);
            }
          }
          v667 = (char *)v756[1];
          if (v756[1] >= v757)
          {
            v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v774);
            switch(v775)
            {
              case 2:
                v669 = v774;
                do
                {
                  v670 = __ldaxr(v669);
                  v671 = v670 - 1;
                }
                while (__stlxr(v671, v669));
                if (!v671)
                {
                  v672 = v774;
                  if (v774)
                  {
                    if (*((char *)v774 + 31) < 0)
                      operator delete((void *)v774[1]);
                    v673 = v672;
                    v674 = 0x1012C404EF22A49;
                    goto LABEL_959;
                  }
                }
                break;
              case 3:
                v682 = v774;
                do
                {
                  v683 = __ldaxr(v682);
                  v684 = v683 - 1;
                }
                while (__stlxr(v684, v682));
                if (!v684)
                {
                  v685 = v774;
                  if (v774)
                  {
                    v686 = (void *)v774[1];
                    if (v686)
                    {
                      v774[2] = v686;
                      operator delete(v686);
                    }
                    v673 = v685;
                    v674 = 0x1080C409938AC02;
                    goto LABEL_959;
                  }
                }
                break;
              case 4:
                v675 = v774;
                do
                {
                  v676 = __ldaxr(v675);
                  v677 = v676 - 1;
                }
                while (__stlxr(v677, v675));
                if (!v677)
                {
                  v678 = v774;
                  if (v774)
                  {
                    v679 = v774[1];
                    if (!v679)
                      goto LABEL_944;
                    v680 = v774[2];
                    v681 = (void *)v774[1];
                    if (v680 != v679)
                    {
                      do
                      {
                        v680 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v678 + 3), v680);
                      }
                      while (v680 != v679);
                      v681 = (void *)v678[1];
                    }
                    v678[2] = v679;
                    goto LABEL_943;
                  }
                }
                break;
              case 5:
                v687 = v774;
                do
                {
                  v688 = __ldaxr(v687);
                  v689 = v688 - 1;
                }
                while (__stlxr(v689, v687));
                if (!v689)
                {
                  v678 = v774;
                  if (v774)
                  {
                    v690 = v774[1];
                    if (v690)
                    {
                      v691 = v774[2];
                      v692 = (void *)v774[1];
                      if (v691 != v690)
                      {
                        do
                          v691 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v691 - 32);
                        while (v691 != v690);
                        v692 = (void *)v678[1];
                      }
                      v678[2] = v690;
                      v681 = v692;
LABEL_943:
                      operator delete(v681);
                    }
LABEL_944:
                    v673 = v678;
                    v674 = 0x1020C405E66F15BLL;
                    goto LABEL_959;
                  }
                }
                break;
              case 9:
                v693 = v774;
                do
                {
                  v694 = __ldaxr(v693);
                  v695 = v694 - 1;
                }
                while (__stlxr(v695, v693));
                if (!v695)
                {
                  v696 = v774;
                  if (v774)
                  {
                    v697 = (void *)v774[7];
                    if (v697)
                    {
                      v774[8] = v697;
                      operator delete(v697);
                    }
                    v698 = (void *)v696[4];
                    if (v698)
                    {
                      v696[5] = v698;
                      operator delete(v698);
                    }
                    v699 = (std::__shared_weak_count *)v696[3];
                    if (v699)
                    {
                      v700 = (unint64_t *)&v699->__shared_owners_;
                      do
                        v701 = __ldaxr(v700);
                      while (__stlxr(v701 - 1, v700));
                      if (!v701)
                      {
                        ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
                        std::__shared_weak_count::__release_weak(v699);
                      }
                    }
                    v673 = v696;
                    v674 = 0x10B0C4002311774;
LABEL_959:
                    MEMORY[0x19401CD90](v673, v674);
                  }
                }
                break;
              default:
                break;
            }
          }
          else
          {
            *(_QWORD *)v756[1] = 0;
            v667[8] = 0;
            v668 = v774;
            v667[8] = v775;
            *(_QWORD *)v667 = v668;
            v667[8] = v775;
            v756[1] = v667 + 16;
          }
          v774 = 0;
          v775 = 0;
          if (v772)
          {
            v773 = v772;
            operator delete(v772);
          }
          if (v770)
          {
            v771 = v770;
            operator delete(v770);
          }
          v702 = v769;
          if (v769)
          {
            v703 = (unint64_t *)&v769->__shared_owners_;
            do
              v704 = __ldaxr(v703);
            while (__stlxr(v704 - 1, v703));
            if (!v704)
            {
              ((void (*)(std::__shared_weak_count *))v702->__on_zero_shared)(v702);
              std::__shared_weak_count::__release_weak(v702);
            }
          }
          if (__p)
          {
            v741 = __p;
            operator delete(__p);
          }
          if (v743)
          {
            v744 = v743;
            operator delete(v743);
          }
          *(_OWORD *)a3 = *(_OWORD *)v756;
          *(_QWORD *)(a3 + 16) = v757;
          v756[0] = 0;
          v756[1] = 0;
          v757 = 0;
          if (v746)
          {
            v747 = (char *)v746;
            operator delete(v746);
          }
          if (v753)
          {
            v754 = v753;
            operator delete(v753);
          }
          if (v751)
          {
            v752 = v751;
            operator delete(v751);
          }
          v705 = v750;
          if (v750)
          {
            v706 = (unint64_t *)&v750->__shared_owners_;
            do
              v707 = __ldaxr(v706);
            while (__stlxr(v707 - 1, v706));
            if (!v707)
            {
              ((void (*)(std::__shared_weak_count *))v705->__on_zero_shared)(v705);
              std::__shared_weak_count::__release_weak(v705);
            }
          }
          v708 = (char *)v756[0];
          if (v756[0])
          {
            v709 = (char *)v756[1];
            v710 = v756[0];
            if (v756[1] != v756[0])
            {
              do
              {
                v709 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v757, (uint64_t)v709);
              }
              while (v709 != v708);
              v710 = v756[0];
            }
            v756[1] = v708;
            operator delete(v710);
          }
          if (v758)
          {
            v759 = (float *)v758;
            operator delete(v758);
          }
          if (v730)
          {
            v731 = v730;
            operator delete(v730);
          }
          if (v728)
          {
            v729 = (char *)v728;
            operator delete(v728);
          }
          v351 = v727;
          if (v727)
          {
            v711 = (unint64_t *)&v727->__shared_owners_;
            do
              v353 = __ldaxr(v711);
            while (__stlxr(v353 - 1, v711));
LABEL_998:
            if (!v353)
            {
              ((void (*)(std::__shared_weak_count *))v351->__on_zero_shared)(v351);
              std::__shared_weak_count::__release_weak(v351);
            }
            return;
          }
          return;
        }
      }
      v586 = v749;
      v587 = v755;
      if ((unint64_t)a2 <= 1)
        v588 = 1;
      else
        v588 = a2;
      if (v588 >= 0x10)
      {
        v589 = 0;
        v614 = v749 + 4 * v755;
        v615 = v749 + 4 * v588 + 4 * v755;
        v616 = (char *)(v172 + 1);
        v617 = (float32x4_t *)&v172[2 * v588];
        v619 = v614 < (unint64_t)v617 && (unint64_t)v616 < v615;
        _CF = v585 >= v617;
        v620 = &v585->i8[4 * v588];
        v622 = !_CF && v616 < v620;
        if (((unint64_t)v585 >= v615 || v614 >= (unint64_t)v620) && !v619 && (v622 & 1) == 0)
        {
          v589 = v588 & 0xFFFFFFFFFFFFFFF8;
          v624 = v172 + 8;
          v625 = (int32x4_t *)(v749 + 4 * v755 + 16);
          v626 = v585 + 1;
          v627 = v588 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v628 = v624 - 8;
            v779 = vld2q_f32(v628);
            v782 = vld2q_f32(v624);
            v625[-1] = vcvtq_s32_f32(v779.val[0]);
            *v625 = vcvtq_s32_f32(v782.val[0]);
            v626[-1] = v779.val[1];
            *v626 = v782.val[1];
            v624 += 16;
            v625 += 2;
            v626 += 2;
            v627 -= 8;
          }
          while (v627);
          if (v588 == v589)
            goto LABEL_801;
        }
      }
      else
      {
        v589 = 0;
      }
      v590 = v588 - v589;
      v591 = &v585->f32[v589];
      v592 = &v172[2 * v589 + 1];
      v593 = (_DWORD *)(v586 + 4 * (v589 + v587));
      do
      {
        *v593++ = (int)*(v592 - 1);
        v594 = *v592;
        v592 += 2;
        *v591++ = v594;
        --v590;
      }
      while (v590);
      goto LABEL_801;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v733, (uint64_t)a1);
      if (v739)
        goto LABEL_595;
      v14 = v736 - (_BYTE *)v735;
      if (v736 == v735)
        goto LABEL_596;
      v15 = v733;
      if (!v733)
        goto LABEL_62;
      if ((unint64_t)(v14 - 8) < 8)
      {
        v15 = 1;
        v16 = (char *)v735;
        do
        {
LABEL_61:
          v72 = *(_QWORD *)v16;
          v16 += 8;
          v15 *= v72;
        }
        while (v16 != v736);
        goto LABEL_62;
      }
      v67 = ((unint64_t)(v14 - 8) >> 3) + 1;
      v16 = (char *)v735 + 8 * (v67 & 0x3FFFFFFFFFFFFFFELL);
      v68 = (char *)v735 + 8;
      v69 = 1;
      v70 = v67 & 0x3FFFFFFFFFFFFFFELL;
      v71 = 1;
      do
      {
        v69 *= *(v68 - 1);
        v71 *= *v68;
        v68 += 2;
        v70 -= 2;
      }
      while (v70);
      v15 = v71 * v69;
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_61;
LABEL_62:
      v73 = v14 >> 3;
      if ((unint64_t)(v14 >> 3) <= 1)
        v73 = 1;
      if (v73 < 2)
      {
        v74 = 0;
        v75 = 0;
LABEL_69:
        v81 = v73 - v74;
        v82 = 8 * v74;
        v83 = (uint64_t *)((char *)v737 + v82);
        v84 = (uint64_t *)((char *)v735 + v82);
        do
        {
          v85 = *v84++;
          v86 = v85 - 1;
          v87 = *v83++;
          v75 += v87 * v86;
          --v81;
        }
        while (v81);
        goto LABEL_71;
      }
      v76 = 0;
      v77 = 0;
      v74 = v73 & 0xFFFFFFFFFFFFFFFELL;
      v78 = (char *)v735 + 8;
      v79 = (char *)v737 + 8;
      v80 = v73 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v76 += *(v79 - 1) * (*(v78 - 1) - 1);
        v77 += *v79 * (*v78 - 1);
        v78 += 2;
        v79 += 2;
        v80 -= 2;
      }
      while (v80);
      v75 = v77 + v76;
      if (v73 != v74)
        goto LABEL_69;
LABEL_71:
      if (v15 != v75 + 1)
LABEL_595:
        nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
      if (v736 == v735 || (v88 = v733) == 0)
      {
LABEL_596:
        v165 = 0;
        v155 = 0;
        v152 = 0;
        v758 = 0;
        v759 = 0;
        v760 = 0;
        if (!a2)
          goto LABEL_598;
        goto LABEL_597;
      }
      v89 = v736 - (_BYTE *)v735 - 8;
      if (v89 < 8)
      {
        v90 = 1;
        v91 = (char *)v735;
        do
        {
LABEL_125:
          v151 = *(_QWORD *)v91;
          v91 += 8;
          v90 *= v151;
        }
        while (v91 != v736);
        goto LABEL_126;
      }
      v146 = (v89 >> 3) + 1;
      v91 = (char *)v735 + 8 * (v146 & 0x3FFFFFFFFFFFFFFELL);
      v147 = (char *)v735 + 8;
      v148 = 1;
      v149 = v146 & 0x3FFFFFFFFFFFFFFELL;
      v150 = 1;
      do
      {
        v148 *= *(v147 - 1);
        v150 *= *v147;
        v147 += 2;
        v149 -= 2;
      }
      while (v149);
      v90 = v150 * v148;
      if (v146 != (v146 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_125;
LABEL_126:
      v758 = 0;
      v759 = 0;
      v760 = 0;
      if (v90)
      {
        if (v90 >> 61)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v152 = (float *)operator new(8 * v90);
        v758 = v152;
        v760 = &v152[2 * v90];
        bzero(v152, 8 * v90);
        v155 = (uint64_t)&v152[2 * v90];
        v759 = (float *)v155;
        v156 = (uint64_t)(8 * v90) >> 3;
        if (v156 <= 1)
          v156 = 1;
        if (v156 < 4
          || ((v157 = 2 * (v156 - 1),
               v158 = (char *)&v152[v157],
               v159 = (unint64_t)&v152[v157 + 1],
               v158 >= (char *)v152)
            ? (v160 = v159 >= (unint64_t)(v152 + 1))
            : (v160 = 0),
              v160 ? (_ZF = (v156 - 1) >> 61 == 0) : (_ZF = 0),
              !_ZF
           || ((unint64_t)v152 < v88 + v156 ? (v162 = v88 >= (unint64_t)&v152[2 * v156]) : (v162 = 1),
               !v162)))
        {
          v163 = 0;
          goto LABEL_147;
        }
        if (v156 >= 0x10)
        {
          v211 = (int32x4_t)xmmword_191A92A50;
          v154 = (int32x4_t)xmmword_191A92A60;
          v212 = (int32x4_t)xmmword_191A92A40;
          v213 = (int32x4_t)xmmword_191A761E0;
          v163 = v156 & 0xFFFFFFFFFFFFFFF0;
          v214.i64[0] = 0x1000000010;
          v214.i64[1] = 0x1000000010;
          v215 = v156 & 0xFFFFFFFFFFFFFFF0;
          v216 = (int8x16_t *)v88;
          v217 = v152;
          do
          {
            v218 = *v216++;
            v219 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_191A74190));
            v220 = v217;
            vst2q_f32(v220, *(float32x4x2_t *)(&v213 - 1));
            v220 += 8;
            v221 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_191A741A0));
            vst2q_f32(v220, *(float32x4x2_t *)(&v212 - 1));
            v222 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_191A741B0));
            v223 = v217 + 16;
            vst2q_f32(v223, *(float32x4x2_t *)(&v154 - 1));
            v153 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v218, (int8x16_t)xmmword_191A741C0));
            v224 = v217 + 24;
            vst2q_f32(v224, *(float32x4x2_t *)v153.f32);
            v213 = vaddq_s32(v213, v214);
            v212 = vaddq_s32(v212, v214);
            v154 = vaddq_s32(v154, v214);
            v211 = vaddq_s32(v211, v214);
            v217 += 32;
            v215 -= 16;
          }
          while (v215);
          if (v156 == v163)
            goto LABEL_149;
          if ((v156 & 0xC) == 0)
          {
LABEL_147:
            v164 = &v152[2 * v163 + 1];
            do
            {
              v153.i8[0] = *(_BYTE *)(v88 + v163);
              v153.f32[0] = (float)v153.u32[0];
              *(v164 - 1) = v153.f32[0];
              *(_DWORD *)v164 = v163;
              v164 += 2;
              ++v163;
            }
            while (v156 != v163);
            goto LABEL_149;
          }
        }
        else
        {
          v163 = 0;
        }
        v225 = v163;
        v163 = v156 & 0xFFFFFFFFFFFFFFFCLL;
        v226 = (int32x4_t)vorrq_s8((int8x16_t)vdupq_n_s32(v225), (int8x16_t)xmmword_191A761E0);
        v227 = &v152[2 * v225];
        v228 = (__int32 *)(v88 + v225);
        v229 = v225 - (v156 & 0xFFFFFFFFFFFFFFFCLL);
        v230.i64[0] = 0x400000004;
        v230.i64[1] = 0x400000004;
        do
        {
          v231 = *v228++;
          v154.i32[0] = v231;
          v154 = (int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v154.i8));
          v153 = vcvtq_f32_u32((uint32x4_t)v154);
          vst2q_f32(v227, *(float32x4x2_t *)v153.f32);
          v227 += 8;
          v226 = vaddq_s32(v226, v230);
          v229 += 4;
        }
        while (v229);
        if (v156 != v163)
          goto LABEL_147;
LABEL_149:
        v165 = v152;
        if (!a2)
          goto LABEL_598;
        goto LABEL_597;
      }
      v165 = 0;
      v155 = 0;
      v152 = 0;
      if (!a2)
        goto LABEL_598;
LABEL_597:
      std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v165, &v152[2 * a2], v155, (uint64_t)&v761);
LABEL_598:
      v756[0] = 0;
      v756[1] = 0;
      v757 = 0;
      v474 = (uint64_t *)operator new(8uLL);
      v761 = v474;
      *v474 = a2;
      *(_QWORD *)&v762 = v474 + 1;
      *((_QWORD *)&v762 + 1) = v474 + 1;
      nitro::ndarray<unsigned char>::init_from_shape(&v761, &v749);
      if (v761)
      {
        *(_QWORD *)&v762 = v761;
        operator delete(v761);
      }
      v747 = 0;
      v748 = 0;
      v746 = 0;
      if (v759 != v152)
      {
        v475 = (char *)v759 - (char *)v165;
        if ((char *)v759 - (char *)v165 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v476 = (char *)operator new(v475 >> 1);
        v746 = v476;
        v748 = &v476[4 * ((uint64_t)v475 >> 3)];
        bzero(v476, v475 >> 1);
        v747 = &v476[v475 >> 1];
      }
      if (a2)
      {
        v477 = 0;
        if ((unint64_t)a2 <= 1)
          v478 = 1;
        else
          v478 = a2;
        v479 = v152 + 1;
        do
        {
          *(_BYTE *)(v749 + v755 + v477) = (int)*(v479 - 1);
          v480 = *v479;
          v479 += 2;
          *((float *)v746 + v477++) = v480;
        }
        while (v478 != v477);
      }
      v768 = 0;
      LOBYTE(v769) = 9;
      v481 = (_QWORD *)operator new();
      *v481 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v481 + 1));
      v768 = v481;
      *v481 = 1;
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&v761, &v749);
      v482 = v768;
      *((_DWORD *)v768 + 2) = (_DWORD)v761;
      v483 = v762;
      v762 = 0uLL;
      v484 = (std::__shared_weak_count *)v482[3];
      *((_OWORD *)v482 + 1) = v483;
      if (v484)
      {
        v485 = (unint64_t *)&v484->__shared_owners_;
        do
          v486 = __ldaxr(v485);
        while (__stlxr(v486 - 1, v485));
        if (!v486)
        {
          ((void (*)(std::__shared_weak_count *))v484->__on_zero_shared)(v484);
          std::__shared_weak_count::__release_weak(v484);
        }
      }
      v487 = (void *)v482[4];
      if (v487)
      {
        v482[5] = v487;
        operator delete(v487);
        v482[4] = 0;
        v482[5] = 0;
        v482[6] = 0;
      }
      v488 = (void *)v482[7];
      *((_OWORD *)v482 + 2) = v763;
      v482[6] = v764;
      v763 = 0uLL;
      v764 = 0;
      if (v488)
      {
        v482[8] = v488;
        operator delete(v488);
        v482[7] = 0;
        v482[8] = 0;
        v482[9] = 0;
        v488 = (void *)v763;
      }
      *(_OWORD *)(v482 + 7) = v765;
      v482[9] = v766;
      v765 = 0uLL;
      v766 = 0;
      v482[10] = v767;
      if (v488)
      {
        *((_QWORD *)&v763 + 1) = v488;
        operator delete(v488);
      }
      v489 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
      if (*((_QWORD *)&v762 + 1))
      {
        v490 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
        do
          v491 = __ldaxr(v490);
        while (__stlxr(v491 - 1, v490));
        if (!v491)
        {
          ((void (*)(std::__shared_weak_count *))v489->__on_zero_shared)(v489);
          std::__shared_weak_count::__release_weak(v489);
        }
      }
      v492 = (char *)v756[1];
      if (v756[1] >= v757)
      {
        v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v768);
        switch((char)v769)
        {
          case 2:
            v494 = v768;
            do
            {
              v495 = __ldaxr(v494);
              v496 = v495 - 1;
            }
            while (__stlxr(v496, v494));
            if (!v496)
            {
              v497 = v768;
              if (v768)
              {
                if (*((char *)v768 + 31) < 0)
                  operator delete((void *)v768[1]);
                v498 = v497;
                v499 = 0x1012C404EF22A49;
                goto LABEL_676;
              }
            }
            break;
          case 3:
            v507 = v768;
            do
            {
              v508 = __ldaxr(v507);
              v509 = v508 - 1;
            }
            while (__stlxr(v509, v507));
            if (!v509)
            {
              v510 = v768;
              if (v768)
              {
                v511 = (void *)v768[1];
                if (v511)
                {
                  v768[2] = v511;
                  operator delete(v511);
                }
                v498 = v510;
                v499 = 0x1080C409938AC02;
                goto LABEL_676;
              }
            }
            break;
          case 4:
            v500 = v768;
            do
            {
              v501 = __ldaxr(v500);
              v502 = v501 - 1;
            }
            while (__stlxr(v502, v500));
            if (!v502)
            {
              v503 = v768;
              if (v768)
              {
                v504 = v768[1];
                if (!v504)
                  goto LABEL_661;
                v505 = v768[2];
                v506 = (void *)v768[1];
                if (v505 != v504)
                {
                  do
                  {
                    v505 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v503 + 3), v505);
                  }
                  while (v505 != v504);
                  v506 = (void *)v503[1];
                }
                v503[2] = v504;
                goto LABEL_660;
              }
            }
            break;
          case 5:
            v512 = v768;
            do
            {
              v513 = __ldaxr(v512);
              v514 = v513 - 1;
            }
            while (__stlxr(v514, v512));
            if (!v514)
            {
              v503 = v768;
              if (v768)
              {
                v515 = v768[1];
                if (v515)
                {
                  v516 = v768[2];
                  v517 = (void *)v768[1];
                  if (v516 != v515)
                  {
                    do
                      v516 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v516 - 32);
                    while (v516 != v515);
                    v517 = (void *)v503[1];
                  }
                  v503[2] = v515;
                  v506 = v517;
LABEL_660:
                  operator delete(v506);
                }
LABEL_661:
                v498 = v503;
                v499 = 0x1020C405E66F15BLL;
                goto LABEL_676;
              }
            }
            break;
          case 9:
            v518 = v768;
            do
            {
              v519 = __ldaxr(v518);
              v520 = v519 - 1;
            }
            while (__stlxr(v520, v518));
            if (!v520)
            {
              v521 = v768;
              if (v768)
              {
                v522 = (void *)v768[7];
                if (v522)
                {
                  v768[8] = v522;
                  operator delete(v522);
                }
                v523 = (void *)v521[4];
                if (v523)
                {
                  v521[5] = v523;
                  operator delete(v523);
                }
                v524 = (std::__shared_weak_count *)v521[3];
                if (v524)
                {
                  v525 = (unint64_t *)&v524->__shared_owners_;
                  do
                    v526 = __ldaxr(v525);
                  while (__stlxr(v526 - 1, v525));
                  if (!v526)
                  {
                    ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
                    std::__shared_weak_count::__release_weak(v524);
                  }
                }
                v498 = v521;
                v499 = 0x10B0C4002311774;
LABEL_676:
                MEMORY[0x19401CD90](v498, v499);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        *(_QWORD *)v756[1] = 0;
        v492[8] = 0;
        v493 = v768;
        v492[8] = (char)v769;
        *(_QWORD *)v492 = v493;
        v492[8] = (char)v769;
        v756[1] = v492 + 16;
      }
      v743 = 0;
      v744 = 0;
      v745 = 0;
      __p = 0;
      v741 = 0;
      v742 = 0;
      nitro::ndarray<int>::ndarray((uint64_t)&v768, (uint64_t)&v746, (char **)&v743, (char **)&__p, 0);
      v774 = 0;
      v775 = 9;
      v527 = (_QWORD *)operator new();
      *v527 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v527 + 1));
      v774 = v527;
      *v527 = 1;
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v761, &v768);
      v528 = v774;
      *((_DWORD *)v774 + 2) = (_DWORD)v761;
      v529 = v762;
      v762 = 0uLL;
      v530 = (std::__shared_weak_count *)v528[3];
      *((_OWORD *)v528 + 1) = v529;
      if (v530)
      {
        v531 = (unint64_t *)&v530->__shared_owners_;
        do
          v532 = __ldaxr(v531);
        while (__stlxr(v532 - 1, v531));
        if (!v532)
        {
          ((void (*)(std::__shared_weak_count *))v530->__on_zero_shared)(v530);
          std::__shared_weak_count::__release_weak(v530);
        }
      }
      v533 = (void *)v528[4];
      if (v533)
      {
        v528[5] = v533;
        operator delete(v533);
        v528[4] = 0;
        v528[5] = 0;
        v528[6] = 0;
      }
      v534 = (void *)v528[7];
      *((_OWORD *)v528 + 2) = v763;
      v528[6] = v764;
      v763 = 0uLL;
      v764 = 0;
      if (v534)
      {
        v528[8] = v534;
        operator delete(v534);
        v528[7] = 0;
        v528[8] = 0;
        v528[9] = 0;
        v534 = (void *)v763;
      }
      *(_OWORD *)(v528 + 7) = v765;
      v528[9] = v766;
      v765 = 0uLL;
      v766 = 0;
      v528[10] = v767;
      if (v534)
      {
        *((_QWORD *)&v763 + 1) = v534;
        operator delete(v534);
      }
      v535 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
      if (*((_QWORD *)&v762 + 1))
      {
        v536 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
        do
          v537 = __ldaxr(v536);
        while (__stlxr(v537 - 1, v536));
        if (!v537)
        {
          ((void (*)(std::__shared_weak_count *))v535->__on_zero_shared)(v535);
          std::__shared_weak_count::__release_weak(v535);
        }
      }
      v538 = (char *)v756[1];
      if (v756[1] >= v757)
      {
        v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v774);
        switch(v775)
        {
          case 2:
            v540 = v774;
            do
            {
              v541 = __ldaxr(v540);
              v542 = v541 - 1;
            }
            while (__stlxr(v542, v540));
            if (!v542)
            {
              v543 = v774;
              if (v774)
              {
                if (*((char *)v774 + 31) < 0)
                  operator delete((void *)v774[1]);
                v544 = v543;
                v545 = 0x1012C404EF22A49;
                goto LABEL_744;
              }
            }
            break;
          case 3:
            v553 = v774;
            do
            {
              v554 = __ldaxr(v553);
              v555 = v554 - 1;
            }
            while (__stlxr(v555, v553));
            if (!v555)
            {
              v556 = v774;
              if (v774)
              {
                v557 = (void *)v774[1];
                if (v557)
                {
                  v774[2] = v557;
                  operator delete(v557);
                }
                v544 = v556;
                v545 = 0x1080C409938AC02;
                goto LABEL_744;
              }
            }
            break;
          case 4:
            v546 = v774;
            do
            {
              v547 = __ldaxr(v546);
              v548 = v547 - 1;
            }
            while (__stlxr(v548, v546));
            if (!v548)
            {
              v549 = v774;
              if (v774)
              {
                v550 = v774[1];
                if (!v550)
                  goto LABEL_729;
                v551 = v774[2];
                v552 = (void *)v774[1];
                if (v551 != v550)
                {
                  do
                  {
                    v551 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v549 + 3), v551);
                  }
                  while (v551 != v550);
                  v552 = (void *)v549[1];
                }
                v549[2] = v550;
                goto LABEL_728;
              }
            }
            break;
          case 5:
            v558 = v774;
            do
            {
              v559 = __ldaxr(v558);
              v560 = v559 - 1;
            }
            while (__stlxr(v560, v558));
            if (!v560)
            {
              v549 = v774;
              if (v774)
              {
                v561 = v774[1];
                if (v561)
                {
                  v562 = v774[2];
                  v563 = (void *)v774[1];
                  if (v562 != v561)
                  {
                    do
                      v562 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v562 - 32);
                    while (v562 != v561);
                    v563 = (void *)v549[1];
                  }
                  v549[2] = v561;
                  v552 = v563;
LABEL_728:
                  operator delete(v552);
                }
LABEL_729:
                v544 = v549;
                v545 = 0x1020C405E66F15BLL;
                goto LABEL_744;
              }
            }
            break;
          case 9:
            v564 = v774;
            do
            {
              v565 = __ldaxr(v564);
              v566 = v565 - 1;
            }
            while (__stlxr(v566, v564));
            if (!v566)
            {
              v567 = v774;
              if (v774)
              {
                v568 = (void *)v774[7];
                if (v568)
                {
                  v774[8] = v568;
                  operator delete(v568);
                }
                v569 = (void *)v567[4];
                if (v569)
                {
                  v567[5] = v569;
                  operator delete(v569);
                }
                v570 = (std::__shared_weak_count *)v567[3];
                if (v570)
                {
                  v571 = (unint64_t *)&v570->__shared_owners_;
                  do
                    v572 = __ldaxr(v571);
                  while (__stlxr(v572 - 1, v571));
                  if (!v572)
                  {
                    ((void (*)(std::__shared_weak_count *))v570->__on_zero_shared)(v570);
                    std::__shared_weak_count::__release_weak(v570);
                  }
                }
                v544 = v567;
                v545 = 0x10B0C4002311774;
LABEL_744:
                MEMORY[0x19401CD90](v544, v545);
              }
            }
            break;
          default:
            break;
        }
      }
      else
      {
        *(_QWORD *)v756[1] = 0;
        v538[8] = 0;
        v539 = v774;
        v538[8] = v775;
        *(_QWORD *)v538 = v539;
        v538[8] = v775;
        v756[1] = v538 + 16;
      }
      v774 = 0;
      v775 = 0;
      if (v772)
      {
        v773 = v772;
        operator delete(v772);
      }
      if (v770)
      {
        v771 = v770;
        operator delete(v770);
      }
      v573 = v769;
      if (v769)
      {
        v574 = (unint64_t *)&v769->__shared_owners_;
        do
          v575 = __ldaxr(v574);
        while (__stlxr(v575 - 1, v574));
        if (!v575)
        {
          ((void (*)(std::__shared_weak_count *))v573->__on_zero_shared)(v573);
          std::__shared_weak_count::__release_weak(v573);
        }
      }
      if (__p)
      {
        v741 = __p;
        operator delete(__p);
      }
      if (v743)
      {
        v744 = v743;
        operator delete(v743);
      }
      *(_OWORD *)a3 = *(_OWORD *)v756;
      *(_QWORD *)(a3 + 16) = v757;
      v756[0] = 0;
      v756[1] = 0;
      v757 = 0;
      if (v746)
      {
        v747 = (char *)v746;
        operator delete(v746);
      }
      if (v753)
      {
        v754 = v753;
        operator delete(v753);
      }
      if (v751)
      {
        v752 = v751;
        operator delete(v751);
      }
      v576 = v750;
      if (v750)
      {
        v577 = (unint64_t *)&v750->__shared_owners_;
        do
          v578 = __ldaxr(v577);
        while (__stlxr(v578 - 1, v577));
        if (!v578)
        {
          ((void (*)(std::__shared_weak_count *))v576->__on_zero_shared)(v576);
          std::__shared_weak_count::__release_weak(v576);
        }
      }
      v579 = (char *)v756[0];
      if (v756[0])
      {
        v580 = (char *)v756[1];
        v581 = v756[0];
        if (v756[1] != v756[0])
        {
          do
          {
            v580 -= 16;
            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v757, (uint64_t)v580);
          }
          while (v580 != v579);
          v581 = v756[0];
        }
        v756[1] = v579;
        operator delete(v581);
      }
      if (v758)
      {
        v759 = (float *)v758;
        operator delete(v758);
      }
      if (v737)
      {
        v738 = v737;
        operator delete(v737);
      }
      if (v735)
      {
        v736 = (char *)v735;
        operator delete(v735);
      }
      v351 = v734;
      if (v734)
      {
        v582 = (unint64_t *)&v734->__shared_owners_;
        do
          v353 = __ldaxr(v582);
        while (__stlxr(v353 - 1, v582));
        goto LABEL_998;
      }
      return;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v712, (uint64_t)a1);
      if (v718)
        goto LABEL_202;
      v8 = v715 - (_BYTE *)v714;
      if (v715 == v714)
        goto LABEL_203;
      v9 = v712;
      if (!v712)
        goto LABEL_26;
      if ((unint64_t)(v8 - 8) < 8)
      {
        v9 = 1;
        v10 = (char *)v714;
        do
        {
LABEL_25:
          v22 = *(_QWORD *)v10;
          v10 += 8;
          v9 *= v22;
        }
        while (v10 != v715);
        goto LABEL_26;
      }
      v17 = ((unint64_t)(v8 - 8) >> 3) + 1;
      v10 = (char *)v714 + 8 * (v17 & 0x3FFFFFFFFFFFFFFELL);
      v18 = (char *)v714 + 8;
      v19 = 1;
      v20 = v17 & 0x3FFFFFFFFFFFFFFELL;
      v21 = 1;
      do
      {
        v19 *= *(v18 - 1);
        v21 *= *v18;
        v18 += 2;
        v20 -= 2;
      }
      while (v20);
      v9 = v21 * v19;
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_25;
LABEL_26:
      v23 = v8 >> 3;
      if ((unint64_t)(v8 >> 3) <= 1)
        v23 = 1;
      if (v23 >= 2)
      {
        v26 = 0;
        v27 = 0;
        v24 = v23 & 0xFFFFFFFFFFFFFFFELL;
        v28 = (char *)v714 + 8;
        v29 = (char *)v716 + 8;
        v30 = v23 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v26 += *(v29 - 1) * (*(v28 - 1) - 1);
          v27 += *v29 * (*v28 - 1);
          v28 += 2;
          v29 += 2;
          v30 -= 2;
        }
        while (v30);
        v25 = v27 + v26;
        if (v23 == v24)
        {
LABEL_35:
          if (v9 != v25 + 1)
LABEL_202:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          if (v715 == v714 || (v38 = v712) == 0)
          {
LABEL_203:
            v187 = 0;
            v124 = 0;
            v123 = 0;
            v758 = 0;
            v759 = 0;
            v760 = 0;
            if (!a2)
              goto LABEL_205;
            goto LABEL_204;
          }
          v39 = v715 - (_BYTE *)v714 - 8;
          if (v39 >= 8)
          {
            v117 = (v39 >> 3) + 1;
            v41 = (char *)v714 + 8 * (v117 & 0x3FFFFFFFFFFFFFFELL);
            v118 = (char *)v714 + 8;
            v119 = 1;
            v120 = v117 & 0x3FFFFFFFFFFFFFFELL;
            v121 = 1;
            do
            {
              v119 *= *(v118 - 1);
              v121 *= *v118;
              v118 += 2;
              v120 -= 2;
            }
            while (v120);
            v40 = v121 * v119;
            if (v117 == (v117 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_98:
              v758 = 0;
              v759 = 0;
              v760 = 0;
              if (!v40)
              {
                v187 = 0;
                v124 = 0;
                v123 = 0;
                if (!a2)
                {
LABEL_205:
                  v756[0] = 0;
                  v756[1] = 0;
                  v757 = 0;
                  v232 = (uint64_t *)operator new(8uLL);
                  v761 = v232;
                  *v232 = a2;
                  *(_QWORD *)&v762 = v232 + 1;
                  *((_QWORD *)&v762 + 1) = v232 + 1;
                  nitro::ndarray<float>::init_from_shape(&v761, &v749);
                  if (v761)
                  {
                    *(_QWORD *)&v762 = v761;
                    operator delete(v761);
                  }
                  v747 = 0;
                  v748 = 0;
                  v746 = 0;
                  if (v759 == v123)
                  {
                    v234 = 0;
                    if (!a2)
                      goto LABEL_221;
                  }
                  else
                  {
                    v233 = (char *)v759 - (char *)v187;
                    if ((char *)v759 - (char *)v187 < 0)
                      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                    v234 = (float32x4_t *)operator new(v233 >> 1);
                    v746 = v234;
                    v748 = &v234->i8[4 * ((uint64_t)v233 >> 3)];
                    bzero(v234, v233 >> 1);
                    v747 = (char *)v234 + (v233 >> 1);
                    if (!a2)
                    {
LABEL_221:
                      v768 = 0;
                      LOBYTE(v769) = 9;
                      v245 = (_QWORD *)operator new();
                      *v245 = 0;
                      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v245 + 1));
                      v768 = v245;
                      *v245 = 1;
                      nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&v761, &v749);
                      v246 = v768;
                      *((_DWORD *)v768 + 2) = (_DWORD)v761;
                      v247 = v762;
                      v762 = 0uLL;
                      v248 = (std::__shared_weak_count *)v246[3];
                      *((_OWORD *)v246 + 1) = v247;
                      if (v248)
                      {
                        v249 = (unint64_t *)&v248->__shared_owners_;
                        do
                          v250 = __ldaxr(v249);
                        while (__stlxr(v250 - 1, v249));
                        if (!v250)
                        {
                          ((void (*)(std::__shared_weak_count *))v248->__on_zero_shared)(v248);
                          std::__shared_weak_count::__release_weak(v248);
                        }
                      }
                      v251 = (void *)v246[4];
                      if (v251)
                      {
                        v246[5] = v251;
                        operator delete(v251);
                        v246[4] = 0;
                        v246[5] = 0;
                        v246[6] = 0;
                      }
                      v252 = (void *)v246[7];
                      *((_OWORD *)v246 + 2) = v763;
                      v246[6] = v764;
                      v763 = 0uLL;
                      v764 = 0;
                      if (v252)
                      {
                        v246[8] = v252;
                        operator delete(v252);
                        v246[7] = 0;
                        v246[8] = 0;
                        v246[9] = 0;
                        v252 = (void *)v763;
                      }
                      *(_OWORD *)(v246 + 7) = v765;
                      v246[9] = v766;
                      v765 = 0uLL;
                      v766 = 0;
                      v246[10] = v767;
                      if (v252)
                      {
                        *((_QWORD *)&v763 + 1) = v252;
                        operator delete(v252);
                      }
                      v253 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
                      if (*((_QWORD *)&v762 + 1))
                      {
                        v254 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
                        do
                          v255 = __ldaxr(v254);
                        while (__stlxr(v255 - 1, v254));
                        if (!v255)
                        {
                          ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
                          std::__shared_weak_count::__release_weak(v253);
                        }
                      }
                      v256 = (char *)v756[1];
                      if (v756[1] >= v757)
                      {
                        v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v768);
                        switch((char)v769)
                        {
                          case 2:
                            v258 = v768;
                            do
                            {
                              v259 = __ldaxr(v258);
                              v260 = v259 - 1;
                            }
                            while (__stlxr(v260, v258));
                            if (!v260)
                            {
                              v261 = v768;
                              if (v768)
                              {
                                if (*((char *)v768 + 31) < 0)
                                  operator delete((void *)v768[1]);
                                v262 = v261;
                                v263 = 0x1012C404EF22A49;
                                goto LABEL_292;
                              }
                            }
                            break;
                          case 3:
                            v276 = v768;
                            do
                            {
                              v277 = __ldaxr(v276);
                              v278 = v277 - 1;
                            }
                            while (__stlxr(v278, v276));
                            if (!v278)
                            {
                              v279 = v768;
                              if (v768)
                              {
                                v280 = (void *)v768[1];
                                if (v280)
                                {
                                  v768[2] = v280;
                                  operator delete(v280);
                                }
                                v262 = v279;
                                v263 = 0x1080C409938AC02;
                                goto LABEL_292;
                              }
                            }
                            break;
                          case 4:
                            v269 = v768;
                            do
                            {
                              v270 = __ldaxr(v269);
                              v271 = v270 - 1;
                            }
                            while (__stlxr(v271, v269));
                            if (!v271)
                            {
                              v272 = v768;
                              if (v768)
                              {
                                v273 = v768[1];
                                if (!v273)
                                  goto LABEL_277;
                                v274 = v768[2];
                                v275 = (void *)v768[1];
                                if (v274 != v273)
                                {
                                  do
                                  {
                                    v274 -= 16;
                                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v272 + 3), v274);
                                  }
                                  while (v274 != v273);
                                  v275 = (void *)v272[1];
                                }
                                v272[2] = v273;
                                goto LABEL_276;
                              }
                            }
                            break;
                          case 5:
                            v281 = v768;
                            do
                            {
                              v282 = __ldaxr(v281);
                              v283 = v282 - 1;
                            }
                            while (__stlxr(v283, v281));
                            if (!v283)
                            {
                              v272 = v768;
                              if (v768)
                              {
                                v284 = v768[1];
                                if (v284)
                                {
                                  v285 = v768[2];
                                  v286 = (void *)v768[1];
                                  if (v285 != v284)
                                  {
                                    do
                                      v285 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v285 - 32);
                                    while (v285 != v284);
                                    v286 = (void *)v272[1];
                                  }
                                  v272[2] = v284;
                                  v275 = v286;
LABEL_276:
                                  operator delete(v275);
                                }
LABEL_277:
                                v262 = v272;
                                v263 = 0x1020C405E66F15BLL;
                                goto LABEL_292;
                              }
                            }
                            break;
                          case 9:
                            v287 = v768;
                            do
                            {
                              v288 = __ldaxr(v287);
                              v289 = v288 - 1;
                            }
                            while (__stlxr(v289, v287));
                            if (!v289)
                            {
                              v290 = v768;
                              if (v768)
                              {
                                v291 = (void *)v768[7];
                                if (v291)
                                {
                                  v768[8] = v291;
                                  operator delete(v291);
                                }
                                v292 = (void *)v290[4];
                                if (v292)
                                {
                                  v290[5] = v292;
                                  operator delete(v292);
                                }
                                v293 = (std::__shared_weak_count *)v290[3];
                                if (v293)
                                {
                                  v294 = (unint64_t *)&v293->__shared_owners_;
                                  do
                                    v295 = __ldaxr(v294);
                                  while (__stlxr(v295 - 1, v294));
                                  if (!v295)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                                    std::__shared_weak_count::__release_weak(v293);
                                  }
                                }
                                v262 = v290;
                                v263 = 0x10B0C4002311774;
LABEL_292:
                                MEMORY[0x19401CD90](v262, v263);
                              }
                            }
                            break;
                          default:
                            break;
                        }
                      }
                      else
                      {
                        *(_QWORD *)v756[1] = 0;
                        v256[8] = 0;
                        v257 = v768;
                        v256[8] = (char)v769;
                        *(_QWORD *)v256 = v257;
                        v256[8] = (char)v769;
                        v756[1] = v256 + 16;
                      }
                      v743 = 0;
                      v744 = 0;
                      v745 = 0;
                      __p = 0;
                      v741 = 0;
                      v742 = 0;
                      nitro::ndarray<int>::ndarray((uint64_t)&v768, (uint64_t)&v746, (char **)&v743, (char **)&__p, 0);
                      v774 = 0;
                      v775 = 9;
                      v296 = (_QWORD *)operator new();
                      *v296 = 0;
                      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v296 + 1));
                      v774 = v296;
                      *v296 = 1;
                      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v761, &v768);
                      v297 = v774;
                      *((_DWORD *)v774 + 2) = (_DWORD)v761;
                      v298 = v762;
                      v762 = 0uLL;
                      v299 = (std::__shared_weak_count *)v297[3];
                      *((_OWORD *)v297 + 1) = v298;
                      if (v299)
                      {
                        v300 = (unint64_t *)&v299->__shared_owners_;
                        do
                          v301 = __ldaxr(v300);
                        while (__stlxr(v301 - 1, v300));
                        if (!v301)
                        {
                          ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
                          std::__shared_weak_count::__release_weak(v299);
                        }
                      }
                      v302 = (void *)v297[4];
                      if (v302)
                      {
                        v297[5] = v302;
                        operator delete(v302);
                        v297[4] = 0;
                        v297[5] = 0;
                        v297[6] = 0;
                      }
                      v303 = (void *)v297[7];
                      *((_OWORD *)v297 + 2) = v763;
                      v297[6] = v764;
                      v763 = 0uLL;
                      v764 = 0;
                      if (v303)
                      {
                        v297[8] = v303;
                        operator delete(v303);
                        v297[7] = 0;
                        v297[8] = 0;
                        v297[9] = 0;
                        v303 = (void *)v763;
                      }
                      *(_OWORD *)(v297 + 7) = v765;
                      v297[9] = v766;
                      v765 = 0uLL;
                      v766 = 0;
                      v297[10] = v767;
                      if (v303)
                      {
                        *((_QWORD *)&v763 + 1) = v303;
                        operator delete(v303);
                      }
                      v304 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
                      if (*((_QWORD *)&v762 + 1))
                      {
                        v305 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
                        do
                          v306 = __ldaxr(v305);
                        while (__stlxr(v306 - 1, v305));
                        if (!v306)
                        {
                          ((void (*)(std::__shared_weak_count *))v304->__on_zero_shared)(v304);
                          std::__shared_weak_count::__release_weak(v304);
                        }
                      }
                      v307 = (char *)v756[1];
                      if (v756[1] >= v757)
                      {
                        v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v774);
                        switch(v775)
                        {
                          case 2:
                            v309 = v774;
                            do
                            {
                              v310 = __ldaxr(v309);
                              v311 = v310 - 1;
                            }
                            while (__stlxr(v311, v309));
                            if (!v311)
                            {
                              v312 = v774;
                              if (v774)
                              {
                                if (*((char *)v774 + 31) < 0)
                                  operator delete((void *)v774[1]);
                                v313 = v312;
                                v314 = 0x1012C404EF22A49;
                                goto LABEL_360;
                              }
                            }
                            break;
                          case 3:
                            v322 = v774;
                            do
                            {
                              v323 = __ldaxr(v322);
                              v324 = v323 - 1;
                            }
                            while (__stlxr(v324, v322));
                            if (!v324)
                            {
                              v325 = v774;
                              if (v774)
                              {
                                v326 = (void *)v774[1];
                                if (v326)
                                {
                                  v774[2] = v326;
                                  operator delete(v326);
                                }
                                v313 = v325;
                                v314 = 0x1080C409938AC02;
                                goto LABEL_360;
                              }
                            }
                            break;
                          case 4:
                            v315 = v774;
                            do
                            {
                              v316 = __ldaxr(v315);
                              v317 = v316 - 1;
                            }
                            while (__stlxr(v317, v315));
                            if (!v317)
                            {
                              v318 = v774;
                              if (v774)
                              {
                                v319 = v774[1];
                                if (!v319)
                                  goto LABEL_345;
                                v320 = v774[2];
                                v321 = (void *)v774[1];
                                if (v320 != v319)
                                {
                                  do
                                  {
                                    v320 -= 16;
                                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v318 + 3), v320);
                                  }
                                  while (v320 != v319);
                                  v321 = (void *)v318[1];
                                }
                                v318[2] = v319;
                                goto LABEL_344;
                              }
                            }
                            break;
                          case 5:
                            v327 = v774;
                            do
                            {
                              v328 = __ldaxr(v327);
                              v329 = v328 - 1;
                            }
                            while (__stlxr(v329, v327));
                            if (!v329)
                            {
                              v318 = v774;
                              if (v774)
                              {
                                v330 = v774[1];
                                if (v330)
                                {
                                  v331 = v774[2];
                                  v332 = (void *)v774[1];
                                  if (v331 != v330)
                                  {
                                    do
                                      v331 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v331 - 32);
                                    while (v331 != v330);
                                    v332 = (void *)v318[1];
                                  }
                                  v318[2] = v330;
                                  v321 = v332;
LABEL_344:
                                  operator delete(v321);
                                }
LABEL_345:
                                v313 = v318;
                                v314 = 0x1020C405E66F15BLL;
                                goto LABEL_360;
                              }
                            }
                            break;
                          case 9:
                            v333 = v774;
                            do
                            {
                              v334 = __ldaxr(v333);
                              v335 = v334 - 1;
                            }
                            while (__stlxr(v335, v333));
                            if (!v335)
                            {
                              v336 = v774;
                              if (v774)
                              {
                                v337 = (void *)v774[7];
                                if (v337)
                                {
                                  v774[8] = v337;
                                  operator delete(v337);
                                }
                                v338 = (void *)v336[4];
                                if (v338)
                                {
                                  v336[5] = v338;
                                  operator delete(v338);
                                }
                                v339 = (std::__shared_weak_count *)v336[3];
                                if (v339)
                                {
                                  v340 = (unint64_t *)&v339->__shared_owners_;
                                  do
                                    v341 = __ldaxr(v340);
                                  while (__stlxr(v341 - 1, v340));
                                  if (!v341)
                                  {
                                    ((void (*)(std::__shared_weak_count *))v339->__on_zero_shared)(v339);
                                    std::__shared_weak_count::__release_weak(v339);
                                  }
                                }
                                v313 = v336;
                                v314 = 0x10B0C4002311774;
LABEL_360:
                                MEMORY[0x19401CD90](v313, v314);
                              }
                            }
                            break;
                          default:
                            break;
                        }
                      }
                      else
                      {
                        *(_QWORD *)v756[1] = 0;
                        v307[8] = 0;
                        v308 = v774;
                        v307[8] = v775;
                        *(_QWORD *)v307 = v308;
                        v307[8] = v775;
                        v756[1] = v307 + 16;
                      }
                      v774 = 0;
                      v775 = 0;
                      if (v772)
                      {
                        v773 = v772;
                        operator delete(v772);
                      }
                      if (v770)
                      {
                        v771 = v770;
                        operator delete(v770);
                      }
                      v342 = v769;
                      if (v769)
                      {
                        v343 = (unint64_t *)&v769->__shared_owners_;
                        do
                          v344 = __ldaxr(v343);
                        while (__stlxr(v344 - 1, v343));
                        if (!v344)
                        {
                          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
                          std::__shared_weak_count::__release_weak(v342);
                        }
                      }
                      if (__p)
                      {
                        v741 = __p;
                        operator delete(__p);
                      }
                      if (v743)
                      {
                        v744 = v743;
                        operator delete(v743);
                      }
                      *(_OWORD *)a3 = *(_OWORD *)v756;
                      *(_QWORD *)(a3 + 16) = v757;
                      v756[0] = 0;
                      v756[1] = 0;
                      v757 = 0;
                      if (v746)
                      {
                        v747 = (char *)v746;
                        operator delete(v746);
                      }
                      if (v753)
                      {
                        v754 = v753;
                        operator delete(v753);
                      }
                      if (v751)
                      {
                        v752 = v751;
                        operator delete(v751);
                      }
                      v345 = v750;
                      if (v750)
                      {
                        v346 = (unint64_t *)&v750->__shared_owners_;
                        do
                          v347 = __ldaxr(v346);
                        while (__stlxr(v347 - 1, v346));
                        if (!v347)
                        {
                          ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
                          std::__shared_weak_count::__release_weak(v345);
                        }
                      }
                      v348 = (char *)v756[0];
                      if (v756[0])
                      {
                        v349 = (char *)v756[1];
                        v350 = v756[0];
                        if (v756[1] != v756[0])
                        {
                          do
                          {
                            v349 -= 16;
                            std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v757, (uint64_t)v349);
                          }
                          while (v349 != v348);
                          v350 = v756[0];
                        }
                        v756[1] = v348;
                        operator delete(v350);
                      }
                      if (v758)
                      {
                        v759 = (float *)v758;
                        operator delete(v758);
                      }
                      if (v716)
                      {
                        v717 = v716;
                        operator delete(v716);
                      }
                      if (v714)
                      {
                        v715 = (char *)v714;
                        operator delete(v714);
                      }
                      v351 = v713;
                      if (v713)
                      {
                        v352 = (unint64_t *)&v713->__shared_owners_;
                        do
                          v353 = __ldaxr(v352);
                        while (__stlxr(v353 - 1, v352));
                        goto LABEL_998;
                      }
                      return;
                    }
                  }
                  v235 = v749;
                  v236 = v755;
                  if ((unint64_t)a2 <= 1)
                    v237 = 1;
                  else
                    v237 = a2;
                  if (v237 >= 8
                    && ((v238 = v749 + 4 * v755, v238 >= (unint64_t)&v123[2 * v237 - 1])
                     || (unint64_t)v123 >= v749 + 4 * (v755 + v237)))
                  {
                    v239 = v237 & 0xFFFFFFFFFFFFFFF8;
                    v264 = v123 + 8;
                    v265 = (float32x4_t *)(v238 + 16);
                    v266 = v234 + 1;
                    v267 = v237 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      v268 = v264 - 8;
                      v777 = vld2q_f32(v268);
                      v780 = vld2q_f32(v264);
                      v265[-1] = v777.val[0];
                      *v265 = v780.val[0];
                      v266[-1] = v777.val[1];
                      *v266 = v780.val[1];
                      v264 += 16;
                      v265 += 2;
                      v266 += 2;
                      v267 -= 8;
                    }
                    while (v267);
                    if (v237 == v239)
                      goto LABEL_221;
                  }
                  else
                  {
                    v239 = 0;
                  }
                  v240 = v237 - v239;
                  v241 = &v234->i32[v239];
                  v242 = (char *)&v123[2 * v239 + 1];
                  v243 = (_DWORD *)(v235 + 4 * (v239 + v236));
                  do
                  {
                    *v243++ = *((_DWORD *)v242 - 1);
                    v244 = *(_DWORD *)v242;
                    v242 += 8;
                    *v241++ = v244;
                    --v240;
                  }
                  while (v240);
                  goto LABEL_221;
                }
LABEL_204:
                std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v187, &v123[2 * a2], v124, (uint64_t)&v761);
                goto LABEL_205;
              }
              if (v40 >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v123 = (float *)operator new(8 * v40);
              v758 = v123;
              v760 = &v123[2 * v40];
              bzero(v123, 8 * v40);
              v124 = (uint64_t)&v123[2 * v40];
              v759 = (float *)v124;
              v125 = (uint64_t)(8 * v40) >> 3;
              if (v125 <= 1)
                v125 = 1;
              if (v125 >= 8
                && ((unint64_t)v123 < v38 + 4 * v125
                  ? (_CF = v38 >= (unint64_t)&v123[2 * v125 - 1])
                  : (_CF = 1),
                    _CF))
              {
                v127 = v125 & 0xFFFFFFFFFFFFFFF8;
                v128 = v123 + 8;
                v129 = (int32x4_t)xmmword_191A761E0;
                v130 = (float32x4_t *)(v38 + 16);
                v131.i64[0] = 0x400000004;
                v131.i64[1] = 0x400000004;
                v132.i64[0] = 0x800000008;
                v132.i64[1] = 0x800000008;
                v133 = v125 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  v783.val[1] = (float32x4_t)vaddq_s32(v129, v131);
                  v134 = v130[-1];
                  v783.val[0] = *v130;
                  v135 = v128 - 8;
                  vst2q_f32(v135, *(float32x4x2_t *)(&v129 - 1));
                  vst2q_f32(v128, v783);
                  v129 = vaddq_s32(v129, v132);
                  v128 += 16;
                  v130 += 2;
                  v133 -= 8;
                }
                while (v133);
                if (v125 == v127)
                {
LABEL_172:
                  v187 = v123;
                  if (!a2)
                    goto LABEL_205;
                  goto LABEL_204;
                }
              }
              else
              {
                v127 = 0;
              }
              v186 = (char *)&v123[2 * v127 + 1];
              do
              {
                *((_DWORD *)v186 - 1) = *(_DWORD *)(v38 + 4 * v127);
                *(_DWORD *)v186 = v127;
                v186 += 8;
                ++v127;
              }
              while (v125 != v127);
              goto LABEL_172;
            }
          }
          else
          {
            v40 = 1;
            v41 = (char *)v714;
          }
          do
          {
            v122 = *(_QWORD *)v41;
            v41 += 8;
            v40 *= v122;
          }
          while (v41 != v715);
          goto LABEL_98;
        }
      }
      else
      {
        v24 = 0;
        v25 = 0;
      }
      v31 = v23 - v24;
      v32 = 8 * v24;
      v33 = (uint64_t *)((char *)v716 + v32);
      v34 = (uint64_t *)((char *)v714 + v32);
      do
      {
        v35 = *v34++;
        v36 = v35 - 1;
        v37 = *v33++;
        v25 += v37 * v36;
        --v31;
      }
      while (v31);
      goto LABEL_35;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v719, (uint64_t)a1);
      if (v725)
        goto LABEL_400;
      v11 = v722 - (_BYTE *)v721;
      if (v722 == v721)
        goto LABEL_401;
      v12 = v719;
      if (!v719)
        goto LABEL_44;
      if ((unint64_t)(v11 - 8) < 8)
      {
        v12 = 1;
        v13 = (char *)v721;
        do
        {
LABEL_43:
          v47 = *(_QWORD *)v13;
          v13 += 8;
          v12 *= v47;
        }
        while (v13 != v722);
        goto LABEL_44;
      }
      v42 = ((unint64_t)(v11 - 8) >> 3) + 1;
      v13 = (char *)v721 + 8 * (v42 & 0x3FFFFFFFFFFFFFFELL);
      v43 = (char *)v721 + 8;
      v44 = 1;
      v45 = v42 & 0x3FFFFFFFFFFFFFFELL;
      v46 = 1;
      do
      {
        v44 *= *(v43 - 1);
        v46 *= *v43;
        v43 += 2;
        v45 -= 2;
      }
      while (v45);
      v12 = v46 * v44;
      if (v42 != (v42 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_43;
LABEL_44:
      v48 = v11 >> 3;
      if ((unint64_t)(v11 >> 3) <= 1)
        v48 = 1;
      if (v48 >= 2)
      {
        v51 = 0;
        v52 = 0;
        v49 = v48 & 0xFFFFFFFFFFFFFFFELL;
        v53 = (char *)v721 + 8;
        v54 = (char *)v723 + 8;
        v55 = v48 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          v51 += *(v54 - 1) * (*(v53 - 1) - 1);
          v52 += *v54 * (*v53 - 1);
          v53 += 2;
          v54 += 2;
          v55 -= 2;
        }
        while (v55);
        v50 = v52 + v51;
        if (v48 == v49)
        {
LABEL_53:
          if (v12 != v50 + 1)
LABEL_400:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          if (v722 == v721 || (v63 = (float16x8_t *)v719) == 0)
          {
LABEL_401:
            v190 = 0;
            v143 = 0;
            v142 = 0;
            v758 = 0;
            v759 = 0;
            v760 = 0;
            if (!a2)
              goto LABEL_403;
            goto LABEL_402;
          }
          v64 = v722 - (_BYTE *)v721 - 8;
          if (v64 >= 8)
          {
            v136 = (v64 >> 3) + 1;
            v66 = (char *)v721 + 8 * (v136 & 0x3FFFFFFFFFFFFFFELL);
            v137 = (char *)v721 + 8;
            v138 = 1;
            v139 = v136 & 0x3FFFFFFFFFFFFFFELL;
            v140 = 1;
            do
            {
              v138 *= *(v137 - 1);
              v140 *= *v137;
              v137 += 2;
              v139 -= 2;
            }
            while (v139);
            v65 = v140 * v138;
            if (v136 == (v136 & 0x3FFFFFFFFFFFFFFELL))
            {
LABEL_116:
              v758 = 0;
              v759 = 0;
              v760 = 0;
              if (!v65)
              {
                v190 = 0;
                v143 = 0;
                v142 = 0;
                if (!a2)
                  goto LABEL_403;
                goto LABEL_402;
              }
              if (v65 >> 61)
                std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
              v142 = (float *)operator new(8 * v65);
              v758 = v142;
              v760 = &v142[2 * v65];
              bzero(v142, 8 * v65);
              v143 = (uint64_t)&v142[2 * v65];
              v759 = (float *)v143;
              v144 = (uint64_t)(8 * v65) >> 3;
              if (v144 <= 1)
                v144 = 1;
              if (v144 >= 0x10)
              {
                v145 = v144 & 0xFFFFFFFFFFFFFFF0;
                v191 = v142 + 16;
                v192 = (int32x4_t)xmmword_191A92A40;
                v193 = (int32x4_t)xmmword_191A761E0;
                v194 = v63 + 1;
                v195.i64[0] = 0x800000008;
                v195.i64[1] = 0x800000008;
                v196.i64[0] = 0x1000000010;
                v196.i64[1] = 0x1000000010;
                v197 = v144 & 0xFFFFFFFFFFFFFFF0;
                do
                {
                  v785.val[1] = (float32x4_t)vaddq_s32(v192, v195);
                  v786.val[1] = (float32x4_t)vaddq_s32(v193, v195);
                  v198 = v194[-1];
                  v199 = *v194;
                  v200 = vcvt_hight_f32_f16(v198);
                  v201 = vcvtq_f32_f16(*(float16x4_t *)v198.i8);
                  v202 = v191 - 16;
                  vst2q_f32(v202, *(float32x4x2_t *)(&v193 - 1));
                  v786.val[0] = vcvtq_f32_f16(*(float16x4_t *)v199.i8);
                  v203 = v191 - 8;
                  vst2q_f32(v203, *(float32x4x2_t *)(&v192 - 1));
                  v204 = v191 + 32;
                  vst2q_f32(v191, v786);
                  v205 = v191 + 8;
                  v785.val[0] = vcvt_hight_f32_f16(v199);
                  vst2q_f32(v205, v785);
                  v193 = vaddq_s32(v193, v196);
                  v192 = vaddq_s32(v192, v196);
                  v194 += 2;
                  v191 = v204;
                  v197 -= 16;
                }
                while (v197);
                if (v144 == v145)
                {
LABEL_192:
                  v190 = v142;
                  if (!a2)
                  {
LABEL_403:
                    v756[0] = 0;
                    v756[1] = 0;
                    v757 = 0;
                    v354 = (uint64_t *)operator new(8uLL);
                    v761 = v354;
                    *v354 = a2;
                    *(_QWORD *)&v762 = v354 + 1;
                    *((_QWORD *)&v762 + 1) = v354 + 1;
                    nitro::ndarray<half>::init_from_shape(&v761, &v749);
                    if (v761)
                    {
                      *(_QWORD *)&v762 = v761;
                      operator delete(v761);
                    }
                    v747 = 0;
                    v748 = 0;
                    v746 = 0;
                    if (v759 == v142)
                    {
                      v356 = 0;
                      if (!a2)
                        goto LABEL_420;
                    }
                    else
                    {
                      v355 = (char *)v759 - (char *)v190;
                      if ((char *)v759 - (char *)v190 < 0)
                        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
                      v356 = (float32x4_t *)operator new(v355 >> 1);
                      v746 = v356;
                      v748 = &v356->i8[4 * ((uint64_t)v355 >> 3)];
                      bzero(v356, v355 >> 1);
                      v747 = (char *)v356 + (v355 >> 1);
                      if (!a2)
                      {
LABEL_420:
                        v768 = 0;
                        LOBYTE(v769) = 9;
                        v372 = (_QWORD *)operator new();
                        *v372 = 0;
                        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v372 + 1));
                        v768 = v372;
                        *v372 = 1;
                        nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&v761, &v749);
                        v373 = v768;
                        *((_DWORD *)v768 + 2) = (_DWORD)v761;
                        v374 = v762;
                        v762 = 0uLL;
                        v375 = (std::__shared_weak_count *)v373[3];
                        *((_OWORD *)v373 + 1) = v374;
                        if (v375)
                        {
                          v376 = (unint64_t *)&v375->__shared_owners_;
                          do
                            v377 = __ldaxr(v376);
                          while (__stlxr(v377 - 1, v376));
                          if (!v377)
                          {
                            ((void (*)(std::__shared_weak_count *))v375->__on_zero_shared)(v375);
                            std::__shared_weak_count::__release_weak(v375);
                          }
                        }
                        v378 = (void *)v373[4];
                        if (v378)
                        {
                          v373[5] = v378;
                          operator delete(v378);
                          v373[4] = 0;
                          v373[5] = 0;
                          v373[6] = 0;
                        }
                        v379 = (void *)v373[7];
                        *((_OWORD *)v373 + 2) = v763;
                        v373[6] = v764;
                        v763 = 0uLL;
                        v764 = 0;
                        if (v379)
                        {
                          v373[8] = v379;
                          operator delete(v379);
                          v373[7] = 0;
                          v373[8] = 0;
                          v373[9] = 0;
                          v379 = (void *)v763;
                        }
                        *(_OWORD *)(v373 + 7) = v765;
                        v373[9] = v766;
                        v765 = 0uLL;
                        v766 = 0;
                        v373[10] = v767;
                        if (v379)
                        {
                          *((_QWORD *)&v763 + 1) = v379;
                          operator delete(v379);
                        }
                        v380 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
                        if (*((_QWORD *)&v762 + 1))
                        {
                          v381 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
                          do
                            v382 = __ldaxr(v381);
                          while (__stlxr(v382 - 1, v381));
                          if (!v382)
                          {
                            ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
                            std::__shared_weak_count::__release_weak(v380);
                          }
                        }
                        v383 = (char *)v756[1];
                        if (v756[1] >= v757)
                        {
                          v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v768);
                          switch((char)v769)
                          {
                            case 2:
                              v385 = v768;
                              do
                              {
                                v386 = __ldaxr(v385);
                                v387 = v386 - 1;
                              }
                              while (__stlxr(v387, v385));
                              if (!v387)
                              {
                                v388 = v768;
                                if (v768)
                                {
                                  if (*((char *)v768 + 31) < 0)
                                    operator delete((void *)v768[1]);
                                  v389 = v388;
                                  v390 = 0x1012C404EF22A49;
                                  goto LABEL_487;
                                }
                              }
                              break;
                            case 3:
                              v398 = v768;
                              do
                              {
                                v399 = __ldaxr(v398);
                                v400 = v399 - 1;
                              }
                              while (__stlxr(v400, v398));
                              if (!v400)
                              {
                                v401 = v768;
                                if (v768)
                                {
                                  v402 = (void *)v768[1];
                                  if (v402)
                                  {
                                    v768[2] = v402;
                                    operator delete(v402);
                                  }
                                  v389 = v401;
                                  v390 = 0x1080C409938AC02;
                                  goto LABEL_487;
                                }
                              }
                              break;
                            case 4:
                              v391 = v768;
                              do
                              {
                                v392 = __ldaxr(v391);
                                v393 = v392 - 1;
                              }
                              while (__stlxr(v393, v391));
                              if (!v393)
                              {
                                v394 = v768;
                                if (v768)
                                {
                                  v395 = v768[1];
                                  if (!v395)
                                    goto LABEL_472;
                                  v396 = v768[2];
                                  v397 = (void *)v768[1];
                                  if (v396 != v395)
                                  {
                                    do
                                    {
                                      v396 -= 16;
                                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v394 + 3), v396);
                                    }
                                    while (v396 != v395);
                                    v397 = (void *)v394[1];
                                  }
                                  v394[2] = v395;
                                  goto LABEL_471;
                                }
                              }
                              break;
                            case 5:
                              v403 = v768;
                              do
                              {
                                v404 = __ldaxr(v403);
                                v405 = v404 - 1;
                              }
                              while (__stlxr(v405, v403));
                              if (!v405)
                              {
                                v394 = v768;
                                if (v768)
                                {
                                  v406 = v768[1];
                                  if (v406)
                                  {
                                    v407 = v768[2];
                                    v408 = (void *)v768[1];
                                    if (v407 != v406)
                                    {
                                      do
                                        v407 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v407 - 32);
                                      while (v407 != v406);
                                      v408 = (void *)v394[1];
                                    }
                                    v394[2] = v406;
                                    v397 = v408;
LABEL_471:
                                    operator delete(v397);
                                  }
LABEL_472:
                                  v389 = v394;
                                  v390 = 0x1020C405E66F15BLL;
                                  goto LABEL_487;
                                }
                              }
                              break;
                            case 9:
                              v409 = v768;
                              do
                              {
                                v410 = __ldaxr(v409);
                                v411 = v410 - 1;
                              }
                              while (__stlxr(v411, v409));
                              if (!v411)
                              {
                                v412 = v768;
                                if (v768)
                                {
                                  v413 = (void *)v768[7];
                                  if (v413)
                                  {
                                    v768[8] = v413;
                                    operator delete(v413);
                                  }
                                  v414 = (void *)v412[4];
                                  if (v414)
                                  {
                                    v412[5] = v414;
                                    operator delete(v414);
                                  }
                                  v415 = (std::__shared_weak_count *)v412[3];
                                  if (v415)
                                  {
                                    v416 = (unint64_t *)&v415->__shared_owners_;
                                    do
                                      v417 = __ldaxr(v416);
                                    while (__stlxr(v417 - 1, v416));
                                    if (!v417)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v415->__on_zero_shared)(v415);
                                      std::__shared_weak_count::__release_weak(v415);
                                    }
                                  }
                                  v389 = v412;
                                  v390 = 0x10B0C4002311774;
LABEL_487:
                                  MEMORY[0x19401CD90](v389, v390);
                                }
                              }
                              break;
                            default:
                              break;
                          }
                        }
                        else
                        {
                          *(_QWORD *)v756[1] = 0;
                          v383[8] = 0;
                          v384 = v768;
                          v383[8] = (char)v769;
                          *(_QWORD *)v383 = v384;
                          v383[8] = (char)v769;
                          v756[1] = v383 + 16;
                        }
                        v743 = 0;
                        v744 = 0;
                        v745 = 0;
                        __p = 0;
                        v741 = 0;
                        v742 = 0;
                        nitro::ndarray<int>::ndarray((uint64_t)&v768, (uint64_t)&v746, (char **)&v743, (char **)&__p, 0);
                        v774 = 0;
                        v775 = 9;
                        v418 = (_QWORD *)operator new();
                        *v418 = 0;
                        nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v418 + 1));
                        v774 = v418;
                        *v418 = 1;
                        nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v761, &v768);
                        v419 = v774;
                        *((_DWORD *)v774 + 2) = (_DWORD)v761;
                        v420 = v762;
                        v762 = 0uLL;
                        v421 = (std::__shared_weak_count *)v419[3];
                        *((_OWORD *)v419 + 1) = v420;
                        if (v421)
                        {
                          v422 = (unint64_t *)&v421->__shared_owners_;
                          do
                            v423 = __ldaxr(v422);
                          while (__stlxr(v423 - 1, v422));
                          if (!v423)
                          {
                            ((void (*)(std::__shared_weak_count *))v421->__on_zero_shared)(v421);
                            std::__shared_weak_count::__release_weak(v421);
                          }
                        }
                        v424 = (void *)v419[4];
                        if (v424)
                        {
                          v419[5] = v424;
                          operator delete(v424);
                          v419[4] = 0;
                          v419[5] = 0;
                          v419[6] = 0;
                        }
                        v425 = (void *)v419[7];
                        *((_OWORD *)v419 + 2) = v763;
                        v419[6] = v764;
                        v763 = 0uLL;
                        v764 = 0;
                        if (v425)
                        {
                          v419[8] = v425;
                          operator delete(v425);
                          v419[7] = 0;
                          v419[8] = 0;
                          v419[9] = 0;
                          v425 = (void *)v763;
                        }
                        *(_OWORD *)(v419 + 7) = v765;
                        v419[9] = v766;
                        v765 = 0uLL;
                        v766 = 0;
                        v419[10] = v767;
                        if (v425)
                        {
                          *((_QWORD *)&v763 + 1) = v425;
                          operator delete(v425);
                        }
                        v426 = (std::__shared_weak_count *)*((_QWORD *)&v762 + 1);
                        if (*((_QWORD *)&v762 + 1))
                        {
                          v427 = (unint64_t *)(*((_QWORD *)&v762 + 1) + 8);
                          do
                            v428 = __ldaxr(v427);
                          while (__stlxr(v428 - 1, v427));
                          if (!v428)
                          {
                            ((void (*)(std::__shared_weak_count *))v426->__on_zero_shared)(v426);
                            std::__shared_weak_count::__release_weak(v426);
                          }
                        }
                        v429 = (char *)v756[1];
                        if (v756[1] >= v757)
                        {
                          v756[1] = std::vector<nitro::flexible_type>::__push_back_slow_path<nitro::flexible_type>((char **)v756, (uint64_t)&v774);
                          switch(v775)
                          {
                            case 2:
                              v431 = v774;
                              do
                              {
                                v432 = __ldaxr(v431);
                                v433 = v432 - 1;
                              }
                              while (__stlxr(v433, v431));
                              if (!v433)
                              {
                                v434 = v774;
                                if (v774)
                                {
                                  if (*((char *)v774 + 31) < 0)
                                    operator delete((void *)v774[1]);
                                  v435 = v434;
                                  v436 = 0x1012C404EF22A49;
                                  goto LABEL_555;
                                }
                              }
                              break;
                            case 3:
                              v444 = v774;
                              do
                              {
                                v445 = __ldaxr(v444);
                                v446 = v445 - 1;
                              }
                              while (__stlxr(v446, v444));
                              if (!v446)
                              {
                                v447 = v774;
                                if (v774)
                                {
                                  v448 = (void *)v774[1];
                                  if (v448)
                                  {
                                    v774[2] = v448;
                                    operator delete(v448);
                                  }
                                  v435 = v447;
                                  v436 = 0x1080C409938AC02;
                                  goto LABEL_555;
                                }
                              }
                              break;
                            case 4:
                              v437 = v774;
                              do
                              {
                                v438 = __ldaxr(v437);
                                v439 = v438 - 1;
                              }
                              while (__stlxr(v439, v437));
                              if (!v439)
                              {
                                v440 = v774;
                                if (v774)
                                {
                                  v441 = v774[1];
                                  if (!v441)
                                    goto LABEL_540;
                                  v442 = v774[2];
                                  v443 = (void *)v774[1];
                                  if (v442 != v441)
                                  {
                                    do
                                    {
                                      v442 -= 16;
                                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v440 + 3), v442);
                                    }
                                    while (v442 != v441);
                                    v443 = (void *)v440[1];
                                  }
                                  v440[2] = v441;
                                  goto LABEL_539;
                                }
                              }
                              break;
                            case 5:
                              v449 = v774;
                              do
                              {
                                v450 = __ldaxr(v449);
                                v451 = v450 - 1;
                              }
                              while (__stlxr(v451, v449));
                              if (!v451)
                              {
                                v440 = v774;
                                if (v774)
                                {
                                  v452 = v774[1];
                                  if (v452)
                                  {
                                    v453 = v774[2];
                                    v454 = (void *)v774[1];
                                    if (v453 != v452)
                                    {
                                      do
                                        v453 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v453 - 32);
                                      while (v453 != v452);
                                      v454 = (void *)v440[1];
                                    }
                                    v440[2] = v452;
                                    v443 = v454;
LABEL_539:
                                    operator delete(v443);
                                  }
LABEL_540:
                                  v435 = v440;
                                  v436 = 0x1020C405E66F15BLL;
                                  goto LABEL_555;
                                }
                              }
                              break;
                            case 9:
                              v455 = v774;
                              do
                              {
                                v456 = __ldaxr(v455);
                                v457 = v456 - 1;
                              }
                              while (__stlxr(v457, v455));
                              if (!v457)
                              {
                                v458 = v774;
                                if (v774)
                                {
                                  v459 = (void *)v774[7];
                                  if (v459)
                                  {
                                    v774[8] = v459;
                                    operator delete(v459);
                                  }
                                  v460 = (void *)v458[4];
                                  if (v460)
                                  {
                                    v458[5] = v460;
                                    operator delete(v460);
                                  }
                                  v461 = (std::__shared_weak_count *)v458[3];
                                  if (v461)
                                  {
                                    v462 = (unint64_t *)&v461->__shared_owners_;
                                    do
                                      v463 = __ldaxr(v462);
                                    while (__stlxr(v463 - 1, v462));
                                    if (!v463)
                                    {
                                      ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
                                      std::__shared_weak_count::__release_weak(v461);
                                    }
                                  }
                                  v435 = v458;
                                  v436 = 0x10B0C4002311774;
LABEL_555:
                                  MEMORY[0x19401CD90](v435, v436);
                                }
                              }
                              break;
                            default:
                              break;
                          }
                        }
                        else
                        {
                          *(_QWORD *)v756[1] = 0;
                          v429[8] = 0;
                          v430 = v774;
                          v429[8] = v775;
                          *(_QWORD *)v429 = v430;
                          v429[8] = v775;
                          v756[1] = v429 + 16;
                        }
                        v774 = 0;
                        v775 = 0;
                        if (v772)
                        {
                          v773 = v772;
                          operator delete(v772);
                        }
                        if (v770)
                        {
                          v771 = v770;
                          operator delete(v770);
                        }
                        v464 = v769;
                        if (v769)
                        {
                          v465 = (unint64_t *)&v769->__shared_owners_;
                          do
                            v466 = __ldaxr(v465);
                          while (__stlxr(v466 - 1, v465));
                          if (!v466)
                          {
                            ((void (*)(std::__shared_weak_count *))v464->__on_zero_shared)(v464);
                            std::__shared_weak_count::__release_weak(v464);
                          }
                        }
                        if (__p)
                        {
                          v741 = __p;
                          operator delete(__p);
                        }
                        if (v743)
                        {
                          v744 = v743;
                          operator delete(v743);
                        }
                        *(_OWORD *)a3 = *(_OWORD *)v756;
                        *(_QWORD *)(a3 + 16) = v757;
                        v756[0] = 0;
                        v756[1] = 0;
                        v757 = 0;
                        if (v746)
                        {
                          v747 = (char *)v746;
                          operator delete(v746);
                        }
                        if (v753)
                        {
                          v754 = v753;
                          operator delete(v753);
                        }
                        if (v751)
                        {
                          v752 = v751;
                          operator delete(v751);
                        }
                        v467 = v750;
                        if (v750)
                        {
                          v468 = (unint64_t *)&v750->__shared_owners_;
                          do
                            v469 = __ldaxr(v468);
                          while (__stlxr(v469 - 1, v468));
                          if (!v469)
                          {
                            ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
                            std::__shared_weak_count::__release_weak(v467);
                          }
                        }
                        v470 = (char *)v756[0];
                        if (v756[0])
                        {
                          v471 = (char *)v756[1];
                          v472 = v756[0];
                          if (v756[1] != v756[0])
                          {
                            do
                            {
                              v471 -= 16;
                              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)&v757, (uint64_t)v471);
                            }
                            while (v471 != v470);
                            v472 = v756[0];
                          }
                          v756[1] = v470;
                          operator delete(v472);
                        }
                        if (v758)
                        {
                          v759 = (float *)v758;
                          operator delete(v758);
                        }
                        if (v723)
                        {
                          v724 = v723;
                          operator delete(v723);
                        }
                        if (v721)
                        {
                          v722 = (char *)v721;
                          operator delete(v721);
                        }
                        v351 = v720;
                        if (v720)
                        {
                          v473 = (unint64_t *)&v720->__shared_owners_;
                          do
                            v353 = __ldaxr(v473);
                          while (__stlxr(v353 - 1, v473));
                          goto LABEL_998;
                        }
                        return;
                      }
                    }
                    v357 = v749;
                    v358 = v755;
                    if ((unint64_t)a2 <= 1)
                      v359 = 1;
                    else
                      v359 = a2;
                    if (v359 >= 8)
                    {
                      v360 = v359 & 0xFFFFFFFFFFFFFFF8;
                      v361 = (float16x8_t *)(v749 + 2 * v755);
                      v362 = v359 & 0xFFFFFFFFFFFFFFF8;
                      v363 = v356;
                      v364 = v142;
                      do
                      {
                        v365 = v364;
                        v778 = vld2q_f32(v365);
                        v365 += 8;
                        v781 = vld2q_f32(v365);
                        *v361++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v778.val[0]), v781.val[0]);
                        *v363 = v778.val[1];
                        v363[1] = v781.val[1];
                        v363 += 2;
                        v364 += 16;
                        v362 -= 8;
                      }
                      while (v362);
                      if (v359 == v360)
                        goto LABEL_420;
                    }
                    else
                    {
                      v360 = 0;
                    }
                    v366 = v359 - v360;
                    v367 = &v356->i32[v360];
                    v368 = &v142[2 * v360 + 1];
                    v369 = (_WORD *)(v357 + 2 * (v360 + v358));
                    do
                    {
                      _S0 = *((_DWORD *)v368 - 1);
                      __asm { FCVT            H0, S0 }
                      *v369++ = _S0;
                      v371 = *(_DWORD *)v368;
                      v368 += 2;
                      *v367++ = v371;
                      --v366;
                    }
                    while (v366);
                    goto LABEL_420;
                  }
LABEL_402:
                  std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(v190, &v142[2 * a2], v143, (uint64_t)&v761);
                  goto LABEL_403;
                }
              }
              else
              {
                v145 = 0;
              }
              v206 = &v142[2 * v145 + 1];
              do
              {
                _H0 = v63->i16[v145];
                __asm { FCVT            S0, H0 }
                *((_DWORD *)v206 - 1) = _S0;
                *(_DWORD *)v206 = v145;
                v206 += 2;
                ++v145;
              }
              while (v144 != v145);
              goto LABEL_192;
            }
          }
          else
          {
            v65 = 1;
            v66 = (char *)v721;
          }
          do
          {
            v141 = *(_QWORD *)v66;
            v66 += 8;
            v65 *= v141;
          }
          while (v66 != v722);
          goto LABEL_116;
        }
      }
      else
      {
        v49 = 0;
        v50 = 0;
      }
      v56 = v48 - v49;
      v57 = 8 * v49;
      v58 = (uint64_t *)((char *)v723 + v57);
      v59 = (uint64_t *)((char *)v721 + v57);
      do
      {
        v60 = *v59++;
        v61 = v60 - 1;
        v62 = *v58++;
        v50 += v62 * v61;
        --v56;
      }
      while (v56);
      goto LABEL_53;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_1912ADD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  int64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  const void *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  __int128 v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  void *v99;
  void *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  void *v121;
  unint64_t *v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  _QWORD *v131;
  void *v132;
  void *v133;
  std::__shared_weak_count *v134;
  unint64_t *v135;
  unint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  unint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t *v201;
  unint64_t v202;
  unint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  unint64_t *v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  void *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  void *v223;
  void *v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t v228;
  __int128 v229;
  std::__shared_weak_count *v230;
  unint64_t *v231;
  unint64_t v232;
  void *v233;
  void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  __int128 v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  void *v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  char *v246;
  unint64_t *v247;
  int v248;
  unint64_t v249;
  unint64_t *v250;
  int v251;
  unint64_t v253;
  char **v254;
  char *v255;
  uint64_t v256;
  char **v257;
  char *v258;
  unint64_t v259;
  unint64_t v260;
  char *v261;
  unint64_t *v262;
  unint64_t v263;
  unint64_t v264;
  char *v265;
  uint64_t v266;
  uint64_t v267;
  void *v268;
  unint64_t *v269;
  unint64_t v270;
  unint64_t v271;
  char *v272;
  void *v273;
  unint64_t *v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  void *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  char *v283;
  void *v284;
  void *v285;
  std::__shared_weak_count *v286;
  unint64_t *v287;
  unint64_t v288;
  std::__shared_weak_count *v289;
  unint64_t *v290;
  unint64_t v291;
  std::__shared_weak_count *v292;
  unint64_t *v293;
  unint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  _QWORD *v309;
  _QWORD *v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t *v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  _BYTE *v319;
  _BYTE *v320;
  int64_t v321;
  char *v322;
  char *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  const void *v341;
  char *v342;
  char *v343;
  uint64_t v344;
  __int128 v345;
  std::__shared_weak_count *v346;
  unint64_t *v347;
  unint64_t v348;
  void *v349;
  void *v350;
  uint64_t v351;
  uint64_t v352;
  unint64_t *v353;
  unint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  unint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  unint64_t *v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  void *v370;
  unint64_t *v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  unint64_t *v377;
  unint64_t v378;
  unint64_t v379;
  _QWORD *v380;
  void *v381;
  void *v382;
  std::__shared_weak_count *v383;
  unint64_t *v384;
  unint64_t v385;
  unint64_t *v386;
  unint64_t v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  void *v398;
  unint64_t *v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  void *v403;
  unint64_t *v404;
  unint64_t v405;
  unint64_t v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  unint64_t *v410;
  unint64_t v411;
  unint64_t v412;
  _QWORD *v413;
  void *v414;
  void *v415;
  std::__shared_weak_count *v416;
  unint64_t *v417;
  unint64_t v418;
  std::__shared_weak_count *v419;
  unint64_t *v420;
  unint64_t v421;
  void *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t *v425;
  unint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  _QWORD *v437;
  _QWORD *v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t *v442;
  uint64_t *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  std::__shared_weak_count *v447;
  unint64_t *v448;
  unint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t *v452;
  unint64_t v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unint64_t v459;
  unint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _QWORD *v464;
  _QWORD *v465;
  unint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t *v469;
  uint64_t *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  std::__shared_weak_count *v474;
  unint64_t *v475;
  unint64_t v476;
  unint64_t *v477;
  unint64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  unint64_t *v483;
  unint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  void *v489;
  unint64_t *v490;
  unint64_t v491;
  unint64_t v492;
  uint64_t v493;
  void *v494;
  unint64_t *v495;
  unint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  void *v500;
  unint64_t *v501;
  unint64_t v502;
  unint64_t v503;
  _QWORD *v504;
  void *v505;
  void *v506;
  std::__shared_weak_count *v507;
  unint64_t *v508;
  unint64_t v509;
  uint64_t v510;
  __int128 v511;
  std::__shared_weak_count *v512;
  unint64_t *v513;
  unint64_t v514;
  void *v515;
  void *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  __int128 v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  void *v524;
  void *v525;
  uint64_t v526;
  uint64_t v527;
  char *v528;
  unint64_t *v529;
  int v530;
  unint64_t v531;
  unint64_t *v532;
  int v533;
  unint64_t v535;
  char **v536;
  char *v537;
  uint64_t v538;
  char **v539;
  char *v540;
  unint64_t v541;
  unint64_t v542;
  char *v543;
  unint64_t *v544;
  unint64_t v545;
  unint64_t v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  void *v550;
  unint64_t *v551;
  unint64_t v552;
  unint64_t v553;
  char *v554;
  void *v555;
  unint64_t *v556;
  unint64_t v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  void *v561;
  unint64_t *v562;
  unint64_t v563;
  unint64_t v564;
  char *v565;
  void *v566;
  void *v567;
  std::__shared_weak_count *v568;
  unint64_t *v569;
  unint64_t v570;
  std::__shared_weak_count *v571;
  unint64_t *v572;
  unint64_t v573;
  std::__shared_weak_count *v574;
  unint64_t *v575;
  unint64_t v576;
  unint64_t *v577;
  unint64_t v578;
  _QWORD *v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unint64_t v584;
  unint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  _QWORD *v589;
  _QWORD *v590;
  unint64_t v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t *v594;
  uint64_t *v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  _BYTE *v599;
  _BYTE *v600;
  int64_t v601;
  char *v602;
  char *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  unint64_t v607;
  uint64_t v608;
  _QWORD *v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  unint64_t v613;
  char *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  size_t v618;
  uint64_t v619;
  char *v620;
  const void *v621;
  char *v622;
  char *v623;
  uint64_t v624;
  __int128 v625;
  std::__shared_weak_count *v626;
  unint64_t *v627;
  unint64_t v628;
  void *v629;
  void *v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t *v633;
  unint64_t v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  unint64_t *v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  void *v645;
  unint64_t *v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  void *v650;
  unint64_t *v651;
  unint64_t v652;
  unint64_t v653;
  uint64_t v654;
  uint64_t v655;
  void *v656;
  unint64_t *v657;
  unint64_t v658;
  unint64_t v659;
  _QWORD *v660;
  void *v661;
  void *v662;
  std::__shared_weak_count *v663;
  unint64_t *v664;
  unint64_t v665;
  unint64_t *v666;
  unint64_t v667;
  unint64_t v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  unint64_t *v672;
  unint64_t v673;
  unint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  void *v678;
  unint64_t *v679;
  unint64_t v680;
  unint64_t v681;
  uint64_t v682;
  void *v683;
  unint64_t *v684;
  unint64_t v685;
  unint64_t v686;
  uint64_t v687;
  uint64_t v688;
  void *v689;
  unint64_t *v690;
  unint64_t v691;
  unint64_t v692;
  _QWORD *v693;
  void *v694;
  void *v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  std::__shared_weak_count *v699;
  unint64_t *v700;
  unint64_t v701;
  void *v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t *v705;
  unint64_t v706;
  _QWORD *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  _QWORD *v717;
  _QWORD *v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t *v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  std::__shared_weak_count *v727;
  unint64_t *v728;
  unint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t *v732;
  unint64_t v733;
  _QWORD *v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  unint64_t v739;
  unint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  _QWORD *v744;
  _QWORD *v745;
  unint64_t v746;
  unint64_t v747;
  uint64_t v748;
  uint64_t *v749;
  uint64_t *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  std::__shared_weak_count *v754;
  unint64_t *v755;
  unint64_t v756;
  unint64_t *v757;
  unint64_t v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  unint64_t *v763;
  unint64_t v764;
  unint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  void *v769;
  unint64_t *v770;
  unint64_t v771;
  unint64_t v772;
  uint64_t v773;
  void *v774;
  unint64_t *v775;
  unint64_t v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  void *v780;
  unint64_t *v781;
  unint64_t v782;
  unint64_t v783;
  _QWORD *v784;
  void *v785;
  void *v786;
  std::__shared_weak_count *v787;
  unint64_t *v788;
  unint64_t v789;
  uint64_t v790;
  __int128 v791;
  std::__shared_weak_count *v792;
  unint64_t *v793;
  unint64_t v794;
  void *v795;
  void *v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  __int128 v800;
  std::__shared_weak_count *v801;
  unint64_t *v802;
  unint64_t v803;
  void *v804;
  void *v805;
  uint64_t v806;
  uint64_t v807;
  char *v808;
  unint64_t *v809;
  int v810;
  unint64_t v811;
  unint64_t *v812;
  int v813;
  unint64_t v815;
  char **v816;
  char *v817;
  uint64_t v818;
  char **v819;
  char *v820;
  unint64_t v821;
  unint64_t v822;
  char *v823;
  unint64_t *v824;
  unint64_t v825;
  unint64_t v826;
  char *v827;
  uint64_t v828;
  uint64_t v829;
  void *v830;
  unint64_t *v831;
  unint64_t v832;
  unint64_t v833;
  char *v834;
  void *v835;
  unint64_t *v836;
  unint64_t v837;
  unint64_t v838;
  uint64_t v839;
  uint64_t v840;
  void *v841;
  unint64_t *v842;
  unint64_t v843;
  unint64_t v844;
  char *v845;
  void *v846;
  void *v847;
  std::__shared_weak_count *v848;
  unint64_t *v849;
  unint64_t v850;
  std::__shared_weak_count *v851;
  unint64_t *v852;
  unint64_t v853;
  std::__shared_weak_count *v854;
  unint64_t *v855;
  unint64_t v856;
  unint64_t *v857;
  unint64_t v858;
  _QWORD *v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  unint64_t v864;
  unint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  _QWORD *v869;
  _QWORD *v870;
  unint64_t v871;
  unint64_t v872;
  uint64_t v873;
  uint64_t *v874;
  uint64_t *v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  _BYTE *v879;
  _BYTE *v880;
  int64_t v881;
  char *v882;
  char *v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  unint64_t v887;
  uint64_t v888;
  _QWORD *v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  unint64_t v893;
  char *v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  char *v900;
  const void *v901;
  char *v902;
  char *v903;
  uint64_t v904;
  __int128 v905;
  std::__shared_weak_count *v906;
  unint64_t *p_shared_owners;
  unint64_t v908;
  void *v909;
  void *v910;
  uint64_t v911;
  uint64_t v912;
  unint64_t *v913;
  unint64_t v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  unint64_t *v919;
  unint64_t v920;
  unint64_t v921;
  uint64_t v922;
  uint64_t v923;
  uint64_t v924;
  void *v925;
  unint64_t *v926;
  unint64_t v927;
  unint64_t v928;
  uint64_t v929;
  void *v930;
  unint64_t *v931;
  unint64_t v932;
  unint64_t v933;
  uint64_t v934;
  uint64_t v935;
  void *v936;
  unint64_t *v937;
  unint64_t v938;
  unint64_t v939;
  _QWORD *v940;
  void *v941;
  void *v942;
  std::__shared_weak_count *v943;
  unint64_t *v944;
  unint64_t v945;
  unint64_t *v946;
  unint64_t v947;
  unint64_t v948;
  uint64_t v949;
  uint64_t v950;
  uint64_t v951;
  unint64_t *v952;
  unint64_t v953;
  unint64_t v954;
  uint64_t v955;
  uint64_t v956;
  uint64_t v957;
  void *v958;
  unint64_t *v959;
  unint64_t v960;
  unint64_t v961;
  uint64_t v962;
  void *v963;
  unint64_t *v964;
  unint64_t v965;
  unint64_t v966;
  uint64_t v967;
  uint64_t v968;
  void *v969;
  unint64_t *v970;
  unint64_t v971;
  unint64_t v972;
  _QWORD *v973;
  void *v974;
  void *v975;
  std::__shared_weak_count *v976;
  unint64_t *v977;
  unint64_t v978;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  void *v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t *v985;
  unint64_t v986;
  _QWORD *v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  unint64_t v992;
  unint64_t v993;
  uint64_t v994;
  uint64_t v995;
  uint64_t v996;
  _QWORD *v997;
  _QWORD *v998;
  unint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t *v1002;
  uint64_t *v1003;
  uint64_t v1004;
  uint64_t v1005;
  uint64_t v1006;
  std::__shared_weak_count *v1007;
  unint64_t *v1008;
  unint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t *v1012;
  unint64_t v1013;
  _QWORD *v1014;
  uint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  unint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  _QWORD *v1024;
  _QWORD *v1025;
  unint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  uint64_t *v1029;
  uint64_t *v1030;
  uint64_t v1031;
  uint64_t v1032;
  uint64_t v1033;
  std::__shared_weak_count *v1034;
  unint64_t *v1035;
  unint64_t v1036;
  unint64_t *v1037;
  unint64_t v1038;
  unint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  unint64_t *v1043;
  unint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  uint64_t v1048;
  void *v1049;
  unint64_t *v1050;
  unint64_t v1051;
  unint64_t v1052;
  uint64_t v1053;
  void *v1054;
  unint64_t *v1055;
  unint64_t v1056;
  unint64_t v1057;
  uint64_t v1058;
  uint64_t v1059;
  void *v1060;
  unint64_t *v1061;
  unint64_t v1062;
  unint64_t v1063;
  _QWORD *v1064;
  void *v1065;
  void *v1066;
  std::__shared_weak_count *v1067;
  unint64_t *v1068;
  unint64_t v1069;
  uint64_t v1070;
  __int128 v1071;
  std::__shared_weak_count *v1072;
  unint64_t *v1073;
  unint64_t v1074;
  void *v1075;
  void *v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  __int128 v1080;
  std::__shared_weak_count *v1081;
  unint64_t *v1082;
  unint64_t v1083;
  void *v1084;
  void *v1085;
  uint64_t v1086;
  uint64_t v1087;
  char *v1088;
  unint64_t *v1089;
  int v1090;
  unint64_t v1091;
  unint64_t *v1092;
  int v1093;
  unint64_t v1095;
  char **v1096;
  char *v1097;
  uint64_t v1098;
  char **v1099;
  char *v1100;
  unint64_t v1101;
  unint64_t v1102;
  char *v1103;
  unint64_t *v1104;
  unint64_t v1105;
  unint64_t v1106;
  char *v1107;
  uint64_t v1108;
  uint64_t v1109;
  void *v1110;
  unint64_t *v1111;
  unint64_t v1112;
  unint64_t v1113;
  char *v1114;
  void *v1115;
  unint64_t *v1116;
  unint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  uint64_t v1120;
  void *v1121;
  unint64_t *v1122;
  unint64_t v1123;
  unint64_t v1124;
  char *v1125;
  void *v1126;
  void *v1127;
  std::__shared_weak_count *v1128;
  unint64_t *v1129;
  unint64_t v1130;
  std::__shared_weak_count *v1131;
  unint64_t *v1132;
  unint64_t v1133;
  std::__shared_weak_count *v1134;
  unint64_t *v1135;
  unint64_t v1136;
  unint64_t *v1137;
  uint64_t v1140;
  std::__shared_weak_count *v1141;
  void *v1142;
  uint64_t *v1143;
  void *v1144;
  void *v1145;
  uint64_t v1146;
  uint64_t v1147;
  std::__shared_weak_count *v1148;
  void *v1149;
  uint64_t *v1150;
  void *v1151;
  void *v1152;
  uint64_t v1153;
  uint64_t v1154;
  std::__shared_weak_count *v1155;
  void *v1156;
  uint64_t *v1157;
  void *v1158;
  void *v1159;
  uint64_t v1160;
  uint64_t v1161;
  std::__shared_weak_count *v1162;
  void *v1163;
  uint64_t *v1164;
  void *v1165;
  void *v1166;
  uint64_t v1167;
  void *v1168;
  void *v1169;
  uint64_t v1170;
  void *v1171;
  __int128 v1172;
  __int128 v1173;
  uint64_t v1174;
  __int128 v1175;
  uint64_t v1176;
  uint64_t v1177;
  void *v1178;
  void *v1179;
  uint64_t v1180;
  void *__src;
  __int128 v1182;
  __int128 v1183;
  void *v1184;
  __int128 __p;
  uint64_t v1186;
  uint64_t v1187;
  char *v1188;
  char *v1189;
  char *v1190;
  void *v1191;
  void *v1192;
  uint64_t v1193;
  void *v1194;
  void *v1195;
  uint64_t v1196;
  char *v1197;
  char *v1198;
  char *v1199;
  unsigned __int8 v1200;
  uint64_t v1201;
  char v1202;
  uint64_t v1203;
  char v1204;
  uint64_t v1205;
  char v1206;
  uint64_t v1207;

  v1207 = *MEMORY[0x1E0C80C00];
  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1154, (uint64_t)a1);
      if (v1160)
        goto LABEL_1547;
      v4 = (char *)v1157 - (_BYTE *)v1156;
      if (v1157 == v1156)
        goto LABEL_1176;
      v5 = v1154;
      if (!v1154)
        goto LABEL_1166;
      if ((unint64_t)(v4 - 8) < 8)
      {
        v5 = 1;
        v6 = (uint64_t *)v1156;
        do
        {
LABEL_1165:
          v863 = *v6++;
          v5 *= v863;
        }
        while (v6 != v1157);
        goto LABEL_1166;
      }
      v858 = ((unint64_t)(v4 - 8) >> 3) + 1;
      v6 = (uint64_t *)((char *)v1156 + 8 * (v858 & 0x3FFFFFFFFFFFFFFELL));
      v859 = (char *)v1156 + 8;
      v860 = 1;
      v861 = v858 & 0x3FFFFFFFFFFFFFFELL;
      v862 = 1;
      do
      {
        v860 *= *(v859 - 1);
        v862 *= *v859;
        v859 += 2;
        v861 -= 2;
      }
      while (v861);
      v5 = v862 * v860;
      if (v858 != (v858 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_1165;
LABEL_1166:
      v864 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v864 = 1;
      if (v864 < 2)
      {
        v865 = 0;
        v866 = 0;
LABEL_1173:
        v872 = v864 - v865;
        v873 = 8 * v865;
        v874 = (uint64_t *)((char *)v1158 + v873);
        v875 = (uint64_t *)((char *)v1156 + v873);
        do
        {
          v876 = *v875++;
          v877 = v876 - 1;
          v878 = *v874++;
          v866 += v878 * v877;
          --v872;
        }
        while (v872);
        goto LABEL_1175;
      }
      v867 = 0;
      v868 = 0;
      v865 = v864 & 0xFFFFFFFFFFFFFFFELL;
      v869 = (char *)v1156 + 8;
      v870 = (char *)v1158 + 8;
      v871 = v864 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v867 += *(v870 - 1) * (*(v869 - 1) - 1);
        v868 += *v870 * (*v869 - 1);
        v869 += 2;
        v870 += 2;
        v871 -= 2;
      }
      while (v871);
      v866 = v868 + v867;
      if (v864 != v865)
        goto LABEL_1173;
LABEL_1175:
      if (v5 != v866 + 1)
LABEL_1547:
        nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
LABEL_1176:
      v1194 = 0;
      v1195 = 0;
      v1196 = 0;
      v1191 = 0;
      v1192 = 0;
      v1193 = 0;
      v1188 = 0;
      v1189 = 0;
      v1190 = 0;
      v880 = *(_BYTE **)(a2 + 24);
      v879 = *(_BYTE **)(a2 + 32);
      v881 = v879 - v880;
      if (v879 == v880)
      {
        v882 = 0;
        v883 = 0;
      }
      else
      {
        if (v881 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v882 = (char *)operator new(v879 - v880);
        v1188 = v882;
        v1189 = v882;
        v883 = &v882[8 * (v881 >> 3)];
        v1190 = v883;
        memcpy(v882, v880, v881);
        v1189 = v883;
      }
      v884 = (v883 - v882) >> 3;
      v885 = v884 - 1;
      v886 = a2;
      if (v884 == 1)
      {
        v888 = 1;
LABEL_1190:
        v896 = 0;
        v897 = 0;
        v898 = *(_QWORD *)&v882[8 * v885];
        while (1)
        {
          v899 = v1154;
          v1172 = 0uLL;
          v1171 = 0;
          if (v898)
          {
            if (v898 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v900 = (char *)operator new(4 * v898);
            v901 = (const void *)(v899 + 4 * v896);
            v1171 = v900;
            *(_QWORD *)&v1172 = v900;
            v902 = &v900[4 * v898];
            *((_QWORD *)&v1172 + 1) = v902;
            memcpy(v900, v901, 4 * v898);
            *(_QWORD *)&v1172 = v902;
          }
          v903 = (char *)operator new(8uLL);
          v1197 = v903;
          *(_QWORD *)v903 = v898;
          v1198 = v903 + 8;
          v1199 = v903 + 8;
          v1178 = 0;
          v1179 = 0;
          v1180 = 0;
          nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__src, (uint64_t)&v1171, &v1197, (char **)&v1178, 0);
          v1203 = 0;
          v1204 = 9;
          v904 = operator new();
          *(_QWORD *)v904 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v904 + 8));
          v1203 = v904;
          *(_QWORD *)v904 = 1;
          *(_DWORD *)(v904 + 8) = (_DWORD)__src;
          v905 = v1182;
          v1182 = 0uLL;
          v906 = *(std::__shared_weak_count **)(v904 + 24);
          *(_OWORD *)(v904 + 16) = v905;
          if (v906)
          {
            p_shared_owners = (unint64_t *)&v906->__shared_owners_;
            do
              v908 = __ldaxr(p_shared_owners);
            while (__stlxr(v908 - 1, p_shared_owners));
            if (!v908)
            {
              ((void (*)(std::__shared_weak_count *))v906->__on_zero_shared)(v906);
              std::__shared_weak_count::__release_weak(v906);
            }
          }
          v909 = *(void **)(v904 + 32);
          if (v909)
          {
            *(_QWORD *)(v904 + 40) = v909;
            operator delete(v909);
            *(_QWORD *)(v904 + 32) = 0;
            *(_QWORD *)(v904 + 40) = 0;
            *(_QWORD *)(v904 + 48) = 0;
          }
          v910 = *(void **)(v904 + 56);
          *(_OWORD *)(v904 + 32) = v1183;
          *(_QWORD *)(v904 + 48) = v1184;
          v1184 = 0;
          v1183 = 0uLL;
          v886 = a2;
          if (v910)
          {
            *(_QWORD *)(v904 + 64) = v910;
            operator delete(v910);
            *(_QWORD *)(v904 + 56) = 0;
            *(_QWORD *)(v904 + 64) = 0;
            *(_QWORD *)(v904 + 72) = 0;
          }
          *(_OWORD *)(v904 + 56) = __p;
          v911 = v1186;
          v912 = v1187;
          v1186 = 0;
          __p = 0uLL;
          *(_QWORD *)(v904 + 72) = v911;
          *(_QWORD *)(v904 + 80) = v912;
          v1202 = 0;
          v1201 = *(int *)(a2 + 80);
          nitro::nitro_builtins::TopK_1d((nitro::nitro_builtins *)&v1203, (const nitro::flexible_type *)&v1201, (uint64_t)&v1205);
          switch(v1202)
          {
            case 2:
              v913 = (unint64_t *)v1201;
              do
              {
                v914 = __ldaxr(v913);
                v915 = v914 - 1;
              }
              while (__stlxr(v915, v913));
              if (!v915)
              {
                v916 = v1201;
                if (v1201)
                {
                  if (*(char *)(v1201 + 31) < 0)
                    operator delete(*(void **)(v1201 + 8));
                  v917 = v916;
                  v918 = 0x1012C404EF22A49;
                  goto LABEL_1238;
                }
              }
              break;
            case 3:
              v926 = (unint64_t *)v1201;
              do
              {
                v927 = __ldaxr(v926);
                v928 = v927 - 1;
              }
              while (__stlxr(v928, v926));
              if (!v928)
              {
                v929 = v1201;
                if (v1201)
                {
                  v930 = *(void **)(v1201 + 8);
                  if (v930)
                  {
                    *(_QWORD *)(v1201 + 16) = v930;
                    operator delete(v930);
                  }
                  v917 = v929;
                  v918 = 0x1080C409938AC02;
                  goto LABEL_1238;
                }
              }
              break;
            case 4:
              v919 = (unint64_t *)v1201;
              do
              {
                v920 = __ldaxr(v919);
                v921 = v920 - 1;
              }
              while (__stlxr(v921, v919));
              if (!v921)
              {
                v922 = v1201;
                if (v1201)
                {
                  v923 = *(_QWORD *)(v1201 + 8);
                  if (v923)
                  {
                    v924 = *(_QWORD *)(v1201 + 16);
                    v925 = *(void **)(v1201 + 8);
                    if (v924 != v923)
                    {
                      do
                      {
                        v924 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v922 + 24, v924);
                      }
                      while (v924 != v923);
                      v925 = *(void **)(v922 + 8);
                    }
                    *(_QWORD *)(v922 + 16) = v923;
                    operator delete(v925);
                    v886 = a2;
                  }
                  goto LABEL_1237;
                }
              }
              break;
            case 5:
              v931 = (unint64_t *)v1201;
              do
              {
                v932 = __ldaxr(v931);
                v933 = v932 - 1;
              }
              while (__stlxr(v933, v931));
              if (!v933)
              {
                v922 = v1201;
                if (v1201)
                {
                  v934 = *(_QWORD *)(v1201 + 8);
                  if (v934)
                  {
                    v935 = *(_QWORD *)(v1201 + 16);
                    v936 = *(void **)(v1201 + 8);
                    if (v935 != v934)
                    {
                      do
                        v935 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v935 - 32);
                      while (v935 != v934);
                      v936 = *(void **)(v922 + 8);
                    }
                    *(_QWORD *)(v922 + 16) = v934;
                    operator delete(v936);
                  }
LABEL_1237:
                  v917 = v922;
                  v918 = 0x1020C405E66F15BLL;
LABEL_1238:
                  MEMORY[0x19401CD90](v917, v918);
                }
              }
              break;
            case 9:
              v937 = (unint64_t *)v1201;
              do
              {
                v938 = __ldaxr(v937);
                v939 = v938 - 1;
              }
              while (__stlxr(v939, v937));
              if (!v939)
              {
                v940 = (_QWORD *)v1201;
                if (v1201)
                {
                  v941 = *(void **)(v1201 + 56);
                  if (v941)
                  {
                    *(_QWORD *)(v1201 + 64) = v941;
                    operator delete(v941);
                  }
                  v942 = (void *)v940[4];
                  if (v942)
                  {
                    v940[5] = v942;
                    operator delete(v942);
                  }
                  v943 = (std::__shared_weak_count *)v940[3];
                  if (v943)
                  {
                    v944 = (unint64_t *)&v943->__shared_owners_;
                    do
                      v945 = __ldaxr(v944);
                    while (__stlxr(v945 - 1, v944));
                    if (!v945)
                    {
                      ((void (*)(std::__shared_weak_count *))v943->__on_zero_shared)(v943);
                      std::__shared_weak_count::__release_weak(v943);
                    }
                  }
                  MEMORY[0x19401CD90](v940, 0x10B0C4002311774);
                  v886 = a2;
                }
              }
              break;
            default:
              break;
          }
          switch(v1204)
          {
            case 2:
              v946 = (unint64_t *)v1203;
              do
              {
                v947 = __ldaxr(v946);
                v948 = v947 - 1;
              }
              while (__stlxr(v948, v946));
              if (!v948)
              {
                v949 = v1203;
                if (v1203)
                {
                  if (*(char *)(v1203 + 31) < 0)
                    operator delete(*(void **)(v1203 + 8));
                  v950 = v949;
                  v951 = 0x1012C404EF22A49;
                  goto LABEL_1287;
                }
              }
              break;
            case 3:
              v959 = (unint64_t *)v1203;
              do
              {
                v960 = __ldaxr(v959);
                v961 = v960 - 1;
              }
              while (__stlxr(v961, v959));
              if (!v961)
              {
                v962 = v1203;
                if (v1203)
                {
                  v963 = *(void **)(v1203 + 8);
                  if (v963)
                  {
                    *(_QWORD *)(v1203 + 16) = v963;
                    operator delete(v963);
                  }
                  v950 = v962;
                  v951 = 0x1080C409938AC02;
                  goto LABEL_1287;
                }
              }
              break;
            case 4:
              v952 = (unint64_t *)v1203;
              do
              {
                v953 = __ldaxr(v952);
                v954 = v953 - 1;
              }
              while (__stlxr(v954, v952));
              if (!v954)
              {
                v955 = v1203;
                if (v1203)
                {
                  v956 = *(_QWORD *)(v1203 + 8);
                  if (v956)
                  {
                    v957 = *(_QWORD *)(v1203 + 16);
                    v958 = *(void **)(v1203 + 8);
                    if (v957 != v956)
                    {
                      do
                      {
                        v957 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v955 + 24, v957);
                      }
                      while (v957 != v956);
                      v958 = *(void **)(v955 + 8);
                    }
                    *(_QWORD *)(v955 + 16) = v956;
                    operator delete(v958);
                    v886 = a2;
                  }
                  goto LABEL_1286;
                }
              }
              break;
            case 5:
              v964 = (unint64_t *)v1203;
              do
              {
                v965 = __ldaxr(v964);
                v966 = v965 - 1;
              }
              while (__stlxr(v966, v964));
              if (!v966)
              {
                v955 = v1203;
                if (v1203)
                {
                  v967 = *(_QWORD *)(v1203 + 8);
                  if (v967)
                  {
                    v968 = *(_QWORD *)(v1203 + 16);
                    v969 = *(void **)(v1203 + 8);
                    if (v968 != v967)
                    {
                      do
                        v968 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v968 - 32);
                      while (v968 != v967);
                      v969 = *(void **)(v955 + 8);
                    }
                    *(_QWORD *)(v955 + 16) = v967;
                    operator delete(v969);
                  }
LABEL_1286:
                  v950 = v955;
                  v951 = 0x1020C405E66F15BLL;
LABEL_1287:
                  MEMORY[0x19401CD90](v950, v951);
                }
              }
              break;
            case 9:
              v970 = (unint64_t *)v1203;
              do
              {
                v971 = __ldaxr(v970);
                v972 = v971 - 1;
              }
              while (__stlxr(v972, v970));
              if (!v972)
              {
                v973 = (_QWORD *)v1203;
                if (v1203)
                {
                  v974 = *(void **)(v1203 + 56);
                  if (v974)
                  {
                    *(_QWORD *)(v1203 + 64) = v974;
                    operator delete(v974);
                  }
                  v975 = (void *)v973[4];
                  if (v975)
                  {
                    v973[5] = v975;
                    operator delete(v975);
                  }
                  v976 = (std::__shared_weak_count *)v973[3];
                  if (v976)
                  {
                    v977 = (unint64_t *)&v976->__shared_owners_;
                    do
                      v978 = __ldaxr(v977);
                    while (__stlxr(v978 - 1, v977));
                    if (!v978)
                    {
                      ((void (*)(std::__shared_weak_count *))v976->__on_zero_shared)(v976);
                      std::__shared_weak_count::__release_weak(v976);
                    }
                  }
                  MEMORY[0x19401CD90](v973, 0x10B0C4002311774);
                  v886 = a2;
                }
              }
              break;
            default:
              break;
          }
          v1203 = 0;
          v1204 = 0;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if ((_QWORD)v1183)
          {
            *((_QWORD *)&v1183 + 1) = v1183;
            operator delete((void *)v1183);
          }
          v979 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
          if (!*((_QWORD *)&v1182 + 1))
            break;
          v980 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
          do
            v981 = __ldaxr(v980);
          while (__stlxr(v981 - 1, v980));
          if (v981)
            break;
          ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
          std::__shared_weak_count::__release_weak(v979);
          v982 = v1178;
          if (v1178)
            goto LABEL_1311;
LABEL_1312:
          if (v1197)
          {
            v1198 = v1197;
            operator delete(v1197);
          }
          nitro::ndarray<int>::ndarray((uint64_t)&__src, **(_QWORD **)(v1205 + 8) + 8);
          if (v1186)
LABEL_1423:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v983 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 != *((_QWORD *)&v1182 + 1))
          {
            v984 = (uint64_t)__src;
            if (__src)
            {
              if ((unint64_t)(v983 - 8) < 8)
              {
                v984 = 1;
                v985 = (uint64_t *)*((_QWORD *)&v1182 + 1);
                goto LABEL_1324;
              }
              v986 = ((unint64_t)(v983 - 8) >> 3) + 1;
              v985 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v986 & 0x3FFFFFFFFFFFFFFELL));
              v987 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
              v988 = v986 & 0x3FFFFFFFFFFFFFFELL;
              v989 = 1;
              v990 = 1;
              do
              {
                v989 *= *(v987 - 1);
                v990 *= *v987;
                v987 += 2;
                v988 -= 2;
              }
              while (v988);
              v984 = v990 * v989;
              if (v986 != (v986 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_1324:
                  v991 = *v985++;
                  v984 *= v991;
                }
                while (v985 != (uint64_t *)v1183);
              }
            }
            v992 = v983 >> 3;
            if ((unint64_t)(v983 >> 3) <= 1)
              v992 = 1;
            if (v992 < 2)
            {
              v993 = 0;
              v994 = 0;
              goto LABEL_1332;
            }
            v995 = 0;
            v996 = 0;
            v993 = v992 & 0xFFFFFFFFFFFFFFFELL;
            v997 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v998 = (char *)v1184 + 8;
            v999 = v992 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v995 += *(v998 - 1) * (*(v997 - 1) - 1);
              v996 += *v998 * (*v997 - 1);
              v997 += 2;
              v998 += 2;
              v999 -= 2;
            }
            while (v999);
            v994 = v996 + v995;
            if (v992 != v993)
            {
LABEL_1332:
              v1000 = v992 - v993;
              v1001 = 8 * v993;
              v1002 = (uint64_t *)((char *)v1184 + v1001);
              v1003 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v1001);
              do
              {
                v1004 = *v1003++;
                v1005 = v1004 - 1;
                v1006 = *v1002++;
                v994 += v1006 * v1005;
                --v1000;
              }
              while (v1000);
            }
            if (v984 != v994 + 1)
              goto LABEL_1423;
          }
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v1007 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v1008 = (unint64_t *)(v1182 + 8);
            do
              v1009 = __ldaxr(v1008);
            while (__stlxr(v1009 - 1, v1008));
            if (!v1009)
            {
              ((void (*)(std::__shared_weak_count *))v1007->__on_zero_shared)(v1007);
              std::__shared_weak_count::__release_weak(v1007);
            }
          }
          nitro::ndarray<int>::ndarray((uint64_t)&__src, *(_QWORD *)(*(_QWORD *)(v1205 + 8) + 16) + 8);
          if (v1186)
LABEL_1424:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v1010 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 == *((_QWORD *)&v1182 + 1))
            goto LABEL_1363;
          v1011 = (uint64_t)__src;
          if (__src)
          {
            if ((unint64_t)(v1010 - 8) < 8)
            {
              v1011 = 1;
              v1012 = (uint64_t *)*((_QWORD *)&v1182 + 1);
              do
              {
LABEL_1352:
                v1018 = *v1012++;
                v1011 *= v1018;
              }
              while (v1012 != (uint64_t *)v1183);
              goto LABEL_1353;
            }
            v1013 = ((unint64_t)(v1010 - 8) >> 3) + 1;
            v1012 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v1013 & 0x3FFFFFFFFFFFFFFELL));
            v1014 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v1015 = v1013 & 0x3FFFFFFFFFFFFFFELL;
            v1016 = 1;
            v1017 = 1;
            do
            {
              v1016 *= *(v1014 - 1);
              v1017 *= *v1014;
              v1014 += 2;
              v1015 -= 2;
            }
            while (v1015);
            v1011 = v1017 * v1016;
            if (v1013 != (v1013 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_1352;
          }
LABEL_1353:
          v1019 = v1010 >> 3;
          if ((unint64_t)(v1010 >> 3) <= 1)
            v1019 = 1;
          if (v1019 < 2)
          {
            v1020 = 0;
            v1021 = 0;
LABEL_1360:
            v1027 = v1019 - v1020;
            v1028 = 8 * v1020;
            v1029 = (uint64_t *)((char *)v1184 + v1028);
            v1030 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v1028);
            do
            {
              v1031 = *v1030++;
              v1032 = v1031 - 1;
              v1033 = *v1029++;
              v1021 += v1033 * v1032;
              --v1027;
            }
            while (v1027);
            goto LABEL_1362;
          }
          v1022 = 0;
          v1023 = 0;
          v1020 = v1019 & 0xFFFFFFFFFFFFFFFELL;
          v1024 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
          v1025 = (char *)v1184 + 8;
          v1026 = v1019 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1022 += *(v1025 - 1) * (*(v1024 - 1) - 1);
            v1023 += *v1025 * (*v1024 - 1);
            v1024 += 2;
            v1025 += 2;
            v1026 -= 2;
          }
          while (v1026);
          v1021 = v1023 + v1022;
          if (v1019 != v1020)
            goto LABEL_1360;
LABEL_1362:
          if (v1011 != v1021 + 1)
            goto LABEL_1424;
LABEL_1363:
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v1034 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v1035 = (unint64_t *)(v1182 + 8);
            do
              v1036 = __ldaxr(v1035);
            while (__stlxr(v1036 - 1, v1035));
            if (!v1036)
            {
              ((void (*)(std::__shared_weak_count *))v1034->__on_zero_shared)(v1034);
              std::__shared_weak_count::__release_weak(v1034);
            }
          }
          std::vector<int>::__insert_with_size[abi:ne180100]<int *,int *>((unint64_t *)&v1194, v1195, (char *)__src, (char *)__src + 4 * *(int *)(v886 + 80), *(int *)(v886 + 80));
          std::vector<int>::__insert_with_size[abi:ne180100]<int *,int *>((unint64_t *)&v1191, v1192, (char *)__src, (char *)__src + 4 * *(int *)(v886 + 80), *(int *)(v886 + 80));
          switch(v1206)
          {
            case 2:
              v1037 = (unint64_t *)v1205;
              do
              {
                v1038 = __ldaxr(v1037);
                v1039 = v1038 - 1;
              }
              while (__stlxr(v1039, v1037));
              if (!v1039)
              {
                v1040 = v1205;
                if (v1205)
                {
                  if (*(char *)(v1205 + 31) < 0)
                    operator delete(*(void **)(v1205 + 8));
                  v1041 = v1040;
                  v1042 = 0x1012C404EF22A49;
                  goto LABEL_1406;
                }
              }
              break;
            case 3:
              v1050 = (unint64_t *)v1205;
              do
              {
                v1051 = __ldaxr(v1050);
                v1052 = v1051 - 1;
              }
              while (__stlxr(v1052, v1050));
              if (!v1052)
              {
                v1053 = v1205;
                if (v1205)
                {
                  v1054 = *(void **)(v1205 + 8);
                  if (v1054)
                  {
                    *(_QWORD *)(v1205 + 16) = v1054;
                    operator delete(v1054);
                  }
                  v1041 = v1053;
                  v1042 = 0x1080C409938AC02;
                  goto LABEL_1406;
                }
              }
              break;
            case 4:
              v1043 = (unint64_t *)v1205;
              do
              {
                v1044 = __ldaxr(v1043);
                v1045 = v1044 - 1;
              }
              while (__stlxr(v1045, v1043));
              if (!v1045)
              {
                v1046 = v1205;
                if (v1205)
                {
                  v1047 = *(_QWORD *)(v1205 + 8);
                  if (v1047)
                  {
                    v1048 = *(_QWORD *)(v1205 + 16);
                    v1049 = *(void **)(v1205 + 8);
                    if (v1048 != v1047)
                    {
                      do
                      {
                        v1048 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v1046 + 24, v1048);
                      }
                      while (v1048 != v1047);
                      v1049 = *(void **)(v1046 + 8);
                    }
                    *(_QWORD *)(v1046 + 16) = v1047;
                    operator delete(v1049);
                    v886 = a2;
                  }
                  goto LABEL_1405;
                }
              }
              break;
            case 5:
              v1055 = (unint64_t *)v1205;
              do
              {
                v1056 = __ldaxr(v1055);
                v1057 = v1056 - 1;
              }
              while (__stlxr(v1057, v1055));
              if (!v1057)
              {
                v1046 = v1205;
                if (v1205)
                {
                  v1058 = *(_QWORD *)(v1205 + 8);
                  if (v1058)
                  {
                    v1059 = *(_QWORD *)(v1205 + 16);
                    v1060 = *(void **)(v1205 + 8);
                    if (v1059 != v1058)
                    {
                      do
                        v1059 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v1059 - 32);
                      while (v1059 != v1058);
                      v1060 = *(void **)(v1046 + 8);
                    }
                    *(_QWORD *)(v1046 + 16) = v1058;
                    operator delete(v1060);
                  }
LABEL_1405:
                  v1041 = v1046;
                  v1042 = 0x1020C405E66F15BLL;
LABEL_1406:
                  MEMORY[0x19401CD90](v1041, v1042);
                }
              }
              break;
            case 9:
              v1061 = (unint64_t *)v1205;
              do
              {
                v1062 = __ldaxr(v1061);
                v1063 = v1062 - 1;
              }
              while (__stlxr(v1063, v1061));
              if (!v1063)
              {
                v1064 = (_QWORD *)v1205;
                if (v1205)
                {
                  v1065 = *(void **)(v1205 + 56);
                  if (v1065)
                  {
                    *(_QWORD *)(v1205 + 64) = v1065;
                    operator delete(v1065);
                  }
                  v1066 = (void *)v1064[4];
                  if (v1066)
                  {
                    v1064[5] = v1066;
                    operator delete(v1066);
                  }
                  v1067 = (std::__shared_weak_count *)v1064[3];
                  if (v1067)
                  {
                    v1068 = (unint64_t *)&v1067->__shared_owners_;
                    do
                      v1069 = __ldaxr(v1068);
                    while (__stlxr(v1069 - 1, v1068));
                    if (!v1069)
                    {
                      ((void (*)(std::__shared_weak_count *))v1067->__on_zero_shared)(v1067);
                      std::__shared_weak_count::__release_weak(v1067);
                    }
                  }
                  MEMORY[0x19401CD90](v1064, 0x10B0C4002311774);
                  v886 = a2;
                }
              }
              break;
            default:
              break;
          }
          if (v1171)
          {
            *(_QWORD *)&v1172 = v1171;
            operator delete(v1171);
          }
          v896 += v898;
          if (++v897 == v888)
          {
            v882 = v1188;
            v885 = ((v1189 - v1188) >> 3) - 1;
            goto LABEL_1426;
          }
        }
        v982 = v1178;
        if (!v1178)
          goto LABEL_1312;
LABEL_1311:
        v1179 = v982;
        operator delete(v982);
        goto LABEL_1312;
      }
      if (v884 == 2)
      {
        v887 = 0;
        v888 = 1;
LABEL_1187:
        v893 = ~v887 + v884;
        v894 = &v882[8 * v887];
        do
        {
          v895 = *(_QWORD *)v894;
          v894 += 8;
          v888 *= v895;
          --v893;
        }
        while (v893);
        goto LABEL_1189;
      }
      v887 = v885 & 0xFFFFFFFFFFFFFFFELL;
      v889 = v882 + 8;
      v890 = 1;
      v891 = v885 & 0xFFFFFFFFFFFFFFFELL;
      v892 = 1;
      do
      {
        v890 *= *(v889 - 1);
        v892 *= *v889;
        v889 += 2;
        v891 -= 2;
      }
      while (v891);
      v888 = v892 * v890;
      if (v885 != v887)
        goto LABEL_1187;
LABEL_1189:
      if (v888)
        goto LABEL_1190;
LABEL_1426:
      *(_QWORD *)&v882[8 * v885] = *(int *)(v886 + 80);
      v1178 = 0;
      v1179 = 0;
      v1180 = 0;
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&__src, (uint64_t)&v1194, &v1188, (char **)&v1178, 0);
      v1197 = 0;
      LOBYTE(v1198) = 9;
      v1070 = operator new();
      *(_QWORD *)v1070 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v1070 + 8));
      v1197 = (char *)v1070;
      *(_QWORD *)v1070 = 1;
      *(_DWORD *)(v1070 + 8) = (_DWORD)__src;
      v1071 = v1182;
      v1182 = 0uLL;
      v1072 = *(std::__shared_weak_count **)(v1070 + 24);
      *(_OWORD *)(v1070 + 16) = v1071;
      if (v1072)
      {
        v1073 = (unint64_t *)&v1072->__shared_owners_;
        do
          v1074 = __ldaxr(v1073);
        while (__stlxr(v1074 - 1, v1073));
        if (!v1074)
        {
          ((void (*)(std::__shared_weak_count *))v1072->__on_zero_shared)(v1072);
          std::__shared_weak_count::__release_weak(v1072);
        }
      }
      v1075 = *(void **)(v1070 + 32);
      if (v1075)
      {
        *(_QWORD *)(v1070 + 40) = v1075;
        operator delete(v1075);
        *(_QWORD *)(v1070 + 32) = 0;
        *(_QWORD *)(v1070 + 40) = 0;
        *(_QWORD *)(v1070 + 48) = 0;
      }
      v1076 = *(void **)(v1070 + 56);
      *(_OWORD *)(v1070 + 32) = v1183;
      *(_QWORD *)(v1070 + 48) = v1184;
      v1184 = 0;
      v1183 = 0uLL;
      if (v1076)
      {
        *(_QWORD *)(v1070 + 64) = v1076;
        operator delete(v1076);
        *(_QWORD *)(v1070 + 56) = 0;
        *(_QWORD *)(v1070 + 64) = 0;
        *(_QWORD *)(v1070 + 72) = 0;
      }
      *(_OWORD *)(v1070 + 56) = __p;
      v1077 = v1186;
      v1078 = v1187;
      v1186 = 0;
      __p = 0uLL;
      *(_QWORD *)(v1070 + 72) = v1077;
      *(_QWORD *)(v1070 + 80) = v1078;
      v1168 = 0;
      v1169 = 0;
      v1170 = 0;
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v1171, (uint64_t)&v1191, &v1188, (char **)&v1168, 0);
      v1199 = 0;
      v1200 = 9;
      v1079 = operator new();
      *(_QWORD *)v1079 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v1079 + 8));
      v1199 = (char *)v1079;
      *(_QWORD *)v1079 = 1;
      *(_DWORD *)(v1079 + 8) = (_DWORD)v1171;
      v1080 = v1172;
      v1172 = 0uLL;
      v1081 = *(std::__shared_weak_count **)(v1079 + 24);
      *(_OWORD *)(v1079 + 16) = v1080;
      if (v1081)
      {
        v1082 = (unint64_t *)&v1081->__shared_owners_;
        do
          v1083 = __ldaxr(v1082);
        while (__stlxr(v1083 - 1, v1082));
        if (!v1083)
        {
          ((void (*)(std::__shared_weak_count *))v1081->__on_zero_shared)(v1081);
          std::__shared_weak_count::__release_weak(v1081);
        }
      }
      v1084 = *(void **)(v1079 + 32);
      if (v1084)
      {
        *(_QWORD *)(v1079 + 40) = v1084;
        operator delete(v1084);
        *(_QWORD *)(v1079 + 32) = 0;
        *(_QWORD *)(v1079 + 40) = 0;
        *(_QWORD *)(v1079 + 48) = 0;
      }
      v1085 = *(void **)(v1079 + 56);
      *(_OWORD *)(v1079 + 32) = v1173;
      *(_QWORD *)(v1079 + 48) = v1174;
      v1174 = 0;
      v1173 = 0uLL;
      if (v1085)
      {
        *(_QWORD *)(v1079 + 64) = v1085;
        operator delete(v1085);
        *(_QWORD *)(v1079 + 56) = 0;
        *(_QWORD *)(v1079 + 64) = 0;
        *(_QWORD *)(v1079 + 72) = 0;
      }
      *(_OWORD *)(v1079 + 56) = v1175;
      v1086 = v1176;
      v1087 = v1177;
      v1176 = 0;
      v1175 = 0uLL;
      *(_QWORD *)(v1079 + 72) = v1086;
      *(_QWORD *)(v1079 + 80) = v1087;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v1088 = (char *)operator new(0x20uLL);
      *a3 = v1088;
      a3[1] = v1088;
      a3[2] = v1088 + 32;
      v1089 = (unint64_t *)v1197;
      *(_QWORD *)v1088 = v1197;
      v1090 = v1198;
      v1088[8] = (char)v1198;
      if ((v1090 - 2) < 4 || v1090 == 9)
      {
        do
          v1091 = __ldaxr(v1089);
        while (__stlxr(v1091 + 1, v1089));
      }
      v1092 = (unint64_t *)v1199;
      *((_QWORD *)v1088 + 2) = v1199;
      v1093 = v1200;
      v1088[24] = v1200;
      if ((v1093 - 2) < 4 || v1093 == 9)
      {
        do
          v1095 = __ldaxr(v1092);
        while (__stlxr(v1095 + 1, v1092));
      }
      v1096 = (char **)&v1201;
      a3[1] = v1088 + 32;
      do
      {
        v1099 = v1096;
        v1096 -= 2;
        switch(*((_BYTE *)v1099 - 8))
        {
          case 2:
            v1100 = *v1096;
            do
            {
              v1101 = __ldaxr((unint64_t *)v1100);
              v1102 = v1101 - 1;
            }
            while (__stlxr(v1102, (unint64_t *)v1100));
            if (!v1102)
            {
              v1103 = *v1096;
              if (!*v1096)
                goto LABEL_1456;
              if (v1103[31] < 0)
                operator delete(*((void **)v1103 + 1));
              v1097 = v1103;
              v1098 = 0x1012C404EF22A49;
              goto LABEL_1455;
            }
            break;
          case 3:
            v1111 = (unint64_t *)*v1096;
            do
            {
              v1112 = __ldaxr(v1111);
              v1113 = v1112 - 1;
            }
            while (__stlxr(v1113, v1111));
            if (!v1113)
            {
              v1114 = *v1096;
              if (!*v1096)
                goto LABEL_1456;
              v1115 = (void *)*((_QWORD *)v1114 + 1);
              if (v1115)
              {
                *((_QWORD *)v1114 + 2) = v1115;
                operator delete(v1115);
              }
              v1097 = v1114;
              v1098 = 0x1080C409938AC02;
              goto LABEL_1455;
            }
            break;
          case 4:
            v1104 = (unint64_t *)*v1096;
            do
            {
              v1105 = __ldaxr(v1104);
              v1106 = v1105 - 1;
            }
            while (__stlxr(v1106, v1104));
            if (!v1106)
            {
              v1107 = *v1096;
              if (!*v1096)
                goto LABEL_1456;
              v1108 = *((_QWORD *)v1107 + 1);
              if (v1108)
              {
                v1109 = *((_QWORD *)v1107 + 2);
                v1110 = (void *)*((_QWORD *)v1107 + 1);
                if (v1109 != v1108)
                {
                  do
                  {
                    v1109 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v1107 + 24), v1109);
                  }
                  while (v1109 != v1108);
                  v1110 = (void *)*((_QWORD *)v1107 + 1);
                }
                *((_QWORD *)v1107 + 2) = v1108;
                goto LABEL_1491;
              }
              goto LABEL_1492;
            }
            break;
          case 5:
            v1116 = (unint64_t *)*v1096;
            do
            {
              v1117 = __ldaxr(v1116);
              v1118 = v1117 - 1;
            }
            while (__stlxr(v1118, v1116));
            if (!v1118)
            {
              v1107 = *v1096;
              if (!*v1096)
                goto LABEL_1456;
              v1119 = *((_QWORD *)v1107 + 1);
              if (v1119)
              {
                v1120 = *((_QWORD *)v1107 + 2);
                v1121 = (void *)*((_QWORD *)v1107 + 1);
                if (v1120 != v1119)
                {
                  do
                    v1120 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v1120 - 32);
                  while (v1120 != v1119);
                  v1121 = (void *)*((_QWORD *)v1107 + 1);
                }
                *((_QWORD *)v1107 + 2) = v1119;
                v1110 = v1121;
LABEL_1491:
                operator delete(v1110);
              }
LABEL_1492:
              v1097 = v1107;
              v1098 = 0x1020C405E66F15BLL;
              goto LABEL_1455;
            }
            break;
          case 9:
            v1122 = (unint64_t *)*v1096;
            do
            {
              v1123 = __ldaxr(v1122);
              v1124 = v1123 - 1;
            }
            while (__stlxr(v1124, v1122));
            if (!v1124)
            {
              v1125 = *v1096;
              if (*v1096)
              {
                v1126 = (void *)*((_QWORD *)v1125 + 7);
                if (v1126)
                {
                  *((_QWORD *)v1125 + 8) = v1126;
                  operator delete(v1126);
                }
                v1127 = (void *)*((_QWORD *)v1125 + 4);
                if (v1127)
                {
                  *((_QWORD *)v1125 + 5) = v1127;
                  operator delete(v1127);
                }
                v1128 = (std::__shared_weak_count *)*((_QWORD *)v1125 + 3);
                if (v1128)
                {
                  v1129 = (unint64_t *)&v1128->__shared_owners_;
                  do
                    v1130 = __ldaxr(v1129);
                  while (__stlxr(v1130 - 1, v1129));
                  if (!v1130)
                  {
                    ((void (*)(std::__shared_weak_count *))v1128->__on_zero_shared)(v1128);
                    std::__shared_weak_count::__release_weak(v1128);
                  }
                }
                v1097 = v1125;
                v1098 = 0x10B0C4002311774;
LABEL_1455:
                MEMORY[0x19401CD90](v1097, v1098);
              }
LABEL_1456:
              *v1096 = 0;
            }
            break;
          default:
            break;
        }
        *(v1099 - 2) = 0;
        *((_BYTE *)v1099 - 8) = 0;
      }
      while (v1096 != &v1197);
      if ((_QWORD)v1175)
      {
        *((_QWORD *)&v1175 + 1) = v1175;
        operator delete((void *)v1175);
      }
      if ((_QWORD)v1173)
      {
        *((_QWORD *)&v1173 + 1) = v1173;
        operator delete((void *)v1173);
      }
      v1131 = (std::__shared_weak_count *)*((_QWORD *)&v1172 + 1);
      if (*((_QWORD *)&v1172 + 1))
      {
        v1132 = (unint64_t *)(*((_QWORD *)&v1172 + 1) + 8);
        do
          v1133 = __ldaxr(v1132);
        while (__stlxr(v1133 - 1, v1132));
        if (!v1133)
        {
          ((void (*)(std::__shared_weak_count *))v1131->__on_zero_shared)(v1131);
          std::__shared_weak_count::__release_weak(v1131);
        }
      }
      if (v1168)
      {
        v1169 = v1168;
        operator delete(v1168);
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((_QWORD)v1183)
      {
        *((_QWORD *)&v1183 + 1) = v1183;
        operator delete((void *)v1183);
      }
      v1134 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
      if (*((_QWORD *)&v1182 + 1))
      {
        v1135 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
        do
          v1136 = __ldaxr(v1135);
        while (__stlxr(v1136 - 1, v1135));
        if (!v1136)
        {
          ((void (*)(std::__shared_weak_count *))v1134->__on_zero_shared)(v1134);
          std::__shared_weak_count::__release_weak(v1134);
        }
      }
      if (v1178)
      {
        v1179 = v1178;
        operator delete(v1178);
      }
      if (v1188)
      {
        v1189 = v1188;
        operator delete(v1188);
      }
      if (v1191)
      {
        v1192 = v1191;
        operator delete(v1191);
      }
      if (v1194)
      {
        v1195 = v1194;
        operator delete(v1194);
      }
      if (v1158)
      {
        v1159 = v1158;
        operator delete(v1158);
      }
      if (v1156)
      {
        v1157 = (uint64_t *)v1156;
        operator delete(v1156);
      }
      v295 = v1155;
      if (!v1155)
        return;
      v1137 = (unint64_t *)&v1155->__shared_owners_;
      do
        v297 = __ldaxr(v1137);
      while (__stlxr(v297 - 1, v1137));
      goto LABEL_1541;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1161, (uint64_t)a1);
      if (v1167)
        goto LABEL_1546;
      v13 = (char *)v1164 - (_BYTE *)v1163;
      if (v1164 == v1163)
        goto LABEL_796;
      v14 = v1161;
      if (!v1161)
        goto LABEL_786;
      if ((unint64_t)(v13 - 8) < 8)
      {
        v14 = 1;
        v15 = (uint64_t *)v1163;
        do
        {
LABEL_785:
          v583 = *v15++;
          v14 *= v583;
        }
        while (v15 != v1164);
        goto LABEL_786;
      }
      v578 = ((unint64_t)(v13 - 8) >> 3) + 1;
      v15 = (uint64_t *)((char *)v1163 + 8 * (v578 & 0x3FFFFFFFFFFFFFFELL));
      v579 = (char *)v1163 + 8;
      v580 = 1;
      v581 = v578 & 0x3FFFFFFFFFFFFFFELL;
      v582 = 1;
      do
      {
        v580 *= *(v579 - 1);
        v582 *= *v579;
        v579 += 2;
        v581 -= 2;
      }
      while (v581);
      v14 = v582 * v580;
      if (v578 != (v578 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_785;
LABEL_786:
      v584 = v13 >> 3;
      if ((unint64_t)(v13 >> 3) <= 1)
        v584 = 1;
      if (v584 < 2)
      {
        v585 = 0;
        v586 = 0;
LABEL_793:
        v592 = v584 - v585;
        v593 = 8 * v585;
        v594 = (uint64_t *)((char *)v1165 + v593);
        v595 = (uint64_t *)((char *)v1163 + v593);
        do
        {
          v596 = *v595++;
          v597 = v596 - 1;
          v598 = *v594++;
          v586 += v598 * v597;
          --v592;
        }
        while (v592);
        goto LABEL_795;
      }
      v587 = 0;
      v588 = 0;
      v585 = v584 & 0xFFFFFFFFFFFFFFFELL;
      v589 = (char *)v1163 + 8;
      v590 = (char *)v1165 + 8;
      v591 = v584 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v587 += *(v590 - 1) * (*(v589 - 1) - 1);
        v588 += *v590 * (*v589 - 1);
        v589 += 2;
        v590 += 2;
        v591 -= 2;
      }
      while (v591);
      v586 = v588 + v587;
      if (v584 != v585)
        goto LABEL_793;
LABEL_795:
      if (v14 != v586 + 1)
LABEL_1546:
        nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
LABEL_796:
      v1194 = 0;
      v1195 = 0;
      v1196 = 0;
      v1191 = 0;
      v1192 = 0;
      v1193 = 0;
      v1188 = 0;
      v1189 = 0;
      v1190 = 0;
      v600 = *(_BYTE **)(a2 + 24);
      v599 = *(_BYTE **)(a2 + 32);
      v601 = v599 - v600;
      if (v599 == v600)
      {
        v602 = 0;
        v603 = 0;
      }
      else
      {
        if (v601 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v602 = (char *)operator new(v599 - v600);
        v1188 = v602;
        v1189 = v602;
        v603 = &v602[8 * (v601 >> 3)];
        v1190 = v603;
        memcpy(v602, v600, v601);
        v1189 = v603;
      }
      v604 = (v603 - v602) >> 3;
      v605 = v604 - 1;
      v606 = a2;
      if (v604 == 1)
      {
        v608 = 1;
LABEL_810:
        v616 = 0;
        v617 = 0;
        v618 = *(_QWORD *)&v602[8 * v605];
        while (1)
        {
          v619 = v1161;
          v1172 = 0uLL;
          v1171 = 0;
          if (v618)
          {
            if ((v618 & 0x8000000000000000) != 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v620 = (char *)operator new(v618);
            v621 = (const void *)(v619 + v616);
            v1171 = v620;
            *(_QWORD *)&v1172 = v620;
            v622 = &v620[v618];
            *((_QWORD *)&v1172 + 1) = &v620[v618];
            memcpy(v620, v621, v618);
            *(_QWORD *)&v1172 = v622;
          }
          v623 = (char *)operator new(8uLL);
          v1197 = v623;
          *(_QWORD *)v623 = v618;
          v1198 = v623 + 8;
          v1199 = v623 + 8;
          v1178 = 0;
          v1179 = 0;
          v1180 = 0;
          nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__src, (uint64_t)&v1171, &v1197, (char **)&v1178, 0);
          v1203 = 0;
          v1204 = 9;
          v624 = operator new();
          *(_QWORD *)v624 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v624 + 8));
          v1203 = v624;
          *(_QWORD *)v624 = 1;
          *(_DWORD *)(v624 + 8) = (_DWORD)__src;
          v625 = v1182;
          v1182 = 0uLL;
          v626 = *(std::__shared_weak_count **)(v624 + 24);
          *(_OWORD *)(v624 + 16) = v625;
          if (v626)
          {
            v627 = (unint64_t *)&v626->__shared_owners_;
            do
              v628 = __ldaxr(v627);
            while (__stlxr(v628 - 1, v627));
            if (!v628)
            {
              ((void (*)(std::__shared_weak_count *))v626->__on_zero_shared)(v626);
              std::__shared_weak_count::__release_weak(v626);
            }
          }
          v629 = *(void **)(v624 + 32);
          if (v629)
          {
            *(_QWORD *)(v624 + 40) = v629;
            operator delete(v629);
            *(_QWORD *)(v624 + 32) = 0;
            *(_QWORD *)(v624 + 40) = 0;
            *(_QWORD *)(v624 + 48) = 0;
          }
          v630 = *(void **)(v624 + 56);
          *(_OWORD *)(v624 + 32) = v1183;
          *(_QWORD *)(v624 + 48) = v1184;
          v1184 = 0;
          v1183 = 0uLL;
          v606 = a2;
          if (v630)
          {
            *(_QWORD *)(v624 + 64) = v630;
            operator delete(v630);
            *(_QWORD *)(v624 + 56) = 0;
            *(_QWORD *)(v624 + 64) = 0;
            *(_QWORD *)(v624 + 72) = 0;
          }
          *(_OWORD *)(v624 + 56) = __p;
          v631 = v1186;
          v632 = v1187;
          v1186 = 0;
          __p = 0uLL;
          *(_QWORD *)(v624 + 72) = v631;
          *(_QWORD *)(v624 + 80) = v632;
          v1202 = 0;
          v1201 = *(int *)(a2 + 80);
          nitro::nitro_builtins::TopK_1d((nitro::nitro_builtins *)&v1203, (const nitro::flexible_type *)&v1201, (uint64_t)&v1205);
          switch(v1202)
          {
            case 2:
              v633 = (unint64_t *)v1201;
              do
              {
                v634 = __ldaxr(v633);
                v635 = v634 - 1;
              }
              while (__stlxr(v635, v633));
              if (!v635)
              {
                v636 = v1201;
                if (v1201)
                {
                  if (*(char *)(v1201 + 31) < 0)
                    operator delete(*(void **)(v1201 + 8));
                  v637 = v636;
                  v638 = 0x1012C404EF22A49;
                  goto LABEL_858;
                }
              }
              break;
            case 3:
              v646 = (unint64_t *)v1201;
              do
              {
                v647 = __ldaxr(v646);
                v648 = v647 - 1;
              }
              while (__stlxr(v648, v646));
              if (!v648)
              {
                v649 = v1201;
                if (v1201)
                {
                  v650 = *(void **)(v1201 + 8);
                  if (v650)
                  {
                    *(_QWORD *)(v1201 + 16) = v650;
                    operator delete(v650);
                  }
                  v637 = v649;
                  v638 = 0x1080C409938AC02;
                  goto LABEL_858;
                }
              }
              break;
            case 4:
              v639 = (unint64_t *)v1201;
              do
              {
                v640 = __ldaxr(v639);
                v641 = v640 - 1;
              }
              while (__stlxr(v641, v639));
              if (!v641)
              {
                v642 = v1201;
                if (v1201)
                {
                  v643 = *(_QWORD *)(v1201 + 8);
                  if (v643)
                  {
                    v644 = *(_QWORD *)(v1201 + 16);
                    v645 = *(void **)(v1201 + 8);
                    if (v644 != v643)
                    {
                      do
                      {
                        v644 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v642 + 24, v644);
                      }
                      while (v644 != v643);
                      v645 = *(void **)(v642 + 8);
                    }
                    *(_QWORD *)(v642 + 16) = v643;
                    operator delete(v645);
                    v606 = a2;
                  }
                  goto LABEL_857;
                }
              }
              break;
            case 5:
              v651 = (unint64_t *)v1201;
              do
              {
                v652 = __ldaxr(v651);
                v653 = v652 - 1;
              }
              while (__stlxr(v653, v651));
              if (!v653)
              {
                v642 = v1201;
                if (v1201)
                {
                  v654 = *(_QWORD *)(v1201 + 8);
                  if (v654)
                  {
                    v655 = *(_QWORD *)(v1201 + 16);
                    v656 = *(void **)(v1201 + 8);
                    if (v655 != v654)
                    {
                      do
                        v655 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v655 - 32);
                      while (v655 != v654);
                      v656 = *(void **)(v642 + 8);
                    }
                    *(_QWORD *)(v642 + 16) = v654;
                    operator delete(v656);
                  }
LABEL_857:
                  v637 = v642;
                  v638 = 0x1020C405E66F15BLL;
LABEL_858:
                  MEMORY[0x19401CD90](v637, v638);
                }
              }
              break;
            case 9:
              v657 = (unint64_t *)v1201;
              do
              {
                v658 = __ldaxr(v657);
                v659 = v658 - 1;
              }
              while (__stlxr(v659, v657));
              if (!v659)
              {
                v660 = (_QWORD *)v1201;
                if (v1201)
                {
                  v661 = *(void **)(v1201 + 56);
                  if (v661)
                  {
                    *(_QWORD *)(v1201 + 64) = v661;
                    operator delete(v661);
                  }
                  v662 = (void *)v660[4];
                  if (v662)
                  {
                    v660[5] = v662;
                    operator delete(v662);
                  }
                  v663 = (std::__shared_weak_count *)v660[3];
                  if (v663)
                  {
                    v664 = (unint64_t *)&v663->__shared_owners_;
                    do
                      v665 = __ldaxr(v664);
                    while (__stlxr(v665 - 1, v664));
                    if (!v665)
                    {
                      ((void (*)(std::__shared_weak_count *))v663->__on_zero_shared)(v663);
                      std::__shared_weak_count::__release_weak(v663);
                    }
                  }
                  MEMORY[0x19401CD90](v660, 0x10B0C4002311774);
                  v606 = a2;
                }
              }
              break;
            default:
              break;
          }
          switch(v1204)
          {
            case 2:
              v666 = (unint64_t *)v1203;
              do
              {
                v667 = __ldaxr(v666);
                v668 = v667 - 1;
              }
              while (__stlxr(v668, v666));
              if (!v668)
              {
                v669 = v1203;
                if (v1203)
                {
                  if (*(char *)(v1203 + 31) < 0)
                    operator delete(*(void **)(v1203 + 8));
                  v670 = v669;
                  v671 = 0x1012C404EF22A49;
                  goto LABEL_907;
                }
              }
              break;
            case 3:
              v679 = (unint64_t *)v1203;
              do
              {
                v680 = __ldaxr(v679);
                v681 = v680 - 1;
              }
              while (__stlxr(v681, v679));
              if (!v681)
              {
                v682 = v1203;
                if (v1203)
                {
                  v683 = *(void **)(v1203 + 8);
                  if (v683)
                  {
                    *(_QWORD *)(v1203 + 16) = v683;
                    operator delete(v683);
                  }
                  v670 = v682;
                  v671 = 0x1080C409938AC02;
                  goto LABEL_907;
                }
              }
              break;
            case 4:
              v672 = (unint64_t *)v1203;
              do
              {
                v673 = __ldaxr(v672);
                v674 = v673 - 1;
              }
              while (__stlxr(v674, v672));
              if (!v674)
              {
                v675 = v1203;
                if (v1203)
                {
                  v676 = *(_QWORD *)(v1203 + 8);
                  if (v676)
                  {
                    v677 = *(_QWORD *)(v1203 + 16);
                    v678 = *(void **)(v1203 + 8);
                    if (v677 != v676)
                    {
                      do
                      {
                        v677 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v675 + 24, v677);
                      }
                      while (v677 != v676);
                      v678 = *(void **)(v675 + 8);
                    }
                    *(_QWORD *)(v675 + 16) = v676;
                    operator delete(v678);
                    v606 = a2;
                  }
                  goto LABEL_906;
                }
              }
              break;
            case 5:
              v684 = (unint64_t *)v1203;
              do
              {
                v685 = __ldaxr(v684);
                v686 = v685 - 1;
              }
              while (__stlxr(v686, v684));
              if (!v686)
              {
                v675 = v1203;
                if (v1203)
                {
                  v687 = *(_QWORD *)(v1203 + 8);
                  if (v687)
                  {
                    v688 = *(_QWORD *)(v1203 + 16);
                    v689 = *(void **)(v1203 + 8);
                    if (v688 != v687)
                    {
                      do
                        v688 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v688 - 32);
                      while (v688 != v687);
                      v689 = *(void **)(v675 + 8);
                    }
                    *(_QWORD *)(v675 + 16) = v687;
                    operator delete(v689);
                  }
LABEL_906:
                  v670 = v675;
                  v671 = 0x1020C405E66F15BLL;
LABEL_907:
                  MEMORY[0x19401CD90](v670, v671);
                }
              }
              break;
            case 9:
              v690 = (unint64_t *)v1203;
              do
              {
                v691 = __ldaxr(v690);
                v692 = v691 - 1;
              }
              while (__stlxr(v692, v690));
              if (!v692)
              {
                v693 = (_QWORD *)v1203;
                if (v1203)
                {
                  v694 = *(void **)(v1203 + 56);
                  if (v694)
                  {
                    *(_QWORD *)(v1203 + 64) = v694;
                    operator delete(v694);
                  }
                  v695 = (void *)v693[4];
                  if (v695)
                  {
                    v693[5] = v695;
                    operator delete(v695);
                  }
                  v696 = (std::__shared_weak_count *)v693[3];
                  if (v696)
                  {
                    v697 = (unint64_t *)&v696->__shared_owners_;
                    do
                      v698 = __ldaxr(v697);
                    while (__stlxr(v698 - 1, v697));
                    if (!v698)
                    {
                      ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
                      std::__shared_weak_count::__release_weak(v696);
                    }
                  }
                  MEMORY[0x19401CD90](v693, 0x10B0C4002311774);
                  v606 = a2;
                }
              }
              break;
            default:
              break;
          }
          v1203 = 0;
          v1204 = 0;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if ((_QWORD)v1183)
          {
            *((_QWORD *)&v1183 + 1) = v1183;
            operator delete((void *)v1183);
          }
          v699 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
          if (!*((_QWORD *)&v1182 + 1))
            break;
          v700 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
          do
            v701 = __ldaxr(v700);
          while (__stlxr(v701 - 1, v700));
          if (v701)
            break;
          ((void (*)(std::__shared_weak_count *))v699->__on_zero_shared)(v699);
          std::__shared_weak_count::__release_weak(v699);
          v702 = v1178;
          if (v1178)
            goto LABEL_931;
LABEL_932:
          if (v1197)
          {
            v1198 = v1197;
            operator delete(v1197);
          }
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&__src, **(_QWORD **)(v1205 + 8) + 8);
          if (v1186)
LABEL_1043:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v703 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 != *((_QWORD *)&v1182 + 1))
          {
            v704 = (uint64_t)__src;
            if (__src)
            {
              if ((unint64_t)(v703 - 8) < 8)
              {
                v704 = 1;
                v705 = (uint64_t *)*((_QWORD *)&v1182 + 1);
                goto LABEL_944;
              }
              v706 = ((unint64_t)(v703 - 8) >> 3) + 1;
              v705 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v706 & 0x3FFFFFFFFFFFFFFELL));
              v707 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
              v708 = v706 & 0x3FFFFFFFFFFFFFFELL;
              v709 = 1;
              v710 = 1;
              do
              {
                v709 *= *(v707 - 1);
                v710 *= *v707;
                v707 += 2;
                v708 -= 2;
              }
              while (v708);
              v704 = v710 * v709;
              if (v706 != (v706 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_944:
                  v711 = *v705++;
                  v704 *= v711;
                }
                while (v705 != (uint64_t *)v1183);
              }
            }
            v712 = v703 >> 3;
            if ((unint64_t)(v703 >> 3) <= 1)
              v712 = 1;
            if (v712 < 2)
            {
              v713 = 0;
              v714 = 0;
              goto LABEL_952;
            }
            v715 = 0;
            v716 = 0;
            v713 = v712 & 0xFFFFFFFFFFFFFFFELL;
            v717 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v718 = (char *)v1184 + 8;
            v719 = v712 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v715 += *(v718 - 1) * (*(v717 - 1) - 1);
              v716 += *v718 * (*v717 - 1);
              v717 += 2;
              v718 += 2;
              v719 -= 2;
            }
            while (v719);
            v714 = v716 + v715;
            if (v712 != v713)
            {
LABEL_952:
              v720 = v712 - v713;
              v721 = 8 * v713;
              v722 = (uint64_t *)((char *)v1184 + v721);
              v723 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v721);
              do
              {
                v724 = *v723++;
                v725 = v724 - 1;
                v726 = *v722++;
                v714 += v726 * v725;
                --v720;
              }
              while (v720);
            }
            if (v704 != v714 + 1)
              goto LABEL_1043;
          }
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v727 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v728 = (unint64_t *)(v1182 + 8);
            do
              v729 = __ldaxr(v728);
            while (__stlxr(v729 - 1, v728));
            if (!v729)
            {
              ((void (*)(std::__shared_weak_count *))v727->__on_zero_shared)(v727);
              std::__shared_weak_count::__release_weak(v727);
            }
          }
          nitro::ndarray<int>::ndarray((uint64_t)&__src, *(_QWORD *)(*(_QWORD *)(v1205 + 8) + 16) + 8);
          if (v1186)
LABEL_1044:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v730 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 == *((_QWORD *)&v1182 + 1))
            goto LABEL_983;
          v731 = (uint64_t)__src;
          if (__src)
          {
            if ((unint64_t)(v730 - 8) < 8)
            {
              v731 = 1;
              v732 = (uint64_t *)*((_QWORD *)&v1182 + 1);
              do
              {
LABEL_972:
                v738 = *v732++;
                v731 *= v738;
              }
              while (v732 != (uint64_t *)v1183);
              goto LABEL_973;
            }
            v733 = ((unint64_t)(v730 - 8) >> 3) + 1;
            v732 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v733 & 0x3FFFFFFFFFFFFFFELL));
            v734 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v735 = v733 & 0x3FFFFFFFFFFFFFFELL;
            v736 = 1;
            v737 = 1;
            do
            {
              v736 *= *(v734 - 1);
              v737 *= *v734;
              v734 += 2;
              v735 -= 2;
            }
            while (v735);
            v731 = v737 * v736;
            if (v733 != (v733 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_972;
          }
LABEL_973:
          v739 = v730 >> 3;
          if ((unint64_t)(v730 >> 3) <= 1)
            v739 = 1;
          if (v739 < 2)
          {
            v740 = 0;
            v741 = 0;
LABEL_980:
            v747 = v739 - v740;
            v748 = 8 * v740;
            v749 = (uint64_t *)((char *)v1184 + v748);
            v750 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v748);
            do
            {
              v751 = *v750++;
              v752 = v751 - 1;
              v753 = *v749++;
              v741 += v753 * v752;
              --v747;
            }
            while (v747);
            goto LABEL_982;
          }
          v742 = 0;
          v743 = 0;
          v740 = v739 & 0xFFFFFFFFFFFFFFFELL;
          v744 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
          v745 = (char *)v1184 + 8;
          v746 = v739 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v742 += *(v745 - 1) * (*(v744 - 1) - 1);
            v743 += *v745 * (*v744 - 1);
            v744 += 2;
            v745 += 2;
            v746 -= 2;
          }
          while (v746);
          v741 = v743 + v742;
          if (v739 != v740)
            goto LABEL_980;
LABEL_982:
          if (v731 != v741 + 1)
            goto LABEL_1044;
LABEL_983:
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v754 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v755 = (unint64_t *)(v1182 + 8);
            do
              v756 = __ldaxr(v755);
            while (__stlxr(v756 - 1, v755));
            if (!v756)
            {
              ((void (*)(std::__shared_weak_count *))v754->__on_zero_shared)(v754);
              std::__shared_weak_count::__release_weak(v754);
            }
          }
          std::vector<unsigned char>::__insert_with_size[abi:ne180100]<unsigned char *,unsigned char *>((uint64_t)&v1194, (char *)v1195, (char *)__src, (char *)__src + *(int *)(v606 + 80), *(int *)(v606 + 80));
          std::vector<int>::__insert_with_size[abi:ne180100]<int *,int *>((unint64_t *)&v1191, v1192, (char *)__src, (char *)__src + 4 * *(int *)(v606 + 80), *(int *)(v606 + 80));
          switch(v1206)
          {
            case 2:
              v757 = (unint64_t *)v1205;
              do
              {
                v758 = __ldaxr(v757);
                v759 = v758 - 1;
              }
              while (__stlxr(v759, v757));
              if (!v759)
              {
                v760 = v1205;
                if (v1205)
                {
                  if (*(char *)(v1205 + 31) < 0)
                    operator delete(*(void **)(v1205 + 8));
                  v761 = v760;
                  v762 = 0x1012C404EF22A49;
                  goto LABEL_1026;
                }
              }
              break;
            case 3:
              v770 = (unint64_t *)v1205;
              do
              {
                v771 = __ldaxr(v770);
                v772 = v771 - 1;
              }
              while (__stlxr(v772, v770));
              if (!v772)
              {
                v773 = v1205;
                if (v1205)
                {
                  v774 = *(void **)(v1205 + 8);
                  if (v774)
                  {
                    *(_QWORD *)(v1205 + 16) = v774;
                    operator delete(v774);
                  }
                  v761 = v773;
                  v762 = 0x1080C409938AC02;
                  goto LABEL_1026;
                }
              }
              break;
            case 4:
              v763 = (unint64_t *)v1205;
              do
              {
                v764 = __ldaxr(v763);
                v765 = v764 - 1;
              }
              while (__stlxr(v765, v763));
              if (!v765)
              {
                v766 = v1205;
                if (v1205)
                {
                  v767 = *(_QWORD *)(v1205 + 8);
                  if (v767)
                  {
                    v768 = *(_QWORD *)(v1205 + 16);
                    v769 = *(void **)(v1205 + 8);
                    if (v768 != v767)
                    {
                      do
                      {
                        v768 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v766 + 24, v768);
                      }
                      while (v768 != v767);
                      v769 = *(void **)(v766 + 8);
                    }
                    *(_QWORD *)(v766 + 16) = v767;
                    operator delete(v769);
                    v606 = a2;
                  }
                  goto LABEL_1025;
                }
              }
              break;
            case 5:
              v775 = (unint64_t *)v1205;
              do
              {
                v776 = __ldaxr(v775);
                v777 = v776 - 1;
              }
              while (__stlxr(v777, v775));
              if (!v777)
              {
                v766 = v1205;
                if (v1205)
                {
                  v778 = *(_QWORD *)(v1205 + 8);
                  if (v778)
                  {
                    v779 = *(_QWORD *)(v1205 + 16);
                    v780 = *(void **)(v1205 + 8);
                    if (v779 != v778)
                    {
                      do
                        v779 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v779 - 32);
                      while (v779 != v778);
                      v780 = *(void **)(v766 + 8);
                    }
                    *(_QWORD *)(v766 + 16) = v778;
                    operator delete(v780);
                  }
LABEL_1025:
                  v761 = v766;
                  v762 = 0x1020C405E66F15BLL;
LABEL_1026:
                  MEMORY[0x19401CD90](v761, v762);
                }
              }
              break;
            case 9:
              v781 = (unint64_t *)v1205;
              do
              {
                v782 = __ldaxr(v781);
                v783 = v782 - 1;
              }
              while (__stlxr(v783, v781));
              if (!v783)
              {
                v784 = (_QWORD *)v1205;
                if (v1205)
                {
                  v785 = *(void **)(v1205 + 56);
                  if (v785)
                  {
                    *(_QWORD *)(v1205 + 64) = v785;
                    operator delete(v785);
                  }
                  v786 = (void *)v784[4];
                  if (v786)
                  {
                    v784[5] = v786;
                    operator delete(v786);
                  }
                  v787 = (std::__shared_weak_count *)v784[3];
                  if (v787)
                  {
                    v788 = (unint64_t *)&v787->__shared_owners_;
                    do
                      v789 = __ldaxr(v788);
                    while (__stlxr(v789 - 1, v788));
                    if (!v789)
                    {
                      ((void (*)(std::__shared_weak_count *))v787->__on_zero_shared)(v787);
                      std::__shared_weak_count::__release_weak(v787);
                    }
                  }
                  MEMORY[0x19401CD90](v784, 0x10B0C4002311774);
                  v606 = a2;
                }
              }
              break;
            default:
              break;
          }
          if (v1171)
          {
            *(_QWORD *)&v1172 = v1171;
            operator delete(v1171);
          }
          v616 += v618;
          if (++v617 == v608)
          {
            v602 = v1188;
            v605 = ((v1189 - v1188) >> 3) - 1;
            goto LABEL_1046;
          }
        }
        v702 = v1178;
        if (!v1178)
          goto LABEL_932;
LABEL_931:
        v1179 = v702;
        operator delete(v702);
        goto LABEL_932;
      }
      if (v604 == 2)
      {
        v607 = 0;
        v608 = 1;
LABEL_807:
        v613 = ~v607 + v604;
        v614 = &v602[8 * v607];
        do
        {
          v615 = *(_QWORD *)v614;
          v614 += 8;
          v608 *= v615;
          --v613;
        }
        while (v613);
        goto LABEL_809;
      }
      v607 = v605 & 0xFFFFFFFFFFFFFFFELL;
      v609 = v602 + 8;
      v610 = 1;
      v611 = v605 & 0xFFFFFFFFFFFFFFFELL;
      v612 = 1;
      do
      {
        v610 *= *(v609 - 1);
        v612 *= *v609;
        v609 += 2;
        v611 -= 2;
      }
      while (v611);
      v608 = v612 * v610;
      if (v605 != v607)
        goto LABEL_807;
LABEL_809:
      if (v608)
        goto LABEL_810;
LABEL_1046:
      *(_QWORD *)&v602[8 * v605] = *(int *)(v606 + 80);
      v1178 = 0;
      v1179 = 0;
      v1180 = 0;
      nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>((uint64_t)&__src, (uint64_t)&v1194, &v1188, (char **)&v1178, 0);
      v1197 = 0;
      LOBYTE(v1198) = 9;
      v790 = operator new();
      *(_QWORD *)v790 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v790 + 8));
      v1197 = (char *)v790;
      *(_QWORD *)v790 = 1;
      *(_DWORD *)(v790 + 8) = (_DWORD)__src;
      v791 = v1182;
      v1182 = 0uLL;
      v792 = *(std::__shared_weak_count **)(v790 + 24);
      *(_OWORD *)(v790 + 16) = v791;
      if (v792)
      {
        v793 = (unint64_t *)&v792->__shared_owners_;
        do
          v794 = __ldaxr(v793);
        while (__stlxr(v794 - 1, v793));
        if (!v794)
        {
          ((void (*)(std::__shared_weak_count *))v792->__on_zero_shared)(v792);
          std::__shared_weak_count::__release_weak(v792);
        }
      }
      v795 = *(void **)(v790 + 32);
      if (v795)
      {
        *(_QWORD *)(v790 + 40) = v795;
        operator delete(v795);
        *(_QWORD *)(v790 + 32) = 0;
        *(_QWORD *)(v790 + 40) = 0;
        *(_QWORD *)(v790 + 48) = 0;
      }
      v796 = *(void **)(v790 + 56);
      *(_OWORD *)(v790 + 32) = v1183;
      *(_QWORD *)(v790 + 48) = v1184;
      v1184 = 0;
      v1183 = 0uLL;
      if (v796)
      {
        *(_QWORD *)(v790 + 64) = v796;
        operator delete(v796);
        *(_QWORD *)(v790 + 56) = 0;
        *(_QWORD *)(v790 + 64) = 0;
        *(_QWORD *)(v790 + 72) = 0;
      }
      *(_OWORD *)(v790 + 56) = __p;
      v797 = v1186;
      v798 = v1187;
      v1186 = 0;
      __p = 0uLL;
      *(_QWORD *)(v790 + 72) = v797;
      *(_QWORD *)(v790 + 80) = v798;
      v1168 = 0;
      v1169 = 0;
      v1170 = 0;
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v1171, (uint64_t)&v1191, &v1188, (char **)&v1168, 0);
      v1199 = 0;
      v1200 = 9;
      v799 = operator new();
      *(_QWORD *)v799 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v799 + 8));
      v1199 = (char *)v799;
      *(_QWORD *)v799 = 1;
      *(_DWORD *)(v799 + 8) = (_DWORD)v1171;
      v800 = v1172;
      v1172 = 0uLL;
      v801 = *(std::__shared_weak_count **)(v799 + 24);
      *(_OWORD *)(v799 + 16) = v800;
      if (v801)
      {
        v802 = (unint64_t *)&v801->__shared_owners_;
        do
          v803 = __ldaxr(v802);
        while (__stlxr(v803 - 1, v802));
        if (!v803)
        {
          ((void (*)(std::__shared_weak_count *))v801->__on_zero_shared)(v801);
          std::__shared_weak_count::__release_weak(v801);
        }
      }
      v804 = *(void **)(v799 + 32);
      if (v804)
      {
        *(_QWORD *)(v799 + 40) = v804;
        operator delete(v804);
        *(_QWORD *)(v799 + 32) = 0;
        *(_QWORD *)(v799 + 40) = 0;
        *(_QWORD *)(v799 + 48) = 0;
      }
      v805 = *(void **)(v799 + 56);
      *(_OWORD *)(v799 + 32) = v1173;
      *(_QWORD *)(v799 + 48) = v1174;
      v1174 = 0;
      v1173 = 0uLL;
      if (v805)
      {
        *(_QWORD *)(v799 + 64) = v805;
        operator delete(v805);
        *(_QWORD *)(v799 + 56) = 0;
        *(_QWORD *)(v799 + 64) = 0;
        *(_QWORD *)(v799 + 72) = 0;
      }
      *(_OWORD *)(v799 + 56) = v1175;
      v806 = v1176;
      v807 = v1177;
      v1176 = 0;
      v1175 = 0uLL;
      *(_QWORD *)(v799 + 72) = v806;
      *(_QWORD *)(v799 + 80) = v807;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v808 = (char *)operator new(0x20uLL);
      *a3 = v808;
      a3[1] = v808;
      a3[2] = v808 + 32;
      v809 = (unint64_t *)v1197;
      *(_QWORD *)v808 = v1197;
      v810 = v1198;
      v808[8] = (char)v1198;
      if ((v810 - 2) < 4 || v810 == 9)
      {
        do
          v811 = __ldaxr(v809);
        while (__stlxr(v811 + 1, v809));
      }
      v812 = (unint64_t *)v1199;
      *((_QWORD *)v808 + 2) = v1199;
      v813 = v1200;
      v808[24] = v1200;
      if ((v813 - 2) < 4 || v813 == 9)
      {
        do
          v815 = __ldaxr(v812);
        while (__stlxr(v815 + 1, v812));
      }
      v816 = (char **)&v1201;
      a3[1] = v808 + 32;
      do
      {
        v819 = v816;
        v816 -= 2;
        switch(*((_BYTE *)v819 - 8))
        {
          case 2:
            v820 = *v816;
            do
            {
              v821 = __ldaxr((unint64_t *)v820);
              v822 = v821 - 1;
            }
            while (__stlxr(v822, (unint64_t *)v820));
            if (!v822)
            {
              v823 = *v816;
              if (!*v816)
                goto LABEL_1076;
              if (v823[31] < 0)
                operator delete(*((void **)v823 + 1));
              v817 = v823;
              v818 = 0x1012C404EF22A49;
              goto LABEL_1075;
            }
            break;
          case 3:
            v831 = (unint64_t *)*v816;
            do
            {
              v832 = __ldaxr(v831);
              v833 = v832 - 1;
            }
            while (__stlxr(v833, v831));
            if (!v833)
            {
              v834 = *v816;
              if (!*v816)
                goto LABEL_1076;
              v835 = (void *)*((_QWORD *)v834 + 1);
              if (v835)
              {
                *((_QWORD *)v834 + 2) = v835;
                operator delete(v835);
              }
              v817 = v834;
              v818 = 0x1080C409938AC02;
              goto LABEL_1075;
            }
            break;
          case 4:
            v824 = (unint64_t *)*v816;
            do
            {
              v825 = __ldaxr(v824);
              v826 = v825 - 1;
            }
            while (__stlxr(v826, v824));
            if (!v826)
            {
              v827 = *v816;
              if (!*v816)
                goto LABEL_1076;
              v828 = *((_QWORD *)v827 + 1);
              if (v828)
              {
                v829 = *((_QWORD *)v827 + 2);
                v830 = (void *)*((_QWORD *)v827 + 1);
                if (v829 != v828)
                {
                  do
                  {
                    v829 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v827 + 24), v829);
                  }
                  while (v829 != v828);
                  v830 = (void *)*((_QWORD *)v827 + 1);
                }
                *((_QWORD *)v827 + 2) = v828;
                goto LABEL_1111;
              }
              goto LABEL_1112;
            }
            break;
          case 5:
            v836 = (unint64_t *)*v816;
            do
            {
              v837 = __ldaxr(v836);
              v838 = v837 - 1;
            }
            while (__stlxr(v838, v836));
            if (!v838)
            {
              v827 = *v816;
              if (!*v816)
                goto LABEL_1076;
              v839 = *((_QWORD *)v827 + 1);
              if (v839)
              {
                v840 = *((_QWORD *)v827 + 2);
                v841 = (void *)*((_QWORD *)v827 + 1);
                if (v840 != v839)
                {
                  do
                    v840 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v840 - 32);
                  while (v840 != v839);
                  v841 = (void *)*((_QWORD *)v827 + 1);
                }
                *((_QWORD *)v827 + 2) = v839;
                v830 = v841;
LABEL_1111:
                operator delete(v830);
              }
LABEL_1112:
              v817 = v827;
              v818 = 0x1020C405E66F15BLL;
              goto LABEL_1075;
            }
            break;
          case 9:
            v842 = (unint64_t *)*v816;
            do
            {
              v843 = __ldaxr(v842);
              v844 = v843 - 1;
            }
            while (__stlxr(v844, v842));
            if (!v844)
            {
              v845 = *v816;
              if (*v816)
              {
                v846 = (void *)*((_QWORD *)v845 + 7);
                if (v846)
                {
                  *((_QWORD *)v845 + 8) = v846;
                  operator delete(v846);
                }
                v847 = (void *)*((_QWORD *)v845 + 4);
                if (v847)
                {
                  *((_QWORD *)v845 + 5) = v847;
                  operator delete(v847);
                }
                v848 = (std::__shared_weak_count *)*((_QWORD *)v845 + 3);
                if (v848)
                {
                  v849 = (unint64_t *)&v848->__shared_owners_;
                  do
                    v850 = __ldaxr(v849);
                  while (__stlxr(v850 - 1, v849));
                  if (!v850)
                  {
                    ((void (*)(std::__shared_weak_count *))v848->__on_zero_shared)(v848);
                    std::__shared_weak_count::__release_weak(v848);
                  }
                }
                v817 = v845;
                v818 = 0x10B0C4002311774;
LABEL_1075:
                MEMORY[0x19401CD90](v817, v818);
              }
LABEL_1076:
              *v816 = 0;
            }
            break;
          default:
            break;
        }
        *(v819 - 2) = 0;
        *((_BYTE *)v819 - 8) = 0;
      }
      while (v816 != &v1197);
      if ((_QWORD)v1175)
      {
        *((_QWORD *)&v1175 + 1) = v1175;
        operator delete((void *)v1175);
      }
      if ((_QWORD)v1173)
      {
        *((_QWORD *)&v1173 + 1) = v1173;
        operator delete((void *)v1173);
      }
      v851 = (std::__shared_weak_count *)*((_QWORD *)&v1172 + 1);
      if (*((_QWORD *)&v1172 + 1))
      {
        v852 = (unint64_t *)(*((_QWORD *)&v1172 + 1) + 8);
        do
          v853 = __ldaxr(v852);
        while (__stlxr(v853 - 1, v852));
        if (!v853)
        {
          ((void (*)(std::__shared_weak_count *))v851->__on_zero_shared)(v851);
          std::__shared_weak_count::__release_weak(v851);
        }
      }
      if (v1168)
      {
        v1169 = v1168;
        operator delete(v1168);
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((_QWORD)v1183)
      {
        *((_QWORD *)&v1183 + 1) = v1183;
        operator delete((void *)v1183);
      }
      v854 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
      if (*((_QWORD *)&v1182 + 1))
      {
        v855 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
        do
          v856 = __ldaxr(v855);
        while (__stlxr(v856 - 1, v855));
        if (!v856)
        {
          ((void (*)(std::__shared_weak_count *))v854->__on_zero_shared)(v854);
          std::__shared_weak_count::__release_weak(v854);
        }
      }
      if (v1178)
      {
        v1179 = v1178;
        operator delete(v1178);
      }
      if (v1188)
      {
        v1189 = v1188;
        operator delete(v1188);
      }
      if (v1191)
      {
        v1192 = v1191;
        operator delete(v1191);
      }
      if (v1194)
      {
        v1195 = v1194;
        operator delete(v1194);
      }
      if (v1165)
      {
        v1166 = v1165;
        operator delete(v1165);
      }
      if (v1163)
      {
        v1164 = (uint64_t *)v1163;
        operator delete(v1163);
      }
      v295 = v1162;
      if (!v1162)
        return;
      v857 = (unint64_t *)&v1162->__shared_owners_;
      do
        v297 = __ldaxr(v857);
      while (__stlxr(v297 - 1, v857));
      goto LABEL_1541;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1140, (uint64_t)a1);
      if (v1146)
        goto LABEL_1544;
      v7 = (char *)v1143 - (_BYTE *)v1142;
      if (v1143 == v1142)
        goto LABEL_36;
      v8 = v1140;
      if (!v1140)
        goto LABEL_26;
      if ((unint64_t)(v7 - 8) < 8)
      {
        v8 = 1;
        v9 = (uint64_t *)v1142;
        do
        {
LABEL_25:
          v21 = *v9++;
          v8 *= v21;
        }
        while (v9 != v1143);
        goto LABEL_26;
      }
      v16 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v9 = (uint64_t *)((char *)v1142 + 8 * (v16 & 0x3FFFFFFFFFFFFFFELL));
      v17 = (char *)v1142 + 8;
      v18 = 1;
      v19 = v16 & 0x3FFFFFFFFFFFFFFELL;
      v20 = 1;
      do
      {
        v18 *= *(v17 - 1);
        v20 *= *v17;
        v17 += 2;
        v19 -= 2;
      }
      while (v19);
      v8 = v20 * v18;
      if (v16 != (v16 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_25;
LABEL_26:
      v22 = v7 >> 3;
      if ((unint64_t)(v7 >> 3) <= 1)
        v22 = 1;
      if (v22 < 2)
      {
        v23 = 0;
        v24 = 0;
LABEL_33:
        v30 = v22 - v23;
        v31 = 8 * v23;
        v32 = (uint64_t *)((char *)v1144 + v31);
        v33 = (uint64_t *)((char *)v1142 + v31);
        do
        {
          v34 = *v33++;
          v35 = v34 - 1;
          v36 = *v32++;
          v24 += v36 * v35;
          --v30;
        }
        while (v30);
        goto LABEL_35;
      }
      v25 = 0;
      v26 = 0;
      v23 = v22 & 0xFFFFFFFFFFFFFFFELL;
      v27 = (char *)v1142 + 8;
      v28 = (char *)v1144 + 8;
      v29 = v22 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v25 += *(v28 - 1) * (*(v27 - 1) - 1);
        v26 += *v28 * (*v27 - 1);
        v27 += 2;
        v28 += 2;
        v29 -= 2;
      }
      while (v29);
      v24 = v26 + v25;
      if (v22 != v23)
        goto LABEL_33;
LABEL_35:
      if (v8 != v24 + 1)
LABEL_1544:
        nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
LABEL_36:
      v1194 = 0;
      v1195 = 0;
      v1196 = 0;
      v1191 = 0;
      v1192 = 0;
      v1193 = 0;
      v1188 = 0;
      v1189 = 0;
      v1190 = 0;
      v38 = *(_BYTE **)(a2 + 24);
      v37 = *(_BYTE **)(a2 + 32);
      v39 = v37 - v38;
      if (v37 == v38)
      {
        v40 = 0;
        v41 = 0;
      }
      else
      {
        if (v39 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v40 = (char *)operator new(v37 - v38);
        v1188 = v40;
        v1189 = v40;
        v41 = &v40[8 * (v39 >> 3)];
        v1190 = v41;
        memcpy(v40, v38, v39);
        v1189 = v41;
      }
      v42 = (v41 - v40) >> 3;
      v43 = v42 - 1;
      v44 = a2;
      if (v42 == 1)
      {
        v46 = 1;
LABEL_50:
        v54 = 0;
        v55 = 0;
        v56 = *(_QWORD *)&v40[8 * v43];
        while (1)
        {
          v57 = v1140;
          v1172 = 0uLL;
          v1171 = 0;
          if (v56)
          {
            if (v56 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v58 = (char *)operator new(4 * v56);
            v59 = (const void *)(v57 + 4 * v54);
            v1171 = v58;
            *(_QWORD *)&v1172 = v58;
            v60 = &v58[4 * v56];
            *((_QWORD *)&v1172 + 1) = v60;
            memcpy(v58, v59, 4 * v56);
            *(_QWORD *)&v1172 = v60;
          }
          v61 = (char *)operator new(8uLL);
          v1197 = v61;
          *(_QWORD *)v61 = v56;
          v1198 = v61 + 8;
          v1199 = v61 + 8;
          v1178 = 0;
          v1179 = 0;
          v1180 = 0;
          nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__src, (uint64_t)&v1171, &v1197, (char **)&v1178, 0);
          v1203 = 0;
          v1204 = 9;
          v62 = operator new();
          *(_QWORD *)v62 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v62 + 8));
          v1203 = v62;
          *(_QWORD *)v62 = 1;
          *(_DWORD *)(v62 + 8) = (_DWORD)__src;
          v63 = v1182;
          v1182 = 0uLL;
          v64 = *(std::__shared_weak_count **)(v62 + 24);
          *(_OWORD *)(v62 + 16) = v63;
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldaxr(v65);
            while (__stlxr(v66 - 1, v65));
            if (!v66)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
          v67 = *(void **)(v62 + 32);
          if (v67)
          {
            *(_QWORD *)(v62 + 40) = v67;
            operator delete(v67);
            *(_QWORD *)(v62 + 32) = 0;
            *(_QWORD *)(v62 + 40) = 0;
            *(_QWORD *)(v62 + 48) = 0;
          }
          v68 = *(void **)(v62 + 56);
          *(_OWORD *)(v62 + 32) = v1183;
          *(_QWORD *)(v62 + 48) = v1184;
          v1184 = 0;
          v1183 = 0uLL;
          v44 = a2;
          if (v68)
          {
            *(_QWORD *)(v62 + 64) = v68;
            operator delete(v68);
            *(_QWORD *)(v62 + 56) = 0;
            *(_QWORD *)(v62 + 64) = 0;
            *(_QWORD *)(v62 + 72) = 0;
          }
          *(_OWORD *)(v62 + 56) = __p;
          v69 = v1186;
          v70 = v1187;
          v1186 = 0;
          __p = 0uLL;
          *(_QWORD *)(v62 + 72) = v69;
          *(_QWORD *)(v62 + 80) = v70;
          v1202 = 0;
          v1201 = *(int *)(a2 + 80);
          nitro::nitro_builtins::TopK_1d((nitro::nitro_builtins *)&v1203, (const nitro::flexible_type *)&v1201, (uint64_t)&v1205);
          switch(v1202)
          {
            case 2:
              v71 = (unint64_t *)v1201;
              do
              {
                v72 = __ldaxr(v71);
                v73 = v72 - 1;
              }
              while (__stlxr(v73, v71));
              if (!v73)
              {
                v74 = v1201;
                if (v1201)
                {
                  if (*(char *)(v1201 + 31) < 0)
                    operator delete(*(void **)(v1201 + 8));
                  v75 = v74;
                  v76 = 0x1012C404EF22A49;
                  goto LABEL_98;
                }
              }
              break;
            case 3:
              v84 = (unint64_t *)v1201;
              do
              {
                v85 = __ldaxr(v84);
                v86 = v85 - 1;
              }
              while (__stlxr(v86, v84));
              if (!v86)
              {
                v87 = v1201;
                if (v1201)
                {
                  v88 = *(void **)(v1201 + 8);
                  if (v88)
                  {
                    *(_QWORD *)(v1201 + 16) = v88;
                    operator delete(v88);
                  }
                  v75 = v87;
                  v76 = 0x1080C409938AC02;
                  goto LABEL_98;
                }
              }
              break;
            case 4:
              v77 = (unint64_t *)v1201;
              do
              {
                v78 = __ldaxr(v77);
                v79 = v78 - 1;
              }
              while (__stlxr(v79, v77));
              if (!v79)
              {
                v80 = v1201;
                if (v1201)
                {
                  v81 = *(_QWORD *)(v1201 + 8);
                  if (v81)
                  {
                    v82 = *(_QWORD *)(v1201 + 16);
                    v83 = *(void **)(v1201 + 8);
                    if (v82 != v81)
                    {
                      do
                      {
                        v82 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v80 + 24, v82);
                      }
                      while (v82 != v81);
                      v83 = *(void **)(v80 + 8);
                    }
                    *(_QWORD *)(v80 + 16) = v81;
                    operator delete(v83);
                    v44 = a2;
                  }
                  goto LABEL_97;
                }
              }
              break;
            case 5:
              v89 = (unint64_t *)v1201;
              do
              {
                v90 = __ldaxr(v89);
                v91 = v90 - 1;
              }
              while (__stlxr(v91, v89));
              if (!v91)
              {
                v80 = v1201;
                if (v1201)
                {
                  v92 = *(_QWORD *)(v1201 + 8);
                  if (v92)
                  {
                    v93 = *(_QWORD *)(v1201 + 16);
                    v94 = *(void **)(v1201 + 8);
                    if (v93 != v92)
                    {
                      do
                        v93 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v93 - 32);
                      while (v93 != v92);
                      v94 = *(void **)(v80 + 8);
                    }
                    *(_QWORD *)(v80 + 16) = v92;
                    operator delete(v94);
                  }
LABEL_97:
                  v75 = v80;
                  v76 = 0x1020C405E66F15BLL;
LABEL_98:
                  MEMORY[0x19401CD90](v75, v76);
                }
              }
              break;
            case 9:
              v95 = (unint64_t *)v1201;
              do
              {
                v96 = __ldaxr(v95);
                v97 = v96 - 1;
              }
              while (__stlxr(v97, v95));
              if (!v97)
              {
                v98 = (_QWORD *)v1201;
                if (v1201)
                {
                  v99 = *(void **)(v1201 + 56);
                  if (v99)
                  {
                    *(_QWORD *)(v1201 + 64) = v99;
                    operator delete(v99);
                  }
                  v100 = (void *)v98[4];
                  if (v100)
                  {
                    v98[5] = v100;
                    operator delete(v100);
                  }
                  v101 = (std::__shared_weak_count *)v98[3];
                  if (v101)
                  {
                    v102 = (unint64_t *)&v101->__shared_owners_;
                    do
                      v103 = __ldaxr(v102);
                    while (__stlxr(v103 - 1, v102));
                    if (!v103)
                    {
                      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
                      std::__shared_weak_count::__release_weak(v101);
                    }
                  }
                  MEMORY[0x19401CD90](v98, 0x10B0C4002311774);
                  v44 = a2;
                }
              }
              break;
            default:
              break;
          }
          switch(v1204)
          {
            case 2:
              v104 = (unint64_t *)v1203;
              do
              {
                v105 = __ldaxr(v104);
                v106 = v105 - 1;
              }
              while (__stlxr(v106, v104));
              if (!v106)
              {
                v107 = v1203;
                if (v1203)
                {
                  if (*(char *)(v1203 + 31) < 0)
                    operator delete(*(void **)(v1203 + 8));
                  v108 = v107;
                  v109 = 0x1012C404EF22A49;
                  goto LABEL_147;
                }
              }
              break;
            case 3:
              v117 = (unint64_t *)v1203;
              do
              {
                v118 = __ldaxr(v117);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, v117));
              if (!v119)
              {
                v120 = v1203;
                if (v1203)
                {
                  v121 = *(void **)(v1203 + 8);
                  if (v121)
                  {
                    *(_QWORD *)(v1203 + 16) = v121;
                    operator delete(v121);
                  }
                  v108 = v120;
                  v109 = 0x1080C409938AC02;
                  goto LABEL_147;
                }
              }
              break;
            case 4:
              v110 = (unint64_t *)v1203;
              do
              {
                v111 = __ldaxr(v110);
                v112 = v111 - 1;
              }
              while (__stlxr(v112, v110));
              if (!v112)
              {
                v113 = v1203;
                if (v1203)
                {
                  v114 = *(_QWORD *)(v1203 + 8);
                  if (v114)
                  {
                    v115 = *(_QWORD *)(v1203 + 16);
                    v116 = *(void **)(v1203 + 8);
                    if (v115 != v114)
                    {
                      do
                      {
                        v115 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v113 + 24, v115);
                      }
                      while (v115 != v114);
                      v116 = *(void **)(v113 + 8);
                    }
                    *(_QWORD *)(v113 + 16) = v114;
                    operator delete(v116);
                    v44 = a2;
                  }
                  goto LABEL_146;
                }
              }
              break;
            case 5:
              v122 = (unint64_t *)v1203;
              do
              {
                v123 = __ldaxr(v122);
                v124 = v123 - 1;
              }
              while (__stlxr(v124, v122));
              if (!v124)
              {
                v113 = v1203;
                if (v1203)
                {
                  v125 = *(_QWORD *)(v1203 + 8);
                  if (v125)
                  {
                    v126 = *(_QWORD *)(v1203 + 16);
                    v127 = *(void **)(v1203 + 8);
                    if (v126 != v125)
                    {
                      do
                        v126 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v126 - 32);
                      while (v126 != v125);
                      v127 = *(void **)(v113 + 8);
                    }
                    *(_QWORD *)(v113 + 16) = v125;
                    operator delete(v127);
                  }
LABEL_146:
                  v108 = v113;
                  v109 = 0x1020C405E66F15BLL;
LABEL_147:
                  MEMORY[0x19401CD90](v108, v109);
                }
              }
              break;
            case 9:
              v128 = (unint64_t *)v1203;
              do
              {
                v129 = __ldaxr(v128);
                v130 = v129 - 1;
              }
              while (__stlxr(v130, v128));
              if (!v130)
              {
                v131 = (_QWORD *)v1203;
                if (v1203)
                {
                  v132 = *(void **)(v1203 + 56);
                  if (v132)
                  {
                    *(_QWORD *)(v1203 + 64) = v132;
                    operator delete(v132);
                  }
                  v133 = (void *)v131[4];
                  if (v133)
                  {
                    v131[5] = v133;
                    operator delete(v133);
                  }
                  v134 = (std::__shared_weak_count *)v131[3];
                  if (v134)
                  {
                    v135 = (unint64_t *)&v134->__shared_owners_;
                    do
                      v136 = __ldaxr(v135);
                    while (__stlxr(v136 - 1, v135));
                    if (!v136)
                    {
                      ((void (*)(std::__shared_weak_count *))v134->__on_zero_shared)(v134);
                      std::__shared_weak_count::__release_weak(v134);
                    }
                  }
                  MEMORY[0x19401CD90](v131, 0x10B0C4002311774);
                  v44 = a2;
                }
              }
              break;
            default:
              break;
          }
          v1203 = 0;
          v1204 = 0;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if ((_QWORD)v1183)
          {
            *((_QWORD *)&v1183 + 1) = v1183;
            operator delete((void *)v1183);
          }
          v137 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
          if (!*((_QWORD *)&v1182 + 1))
            break;
          v138 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (v139)
            break;
          ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
          std::__shared_weak_count::__release_weak(v137);
          v140 = v1178;
          if (v1178)
            goto LABEL_171;
LABEL_172:
          if (v1197)
          {
            v1198 = v1197;
            operator delete(v1197);
          }
          nitro::ndarray<float>::ndarray((uint64_t)&__src, **(_QWORD **)(v1205 + 8) + 8);
          if (v1186)
LABEL_283:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v141 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 != *((_QWORD *)&v1182 + 1))
          {
            v142 = (uint64_t)__src;
            if (__src)
            {
              if ((unint64_t)(v141 - 8) < 8)
              {
                v142 = 1;
                v143 = (uint64_t *)*((_QWORD *)&v1182 + 1);
                goto LABEL_184;
              }
              v144 = ((unint64_t)(v141 - 8) >> 3) + 1;
              v143 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v144 & 0x3FFFFFFFFFFFFFFELL));
              v145 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
              v146 = v144 & 0x3FFFFFFFFFFFFFFELL;
              v147 = 1;
              v148 = 1;
              do
              {
                v147 *= *(v145 - 1);
                v148 *= *v145;
                v145 += 2;
                v146 -= 2;
              }
              while (v146);
              v142 = v148 * v147;
              if (v144 != (v144 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_184:
                  v149 = *v143++;
                  v142 *= v149;
                }
                while (v143 != (uint64_t *)v1183);
              }
            }
            v150 = v141 >> 3;
            if ((unint64_t)(v141 >> 3) <= 1)
              v150 = 1;
            if (v150 < 2)
            {
              v151 = 0;
              v152 = 0;
              goto LABEL_192;
            }
            v153 = 0;
            v154 = 0;
            v151 = v150 & 0xFFFFFFFFFFFFFFFELL;
            v155 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v156 = (char *)v1184 + 8;
            v157 = v150 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v153 += *(v156 - 1) * (*(v155 - 1) - 1);
              v154 += *v156 * (*v155 - 1);
              v155 += 2;
              v156 += 2;
              v157 -= 2;
            }
            while (v157);
            v152 = v154 + v153;
            if (v150 != v151)
            {
LABEL_192:
              v158 = v150 - v151;
              v159 = 8 * v151;
              v160 = (uint64_t *)((char *)v1184 + v159);
              v161 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v159);
              do
              {
                v162 = *v161++;
                v163 = v162 - 1;
                v164 = *v160++;
                v152 += v164 * v163;
                --v158;
              }
              while (v158);
            }
            if (v142 != v152 + 1)
              goto LABEL_283;
          }
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v165 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v166 = (unint64_t *)(v1182 + 8);
            do
              v167 = __ldaxr(v166);
            while (__stlxr(v167 - 1, v166));
            if (!v167)
            {
              ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
              std::__shared_weak_count::__release_weak(v165);
            }
          }
          nitro::ndarray<int>::ndarray((uint64_t)&__src, *(_QWORD *)(*(_QWORD *)(v1205 + 8) + 16) + 8);
          if (v1186)
LABEL_284:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v168 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 == *((_QWORD *)&v1182 + 1))
            goto LABEL_223;
          v169 = (uint64_t)__src;
          if (__src)
          {
            if ((unint64_t)(v168 - 8) < 8)
            {
              v169 = 1;
              v170 = (uint64_t *)*((_QWORD *)&v1182 + 1);
              do
              {
LABEL_212:
                v176 = *v170++;
                v169 *= v176;
              }
              while (v170 != (uint64_t *)v1183);
              goto LABEL_213;
            }
            v171 = ((unint64_t)(v168 - 8) >> 3) + 1;
            v170 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v171 & 0x3FFFFFFFFFFFFFFELL));
            v172 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v173 = v171 & 0x3FFFFFFFFFFFFFFELL;
            v174 = 1;
            v175 = 1;
            do
            {
              v174 *= *(v172 - 1);
              v175 *= *v172;
              v172 += 2;
              v173 -= 2;
            }
            while (v173);
            v169 = v175 * v174;
            if (v171 != (v171 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_212;
          }
LABEL_213:
          v177 = v168 >> 3;
          if ((unint64_t)(v168 >> 3) <= 1)
            v177 = 1;
          if (v177 < 2)
          {
            v178 = 0;
            v179 = 0;
LABEL_220:
            v185 = v177 - v178;
            v186 = 8 * v178;
            v187 = (uint64_t *)((char *)v1184 + v186);
            v188 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v186);
            do
            {
              v189 = *v188++;
              v190 = v189 - 1;
              v191 = *v187++;
              v179 += v191 * v190;
              --v185;
            }
            while (v185);
            goto LABEL_222;
          }
          v180 = 0;
          v181 = 0;
          v178 = v177 & 0xFFFFFFFFFFFFFFFELL;
          v182 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
          v183 = (char *)v1184 + 8;
          v184 = v177 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v180 += *(v183 - 1) * (*(v182 - 1) - 1);
            v181 += *v183 * (*v182 - 1);
            v182 += 2;
            v183 += 2;
            v184 -= 2;
          }
          while (v184);
          v179 = v181 + v180;
          if (v177 != v178)
            goto LABEL_220;
LABEL_222:
          if (v169 != v179 + 1)
            goto LABEL_284;
LABEL_223:
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v192 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v193 = (unint64_t *)(v1182 + 8);
            do
              v194 = __ldaxr(v193);
            while (__stlxr(v194 - 1, v193));
            if (!v194)
            {
              ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
              std::__shared_weak_count::__release_weak(v192);
            }
          }
          std::vector<float>::__insert_with_size[abi:ne180100]<float *,float *>((unint64_t *)&v1194, v1195, (char *)__src, (char *)__src + 4 * *(int *)(v44 + 80), *(int *)(v44 + 80));
          std::vector<int>::__insert_with_size[abi:ne180100]<int *,int *>((unint64_t *)&v1191, v1192, (char *)__src, (char *)__src + 4 * *(int *)(v44 + 80), *(int *)(v44 + 80));
          switch(v1206)
          {
            case 2:
              v195 = (unint64_t *)v1205;
              do
              {
                v196 = __ldaxr(v195);
                v197 = v196 - 1;
              }
              while (__stlxr(v197, v195));
              if (!v197)
              {
                v198 = v1205;
                if (v1205)
                {
                  if (*(char *)(v1205 + 31) < 0)
                    operator delete(*(void **)(v1205 + 8));
                  v199 = v198;
                  v200 = 0x1012C404EF22A49;
                  goto LABEL_266;
                }
              }
              break;
            case 3:
              v208 = (unint64_t *)v1205;
              do
              {
                v209 = __ldaxr(v208);
                v210 = v209 - 1;
              }
              while (__stlxr(v210, v208));
              if (!v210)
              {
                v211 = v1205;
                if (v1205)
                {
                  v212 = *(void **)(v1205 + 8);
                  if (v212)
                  {
                    *(_QWORD *)(v1205 + 16) = v212;
                    operator delete(v212);
                  }
                  v199 = v211;
                  v200 = 0x1080C409938AC02;
                  goto LABEL_266;
                }
              }
              break;
            case 4:
              v201 = (unint64_t *)v1205;
              do
              {
                v202 = __ldaxr(v201);
                v203 = v202 - 1;
              }
              while (__stlxr(v203, v201));
              if (!v203)
              {
                v204 = v1205;
                if (v1205)
                {
                  v205 = *(_QWORD *)(v1205 + 8);
                  if (v205)
                  {
                    v206 = *(_QWORD *)(v1205 + 16);
                    v207 = *(void **)(v1205 + 8);
                    if (v206 != v205)
                    {
                      do
                      {
                        v206 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v204 + 24, v206);
                      }
                      while (v206 != v205);
                      v207 = *(void **)(v204 + 8);
                    }
                    *(_QWORD *)(v204 + 16) = v205;
                    operator delete(v207);
                    v44 = a2;
                  }
                  goto LABEL_265;
                }
              }
              break;
            case 5:
              v213 = (unint64_t *)v1205;
              do
              {
                v214 = __ldaxr(v213);
                v215 = v214 - 1;
              }
              while (__stlxr(v215, v213));
              if (!v215)
              {
                v204 = v1205;
                if (v1205)
                {
                  v216 = *(_QWORD *)(v1205 + 8);
                  if (v216)
                  {
                    v217 = *(_QWORD *)(v1205 + 16);
                    v218 = *(void **)(v1205 + 8);
                    if (v217 != v216)
                    {
                      do
                        v217 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v217 - 32);
                      while (v217 != v216);
                      v218 = *(void **)(v204 + 8);
                    }
                    *(_QWORD *)(v204 + 16) = v216;
                    operator delete(v218);
                  }
LABEL_265:
                  v199 = v204;
                  v200 = 0x1020C405E66F15BLL;
LABEL_266:
                  MEMORY[0x19401CD90](v199, v200);
                }
              }
              break;
            case 9:
              v219 = (unint64_t *)v1205;
              do
              {
                v220 = __ldaxr(v219);
                v221 = v220 - 1;
              }
              while (__stlxr(v221, v219));
              if (!v221)
              {
                v222 = (_QWORD *)v1205;
                if (v1205)
                {
                  v223 = *(void **)(v1205 + 56);
                  if (v223)
                  {
                    *(_QWORD *)(v1205 + 64) = v223;
                    operator delete(v223);
                  }
                  v224 = (void *)v222[4];
                  if (v224)
                  {
                    v222[5] = v224;
                    operator delete(v224);
                  }
                  v225 = (std::__shared_weak_count *)v222[3];
                  if (v225)
                  {
                    v226 = (unint64_t *)&v225->__shared_owners_;
                    do
                      v227 = __ldaxr(v226);
                    while (__stlxr(v227 - 1, v226));
                    if (!v227)
                    {
                      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
                      std::__shared_weak_count::__release_weak(v225);
                    }
                  }
                  MEMORY[0x19401CD90](v222, 0x10B0C4002311774);
                  v44 = a2;
                }
              }
              break;
            default:
              break;
          }
          if (v1171)
          {
            *(_QWORD *)&v1172 = v1171;
            operator delete(v1171);
          }
          v54 += v56;
          if (++v55 == v46)
          {
            v40 = v1188;
            v43 = ((v1189 - v1188) >> 3) - 1;
            goto LABEL_286;
          }
        }
        v140 = v1178;
        if (!v1178)
          goto LABEL_172;
LABEL_171:
        v1179 = v140;
        operator delete(v140);
        goto LABEL_172;
      }
      if (v42 == 2)
      {
        v45 = 0;
        v46 = 1;
LABEL_47:
        v51 = ~v45 + v42;
        v52 = &v40[8 * v45];
        do
        {
          v53 = *(_QWORD *)v52;
          v52 += 8;
          v46 *= v53;
          --v51;
        }
        while (v51);
        goto LABEL_49;
      }
      v45 = v43 & 0xFFFFFFFFFFFFFFFELL;
      v47 = v40 + 8;
      v48 = 1;
      v49 = v43 & 0xFFFFFFFFFFFFFFFELL;
      v50 = 1;
      do
      {
        v48 *= *(v47 - 1);
        v50 *= *v47;
        v47 += 2;
        v49 -= 2;
      }
      while (v49);
      v46 = v50 * v48;
      if (v43 != v45)
        goto LABEL_47;
LABEL_49:
      if (v46)
        goto LABEL_50;
LABEL_286:
      *(_QWORD *)&v40[8 * v43] = *(int *)(v44 + 80);
      v1178 = 0;
      v1179 = 0;
      v1180 = 0;
      nitro::ndarray_container::ndarray_container<float,(void *)0>((uint64_t)&__src, (uint64_t)&v1194, &v1188, (char **)&v1178, 0);
      v1197 = 0;
      LOBYTE(v1198) = 9;
      v228 = operator new();
      *(_QWORD *)v228 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v228 + 8));
      v1197 = (char *)v228;
      *(_QWORD *)v228 = 1;
      *(_DWORD *)(v228 + 8) = (_DWORD)__src;
      v229 = v1182;
      v1182 = 0uLL;
      v230 = *(std::__shared_weak_count **)(v228 + 24);
      *(_OWORD *)(v228 + 16) = v229;
      if (v230)
      {
        v231 = (unint64_t *)&v230->__shared_owners_;
        do
          v232 = __ldaxr(v231);
        while (__stlxr(v232 - 1, v231));
        if (!v232)
        {
          ((void (*)(std::__shared_weak_count *))v230->__on_zero_shared)(v230);
          std::__shared_weak_count::__release_weak(v230);
        }
      }
      v233 = *(void **)(v228 + 32);
      if (v233)
      {
        *(_QWORD *)(v228 + 40) = v233;
        operator delete(v233);
        *(_QWORD *)(v228 + 32) = 0;
        *(_QWORD *)(v228 + 40) = 0;
        *(_QWORD *)(v228 + 48) = 0;
      }
      v234 = *(void **)(v228 + 56);
      *(_OWORD *)(v228 + 32) = v1183;
      *(_QWORD *)(v228 + 48) = v1184;
      v1184 = 0;
      v1183 = 0uLL;
      if (v234)
      {
        *(_QWORD *)(v228 + 64) = v234;
        operator delete(v234);
        *(_QWORD *)(v228 + 56) = 0;
        *(_QWORD *)(v228 + 64) = 0;
        *(_QWORD *)(v228 + 72) = 0;
      }
      *(_OWORD *)(v228 + 56) = __p;
      v235 = v1186;
      v236 = v1187;
      v1186 = 0;
      __p = 0uLL;
      *(_QWORD *)(v228 + 72) = v235;
      *(_QWORD *)(v228 + 80) = v236;
      v1168 = 0;
      v1169 = 0;
      v1170 = 0;
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v1171, (uint64_t)&v1191, &v1188, (char **)&v1168, 0);
      v1199 = 0;
      v1200 = 9;
      v237 = operator new();
      *(_QWORD *)v237 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v237 + 8));
      v1199 = (char *)v237;
      *(_QWORD *)v237 = 1;
      *(_DWORD *)(v237 + 8) = (_DWORD)v1171;
      v238 = v1172;
      v1172 = 0uLL;
      v239 = *(std::__shared_weak_count **)(v237 + 24);
      *(_OWORD *)(v237 + 16) = v238;
      if (v239)
      {
        v240 = (unint64_t *)&v239->__shared_owners_;
        do
          v241 = __ldaxr(v240);
        while (__stlxr(v241 - 1, v240));
        if (!v241)
        {
          ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
          std::__shared_weak_count::__release_weak(v239);
        }
      }
      v242 = *(void **)(v237 + 32);
      if (v242)
      {
        *(_QWORD *)(v237 + 40) = v242;
        operator delete(v242);
        *(_QWORD *)(v237 + 32) = 0;
        *(_QWORD *)(v237 + 40) = 0;
        *(_QWORD *)(v237 + 48) = 0;
      }
      v243 = *(void **)(v237 + 56);
      *(_OWORD *)(v237 + 32) = v1173;
      *(_QWORD *)(v237 + 48) = v1174;
      v1174 = 0;
      v1173 = 0uLL;
      if (v243)
      {
        *(_QWORD *)(v237 + 64) = v243;
        operator delete(v243);
        *(_QWORD *)(v237 + 56) = 0;
        *(_QWORD *)(v237 + 64) = 0;
        *(_QWORD *)(v237 + 72) = 0;
      }
      *(_OWORD *)(v237 + 56) = v1175;
      v244 = v1176;
      v245 = v1177;
      v1176 = 0;
      v1175 = 0uLL;
      *(_QWORD *)(v237 + 72) = v244;
      *(_QWORD *)(v237 + 80) = v245;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v246 = (char *)operator new(0x20uLL);
      *a3 = v246;
      a3[1] = v246;
      a3[2] = v246 + 32;
      v247 = (unint64_t *)v1197;
      *(_QWORD *)v246 = v1197;
      v248 = v1198;
      v246[8] = (char)v1198;
      if ((v248 - 2) < 4 || v248 == 9)
      {
        do
          v249 = __ldaxr(v247);
        while (__stlxr(v249 + 1, v247));
      }
      v250 = (unint64_t *)v1199;
      *((_QWORD *)v246 + 2) = v1199;
      v251 = v1200;
      v246[24] = v1200;
      if ((v251 - 2) < 4 || v251 == 9)
      {
        do
          v253 = __ldaxr(v250);
        while (__stlxr(v253 + 1, v250));
      }
      v254 = (char **)&v1201;
      a3[1] = v246 + 32;
      do
      {
        v257 = v254;
        v254 -= 2;
        switch(*((_BYTE *)v257 - 8))
        {
          case 2:
            v258 = *v254;
            do
            {
              v259 = __ldaxr((unint64_t *)v258);
              v260 = v259 - 1;
            }
            while (__stlxr(v260, (unint64_t *)v258));
            if (!v260)
            {
              v261 = *v254;
              if (!*v254)
                goto LABEL_316;
              if (v261[31] < 0)
                operator delete(*((void **)v261 + 1));
              v255 = v261;
              v256 = 0x1012C404EF22A49;
              goto LABEL_315;
            }
            break;
          case 3:
            v269 = (unint64_t *)*v254;
            do
            {
              v270 = __ldaxr(v269);
              v271 = v270 - 1;
            }
            while (__stlxr(v271, v269));
            if (!v271)
            {
              v272 = *v254;
              if (!*v254)
                goto LABEL_316;
              v273 = (void *)*((_QWORD *)v272 + 1);
              if (v273)
              {
                *((_QWORD *)v272 + 2) = v273;
                operator delete(v273);
              }
              v255 = v272;
              v256 = 0x1080C409938AC02;
              goto LABEL_315;
            }
            break;
          case 4:
            v262 = (unint64_t *)*v254;
            do
            {
              v263 = __ldaxr(v262);
              v264 = v263 - 1;
            }
            while (__stlxr(v264, v262));
            if (!v264)
            {
              v265 = *v254;
              if (!*v254)
                goto LABEL_316;
              v266 = *((_QWORD *)v265 + 1);
              if (v266)
              {
                v267 = *((_QWORD *)v265 + 2);
                v268 = (void *)*((_QWORD *)v265 + 1);
                if (v267 != v266)
                {
                  do
                  {
                    v267 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v265 + 24), v267);
                  }
                  while (v267 != v266);
                  v268 = (void *)*((_QWORD *)v265 + 1);
                }
                *((_QWORD *)v265 + 2) = v266;
                goto LABEL_351;
              }
              goto LABEL_352;
            }
            break;
          case 5:
            v274 = (unint64_t *)*v254;
            do
            {
              v275 = __ldaxr(v274);
              v276 = v275 - 1;
            }
            while (__stlxr(v276, v274));
            if (!v276)
            {
              v265 = *v254;
              if (!*v254)
                goto LABEL_316;
              v277 = *((_QWORD *)v265 + 1);
              if (v277)
              {
                v278 = *((_QWORD *)v265 + 2);
                v279 = (void *)*((_QWORD *)v265 + 1);
                if (v278 != v277)
                {
                  do
                    v278 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v278 - 32);
                  while (v278 != v277);
                  v279 = (void *)*((_QWORD *)v265 + 1);
                }
                *((_QWORD *)v265 + 2) = v277;
                v268 = v279;
LABEL_351:
                operator delete(v268);
              }
LABEL_352:
              v255 = v265;
              v256 = 0x1020C405E66F15BLL;
              goto LABEL_315;
            }
            break;
          case 9:
            v280 = (unint64_t *)*v254;
            do
            {
              v281 = __ldaxr(v280);
              v282 = v281 - 1;
            }
            while (__stlxr(v282, v280));
            if (!v282)
            {
              v283 = *v254;
              if (*v254)
              {
                v284 = (void *)*((_QWORD *)v283 + 7);
                if (v284)
                {
                  *((_QWORD *)v283 + 8) = v284;
                  operator delete(v284);
                }
                v285 = (void *)*((_QWORD *)v283 + 4);
                if (v285)
                {
                  *((_QWORD *)v283 + 5) = v285;
                  operator delete(v285);
                }
                v286 = (std::__shared_weak_count *)*((_QWORD *)v283 + 3);
                if (v286)
                {
                  v287 = (unint64_t *)&v286->__shared_owners_;
                  do
                    v288 = __ldaxr(v287);
                  while (__stlxr(v288 - 1, v287));
                  if (!v288)
                  {
                    ((void (*)(std::__shared_weak_count *))v286->__on_zero_shared)(v286);
                    std::__shared_weak_count::__release_weak(v286);
                  }
                }
                v255 = v283;
                v256 = 0x10B0C4002311774;
LABEL_315:
                MEMORY[0x19401CD90](v255, v256);
              }
LABEL_316:
              *v254 = 0;
            }
            break;
          default:
            break;
        }
        *(v257 - 2) = 0;
        *((_BYTE *)v257 - 8) = 0;
      }
      while (v254 != &v1197);
      if ((_QWORD)v1175)
      {
        *((_QWORD *)&v1175 + 1) = v1175;
        operator delete((void *)v1175);
      }
      if ((_QWORD)v1173)
      {
        *((_QWORD *)&v1173 + 1) = v1173;
        operator delete((void *)v1173);
      }
      v289 = (std::__shared_weak_count *)*((_QWORD *)&v1172 + 1);
      if (*((_QWORD *)&v1172 + 1))
      {
        v290 = (unint64_t *)(*((_QWORD *)&v1172 + 1) + 8);
        do
          v291 = __ldaxr(v290);
        while (__stlxr(v291 - 1, v290));
        if (!v291)
        {
          ((void (*)(std::__shared_weak_count *))v289->__on_zero_shared)(v289);
          std::__shared_weak_count::__release_weak(v289);
        }
      }
      if (v1168)
      {
        v1169 = v1168;
        operator delete(v1168);
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((_QWORD)v1183)
      {
        *((_QWORD *)&v1183 + 1) = v1183;
        operator delete((void *)v1183);
      }
      v292 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
      if (*((_QWORD *)&v1182 + 1))
      {
        v293 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
        do
          v294 = __ldaxr(v293);
        while (__stlxr(v294 - 1, v293));
        if (!v294)
        {
          ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
          std::__shared_weak_count::__release_weak(v292);
        }
      }
      if (v1178)
      {
        v1179 = v1178;
        operator delete(v1178);
      }
      if (v1188)
      {
        v1189 = v1188;
        operator delete(v1188);
      }
      if (v1191)
      {
        v1192 = v1191;
        operator delete(v1191);
      }
      if (v1194)
      {
        v1195 = v1194;
        operator delete(v1194);
      }
      if (v1144)
      {
        v1145 = v1144;
        operator delete(v1144);
      }
      if (v1142)
      {
        v1143 = (uint64_t *)v1142;
        operator delete(v1142);
      }
      v295 = v1141;
      if (!v1141)
        return;
      v296 = (unint64_t *)&v1141->__shared_owners_;
      do
        v297 = __ldaxr(v296);
      while (__stlxr(v297 - 1, v296));
      goto LABEL_1541;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1147, (uint64_t)a1);
      if (v1153)
        goto LABEL_1545;
      v10 = (char *)v1150 - (_BYTE *)v1149;
      if (v1150 == v1149)
        goto LABEL_416;
      v11 = v1147;
      if (!v1147)
        goto LABEL_406;
      if ((unint64_t)(v10 - 8) < 8)
      {
        v11 = 1;
        v12 = (uint64_t *)v1149;
        do
        {
LABEL_405:
          v303 = *v12++;
          v11 *= v303;
        }
        while (v12 != v1150);
        goto LABEL_406;
      }
      v298 = ((unint64_t)(v10 - 8) >> 3) + 1;
      v12 = (uint64_t *)((char *)v1149 + 8 * (v298 & 0x3FFFFFFFFFFFFFFELL));
      v299 = (char *)v1149 + 8;
      v300 = 1;
      v301 = v298 & 0x3FFFFFFFFFFFFFFELL;
      v302 = 1;
      do
      {
        v300 *= *(v299 - 1);
        v302 *= *v299;
        v299 += 2;
        v301 -= 2;
      }
      while (v301);
      v11 = v302 * v300;
      if (v298 != (v298 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_405;
LABEL_406:
      v304 = v10 >> 3;
      if ((unint64_t)(v10 >> 3) <= 1)
        v304 = 1;
      if (v304 < 2)
      {
        v305 = 0;
        v306 = 0;
LABEL_413:
        v312 = v304 - v305;
        v313 = 8 * v305;
        v314 = (uint64_t *)((char *)v1151 + v313);
        v315 = (uint64_t *)((char *)v1149 + v313);
        do
        {
          v316 = *v315++;
          v317 = v316 - 1;
          v318 = *v314++;
          v306 += v318 * v317;
          --v312;
        }
        while (v312);
        goto LABEL_415;
      }
      v307 = 0;
      v308 = 0;
      v305 = v304 & 0xFFFFFFFFFFFFFFFELL;
      v309 = (char *)v1149 + 8;
      v310 = (char *)v1151 + 8;
      v311 = v304 & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        v307 += *(v310 - 1) * (*(v309 - 1) - 1);
        v308 += *v310 * (*v309 - 1);
        v309 += 2;
        v310 += 2;
        v311 -= 2;
      }
      while (v311);
      v306 = v308 + v307;
      if (v304 != v305)
        goto LABEL_413;
LABEL_415:
      if (v11 != v306 + 1)
LABEL_1545:
        nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
LABEL_416:
      v1194 = 0;
      v1195 = 0;
      v1196 = 0;
      v1191 = 0;
      v1192 = 0;
      v1193 = 0;
      v1188 = 0;
      v1189 = 0;
      v1190 = 0;
      v320 = *(_BYTE **)(a2 + 24);
      v319 = *(_BYTE **)(a2 + 32);
      v321 = v319 - v320;
      if (v319 == v320)
      {
        v322 = 0;
        v323 = 0;
      }
      else
      {
        if (v321 < 0)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        v322 = (char *)operator new(v319 - v320);
        v1188 = v322;
        v1189 = v322;
        v323 = &v322[8 * (v321 >> 3)];
        v1190 = v323;
        memcpy(v322, v320, v321);
        v1189 = v323;
      }
      v324 = (v323 - v322) >> 3;
      v325 = v324 - 1;
      v326 = a2;
      if (v324 == 1)
      {
        v328 = 1;
LABEL_430:
        v336 = 0;
        v337 = 0;
        v338 = *(_QWORD *)&v322[8 * v325];
        while (1)
        {
          v339 = v1147;
          v1172 = 0uLL;
          v1171 = 0;
          if (v338)
          {
            if (v338 < 0)
              std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
            v340 = (char *)operator new(2 * v338);
            v341 = (const void *)(v339 + 2 * v336);
            v1171 = v340;
            *(_QWORD *)&v1172 = v340;
            v342 = &v340[2 * v338];
            *((_QWORD *)&v1172 + 1) = v342;
            memcpy(v340, v341, 2 * v338);
            *(_QWORD *)&v1172 = v342;
          }
          v343 = (char *)operator new(8uLL);
          v1197 = v343;
          *(_QWORD *)v343 = v338;
          v1198 = v343 + 8;
          v1199 = v343 + 8;
          v1178 = 0;
          v1179 = 0;
          v1180 = 0;
          nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__src, (uint64_t)&v1171, &v1197, (char **)&v1178, 0);
          v1203 = 0;
          v1204 = 9;
          v344 = operator new();
          *(_QWORD *)v344 = 0;
          nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v344 + 8));
          v1203 = v344;
          *(_QWORD *)v344 = 1;
          *(_DWORD *)(v344 + 8) = (_DWORD)__src;
          v345 = v1182;
          v1182 = 0uLL;
          v346 = *(std::__shared_weak_count **)(v344 + 24);
          *(_OWORD *)(v344 + 16) = v345;
          if (v346)
          {
            v347 = (unint64_t *)&v346->__shared_owners_;
            do
              v348 = __ldaxr(v347);
            while (__stlxr(v348 - 1, v347));
            if (!v348)
            {
              ((void (*)(std::__shared_weak_count *))v346->__on_zero_shared)(v346);
              std::__shared_weak_count::__release_weak(v346);
            }
          }
          v349 = *(void **)(v344 + 32);
          if (v349)
          {
            *(_QWORD *)(v344 + 40) = v349;
            operator delete(v349);
            *(_QWORD *)(v344 + 32) = 0;
            *(_QWORD *)(v344 + 40) = 0;
            *(_QWORD *)(v344 + 48) = 0;
          }
          v350 = *(void **)(v344 + 56);
          *(_OWORD *)(v344 + 32) = v1183;
          *(_QWORD *)(v344 + 48) = v1184;
          v1184 = 0;
          v1183 = 0uLL;
          v326 = a2;
          if (v350)
          {
            *(_QWORD *)(v344 + 64) = v350;
            operator delete(v350);
            *(_QWORD *)(v344 + 56) = 0;
            *(_QWORD *)(v344 + 64) = 0;
            *(_QWORD *)(v344 + 72) = 0;
          }
          *(_OWORD *)(v344 + 56) = __p;
          v351 = v1186;
          v352 = v1187;
          v1186 = 0;
          __p = 0uLL;
          *(_QWORD *)(v344 + 72) = v351;
          *(_QWORD *)(v344 + 80) = v352;
          v1202 = 0;
          v1201 = *(int *)(a2 + 80);
          nitro::nitro_builtins::TopK_1d((nitro::nitro_builtins *)&v1203, (const nitro::flexible_type *)&v1201, (uint64_t)&v1205);
          switch(v1202)
          {
            case 2:
              v353 = (unint64_t *)v1201;
              do
              {
                v354 = __ldaxr(v353);
                v355 = v354 - 1;
              }
              while (__stlxr(v355, v353));
              if (!v355)
              {
                v356 = v1201;
                if (v1201)
                {
                  if (*(char *)(v1201 + 31) < 0)
                    operator delete(*(void **)(v1201 + 8));
                  v357 = v356;
                  v358 = 0x1012C404EF22A49;
                  goto LABEL_478;
                }
              }
              break;
            case 3:
              v366 = (unint64_t *)v1201;
              do
              {
                v367 = __ldaxr(v366);
                v368 = v367 - 1;
              }
              while (__stlxr(v368, v366));
              if (!v368)
              {
                v369 = v1201;
                if (v1201)
                {
                  v370 = *(void **)(v1201 + 8);
                  if (v370)
                  {
                    *(_QWORD *)(v1201 + 16) = v370;
                    operator delete(v370);
                  }
                  v357 = v369;
                  v358 = 0x1080C409938AC02;
                  goto LABEL_478;
                }
              }
              break;
            case 4:
              v359 = (unint64_t *)v1201;
              do
              {
                v360 = __ldaxr(v359);
                v361 = v360 - 1;
              }
              while (__stlxr(v361, v359));
              if (!v361)
              {
                v362 = v1201;
                if (v1201)
                {
                  v363 = *(_QWORD *)(v1201 + 8);
                  if (v363)
                  {
                    v364 = *(_QWORD *)(v1201 + 16);
                    v365 = *(void **)(v1201 + 8);
                    if (v364 != v363)
                    {
                      do
                      {
                        v364 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v362 + 24, v364);
                      }
                      while (v364 != v363);
                      v365 = *(void **)(v362 + 8);
                    }
                    *(_QWORD *)(v362 + 16) = v363;
                    operator delete(v365);
                    v326 = a2;
                  }
                  goto LABEL_477;
                }
              }
              break;
            case 5:
              v371 = (unint64_t *)v1201;
              do
              {
                v372 = __ldaxr(v371);
                v373 = v372 - 1;
              }
              while (__stlxr(v373, v371));
              if (!v373)
              {
                v362 = v1201;
                if (v1201)
                {
                  v374 = *(_QWORD *)(v1201 + 8);
                  if (v374)
                  {
                    v375 = *(_QWORD *)(v1201 + 16);
                    v376 = *(void **)(v1201 + 8);
                    if (v375 != v374)
                    {
                      do
                        v375 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v375 - 32);
                      while (v375 != v374);
                      v376 = *(void **)(v362 + 8);
                    }
                    *(_QWORD *)(v362 + 16) = v374;
                    operator delete(v376);
                  }
LABEL_477:
                  v357 = v362;
                  v358 = 0x1020C405E66F15BLL;
LABEL_478:
                  MEMORY[0x19401CD90](v357, v358);
                }
              }
              break;
            case 9:
              v377 = (unint64_t *)v1201;
              do
              {
                v378 = __ldaxr(v377);
                v379 = v378 - 1;
              }
              while (__stlxr(v379, v377));
              if (!v379)
              {
                v380 = (_QWORD *)v1201;
                if (v1201)
                {
                  v381 = *(void **)(v1201 + 56);
                  if (v381)
                  {
                    *(_QWORD *)(v1201 + 64) = v381;
                    operator delete(v381);
                  }
                  v382 = (void *)v380[4];
                  if (v382)
                  {
                    v380[5] = v382;
                    operator delete(v382);
                  }
                  v383 = (std::__shared_weak_count *)v380[3];
                  if (v383)
                  {
                    v384 = (unint64_t *)&v383->__shared_owners_;
                    do
                      v385 = __ldaxr(v384);
                    while (__stlxr(v385 - 1, v384));
                    if (!v385)
                    {
                      ((void (*)(std::__shared_weak_count *))v383->__on_zero_shared)(v383);
                      std::__shared_weak_count::__release_weak(v383);
                    }
                  }
                  MEMORY[0x19401CD90](v380, 0x10B0C4002311774);
                  v326 = a2;
                }
              }
              break;
            default:
              break;
          }
          switch(v1204)
          {
            case 2:
              v386 = (unint64_t *)v1203;
              do
              {
                v387 = __ldaxr(v386);
                v388 = v387 - 1;
              }
              while (__stlxr(v388, v386));
              if (!v388)
              {
                v389 = v1203;
                if (v1203)
                {
                  if (*(char *)(v1203 + 31) < 0)
                    operator delete(*(void **)(v1203 + 8));
                  v390 = v389;
                  v391 = 0x1012C404EF22A49;
                  goto LABEL_527;
                }
              }
              break;
            case 3:
              v399 = (unint64_t *)v1203;
              do
              {
                v400 = __ldaxr(v399);
                v401 = v400 - 1;
              }
              while (__stlxr(v401, v399));
              if (!v401)
              {
                v402 = v1203;
                if (v1203)
                {
                  v403 = *(void **)(v1203 + 8);
                  if (v403)
                  {
                    *(_QWORD *)(v1203 + 16) = v403;
                    operator delete(v403);
                  }
                  v390 = v402;
                  v391 = 0x1080C409938AC02;
                  goto LABEL_527;
                }
              }
              break;
            case 4:
              v392 = (unint64_t *)v1203;
              do
              {
                v393 = __ldaxr(v392);
                v394 = v393 - 1;
              }
              while (__stlxr(v394, v392));
              if (!v394)
              {
                v395 = v1203;
                if (v1203)
                {
                  v396 = *(_QWORD *)(v1203 + 8);
                  if (v396)
                  {
                    v397 = *(_QWORD *)(v1203 + 16);
                    v398 = *(void **)(v1203 + 8);
                    if (v397 != v396)
                    {
                      do
                      {
                        v397 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v395 + 24, v397);
                      }
                      while (v397 != v396);
                      v398 = *(void **)(v395 + 8);
                    }
                    *(_QWORD *)(v395 + 16) = v396;
                    operator delete(v398);
                    v326 = a2;
                  }
                  goto LABEL_526;
                }
              }
              break;
            case 5:
              v404 = (unint64_t *)v1203;
              do
              {
                v405 = __ldaxr(v404);
                v406 = v405 - 1;
              }
              while (__stlxr(v406, v404));
              if (!v406)
              {
                v395 = v1203;
                if (v1203)
                {
                  v407 = *(_QWORD *)(v1203 + 8);
                  if (v407)
                  {
                    v408 = *(_QWORD *)(v1203 + 16);
                    v409 = *(void **)(v1203 + 8);
                    if (v408 != v407)
                    {
                      do
                        v408 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v408 - 32);
                      while (v408 != v407);
                      v409 = *(void **)(v395 + 8);
                    }
                    *(_QWORD *)(v395 + 16) = v407;
                    operator delete(v409);
                  }
LABEL_526:
                  v390 = v395;
                  v391 = 0x1020C405E66F15BLL;
LABEL_527:
                  MEMORY[0x19401CD90](v390, v391);
                }
              }
              break;
            case 9:
              v410 = (unint64_t *)v1203;
              do
              {
                v411 = __ldaxr(v410);
                v412 = v411 - 1;
              }
              while (__stlxr(v412, v410));
              if (!v412)
              {
                v413 = (_QWORD *)v1203;
                if (v1203)
                {
                  v414 = *(void **)(v1203 + 56);
                  if (v414)
                  {
                    *(_QWORD *)(v1203 + 64) = v414;
                    operator delete(v414);
                  }
                  v415 = (void *)v413[4];
                  if (v415)
                  {
                    v413[5] = v415;
                    operator delete(v415);
                  }
                  v416 = (std::__shared_weak_count *)v413[3];
                  if (v416)
                  {
                    v417 = (unint64_t *)&v416->__shared_owners_;
                    do
                      v418 = __ldaxr(v417);
                    while (__stlxr(v418 - 1, v417));
                    if (!v418)
                    {
                      ((void (*)(std::__shared_weak_count *))v416->__on_zero_shared)(v416);
                      std::__shared_weak_count::__release_weak(v416);
                    }
                  }
                  MEMORY[0x19401CD90](v413, 0x10B0C4002311774);
                  v326 = a2;
                }
              }
              break;
            default:
              break;
          }
          v1203 = 0;
          v1204 = 0;
          if ((_QWORD)__p)
          {
            *((_QWORD *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if ((_QWORD)v1183)
          {
            *((_QWORD *)&v1183 + 1) = v1183;
            operator delete((void *)v1183);
          }
          v419 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
          if (!*((_QWORD *)&v1182 + 1))
            break;
          v420 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
          do
            v421 = __ldaxr(v420);
          while (__stlxr(v421 - 1, v420));
          if (v421)
            break;
          ((void (*)(std::__shared_weak_count *))v419->__on_zero_shared)(v419);
          std::__shared_weak_count::__release_weak(v419);
          v422 = v1178;
          if (v1178)
            goto LABEL_551;
LABEL_552:
          if (v1197)
          {
            v1198 = v1197;
            operator delete(v1197);
          }
          nitro::ndarray<half>::ndarray((uint64_t)&__src, **(_QWORD **)(v1205 + 8) + 8);
          if (v1186)
LABEL_663:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v423 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 != *((_QWORD *)&v1182 + 1))
          {
            v424 = (uint64_t)__src;
            if (__src)
            {
              if ((unint64_t)(v423 - 8) < 8)
              {
                v424 = 1;
                v425 = (uint64_t *)*((_QWORD *)&v1182 + 1);
                goto LABEL_564;
              }
              v426 = ((unint64_t)(v423 - 8) >> 3) + 1;
              v425 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v426 & 0x3FFFFFFFFFFFFFFELL));
              v427 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
              v428 = v426 & 0x3FFFFFFFFFFFFFFELL;
              v429 = 1;
              v430 = 1;
              do
              {
                v429 *= *(v427 - 1);
                v430 *= *v427;
                v427 += 2;
                v428 -= 2;
              }
              while (v428);
              v424 = v430 * v429;
              if (v426 != (v426 & 0x3FFFFFFFFFFFFFFELL))
              {
                do
                {
LABEL_564:
                  v431 = *v425++;
                  v424 *= v431;
                }
                while (v425 != (uint64_t *)v1183);
              }
            }
            v432 = v423 >> 3;
            if ((unint64_t)(v423 >> 3) <= 1)
              v432 = 1;
            if (v432 < 2)
            {
              v433 = 0;
              v434 = 0;
              goto LABEL_572;
            }
            v435 = 0;
            v436 = 0;
            v433 = v432 & 0xFFFFFFFFFFFFFFFELL;
            v437 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v438 = (char *)v1184 + 8;
            v439 = v432 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              v435 += *(v438 - 1) * (*(v437 - 1) - 1);
              v436 += *v438 * (*v437 - 1);
              v437 += 2;
              v438 += 2;
              v439 -= 2;
            }
            while (v439);
            v434 = v436 + v435;
            if (v432 != v433)
            {
LABEL_572:
              v440 = v432 - v433;
              v441 = 8 * v433;
              v442 = (uint64_t *)((char *)v1184 + v441);
              v443 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v441);
              do
              {
                v444 = *v443++;
                v445 = v444 - 1;
                v446 = *v442++;
                v434 += v446 * v445;
                --v440;
              }
              while (v440);
            }
            if (v424 != v434 + 1)
              goto LABEL_663;
          }
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v447 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v448 = (unint64_t *)(v1182 + 8);
            do
              v449 = __ldaxr(v448);
            while (__stlxr(v449 - 1, v448));
            if (!v449)
            {
              ((void (*)(std::__shared_weak_count *))v447->__on_zero_shared)(v447);
              std::__shared_weak_count::__release_weak(v447);
            }
          }
          nitro::ndarray<int>::ndarray((uint64_t)&__src, *(_QWORD *)(*(_QWORD *)(v1205 + 8) + 16) + 8);
          if (v1186)
LABEL_664:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v450 = v1183 - *((_QWORD *)&v1182 + 1);
          if ((_QWORD)v1183 == *((_QWORD *)&v1182 + 1))
            goto LABEL_603;
          v451 = (uint64_t)__src;
          if (__src)
          {
            if ((unint64_t)(v450 - 8) < 8)
            {
              v451 = 1;
              v452 = (uint64_t *)*((_QWORD *)&v1182 + 1);
              do
              {
LABEL_592:
                v458 = *v452++;
                v451 *= v458;
              }
              while (v452 != (uint64_t *)v1183);
              goto LABEL_593;
            }
            v453 = ((unint64_t)(v450 - 8) >> 3) + 1;
            v452 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + 8 * (v453 & 0x3FFFFFFFFFFFFFFELL));
            v454 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
            v455 = v453 & 0x3FFFFFFFFFFFFFFELL;
            v456 = 1;
            v457 = 1;
            do
            {
              v456 *= *(v454 - 1);
              v457 *= *v454;
              v454 += 2;
              v455 -= 2;
            }
            while (v455);
            v451 = v457 * v456;
            if (v453 != (v453 & 0x3FFFFFFFFFFFFFFELL))
              goto LABEL_592;
          }
LABEL_593:
          v459 = v450 >> 3;
          if ((unint64_t)(v450 >> 3) <= 1)
            v459 = 1;
          if (v459 < 2)
          {
            v460 = 0;
            v461 = 0;
LABEL_600:
            v467 = v459 - v460;
            v468 = 8 * v460;
            v469 = (uint64_t *)((char *)v1184 + v468);
            v470 = (uint64_t *)(*((_QWORD *)&v1182 + 1) + v468);
            do
            {
              v471 = *v470++;
              v472 = v471 - 1;
              v473 = *v469++;
              v461 += v473 * v472;
              --v467;
            }
            while (v467);
            goto LABEL_602;
          }
          v462 = 0;
          v463 = 0;
          v460 = v459 & 0xFFFFFFFFFFFFFFFELL;
          v464 = (_QWORD *)(*((_QWORD *)&v1182 + 1) + 8);
          v465 = (char *)v1184 + 8;
          v466 = v459 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v462 += *(v465 - 1) * (*(v464 - 1) - 1);
            v463 += *v465 * (*v464 - 1);
            v464 += 2;
            v465 += 2;
            v466 -= 2;
          }
          while (v466);
          v461 = v463 + v462;
          if (v459 != v460)
            goto LABEL_600;
LABEL_602:
          if (v451 != v461 + 1)
            goto LABEL_664;
LABEL_603:
          if (v1184)
          {
            *(_QWORD *)&__p = v1184;
            operator delete(v1184);
          }
          if (*((_QWORD *)&v1182 + 1))
          {
            *(_QWORD *)&v1183 = *((_QWORD *)&v1182 + 1);
            operator delete(*((void **)&v1182 + 1));
          }
          v474 = (std::__shared_weak_count *)v1182;
          if ((_QWORD)v1182)
          {
            v475 = (unint64_t *)(v1182 + 8);
            do
              v476 = __ldaxr(v475);
            while (__stlxr(v476 - 1, v475));
            if (!v476)
            {
              ((void (*)(std::__shared_weak_count *))v474->__on_zero_shared)(v474);
              std::__shared_weak_count::__release_weak(v474);
            }
          }
          std::vector<half>::__insert_with_size[abi:ne180100]<half *,half *>((unint64_t *)&v1194, v1195, (char *)__src, (char *)__src + 2 * *(int *)(v326 + 80), *(int *)(v326 + 80));
          std::vector<int>::__insert_with_size[abi:ne180100]<int *,int *>((unint64_t *)&v1191, v1192, (char *)__src, (char *)__src + 4 * *(int *)(v326 + 80), *(int *)(v326 + 80));
          switch(v1206)
          {
            case 2:
              v477 = (unint64_t *)v1205;
              do
              {
                v478 = __ldaxr(v477);
                v479 = v478 - 1;
              }
              while (__stlxr(v479, v477));
              if (!v479)
              {
                v480 = v1205;
                if (v1205)
                {
                  if (*(char *)(v1205 + 31) < 0)
                    operator delete(*(void **)(v1205 + 8));
                  v481 = v480;
                  v482 = 0x1012C404EF22A49;
                  goto LABEL_646;
                }
              }
              break;
            case 3:
              v490 = (unint64_t *)v1205;
              do
              {
                v491 = __ldaxr(v490);
                v492 = v491 - 1;
              }
              while (__stlxr(v492, v490));
              if (!v492)
              {
                v493 = v1205;
                if (v1205)
                {
                  v494 = *(void **)(v1205 + 8);
                  if (v494)
                  {
                    *(_QWORD *)(v1205 + 16) = v494;
                    operator delete(v494);
                  }
                  v481 = v493;
                  v482 = 0x1080C409938AC02;
                  goto LABEL_646;
                }
              }
              break;
            case 4:
              v483 = (unint64_t *)v1205;
              do
              {
                v484 = __ldaxr(v483);
                v485 = v484 - 1;
              }
              while (__stlxr(v485, v483));
              if (!v485)
              {
                v486 = v1205;
                if (v1205)
                {
                  v487 = *(_QWORD *)(v1205 + 8);
                  if (v487)
                  {
                    v488 = *(_QWORD *)(v1205 + 16);
                    v489 = *(void **)(v1205 + 8);
                    if (v488 != v487)
                    {
                      do
                      {
                        v488 -= 16;
                        std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v486 + 24, v488);
                      }
                      while (v488 != v487);
                      v489 = *(void **)(v486 + 8);
                    }
                    *(_QWORD *)(v486 + 16) = v487;
                    operator delete(v489);
                    v326 = a2;
                  }
                  goto LABEL_645;
                }
              }
              break;
            case 5:
              v495 = (unint64_t *)v1205;
              do
              {
                v496 = __ldaxr(v495);
                v497 = v496 - 1;
              }
              while (__stlxr(v497, v495));
              if (!v497)
              {
                v486 = v1205;
                if (v1205)
                {
                  v498 = *(_QWORD *)(v1205 + 8);
                  if (v498)
                  {
                    v499 = *(_QWORD *)(v1205 + 16);
                    v500 = *(void **)(v1205 + 8);
                    if (v499 != v498)
                    {
                      do
                        v499 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v499 - 32);
                      while (v499 != v498);
                      v500 = *(void **)(v486 + 8);
                    }
                    *(_QWORD *)(v486 + 16) = v498;
                    operator delete(v500);
                  }
LABEL_645:
                  v481 = v486;
                  v482 = 0x1020C405E66F15BLL;
LABEL_646:
                  MEMORY[0x19401CD90](v481, v482);
                }
              }
              break;
            case 9:
              v501 = (unint64_t *)v1205;
              do
              {
                v502 = __ldaxr(v501);
                v503 = v502 - 1;
              }
              while (__stlxr(v503, v501));
              if (!v503)
              {
                v504 = (_QWORD *)v1205;
                if (v1205)
                {
                  v505 = *(void **)(v1205 + 56);
                  if (v505)
                  {
                    *(_QWORD *)(v1205 + 64) = v505;
                    operator delete(v505);
                  }
                  v506 = (void *)v504[4];
                  if (v506)
                  {
                    v504[5] = v506;
                    operator delete(v506);
                  }
                  v507 = (std::__shared_weak_count *)v504[3];
                  if (v507)
                  {
                    v508 = (unint64_t *)&v507->__shared_owners_;
                    do
                      v509 = __ldaxr(v508);
                    while (__stlxr(v509 - 1, v508));
                    if (!v509)
                    {
                      ((void (*)(std::__shared_weak_count *))v507->__on_zero_shared)(v507);
                      std::__shared_weak_count::__release_weak(v507);
                    }
                  }
                  MEMORY[0x19401CD90](v504, 0x10B0C4002311774);
                  v326 = a2;
                }
              }
              break;
            default:
              break;
          }
          if (v1171)
          {
            *(_QWORD *)&v1172 = v1171;
            operator delete(v1171);
          }
          v336 += v338;
          if (++v337 == v328)
          {
            v322 = v1188;
            v325 = ((v1189 - v1188) >> 3) - 1;
            goto LABEL_666;
          }
        }
        v422 = v1178;
        if (!v1178)
          goto LABEL_552;
LABEL_551:
        v1179 = v422;
        operator delete(v422);
        goto LABEL_552;
      }
      if (v324 == 2)
      {
        v327 = 0;
        v328 = 1;
LABEL_427:
        v333 = ~v327 + v324;
        v334 = &v322[8 * v327];
        do
        {
          v335 = *(_QWORD *)v334;
          v334 += 8;
          v328 *= v335;
          --v333;
        }
        while (v333);
        goto LABEL_429;
      }
      v327 = v325 & 0xFFFFFFFFFFFFFFFELL;
      v329 = v322 + 8;
      v330 = 1;
      v331 = v325 & 0xFFFFFFFFFFFFFFFELL;
      v332 = 1;
      do
      {
        v330 *= *(v329 - 1);
        v332 *= *v329;
        v329 += 2;
        v331 -= 2;
      }
      while (v331);
      v328 = v332 * v330;
      if (v325 != v327)
        goto LABEL_427;
LABEL_429:
      if (v328)
        goto LABEL_430;
LABEL_666:
      *(_QWORD *)&v322[8 * v325] = *(int *)(v326 + 80);
      v1178 = 0;
      v1179 = 0;
      v1180 = 0;
      nitro::ndarray_container::ndarray_container<half,(void *)0>((uint64_t)&__src, (uint64_t)&v1194, &v1188, (char **)&v1178, 0);
      v1197 = 0;
      LOBYTE(v1198) = 9;
      v510 = operator new();
      *(_QWORD *)v510 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v510 + 8));
      v1197 = (char *)v510;
      *(_QWORD *)v510 = 1;
      *(_DWORD *)(v510 + 8) = (_DWORD)__src;
      v511 = v1182;
      v1182 = 0uLL;
      v512 = *(std::__shared_weak_count **)(v510 + 24);
      *(_OWORD *)(v510 + 16) = v511;
      if (v512)
      {
        v513 = (unint64_t *)&v512->__shared_owners_;
        do
          v514 = __ldaxr(v513);
        while (__stlxr(v514 - 1, v513));
        if (!v514)
        {
          ((void (*)(std::__shared_weak_count *))v512->__on_zero_shared)(v512);
          std::__shared_weak_count::__release_weak(v512);
        }
      }
      v515 = *(void **)(v510 + 32);
      if (v515)
      {
        *(_QWORD *)(v510 + 40) = v515;
        operator delete(v515);
        *(_QWORD *)(v510 + 32) = 0;
        *(_QWORD *)(v510 + 40) = 0;
        *(_QWORD *)(v510 + 48) = 0;
      }
      v516 = *(void **)(v510 + 56);
      *(_OWORD *)(v510 + 32) = v1183;
      *(_QWORD *)(v510 + 48) = v1184;
      v1184 = 0;
      v1183 = 0uLL;
      if (v516)
      {
        *(_QWORD *)(v510 + 64) = v516;
        operator delete(v516);
        *(_QWORD *)(v510 + 56) = 0;
        *(_QWORD *)(v510 + 64) = 0;
        *(_QWORD *)(v510 + 72) = 0;
      }
      *(_OWORD *)(v510 + 56) = __p;
      v517 = v1186;
      v518 = v1187;
      v1186 = 0;
      __p = 0uLL;
      *(_QWORD *)(v510 + 72) = v517;
      *(_QWORD *)(v510 + 80) = v518;
      v1168 = 0;
      v1169 = 0;
      v1170 = 0;
      nitro::ndarray_container::ndarray_container<int,(void *)0>((uint64_t)&v1171, (uint64_t)&v1191, &v1188, (char **)&v1168, 0);
      v1199 = 0;
      v1200 = 9;
      v519 = operator new();
      *(_QWORD *)v519 = 0;
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)(v519 + 8));
      v1199 = (char *)v519;
      *(_QWORD *)v519 = 1;
      *(_DWORD *)(v519 + 8) = (_DWORD)v1171;
      v520 = v1172;
      v1172 = 0uLL;
      v521 = *(std::__shared_weak_count **)(v519 + 24);
      *(_OWORD *)(v519 + 16) = v520;
      if (v521)
      {
        v522 = (unint64_t *)&v521->__shared_owners_;
        do
          v523 = __ldaxr(v522);
        while (__stlxr(v523 - 1, v522));
        if (!v523)
        {
          ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
          std::__shared_weak_count::__release_weak(v521);
        }
      }
      v524 = *(void **)(v519 + 32);
      if (v524)
      {
        *(_QWORD *)(v519 + 40) = v524;
        operator delete(v524);
        *(_QWORD *)(v519 + 32) = 0;
        *(_QWORD *)(v519 + 40) = 0;
        *(_QWORD *)(v519 + 48) = 0;
      }
      v525 = *(void **)(v519 + 56);
      *(_OWORD *)(v519 + 32) = v1173;
      *(_QWORD *)(v519 + 48) = v1174;
      v1174 = 0;
      v1173 = 0uLL;
      if (v525)
      {
        *(_QWORD *)(v519 + 64) = v525;
        operator delete(v525);
        *(_QWORD *)(v519 + 56) = 0;
        *(_QWORD *)(v519 + 64) = 0;
        *(_QWORD *)(v519 + 72) = 0;
      }
      *(_OWORD *)(v519 + 56) = v1175;
      v526 = v1176;
      v527 = v1177;
      v1176 = 0;
      v1175 = 0uLL;
      *(_QWORD *)(v519 + 72) = v526;
      *(_QWORD *)(v519 + 80) = v527;
      a3[1] = 0;
      a3[2] = 0;
      *a3 = 0;
      v528 = (char *)operator new(0x20uLL);
      *a3 = v528;
      a3[1] = v528;
      a3[2] = v528 + 32;
      v529 = (unint64_t *)v1197;
      *(_QWORD *)v528 = v1197;
      v530 = v1198;
      v528[8] = (char)v1198;
      if ((v530 - 2) < 4 || v530 == 9)
      {
        do
          v531 = __ldaxr(v529);
        while (__stlxr(v531 + 1, v529));
      }
      v532 = (unint64_t *)v1199;
      *((_QWORD *)v528 + 2) = v1199;
      v533 = v1200;
      v528[24] = v1200;
      if ((v533 - 2) < 4 || v533 == 9)
      {
        do
          v535 = __ldaxr(v532);
        while (__stlxr(v535 + 1, v532));
      }
      v536 = (char **)&v1201;
      a3[1] = v528 + 32;
      do
      {
        v539 = v536;
        v536 -= 2;
        switch(*((_BYTE *)v539 - 8))
        {
          case 2:
            v540 = *v536;
            do
            {
              v541 = __ldaxr((unint64_t *)v540);
              v542 = v541 - 1;
            }
            while (__stlxr(v542, (unint64_t *)v540));
            if (!v542)
            {
              v543 = *v536;
              if (!*v536)
                goto LABEL_696;
              if (v543[31] < 0)
                operator delete(*((void **)v543 + 1));
              v537 = v543;
              v538 = 0x1012C404EF22A49;
              goto LABEL_695;
            }
            break;
          case 3:
            v551 = (unint64_t *)*v536;
            do
            {
              v552 = __ldaxr(v551);
              v553 = v552 - 1;
            }
            while (__stlxr(v553, v551));
            if (!v553)
            {
              v554 = *v536;
              if (!*v536)
                goto LABEL_696;
              v555 = (void *)*((_QWORD *)v554 + 1);
              if (v555)
              {
                *((_QWORD *)v554 + 2) = v555;
                operator delete(v555);
              }
              v537 = v554;
              v538 = 0x1080C409938AC02;
              goto LABEL_695;
            }
            break;
          case 4:
            v544 = (unint64_t *)*v536;
            do
            {
              v545 = __ldaxr(v544);
              v546 = v545 - 1;
            }
            while (__stlxr(v546, v544));
            if (!v546)
            {
              v547 = *v536;
              if (!*v536)
                goto LABEL_696;
              v548 = *((_QWORD *)v547 + 1);
              if (v548)
              {
                v549 = *((_QWORD *)v547 + 2);
                v550 = (void *)*((_QWORD *)v547 + 1);
                if (v549 != v548)
                {
                  do
                  {
                    v549 -= 16;
                    std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v547 + 24), v549);
                  }
                  while (v549 != v548);
                  v550 = (void *)*((_QWORD *)v547 + 1);
                }
                *((_QWORD *)v547 + 2) = v548;
                goto LABEL_731;
              }
              goto LABEL_732;
            }
            break;
          case 5:
            v556 = (unint64_t *)*v536;
            do
            {
              v557 = __ldaxr(v556);
              v558 = v557 - 1;
            }
            while (__stlxr(v558, v556));
            if (!v558)
            {
              v547 = *v536;
              if (!*v536)
                goto LABEL_696;
              v559 = *((_QWORD *)v547 + 1);
              if (v559)
              {
                v560 = *((_QWORD *)v547 + 2);
                v561 = (void *)*((_QWORD *)v547 + 1);
                if (v560 != v559)
                {
                  do
                    v560 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v560 - 32);
                  while (v560 != v559);
                  v561 = (void *)*((_QWORD *)v547 + 1);
                }
                *((_QWORD *)v547 + 2) = v559;
                v550 = v561;
LABEL_731:
                operator delete(v550);
              }
LABEL_732:
              v537 = v547;
              v538 = 0x1020C405E66F15BLL;
              goto LABEL_695;
            }
            break;
          case 9:
            v562 = (unint64_t *)*v536;
            do
            {
              v563 = __ldaxr(v562);
              v564 = v563 - 1;
            }
            while (__stlxr(v564, v562));
            if (!v564)
            {
              v565 = *v536;
              if (*v536)
              {
                v566 = (void *)*((_QWORD *)v565 + 7);
                if (v566)
                {
                  *((_QWORD *)v565 + 8) = v566;
                  operator delete(v566);
                }
                v567 = (void *)*((_QWORD *)v565 + 4);
                if (v567)
                {
                  *((_QWORD *)v565 + 5) = v567;
                  operator delete(v567);
                }
                v568 = (std::__shared_weak_count *)*((_QWORD *)v565 + 3);
                if (v568)
                {
                  v569 = (unint64_t *)&v568->__shared_owners_;
                  do
                    v570 = __ldaxr(v569);
                  while (__stlxr(v570 - 1, v569));
                  if (!v570)
                  {
                    ((void (*)(std::__shared_weak_count *))v568->__on_zero_shared)(v568);
                    std::__shared_weak_count::__release_weak(v568);
                  }
                }
                v537 = v565;
                v538 = 0x10B0C4002311774;
LABEL_695:
                MEMORY[0x19401CD90](v537, v538);
              }
LABEL_696:
              *v536 = 0;
            }
            break;
          default:
            break;
        }
        *(v539 - 2) = 0;
        *((_BYTE *)v539 - 8) = 0;
      }
      while (v536 != &v1197);
      if ((_QWORD)v1175)
      {
        *((_QWORD *)&v1175 + 1) = v1175;
        operator delete((void *)v1175);
      }
      if ((_QWORD)v1173)
      {
        *((_QWORD *)&v1173 + 1) = v1173;
        operator delete((void *)v1173);
      }
      v571 = (std::__shared_weak_count *)*((_QWORD *)&v1172 + 1);
      if (*((_QWORD *)&v1172 + 1))
      {
        v572 = (unint64_t *)(*((_QWORD *)&v1172 + 1) + 8);
        do
          v573 = __ldaxr(v572);
        while (__stlxr(v573 - 1, v572));
        if (!v573)
        {
          ((void (*)(std::__shared_weak_count *))v571->__on_zero_shared)(v571);
          std::__shared_weak_count::__release_weak(v571);
        }
      }
      if (v1168)
      {
        v1169 = v1168;
        operator delete(v1168);
      }
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if ((_QWORD)v1183)
      {
        *((_QWORD *)&v1183 + 1) = v1183;
        operator delete((void *)v1183);
      }
      v574 = (std::__shared_weak_count *)*((_QWORD *)&v1182 + 1);
      if (*((_QWORD *)&v1182 + 1))
      {
        v575 = (unint64_t *)(*((_QWORD *)&v1182 + 1) + 8);
        do
          v576 = __ldaxr(v575);
        while (__stlxr(v576 - 1, v575));
        if (!v576)
        {
          ((void (*)(std::__shared_weak_count *))v574->__on_zero_shared)(v574);
          std::__shared_weak_count::__release_weak(v574);
        }
      }
      if (v1178)
      {
        v1179 = v1178;
        operator delete(v1178);
      }
      if (v1188)
      {
        v1189 = v1188;
        operator delete(v1188);
      }
      if (v1191)
      {
        v1192 = v1191;
        operator delete(v1191);
      }
      if (v1194)
      {
        v1195 = v1194;
        operator delete(v1194);
      }
      if (v1151)
      {
        v1152 = v1151;
        operator delete(v1151);
      }
      if (v1149)
      {
        v1150 = (uint64_t *)v1149;
        operator delete(v1149);
      }
      v295 = v1148;
      if (v1148)
      {
        v577 = (unint64_t *)&v1148->__shared_owners_;
        do
          v297 = __ldaxr(v577);
        while (__stlxr(v297 - 1, v577));
LABEL_1541:
        if (!v297)
        {
          ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
          std::__shared_weak_count::__release_weak(v295);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_1912B4650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  nitro::ndarray<float>::~ndarray(&a32);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(_DWORD *a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  unint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  unint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  unint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  _QWORD *v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  _QWORD *v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  unint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  _QWORD *v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  char *v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  unint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  unint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  _QWORD *v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *p_shared_owners;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  _QWORD *v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  char *v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  _QWORD *v548;
  _QWORD *v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  char *v553;
  char *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  _QWORD *v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  char *v575;
  char *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  _QWORD *v587;
  unint64_t v588;
  unint64_t v589;
  uint64_t v590;
  char *v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  _QWORD *v609;
  unint64_t v610;
  unint64_t v611;
  uint64_t v612;
  char *v613;
  char *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  char *v629;
  char *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  _QWORD *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  _QWORD *v646;
  _QWORD *v647;
  unint64_t v648;
  unint64_t v649;
  uint64_t v650;
  char *v651;
  char *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  _QWORD *v663;
  unint64_t v664;
  unint64_t v665;
  uint64_t v666;
  char *v667;
  char *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  _QWORD *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  _QWORD *v684;
  _QWORD *v685;
  unint64_t v686;
  unint64_t v687;
  uint64_t v688;
  char *v689;
  char *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  _QWORD *v700;
  _QWORD *v701;
  unint64_t v702;
  unint64_t v703;
  uint64_t v704;
  char *v705;
  char *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  _QWORD *v722;
  _QWORD *v723;
  unint64_t v724;
  unint64_t v725;
  uint64_t v726;
  char *v727;
  char *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  _QWORD *v738;
  _QWORD *v739;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  char *v743;
  char *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  _QWORD *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  _QWORD *v760;
  _QWORD *v761;
  unint64_t v762;
  unint64_t v763;
  uint64_t v764;
  char *v765;
  char *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _QWORD *v776;
  _QWORD *v777;
  unint64_t v778;
  unint64_t v779;
  uint64_t v780;
  char *v781;
  char *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  _QWORD *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  _QWORD *v798;
  _QWORD *v799;
  unint64_t v800;
  unint64_t v801;
  uint64_t v802;
  char *v803;
  char *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  _QWORD *v814;
  _QWORD *v815;
  unint64_t v816;
  unint64_t v817;
  uint64_t v818;
  char *v819;
  char *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  unint64_t v825;
  _QWORD *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unint64_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  _QWORD *v836;
  _QWORD *v837;
  unint64_t v838;
  unint64_t v839;
  uint64_t v840;
  char *v841;
  char *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  unint64_t v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  _QWORD *v852;
  _QWORD *v853;
  unint64_t v854;
  unint64_t v855;
  uint64_t v856;
  char *v857;
  char *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  _QWORD *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  _QWORD *v874;
  _QWORD *v875;
  unint64_t v876;
  unint64_t v877;
  uint64_t v878;
  char *v879;
  char *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  unint64_t v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  _QWORD *v890;
  _QWORD *v891;
  unint64_t v892;
  unint64_t v893;
  uint64_t v894;
  char *v895;
  char *v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  _QWORD *v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  unint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  _QWORD *v912;
  _QWORD *v913;
  unint64_t v914;
  unint64_t v915;
  uint64_t v916;
  char *v917;
  char *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  _QWORD *v928;
  _QWORD *v929;
  unint64_t v930;
  unint64_t v931;
  uint64_t v932;
  char *v933;
  char *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  _QWORD *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  _QWORD *v950;
  _QWORD *v951;
  unint64_t v952;
  unint64_t v953;
  uint64_t v954;
  char *v955;
  char *v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unint64_t v961;
  unint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  _QWORD *v966;
  _QWORD *v967;
  unint64_t v968;
  unint64_t v969;
  uint64_t v970;
  char *v971;
  char *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unint64_t v977;
  _QWORD *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  unint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  _QWORD *v988;
  _QWORD *v989;
  unint64_t v990;
  unint64_t v991;
  uint64_t v992;
  char *v993;
  char *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  unint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  _QWORD *v1004;
  _QWORD *v1005;
  unint64_t v1006;
  unint64_t v1007;
  uint64_t v1008;
  char *v1009;
  char *v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  unint64_t v1015;
  _QWORD *v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  unint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  _QWORD *v1026;
  _QWORD *v1027;
  unint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  char *v1031;
  char *v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  unint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  _QWORD *v1042;
  _QWORD *v1043;
  unint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  char *v1047;
  char *v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  unint64_t v1053;
  _QWORD *v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  _QWORD *v1064;
  _QWORD *v1065;
  unint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  char *v1069;
  char *v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  _QWORD *v1080;
  _QWORD *v1081;
  unint64_t v1082;
  unint64_t v1083;
  uint64_t v1084;
  char *v1085;
  char *v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  _QWORD *v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  unint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  _QWORD *v1102;
  _QWORD *v1103;
  unint64_t v1104;
  unint64_t v1105;
  uint64_t v1106;
  char *v1107;
  char *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  _QWORD *v1118;
  _QWORD *v1119;
  unint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  char *v1123;
  char *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  unint64_t v1130;
  float *v1131;
  float v1132;
  unint64_t *v1133;
  unint64_t v1134;
  std::__shared_weak_count *v1135;
  unint64_t *v1136;
  unint64_t v1137;
  uint64_t v1138;
  unint64_t v1139;
  int *v1140;
  unint64_t *v1148;
  unint64_t v1149;
  unint64_t *v1150;
  uint64_t v1151;
  unint64_t v1152;
  float *v1153;
  unint64_t *v1156;
  unint64_t v1157;
  std::__shared_weak_count *v1158;
  unint64_t *v1159;
  unint64_t v1160;
  unint64_t v1161;
  unint64_t v1162;
  unsigned int v1163;
  unint64_t *v1164;
  unint64_t v1165;
  unint64_t *v1166;
  uint64_t v1167;
  unint64_t v1168;
  float *v1169;
  unint64_t *v1170;
  unint64_t v1171;
  std::__shared_weak_count *v1172;
  unint64_t *v1173;
  unint64_t v1174;
  uint64_t v1175;
  unint64_t v1176;
  int *v1177;
  int v1178;
  unint64_t *v1179;
  unint64_t v1180;
  unint64_t *v1181;
  std::__shared_weak_count *v1182;
  unint64_t *v1183;
  unint64_t v1184;
  std::__shared_weak_count *v1185;
  unint64_t *v1186;
  unint64_t v1187;
  uint64_t v1188;
  unint64_t v1189;
  float *v1190;
  float v1191;
  unint64_t *v1192;
  unint64_t v1193;
  std::__shared_weak_count *v1194;
  unint64_t *v1195;
  unint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  int *v1199;
  unint64_t *v1203;
  unint64_t v1204;
  unint64_t *v1205;
  unint64_t v1206;
  unint64_t v1207;
  int v1210;
  unint64_t *v1211;
  unint64_t v1212;
  unint64_t *v1213;
  uint64_t v1214;
  unint64_t v1215;
  int *v1216;
  unint64_t *v1219;
  unint64_t v1220;
  unint64_t *v1221;
  uint64_t v1222;
  unint64_t v1223;
  int *v1224;
  int v1227;
  unint64_t *v1228;
  unint64_t v1229;
  unint64_t *v1230;
  std::__shared_weak_count *v1231;
  unint64_t *v1232;
  unint64_t v1233;
  unint64_t *v1234;
  uint64_t v1235;
  unint64_t v1236;
  int *v1237;
  unint64_t *v1241;
  unint64_t v1242;
  unint64_t *v1243;
  unint64_t v1244;
  unint64_t v1245;
  unsigned int v1246;
  unint64_t *v1247;
  unint64_t v1248;
  unint64_t *v1249;
  uint64_t v1250;
  unint64_t v1251;
  int *v1252;
  int v1253;
  unint64_t *v1254;
  unint64_t v1255;
  unint64_t *v1256;
  std::__shared_weak_count *v1257;
  unint64_t *v1258;
  unint64_t v1259;
  unint64_t *v1260;
  unint64_t v1261;
  unint64_t v1262;
  unsigned int v1263;
  unint64_t *v1264;
  unint64_t v1265;
  unint64_t *v1266;
  uint64_t v1267;
  unint64_t v1268;
  int *v1269;
  int v1270;
  unint64_t *v1271;
  unint64_t v1272;
  unint64_t *v1273;
  std::__shared_weak_count *v1274;
  unint64_t *v1275;
  unint64_t v1276;
  unint64_t *v1277;
  uint64_t v1278;
  std::__shared_weak_count *v1279;
  void *v1280;
  void *v1281;
  void *v1282;
  void *v1283;
  char *v1284;
  uint64_t v1285;
  std::__shared_weak_count *v1286;
  void *v1287;
  char *v1288;
  void *__p;
  void *v1290;
  uint64_t v1291;
  uint64_t v1292;
  std::__shared_weak_count *v1293;
  void *v1294;
  void *v1295;
  void *v1296;
  void *v1297;
  char *v1298;
  uint64_t v1299;
  std::__shared_weak_count *v1300;
  void *v1301;
  char *v1302;
  void *v1303;
  void *v1304;
  uint64_t v1305;
  uint64_t v1306;
  std::__shared_weak_count *v1307;
  void *v1308;
  void *v1309;
  void *v1310;
  void *v1311;
  char *v1312;
  uint64_t v1313;
  std::__shared_weak_count *v1314;
  void *v1315;
  char *v1316;
  void *v1317;
  void *v1318;
  uint64_t v1319;
  uint64_t v1320;
  std::__shared_weak_count *v1321;
  void *v1322;
  void *v1323;
  void *v1324;
  void *v1325;
  char *v1326;
  uint64_t v1327;
  std::__shared_weak_count *v1328;
  char *v1329;
  char *v1330;
  char *v1331;
  char *v1332;
  uint64_t v1333;
  char v1334;
  int *v1335;
  std::__shared_weak_count *v1336;
  char *v1337;
  char *v1338;
  char *v1339;
  char *v1340;
  uint64_t v1341;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1306, (uint64_t)a2);
      v1312 = &v1334;
      nitro::ndarray<int>::ndarray(&v1313, &v1306);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v3 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_869;
          v4 = v1313;
          v5 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_446;
          if (!v1313)
          {
            v6 = 0;
            goto LABEL_436;
          }
          if ((unint64_t)(v5 - 8) < 8)
          {
            v6 = 1;
            v7 = (char *)v1315;
            do
            {
LABEL_435:
              v499 = *(_QWORD *)v7;
              v7 += 8;
              v6 *= v499;
            }
            while (v7 != v1316);
            goto LABEL_436;
          }
          v494 = ((unint64_t)(v5 - 8) >> 3) + 1;
          v7 = (char *)v1315 + 8 * (v494 & 0x3FFFFFFFFFFFFFFELL);
          v495 = (char *)v1315 + 8;
          v496 = 1;
          v497 = v494 & 0x3FFFFFFFFFFFFFFELL;
          v498 = 1;
          do
          {
            v496 *= *(v495 - 1);
            v498 *= *v495;
            v495 += 2;
            v497 -= 2;
          }
          while (v497);
          v6 = v498 * v496;
          if (v494 != (v494 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_435;
LABEL_436:
          v500 = v5 >> 3;
          if ((unint64_t)(v5 >> 3) <= 1)
            v500 = 1;
          if (v500 < 2)
          {
            v501 = 0;
            v502 = 0;
LABEL_443:
            v508 = v500 - v501;
            v509 = 8 * v501;
            v510 = (uint64_t *)((char *)v1317 + v509);
            v511 = (uint64_t *)((char *)v1315 + v509);
            do
            {
              v512 = *v511++;
              v513 = v512 - 1;
              v514 = *v510++;
              v502 += v514 * v513;
              --v508;
            }
            while (v508);
            goto LABEL_445;
          }
          v503 = 0;
          v504 = 0;
          v501 = v500 & 0xFFFFFFFFFFFFFFFELL;
          v505 = (char *)v1315 + 8;
          v506 = (char *)v1317 + 8;
          v507 = v500 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v503 += *(v506 - 1) * (*(v505 - 1) - 1);
            v504 += *v506 * (*v505 - 1);
            v505 += 2;
            v506 += 2;
            v507 -= 2;
          }
          while (v507);
          v502 = v504 + v503;
          if (v500 != v501)
            goto LABEL_443;
LABEL_445:
          if (v6 != v502 + 1)
LABEL_869:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_446:
          v515 = v1314;
          if (v1314)
          {
            p_shared_owners = (unint64_t *)&v1314->__shared_owners_;
            do
              v517 = __ldxr(p_shared_owners);
            while (__stxr(v517 + 1, p_shared_owners));
          }
          if (v1341)
            goto LABEL_1224;
          v518 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1225;
          v519 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_833;
          if ((unint64_t)(v518 - 8) < 8)
          {
            v519 = 1;
            v520 = v1337;
            do
            {
LABEL_832:
              v1096 = *(_QWORD *)v520;
              v520 += 8;
              v519 *= v1096;
            }
            while (v520 != v1338);
            goto LABEL_833;
          }
          v1091 = ((unint64_t)(v518 - 8) >> 3) + 1;
          v520 = &v1337[8 * (v1091 & 0x3FFFFFFFFFFFFFFELL)];
          v1092 = v1337 + 8;
          v1093 = 1;
          v1094 = v1091 & 0x3FFFFFFFFFFFFFFELL;
          v1095 = 1;
          do
          {
            v1093 *= *(v1092 - 1);
            v1095 *= *v1092;
            v1092 += 2;
            v1094 -= 2;
          }
          while (v1094);
          v519 = v1095 * v1093;
          if (v1091 != (v1091 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_832;
LABEL_833:
          v1097 = v518 >> 3;
          if ((unint64_t)(v518 >> 3) <= 1)
            v1097 = 1;
          if (v1097 < 2)
          {
            v1098 = 0;
            v1099 = 0;
LABEL_840:
            v1105 = v1097 - v1098;
            v1106 = 8 * v1098;
            v1107 = &v1339[v1106];
            v1108 = &v1337[v1106];
            do
            {
              v1109 = *(_QWORD *)v1108;
              v1108 += 8;
              v1110 = v1109 - 1;
              v1111 = *(_QWORD *)v1107;
              v1107 += 8;
              v1099 += v1111 * v1110;
              --v1105;
            }
            while (v1105);
            goto LABEL_842;
          }
          v1100 = 0;
          v1101 = 0;
          v1098 = v1097 & 0xFFFFFFFFFFFFFFFELL;
          v1102 = v1337 + 8;
          v1103 = v1339 + 8;
          v1104 = v1097 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1100 += *(v1103 - 1) * (*(v1102 - 1) - 1);
            v1101 += *v1103 * (*v1102 - 1);
            v1102 += 2;
            v1103 += 2;
            v1104 -= 2;
          }
          while (v1104);
          v1099 = v1101 + v1100;
          if (v1097 != v1098)
            goto LABEL_840;
LABEL_842:
          if (v519 != v1099 + 1)
LABEL_1224:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v1112 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v1113 = v1112 >> 3;
            if ((unint64_t)(v1112 >> 3) <= 1)
              v1113 = 1;
            if (v1113 >= 2)
            {
              v1116 = 0;
              v1117 = 0;
              v1114 = v1113 & 0xFFFFFFFFFFFFFFFELL;
              v1118 = v1337 + 8;
              v1119 = v1339 + 8;
              v1120 = v1113 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1116 += *(v1119 - 1) * (*(v1118 - 1) - 1);
                v1117 += *v1119 * (*v1118 - 1);
                v1118 += 2;
                v1119 += 2;
                v1120 -= 2;
              }
              while (v1120);
              v1115 = v1117 + v1116;
              if (v1113 == v1114)
                goto LABEL_853;
            }
            else
            {
              v1114 = 0;
              v1115 = 0;
            }
            v1121 = v1113 - v1114;
            v1122 = 8 * v1114;
            v1123 = &v1339[v1122];
            v1124 = &v1337[v1122];
            do
            {
              v1125 = *(_QWORD *)v1124;
              v1124 += 8;
              v1126 = v1125 - 1;
              v1127 = *(_QWORD *)v1123;
              v1123 += 8;
              v1115 += v1127 * v1126;
              --v1121;
            }
            while (v1121);
LABEL_853:
            v1128 = v1115 + 1;
            goto LABEL_1226;
          }
LABEL_1225:
          v1128 = 0;
LABEL_1226:
          v1267 = v1341 + v1128;
          if (v1267)
          {
            v1268 = 0;
            v1269 = v1335;
            do
            {
              v1270 = *(_DWORD *)(v4 + 4 * v1268);
              if (*v1269 > v1270)
                v1270 = *v1269;
              *v1269++ = v1270;
              v1268 = (v1268 + 1) % v3;
              --v1267;
            }
            while (v1267);
          }
          if (v515)
          {
            v1271 = (unint64_t *)&v515->__shared_owners_;
            do
              v1272 = __ldaxr(v1271);
            while (__stlxr(v1272 - 1, v1271));
            if (!v1272)
            {
              ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
              std::__shared_weak_count::__release_weak(v515);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (!v1336)
            goto LABEL_1245;
          v1273 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1196 = __ldaxr(v1273);
          while (__stlxr(v1196 - 1, v1273));
          goto LABEL_1243;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v84 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_868;
          v85 = v1313;
          v86 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_424;
          if (!v1313)
          {
            v87 = 0;
            goto LABEL_414;
          }
          if ((unint64_t)(v86 - 8) < 8)
          {
            v87 = 1;
            v88 = (char *)v1315;
            do
            {
LABEL_413:
              v472 = *(_QWORD *)v88;
              v88 += 8;
              v87 *= v472;
            }
            while (v88 != v1316);
            goto LABEL_414;
          }
          v467 = ((unint64_t)(v86 - 8) >> 3) + 1;
          v88 = (char *)v1315 + 8 * (v467 & 0x3FFFFFFFFFFFFFFELL);
          v468 = (char *)v1315 + 8;
          v469 = 1;
          v470 = v467 & 0x3FFFFFFFFFFFFFFELL;
          v471 = 1;
          do
          {
            v469 *= *(v468 - 1);
            v471 *= *v468;
            v468 += 2;
            v470 -= 2;
          }
          while (v470);
          v87 = v471 * v469;
          if (v467 != (v467 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_413;
LABEL_414:
          v473 = v86 >> 3;
          if ((unint64_t)(v86 >> 3) <= 1)
            v473 = 1;
          if (v473 < 2)
          {
            v474 = 0;
            v475 = 0;
LABEL_421:
            v481 = v473 - v474;
            v482 = 8 * v474;
            v483 = (uint64_t *)((char *)v1317 + v482);
            v484 = (uint64_t *)((char *)v1315 + v482);
            do
            {
              v485 = *v484++;
              v486 = v485 - 1;
              v487 = *v483++;
              v475 += v487 * v486;
              --v481;
            }
            while (v481);
            goto LABEL_423;
          }
          v476 = 0;
          v477 = 0;
          v474 = v473 & 0xFFFFFFFFFFFFFFFELL;
          v478 = (char *)v1315 + 8;
          v479 = (char *)v1317 + 8;
          v480 = v473 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v476 += *(v479 - 1) * (*(v478 - 1) - 1);
            v477 += *v479 * (*v478 - 1);
            v478 += 2;
            v479 += 2;
            v480 -= 2;
          }
          while (v480);
          v475 = v477 + v476;
          if (v473 != v474)
            goto LABEL_421;
LABEL_423:
          if (v87 != v475 + 1)
LABEL_868:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_424:
          v488 = v1314;
          if (v1314)
          {
            v489 = (unint64_t *)&v1314->__shared_owners_;
            do
              v490 = __ldxr(v489);
            while (__stxr(v490 + 1, v489));
          }
          if (v1341)
            goto LABEL_1204;
          v491 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1205;
          v492 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_808;
          if ((unint64_t)(v491 - 8) < 8)
          {
            v492 = 1;
            v493 = v1337;
            do
            {
LABEL_807:
              v1058 = *(_QWORD *)v493;
              v493 += 8;
              v492 *= v1058;
            }
            while (v493 != v1338);
            goto LABEL_808;
          }
          v1053 = ((unint64_t)(v491 - 8) >> 3) + 1;
          v493 = &v1337[8 * (v1053 & 0x3FFFFFFFFFFFFFFELL)];
          v1054 = v1337 + 8;
          v1055 = 1;
          v1056 = v1053 & 0x3FFFFFFFFFFFFFFELL;
          v1057 = 1;
          do
          {
            v1055 *= *(v1054 - 1);
            v1057 *= *v1054;
            v1054 += 2;
            v1056 -= 2;
          }
          while (v1056);
          v492 = v1057 * v1055;
          if (v1053 != (v1053 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_807;
LABEL_808:
          v1059 = v491 >> 3;
          if ((unint64_t)(v491 >> 3) <= 1)
            v1059 = 1;
          if (v1059 < 2)
          {
            v1060 = 0;
            v1061 = 0;
LABEL_815:
            v1067 = v1059 - v1060;
            v1068 = 8 * v1060;
            v1069 = &v1339[v1068];
            v1070 = &v1337[v1068];
            do
            {
              v1071 = *(_QWORD *)v1070;
              v1070 += 8;
              v1072 = v1071 - 1;
              v1073 = *(_QWORD *)v1069;
              v1069 += 8;
              v1061 += v1073 * v1072;
              --v1067;
            }
            while (v1067);
            goto LABEL_817;
          }
          v1062 = 0;
          v1063 = 0;
          v1060 = v1059 & 0xFFFFFFFFFFFFFFFELL;
          v1064 = v1337 + 8;
          v1065 = v1339 + 8;
          v1066 = v1059 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1062 += *(v1065 - 1) * (*(v1064 - 1) - 1);
            v1063 += *v1065 * (*v1064 - 1);
            v1064 += 2;
            v1065 += 2;
            v1066 -= 2;
          }
          while (v1066);
          v1061 = v1063 + v1062;
          if (v1059 != v1060)
            goto LABEL_815;
LABEL_817:
          if (v492 != v1061 + 1)
LABEL_1204:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v1074 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v1075 = v1074 >> 3;
            if ((unint64_t)(v1074 >> 3) <= 1)
              v1075 = 1;
            if (v1075 >= 2)
            {
              v1078 = 0;
              v1079 = 0;
              v1076 = v1075 & 0xFFFFFFFFFFFFFFFELL;
              v1080 = v1337 + 8;
              v1081 = v1339 + 8;
              v1082 = v1075 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1078 += *(v1081 - 1) * (*(v1080 - 1) - 1);
                v1079 += *v1081 * (*v1080 - 1);
                v1080 += 2;
                v1081 += 2;
                v1082 -= 2;
              }
              while (v1082);
              v1077 = v1079 + v1078;
              if (v1075 == v1076)
                goto LABEL_828;
            }
            else
            {
              v1076 = 0;
              v1077 = 0;
            }
            v1083 = v1075 - v1076;
            v1084 = 8 * v1076;
            v1085 = &v1339[v1084];
            v1086 = &v1337[v1084];
            do
            {
              v1087 = *(_QWORD *)v1086;
              v1086 += 8;
              v1088 = v1087 - 1;
              v1089 = *(_QWORD *)v1085;
              v1085 += 8;
              v1077 += v1089 * v1088;
              --v1083;
            }
            while (v1083);
LABEL_828:
            v1090 = v1077 + 1;
            goto LABEL_1206;
          }
LABEL_1205:
          v1090 = 0;
LABEL_1206:
          if (v1341 + v1090)
          {
            v1261 = 0;
            v1262 = 0;
            do
            {
              v1263 = *(unsigned __int8 *)(v85 + 4 * v1262);
              if (*((unsigned __int8 *)v1335 + v1261) > v1263)
                LOBYTE(v1263) = *((_BYTE *)v1335 + v1261);
              *((_BYTE *)v1335 + v1261) = v1263;
              v1262 = (v1262 + 1) % v84;
              ++v1261;
            }
            while (v1261 < v1341 + v1090);
          }
          if (v488)
          {
            v1264 = (unint64_t *)&v488->__shared_owners_;
            do
              v1265 = __ldaxr(v1264);
            while (__stlxr(v1265 - 1, v1264));
            if (!v1265)
            {
              ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
              std::__shared_weak_count::__release_weak(v488);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (!v1336)
            goto LABEL_1245;
          v1266 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1196 = __ldaxr(v1266);
          while (__stlxr(v1196 - 1, v1266));
          goto LABEL_1243;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v50 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_860;
          v51 = v1313;
          v52 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_248;
          if (!v1313)
          {
            v53 = 0;
            goto LABEL_238;
          }
          if ((unint64_t)(v52 - 8) < 8)
          {
            v53 = 1;
            v54 = (char *)v1315;
            do
            {
LABEL_237:
              v256 = *(_QWORD *)v54;
              v54 += 8;
              v53 *= v256;
            }
            while (v54 != v1316);
            goto LABEL_238;
          }
          v251 = ((unint64_t)(v52 - 8) >> 3) + 1;
          v54 = (char *)v1315 + 8 * (v251 & 0x3FFFFFFFFFFFFFFELL);
          v252 = (char *)v1315 + 8;
          v253 = 1;
          v254 = v251 & 0x3FFFFFFFFFFFFFFELL;
          v255 = 1;
          do
          {
            v253 *= *(v252 - 1);
            v255 *= *v252;
            v252 += 2;
            v254 -= 2;
          }
          while (v254);
          v53 = v255 * v253;
          if (v251 != (v251 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_237;
LABEL_238:
          v257 = v52 >> 3;
          if ((unint64_t)(v52 >> 3) <= 1)
            v257 = 1;
          if (v257 < 2)
          {
            v258 = 0;
            v259 = 0;
LABEL_245:
            v265 = v257 - v258;
            v266 = 8 * v258;
            v267 = (uint64_t *)((char *)v1317 + v266);
            v268 = (uint64_t *)((char *)v1315 + v266);
            do
            {
              v269 = *v268++;
              v270 = v269 - 1;
              v271 = *v267++;
              v259 += v271 * v270;
              --v265;
            }
            while (v265);
            goto LABEL_247;
          }
          v260 = 0;
          v261 = 0;
          v258 = v257 & 0xFFFFFFFFFFFFFFFELL;
          v262 = (char *)v1315 + 8;
          v263 = (char *)v1317 + 8;
          v264 = v257 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v260 += *(v263 - 1) * (*(v262 - 1) - 1);
            v261 += *v263 * (*v262 - 1);
            v262 += 2;
            v263 += 2;
            v264 -= 2;
          }
          while (v264);
          v259 = v261 + v260;
          if (v257 != v258)
            goto LABEL_245;
LABEL_247:
          if (v53 != v259 + 1)
LABEL_860:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_248:
          v272 = v1314;
          if (v1314)
          {
            v273 = (unint64_t *)&v1314->__shared_owners_;
            do
              v274 = __ldxr(v273);
            while (__stxr(v274 + 1, v273));
          }
          if (v1341)
            goto LABEL_1008;
          v275 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1009;
          v276 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_608;
          if ((unint64_t)(v275 - 8) < 8)
          {
            v276 = 1;
            v277 = v1337;
            do
            {
LABEL_607:
              v754 = *(_QWORD *)v277;
              v277 += 8;
              v276 *= v754;
            }
            while (v277 != v1338);
            goto LABEL_608;
          }
          v749 = ((unint64_t)(v275 - 8) >> 3) + 1;
          v277 = &v1337[8 * (v749 & 0x3FFFFFFFFFFFFFFELL)];
          v750 = v1337 + 8;
          v751 = 1;
          v752 = v749 & 0x3FFFFFFFFFFFFFFELL;
          v753 = 1;
          do
          {
            v751 *= *(v750 - 1);
            v753 *= *v750;
            v750 += 2;
            v752 -= 2;
          }
          while (v752);
          v276 = v753 * v751;
          if (v749 != (v749 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_607;
LABEL_608:
          v755 = v275 >> 3;
          if ((unint64_t)(v275 >> 3) <= 1)
            v755 = 1;
          if (v755 < 2)
          {
            v756 = 0;
            v757 = 0;
LABEL_615:
            v763 = v755 - v756;
            v764 = 8 * v756;
            v765 = &v1339[v764];
            v766 = &v1337[v764];
            do
            {
              v767 = *(_QWORD *)v766;
              v766 += 8;
              v768 = v767 - 1;
              v769 = *(_QWORD *)v765;
              v765 += 8;
              v757 += v769 * v768;
              --v763;
            }
            while (v763);
            goto LABEL_617;
          }
          v758 = 0;
          v759 = 0;
          v756 = v755 & 0xFFFFFFFFFFFFFFFELL;
          v760 = v1337 + 8;
          v761 = v1339 + 8;
          v762 = v755 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v758 += *(v761 - 1) * (*(v760 - 1) - 1);
            v759 += *v761 * (*v760 - 1);
            v760 += 2;
            v761 += 2;
            v762 -= 2;
          }
          while (v762);
          v757 = v759 + v758;
          if (v755 != v756)
            goto LABEL_615;
LABEL_617:
          if (v276 != v757 + 1)
LABEL_1008:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v770 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v771 = v770 >> 3;
            if ((unint64_t)(v770 >> 3) <= 1)
              v771 = 1;
            if (v771 >= 2)
            {
              v774 = 0;
              v775 = 0;
              v772 = v771 & 0xFFFFFFFFFFFFFFFELL;
              v776 = v1337 + 8;
              v777 = v1339 + 8;
              v778 = v771 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v774 += *(v777 - 1) * (*(v776 - 1) - 1);
                v775 += *v777 * (*v776 - 1);
                v776 += 2;
                v777 += 2;
                v778 -= 2;
              }
              while (v778);
              v773 = v775 + v774;
              if (v771 == v772)
                goto LABEL_628;
            }
            else
            {
              v772 = 0;
              v773 = 0;
            }
            v779 = v771 - v772;
            v780 = 8 * v772;
            v781 = &v1339[v780];
            v782 = &v1337[v780];
            do
            {
              v783 = *(_QWORD *)v782;
              v782 += 8;
              v784 = v783 - 1;
              v785 = *(_QWORD *)v781;
              v781 += 8;
              v773 += v785 * v784;
              --v779;
            }
            while (v779);
LABEL_628:
            v786 = v773 + 1;
            goto LABEL_1010;
          }
LABEL_1009:
          v786 = 0;
LABEL_1010:
          v1188 = v1341 + v786;
          if (v1188)
          {
            v1189 = 0;
            v1190 = (float *)v1335;
            do
            {
              v1191 = (float)*(int *)(v51 + 4 * v1189);
              if (*v1190 >= v1191)
                v1191 = *v1190;
              *v1190++ = v1191;
              v1189 = (v1189 + 1) % v50;
              --v1188;
            }
            while (v1188);
          }
          if (v272)
          {
            v1192 = (unint64_t *)&v272->__shared_owners_;
            do
              v1193 = __ldaxr(v1192);
            while (__stlxr(v1193 - 1, v1192));
            if (!v1193)
            {
              ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
              std::__shared_weak_count::__release_weak(v272);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (!v1336)
            goto LABEL_1245;
          v1195 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1196 = __ldaxr(v1195);
          while (__stlxr(v1196 - 1, v1195));
          goto LABEL_1243;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v74 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_865;
          v75 = v1313;
          v76 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_358;
          if (!v1313)
          {
            v77 = 0;
            goto LABEL_348;
          }
          if ((unint64_t)(v76 - 8) < 8)
          {
            v77 = 1;
            v78 = (char *)v1315;
            do
            {
LABEL_347:
              v391 = *(_QWORD *)v78;
              v78 += 8;
              v77 *= v391;
            }
            while (v78 != v1316);
            goto LABEL_348;
          }
          v386 = ((unint64_t)(v76 - 8) >> 3) + 1;
          v78 = (char *)v1315 + 8 * (v386 & 0x3FFFFFFFFFFFFFFELL);
          v387 = (char *)v1315 + 8;
          v388 = 1;
          v389 = v386 & 0x3FFFFFFFFFFFFFFELL;
          v390 = 1;
          do
          {
            v388 *= *(v387 - 1);
            v390 *= *v387;
            v387 += 2;
            v389 -= 2;
          }
          while (v389);
          v77 = v390 * v388;
          if (v386 != (v386 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_347;
LABEL_348:
          v392 = v76 >> 3;
          if ((unint64_t)(v76 >> 3) <= 1)
            v392 = 1;
          if (v392 < 2)
          {
            v393 = 0;
            v394 = 0;
LABEL_355:
            v400 = v392 - v393;
            v401 = 8 * v393;
            v402 = (uint64_t *)((char *)v1317 + v401);
            v403 = (uint64_t *)((char *)v1315 + v401);
            do
            {
              v404 = *v403++;
              v405 = v404 - 1;
              v406 = *v402++;
              v394 += v406 * v405;
              --v400;
            }
            while (v400);
            goto LABEL_357;
          }
          v395 = 0;
          v396 = 0;
          v393 = v392 & 0xFFFFFFFFFFFFFFFELL;
          v397 = (char *)v1315 + 8;
          v398 = (char *)v1317 + 8;
          v399 = v392 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v395 += *(v398 - 1) * (*(v397 - 1) - 1);
            v396 += *v398 * (*v397 - 1);
            v397 += 2;
            v398 += 2;
            v399 -= 2;
          }
          while (v399);
          v394 = v396 + v395;
          if (v392 != v393)
            goto LABEL_355;
LABEL_357:
          if (v77 != v394 + 1)
LABEL_865:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_358:
          v407 = v1314;
          if (v1314)
          {
            v408 = (unint64_t *)&v1314->__shared_owners_;
            do
              v409 = __ldxr(v408);
            while (__stxr(v409 + 1, v408));
          }
          if (v1341)
            goto LABEL_1126;
          v410 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1127;
          v411 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_733;
          if ((unint64_t)(v410 - 8) < 8)
          {
            v411 = 1;
            v412 = v1337;
            do
            {
LABEL_732:
              v944 = *(_QWORD *)v412;
              v412 += 8;
              v411 *= v944;
            }
            while (v412 != v1338);
            goto LABEL_733;
          }
          v939 = ((unint64_t)(v410 - 8) >> 3) + 1;
          v412 = &v1337[8 * (v939 & 0x3FFFFFFFFFFFFFFELL)];
          v940 = v1337 + 8;
          v941 = 1;
          v942 = v939 & 0x3FFFFFFFFFFFFFFELL;
          v943 = 1;
          do
          {
            v941 *= *(v940 - 1);
            v943 *= *v940;
            v940 += 2;
            v942 -= 2;
          }
          while (v942);
          v411 = v943 * v941;
          if (v939 != (v939 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_732;
LABEL_733:
          v945 = v410 >> 3;
          if ((unint64_t)(v410 >> 3) <= 1)
            v945 = 1;
          if (v945 < 2)
          {
            v946 = 0;
            v947 = 0;
LABEL_740:
            v953 = v945 - v946;
            v954 = 8 * v946;
            v955 = &v1339[v954];
            v956 = &v1337[v954];
            do
            {
              v957 = *(_QWORD *)v956;
              v956 += 8;
              v958 = v957 - 1;
              v959 = *(_QWORD *)v955;
              v955 += 8;
              v947 += v959 * v958;
              --v953;
            }
            while (v953);
            goto LABEL_742;
          }
          v948 = 0;
          v949 = 0;
          v946 = v945 & 0xFFFFFFFFFFFFFFFELL;
          v950 = v1337 + 8;
          v951 = v1339 + 8;
          v952 = v945 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v948 += *(v951 - 1) * (*(v950 - 1) - 1);
            v949 += *v951 * (*v950 - 1);
            v950 += 2;
            v951 += 2;
            v952 -= 2;
          }
          while (v952);
          v947 = v949 + v948;
          if (v945 != v946)
            goto LABEL_740;
LABEL_742:
          if (v411 != v947 + 1)
LABEL_1126:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v960 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v961 = v960 >> 3;
            if ((unint64_t)(v960 >> 3) <= 1)
              v961 = 1;
            if (v961 >= 2)
            {
              v964 = 0;
              v965 = 0;
              v962 = v961 & 0xFFFFFFFFFFFFFFFELL;
              v966 = v1337 + 8;
              v967 = v1339 + 8;
              v968 = v961 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v964 += *(v967 - 1) * (*(v966 - 1) - 1);
                v965 += *v967 * (*v966 - 1);
                v966 += 2;
                v967 += 2;
                v968 -= 2;
              }
              while (v968);
              v963 = v965 + v964;
              if (v961 == v962)
                goto LABEL_753;
            }
            else
            {
              v962 = 0;
              v963 = 0;
            }
            v969 = v961 - v962;
            v970 = 8 * v962;
            v971 = &v1339[v970];
            v972 = &v1337[v970];
            do
            {
              v973 = *(_QWORD *)v972;
              v972 += 8;
              v974 = v973 - 1;
              v975 = *(_QWORD *)v971;
              v971 += 8;
              v963 += v975 * v974;
              --v969;
            }
            while (v969);
LABEL_753:
            v976 = v963 + 1;
            goto LABEL_1128;
          }
LABEL_1127:
          v976 = 0;
LABEL_1128:
          v1235 = v1341 + v976;
          if (v1235)
          {
            v1236 = 0;
            v1237 = v1335;
            do
            {
              _S0 = (float)*(int *)(v75 + 4 * v1236);
              __asm { FCVT            H0, S0 }
              LOWORD(_S1) = *(_WORD *)v1237;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S3 >= _S2)
                _S0 = _S1;
              *(_WORD *)v1237 = LOWORD(_S0);
              v1237 = (int *)((char *)v1237 + 2);
              v1236 = (v1236 + 1) % v74;
              --v1235;
            }
            while (v1235);
          }
          if (v407)
          {
            v1241 = (unint64_t *)&v407->__shared_owners_;
            do
              v1242 = __ldaxr(v1241);
            while (__stlxr(v1242 - 1, v1241));
            if (!v1242)
            {
              ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
              std::__shared_weak_count::__release_weak(v407);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (v1336)
          {
            v1243 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1196 = __ldaxr(v1243);
            while (__stlxr(v1196 - 1, v1243));
LABEL_1243:
            if (!v1196)
            {
              ((void (*)(std::__shared_weak_count *))v1194->__on_zero_shared)(v1194);
              std::__shared_weak_count::__release_weak(v1194);
            }
          }
LABEL_1245:
          if (v1317)
          {
            v1318 = v1317;
            operator delete(v1317);
          }
          if (v1315)
          {
            v1316 = (char *)v1315;
            operator delete(v1315);
          }
          v1274 = v1314;
          if (v1314)
          {
            v1275 = (unint64_t *)&v1314->__shared_owners_;
            do
              v1276 = __ldaxr(v1275);
            while (__stlxr(v1276 - 1, v1275));
            if (!v1276)
            {
              ((void (*)(std::__shared_weak_count *))v1274->__on_zero_shared)(v1274);
              std::__shared_weak_count::__release_weak(v1274);
            }
          }
          if (v1310)
          {
            v1311 = v1310;
            operator delete(v1310);
          }
          if (v1308)
          {
            v1309 = v1308;
            operator delete(v1308);
          }
          v1185 = v1307;
          if (!v1307)
            return;
          v1277 = (unint64_t *)&v1307->__shared_owners_;
          do
            v1187 = __ldaxr(v1277);
          while (__stlxr(v1187 - 1, v1277));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1261;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1320, (uint64_t)a2);
      v1326 = &v1334;
      nitro::ndarray<unsigned char>::ndarray(&v1327, &v1320);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v18 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_867;
          v19 = v1327;
          v20 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_402;
          if (!v1327)
          {
            v21 = 0;
            goto LABEL_392;
          }
          if ((unint64_t)(v20 - 8) < 8)
          {
            v21 = 1;
            v22 = v1329;
            do
            {
LABEL_391:
              v445 = *(_QWORD *)v22;
              v22 += 8;
              v21 *= v445;
            }
            while (v22 != v1330);
            goto LABEL_392;
          }
          v440 = ((unint64_t)(v20 - 8) >> 3) + 1;
          v22 = &v1329[8 * (v440 & 0x3FFFFFFFFFFFFFFELL)];
          v441 = v1329 + 8;
          v442 = 1;
          v443 = v440 & 0x3FFFFFFFFFFFFFFELL;
          v444 = 1;
          do
          {
            v442 *= *(v441 - 1);
            v444 *= *v441;
            v441 += 2;
            v443 -= 2;
          }
          while (v443);
          v21 = v444 * v442;
          if (v440 != (v440 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_391;
LABEL_392:
          v446 = v20 >> 3;
          if ((unint64_t)(v20 >> 3) <= 1)
            v446 = 1;
          if (v446 < 2)
          {
            v447 = 0;
            v448 = 0;
LABEL_399:
            v454 = v446 - v447;
            v455 = 8 * v447;
            v456 = &v1331[v455];
            v457 = &v1329[v455];
            do
            {
              v458 = *(_QWORD *)v457;
              v457 += 8;
              v459 = v458 - 1;
              v460 = *(_QWORD *)v456;
              v456 += 8;
              v448 += v460 * v459;
              --v454;
            }
            while (v454);
            goto LABEL_401;
          }
          v449 = 0;
          v450 = 0;
          v447 = v446 & 0xFFFFFFFFFFFFFFFELL;
          v451 = v1329 + 8;
          v452 = v1331 + 8;
          v453 = v446 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v449 += *(v452 - 1) * (*(v451 - 1) - 1);
            v450 += *v452 * (*v451 - 1);
            v451 += 2;
            v452 += 2;
            v453 -= 2;
          }
          while (v453);
          v448 = v450 + v449;
          if (v446 != v447)
            goto LABEL_399;
LABEL_401:
          if (v21 != v448 + 1)
LABEL_867:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_402:
          v461 = v1328;
          if (v1328)
          {
            v462 = (unint64_t *)&v1328->__shared_owners_;
            do
              v463 = __ldxr(v462);
            while (__stxr(v463 + 1, v462));
          }
          if (v1341)
            goto LABEL_1166;
          v464 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1167;
          v465 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_783;
          if ((unint64_t)(v464 - 8) < 8)
          {
            v465 = 1;
            v466 = v1337;
            do
            {
LABEL_782:
              v1020 = *(_QWORD *)v466;
              v466 += 8;
              v465 *= v1020;
            }
            while (v466 != v1338);
            goto LABEL_783;
          }
          v1015 = ((unint64_t)(v464 - 8) >> 3) + 1;
          v466 = &v1337[8 * (v1015 & 0x3FFFFFFFFFFFFFFELL)];
          v1016 = v1337 + 8;
          v1017 = 1;
          v1018 = v1015 & 0x3FFFFFFFFFFFFFFELL;
          v1019 = 1;
          do
          {
            v1017 *= *(v1016 - 1);
            v1019 *= *v1016;
            v1016 += 2;
            v1018 -= 2;
          }
          while (v1018);
          v465 = v1019 * v1017;
          if (v1015 != (v1015 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_782;
LABEL_783:
          v1021 = v464 >> 3;
          if ((unint64_t)(v464 >> 3) <= 1)
            v1021 = 1;
          if (v1021 < 2)
          {
            v1022 = 0;
            v1023 = 0;
LABEL_790:
            v1029 = v1021 - v1022;
            v1030 = 8 * v1022;
            v1031 = &v1339[v1030];
            v1032 = &v1337[v1030];
            do
            {
              v1033 = *(_QWORD *)v1032;
              v1032 += 8;
              v1034 = v1033 - 1;
              v1035 = *(_QWORD *)v1031;
              v1031 += 8;
              v1023 += v1035 * v1034;
              --v1029;
            }
            while (v1029);
            goto LABEL_792;
          }
          v1024 = 0;
          v1025 = 0;
          v1022 = v1021 & 0xFFFFFFFFFFFFFFFELL;
          v1026 = v1337 + 8;
          v1027 = v1339 + 8;
          v1028 = v1021 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1024 += *(v1027 - 1) * (*(v1026 - 1) - 1);
            v1025 += *v1027 * (*v1026 - 1);
            v1026 += 2;
            v1027 += 2;
            v1028 -= 2;
          }
          while (v1028);
          v1023 = v1025 + v1024;
          if (v1021 != v1022)
            goto LABEL_790;
LABEL_792:
          if (v465 != v1023 + 1)
LABEL_1166:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v1036 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v1037 = v1036 >> 3;
            if ((unint64_t)(v1036 >> 3) <= 1)
              v1037 = 1;
            if (v1037 >= 2)
            {
              v1040 = 0;
              v1041 = 0;
              v1038 = v1037 & 0xFFFFFFFFFFFFFFFELL;
              v1042 = v1337 + 8;
              v1043 = v1339 + 8;
              v1044 = v1037 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1040 += *(v1043 - 1) * (*(v1042 - 1) - 1);
                v1041 += *v1043 * (*v1042 - 1);
                v1042 += 2;
                v1043 += 2;
                v1044 -= 2;
              }
              while (v1044);
              v1039 = v1041 + v1040;
              if (v1037 == v1038)
                goto LABEL_803;
            }
            else
            {
              v1038 = 0;
              v1039 = 0;
            }
            v1045 = v1037 - v1038;
            v1046 = 8 * v1038;
            v1047 = &v1339[v1046];
            v1048 = &v1337[v1046];
            do
            {
              v1049 = *(_QWORD *)v1048;
              v1048 += 8;
              v1050 = v1049 - 1;
              v1051 = *(_QWORD *)v1047;
              v1047 += 8;
              v1039 += v1051 * v1050;
              --v1045;
            }
            while (v1045);
LABEL_803:
            v1052 = v1039 + 1;
            goto LABEL_1168;
          }
LABEL_1167:
          v1052 = 0;
LABEL_1168:
          v1250 = v1341 + v1052;
          if (v1250)
          {
            v1251 = 0;
            v1252 = v1335;
            do
            {
              v1253 = *(unsigned __int8 *)(v19 + v1251);
              if (*v1252 > v1253)
                v1253 = *v1252;
              *v1252++ = v1253;
              v1251 = (v1251 + 1) % v18;
              --v1250;
            }
            while (v1250);
          }
          if (v461)
          {
            v1254 = (unint64_t *)&v461->__shared_owners_;
            do
              v1255 = __ldaxr(v1254);
            while (__stlxr(v1255 - 1, v1254));
            if (!v1255)
            {
              ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
              std::__shared_weak_count::__release_weak(v461);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (!v1336)
            goto LABEL_1187;
          v1256 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1174 = __ldaxr(v1256);
          while (__stlxr(v1174 - 1, v1256));
          goto LABEL_1185;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v79 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_866;
          v80 = v1327;
          v81 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_380;
          if (!v1327)
          {
            v82 = 0;
            goto LABEL_370;
          }
          if ((unint64_t)(v81 - 8) < 8)
          {
            v82 = 1;
            v83 = v1329;
            do
            {
LABEL_369:
              v418 = *(_QWORD *)v83;
              v83 += 8;
              v82 *= v418;
            }
            while (v83 != v1330);
            goto LABEL_370;
          }
          v413 = ((unint64_t)(v81 - 8) >> 3) + 1;
          v83 = &v1329[8 * (v413 & 0x3FFFFFFFFFFFFFFELL)];
          v414 = v1329 + 8;
          v415 = 1;
          v416 = v413 & 0x3FFFFFFFFFFFFFFELL;
          v417 = 1;
          do
          {
            v415 *= *(v414 - 1);
            v417 *= *v414;
            v414 += 2;
            v416 -= 2;
          }
          while (v416);
          v82 = v417 * v415;
          if (v413 != (v413 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_369;
LABEL_370:
          v419 = v81 >> 3;
          if ((unint64_t)(v81 >> 3) <= 1)
            v419 = 1;
          if (v419 < 2)
          {
            v420 = 0;
            v421 = 0;
LABEL_377:
            v427 = v419 - v420;
            v428 = 8 * v420;
            v429 = &v1331[v428];
            v430 = &v1329[v428];
            do
            {
              v431 = *(_QWORD *)v430;
              v430 += 8;
              v432 = v431 - 1;
              v433 = *(_QWORD *)v429;
              v429 += 8;
              v421 += v433 * v432;
              --v427;
            }
            while (v427);
            goto LABEL_379;
          }
          v422 = 0;
          v423 = 0;
          v420 = v419 & 0xFFFFFFFFFFFFFFFELL;
          v424 = v1329 + 8;
          v425 = v1331 + 8;
          v426 = v419 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v422 += *(v425 - 1) * (*(v424 - 1) - 1);
            v423 += *v425 * (*v424 - 1);
            v424 += 2;
            v425 += 2;
            v426 -= 2;
          }
          while (v426);
          v421 = v423 + v422;
          if (v419 != v420)
            goto LABEL_377;
LABEL_379:
          if (v82 != v421 + 1)
LABEL_866:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_380:
          v434 = v1328;
          if (v1328)
          {
            v435 = (unint64_t *)&v1328->__shared_owners_;
            do
              v436 = __ldxr(v435);
            while (__stxr(v436 + 1, v435));
          }
          if (v1341)
            goto LABEL_1146;
          v437 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1147;
          v438 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_758;
          if ((unint64_t)(v437 - 8) < 8)
          {
            v438 = 1;
            v439 = v1337;
            do
            {
LABEL_757:
              v982 = *(_QWORD *)v439;
              v439 += 8;
              v438 *= v982;
            }
            while (v439 != v1338);
            goto LABEL_758;
          }
          v977 = ((unint64_t)(v437 - 8) >> 3) + 1;
          v439 = &v1337[8 * (v977 & 0x3FFFFFFFFFFFFFFELL)];
          v978 = v1337 + 8;
          v979 = 1;
          v980 = v977 & 0x3FFFFFFFFFFFFFFELL;
          v981 = 1;
          do
          {
            v979 *= *(v978 - 1);
            v981 *= *v978;
            v978 += 2;
            v980 -= 2;
          }
          while (v980);
          v438 = v981 * v979;
          if (v977 != (v977 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_757;
LABEL_758:
          v983 = v437 >> 3;
          if ((unint64_t)(v437 >> 3) <= 1)
            v983 = 1;
          if (v983 < 2)
          {
            v984 = 0;
            v985 = 0;
LABEL_765:
            v991 = v983 - v984;
            v992 = 8 * v984;
            v993 = &v1339[v992];
            v994 = &v1337[v992];
            do
            {
              v995 = *(_QWORD *)v994;
              v994 += 8;
              v996 = v995 - 1;
              v997 = *(_QWORD *)v993;
              v993 += 8;
              v985 += v997 * v996;
              --v991;
            }
            while (v991);
            goto LABEL_767;
          }
          v986 = 0;
          v987 = 0;
          v984 = v983 & 0xFFFFFFFFFFFFFFFELL;
          v988 = v1337 + 8;
          v989 = v1339 + 8;
          v990 = v983 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v986 += *(v989 - 1) * (*(v988 - 1) - 1);
            v987 += *v989 * (*v988 - 1);
            v988 += 2;
            v989 += 2;
            v990 -= 2;
          }
          while (v990);
          v985 = v987 + v986;
          if (v983 != v984)
            goto LABEL_765;
LABEL_767:
          if (v438 != v985 + 1)
LABEL_1146:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v998 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v999 = v998 >> 3;
            if ((unint64_t)(v998 >> 3) <= 1)
              v999 = 1;
            if (v999 >= 2)
            {
              v1002 = 0;
              v1003 = 0;
              v1000 = v999 & 0xFFFFFFFFFFFFFFFELL;
              v1004 = v1337 + 8;
              v1005 = v1339 + 8;
              v1006 = v999 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1002 += *(v1005 - 1) * (*(v1004 - 1) - 1);
                v1003 += *v1005 * (*v1004 - 1);
                v1004 += 2;
                v1005 += 2;
                v1006 -= 2;
              }
              while (v1006);
              v1001 = v1003 + v1002;
              if (v999 == v1000)
                goto LABEL_778;
            }
            else
            {
              v1000 = 0;
              v1001 = 0;
            }
            v1007 = v999 - v1000;
            v1008 = 8 * v1000;
            v1009 = &v1339[v1008];
            v1010 = &v1337[v1008];
            do
            {
              v1011 = *(_QWORD *)v1010;
              v1010 += 8;
              v1012 = v1011 - 1;
              v1013 = *(_QWORD *)v1009;
              v1009 += 8;
              v1001 += v1013 * v1012;
              --v1007;
            }
            while (v1007);
LABEL_778:
            v1014 = v1001 + 1;
            goto LABEL_1148;
          }
LABEL_1147:
          v1014 = 0;
LABEL_1148:
          if (v1341 + v1014)
          {
            v1244 = 0;
            v1245 = 0;
            do
            {
              v1246 = *(unsigned __int8 *)(v80 + v1245);
              if (*((unsigned __int8 *)v1335 + v1244) > v1246)
                LOBYTE(v1246) = *((_BYTE *)v1335 + v1244);
              *((_BYTE *)v1335 + v1244) = v1246;
              v1245 = (v1245 + 1) % v79;
              ++v1244;
            }
            while (v1244 < v1341 + v1014);
          }
          if (v434)
          {
            v1247 = (unint64_t *)&v434->__shared_owners_;
            do
              v1248 = __ldaxr(v1247);
            while (__stlxr(v1248 - 1, v1247));
            if (!v1248)
            {
              ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
              std::__shared_weak_count::__release_weak(v434);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (!v1336)
            goto LABEL_1187;
          v1249 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1174 = __ldaxr(v1249);
          while (__stlxr(v1174 - 1, v1249));
          goto LABEL_1185;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v45 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_858;
          v46 = v1327;
          v47 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_204;
          if (!v1327)
          {
            v48 = 0;
            goto LABEL_194;
          }
          if ((unint64_t)(v47 - 8) < 8)
          {
            v48 = 1;
            v49 = v1329;
            do
            {
LABEL_193:
              v202 = *(_QWORD *)v49;
              v49 += 8;
              v48 *= v202;
            }
            while (v49 != v1330);
            goto LABEL_194;
          }
          v197 = ((unint64_t)(v47 - 8) >> 3) + 1;
          v49 = &v1329[8 * (v197 & 0x3FFFFFFFFFFFFFFELL)];
          v198 = v1329 + 8;
          v199 = 1;
          v200 = v197 & 0x3FFFFFFFFFFFFFFELL;
          v201 = 1;
          do
          {
            v199 *= *(v198 - 1);
            v201 *= *v198;
            v198 += 2;
            v200 -= 2;
          }
          while (v200);
          v48 = v201 * v199;
          if (v197 != (v197 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_193;
LABEL_194:
          v203 = v47 >> 3;
          if ((unint64_t)(v47 >> 3) <= 1)
            v203 = 1;
          if (v203 < 2)
          {
            v204 = 0;
            v205 = 0;
LABEL_201:
            v211 = v203 - v204;
            v212 = 8 * v204;
            v213 = &v1331[v212];
            v214 = &v1329[v212];
            do
            {
              v215 = *(_QWORD *)v214;
              v214 += 8;
              v216 = v215 - 1;
              v217 = *(_QWORD *)v213;
              v213 += 8;
              v205 += v217 * v216;
              --v211;
            }
            while (v211);
            goto LABEL_203;
          }
          v206 = 0;
          v207 = 0;
          v204 = v203 & 0xFFFFFFFFFFFFFFFELL;
          v208 = v1329 + 8;
          v209 = v1331 + 8;
          v210 = v203 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v206 += *(v209 - 1) * (*(v208 - 1) - 1);
            v207 += *v209 * (*v208 - 1);
            v208 += 2;
            v209 += 2;
            v210 -= 2;
          }
          while (v210);
          v205 = v207 + v206;
          if (v203 != v204)
            goto LABEL_201;
LABEL_203:
          if (v48 != v205 + 1)
LABEL_858:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_204:
          v218 = v1328;
          if (v1328)
          {
            v219 = (unint64_t *)&v1328->__shared_owners_;
            do
              v220 = __ldxr(v219);
            while (__stxr(v220 + 1, v219));
          }
          if (v1341)
            goto LABEL_950;
          v221 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_951;
          v222 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_558;
          if ((unint64_t)(v221 - 8) < 8)
          {
            v222 = 1;
            v223 = v1337;
            do
            {
LABEL_557:
              v678 = *(_QWORD *)v223;
              v223 += 8;
              v222 *= v678;
            }
            while (v223 != v1338);
            goto LABEL_558;
          }
          v673 = ((unint64_t)(v221 - 8) >> 3) + 1;
          v223 = &v1337[8 * (v673 & 0x3FFFFFFFFFFFFFFELL)];
          v674 = v1337 + 8;
          v675 = 1;
          v676 = v673 & 0x3FFFFFFFFFFFFFFELL;
          v677 = 1;
          do
          {
            v675 *= *(v674 - 1);
            v677 *= *v674;
            v674 += 2;
            v676 -= 2;
          }
          while (v676);
          v222 = v677 * v675;
          if (v673 != (v673 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_557;
LABEL_558:
          v679 = v221 >> 3;
          if ((unint64_t)(v221 >> 3) <= 1)
            v679 = 1;
          if (v679 < 2)
          {
            v680 = 0;
            v681 = 0;
LABEL_565:
            v687 = v679 - v680;
            v688 = 8 * v680;
            v689 = &v1339[v688];
            v690 = &v1337[v688];
            do
            {
              v691 = *(_QWORD *)v690;
              v690 += 8;
              v692 = v691 - 1;
              v693 = *(_QWORD *)v689;
              v689 += 8;
              v681 += v693 * v692;
              --v687;
            }
            while (v687);
            goto LABEL_567;
          }
          v682 = 0;
          v683 = 0;
          v680 = v679 & 0xFFFFFFFFFFFFFFFELL;
          v684 = v1337 + 8;
          v685 = v1339 + 8;
          v686 = v679 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v682 += *(v685 - 1) * (*(v684 - 1) - 1);
            v683 += *v685 * (*v684 - 1);
            v684 += 2;
            v685 += 2;
            v686 -= 2;
          }
          while (v686);
          v681 = v683 + v682;
          if (v679 != v680)
            goto LABEL_565;
LABEL_567:
          if (v222 != v681 + 1)
LABEL_950:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v694 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v695 = v694 >> 3;
            if ((unint64_t)(v694 >> 3) <= 1)
              v695 = 1;
            if (v695 >= 2)
            {
              v698 = 0;
              v699 = 0;
              v696 = v695 & 0xFFFFFFFFFFFFFFFELL;
              v700 = v1337 + 8;
              v701 = v1339 + 8;
              v702 = v695 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v698 += *(v701 - 1) * (*(v700 - 1) - 1);
                v699 += *v701 * (*v700 - 1);
                v700 += 2;
                v701 += 2;
                v702 -= 2;
              }
              while (v702);
              v697 = v699 + v698;
              if (v695 == v696)
                goto LABEL_578;
            }
            else
            {
              v696 = 0;
              v697 = 0;
            }
            v703 = v695 - v696;
            v704 = 8 * v696;
            v705 = &v1339[v704];
            v706 = &v1337[v704];
            do
            {
              v707 = *(_QWORD *)v706;
              v706 += 8;
              v708 = v707 - 1;
              v709 = *(_QWORD *)v705;
              v705 += 8;
              v697 += v709 * v708;
              --v703;
            }
            while (v703);
LABEL_578:
            v710 = v697 + 1;
            goto LABEL_952;
          }
LABEL_951:
          v710 = 0;
LABEL_952:
          v1167 = v1341 + v710;
          if (v1167)
          {
            v1168 = 0;
            v1169 = (float *)v1335;
            do
            {
              LOBYTE(v44) = *(_BYTE *)(v46 + v1168);
              v44 = (float)LODWORD(v44);
              if (*v1169 >= v44)
                v44 = *v1169;
              *v1169++ = v44;
              v1168 = (v1168 + 1) % v45;
              --v1167;
            }
            while (v1167);
          }
          if (v218)
          {
            v1170 = (unint64_t *)&v218->__shared_owners_;
            do
              v1171 = __ldaxr(v1170);
            while (__stlxr(v1171 - 1, v1170));
            if (!v1171)
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v218);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (!v1336)
            goto LABEL_1187;
          v1173 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1174 = __ldaxr(v1173);
          while (__stlxr(v1174 - 1, v1173));
          goto LABEL_1185;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v68 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_863;
          v69 = v1327;
          v70 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_314;
          if (!v1327)
          {
            v71 = 0;
            goto LABEL_304;
          }
          if ((unint64_t)(v70 - 8) < 8)
          {
            v71 = 1;
            v72 = v1329;
            do
            {
LABEL_303:
              v337 = *(_QWORD *)v72;
              v72 += 8;
              v71 *= v337;
            }
            while (v72 != v1330);
            goto LABEL_304;
          }
          v332 = ((unint64_t)(v70 - 8) >> 3) + 1;
          v72 = &v1329[8 * (v332 & 0x3FFFFFFFFFFFFFFELL)];
          v333 = v1329 + 8;
          v334 = 1;
          v335 = v332 & 0x3FFFFFFFFFFFFFFELL;
          v336 = 1;
          do
          {
            v334 *= *(v333 - 1);
            v336 *= *v333;
            v333 += 2;
            v335 -= 2;
          }
          while (v335);
          v71 = v336 * v334;
          if (v332 != (v332 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_303;
LABEL_304:
          v338 = v70 >> 3;
          if ((unint64_t)(v70 >> 3) <= 1)
            v338 = 1;
          if (v338 < 2)
          {
            v339 = 0;
            v340 = 0;
LABEL_311:
            v346 = v338 - v339;
            v347 = 8 * v339;
            v348 = &v1331[v347];
            v349 = &v1329[v347];
            do
            {
              v350 = *(_QWORD *)v349;
              v349 += 8;
              v351 = v350 - 1;
              v352 = *(_QWORD *)v348;
              v348 += 8;
              v340 += v352 * v351;
              --v346;
            }
            while (v346);
            goto LABEL_313;
          }
          v341 = 0;
          v342 = 0;
          v339 = v338 & 0xFFFFFFFFFFFFFFFELL;
          v343 = v1329 + 8;
          v344 = v1331 + 8;
          v345 = v338 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v341 += *(v344 - 1) * (*(v343 - 1) - 1);
            v342 += *v344 * (*v343 - 1);
            v343 += 2;
            v344 += 2;
            v345 -= 2;
          }
          while (v345);
          v340 = v342 + v341;
          if (v338 != v339)
            goto LABEL_311;
LABEL_313:
          if (v71 != v340 + 1)
LABEL_863:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_314:
          v353 = v1328;
          if (v1328)
          {
            v354 = (unint64_t *)&v1328->__shared_owners_;
            do
              v355 = __ldxr(v354);
            while (__stxr(v355 + 1, v354));
          }
          if (v1341)
            goto LABEL_1068;
          v356 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1069;
          v357 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_683;
          if ((unint64_t)(v356 - 8) < 8)
          {
            v357 = 1;
            v358 = v1337;
            do
            {
LABEL_682:
              v868 = *(_QWORD *)v358;
              v358 += 8;
              v357 *= v868;
            }
            while (v358 != v1338);
            goto LABEL_683;
          }
          v863 = ((unint64_t)(v356 - 8) >> 3) + 1;
          v358 = &v1337[8 * (v863 & 0x3FFFFFFFFFFFFFFELL)];
          v864 = v1337 + 8;
          v865 = 1;
          v866 = v863 & 0x3FFFFFFFFFFFFFFELL;
          v867 = 1;
          do
          {
            v865 *= *(v864 - 1);
            v867 *= *v864;
            v864 += 2;
            v866 -= 2;
          }
          while (v866);
          v357 = v867 * v865;
          if (v863 != (v863 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_682;
LABEL_683:
          v869 = v356 >> 3;
          if ((unint64_t)(v356 >> 3) <= 1)
            v869 = 1;
          if (v869 < 2)
          {
            v870 = 0;
            v871 = 0;
LABEL_690:
            v877 = v869 - v870;
            v878 = 8 * v870;
            v879 = &v1339[v878];
            v880 = &v1337[v878];
            do
            {
              v881 = *(_QWORD *)v880;
              v880 += 8;
              v882 = v881 - 1;
              v883 = *(_QWORD *)v879;
              v879 += 8;
              v871 += v883 * v882;
              --v877;
            }
            while (v877);
            goto LABEL_692;
          }
          v872 = 0;
          v873 = 0;
          v870 = v869 & 0xFFFFFFFFFFFFFFFELL;
          v874 = v1337 + 8;
          v875 = v1339 + 8;
          v876 = v869 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v872 += *(v875 - 1) * (*(v874 - 1) - 1);
            v873 += *v875 * (*v874 - 1);
            v874 += 2;
            v875 += 2;
            v876 -= 2;
          }
          while (v876);
          v871 = v873 + v872;
          if (v869 != v870)
            goto LABEL_690;
LABEL_692:
          if (v357 != v871 + 1)
LABEL_1068:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v884 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v885 = v884 >> 3;
            if ((unint64_t)(v884 >> 3) <= 1)
              v885 = 1;
            if (v885 >= 2)
            {
              v888 = 0;
              v889 = 0;
              v886 = v885 & 0xFFFFFFFFFFFFFFFELL;
              v890 = v1337 + 8;
              v891 = v1339 + 8;
              v892 = v885 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v888 += *(v891 - 1) * (*(v890 - 1) - 1);
                v889 += *v891 * (*v890 - 1);
                v890 += 2;
                v891 += 2;
                v892 -= 2;
              }
              while (v892);
              v887 = v889 + v888;
              if (v885 == v886)
                goto LABEL_703;
            }
            else
            {
              v886 = 0;
              v887 = 0;
            }
            v893 = v885 - v886;
            v894 = 8 * v886;
            v895 = &v1339[v894];
            v896 = &v1337[v894];
            do
            {
              v897 = *(_QWORD *)v896;
              v896 += 8;
              v898 = v897 - 1;
              v899 = *(_QWORD *)v895;
              v895 += 8;
              v887 += v899 * v898;
              --v893;
            }
            while (v893);
LABEL_703:
            v900 = v887 + 1;
            goto LABEL_1070;
          }
LABEL_1069:
          v900 = 0;
LABEL_1070:
          v1214 = v1341 + v900;
          if (v1214)
          {
            v1215 = 0;
            v1216 = v1335;
            do
            {
              LOBYTE(_S0) = *(_BYTE *)(v69 + v1215);
              _S0 = (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              LOWORD(_S1) = *(_WORD *)v1216;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S3 >= _S2)
                _S0 = _S1;
              *(_WORD *)v1216 = LOWORD(_S0);
              v1216 = (int *)((char *)v1216 + 2);
              v1215 = (v1215 + 1) % v68;
              --v1214;
            }
            while (v1214);
          }
          if (v353)
          {
            v1219 = (unint64_t *)&v353->__shared_owners_;
            do
              v1220 = __ldaxr(v1219);
            while (__stlxr(v1220 - 1, v1219));
            if (!v1220)
            {
              ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
              std::__shared_weak_count::__release_weak(v353);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (v1336)
          {
            v1221 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1174 = __ldaxr(v1221);
            while (__stlxr(v1174 - 1, v1221));
LABEL_1185:
            if (!v1174)
            {
              ((void (*)(std::__shared_weak_count *))v1172->__on_zero_shared)(v1172);
              std::__shared_weak_count::__release_weak(v1172);
            }
          }
LABEL_1187:
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1257 = v1328;
          if (v1328)
          {
            v1258 = (unint64_t *)&v1328->__shared_owners_;
            do
              v1259 = __ldaxr(v1258);
            while (__stlxr(v1259 - 1, v1258));
            if (!v1259)
            {
              ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
              std::__shared_weak_count::__release_weak(v1257);
            }
          }
          if (v1324)
          {
            v1325 = v1324;
            operator delete(v1324);
          }
          if (v1322)
          {
            v1323 = v1322;
            operator delete(v1322);
          }
          v1185 = v1321;
          if (!v1321)
            return;
          v1260 = (unint64_t *)&v1321->__shared_owners_;
          do
            v1187 = __ldaxr(v1260);
          while (__stlxr(v1187 - 1, v1260));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1261;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1278, (uint64_t)a2);
      v1284 = &v1334;
      nitro::ndarray<float>::ndarray(&v1285, &v1278);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v8 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_859;
          v9 = v1285;
          v10 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_226;
          if (!v1285)
          {
            v11 = 0;
            goto LABEL_216;
          }
          if ((unint64_t)(v10 - 8) < 8)
          {
            v11 = 1;
            v12 = (char *)v1287;
            do
            {
LABEL_215:
              v229 = *(_QWORD *)v12;
              v12 += 8;
              v11 *= v229;
            }
            while (v12 != v1288);
            goto LABEL_216;
          }
          v224 = ((unint64_t)(v10 - 8) >> 3) + 1;
          v12 = (char *)v1287 + 8 * (v224 & 0x3FFFFFFFFFFFFFFELL);
          v225 = (char *)v1287 + 8;
          v226 = 1;
          v227 = v224 & 0x3FFFFFFFFFFFFFFELL;
          v228 = 1;
          do
          {
            v226 *= *(v225 - 1);
            v228 *= *v225;
            v225 += 2;
            v227 -= 2;
          }
          while (v227);
          v11 = v228 * v226;
          if (v224 != (v224 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_215;
LABEL_216:
          v230 = v10 >> 3;
          if ((unint64_t)(v10 >> 3) <= 1)
            v230 = 1;
          if (v230 < 2)
          {
            v231 = 0;
            v232 = 0;
LABEL_223:
            v238 = v230 - v231;
            v239 = 8 * v231;
            v240 = (uint64_t *)((char *)__p + v239);
            v241 = (uint64_t *)((char *)v1287 + v239);
            do
            {
              v242 = *v241++;
              v243 = v242 - 1;
              v244 = *v240++;
              v232 += v244 * v243;
              --v238;
            }
            while (v238);
            goto LABEL_225;
          }
          v233 = 0;
          v234 = 0;
          v231 = v230 & 0xFFFFFFFFFFFFFFFELL;
          v235 = (char *)v1287 + 8;
          v236 = (char *)__p + 8;
          v237 = v230 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v233 += *(v236 - 1) * (*(v235 - 1) - 1);
            v234 += *v236 * (*v235 - 1);
            v235 += 2;
            v236 += 2;
            v237 -= 2;
          }
          while (v237);
          v232 = v234 + v233;
          if (v230 != v231)
            goto LABEL_223;
LABEL_225:
          if (v11 != v232 + 1)
LABEL_859:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_226:
          v245 = v1286;
          if (v1286)
          {
            v246 = (unint64_t *)&v1286->__shared_owners_;
            do
              v247 = __ldxr(v246);
            while (__stxr(v247 + 1, v246));
          }
          if (v1341)
            goto LABEL_970;
          v248 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_971;
          v249 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_583;
          if ((unint64_t)(v248 - 8) < 8)
          {
            v249 = 1;
            v250 = v1337;
            do
            {
LABEL_582:
              v716 = *(_QWORD *)v250;
              v250 += 8;
              v249 *= v716;
            }
            while (v250 != v1338);
            goto LABEL_583;
          }
          v711 = ((unint64_t)(v248 - 8) >> 3) + 1;
          v250 = &v1337[8 * (v711 & 0x3FFFFFFFFFFFFFFELL)];
          v712 = v1337 + 8;
          v713 = 1;
          v714 = v711 & 0x3FFFFFFFFFFFFFFELL;
          v715 = 1;
          do
          {
            v713 *= *(v712 - 1);
            v715 *= *v712;
            v712 += 2;
            v714 -= 2;
          }
          while (v714);
          v249 = v715 * v713;
          if (v711 != (v711 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_582;
LABEL_583:
          v717 = v248 >> 3;
          if ((unint64_t)(v248 >> 3) <= 1)
            v717 = 1;
          if (v717 < 2)
          {
            v718 = 0;
            v719 = 0;
LABEL_590:
            v725 = v717 - v718;
            v726 = 8 * v718;
            v727 = &v1339[v726];
            v728 = &v1337[v726];
            do
            {
              v729 = *(_QWORD *)v728;
              v728 += 8;
              v730 = v729 - 1;
              v731 = *(_QWORD *)v727;
              v727 += 8;
              v719 += v731 * v730;
              --v725;
            }
            while (v725);
            goto LABEL_592;
          }
          v720 = 0;
          v721 = 0;
          v718 = v717 & 0xFFFFFFFFFFFFFFFELL;
          v722 = v1337 + 8;
          v723 = v1339 + 8;
          v724 = v717 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v720 += *(v723 - 1) * (*(v722 - 1) - 1);
            v721 += *v723 * (*v722 - 1);
            v722 += 2;
            v723 += 2;
            v724 -= 2;
          }
          while (v724);
          v719 = v721 + v720;
          if (v717 != v718)
            goto LABEL_590;
LABEL_592:
          if (v249 != v719 + 1)
LABEL_970:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v732 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v733 = v732 >> 3;
            if ((unint64_t)(v732 >> 3) <= 1)
              v733 = 1;
            if (v733 >= 2)
            {
              v736 = 0;
              v737 = 0;
              v734 = v733 & 0xFFFFFFFFFFFFFFFELL;
              v738 = v1337 + 8;
              v739 = v1339 + 8;
              v740 = v733 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v736 += *(v739 - 1) * (*(v738 - 1) - 1);
                v737 += *v739 * (*v738 - 1);
                v738 += 2;
                v739 += 2;
                v740 -= 2;
              }
              while (v740);
              v735 = v737 + v736;
              if (v733 == v734)
                goto LABEL_603;
            }
            else
            {
              v734 = 0;
              v735 = 0;
            }
            v741 = v733 - v734;
            v742 = 8 * v734;
            v743 = &v1339[v742];
            v744 = &v1337[v742];
            do
            {
              v745 = *(_QWORD *)v744;
              v744 += 8;
              v746 = v745 - 1;
              v747 = *(_QWORD *)v743;
              v743 += 8;
              v735 += v747 * v746;
              --v741;
            }
            while (v741);
LABEL_603:
            v748 = v735 + 1;
            goto LABEL_972;
          }
LABEL_971:
          v748 = 0;
LABEL_972:
          v1175 = v1341 + v748;
          if (v1175)
          {
            v1176 = 0;
            v1177 = v1335;
            do
            {
              v1178 = (int)*(float *)(v9 + 4 * v1176);
              if (*v1177 > v1178)
                v1178 = *v1177;
              *v1177++ = v1178;
              v1176 = (v1176 + 1) % v8;
              --v1175;
            }
            while (v1175);
          }
          if (v245)
          {
            v1179 = (unint64_t *)&v245->__shared_owners_;
            do
              v1180 = __ldaxr(v1179);
            while (__stlxr(v1180 - 1, v1179));
            if (!v1180)
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v245);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (!v1336)
            goto LABEL_991;
          v1181 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1137 = __ldaxr(v1181);
          while (__stlxr(v1137 - 1, v1181));
          goto LABEL_989;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v39 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_857;
          v40 = v1285;
          v41 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_182;
          if (!v1285)
          {
            v42 = 0;
            goto LABEL_172;
          }
          if ((unint64_t)(v41 - 8) < 8)
          {
            v42 = 1;
            v43 = (char *)v1287;
            do
            {
LABEL_171:
              v175 = *(_QWORD *)v43;
              v43 += 8;
              v42 *= v175;
            }
            while (v43 != v1288);
            goto LABEL_172;
          }
          v170 = ((unint64_t)(v41 - 8) >> 3) + 1;
          v43 = (char *)v1287 + 8 * (v170 & 0x3FFFFFFFFFFFFFFELL);
          v171 = (char *)v1287 + 8;
          v172 = 1;
          v173 = v170 & 0x3FFFFFFFFFFFFFFELL;
          v174 = 1;
          do
          {
            v172 *= *(v171 - 1);
            v174 *= *v171;
            v171 += 2;
            v173 -= 2;
          }
          while (v173);
          v42 = v174 * v172;
          if (v170 != (v170 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_171;
LABEL_172:
          v176 = v41 >> 3;
          if ((unint64_t)(v41 >> 3) <= 1)
            v176 = 1;
          if (v176 < 2)
          {
            v177 = 0;
            v178 = 0;
LABEL_179:
            v184 = v176 - v177;
            v185 = 8 * v177;
            v186 = (uint64_t *)((char *)__p + v185);
            v187 = (uint64_t *)((char *)v1287 + v185);
            do
            {
              v188 = *v187++;
              v189 = v188 - 1;
              v190 = *v186++;
              v178 += v190 * v189;
              --v184;
            }
            while (v184);
            goto LABEL_181;
          }
          v179 = 0;
          v180 = 0;
          v177 = v176 & 0xFFFFFFFFFFFFFFFELL;
          v181 = (char *)v1287 + 8;
          v182 = (char *)__p + 8;
          v183 = v176 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v179 += *(v182 - 1) * (*(v181 - 1) - 1);
            v180 += *v182 * (*v181 - 1);
            v181 += 2;
            v182 += 2;
            v183 -= 2;
          }
          while (v183);
          v178 = v180 + v179;
          if (v176 != v177)
            goto LABEL_179;
LABEL_181:
          if (v42 != v178 + 1)
LABEL_857:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_182:
          v191 = v1286;
          if (v1286)
          {
            v192 = (unint64_t *)&v1286->__shared_owners_;
            do
              v193 = __ldxr(v192);
            while (__stxr(v193 + 1, v192));
          }
          if (v1341)
            goto LABEL_930;
          v194 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_931;
          v195 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_533;
          if ((unint64_t)(v194 - 8) < 8)
          {
            v195 = 1;
            v196 = v1337;
            do
            {
LABEL_532:
              v640 = *(_QWORD *)v196;
              v196 += 8;
              v195 *= v640;
            }
            while (v196 != v1338);
            goto LABEL_533;
          }
          v635 = ((unint64_t)(v194 - 8) >> 3) + 1;
          v196 = &v1337[8 * (v635 & 0x3FFFFFFFFFFFFFFELL)];
          v636 = v1337 + 8;
          v637 = 1;
          v638 = v635 & 0x3FFFFFFFFFFFFFFELL;
          v639 = 1;
          do
          {
            v637 *= *(v636 - 1);
            v639 *= *v636;
            v636 += 2;
            v638 -= 2;
          }
          while (v638);
          v195 = v639 * v637;
          if (v635 != (v635 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_532;
LABEL_533:
          v641 = v194 >> 3;
          if ((unint64_t)(v194 >> 3) <= 1)
            v641 = 1;
          if (v641 < 2)
          {
            v642 = 0;
            v643 = 0;
LABEL_540:
            v649 = v641 - v642;
            v650 = 8 * v642;
            v651 = &v1339[v650];
            v652 = &v1337[v650];
            do
            {
              v653 = *(_QWORD *)v652;
              v652 += 8;
              v654 = v653 - 1;
              v655 = *(_QWORD *)v651;
              v651 += 8;
              v643 += v655 * v654;
              --v649;
            }
            while (v649);
            goto LABEL_542;
          }
          v644 = 0;
          v645 = 0;
          v642 = v641 & 0xFFFFFFFFFFFFFFFELL;
          v646 = v1337 + 8;
          v647 = v1339 + 8;
          v648 = v641 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v644 += *(v647 - 1) * (*(v646 - 1) - 1);
            v645 += *v647 * (*v646 - 1);
            v646 += 2;
            v647 += 2;
            v648 -= 2;
          }
          while (v648);
          v643 = v645 + v644;
          if (v641 != v642)
            goto LABEL_540;
LABEL_542:
          if (v195 != v643 + 1)
LABEL_930:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v656 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v657 = v656 >> 3;
            if ((unint64_t)(v656 >> 3) <= 1)
              v657 = 1;
            if (v657 >= 2)
            {
              v660 = 0;
              v661 = 0;
              v658 = v657 & 0xFFFFFFFFFFFFFFFELL;
              v662 = v1337 + 8;
              v663 = v1339 + 8;
              v664 = v657 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v660 += *(v663 - 1) * (*(v662 - 1) - 1);
                v661 += *v663 * (*v662 - 1);
                v662 += 2;
                v663 += 2;
                v664 -= 2;
              }
              while (v664);
              v659 = v661 + v660;
              if (v657 == v658)
                goto LABEL_553;
            }
            else
            {
              v658 = 0;
              v659 = 0;
            }
            v665 = v657 - v658;
            v666 = 8 * v658;
            v667 = &v1339[v666];
            v668 = &v1337[v666];
            do
            {
              v669 = *(_QWORD *)v668;
              v668 += 8;
              v670 = v669 - 1;
              v671 = *(_QWORD *)v667;
              v667 += 8;
              v659 += v671 * v670;
              --v665;
            }
            while (v665);
LABEL_553:
            v672 = v659 + 1;
            goto LABEL_932;
          }
LABEL_931:
          v672 = 0;
LABEL_932:
          if (v1341 + v672)
          {
            v1161 = 0;
            v1162 = 0;
            do
            {
              v1163 = (int)*(float *)(v40 + 4 * v1162);
              if (*((unsigned __int8 *)v1335 + v1161) > v1163)
                LOBYTE(v1163) = *((_BYTE *)v1335 + v1161);
              *((_BYTE *)v1335 + v1161) = v1163;
              v1162 = (v1162 + 1) % v39;
              ++v1161;
            }
            while (v1161 < v1341 + v672);
          }
          if (v191)
          {
            v1164 = (unint64_t *)&v191->__shared_owners_;
            do
              v1165 = __ldaxr(v1164);
            while (__stlxr(v1165 - 1, v1164));
            if (!v1165)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (!v1336)
            goto LABEL_991;
          v1166 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1137 = __ldaxr(v1166);
          while (__stlxr(v1137 - 1, v1166));
          goto LABEL_989;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v23 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_854;
          v24 = v1285;
          v25 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_116;
          if (!v1285)
          {
            v26 = 0;
            goto LABEL_106;
          }
          if ((unint64_t)(v25 - 8) < 8)
          {
            v26 = 1;
            v27 = (char *)v1287;
            do
            {
LABEL_105:
              v94 = *(_QWORD *)v27;
              v27 += 8;
              v26 *= v94;
            }
            while (v27 != v1288);
            goto LABEL_106;
          }
          v89 = ((unint64_t)(v25 - 8) >> 3) + 1;
          v27 = (char *)v1287 + 8 * (v89 & 0x3FFFFFFFFFFFFFFELL);
          v90 = (char *)v1287 + 8;
          v91 = 1;
          v92 = v89 & 0x3FFFFFFFFFFFFFFELL;
          v93 = 1;
          do
          {
            v91 *= *(v90 - 1);
            v93 *= *v90;
            v90 += 2;
            v92 -= 2;
          }
          while (v92);
          v26 = v93 * v91;
          if (v89 != (v89 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_105;
LABEL_106:
          v95 = v25 >> 3;
          if ((unint64_t)(v25 >> 3) <= 1)
            v95 = 1;
          if (v95 < 2)
          {
            v96 = 0;
            v97 = 0;
LABEL_113:
            v103 = v95 - v96;
            v104 = 8 * v96;
            v105 = (uint64_t *)((char *)__p + v104);
            v106 = (uint64_t *)((char *)v1287 + v104);
            do
            {
              v107 = *v106++;
              v108 = v107 - 1;
              v109 = *v105++;
              v97 += v109 * v108;
              --v103;
            }
            while (v103);
            goto LABEL_115;
          }
          v98 = 0;
          v99 = 0;
          v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
          v100 = (char *)v1287 + 8;
          v101 = (char *)__p + 8;
          v102 = v95 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v98 += *(v101 - 1) * (*(v100 - 1) - 1);
            v99 += *v101 * (*v100 - 1);
            v100 += 2;
            v101 += 2;
            v102 -= 2;
          }
          while (v102);
          v97 = v99 + v98;
          if (v95 != v96)
            goto LABEL_113;
LABEL_115:
          if (v26 != v97 + 1)
LABEL_854:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_116:
          v110 = v1286;
          if (v1286)
          {
            v111 = (unint64_t *)&v1286->__shared_owners_;
            do
              v112 = __ldxr(v111);
            while (__stxr(v112 + 1, v111));
          }
          if (v1341)
            goto LABEL_870;
          v113 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_871;
          v114 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_458;
          if ((unint64_t)(v113 - 8) < 8)
          {
            v114 = 1;
            v115 = v1337;
            do
            {
LABEL_457:
              v526 = *(_QWORD *)v115;
              v115 += 8;
              v114 *= v526;
            }
            while (v115 != v1338);
            goto LABEL_458;
          }
          v521 = ((unint64_t)(v113 - 8) >> 3) + 1;
          v115 = &v1337[8 * (v521 & 0x3FFFFFFFFFFFFFFELL)];
          v522 = v1337 + 8;
          v523 = 1;
          v524 = v521 & 0x3FFFFFFFFFFFFFFELL;
          v525 = 1;
          do
          {
            v523 *= *(v522 - 1);
            v525 *= *v522;
            v522 += 2;
            v524 -= 2;
          }
          while (v524);
          v114 = v525 * v523;
          if (v521 != (v521 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_457;
LABEL_458:
          v527 = v113 >> 3;
          if ((unint64_t)(v113 >> 3) <= 1)
            v527 = 1;
          if (v527 < 2)
          {
            v528 = 0;
            v529 = 0;
LABEL_465:
            v535 = v527 - v528;
            v536 = 8 * v528;
            v537 = &v1339[v536];
            v538 = &v1337[v536];
            do
            {
              v539 = *(_QWORD *)v538;
              v538 += 8;
              v540 = v539 - 1;
              v541 = *(_QWORD *)v537;
              v537 += 8;
              v529 += v541 * v540;
              --v535;
            }
            while (v535);
            goto LABEL_467;
          }
          v530 = 0;
          v531 = 0;
          v528 = v527 & 0xFFFFFFFFFFFFFFFELL;
          v532 = v1337 + 8;
          v533 = v1339 + 8;
          v534 = v527 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v530 += *(v533 - 1) * (*(v532 - 1) - 1);
            v531 += *v533 * (*v532 - 1);
            v532 += 2;
            v533 += 2;
            v534 -= 2;
          }
          while (v534);
          v529 = v531 + v530;
          if (v527 != v528)
            goto LABEL_465;
LABEL_467:
          if (v114 != v529 + 1)
LABEL_870:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v542 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v543 = v542 >> 3;
            if ((unint64_t)(v542 >> 3) <= 1)
              v543 = 1;
            if (v543 >= 2)
            {
              v546 = 0;
              v547 = 0;
              v544 = v543 & 0xFFFFFFFFFFFFFFFELL;
              v548 = v1337 + 8;
              v549 = v1339 + 8;
              v550 = v543 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v546 += *(v549 - 1) * (*(v548 - 1) - 1);
                v547 += *v549 * (*v548 - 1);
                v548 += 2;
                v549 += 2;
                v550 -= 2;
              }
              while (v550);
              v545 = v547 + v546;
              if (v543 == v544)
                goto LABEL_478;
            }
            else
            {
              v544 = 0;
              v545 = 0;
            }
            v551 = v543 - v544;
            v552 = 8 * v544;
            v553 = &v1339[v552];
            v554 = &v1337[v552];
            do
            {
              v555 = *(_QWORD *)v554;
              v554 += 8;
              v556 = v555 - 1;
              v557 = *(_QWORD *)v553;
              v553 += 8;
              v545 += v557 * v556;
              --v551;
            }
            while (v551);
LABEL_478:
            v558 = v545 + 1;
            goto LABEL_872;
          }
LABEL_871:
          v558 = 0;
LABEL_872:
          v1129 = v1341 + v558;
          if (v1129)
          {
            v1130 = 0;
            v1131 = (float *)v1335;
            do
            {
              v1132 = *(float *)(v24 + 4 * v1130);
              if (*v1131 >= v1132)
                v1132 = *v1131;
              *v1131++ = v1132;
              v1130 = (v1130 + 1) % v23;
              --v1129;
            }
            while (v1129);
          }
          if (v110)
          {
            v1133 = (unint64_t *)&v110->__shared_owners_;
            do
              v1134 = __ldaxr(v1133);
            while (__stlxr(v1134 - 1, v1133));
            if (!v1134)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (!v1336)
            goto LABEL_991;
          v1136 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1137 = __ldaxr(v1136);
          while (__stlxr(v1137 - 1, v1136));
          goto LABEL_989;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v29 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_855;
          v30 = v1285;
          v31 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_138;
          if (!v1285)
          {
            v32 = 0;
            goto LABEL_128;
          }
          if ((unint64_t)(v31 - 8) < 8)
          {
            v32 = 1;
            v33 = (char *)v1287;
            do
            {
LABEL_127:
              v121 = *(_QWORD *)v33;
              v33 += 8;
              v32 *= v121;
            }
            while (v33 != v1288);
            goto LABEL_128;
          }
          v116 = ((unint64_t)(v31 - 8) >> 3) + 1;
          v33 = (char *)v1287 + 8 * (v116 & 0x3FFFFFFFFFFFFFFELL);
          v117 = (char *)v1287 + 8;
          v118 = 1;
          v119 = v116 & 0x3FFFFFFFFFFFFFFELL;
          v120 = 1;
          do
          {
            v118 *= *(v117 - 1);
            v120 *= *v117;
            v117 += 2;
            v119 -= 2;
          }
          while (v119);
          v32 = v120 * v118;
          if (v116 != (v116 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_127;
LABEL_128:
          v122 = v31 >> 3;
          if ((unint64_t)(v31 >> 3) <= 1)
            v122 = 1;
          if (v122 < 2)
          {
            v123 = 0;
            v124 = 0;
LABEL_135:
            v130 = v122 - v123;
            v131 = 8 * v123;
            v132 = (uint64_t *)((char *)__p + v131);
            v133 = (uint64_t *)((char *)v1287 + v131);
            do
            {
              v134 = *v133++;
              v135 = v134 - 1;
              v136 = *v132++;
              v124 += v136 * v135;
              --v130;
            }
            while (v130);
            goto LABEL_137;
          }
          v125 = 0;
          v126 = 0;
          v123 = v122 & 0xFFFFFFFFFFFFFFFELL;
          v127 = (char *)v1287 + 8;
          v128 = (char *)__p + 8;
          v129 = v122 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v125 += *(v128 - 1) * (*(v127 - 1) - 1);
            v126 += *v128 * (*v127 - 1);
            v127 += 2;
            v128 += 2;
            v129 -= 2;
          }
          while (v129);
          v124 = v126 + v125;
          if (v122 != v123)
            goto LABEL_135;
LABEL_137:
          if (v32 != v124 + 1)
LABEL_855:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_138:
          v137 = v1286;
          if (v1286)
          {
            v138 = (unint64_t *)&v1286->__shared_owners_;
            do
              v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }
          if (v1341)
            goto LABEL_890;
          v140 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_891;
          v141 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_483;
          if ((unint64_t)(v140 - 8) < 8)
          {
            v141 = 1;
            v142 = v1337;
            do
            {
LABEL_482:
              v564 = *(_QWORD *)v142;
              v142 += 8;
              v141 *= v564;
            }
            while (v142 != v1338);
            goto LABEL_483;
          }
          v559 = ((unint64_t)(v140 - 8) >> 3) + 1;
          v142 = &v1337[8 * (v559 & 0x3FFFFFFFFFFFFFFELL)];
          v560 = v1337 + 8;
          v561 = 1;
          v562 = v559 & 0x3FFFFFFFFFFFFFFELL;
          v563 = 1;
          do
          {
            v561 *= *(v560 - 1);
            v563 *= *v560;
            v560 += 2;
            v562 -= 2;
          }
          while (v562);
          v141 = v563 * v561;
          if (v559 != (v559 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_482;
LABEL_483:
          v565 = v140 >> 3;
          if ((unint64_t)(v140 >> 3) <= 1)
            v565 = 1;
          if (v565 < 2)
          {
            v566 = 0;
            v567 = 0;
LABEL_490:
            v573 = v565 - v566;
            v574 = 8 * v566;
            v575 = &v1339[v574];
            v576 = &v1337[v574];
            do
            {
              v577 = *(_QWORD *)v576;
              v576 += 8;
              v578 = v577 - 1;
              v579 = *(_QWORD *)v575;
              v575 += 8;
              v567 += v579 * v578;
              --v573;
            }
            while (v573);
            goto LABEL_492;
          }
          v568 = 0;
          v569 = 0;
          v566 = v565 & 0xFFFFFFFFFFFFFFFELL;
          v570 = v1337 + 8;
          v571 = v1339 + 8;
          v572 = v565 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v568 += *(v571 - 1) * (*(v570 - 1) - 1);
            v569 += *v571 * (*v570 - 1);
            v570 += 2;
            v571 += 2;
            v572 -= 2;
          }
          while (v572);
          v567 = v569 + v568;
          if (v565 != v566)
            goto LABEL_490;
LABEL_492:
          if (v141 != v567 + 1)
LABEL_890:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v580 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v581 = v580 >> 3;
            if ((unint64_t)(v580 >> 3) <= 1)
              v581 = 1;
            if (v581 >= 2)
            {
              v584 = 0;
              v585 = 0;
              v582 = v581 & 0xFFFFFFFFFFFFFFFELL;
              v586 = v1337 + 8;
              v587 = v1339 + 8;
              v588 = v581 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v584 += *(v587 - 1) * (*(v586 - 1) - 1);
                v585 += *v587 * (*v586 - 1);
                v586 += 2;
                v587 += 2;
                v588 -= 2;
              }
              while (v588);
              v583 = v585 + v584;
              if (v581 == v582)
                goto LABEL_503;
            }
            else
            {
              v582 = 0;
              v583 = 0;
            }
            v589 = v581 - v582;
            v590 = 8 * v582;
            v591 = &v1339[v590];
            v592 = &v1337[v590];
            do
            {
              v593 = *(_QWORD *)v592;
              v592 += 8;
              v594 = v593 - 1;
              v595 = *(_QWORD *)v591;
              v591 += 8;
              v583 += v595 * v594;
              --v589;
            }
            while (v589);
LABEL_503:
            v596 = v583 + 1;
            goto LABEL_892;
          }
LABEL_891:
          v596 = 0;
LABEL_892:
          v1138 = v1341 + v596;
          if (v1138)
          {
            v1139 = 0;
            v1140 = v1335;
            do
            {
              _S0 = *(float *)(v30 + 4 * v1139);
              __asm { FCVT            H0, S0 }
              LOWORD(_S1) = *(_WORD *)v1140;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S3 >= _S2)
                _S0 = _S1;
              *(_WORD *)v1140 = LOWORD(_S0);
              v1140 = (int *)((char *)v1140 + 2);
              v1139 = (v1139 + 1) % v29;
              --v1138;
            }
            while (v1138);
          }
          if (v137)
          {
            v1148 = (unint64_t *)&v137->__shared_owners_;
            do
              v1149 = __ldaxr(v1148);
            while (__stlxr(v1149 - 1, v1148));
            if (!v1149)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (v1336)
          {
            v1150 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1137 = __ldaxr(v1150);
            while (__stlxr(v1137 - 1, v1150));
LABEL_989:
            if (!v1137)
            {
              ((void (*)(std::__shared_weak_count *))v1135->__on_zero_shared)(v1135);
              std::__shared_weak_count::__release_weak(v1135);
            }
          }
LABEL_991:
          if (__p)
          {
            v1290 = __p;
            operator delete(__p);
          }
          if (v1287)
          {
            v1288 = (char *)v1287;
            operator delete(v1287);
          }
          v1182 = v1286;
          if (v1286)
          {
            v1183 = (unint64_t *)&v1286->__shared_owners_;
            do
              v1184 = __ldaxr(v1183);
            while (__stlxr(v1184 - 1, v1183));
            if (!v1184)
            {
              ((void (*)(std::__shared_weak_count *))v1182->__on_zero_shared)(v1182);
              std::__shared_weak_count::__release_weak(v1182);
            }
          }
          if (v1282)
          {
            v1283 = v1282;
            operator delete(v1282);
          }
          if (v1280)
          {
            v1281 = v1280;
            operator delete(v1280);
          }
          v1185 = v1279;
          if (!v1279)
            return;
          v1186 = (unint64_t *)&v1279->__shared_owners_;
          do
            v1187 = __ldaxr(v1186);
          while (__stlxr(v1187 - 1, v1186));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1261;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1292, (uint64_t)a2);
      v1298 = &v1334;
      nitro::ndarray<half>::ndarray(&v1299, &v1292);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v13 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_864;
          v14 = v1299;
          v15 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_336;
          if (!v1299)
          {
            v16 = 0;
            goto LABEL_326;
          }
          if ((unint64_t)(v15 - 8) < 8)
          {
            v16 = 1;
            v17 = (char *)v1301;
            do
            {
LABEL_325:
              v364 = *(_QWORD *)v17;
              v17 += 8;
              v16 *= v364;
            }
            while (v17 != v1302);
            goto LABEL_326;
          }
          v359 = ((unint64_t)(v15 - 8) >> 3) + 1;
          v17 = (char *)v1301 + 8 * (v359 & 0x3FFFFFFFFFFFFFFELL);
          v360 = (char *)v1301 + 8;
          v361 = 1;
          v362 = v359 & 0x3FFFFFFFFFFFFFFELL;
          v363 = 1;
          do
          {
            v361 *= *(v360 - 1);
            v363 *= *v360;
            v360 += 2;
            v362 -= 2;
          }
          while (v362);
          v16 = v363 * v361;
          if (v359 != (v359 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_325;
LABEL_326:
          v365 = v15 >> 3;
          if ((unint64_t)(v15 >> 3) <= 1)
            v365 = 1;
          if (v365 < 2)
          {
            v366 = 0;
            v367 = 0;
LABEL_333:
            v373 = v365 - v366;
            v374 = 8 * v366;
            v375 = (uint64_t *)((char *)v1303 + v374);
            v376 = (uint64_t *)((char *)v1301 + v374);
            do
            {
              v377 = *v376++;
              v378 = v377 - 1;
              v379 = *v375++;
              v367 += v379 * v378;
              --v373;
            }
            while (v373);
            goto LABEL_335;
          }
          v368 = 0;
          v369 = 0;
          v366 = v365 & 0xFFFFFFFFFFFFFFFELL;
          v370 = (char *)v1301 + 8;
          v371 = (char *)v1303 + 8;
          v372 = v365 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v368 += *(v371 - 1) * (*(v370 - 1) - 1);
            v369 += *v371 * (*v370 - 1);
            v370 += 2;
            v371 += 2;
            v372 -= 2;
          }
          while (v372);
          v367 = v369 + v368;
          if (v365 != v366)
            goto LABEL_333;
LABEL_335:
          if (v16 != v367 + 1)
LABEL_864:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_336:
          v380 = v1300;
          if (v1300)
          {
            v381 = (unint64_t *)&v1300->__shared_owners_;
            do
              v382 = __ldxr(v381);
            while (__stxr(v382 + 1, v381));
          }
          if (v1341)
            goto LABEL_1088;
          v383 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1089;
          v384 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_708;
          if ((unint64_t)(v383 - 8) < 8)
          {
            v384 = 1;
            v385 = v1337;
            do
            {
LABEL_707:
              v906 = *(_QWORD *)v385;
              v385 += 8;
              v384 *= v906;
            }
            while (v385 != v1338);
            goto LABEL_708;
          }
          v901 = ((unint64_t)(v383 - 8) >> 3) + 1;
          v385 = &v1337[8 * (v901 & 0x3FFFFFFFFFFFFFFELL)];
          v902 = v1337 + 8;
          v903 = 1;
          v904 = v901 & 0x3FFFFFFFFFFFFFFELL;
          v905 = 1;
          do
          {
            v903 *= *(v902 - 1);
            v905 *= *v902;
            v902 += 2;
            v904 -= 2;
          }
          while (v904);
          v384 = v905 * v903;
          if (v901 != (v901 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_707;
LABEL_708:
          v907 = v383 >> 3;
          if ((unint64_t)(v383 >> 3) <= 1)
            v907 = 1;
          if (v907 < 2)
          {
            v908 = 0;
            v909 = 0;
LABEL_715:
            v915 = v907 - v908;
            v916 = 8 * v908;
            v917 = &v1339[v916];
            v918 = &v1337[v916];
            do
            {
              v919 = *(_QWORD *)v918;
              v918 += 8;
              v920 = v919 - 1;
              v921 = *(_QWORD *)v917;
              v917 += 8;
              v909 += v921 * v920;
              --v915;
            }
            while (v915);
            goto LABEL_717;
          }
          v910 = 0;
          v911 = 0;
          v908 = v907 & 0xFFFFFFFFFFFFFFFELL;
          v912 = v1337 + 8;
          v913 = v1339 + 8;
          v914 = v907 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v910 += *(v913 - 1) * (*(v912 - 1) - 1);
            v911 += *v913 * (*v912 - 1);
            v912 += 2;
            v913 += 2;
            v914 -= 2;
          }
          while (v914);
          v909 = v911 + v910;
          if (v907 != v908)
            goto LABEL_715;
LABEL_717:
          if (v384 != v909 + 1)
LABEL_1088:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v922 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v923 = v922 >> 3;
            if ((unint64_t)(v922 >> 3) <= 1)
              v923 = 1;
            if (v923 >= 2)
            {
              v926 = 0;
              v927 = 0;
              v924 = v923 & 0xFFFFFFFFFFFFFFFELL;
              v928 = v1337 + 8;
              v929 = v1339 + 8;
              v930 = v923 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v926 += *(v929 - 1) * (*(v928 - 1) - 1);
                v927 += *v929 * (*v928 - 1);
                v928 += 2;
                v929 += 2;
                v930 -= 2;
              }
              while (v930);
              v925 = v927 + v926;
              if (v923 == v924)
                goto LABEL_728;
            }
            else
            {
              v924 = 0;
              v925 = 0;
            }
            v931 = v923 - v924;
            v932 = 8 * v924;
            v933 = &v1339[v932];
            v934 = &v1337[v932];
            do
            {
              v935 = *(_QWORD *)v934;
              v934 += 8;
              v936 = v935 - 1;
              v937 = *(_QWORD *)v933;
              v933 += 8;
              v925 += v937 * v936;
              --v931;
            }
            while (v931);
LABEL_728:
            v938 = v925 + 1;
            goto LABEL_1090;
          }
LABEL_1089:
          v938 = 0;
LABEL_1090:
          v1222 = v1341 + v938;
          if (v1222)
          {
            v1223 = 0;
            v1224 = v1335;
            do
            {
              _H0 = *(_WORD *)(v14 + 2 * v1223);
              __asm { FCVT            S0, H0 }
              v1227 = (int)_S0;
              if (*v1224 > (int)_S0)
                v1227 = *v1224;
              *v1224++ = v1227;
              v1223 = (v1223 + 1) % v13;
              --v1222;
            }
            while (v1222);
          }
          if (v380)
          {
            v1228 = (unint64_t *)&v380->__shared_owners_;
            do
              v1229 = __ldaxr(v1228);
            while (__stlxr(v1229 - 1, v1228));
            if (!v1229)
            {
              ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
              std::__shared_weak_count::__release_weak(v380);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (!v1336)
            goto LABEL_1109;
          v1230 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1160 = __ldaxr(v1230);
          while (__stlxr(v1160 - 1, v1230));
          goto LABEL_1107;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v61 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_862;
          v62 = v1299;
          v63 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_292;
          if (!v1299)
          {
            v64 = 0;
            goto LABEL_282;
          }
          if ((unint64_t)(v63 - 8) < 8)
          {
            v64 = 1;
            v65 = (char *)v1301;
            do
            {
LABEL_281:
              v310 = *(_QWORD *)v65;
              v65 += 8;
              v64 *= v310;
            }
            while (v65 != v1302);
            goto LABEL_282;
          }
          v305 = ((unint64_t)(v63 - 8) >> 3) + 1;
          v65 = (char *)v1301 + 8 * (v305 & 0x3FFFFFFFFFFFFFFELL);
          v306 = (char *)v1301 + 8;
          v307 = 1;
          v308 = v305 & 0x3FFFFFFFFFFFFFFELL;
          v309 = 1;
          do
          {
            v307 *= *(v306 - 1);
            v309 *= *v306;
            v306 += 2;
            v308 -= 2;
          }
          while (v308);
          v64 = v309 * v307;
          if (v305 != (v305 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_281;
LABEL_282:
          v311 = v63 >> 3;
          if ((unint64_t)(v63 >> 3) <= 1)
            v311 = 1;
          if (v311 < 2)
          {
            v312 = 0;
            v313 = 0;
LABEL_289:
            v319 = v311 - v312;
            v320 = 8 * v312;
            v321 = (uint64_t *)((char *)v1303 + v320);
            v322 = (uint64_t *)((char *)v1301 + v320);
            do
            {
              v323 = *v322++;
              v324 = v323 - 1;
              v325 = *v321++;
              v313 += v325 * v324;
              --v319;
            }
            while (v319);
            goto LABEL_291;
          }
          v314 = 0;
          v315 = 0;
          v312 = v311 & 0xFFFFFFFFFFFFFFFELL;
          v316 = (char *)v1301 + 8;
          v317 = (char *)v1303 + 8;
          v318 = v311 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v314 += *(v317 - 1) * (*(v316 - 1) - 1);
            v315 += *v317 * (*v316 - 1);
            v316 += 2;
            v317 += 2;
            v318 -= 2;
          }
          while (v318);
          v313 = v315 + v314;
          if (v311 != v312)
            goto LABEL_289;
LABEL_291:
          if (v64 != v313 + 1)
LABEL_862:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_292:
          v326 = v1300;
          if (v1300)
          {
            v327 = (unint64_t *)&v1300->__shared_owners_;
            do
              v328 = __ldxr(v327);
            while (__stxr(v328 + 1, v327));
          }
          if (v1341)
            goto LABEL_1048;
          v329 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1049;
          v330 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_658;
          if ((unint64_t)(v329 - 8) < 8)
          {
            v330 = 1;
            v331 = v1337;
            do
            {
LABEL_657:
              v830 = *(_QWORD *)v331;
              v331 += 8;
              v330 *= v830;
            }
            while (v331 != v1338);
            goto LABEL_658;
          }
          v825 = ((unint64_t)(v329 - 8) >> 3) + 1;
          v331 = &v1337[8 * (v825 & 0x3FFFFFFFFFFFFFFELL)];
          v826 = v1337 + 8;
          v827 = 1;
          v828 = v825 & 0x3FFFFFFFFFFFFFFELL;
          v829 = 1;
          do
          {
            v827 *= *(v826 - 1);
            v829 *= *v826;
            v826 += 2;
            v828 -= 2;
          }
          while (v828);
          v330 = v829 * v827;
          if (v825 != (v825 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_657;
LABEL_658:
          v831 = v329 >> 3;
          if ((unint64_t)(v329 >> 3) <= 1)
            v831 = 1;
          if (v831 < 2)
          {
            v832 = 0;
            v833 = 0;
LABEL_665:
            v839 = v831 - v832;
            v840 = 8 * v832;
            v841 = &v1339[v840];
            v842 = &v1337[v840];
            do
            {
              v843 = *(_QWORD *)v842;
              v842 += 8;
              v844 = v843 - 1;
              v845 = *(_QWORD *)v841;
              v841 += 8;
              v833 += v845 * v844;
              --v839;
            }
            while (v839);
            goto LABEL_667;
          }
          v834 = 0;
          v835 = 0;
          v832 = v831 & 0xFFFFFFFFFFFFFFFELL;
          v836 = v1337 + 8;
          v837 = v1339 + 8;
          v838 = v831 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v834 += *(v837 - 1) * (*(v836 - 1) - 1);
            v835 += *v837 * (*v836 - 1);
            v836 += 2;
            v837 += 2;
            v838 -= 2;
          }
          while (v838);
          v833 = v835 + v834;
          if (v831 != v832)
            goto LABEL_665;
LABEL_667:
          if (v330 != v833 + 1)
LABEL_1048:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v846 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v847 = v846 >> 3;
            if ((unint64_t)(v846 >> 3) <= 1)
              v847 = 1;
            if (v847 >= 2)
            {
              v850 = 0;
              v851 = 0;
              v848 = v847 & 0xFFFFFFFFFFFFFFFELL;
              v852 = v1337 + 8;
              v853 = v1339 + 8;
              v854 = v847 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v850 += *(v853 - 1) * (*(v852 - 1) - 1);
                v851 += *v853 * (*v852 - 1);
                v852 += 2;
                v853 += 2;
                v854 -= 2;
              }
              while (v854);
              v849 = v851 + v850;
              if (v847 == v848)
                goto LABEL_678;
            }
            else
            {
              v848 = 0;
              v849 = 0;
            }
            v855 = v847 - v848;
            v856 = 8 * v848;
            v857 = &v1339[v856];
            v858 = &v1337[v856];
            do
            {
              v859 = *(_QWORD *)v858;
              v858 += 8;
              v860 = v859 - 1;
              v861 = *(_QWORD *)v857;
              v857 += 8;
              v849 += v861 * v860;
              --v855;
            }
            while (v855);
LABEL_678:
            v862 = v849 + 1;
            goto LABEL_1050;
          }
LABEL_1049:
          v862 = 0;
LABEL_1050:
          if (v1341 + v862)
          {
            v1206 = 0;
            v1207 = 0;
            do
            {
              _H0 = *(_WORD *)(v62 + 2 * v1207);
              __asm { FCVT            S0, H0 }
              v1210 = (int)_S0;
              if (*((unsigned __int8 *)v1335 + v1206) > (int)_S0)
                LOBYTE(v1210) = *((_BYTE *)v1335 + v1206);
              *((_BYTE *)v1335 + v1206) = v1210;
              v1207 = (v1207 + 1) % v61;
              ++v1206;
            }
            while (v1206 < v1341 + v862);
          }
          if (v326)
          {
            v1211 = (unint64_t *)&v326->__shared_owners_;
            do
              v1212 = __ldaxr(v1211);
            while (__stlxr(v1212 - 1, v1211));
            if (!v1212)
            {
              ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
              std::__shared_weak_count::__release_weak(v326);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (!v1336)
            goto LABEL_1109;
          v1213 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1160 = __ldaxr(v1213);
          while (__stlxr(v1160 - 1, v1213));
          goto LABEL_1107;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v34 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_856;
          v35 = v1299;
          v36 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_160;
          if (!v1299)
          {
            v37 = 0;
            goto LABEL_150;
          }
          if ((unint64_t)(v36 - 8) < 8)
          {
            v37 = 1;
            v38 = (char *)v1301;
            do
            {
LABEL_149:
              v148 = *(_QWORD *)v38;
              v38 += 8;
              v37 *= v148;
            }
            while (v38 != v1302);
            goto LABEL_150;
          }
          v143 = ((unint64_t)(v36 - 8) >> 3) + 1;
          v38 = (char *)v1301 + 8 * (v143 & 0x3FFFFFFFFFFFFFFELL);
          v144 = (char *)v1301 + 8;
          v145 = 1;
          v146 = v143 & 0x3FFFFFFFFFFFFFFELL;
          v147 = 1;
          do
          {
            v145 *= *(v144 - 1);
            v147 *= *v144;
            v144 += 2;
            v146 -= 2;
          }
          while (v146);
          v37 = v147 * v145;
          if (v143 != (v143 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_149;
LABEL_150:
          v149 = v36 >> 3;
          if ((unint64_t)(v36 >> 3) <= 1)
            v149 = 1;
          if (v149 < 2)
          {
            v150 = 0;
            v151 = 0;
LABEL_157:
            v157 = v149 - v150;
            v158 = 8 * v150;
            v159 = (uint64_t *)((char *)v1303 + v158);
            v160 = (uint64_t *)((char *)v1301 + v158);
            do
            {
              v161 = *v160++;
              v162 = v161 - 1;
              v163 = *v159++;
              v151 += v163 * v162;
              --v157;
            }
            while (v157);
            goto LABEL_159;
          }
          v152 = 0;
          v153 = 0;
          v150 = v149 & 0xFFFFFFFFFFFFFFFELL;
          v154 = (char *)v1301 + 8;
          v155 = (char *)v1303 + 8;
          v156 = v149 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v152 += *(v155 - 1) * (*(v154 - 1) - 1);
            v153 += *v155 * (*v154 - 1);
            v154 += 2;
            v155 += 2;
            v156 -= 2;
          }
          while (v156);
          v151 = v153 + v152;
          if (v149 != v150)
            goto LABEL_157;
LABEL_159:
          if (v37 != v151 + 1)
LABEL_856:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_160:
          v164 = v1300;
          if (v1300)
          {
            v165 = (unint64_t *)&v1300->__shared_owners_;
            do
              v166 = __ldxr(v165);
            while (__stxr(v166 + 1, v165));
          }
          if (v1341)
            goto LABEL_910;
          v167 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_911;
          v168 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_508;
          if ((unint64_t)(v167 - 8) < 8)
          {
            v168 = 1;
            v169 = v1337;
            do
            {
LABEL_507:
              v602 = *(_QWORD *)v169;
              v169 += 8;
              v168 *= v602;
            }
            while (v169 != v1338);
            goto LABEL_508;
          }
          v597 = ((unint64_t)(v167 - 8) >> 3) + 1;
          v169 = &v1337[8 * (v597 & 0x3FFFFFFFFFFFFFFELL)];
          v598 = v1337 + 8;
          v599 = 1;
          v600 = v597 & 0x3FFFFFFFFFFFFFFELL;
          v601 = 1;
          do
          {
            v599 *= *(v598 - 1);
            v601 *= *v598;
            v598 += 2;
            v600 -= 2;
          }
          while (v600);
          v168 = v601 * v599;
          if (v597 != (v597 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_507;
LABEL_508:
          v603 = v167 >> 3;
          if ((unint64_t)(v167 >> 3) <= 1)
            v603 = 1;
          if (v603 < 2)
          {
            v604 = 0;
            v605 = 0;
LABEL_515:
            v611 = v603 - v604;
            v612 = 8 * v604;
            v613 = &v1339[v612];
            v614 = &v1337[v612];
            do
            {
              v615 = *(_QWORD *)v614;
              v614 += 8;
              v616 = v615 - 1;
              v617 = *(_QWORD *)v613;
              v613 += 8;
              v605 += v617 * v616;
              --v611;
            }
            while (v611);
            goto LABEL_517;
          }
          v606 = 0;
          v607 = 0;
          v604 = v603 & 0xFFFFFFFFFFFFFFFELL;
          v608 = v1337 + 8;
          v609 = v1339 + 8;
          v610 = v603 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v606 += *(v609 - 1) * (*(v608 - 1) - 1);
            v607 += *v609 * (*v608 - 1);
            v608 += 2;
            v609 += 2;
            v610 -= 2;
          }
          while (v610);
          v605 = v607 + v606;
          if (v603 != v604)
            goto LABEL_515;
LABEL_517:
          if (v168 != v605 + 1)
LABEL_910:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v618 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v619 = v618 >> 3;
            if ((unint64_t)(v618 >> 3) <= 1)
              v619 = 1;
            if (v619 >= 2)
            {
              v622 = 0;
              v623 = 0;
              v620 = v619 & 0xFFFFFFFFFFFFFFFELL;
              v624 = v1337 + 8;
              v625 = v1339 + 8;
              v626 = v619 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v622 += *(v625 - 1) * (*(v624 - 1) - 1);
                v623 += *v625 * (*v624 - 1);
                v624 += 2;
                v625 += 2;
                v626 -= 2;
              }
              while (v626);
              v621 = v623 + v622;
              if (v619 == v620)
                goto LABEL_528;
            }
            else
            {
              v620 = 0;
              v621 = 0;
            }
            v627 = v619 - v620;
            v628 = 8 * v620;
            v629 = &v1339[v628];
            v630 = &v1337[v628];
            do
            {
              v631 = *(_QWORD *)v630;
              v630 += 8;
              v632 = v631 - 1;
              v633 = *(_QWORD *)v629;
              v629 += 8;
              v621 += v633 * v632;
              --v627;
            }
            while (v627);
LABEL_528:
            v634 = v621 + 1;
            goto LABEL_912;
          }
LABEL_911:
          v634 = 0;
LABEL_912:
          v1151 = v1341 + v634;
          if (v1151)
          {
            v1152 = 0;
            v1153 = (float *)v1335;
            do
            {
              _H0 = *(_WORD *)(v35 + 2 * v1152);
              __asm { FCVT            S0, H0 }
              if (*v1153 >= _S0)
                _S0 = *v1153;
              *v1153++ = _S0;
              v1152 = (v1152 + 1) % v34;
              --v1151;
            }
            while (v1151);
          }
          if (v164)
          {
            v1156 = (unint64_t *)&v164->__shared_owners_;
            do
              v1157 = __ldaxr(v1156);
            while (__stlxr(v1157 - 1, v1156));
            if (!v1157)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (!v1336)
            goto LABEL_1109;
          v1159 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1160 = __ldaxr(v1159);
          while (__stlxr(v1160 - 1, v1159));
          goto LABEL_1107;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v56 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_861;
          v57 = v1299;
          v58 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_270;
          if (!v1299)
          {
            v59 = 0;
            goto LABEL_260;
          }
          if ((unint64_t)(v58 - 8) < 8)
          {
            v59 = 1;
            v60 = (char *)v1301;
            do
            {
LABEL_259:
              v283 = *(_QWORD *)v60;
              v60 += 8;
              v59 *= v283;
            }
            while (v60 != v1302);
            goto LABEL_260;
          }
          v278 = ((unint64_t)(v58 - 8) >> 3) + 1;
          v60 = (char *)v1301 + 8 * (v278 & 0x3FFFFFFFFFFFFFFELL);
          v279 = (char *)v1301 + 8;
          v280 = 1;
          v281 = v278 & 0x3FFFFFFFFFFFFFFELL;
          v282 = 1;
          do
          {
            v280 *= *(v279 - 1);
            v282 *= *v279;
            v279 += 2;
            v281 -= 2;
          }
          while (v281);
          v59 = v282 * v280;
          if (v278 != (v278 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_259;
LABEL_260:
          v284 = v58 >> 3;
          if ((unint64_t)(v58 >> 3) <= 1)
            v284 = 1;
          if (v284 < 2)
          {
            v285 = 0;
            v286 = 0;
LABEL_267:
            v292 = v284 - v285;
            v293 = 8 * v285;
            v294 = (uint64_t *)((char *)v1303 + v293);
            v295 = (uint64_t *)((char *)v1301 + v293);
            do
            {
              v296 = *v295++;
              v297 = v296 - 1;
              v298 = *v294++;
              v286 += v298 * v297;
              --v292;
            }
            while (v292);
            goto LABEL_269;
          }
          v287 = 0;
          v288 = 0;
          v285 = v284 & 0xFFFFFFFFFFFFFFFELL;
          v289 = (char *)v1301 + 8;
          v290 = (char *)v1303 + 8;
          v291 = v284 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v287 += *(v290 - 1) * (*(v289 - 1) - 1);
            v288 += *v290 * (*v289 - 1);
            v289 += 2;
            v290 += 2;
            v291 -= 2;
          }
          while (v291);
          v286 = v288 + v287;
          if (v284 != v285)
            goto LABEL_267;
LABEL_269:
          if (v59 != v286 + 1)
LABEL_861:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_270:
          v299 = v1300;
          if (v1300)
          {
            v300 = (unint64_t *)&v1300->__shared_owners_;
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
          }
          if (v1341)
            goto LABEL_1028;
          v302 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1029;
          v303 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_633;
          if ((unint64_t)(v302 - 8) < 8)
          {
            v303 = 1;
            v304 = v1337;
            do
            {
LABEL_632:
              v792 = *(_QWORD *)v304;
              v304 += 8;
              v303 *= v792;
            }
            while (v304 != v1338);
            goto LABEL_633;
          }
          v787 = ((unint64_t)(v302 - 8) >> 3) + 1;
          v304 = &v1337[8 * (v787 & 0x3FFFFFFFFFFFFFFELL)];
          v788 = v1337 + 8;
          v789 = 1;
          v790 = v787 & 0x3FFFFFFFFFFFFFFELL;
          v791 = 1;
          do
          {
            v789 *= *(v788 - 1);
            v791 *= *v788;
            v788 += 2;
            v790 -= 2;
          }
          while (v790);
          v303 = v791 * v789;
          if (v787 != (v787 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_632;
LABEL_633:
          v793 = v302 >> 3;
          if ((unint64_t)(v302 >> 3) <= 1)
            v793 = 1;
          if (v793 < 2)
          {
            v794 = 0;
            v795 = 0;
LABEL_640:
            v801 = v793 - v794;
            v802 = 8 * v794;
            v803 = &v1339[v802];
            v804 = &v1337[v802];
            do
            {
              v805 = *(_QWORD *)v804;
              v804 += 8;
              v806 = v805 - 1;
              v807 = *(_QWORD *)v803;
              v803 += 8;
              v795 += v807 * v806;
              --v801;
            }
            while (v801);
            goto LABEL_642;
          }
          v796 = 0;
          v797 = 0;
          v794 = v793 & 0xFFFFFFFFFFFFFFFELL;
          v798 = v1337 + 8;
          v799 = v1339 + 8;
          v800 = v793 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v796 += *(v799 - 1) * (*(v798 - 1) - 1);
            v797 += *v799 * (*v798 - 1);
            v798 += 2;
            v799 += 2;
            v800 -= 2;
          }
          while (v800);
          v795 = v797 + v796;
          if (v793 != v794)
            goto LABEL_640;
LABEL_642:
          if (v303 != v795 + 1)
LABEL_1028:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v808 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v809 = v808 >> 3;
            if ((unint64_t)(v808 >> 3) <= 1)
              v809 = 1;
            if (v809 >= 2)
            {
              v812 = 0;
              v813 = 0;
              v810 = v809 & 0xFFFFFFFFFFFFFFFELL;
              v814 = v1337 + 8;
              v815 = v1339 + 8;
              v816 = v809 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v812 += *(v815 - 1) * (*(v814 - 1) - 1);
                v813 += *v815 * (*v814 - 1);
                v814 += 2;
                v815 += 2;
                v816 -= 2;
              }
              while (v816);
              v811 = v813 + v812;
              if (v809 == v810)
                goto LABEL_653;
            }
            else
            {
              v810 = 0;
              v811 = 0;
            }
            v817 = v809 - v810;
            v818 = 8 * v810;
            v819 = &v1339[v818];
            v820 = &v1337[v818];
            do
            {
              v821 = *(_QWORD *)v820;
              v820 += 8;
              v822 = v821 - 1;
              v823 = *(_QWORD *)v819;
              v819 += 8;
              v811 += v823 * v822;
              --v817;
            }
            while (v817);
LABEL_653:
            v824 = v811 + 1;
            goto LABEL_1030;
          }
LABEL_1029:
          v824 = 0;
LABEL_1030:
          v1197 = v1341 + v824;
          if (v1197)
          {
            v1198 = 0;
            v1199 = v1335;
            do
            {
              LOWORD(_S0) = *(_WORD *)(v57 + 2 * v1198);
              LOWORD(_S1) = *(_WORD *)v1199;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S3 >= _S2)
                _S0 = _S1;
              *(_WORD *)v1199 = _S0;
              v1199 = (int *)((char *)v1199 + 2);
              v1198 = (v1198 + 1) % v56;
              --v1197;
            }
            while (v1197);
          }
          if (v299)
          {
            v1203 = (unint64_t *)&v299->__shared_owners_;
            do
              v1204 = __ldaxr(v1203);
            while (__stlxr(v1204 - 1, v1203));
            if (!v1204)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (v1336)
          {
            v1205 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1160 = __ldaxr(v1205);
            while (__stlxr(v1160 - 1, v1205));
LABEL_1107:
            if (!v1160)
            {
              ((void (*)(std::__shared_weak_count *))v1158->__on_zero_shared)(v1158);
              std::__shared_weak_count::__release_weak(v1158);
            }
          }
LABEL_1109:
          if (v1303)
          {
            v1304 = v1303;
            operator delete(v1303);
          }
          if (v1301)
          {
            v1302 = (char *)v1301;
            operator delete(v1301);
          }
          v1231 = v1300;
          if (v1300)
          {
            v1232 = (unint64_t *)&v1300->__shared_owners_;
            do
              v1233 = __ldaxr(v1232);
            while (__stlxr(v1233 - 1, v1232));
            if (!v1233)
            {
              ((void (*)(std::__shared_weak_count *))v1231->__on_zero_shared)(v1231);
              std::__shared_weak_count::__release_weak(v1231);
            }
          }
          if (v1296)
          {
            v1297 = v1296;
            operator delete(v1296);
          }
          if (v1294)
          {
            v1295 = v1294;
            operator delete(v1294);
          }
          v1185 = v1293;
          if (v1293)
          {
            v1234 = (unint64_t *)&v1293->__shared_owners_;
            do
              v1187 = __ldaxr(v1234);
            while (__stlxr(v1187 - 1, v1234));
LABEL_1261:
            if (!v1187)
            {
              ((void (*)(std::__shared_weak_count *))v1185->__on_zero_shared)(v1185);
              std::__shared_weak_count::__release_weak(v1185);
            }
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_1912BAE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v61;

  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  nitro::ndarray<float>::~ndarray((_QWORD *)(v58 - 112));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(_DWORD *a1, _DWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  unint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  unint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  _QWORD *v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  std::__shared_weak_count *v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  unint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  std::__shared_weak_count *v245;
  unint64_t *v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char *v250;
  unint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  _QWORD *v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  std::__shared_weak_count *v272;
  unint64_t *v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  unint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _QWORD *v289;
  _QWORD *v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  std::__shared_weak_count *v299;
  unint64_t *v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char *v304;
  unint64_t v305;
  _QWORD *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  unint64_t v318;
  unint64_t v319;
  uint64_t v320;
  uint64_t *v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *v331;
  unint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  _QWORD *v344;
  unint64_t v345;
  unint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  std::__shared_weak_count *v353;
  unint64_t *v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  char *v358;
  unint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  unint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  _QWORD *v370;
  _QWORD *v371;
  unint64_t v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  std::__shared_weak_count *v380;
  unint64_t *v381;
  unint64_t v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  unint64_t v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  unint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  _QWORD *v397;
  _QWORD *v398;
  unint64_t v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  std::__shared_weak_count *v407;
  unint64_t *v408;
  unint64_t v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  unint64_t v413;
  _QWORD *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  _QWORD *v424;
  _QWORD *v425;
  unint64_t v426;
  unint64_t v427;
  uint64_t v428;
  char *v429;
  char *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  std::__shared_weak_count *v434;
  unint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  char *v439;
  unint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  unint64_t v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  _QWORD *v452;
  unint64_t v453;
  unint64_t v454;
  uint64_t v455;
  char *v456;
  char *v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  std::__shared_weak_count *v461;
  unint64_t *v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  unint64_t v467;
  _QWORD *v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  unint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  _QWORD *v479;
  unint64_t v480;
  unint64_t v481;
  uint64_t v482;
  uint64_t *v483;
  uint64_t *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  std::__shared_weak_count *v488;
  unint64_t *v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  char *v493;
  unint64_t v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  _QWORD *v505;
  _QWORD *v506;
  unint64_t v507;
  unint64_t v508;
  uint64_t v509;
  uint64_t *v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  std::__shared_weak_count *v515;
  unint64_t *p_shared_owners;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  unint64_t v521;
  _QWORD *v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  unint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  _QWORD *v532;
  _QWORD *v533;
  unint64_t v534;
  unint64_t v535;
  uint64_t v536;
  char *v537;
  char *v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  _QWORD *v548;
  _QWORD *v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t v552;
  char *v553;
  char *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  unint64_t v559;
  _QWORD *v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  unint64_t v565;
  unint64_t v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  _QWORD *v570;
  _QWORD *v571;
  unint64_t v572;
  unint64_t v573;
  uint64_t v574;
  char *v575;
  char *v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  unint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  _QWORD *v587;
  unint64_t v588;
  unint64_t v589;
  uint64_t v590;
  char *v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  unint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  _QWORD *v609;
  unint64_t v610;
  unint64_t v611;
  uint64_t v612;
  char *v613;
  char *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  _QWORD *v625;
  unint64_t v626;
  unint64_t v627;
  uint64_t v628;
  char *v629;
  char *v630;
  uint64_t v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  unint64_t v635;
  _QWORD *v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  unint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  _QWORD *v646;
  _QWORD *v647;
  unint64_t v648;
  unint64_t v649;
  uint64_t v650;
  char *v651;
  char *v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  _QWORD *v662;
  _QWORD *v663;
  unint64_t v664;
  unint64_t v665;
  uint64_t v666;
  char *v667;
  char *v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  unint64_t v673;
  _QWORD *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  _QWORD *v684;
  _QWORD *v685;
  unint64_t v686;
  unint64_t v687;
  uint64_t v688;
  char *v689;
  char *v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  unint64_t v695;
  unint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  _QWORD *v700;
  _QWORD *v701;
  unint64_t v702;
  unint64_t v703;
  uint64_t v704;
  char *v705;
  char *v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  _QWORD *v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  unint64_t v717;
  unint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  _QWORD *v722;
  _QWORD *v723;
  unint64_t v724;
  unint64_t v725;
  uint64_t v726;
  char *v727;
  char *v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  uint64_t v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  _QWORD *v738;
  _QWORD *v739;
  unint64_t v740;
  unint64_t v741;
  uint64_t v742;
  char *v743;
  char *v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  unint64_t v749;
  _QWORD *v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  unint64_t v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  _QWORD *v760;
  _QWORD *v761;
  unint64_t v762;
  unint64_t v763;
  uint64_t v764;
  char *v765;
  char *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  unint64_t v771;
  unint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  _QWORD *v776;
  _QWORD *v777;
  unint64_t v778;
  unint64_t v779;
  uint64_t v780;
  char *v781;
  char *v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  unint64_t v787;
  _QWORD *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  unint64_t v793;
  unint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  _QWORD *v798;
  _QWORD *v799;
  unint64_t v800;
  unint64_t v801;
  uint64_t v802;
  char *v803;
  char *v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  unint64_t v809;
  unint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  _QWORD *v814;
  _QWORD *v815;
  unint64_t v816;
  unint64_t v817;
  uint64_t v818;
  char *v819;
  char *v820;
  uint64_t v821;
  uint64_t v822;
  uint64_t v823;
  uint64_t v824;
  unint64_t v825;
  _QWORD *v826;
  uint64_t v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  unint64_t v831;
  unint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  _QWORD *v836;
  _QWORD *v837;
  unint64_t v838;
  unint64_t v839;
  uint64_t v840;
  char *v841;
  char *v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  unint64_t v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  _QWORD *v852;
  _QWORD *v853;
  unint64_t v854;
  unint64_t v855;
  uint64_t v856;
  char *v857;
  char *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  uint64_t v862;
  unint64_t v863;
  _QWORD *v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  unint64_t v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  _QWORD *v874;
  _QWORD *v875;
  unint64_t v876;
  unint64_t v877;
  uint64_t v878;
  char *v879;
  char *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  unint64_t v885;
  unint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  _QWORD *v890;
  _QWORD *v891;
  unint64_t v892;
  unint64_t v893;
  uint64_t v894;
  char *v895;
  char *v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  unint64_t v901;
  _QWORD *v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  unint64_t v907;
  unint64_t v908;
  uint64_t v909;
  uint64_t v910;
  uint64_t v911;
  _QWORD *v912;
  _QWORD *v913;
  unint64_t v914;
  unint64_t v915;
  uint64_t v916;
  char *v917;
  char *v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  uint64_t v922;
  unint64_t v923;
  unint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  _QWORD *v928;
  _QWORD *v929;
  unint64_t v930;
  unint64_t v931;
  uint64_t v932;
  char *v933;
  char *v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  uint64_t v938;
  unint64_t v939;
  _QWORD *v940;
  uint64_t v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t v944;
  unint64_t v945;
  unint64_t v946;
  uint64_t v947;
  uint64_t v948;
  uint64_t v949;
  _QWORD *v950;
  _QWORD *v951;
  unint64_t v952;
  unint64_t v953;
  uint64_t v954;
  char *v955;
  char *v956;
  uint64_t v957;
  uint64_t v958;
  uint64_t v959;
  uint64_t v960;
  unint64_t v961;
  unint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  _QWORD *v966;
  _QWORD *v967;
  unint64_t v968;
  unint64_t v969;
  uint64_t v970;
  char *v971;
  char *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t v976;
  unint64_t v977;
  _QWORD *v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  unint64_t v984;
  uint64_t v985;
  uint64_t v986;
  uint64_t v987;
  _QWORD *v988;
  _QWORD *v989;
  unint64_t v990;
  unint64_t v991;
  uint64_t v992;
  char *v993;
  char *v994;
  uint64_t v995;
  uint64_t v996;
  uint64_t v997;
  uint64_t v998;
  unint64_t v999;
  unint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  _QWORD *v1004;
  _QWORD *v1005;
  unint64_t v1006;
  unint64_t v1007;
  uint64_t v1008;
  char *v1009;
  char *v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  unint64_t v1015;
  _QWORD *v1016;
  uint64_t v1017;
  uint64_t v1018;
  uint64_t v1019;
  uint64_t v1020;
  unint64_t v1021;
  unint64_t v1022;
  uint64_t v1023;
  uint64_t v1024;
  uint64_t v1025;
  _QWORD *v1026;
  _QWORD *v1027;
  unint64_t v1028;
  unint64_t v1029;
  uint64_t v1030;
  char *v1031;
  char *v1032;
  uint64_t v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  unint64_t v1037;
  unint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  _QWORD *v1042;
  _QWORD *v1043;
  unint64_t v1044;
  unint64_t v1045;
  uint64_t v1046;
  char *v1047;
  char *v1048;
  uint64_t v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  unint64_t v1053;
  _QWORD *v1054;
  uint64_t v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  _QWORD *v1064;
  _QWORD *v1065;
  unint64_t v1066;
  unint64_t v1067;
  uint64_t v1068;
  char *v1069;
  char *v1070;
  uint64_t v1071;
  uint64_t v1072;
  uint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  unint64_t v1076;
  uint64_t v1077;
  uint64_t v1078;
  uint64_t v1079;
  _QWORD *v1080;
  _QWORD *v1081;
  unint64_t v1082;
  unint64_t v1083;
  uint64_t v1084;
  char *v1085;
  char *v1086;
  uint64_t v1087;
  uint64_t v1088;
  uint64_t v1089;
  uint64_t v1090;
  unint64_t v1091;
  _QWORD *v1092;
  uint64_t v1093;
  uint64_t v1094;
  uint64_t v1095;
  uint64_t v1096;
  unint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  _QWORD *v1102;
  _QWORD *v1103;
  unint64_t v1104;
  unint64_t v1105;
  uint64_t v1106;
  char *v1107;
  char *v1108;
  uint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  uint64_t v1112;
  unint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  uint64_t v1116;
  uint64_t v1117;
  _QWORD *v1118;
  _QWORD *v1119;
  unint64_t v1120;
  unint64_t v1121;
  uint64_t v1122;
  char *v1123;
  char *v1124;
  uint64_t v1125;
  uint64_t v1126;
  uint64_t v1127;
  uint64_t v1128;
  uint64_t v1129;
  unint64_t v1130;
  float *v1131;
  float v1132;
  unint64_t *v1133;
  unint64_t v1134;
  std::__shared_weak_count *v1135;
  unint64_t *v1136;
  unint64_t v1137;
  uint64_t v1138;
  unint64_t v1139;
  int *v1140;
  unint64_t *v1148;
  unint64_t v1149;
  unint64_t *v1150;
  uint64_t v1151;
  unint64_t v1152;
  float *v1153;
  unint64_t *v1156;
  unint64_t v1157;
  std::__shared_weak_count *v1158;
  unint64_t *v1159;
  unint64_t v1160;
  unint64_t v1161;
  unint64_t v1162;
  unsigned int v1163;
  unint64_t *v1164;
  unint64_t v1165;
  unint64_t *v1166;
  uint64_t v1167;
  unint64_t v1168;
  float *v1169;
  unint64_t *v1170;
  unint64_t v1171;
  std::__shared_weak_count *v1172;
  unint64_t *v1173;
  unint64_t v1174;
  uint64_t v1175;
  unint64_t v1176;
  int *v1177;
  int v1178;
  unint64_t *v1179;
  unint64_t v1180;
  unint64_t *v1181;
  std::__shared_weak_count *v1182;
  unint64_t *v1183;
  unint64_t v1184;
  std::__shared_weak_count *v1185;
  unint64_t *v1186;
  unint64_t v1187;
  uint64_t v1188;
  unint64_t v1189;
  float *v1190;
  float v1191;
  unint64_t *v1192;
  unint64_t v1193;
  std::__shared_weak_count *v1194;
  unint64_t *v1195;
  unint64_t v1196;
  uint64_t v1197;
  unint64_t v1198;
  int *v1199;
  unint64_t *v1203;
  unint64_t v1204;
  unint64_t *v1205;
  unint64_t v1206;
  unint64_t v1207;
  int v1210;
  unint64_t *v1211;
  unint64_t v1212;
  unint64_t *v1213;
  uint64_t v1214;
  unint64_t v1215;
  int *v1216;
  unint64_t *v1219;
  unint64_t v1220;
  unint64_t *v1221;
  uint64_t v1222;
  unint64_t v1223;
  int *v1224;
  int v1227;
  unint64_t *v1228;
  unint64_t v1229;
  unint64_t *v1230;
  std::__shared_weak_count *v1231;
  unint64_t *v1232;
  unint64_t v1233;
  unint64_t *v1234;
  uint64_t v1235;
  unint64_t v1236;
  int *v1237;
  unint64_t *v1241;
  unint64_t v1242;
  unint64_t *v1243;
  unint64_t v1244;
  unint64_t v1245;
  unsigned int v1246;
  unint64_t *v1247;
  unint64_t v1248;
  unint64_t *v1249;
  uint64_t v1250;
  unint64_t v1251;
  int *v1252;
  int v1253;
  unint64_t *v1254;
  unint64_t v1255;
  unint64_t *v1256;
  std::__shared_weak_count *v1257;
  unint64_t *v1258;
  unint64_t v1259;
  unint64_t *v1260;
  unint64_t v1261;
  unint64_t v1262;
  unsigned int v1263;
  unint64_t *v1264;
  unint64_t v1265;
  unint64_t *v1266;
  uint64_t v1267;
  unint64_t v1268;
  int *v1269;
  int v1270;
  unint64_t *v1271;
  unint64_t v1272;
  unint64_t *v1273;
  std::__shared_weak_count *v1274;
  unint64_t *v1275;
  unint64_t v1276;
  unint64_t *v1277;
  uint64_t v1278;
  std::__shared_weak_count *v1279;
  void *v1280;
  void *v1281;
  void *v1282;
  void *v1283;
  char *v1284;
  uint64_t v1285;
  std::__shared_weak_count *v1286;
  void *v1287;
  char *v1288;
  void *__p;
  void *v1290;
  uint64_t v1291;
  uint64_t v1292;
  std::__shared_weak_count *v1293;
  void *v1294;
  void *v1295;
  void *v1296;
  void *v1297;
  char *v1298;
  uint64_t v1299;
  std::__shared_weak_count *v1300;
  void *v1301;
  char *v1302;
  void *v1303;
  void *v1304;
  uint64_t v1305;
  uint64_t v1306;
  std::__shared_weak_count *v1307;
  void *v1308;
  void *v1309;
  void *v1310;
  void *v1311;
  char *v1312;
  uint64_t v1313;
  std::__shared_weak_count *v1314;
  void *v1315;
  char *v1316;
  void *v1317;
  void *v1318;
  uint64_t v1319;
  uint64_t v1320;
  std::__shared_weak_count *v1321;
  void *v1322;
  void *v1323;
  void *v1324;
  void *v1325;
  char *v1326;
  uint64_t v1327;
  std::__shared_weak_count *v1328;
  char *v1329;
  char *v1330;
  char *v1331;
  char *v1332;
  uint64_t v1333;
  char v1334;
  int *v1335;
  std::__shared_weak_count *v1336;
  char *v1337;
  char *v1338;
  char *v1339;
  char *v1340;
  uint64_t v1341;

  switch(*a2)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v1306, (uint64_t)a2);
      v1312 = &v1334;
      nitro::ndarray<int>::ndarray(&v1313, &v1306);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v3 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_869;
          v4 = v1313;
          v5 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_446;
          if (!v1313)
          {
            v6 = 0;
            goto LABEL_436;
          }
          if ((unint64_t)(v5 - 8) < 8)
          {
            v6 = 1;
            v7 = (char *)v1315;
            do
            {
LABEL_435:
              v499 = *(_QWORD *)v7;
              v7 += 8;
              v6 *= v499;
            }
            while (v7 != v1316);
            goto LABEL_436;
          }
          v494 = ((unint64_t)(v5 - 8) >> 3) + 1;
          v7 = (char *)v1315 + 8 * (v494 & 0x3FFFFFFFFFFFFFFELL);
          v495 = (char *)v1315 + 8;
          v496 = 1;
          v497 = v494 & 0x3FFFFFFFFFFFFFFELL;
          v498 = 1;
          do
          {
            v496 *= *(v495 - 1);
            v498 *= *v495;
            v495 += 2;
            v497 -= 2;
          }
          while (v497);
          v6 = v498 * v496;
          if (v494 != (v494 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_435;
LABEL_436:
          v500 = v5 >> 3;
          if ((unint64_t)(v5 >> 3) <= 1)
            v500 = 1;
          if (v500 < 2)
          {
            v501 = 0;
            v502 = 0;
LABEL_443:
            v508 = v500 - v501;
            v509 = 8 * v501;
            v510 = (uint64_t *)((char *)v1317 + v509);
            v511 = (uint64_t *)((char *)v1315 + v509);
            do
            {
              v512 = *v511++;
              v513 = v512 - 1;
              v514 = *v510++;
              v502 += v514 * v513;
              --v508;
            }
            while (v508);
            goto LABEL_445;
          }
          v503 = 0;
          v504 = 0;
          v501 = v500 & 0xFFFFFFFFFFFFFFFELL;
          v505 = (char *)v1315 + 8;
          v506 = (char *)v1317 + 8;
          v507 = v500 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v503 += *(v506 - 1) * (*(v505 - 1) - 1);
            v504 += *v506 * (*v505 - 1);
            v505 += 2;
            v506 += 2;
            v507 -= 2;
          }
          while (v507);
          v502 = v504 + v503;
          if (v500 != v501)
            goto LABEL_443;
LABEL_445:
          if (v6 != v502 + 1)
LABEL_869:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_446:
          v515 = v1314;
          if (v1314)
          {
            p_shared_owners = (unint64_t *)&v1314->__shared_owners_;
            do
              v517 = __ldxr(p_shared_owners);
            while (__stxr(v517 + 1, p_shared_owners));
          }
          if (v1341)
            goto LABEL_1224;
          v518 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1225;
          v519 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_833;
          if ((unint64_t)(v518 - 8) < 8)
          {
            v519 = 1;
            v520 = v1337;
            do
            {
LABEL_832:
              v1096 = *(_QWORD *)v520;
              v520 += 8;
              v519 *= v1096;
            }
            while (v520 != v1338);
            goto LABEL_833;
          }
          v1091 = ((unint64_t)(v518 - 8) >> 3) + 1;
          v520 = &v1337[8 * (v1091 & 0x3FFFFFFFFFFFFFFELL)];
          v1092 = v1337 + 8;
          v1093 = 1;
          v1094 = v1091 & 0x3FFFFFFFFFFFFFFELL;
          v1095 = 1;
          do
          {
            v1093 *= *(v1092 - 1);
            v1095 *= *v1092;
            v1092 += 2;
            v1094 -= 2;
          }
          while (v1094);
          v519 = v1095 * v1093;
          if (v1091 != (v1091 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_832;
LABEL_833:
          v1097 = v518 >> 3;
          if ((unint64_t)(v518 >> 3) <= 1)
            v1097 = 1;
          if (v1097 < 2)
          {
            v1098 = 0;
            v1099 = 0;
LABEL_840:
            v1105 = v1097 - v1098;
            v1106 = 8 * v1098;
            v1107 = &v1339[v1106];
            v1108 = &v1337[v1106];
            do
            {
              v1109 = *(_QWORD *)v1108;
              v1108 += 8;
              v1110 = v1109 - 1;
              v1111 = *(_QWORD *)v1107;
              v1107 += 8;
              v1099 += v1111 * v1110;
              --v1105;
            }
            while (v1105);
            goto LABEL_842;
          }
          v1100 = 0;
          v1101 = 0;
          v1098 = v1097 & 0xFFFFFFFFFFFFFFFELL;
          v1102 = v1337 + 8;
          v1103 = v1339 + 8;
          v1104 = v1097 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1100 += *(v1103 - 1) * (*(v1102 - 1) - 1);
            v1101 += *v1103 * (*v1102 - 1);
            v1102 += 2;
            v1103 += 2;
            v1104 -= 2;
          }
          while (v1104);
          v1099 = v1101 + v1100;
          if (v1097 != v1098)
            goto LABEL_840;
LABEL_842:
          if (v519 != v1099 + 1)
LABEL_1224:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v1112 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v1113 = v1112 >> 3;
            if ((unint64_t)(v1112 >> 3) <= 1)
              v1113 = 1;
            if (v1113 >= 2)
            {
              v1116 = 0;
              v1117 = 0;
              v1114 = v1113 & 0xFFFFFFFFFFFFFFFELL;
              v1118 = v1337 + 8;
              v1119 = v1339 + 8;
              v1120 = v1113 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1116 += *(v1119 - 1) * (*(v1118 - 1) - 1);
                v1117 += *v1119 * (*v1118 - 1);
                v1118 += 2;
                v1119 += 2;
                v1120 -= 2;
              }
              while (v1120);
              v1115 = v1117 + v1116;
              if (v1113 == v1114)
                goto LABEL_853;
            }
            else
            {
              v1114 = 0;
              v1115 = 0;
            }
            v1121 = v1113 - v1114;
            v1122 = 8 * v1114;
            v1123 = &v1339[v1122];
            v1124 = &v1337[v1122];
            do
            {
              v1125 = *(_QWORD *)v1124;
              v1124 += 8;
              v1126 = v1125 - 1;
              v1127 = *(_QWORD *)v1123;
              v1123 += 8;
              v1115 += v1127 * v1126;
              --v1121;
            }
            while (v1121);
LABEL_853:
            v1128 = v1115 + 1;
            goto LABEL_1226;
          }
LABEL_1225:
          v1128 = 0;
LABEL_1226:
          v1267 = v1341 + v1128;
          if (v1267)
          {
            v1268 = 0;
            v1269 = v1335;
            do
            {
              v1270 = *(_DWORD *)(v4 + 4 * v1268);
              if (v1270 >= *v1269)
                v1270 = *v1269;
              *v1269++ = v1270;
              v1268 = (v1268 + 1) % v3;
              --v1267;
            }
            while (v1267);
          }
          if (v515)
          {
            v1271 = (unint64_t *)&v515->__shared_owners_;
            do
              v1272 = __ldaxr(v1271);
            while (__stlxr(v1272 - 1, v1271));
            if (!v1272)
            {
              ((void (*)(std::__shared_weak_count *))v515->__on_zero_shared)(v515);
              std::__shared_weak_count::__release_weak(v515);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (!v1336)
            goto LABEL_1245;
          v1273 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1196 = __ldaxr(v1273);
          while (__stlxr(v1196 - 1, v1273));
          goto LABEL_1243;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v84 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_868;
          v85 = v1313;
          v86 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_424;
          if (!v1313)
          {
            v87 = 0;
            goto LABEL_414;
          }
          if ((unint64_t)(v86 - 8) < 8)
          {
            v87 = 1;
            v88 = (char *)v1315;
            do
            {
LABEL_413:
              v472 = *(_QWORD *)v88;
              v88 += 8;
              v87 *= v472;
            }
            while (v88 != v1316);
            goto LABEL_414;
          }
          v467 = ((unint64_t)(v86 - 8) >> 3) + 1;
          v88 = (char *)v1315 + 8 * (v467 & 0x3FFFFFFFFFFFFFFELL);
          v468 = (char *)v1315 + 8;
          v469 = 1;
          v470 = v467 & 0x3FFFFFFFFFFFFFFELL;
          v471 = 1;
          do
          {
            v469 *= *(v468 - 1);
            v471 *= *v468;
            v468 += 2;
            v470 -= 2;
          }
          while (v470);
          v87 = v471 * v469;
          if (v467 != (v467 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_413;
LABEL_414:
          v473 = v86 >> 3;
          if ((unint64_t)(v86 >> 3) <= 1)
            v473 = 1;
          if (v473 < 2)
          {
            v474 = 0;
            v475 = 0;
LABEL_421:
            v481 = v473 - v474;
            v482 = 8 * v474;
            v483 = (uint64_t *)((char *)v1317 + v482);
            v484 = (uint64_t *)((char *)v1315 + v482);
            do
            {
              v485 = *v484++;
              v486 = v485 - 1;
              v487 = *v483++;
              v475 += v487 * v486;
              --v481;
            }
            while (v481);
            goto LABEL_423;
          }
          v476 = 0;
          v477 = 0;
          v474 = v473 & 0xFFFFFFFFFFFFFFFELL;
          v478 = (char *)v1315 + 8;
          v479 = (char *)v1317 + 8;
          v480 = v473 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v476 += *(v479 - 1) * (*(v478 - 1) - 1);
            v477 += *v479 * (*v478 - 1);
            v478 += 2;
            v479 += 2;
            v480 -= 2;
          }
          while (v480);
          v475 = v477 + v476;
          if (v473 != v474)
            goto LABEL_421;
LABEL_423:
          if (v87 != v475 + 1)
LABEL_868:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_424:
          v488 = v1314;
          if (v1314)
          {
            v489 = (unint64_t *)&v1314->__shared_owners_;
            do
              v490 = __ldxr(v489);
            while (__stxr(v490 + 1, v489));
          }
          if (v1341)
            goto LABEL_1204;
          v491 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1205;
          v492 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_808;
          if ((unint64_t)(v491 - 8) < 8)
          {
            v492 = 1;
            v493 = v1337;
            do
            {
LABEL_807:
              v1058 = *(_QWORD *)v493;
              v493 += 8;
              v492 *= v1058;
            }
            while (v493 != v1338);
            goto LABEL_808;
          }
          v1053 = ((unint64_t)(v491 - 8) >> 3) + 1;
          v493 = &v1337[8 * (v1053 & 0x3FFFFFFFFFFFFFFELL)];
          v1054 = v1337 + 8;
          v1055 = 1;
          v1056 = v1053 & 0x3FFFFFFFFFFFFFFELL;
          v1057 = 1;
          do
          {
            v1055 *= *(v1054 - 1);
            v1057 *= *v1054;
            v1054 += 2;
            v1056 -= 2;
          }
          while (v1056);
          v492 = v1057 * v1055;
          if (v1053 != (v1053 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_807;
LABEL_808:
          v1059 = v491 >> 3;
          if ((unint64_t)(v491 >> 3) <= 1)
            v1059 = 1;
          if (v1059 < 2)
          {
            v1060 = 0;
            v1061 = 0;
LABEL_815:
            v1067 = v1059 - v1060;
            v1068 = 8 * v1060;
            v1069 = &v1339[v1068];
            v1070 = &v1337[v1068];
            do
            {
              v1071 = *(_QWORD *)v1070;
              v1070 += 8;
              v1072 = v1071 - 1;
              v1073 = *(_QWORD *)v1069;
              v1069 += 8;
              v1061 += v1073 * v1072;
              --v1067;
            }
            while (v1067);
            goto LABEL_817;
          }
          v1062 = 0;
          v1063 = 0;
          v1060 = v1059 & 0xFFFFFFFFFFFFFFFELL;
          v1064 = v1337 + 8;
          v1065 = v1339 + 8;
          v1066 = v1059 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1062 += *(v1065 - 1) * (*(v1064 - 1) - 1);
            v1063 += *v1065 * (*v1064 - 1);
            v1064 += 2;
            v1065 += 2;
            v1066 -= 2;
          }
          while (v1066);
          v1061 = v1063 + v1062;
          if (v1059 != v1060)
            goto LABEL_815;
LABEL_817:
          if (v492 != v1061 + 1)
LABEL_1204:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v1074 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v1075 = v1074 >> 3;
            if ((unint64_t)(v1074 >> 3) <= 1)
              v1075 = 1;
            if (v1075 >= 2)
            {
              v1078 = 0;
              v1079 = 0;
              v1076 = v1075 & 0xFFFFFFFFFFFFFFFELL;
              v1080 = v1337 + 8;
              v1081 = v1339 + 8;
              v1082 = v1075 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1078 += *(v1081 - 1) * (*(v1080 - 1) - 1);
                v1079 += *v1081 * (*v1080 - 1);
                v1080 += 2;
                v1081 += 2;
                v1082 -= 2;
              }
              while (v1082);
              v1077 = v1079 + v1078;
              if (v1075 == v1076)
                goto LABEL_828;
            }
            else
            {
              v1076 = 0;
              v1077 = 0;
            }
            v1083 = v1075 - v1076;
            v1084 = 8 * v1076;
            v1085 = &v1339[v1084];
            v1086 = &v1337[v1084];
            do
            {
              v1087 = *(_QWORD *)v1086;
              v1086 += 8;
              v1088 = v1087 - 1;
              v1089 = *(_QWORD *)v1085;
              v1085 += 8;
              v1077 += v1089 * v1088;
              --v1083;
            }
            while (v1083);
LABEL_828:
            v1090 = v1077 + 1;
            goto LABEL_1206;
          }
LABEL_1205:
          v1090 = 0;
LABEL_1206:
          if (v1341 + v1090)
          {
            v1261 = 0;
            v1262 = 0;
            do
            {
              v1263 = *(unsigned __int8 *)(v85 + 4 * v1262);
              if (*((unsigned __int8 *)v1335 + v1261) < v1263)
                LOBYTE(v1263) = *((_BYTE *)v1335 + v1261);
              *((_BYTE *)v1335 + v1261) = v1263;
              v1262 = (v1262 + 1) % v84;
              ++v1261;
            }
            while (v1261 < v1341 + v1090);
          }
          if (v488)
          {
            v1264 = (unint64_t *)&v488->__shared_owners_;
            do
              v1265 = __ldaxr(v1264);
            while (__stlxr(v1265 - 1, v1264));
            if (!v1265)
            {
              ((void (*)(std::__shared_weak_count *))v488->__on_zero_shared)(v488);
              std::__shared_weak_count::__release_weak(v488);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (!v1336)
            goto LABEL_1245;
          v1266 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1196 = __ldaxr(v1266);
          while (__stlxr(v1196 - 1, v1266));
          goto LABEL_1243;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v50 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_860;
          v51 = v1313;
          v52 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_248;
          if (!v1313)
          {
            v53 = 0;
            goto LABEL_238;
          }
          if ((unint64_t)(v52 - 8) < 8)
          {
            v53 = 1;
            v54 = (char *)v1315;
            do
            {
LABEL_237:
              v256 = *(_QWORD *)v54;
              v54 += 8;
              v53 *= v256;
            }
            while (v54 != v1316);
            goto LABEL_238;
          }
          v251 = ((unint64_t)(v52 - 8) >> 3) + 1;
          v54 = (char *)v1315 + 8 * (v251 & 0x3FFFFFFFFFFFFFFELL);
          v252 = (char *)v1315 + 8;
          v253 = 1;
          v254 = v251 & 0x3FFFFFFFFFFFFFFELL;
          v255 = 1;
          do
          {
            v253 *= *(v252 - 1);
            v255 *= *v252;
            v252 += 2;
            v254 -= 2;
          }
          while (v254);
          v53 = v255 * v253;
          if (v251 != (v251 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_237;
LABEL_238:
          v257 = v52 >> 3;
          if ((unint64_t)(v52 >> 3) <= 1)
            v257 = 1;
          if (v257 < 2)
          {
            v258 = 0;
            v259 = 0;
LABEL_245:
            v265 = v257 - v258;
            v266 = 8 * v258;
            v267 = (uint64_t *)((char *)v1317 + v266);
            v268 = (uint64_t *)((char *)v1315 + v266);
            do
            {
              v269 = *v268++;
              v270 = v269 - 1;
              v271 = *v267++;
              v259 += v271 * v270;
              --v265;
            }
            while (v265);
            goto LABEL_247;
          }
          v260 = 0;
          v261 = 0;
          v258 = v257 & 0xFFFFFFFFFFFFFFFELL;
          v262 = (char *)v1315 + 8;
          v263 = (char *)v1317 + 8;
          v264 = v257 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v260 += *(v263 - 1) * (*(v262 - 1) - 1);
            v261 += *v263 * (*v262 - 1);
            v262 += 2;
            v263 += 2;
            v264 -= 2;
          }
          while (v264);
          v259 = v261 + v260;
          if (v257 != v258)
            goto LABEL_245;
LABEL_247:
          if (v53 != v259 + 1)
LABEL_860:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_248:
          v272 = v1314;
          if (v1314)
          {
            v273 = (unint64_t *)&v1314->__shared_owners_;
            do
              v274 = __ldxr(v273);
            while (__stxr(v274 + 1, v273));
          }
          if (v1341)
            goto LABEL_1008;
          v275 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1009;
          v276 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_608;
          if ((unint64_t)(v275 - 8) < 8)
          {
            v276 = 1;
            v277 = v1337;
            do
            {
LABEL_607:
              v754 = *(_QWORD *)v277;
              v277 += 8;
              v276 *= v754;
            }
            while (v277 != v1338);
            goto LABEL_608;
          }
          v749 = ((unint64_t)(v275 - 8) >> 3) + 1;
          v277 = &v1337[8 * (v749 & 0x3FFFFFFFFFFFFFFELL)];
          v750 = v1337 + 8;
          v751 = 1;
          v752 = v749 & 0x3FFFFFFFFFFFFFFELL;
          v753 = 1;
          do
          {
            v751 *= *(v750 - 1);
            v753 *= *v750;
            v750 += 2;
            v752 -= 2;
          }
          while (v752);
          v276 = v753 * v751;
          if (v749 != (v749 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_607;
LABEL_608:
          v755 = v275 >> 3;
          if ((unint64_t)(v275 >> 3) <= 1)
            v755 = 1;
          if (v755 < 2)
          {
            v756 = 0;
            v757 = 0;
LABEL_615:
            v763 = v755 - v756;
            v764 = 8 * v756;
            v765 = &v1339[v764];
            v766 = &v1337[v764];
            do
            {
              v767 = *(_QWORD *)v766;
              v766 += 8;
              v768 = v767 - 1;
              v769 = *(_QWORD *)v765;
              v765 += 8;
              v757 += v769 * v768;
              --v763;
            }
            while (v763);
            goto LABEL_617;
          }
          v758 = 0;
          v759 = 0;
          v756 = v755 & 0xFFFFFFFFFFFFFFFELL;
          v760 = v1337 + 8;
          v761 = v1339 + 8;
          v762 = v755 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v758 += *(v761 - 1) * (*(v760 - 1) - 1);
            v759 += *v761 * (*v760 - 1);
            v760 += 2;
            v761 += 2;
            v762 -= 2;
          }
          while (v762);
          v757 = v759 + v758;
          if (v755 != v756)
            goto LABEL_615;
LABEL_617:
          if (v276 != v757 + 1)
LABEL_1008:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v770 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v771 = v770 >> 3;
            if ((unint64_t)(v770 >> 3) <= 1)
              v771 = 1;
            if (v771 >= 2)
            {
              v774 = 0;
              v775 = 0;
              v772 = v771 & 0xFFFFFFFFFFFFFFFELL;
              v776 = v1337 + 8;
              v777 = v1339 + 8;
              v778 = v771 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v774 += *(v777 - 1) * (*(v776 - 1) - 1);
                v775 += *v777 * (*v776 - 1);
                v776 += 2;
                v777 += 2;
                v778 -= 2;
              }
              while (v778);
              v773 = v775 + v774;
              if (v771 == v772)
                goto LABEL_628;
            }
            else
            {
              v772 = 0;
              v773 = 0;
            }
            v779 = v771 - v772;
            v780 = 8 * v772;
            v781 = &v1339[v780];
            v782 = &v1337[v780];
            do
            {
              v783 = *(_QWORD *)v782;
              v782 += 8;
              v784 = v783 - 1;
              v785 = *(_QWORD *)v781;
              v781 += 8;
              v773 += v785 * v784;
              --v779;
            }
            while (v779);
LABEL_628:
            v786 = v773 + 1;
            goto LABEL_1010;
          }
LABEL_1009:
          v786 = 0;
LABEL_1010:
          v1188 = v1341 + v786;
          if (v1188)
          {
            v1189 = 0;
            v1190 = (float *)v1335;
            do
            {
              v1191 = (float)*(int *)(v51 + 4 * v1189);
              if (*v1190 <= v1191)
                v1191 = *v1190;
              *v1190++ = v1191;
              v1189 = (v1189 + 1) % v50;
              --v1188;
            }
            while (v1188);
          }
          if (v272)
          {
            v1192 = (unint64_t *)&v272->__shared_owners_;
            do
              v1193 = __ldaxr(v1192);
            while (__stlxr(v1193 - 1, v1192));
            if (!v1193)
            {
              ((void (*)(std::__shared_weak_count *))v272->__on_zero_shared)(v272);
              std::__shared_weak_count::__release_weak(v272);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (!v1336)
            goto LABEL_1245;
          v1195 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1196 = __ldaxr(v1195);
          while (__stlxr(v1196 - 1, v1195));
          goto LABEL_1243;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v74 = *(_QWORD *)v1315;
          if (v1319)
            goto LABEL_865;
          v75 = v1313;
          v76 = v1316 - (_BYTE *)v1315;
          if (v1316 == v1315)
            goto LABEL_358;
          if (!v1313)
          {
            v77 = 0;
            goto LABEL_348;
          }
          if ((unint64_t)(v76 - 8) < 8)
          {
            v77 = 1;
            v78 = (char *)v1315;
            do
            {
LABEL_347:
              v391 = *(_QWORD *)v78;
              v78 += 8;
              v77 *= v391;
            }
            while (v78 != v1316);
            goto LABEL_348;
          }
          v386 = ((unint64_t)(v76 - 8) >> 3) + 1;
          v78 = (char *)v1315 + 8 * (v386 & 0x3FFFFFFFFFFFFFFELL);
          v387 = (char *)v1315 + 8;
          v388 = 1;
          v389 = v386 & 0x3FFFFFFFFFFFFFFELL;
          v390 = 1;
          do
          {
            v388 *= *(v387 - 1);
            v390 *= *v387;
            v387 += 2;
            v389 -= 2;
          }
          while (v389);
          v77 = v390 * v388;
          if (v386 != (v386 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_347;
LABEL_348:
          v392 = v76 >> 3;
          if ((unint64_t)(v76 >> 3) <= 1)
            v392 = 1;
          if (v392 < 2)
          {
            v393 = 0;
            v394 = 0;
LABEL_355:
            v400 = v392 - v393;
            v401 = 8 * v393;
            v402 = (uint64_t *)((char *)v1317 + v401);
            v403 = (uint64_t *)((char *)v1315 + v401);
            do
            {
              v404 = *v403++;
              v405 = v404 - 1;
              v406 = *v402++;
              v394 += v406 * v405;
              --v400;
            }
            while (v400);
            goto LABEL_357;
          }
          v395 = 0;
          v396 = 0;
          v393 = v392 & 0xFFFFFFFFFFFFFFFELL;
          v397 = (char *)v1315 + 8;
          v398 = (char *)v1317 + 8;
          v399 = v392 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v395 += *(v398 - 1) * (*(v397 - 1) - 1);
            v396 += *v398 * (*v397 - 1);
            v397 += 2;
            v398 += 2;
            v399 -= 2;
          }
          while (v399);
          v394 = v396 + v395;
          if (v392 != v393)
            goto LABEL_355;
LABEL_357:
          if (v77 != v394 + 1)
LABEL_865:
            nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_358:
          v407 = v1314;
          if (v1314)
          {
            v408 = (unint64_t *)&v1314->__shared_owners_;
            do
              v409 = __ldxr(v408);
            while (__stxr(v409 + 1, v408));
          }
          if (v1341)
            goto LABEL_1126;
          v410 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1127;
          v411 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_733;
          if ((unint64_t)(v410 - 8) < 8)
          {
            v411 = 1;
            v412 = v1337;
            do
            {
LABEL_732:
              v944 = *(_QWORD *)v412;
              v412 += 8;
              v411 *= v944;
            }
            while (v412 != v1338);
            goto LABEL_733;
          }
          v939 = ((unint64_t)(v410 - 8) >> 3) + 1;
          v412 = &v1337[8 * (v939 & 0x3FFFFFFFFFFFFFFELL)];
          v940 = v1337 + 8;
          v941 = 1;
          v942 = v939 & 0x3FFFFFFFFFFFFFFELL;
          v943 = 1;
          do
          {
            v941 *= *(v940 - 1);
            v943 *= *v940;
            v940 += 2;
            v942 -= 2;
          }
          while (v942);
          v411 = v943 * v941;
          if (v939 != (v939 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_732;
LABEL_733:
          v945 = v410 >> 3;
          if ((unint64_t)(v410 >> 3) <= 1)
            v945 = 1;
          if (v945 < 2)
          {
            v946 = 0;
            v947 = 0;
LABEL_740:
            v953 = v945 - v946;
            v954 = 8 * v946;
            v955 = &v1339[v954];
            v956 = &v1337[v954];
            do
            {
              v957 = *(_QWORD *)v956;
              v956 += 8;
              v958 = v957 - 1;
              v959 = *(_QWORD *)v955;
              v955 += 8;
              v947 += v959 * v958;
              --v953;
            }
            while (v953);
            goto LABEL_742;
          }
          v948 = 0;
          v949 = 0;
          v946 = v945 & 0xFFFFFFFFFFFFFFFELL;
          v950 = v1337 + 8;
          v951 = v1339 + 8;
          v952 = v945 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v948 += *(v951 - 1) * (*(v950 - 1) - 1);
            v949 += *v951 * (*v950 - 1);
            v950 += 2;
            v951 += 2;
            v952 -= 2;
          }
          while (v952);
          v947 = v949 + v948;
          if (v945 != v946)
            goto LABEL_740;
LABEL_742:
          if (v411 != v947 + 1)
LABEL_1126:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v960 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v961 = v960 >> 3;
            if ((unint64_t)(v960 >> 3) <= 1)
              v961 = 1;
            if (v961 >= 2)
            {
              v964 = 0;
              v965 = 0;
              v962 = v961 & 0xFFFFFFFFFFFFFFFELL;
              v966 = v1337 + 8;
              v967 = v1339 + 8;
              v968 = v961 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v964 += *(v967 - 1) * (*(v966 - 1) - 1);
                v965 += *v967 * (*v966 - 1);
                v966 += 2;
                v967 += 2;
                v968 -= 2;
              }
              while (v968);
              v963 = v965 + v964;
              if (v961 == v962)
                goto LABEL_753;
            }
            else
            {
              v962 = 0;
              v963 = 0;
            }
            v969 = v961 - v962;
            v970 = 8 * v962;
            v971 = &v1339[v970];
            v972 = &v1337[v970];
            do
            {
              v973 = *(_QWORD *)v972;
              v972 += 8;
              v974 = v973 - 1;
              v975 = *(_QWORD *)v971;
              v971 += 8;
              v963 += v975 * v974;
              --v969;
            }
            while (v969);
LABEL_753:
            v976 = v963 + 1;
            goto LABEL_1128;
          }
LABEL_1127:
          v976 = 0;
LABEL_1128:
          v1235 = v1341 + v976;
          if (v1235)
          {
            v1236 = 0;
            v1237 = v1335;
            do
            {
              _S0 = (float)*(int *)(v75 + 4 * v1236);
              __asm { FCVT            H0, S0 }
              LOWORD(_S1) = *(_WORD *)v1237;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S3 <= _S2)
                _S0 = _S1;
              *(_WORD *)v1237 = LOWORD(_S0);
              v1237 = (int *)((char *)v1237 + 2);
              v1236 = (v1236 + 1) % v74;
              --v1235;
            }
            while (v1235);
          }
          if (v407)
          {
            v1241 = (unint64_t *)&v407->__shared_owners_;
            do
              v1242 = __ldaxr(v1241);
            while (__stlxr(v1242 - 1, v1241));
            if (!v1242)
            {
              ((void (*)(std::__shared_weak_count *))v407->__on_zero_shared)(v407);
              std::__shared_weak_count::__release_weak(v407);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1194 = v1336;
          if (v1336)
          {
            v1243 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1196 = __ldaxr(v1243);
            while (__stlxr(v1196 - 1, v1243));
LABEL_1243:
            if (!v1196)
            {
              ((void (*)(std::__shared_weak_count *))v1194->__on_zero_shared)(v1194);
              std::__shared_weak_count::__release_weak(v1194);
            }
          }
LABEL_1245:
          if (v1317)
          {
            v1318 = v1317;
            operator delete(v1317);
          }
          if (v1315)
          {
            v1316 = (char *)v1315;
            operator delete(v1315);
          }
          v1274 = v1314;
          if (v1314)
          {
            v1275 = (unint64_t *)&v1314->__shared_owners_;
            do
              v1276 = __ldaxr(v1275);
            while (__stlxr(v1276 - 1, v1275));
            if (!v1276)
            {
              ((void (*)(std::__shared_weak_count *))v1274->__on_zero_shared)(v1274);
              std::__shared_weak_count::__release_weak(v1274);
            }
          }
          if (v1310)
          {
            v1311 = v1310;
            operator delete(v1310);
          }
          if (v1308)
          {
            v1309 = v1308;
            operator delete(v1308);
          }
          v1185 = v1307;
          if (!v1307)
            return;
          v1277 = (unint64_t *)&v1307->__shared_owners_;
          do
            v1187 = __ldaxr(v1277);
          while (__stlxr(v1187 - 1, v1277));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1261;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1320, (uint64_t)a2);
      v1326 = &v1334;
      nitro::ndarray<unsigned char>::ndarray(&v1327, &v1320);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v18 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_867;
          v19 = v1327;
          v20 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_402;
          if (!v1327)
          {
            v21 = 0;
            goto LABEL_392;
          }
          if ((unint64_t)(v20 - 8) < 8)
          {
            v21 = 1;
            v22 = v1329;
            do
            {
LABEL_391:
              v445 = *(_QWORD *)v22;
              v22 += 8;
              v21 *= v445;
            }
            while (v22 != v1330);
            goto LABEL_392;
          }
          v440 = ((unint64_t)(v20 - 8) >> 3) + 1;
          v22 = &v1329[8 * (v440 & 0x3FFFFFFFFFFFFFFELL)];
          v441 = v1329 + 8;
          v442 = 1;
          v443 = v440 & 0x3FFFFFFFFFFFFFFELL;
          v444 = 1;
          do
          {
            v442 *= *(v441 - 1);
            v444 *= *v441;
            v441 += 2;
            v443 -= 2;
          }
          while (v443);
          v21 = v444 * v442;
          if (v440 != (v440 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_391;
LABEL_392:
          v446 = v20 >> 3;
          if ((unint64_t)(v20 >> 3) <= 1)
            v446 = 1;
          if (v446 < 2)
          {
            v447 = 0;
            v448 = 0;
LABEL_399:
            v454 = v446 - v447;
            v455 = 8 * v447;
            v456 = &v1331[v455];
            v457 = &v1329[v455];
            do
            {
              v458 = *(_QWORD *)v457;
              v457 += 8;
              v459 = v458 - 1;
              v460 = *(_QWORD *)v456;
              v456 += 8;
              v448 += v460 * v459;
              --v454;
            }
            while (v454);
            goto LABEL_401;
          }
          v449 = 0;
          v450 = 0;
          v447 = v446 & 0xFFFFFFFFFFFFFFFELL;
          v451 = v1329 + 8;
          v452 = v1331 + 8;
          v453 = v446 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v449 += *(v452 - 1) * (*(v451 - 1) - 1);
            v450 += *v452 * (*v451 - 1);
            v451 += 2;
            v452 += 2;
            v453 -= 2;
          }
          while (v453);
          v448 = v450 + v449;
          if (v446 != v447)
            goto LABEL_399;
LABEL_401:
          if (v21 != v448 + 1)
LABEL_867:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_402:
          v461 = v1328;
          if (v1328)
          {
            v462 = (unint64_t *)&v1328->__shared_owners_;
            do
              v463 = __ldxr(v462);
            while (__stxr(v463 + 1, v462));
          }
          if (v1341)
            goto LABEL_1166;
          v464 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1167;
          v465 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_783;
          if ((unint64_t)(v464 - 8) < 8)
          {
            v465 = 1;
            v466 = v1337;
            do
            {
LABEL_782:
              v1020 = *(_QWORD *)v466;
              v466 += 8;
              v465 *= v1020;
            }
            while (v466 != v1338);
            goto LABEL_783;
          }
          v1015 = ((unint64_t)(v464 - 8) >> 3) + 1;
          v466 = &v1337[8 * (v1015 & 0x3FFFFFFFFFFFFFFELL)];
          v1016 = v1337 + 8;
          v1017 = 1;
          v1018 = v1015 & 0x3FFFFFFFFFFFFFFELL;
          v1019 = 1;
          do
          {
            v1017 *= *(v1016 - 1);
            v1019 *= *v1016;
            v1016 += 2;
            v1018 -= 2;
          }
          while (v1018);
          v465 = v1019 * v1017;
          if (v1015 != (v1015 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_782;
LABEL_783:
          v1021 = v464 >> 3;
          if ((unint64_t)(v464 >> 3) <= 1)
            v1021 = 1;
          if (v1021 < 2)
          {
            v1022 = 0;
            v1023 = 0;
LABEL_790:
            v1029 = v1021 - v1022;
            v1030 = 8 * v1022;
            v1031 = &v1339[v1030];
            v1032 = &v1337[v1030];
            do
            {
              v1033 = *(_QWORD *)v1032;
              v1032 += 8;
              v1034 = v1033 - 1;
              v1035 = *(_QWORD *)v1031;
              v1031 += 8;
              v1023 += v1035 * v1034;
              --v1029;
            }
            while (v1029);
            goto LABEL_792;
          }
          v1024 = 0;
          v1025 = 0;
          v1022 = v1021 & 0xFFFFFFFFFFFFFFFELL;
          v1026 = v1337 + 8;
          v1027 = v1339 + 8;
          v1028 = v1021 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v1024 += *(v1027 - 1) * (*(v1026 - 1) - 1);
            v1025 += *v1027 * (*v1026 - 1);
            v1026 += 2;
            v1027 += 2;
            v1028 -= 2;
          }
          while (v1028);
          v1023 = v1025 + v1024;
          if (v1021 != v1022)
            goto LABEL_790;
LABEL_792:
          if (v465 != v1023 + 1)
LABEL_1166:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v1036 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v1037 = v1036 >> 3;
            if ((unint64_t)(v1036 >> 3) <= 1)
              v1037 = 1;
            if (v1037 >= 2)
            {
              v1040 = 0;
              v1041 = 0;
              v1038 = v1037 & 0xFFFFFFFFFFFFFFFELL;
              v1042 = v1337 + 8;
              v1043 = v1339 + 8;
              v1044 = v1037 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1040 += *(v1043 - 1) * (*(v1042 - 1) - 1);
                v1041 += *v1043 * (*v1042 - 1);
                v1042 += 2;
                v1043 += 2;
                v1044 -= 2;
              }
              while (v1044);
              v1039 = v1041 + v1040;
              if (v1037 == v1038)
                goto LABEL_803;
            }
            else
            {
              v1038 = 0;
              v1039 = 0;
            }
            v1045 = v1037 - v1038;
            v1046 = 8 * v1038;
            v1047 = &v1339[v1046];
            v1048 = &v1337[v1046];
            do
            {
              v1049 = *(_QWORD *)v1048;
              v1048 += 8;
              v1050 = v1049 - 1;
              v1051 = *(_QWORD *)v1047;
              v1047 += 8;
              v1039 += v1051 * v1050;
              --v1045;
            }
            while (v1045);
LABEL_803:
            v1052 = v1039 + 1;
            goto LABEL_1168;
          }
LABEL_1167:
          v1052 = 0;
LABEL_1168:
          v1250 = v1341 + v1052;
          if (v1250)
          {
            v1251 = 0;
            v1252 = v1335;
            do
            {
              v1253 = *(unsigned __int8 *)(v19 + v1251);
              if (*v1252 < v1253)
                v1253 = *v1252;
              *v1252++ = v1253;
              v1251 = (v1251 + 1) % v18;
              --v1250;
            }
            while (v1250);
          }
          if (v461)
          {
            v1254 = (unint64_t *)&v461->__shared_owners_;
            do
              v1255 = __ldaxr(v1254);
            while (__stlxr(v1255 - 1, v1254));
            if (!v1255)
            {
              ((void (*)(std::__shared_weak_count *))v461->__on_zero_shared)(v461);
              std::__shared_weak_count::__release_weak(v461);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (!v1336)
            goto LABEL_1187;
          v1256 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1174 = __ldaxr(v1256);
          while (__stlxr(v1174 - 1, v1256));
          goto LABEL_1185;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v79 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_866;
          v80 = v1327;
          v81 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_380;
          if (!v1327)
          {
            v82 = 0;
            goto LABEL_370;
          }
          if ((unint64_t)(v81 - 8) < 8)
          {
            v82 = 1;
            v83 = v1329;
            do
            {
LABEL_369:
              v418 = *(_QWORD *)v83;
              v83 += 8;
              v82 *= v418;
            }
            while (v83 != v1330);
            goto LABEL_370;
          }
          v413 = ((unint64_t)(v81 - 8) >> 3) + 1;
          v83 = &v1329[8 * (v413 & 0x3FFFFFFFFFFFFFFELL)];
          v414 = v1329 + 8;
          v415 = 1;
          v416 = v413 & 0x3FFFFFFFFFFFFFFELL;
          v417 = 1;
          do
          {
            v415 *= *(v414 - 1);
            v417 *= *v414;
            v414 += 2;
            v416 -= 2;
          }
          while (v416);
          v82 = v417 * v415;
          if (v413 != (v413 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_369;
LABEL_370:
          v419 = v81 >> 3;
          if ((unint64_t)(v81 >> 3) <= 1)
            v419 = 1;
          if (v419 < 2)
          {
            v420 = 0;
            v421 = 0;
LABEL_377:
            v427 = v419 - v420;
            v428 = 8 * v420;
            v429 = &v1331[v428];
            v430 = &v1329[v428];
            do
            {
              v431 = *(_QWORD *)v430;
              v430 += 8;
              v432 = v431 - 1;
              v433 = *(_QWORD *)v429;
              v429 += 8;
              v421 += v433 * v432;
              --v427;
            }
            while (v427);
            goto LABEL_379;
          }
          v422 = 0;
          v423 = 0;
          v420 = v419 & 0xFFFFFFFFFFFFFFFELL;
          v424 = v1329 + 8;
          v425 = v1331 + 8;
          v426 = v419 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v422 += *(v425 - 1) * (*(v424 - 1) - 1);
            v423 += *v425 * (*v424 - 1);
            v424 += 2;
            v425 += 2;
            v426 -= 2;
          }
          while (v426);
          v421 = v423 + v422;
          if (v419 != v420)
            goto LABEL_377;
LABEL_379:
          if (v82 != v421 + 1)
LABEL_866:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_380:
          v434 = v1328;
          if (v1328)
          {
            v435 = (unint64_t *)&v1328->__shared_owners_;
            do
              v436 = __ldxr(v435);
            while (__stxr(v436 + 1, v435));
          }
          if (v1341)
            goto LABEL_1146;
          v437 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1147;
          v438 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_758;
          if ((unint64_t)(v437 - 8) < 8)
          {
            v438 = 1;
            v439 = v1337;
            do
            {
LABEL_757:
              v982 = *(_QWORD *)v439;
              v439 += 8;
              v438 *= v982;
            }
            while (v439 != v1338);
            goto LABEL_758;
          }
          v977 = ((unint64_t)(v437 - 8) >> 3) + 1;
          v439 = &v1337[8 * (v977 & 0x3FFFFFFFFFFFFFFELL)];
          v978 = v1337 + 8;
          v979 = 1;
          v980 = v977 & 0x3FFFFFFFFFFFFFFELL;
          v981 = 1;
          do
          {
            v979 *= *(v978 - 1);
            v981 *= *v978;
            v978 += 2;
            v980 -= 2;
          }
          while (v980);
          v438 = v981 * v979;
          if (v977 != (v977 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_757;
LABEL_758:
          v983 = v437 >> 3;
          if ((unint64_t)(v437 >> 3) <= 1)
            v983 = 1;
          if (v983 < 2)
          {
            v984 = 0;
            v985 = 0;
LABEL_765:
            v991 = v983 - v984;
            v992 = 8 * v984;
            v993 = &v1339[v992];
            v994 = &v1337[v992];
            do
            {
              v995 = *(_QWORD *)v994;
              v994 += 8;
              v996 = v995 - 1;
              v997 = *(_QWORD *)v993;
              v993 += 8;
              v985 += v997 * v996;
              --v991;
            }
            while (v991);
            goto LABEL_767;
          }
          v986 = 0;
          v987 = 0;
          v984 = v983 & 0xFFFFFFFFFFFFFFFELL;
          v988 = v1337 + 8;
          v989 = v1339 + 8;
          v990 = v983 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v986 += *(v989 - 1) * (*(v988 - 1) - 1);
            v987 += *v989 * (*v988 - 1);
            v988 += 2;
            v989 += 2;
            v990 -= 2;
          }
          while (v990);
          v985 = v987 + v986;
          if (v983 != v984)
            goto LABEL_765;
LABEL_767:
          if (v438 != v985 + 1)
LABEL_1146:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v998 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v999 = v998 >> 3;
            if ((unint64_t)(v998 >> 3) <= 1)
              v999 = 1;
            if (v999 >= 2)
            {
              v1002 = 0;
              v1003 = 0;
              v1000 = v999 & 0xFFFFFFFFFFFFFFFELL;
              v1004 = v1337 + 8;
              v1005 = v1339 + 8;
              v1006 = v999 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v1002 += *(v1005 - 1) * (*(v1004 - 1) - 1);
                v1003 += *v1005 * (*v1004 - 1);
                v1004 += 2;
                v1005 += 2;
                v1006 -= 2;
              }
              while (v1006);
              v1001 = v1003 + v1002;
              if (v999 == v1000)
                goto LABEL_778;
            }
            else
            {
              v1000 = 0;
              v1001 = 0;
            }
            v1007 = v999 - v1000;
            v1008 = 8 * v1000;
            v1009 = &v1339[v1008];
            v1010 = &v1337[v1008];
            do
            {
              v1011 = *(_QWORD *)v1010;
              v1010 += 8;
              v1012 = v1011 - 1;
              v1013 = *(_QWORD *)v1009;
              v1009 += 8;
              v1001 += v1013 * v1012;
              --v1007;
            }
            while (v1007);
LABEL_778:
            v1014 = v1001 + 1;
            goto LABEL_1148;
          }
LABEL_1147:
          v1014 = 0;
LABEL_1148:
          if (v1341 + v1014)
          {
            v1244 = 0;
            v1245 = 0;
            do
            {
              v1246 = *(unsigned __int8 *)(v80 + v1245);
              if (v1246 >= *((unsigned __int8 *)v1335 + v1244))
                LOBYTE(v1246) = *((_BYTE *)v1335 + v1244);
              *((_BYTE *)v1335 + v1244) = v1246;
              v1245 = (v1245 + 1) % v79;
              ++v1244;
            }
            while (v1244 < v1341 + v1014);
          }
          if (v434)
          {
            v1247 = (unint64_t *)&v434->__shared_owners_;
            do
              v1248 = __ldaxr(v1247);
            while (__stlxr(v1248 - 1, v1247));
            if (!v1248)
            {
              ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
              std::__shared_weak_count::__release_weak(v434);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (!v1336)
            goto LABEL_1187;
          v1249 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1174 = __ldaxr(v1249);
          while (__stlxr(v1174 - 1, v1249));
          goto LABEL_1185;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v45 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_858;
          v46 = v1327;
          v47 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_204;
          if (!v1327)
          {
            v48 = 0;
            goto LABEL_194;
          }
          if ((unint64_t)(v47 - 8) < 8)
          {
            v48 = 1;
            v49 = v1329;
            do
            {
LABEL_193:
              v202 = *(_QWORD *)v49;
              v49 += 8;
              v48 *= v202;
            }
            while (v49 != v1330);
            goto LABEL_194;
          }
          v197 = ((unint64_t)(v47 - 8) >> 3) + 1;
          v49 = &v1329[8 * (v197 & 0x3FFFFFFFFFFFFFFELL)];
          v198 = v1329 + 8;
          v199 = 1;
          v200 = v197 & 0x3FFFFFFFFFFFFFFELL;
          v201 = 1;
          do
          {
            v199 *= *(v198 - 1);
            v201 *= *v198;
            v198 += 2;
            v200 -= 2;
          }
          while (v200);
          v48 = v201 * v199;
          if (v197 != (v197 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_193;
LABEL_194:
          v203 = v47 >> 3;
          if ((unint64_t)(v47 >> 3) <= 1)
            v203 = 1;
          if (v203 < 2)
          {
            v204 = 0;
            v205 = 0;
LABEL_201:
            v211 = v203 - v204;
            v212 = 8 * v204;
            v213 = &v1331[v212];
            v214 = &v1329[v212];
            do
            {
              v215 = *(_QWORD *)v214;
              v214 += 8;
              v216 = v215 - 1;
              v217 = *(_QWORD *)v213;
              v213 += 8;
              v205 += v217 * v216;
              --v211;
            }
            while (v211);
            goto LABEL_203;
          }
          v206 = 0;
          v207 = 0;
          v204 = v203 & 0xFFFFFFFFFFFFFFFELL;
          v208 = v1329 + 8;
          v209 = v1331 + 8;
          v210 = v203 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v206 += *(v209 - 1) * (*(v208 - 1) - 1);
            v207 += *v209 * (*v208 - 1);
            v208 += 2;
            v209 += 2;
            v210 -= 2;
          }
          while (v210);
          v205 = v207 + v206;
          if (v203 != v204)
            goto LABEL_201;
LABEL_203:
          if (v48 != v205 + 1)
LABEL_858:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_204:
          v218 = v1328;
          if (v1328)
          {
            v219 = (unint64_t *)&v1328->__shared_owners_;
            do
              v220 = __ldxr(v219);
            while (__stxr(v220 + 1, v219));
          }
          if (v1341)
            goto LABEL_950;
          v221 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_951;
          v222 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_558;
          if ((unint64_t)(v221 - 8) < 8)
          {
            v222 = 1;
            v223 = v1337;
            do
            {
LABEL_557:
              v678 = *(_QWORD *)v223;
              v223 += 8;
              v222 *= v678;
            }
            while (v223 != v1338);
            goto LABEL_558;
          }
          v673 = ((unint64_t)(v221 - 8) >> 3) + 1;
          v223 = &v1337[8 * (v673 & 0x3FFFFFFFFFFFFFFELL)];
          v674 = v1337 + 8;
          v675 = 1;
          v676 = v673 & 0x3FFFFFFFFFFFFFFELL;
          v677 = 1;
          do
          {
            v675 *= *(v674 - 1);
            v677 *= *v674;
            v674 += 2;
            v676 -= 2;
          }
          while (v676);
          v222 = v677 * v675;
          if (v673 != (v673 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_557;
LABEL_558:
          v679 = v221 >> 3;
          if ((unint64_t)(v221 >> 3) <= 1)
            v679 = 1;
          if (v679 < 2)
          {
            v680 = 0;
            v681 = 0;
LABEL_565:
            v687 = v679 - v680;
            v688 = 8 * v680;
            v689 = &v1339[v688];
            v690 = &v1337[v688];
            do
            {
              v691 = *(_QWORD *)v690;
              v690 += 8;
              v692 = v691 - 1;
              v693 = *(_QWORD *)v689;
              v689 += 8;
              v681 += v693 * v692;
              --v687;
            }
            while (v687);
            goto LABEL_567;
          }
          v682 = 0;
          v683 = 0;
          v680 = v679 & 0xFFFFFFFFFFFFFFFELL;
          v684 = v1337 + 8;
          v685 = v1339 + 8;
          v686 = v679 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v682 += *(v685 - 1) * (*(v684 - 1) - 1);
            v683 += *v685 * (*v684 - 1);
            v684 += 2;
            v685 += 2;
            v686 -= 2;
          }
          while (v686);
          v681 = v683 + v682;
          if (v679 != v680)
            goto LABEL_565;
LABEL_567:
          if (v222 != v681 + 1)
LABEL_950:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v694 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v695 = v694 >> 3;
            if ((unint64_t)(v694 >> 3) <= 1)
              v695 = 1;
            if (v695 >= 2)
            {
              v698 = 0;
              v699 = 0;
              v696 = v695 & 0xFFFFFFFFFFFFFFFELL;
              v700 = v1337 + 8;
              v701 = v1339 + 8;
              v702 = v695 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v698 += *(v701 - 1) * (*(v700 - 1) - 1);
                v699 += *v701 * (*v700 - 1);
                v700 += 2;
                v701 += 2;
                v702 -= 2;
              }
              while (v702);
              v697 = v699 + v698;
              if (v695 == v696)
                goto LABEL_578;
            }
            else
            {
              v696 = 0;
              v697 = 0;
            }
            v703 = v695 - v696;
            v704 = 8 * v696;
            v705 = &v1339[v704];
            v706 = &v1337[v704];
            do
            {
              v707 = *(_QWORD *)v706;
              v706 += 8;
              v708 = v707 - 1;
              v709 = *(_QWORD *)v705;
              v705 += 8;
              v697 += v709 * v708;
              --v703;
            }
            while (v703);
LABEL_578:
            v710 = v697 + 1;
            goto LABEL_952;
          }
LABEL_951:
          v710 = 0;
LABEL_952:
          v1167 = v1341 + v710;
          if (v1167)
          {
            v1168 = 0;
            v1169 = (float *)v1335;
            do
            {
              LOBYTE(v44) = *(_BYTE *)(v46 + v1168);
              v44 = (float)LODWORD(v44);
              if (*v1169 <= v44)
                v44 = *v1169;
              *v1169++ = v44;
              v1168 = (v1168 + 1) % v45;
              --v1167;
            }
            while (v1167);
          }
          if (v218)
          {
            v1170 = (unint64_t *)&v218->__shared_owners_;
            do
              v1171 = __ldaxr(v1170);
            while (__stlxr(v1171 - 1, v1170));
            if (!v1171)
            {
              ((void (*)(std::__shared_weak_count *))v218->__on_zero_shared)(v218);
              std::__shared_weak_count::__release_weak(v218);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (!v1336)
            goto LABEL_1187;
          v1173 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1174 = __ldaxr(v1173);
          while (__stlxr(v1174 - 1, v1173));
          goto LABEL_1185;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v68 = *(_QWORD *)v1329;
          if (v1333)
            goto LABEL_863;
          v69 = v1327;
          v70 = v1330 - v1329;
          if (v1330 == v1329)
            goto LABEL_314;
          if (!v1327)
          {
            v71 = 0;
            goto LABEL_304;
          }
          if ((unint64_t)(v70 - 8) < 8)
          {
            v71 = 1;
            v72 = v1329;
            do
            {
LABEL_303:
              v337 = *(_QWORD *)v72;
              v72 += 8;
              v71 *= v337;
            }
            while (v72 != v1330);
            goto LABEL_304;
          }
          v332 = ((unint64_t)(v70 - 8) >> 3) + 1;
          v72 = &v1329[8 * (v332 & 0x3FFFFFFFFFFFFFFELL)];
          v333 = v1329 + 8;
          v334 = 1;
          v335 = v332 & 0x3FFFFFFFFFFFFFFELL;
          v336 = 1;
          do
          {
            v334 *= *(v333 - 1);
            v336 *= *v333;
            v333 += 2;
            v335 -= 2;
          }
          while (v335);
          v71 = v336 * v334;
          if (v332 != (v332 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_303;
LABEL_304:
          v338 = v70 >> 3;
          if ((unint64_t)(v70 >> 3) <= 1)
            v338 = 1;
          if (v338 < 2)
          {
            v339 = 0;
            v340 = 0;
LABEL_311:
            v346 = v338 - v339;
            v347 = 8 * v339;
            v348 = &v1331[v347];
            v349 = &v1329[v347];
            do
            {
              v350 = *(_QWORD *)v349;
              v349 += 8;
              v351 = v350 - 1;
              v352 = *(_QWORD *)v348;
              v348 += 8;
              v340 += v352 * v351;
              --v346;
            }
            while (v346);
            goto LABEL_313;
          }
          v341 = 0;
          v342 = 0;
          v339 = v338 & 0xFFFFFFFFFFFFFFFELL;
          v343 = v1329 + 8;
          v344 = v1331 + 8;
          v345 = v338 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v341 += *(v344 - 1) * (*(v343 - 1) - 1);
            v342 += *v344 * (*v343 - 1);
            v343 += 2;
            v344 += 2;
            v345 -= 2;
          }
          while (v345);
          v340 = v342 + v341;
          if (v338 != v339)
            goto LABEL_311;
LABEL_313:
          if (v71 != v340 + 1)
LABEL_863:
            nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_314:
          v353 = v1328;
          if (v1328)
          {
            v354 = (unint64_t *)&v1328->__shared_owners_;
            do
              v355 = __ldxr(v354);
            while (__stxr(v355 + 1, v354));
          }
          if (v1341)
            goto LABEL_1068;
          v356 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1069;
          v357 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_683;
          if ((unint64_t)(v356 - 8) < 8)
          {
            v357 = 1;
            v358 = v1337;
            do
            {
LABEL_682:
              v868 = *(_QWORD *)v358;
              v358 += 8;
              v357 *= v868;
            }
            while (v358 != v1338);
            goto LABEL_683;
          }
          v863 = ((unint64_t)(v356 - 8) >> 3) + 1;
          v358 = &v1337[8 * (v863 & 0x3FFFFFFFFFFFFFFELL)];
          v864 = v1337 + 8;
          v865 = 1;
          v866 = v863 & 0x3FFFFFFFFFFFFFFELL;
          v867 = 1;
          do
          {
            v865 *= *(v864 - 1);
            v867 *= *v864;
            v864 += 2;
            v866 -= 2;
          }
          while (v866);
          v357 = v867 * v865;
          if (v863 != (v863 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_682;
LABEL_683:
          v869 = v356 >> 3;
          if ((unint64_t)(v356 >> 3) <= 1)
            v869 = 1;
          if (v869 < 2)
          {
            v870 = 0;
            v871 = 0;
LABEL_690:
            v877 = v869 - v870;
            v878 = 8 * v870;
            v879 = &v1339[v878];
            v880 = &v1337[v878];
            do
            {
              v881 = *(_QWORD *)v880;
              v880 += 8;
              v882 = v881 - 1;
              v883 = *(_QWORD *)v879;
              v879 += 8;
              v871 += v883 * v882;
              --v877;
            }
            while (v877);
            goto LABEL_692;
          }
          v872 = 0;
          v873 = 0;
          v870 = v869 & 0xFFFFFFFFFFFFFFFELL;
          v874 = v1337 + 8;
          v875 = v1339 + 8;
          v876 = v869 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v872 += *(v875 - 1) * (*(v874 - 1) - 1);
            v873 += *v875 * (*v874 - 1);
            v874 += 2;
            v875 += 2;
            v876 -= 2;
          }
          while (v876);
          v871 = v873 + v872;
          if (v869 != v870)
            goto LABEL_690;
LABEL_692:
          if (v357 != v871 + 1)
LABEL_1068:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v884 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v885 = v884 >> 3;
            if ((unint64_t)(v884 >> 3) <= 1)
              v885 = 1;
            if (v885 >= 2)
            {
              v888 = 0;
              v889 = 0;
              v886 = v885 & 0xFFFFFFFFFFFFFFFELL;
              v890 = v1337 + 8;
              v891 = v1339 + 8;
              v892 = v885 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v888 += *(v891 - 1) * (*(v890 - 1) - 1);
                v889 += *v891 * (*v890 - 1);
                v890 += 2;
                v891 += 2;
                v892 -= 2;
              }
              while (v892);
              v887 = v889 + v888;
              if (v885 == v886)
                goto LABEL_703;
            }
            else
            {
              v886 = 0;
              v887 = 0;
            }
            v893 = v885 - v886;
            v894 = 8 * v886;
            v895 = &v1339[v894];
            v896 = &v1337[v894];
            do
            {
              v897 = *(_QWORD *)v896;
              v896 += 8;
              v898 = v897 - 1;
              v899 = *(_QWORD *)v895;
              v895 += 8;
              v887 += v899 * v898;
              --v893;
            }
            while (v893);
LABEL_703:
            v900 = v887 + 1;
            goto LABEL_1070;
          }
LABEL_1069:
          v900 = 0;
LABEL_1070:
          v1214 = v1341 + v900;
          if (v1214)
          {
            v1215 = 0;
            v1216 = v1335;
            do
            {
              LOBYTE(_S0) = *(_BYTE *)(v69 + v1215);
              _S0 = (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              LOWORD(_S1) = *(_WORD *)v1216;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S3 <= _S2)
                _S0 = _S1;
              *(_WORD *)v1216 = LOWORD(_S0);
              v1216 = (int *)((char *)v1216 + 2);
              v1215 = (v1215 + 1) % v68;
              --v1214;
            }
            while (v1214);
          }
          if (v353)
          {
            v1219 = (unint64_t *)&v353->__shared_owners_;
            do
              v1220 = __ldaxr(v1219);
            while (__stlxr(v1220 - 1, v1219));
            if (!v1220)
            {
              ((void (*)(std::__shared_weak_count *))v353->__on_zero_shared)(v353);
              std::__shared_weak_count::__release_weak(v353);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1172 = v1336;
          if (v1336)
          {
            v1221 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1174 = __ldaxr(v1221);
            while (__stlxr(v1174 - 1, v1221));
LABEL_1185:
            if (!v1174)
            {
              ((void (*)(std::__shared_weak_count *))v1172->__on_zero_shared)(v1172);
              std::__shared_weak_count::__release_weak(v1172);
            }
          }
LABEL_1187:
          if (v1331)
          {
            v1332 = v1331;
            operator delete(v1331);
          }
          if (v1329)
          {
            v1330 = v1329;
            operator delete(v1329);
          }
          v1257 = v1328;
          if (v1328)
          {
            v1258 = (unint64_t *)&v1328->__shared_owners_;
            do
              v1259 = __ldaxr(v1258);
            while (__stlxr(v1259 - 1, v1258));
            if (!v1259)
            {
              ((void (*)(std::__shared_weak_count *))v1257->__on_zero_shared)(v1257);
              std::__shared_weak_count::__release_weak(v1257);
            }
          }
          if (v1324)
          {
            v1325 = v1324;
            operator delete(v1324);
          }
          if (v1322)
          {
            v1323 = v1322;
            operator delete(v1322);
          }
          v1185 = v1321;
          if (!v1321)
            return;
          v1260 = (unint64_t *)&v1321->__shared_owners_;
          do
            v1187 = __ldaxr(v1260);
          while (__stlxr(v1187 - 1, v1260));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1261;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v1278, (uint64_t)a2);
      v1284 = &v1334;
      nitro::ndarray<float>::ndarray(&v1285, &v1278);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v8 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_859;
          v9 = v1285;
          v10 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_226;
          if (!v1285)
          {
            v11 = 0;
            goto LABEL_216;
          }
          if ((unint64_t)(v10 - 8) < 8)
          {
            v11 = 1;
            v12 = (char *)v1287;
            do
            {
LABEL_215:
              v229 = *(_QWORD *)v12;
              v12 += 8;
              v11 *= v229;
            }
            while (v12 != v1288);
            goto LABEL_216;
          }
          v224 = ((unint64_t)(v10 - 8) >> 3) + 1;
          v12 = (char *)v1287 + 8 * (v224 & 0x3FFFFFFFFFFFFFFELL);
          v225 = (char *)v1287 + 8;
          v226 = 1;
          v227 = v224 & 0x3FFFFFFFFFFFFFFELL;
          v228 = 1;
          do
          {
            v226 *= *(v225 - 1);
            v228 *= *v225;
            v225 += 2;
            v227 -= 2;
          }
          while (v227);
          v11 = v228 * v226;
          if (v224 != (v224 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_215;
LABEL_216:
          v230 = v10 >> 3;
          if ((unint64_t)(v10 >> 3) <= 1)
            v230 = 1;
          if (v230 < 2)
          {
            v231 = 0;
            v232 = 0;
LABEL_223:
            v238 = v230 - v231;
            v239 = 8 * v231;
            v240 = (uint64_t *)((char *)__p + v239);
            v241 = (uint64_t *)((char *)v1287 + v239);
            do
            {
              v242 = *v241++;
              v243 = v242 - 1;
              v244 = *v240++;
              v232 += v244 * v243;
              --v238;
            }
            while (v238);
            goto LABEL_225;
          }
          v233 = 0;
          v234 = 0;
          v231 = v230 & 0xFFFFFFFFFFFFFFFELL;
          v235 = (char *)v1287 + 8;
          v236 = (char *)__p + 8;
          v237 = v230 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v233 += *(v236 - 1) * (*(v235 - 1) - 1);
            v234 += *v236 * (*v235 - 1);
            v235 += 2;
            v236 += 2;
            v237 -= 2;
          }
          while (v237);
          v232 = v234 + v233;
          if (v230 != v231)
            goto LABEL_223;
LABEL_225:
          if (v11 != v232 + 1)
LABEL_859:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_226:
          v245 = v1286;
          if (v1286)
          {
            v246 = (unint64_t *)&v1286->__shared_owners_;
            do
              v247 = __ldxr(v246);
            while (__stxr(v247 + 1, v246));
          }
          if (v1341)
            goto LABEL_970;
          v248 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_971;
          v249 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_583;
          if ((unint64_t)(v248 - 8) < 8)
          {
            v249 = 1;
            v250 = v1337;
            do
            {
LABEL_582:
              v716 = *(_QWORD *)v250;
              v250 += 8;
              v249 *= v716;
            }
            while (v250 != v1338);
            goto LABEL_583;
          }
          v711 = ((unint64_t)(v248 - 8) >> 3) + 1;
          v250 = &v1337[8 * (v711 & 0x3FFFFFFFFFFFFFFELL)];
          v712 = v1337 + 8;
          v713 = 1;
          v714 = v711 & 0x3FFFFFFFFFFFFFFELL;
          v715 = 1;
          do
          {
            v713 *= *(v712 - 1);
            v715 *= *v712;
            v712 += 2;
            v714 -= 2;
          }
          while (v714);
          v249 = v715 * v713;
          if (v711 != (v711 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_582;
LABEL_583:
          v717 = v248 >> 3;
          if ((unint64_t)(v248 >> 3) <= 1)
            v717 = 1;
          if (v717 < 2)
          {
            v718 = 0;
            v719 = 0;
LABEL_590:
            v725 = v717 - v718;
            v726 = 8 * v718;
            v727 = &v1339[v726];
            v728 = &v1337[v726];
            do
            {
              v729 = *(_QWORD *)v728;
              v728 += 8;
              v730 = v729 - 1;
              v731 = *(_QWORD *)v727;
              v727 += 8;
              v719 += v731 * v730;
              --v725;
            }
            while (v725);
            goto LABEL_592;
          }
          v720 = 0;
          v721 = 0;
          v718 = v717 & 0xFFFFFFFFFFFFFFFELL;
          v722 = v1337 + 8;
          v723 = v1339 + 8;
          v724 = v717 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v720 += *(v723 - 1) * (*(v722 - 1) - 1);
            v721 += *v723 * (*v722 - 1);
            v722 += 2;
            v723 += 2;
            v724 -= 2;
          }
          while (v724);
          v719 = v721 + v720;
          if (v717 != v718)
            goto LABEL_590;
LABEL_592:
          if (v249 != v719 + 1)
LABEL_970:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v732 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v733 = v732 >> 3;
            if ((unint64_t)(v732 >> 3) <= 1)
              v733 = 1;
            if (v733 >= 2)
            {
              v736 = 0;
              v737 = 0;
              v734 = v733 & 0xFFFFFFFFFFFFFFFELL;
              v738 = v1337 + 8;
              v739 = v1339 + 8;
              v740 = v733 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v736 += *(v739 - 1) * (*(v738 - 1) - 1);
                v737 += *v739 * (*v738 - 1);
                v738 += 2;
                v739 += 2;
                v740 -= 2;
              }
              while (v740);
              v735 = v737 + v736;
              if (v733 == v734)
                goto LABEL_603;
            }
            else
            {
              v734 = 0;
              v735 = 0;
            }
            v741 = v733 - v734;
            v742 = 8 * v734;
            v743 = &v1339[v742];
            v744 = &v1337[v742];
            do
            {
              v745 = *(_QWORD *)v744;
              v744 += 8;
              v746 = v745 - 1;
              v747 = *(_QWORD *)v743;
              v743 += 8;
              v735 += v747 * v746;
              --v741;
            }
            while (v741);
LABEL_603:
            v748 = v735 + 1;
            goto LABEL_972;
          }
LABEL_971:
          v748 = 0;
LABEL_972:
          v1175 = v1341 + v748;
          if (v1175)
          {
            v1176 = 0;
            v1177 = v1335;
            do
            {
              v1178 = (int)*(float *)(v9 + 4 * v1176);
              if (*v1177 < v1178)
                v1178 = *v1177;
              *v1177++ = v1178;
              v1176 = (v1176 + 1) % v8;
              --v1175;
            }
            while (v1175);
          }
          if (v245)
          {
            v1179 = (unint64_t *)&v245->__shared_owners_;
            do
              v1180 = __ldaxr(v1179);
            while (__stlxr(v1180 - 1, v1179));
            if (!v1180)
            {
              ((void (*)(std::__shared_weak_count *))v245->__on_zero_shared)(v245);
              std::__shared_weak_count::__release_weak(v245);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (!v1336)
            goto LABEL_991;
          v1181 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1137 = __ldaxr(v1181);
          while (__stlxr(v1137 - 1, v1181));
          goto LABEL_989;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v39 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_857;
          v40 = v1285;
          v41 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_182;
          if (!v1285)
          {
            v42 = 0;
            goto LABEL_172;
          }
          if ((unint64_t)(v41 - 8) < 8)
          {
            v42 = 1;
            v43 = (char *)v1287;
            do
            {
LABEL_171:
              v175 = *(_QWORD *)v43;
              v43 += 8;
              v42 *= v175;
            }
            while (v43 != v1288);
            goto LABEL_172;
          }
          v170 = ((unint64_t)(v41 - 8) >> 3) + 1;
          v43 = (char *)v1287 + 8 * (v170 & 0x3FFFFFFFFFFFFFFELL);
          v171 = (char *)v1287 + 8;
          v172 = 1;
          v173 = v170 & 0x3FFFFFFFFFFFFFFELL;
          v174 = 1;
          do
          {
            v172 *= *(v171 - 1);
            v174 *= *v171;
            v171 += 2;
            v173 -= 2;
          }
          while (v173);
          v42 = v174 * v172;
          if (v170 != (v170 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_171;
LABEL_172:
          v176 = v41 >> 3;
          if ((unint64_t)(v41 >> 3) <= 1)
            v176 = 1;
          if (v176 < 2)
          {
            v177 = 0;
            v178 = 0;
LABEL_179:
            v184 = v176 - v177;
            v185 = 8 * v177;
            v186 = (uint64_t *)((char *)__p + v185);
            v187 = (uint64_t *)((char *)v1287 + v185);
            do
            {
              v188 = *v187++;
              v189 = v188 - 1;
              v190 = *v186++;
              v178 += v190 * v189;
              --v184;
            }
            while (v184);
            goto LABEL_181;
          }
          v179 = 0;
          v180 = 0;
          v177 = v176 & 0xFFFFFFFFFFFFFFFELL;
          v181 = (char *)v1287 + 8;
          v182 = (char *)__p + 8;
          v183 = v176 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v179 += *(v182 - 1) * (*(v181 - 1) - 1);
            v180 += *v182 * (*v181 - 1);
            v181 += 2;
            v182 += 2;
            v183 -= 2;
          }
          while (v183);
          v178 = v180 + v179;
          if (v176 != v177)
            goto LABEL_179;
LABEL_181:
          if (v42 != v178 + 1)
LABEL_857:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_182:
          v191 = v1286;
          if (v1286)
          {
            v192 = (unint64_t *)&v1286->__shared_owners_;
            do
              v193 = __ldxr(v192);
            while (__stxr(v193 + 1, v192));
          }
          if (v1341)
            goto LABEL_930;
          v194 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_931;
          v195 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_533;
          if ((unint64_t)(v194 - 8) < 8)
          {
            v195 = 1;
            v196 = v1337;
            do
            {
LABEL_532:
              v640 = *(_QWORD *)v196;
              v196 += 8;
              v195 *= v640;
            }
            while (v196 != v1338);
            goto LABEL_533;
          }
          v635 = ((unint64_t)(v194 - 8) >> 3) + 1;
          v196 = &v1337[8 * (v635 & 0x3FFFFFFFFFFFFFFELL)];
          v636 = v1337 + 8;
          v637 = 1;
          v638 = v635 & 0x3FFFFFFFFFFFFFFELL;
          v639 = 1;
          do
          {
            v637 *= *(v636 - 1);
            v639 *= *v636;
            v636 += 2;
            v638 -= 2;
          }
          while (v638);
          v195 = v639 * v637;
          if (v635 != (v635 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_532;
LABEL_533:
          v641 = v194 >> 3;
          if ((unint64_t)(v194 >> 3) <= 1)
            v641 = 1;
          if (v641 < 2)
          {
            v642 = 0;
            v643 = 0;
LABEL_540:
            v649 = v641 - v642;
            v650 = 8 * v642;
            v651 = &v1339[v650];
            v652 = &v1337[v650];
            do
            {
              v653 = *(_QWORD *)v652;
              v652 += 8;
              v654 = v653 - 1;
              v655 = *(_QWORD *)v651;
              v651 += 8;
              v643 += v655 * v654;
              --v649;
            }
            while (v649);
            goto LABEL_542;
          }
          v644 = 0;
          v645 = 0;
          v642 = v641 & 0xFFFFFFFFFFFFFFFELL;
          v646 = v1337 + 8;
          v647 = v1339 + 8;
          v648 = v641 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v644 += *(v647 - 1) * (*(v646 - 1) - 1);
            v645 += *v647 * (*v646 - 1);
            v646 += 2;
            v647 += 2;
            v648 -= 2;
          }
          while (v648);
          v643 = v645 + v644;
          if (v641 != v642)
            goto LABEL_540;
LABEL_542:
          if (v195 != v643 + 1)
LABEL_930:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v656 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v657 = v656 >> 3;
            if ((unint64_t)(v656 >> 3) <= 1)
              v657 = 1;
            if (v657 >= 2)
            {
              v660 = 0;
              v661 = 0;
              v658 = v657 & 0xFFFFFFFFFFFFFFFELL;
              v662 = v1337 + 8;
              v663 = v1339 + 8;
              v664 = v657 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v660 += *(v663 - 1) * (*(v662 - 1) - 1);
                v661 += *v663 * (*v662 - 1);
                v662 += 2;
                v663 += 2;
                v664 -= 2;
              }
              while (v664);
              v659 = v661 + v660;
              if (v657 == v658)
                goto LABEL_553;
            }
            else
            {
              v658 = 0;
              v659 = 0;
            }
            v665 = v657 - v658;
            v666 = 8 * v658;
            v667 = &v1339[v666];
            v668 = &v1337[v666];
            do
            {
              v669 = *(_QWORD *)v668;
              v668 += 8;
              v670 = v669 - 1;
              v671 = *(_QWORD *)v667;
              v667 += 8;
              v659 += v671 * v670;
              --v665;
            }
            while (v665);
LABEL_553:
            v672 = v659 + 1;
            goto LABEL_932;
          }
LABEL_931:
          v672 = 0;
LABEL_932:
          if (v1341 + v672)
          {
            v1161 = 0;
            v1162 = 0;
            do
            {
              v1163 = (int)*(float *)(v40 + 4 * v1162);
              if (*((unsigned __int8 *)v1335 + v1161) < v1163)
                LOBYTE(v1163) = *((_BYTE *)v1335 + v1161);
              *((_BYTE *)v1335 + v1161) = v1163;
              v1162 = (v1162 + 1) % v39;
              ++v1161;
            }
            while (v1161 < v1341 + v672);
          }
          if (v191)
          {
            v1164 = (unint64_t *)&v191->__shared_owners_;
            do
              v1165 = __ldaxr(v1164);
            while (__stlxr(v1165 - 1, v1164));
            if (!v1165)
            {
              ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
              std::__shared_weak_count::__release_weak(v191);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (!v1336)
            goto LABEL_991;
          v1166 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1137 = __ldaxr(v1166);
          while (__stlxr(v1137 - 1, v1166));
          goto LABEL_989;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v23 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_854;
          v24 = v1285;
          v25 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_116;
          if (!v1285)
          {
            v26 = 0;
            goto LABEL_106;
          }
          if ((unint64_t)(v25 - 8) < 8)
          {
            v26 = 1;
            v27 = (char *)v1287;
            do
            {
LABEL_105:
              v94 = *(_QWORD *)v27;
              v27 += 8;
              v26 *= v94;
            }
            while (v27 != v1288);
            goto LABEL_106;
          }
          v89 = ((unint64_t)(v25 - 8) >> 3) + 1;
          v27 = (char *)v1287 + 8 * (v89 & 0x3FFFFFFFFFFFFFFELL);
          v90 = (char *)v1287 + 8;
          v91 = 1;
          v92 = v89 & 0x3FFFFFFFFFFFFFFELL;
          v93 = 1;
          do
          {
            v91 *= *(v90 - 1);
            v93 *= *v90;
            v90 += 2;
            v92 -= 2;
          }
          while (v92);
          v26 = v93 * v91;
          if (v89 != (v89 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_105;
LABEL_106:
          v95 = v25 >> 3;
          if ((unint64_t)(v25 >> 3) <= 1)
            v95 = 1;
          if (v95 < 2)
          {
            v96 = 0;
            v97 = 0;
LABEL_113:
            v103 = v95 - v96;
            v104 = 8 * v96;
            v105 = (uint64_t *)((char *)__p + v104);
            v106 = (uint64_t *)((char *)v1287 + v104);
            do
            {
              v107 = *v106++;
              v108 = v107 - 1;
              v109 = *v105++;
              v97 += v109 * v108;
              --v103;
            }
            while (v103);
            goto LABEL_115;
          }
          v98 = 0;
          v99 = 0;
          v96 = v95 & 0xFFFFFFFFFFFFFFFELL;
          v100 = (char *)v1287 + 8;
          v101 = (char *)__p + 8;
          v102 = v95 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v98 += *(v101 - 1) * (*(v100 - 1) - 1);
            v99 += *v101 * (*v100 - 1);
            v100 += 2;
            v101 += 2;
            v102 -= 2;
          }
          while (v102);
          v97 = v99 + v98;
          if (v95 != v96)
            goto LABEL_113;
LABEL_115:
          if (v26 != v97 + 1)
LABEL_854:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_116:
          v110 = v1286;
          if (v1286)
          {
            v111 = (unint64_t *)&v1286->__shared_owners_;
            do
              v112 = __ldxr(v111);
            while (__stxr(v112 + 1, v111));
          }
          if (v1341)
            goto LABEL_870;
          v113 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_871;
          v114 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_458;
          if ((unint64_t)(v113 - 8) < 8)
          {
            v114 = 1;
            v115 = v1337;
            do
            {
LABEL_457:
              v526 = *(_QWORD *)v115;
              v115 += 8;
              v114 *= v526;
            }
            while (v115 != v1338);
            goto LABEL_458;
          }
          v521 = ((unint64_t)(v113 - 8) >> 3) + 1;
          v115 = &v1337[8 * (v521 & 0x3FFFFFFFFFFFFFFELL)];
          v522 = v1337 + 8;
          v523 = 1;
          v524 = v521 & 0x3FFFFFFFFFFFFFFELL;
          v525 = 1;
          do
          {
            v523 *= *(v522 - 1);
            v525 *= *v522;
            v522 += 2;
            v524 -= 2;
          }
          while (v524);
          v114 = v525 * v523;
          if (v521 != (v521 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_457;
LABEL_458:
          v527 = v113 >> 3;
          if ((unint64_t)(v113 >> 3) <= 1)
            v527 = 1;
          if (v527 < 2)
          {
            v528 = 0;
            v529 = 0;
LABEL_465:
            v535 = v527 - v528;
            v536 = 8 * v528;
            v537 = &v1339[v536];
            v538 = &v1337[v536];
            do
            {
              v539 = *(_QWORD *)v538;
              v538 += 8;
              v540 = v539 - 1;
              v541 = *(_QWORD *)v537;
              v537 += 8;
              v529 += v541 * v540;
              --v535;
            }
            while (v535);
            goto LABEL_467;
          }
          v530 = 0;
          v531 = 0;
          v528 = v527 & 0xFFFFFFFFFFFFFFFELL;
          v532 = v1337 + 8;
          v533 = v1339 + 8;
          v534 = v527 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v530 += *(v533 - 1) * (*(v532 - 1) - 1);
            v531 += *v533 * (*v532 - 1);
            v532 += 2;
            v533 += 2;
            v534 -= 2;
          }
          while (v534);
          v529 = v531 + v530;
          if (v527 != v528)
            goto LABEL_465;
LABEL_467:
          if (v114 != v529 + 1)
LABEL_870:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v542 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v543 = v542 >> 3;
            if ((unint64_t)(v542 >> 3) <= 1)
              v543 = 1;
            if (v543 >= 2)
            {
              v546 = 0;
              v547 = 0;
              v544 = v543 & 0xFFFFFFFFFFFFFFFELL;
              v548 = v1337 + 8;
              v549 = v1339 + 8;
              v550 = v543 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v546 += *(v549 - 1) * (*(v548 - 1) - 1);
                v547 += *v549 * (*v548 - 1);
                v548 += 2;
                v549 += 2;
                v550 -= 2;
              }
              while (v550);
              v545 = v547 + v546;
              if (v543 == v544)
                goto LABEL_478;
            }
            else
            {
              v544 = 0;
              v545 = 0;
            }
            v551 = v543 - v544;
            v552 = 8 * v544;
            v553 = &v1339[v552];
            v554 = &v1337[v552];
            do
            {
              v555 = *(_QWORD *)v554;
              v554 += 8;
              v556 = v555 - 1;
              v557 = *(_QWORD *)v553;
              v553 += 8;
              v545 += v557 * v556;
              --v551;
            }
            while (v551);
LABEL_478:
            v558 = v545 + 1;
            goto LABEL_872;
          }
LABEL_871:
          v558 = 0;
LABEL_872:
          v1129 = v1341 + v558;
          if (v1129)
          {
            v1130 = 0;
            v1131 = (float *)v1335;
            do
            {
              v1132 = *(float *)(v24 + 4 * v1130);
              if (v1132 >= *v1131)
                v1132 = *v1131;
              *v1131++ = v1132;
              v1130 = (v1130 + 1) % v23;
              --v1129;
            }
            while (v1129);
          }
          if (v110)
          {
            v1133 = (unint64_t *)&v110->__shared_owners_;
            do
              v1134 = __ldaxr(v1133);
            while (__stlxr(v1134 - 1, v1133));
            if (!v1134)
            {
              ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
              std::__shared_weak_count::__release_weak(v110);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (!v1336)
            goto LABEL_991;
          v1136 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1137 = __ldaxr(v1136);
          while (__stlxr(v1137 - 1, v1136));
          goto LABEL_989;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v29 = *(_QWORD *)v1287;
          if (v1291)
            goto LABEL_855;
          v30 = v1285;
          v31 = v1288 - (_BYTE *)v1287;
          if (v1288 == v1287)
            goto LABEL_138;
          if (!v1285)
          {
            v32 = 0;
            goto LABEL_128;
          }
          if ((unint64_t)(v31 - 8) < 8)
          {
            v32 = 1;
            v33 = (char *)v1287;
            do
            {
LABEL_127:
              v121 = *(_QWORD *)v33;
              v33 += 8;
              v32 *= v121;
            }
            while (v33 != v1288);
            goto LABEL_128;
          }
          v116 = ((unint64_t)(v31 - 8) >> 3) + 1;
          v33 = (char *)v1287 + 8 * (v116 & 0x3FFFFFFFFFFFFFFELL);
          v117 = (char *)v1287 + 8;
          v118 = 1;
          v119 = v116 & 0x3FFFFFFFFFFFFFFELL;
          v120 = 1;
          do
          {
            v118 *= *(v117 - 1);
            v120 *= *v117;
            v117 += 2;
            v119 -= 2;
          }
          while (v119);
          v32 = v120 * v118;
          if (v116 != (v116 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_127;
LABEL_128:
          v122 = v31 >> 3;
          if ((unint64_t)(v31 >> 3) <= 1)
            v122 = 1;
          if (v122 < 2)
          {
            v123 = 0;
            v124 = 0;
LABEL_135:
            v130 = v122 - v123;
            v131 = 8 * v123;
            v132 = (uint64_t *)((char *)__p + v131);
            v133 = (uint64_t *)((char *)v1287 + v131);
            do
            {
              v134 = *v133++;
              v135 = v134 - 1;
              v136 = *v132++;
              v124 += v136 * v135;
              --v130;
            }
            while (v130);
            goto LABEL_137;
          }
          v125 = 0;
          v126 = 0;
          v123 = v122 & 0xFFFFFFFFFFFFFFFELL;
          v127 = (char *)v1287 + 8;
          v128 = (char *)__p + 8;
          v129 = v122 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v125 += *(v128 - 1) * (*(v127 - 1) - 1);
            v126 += *v128 * (*v127 - 1);
            v127 += 2;
            v128 += 2;
            v129 -= 2;
          }
          while (v129);
          v124 = v126 + v125;
          if (v122 != v123)
            goto LABEL_135;
LABEL_137:
          if (v32 != v124 + 1)
LABEL_855:
            nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_138:
          v137 = v1286;
          if (v1286)
          {
            v138 = (unint64_t *)&v1286->__shared_owners_;
            do
              v139 = __ldxr(v138);
            while (__stxr(v139 + 1, v138));
          }
          if (v1341)
            goto LABEL_890;
          v140 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_891;
          v141 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_483;
          if ((unint64_t)(v140 - 8) < 8)
          {
            v141 = 1;
            v142 = v1337;
            do
            {
LABEL_482:
              v564 = *(_QWORD *)v142;
              v142 += 8;
              v141 *= v564;
            }
            while (v142 != v1338);
            goto LABEL_483;
          }
          v559 = ((unint64_t)(v140 - 8) >> 3) + 1;
          v142 = &v1337[8 * (v559 & 0x3FFFFFFFFFFFFFFELL)];
          v560 = v1337 + 8;
          v561 = 1;
          v562 = v559 & 0x3FFFFFFFFFFFFFFELL;
          v563 = 1;
          do
          {
            v561 *= *(v560 - 1);
            v563 *= *v560;
            v560 += 2;
            v562 -= 2;
          }
          while (v562);
          v141 = v563 * v561;
          if (v559 != (v559 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_482;
LABEL_483:
          v565 = v140 >> 3;
          if ((unint64_t)(v140 >> 3) <= 1)
            v565 = 1;
          if (v565 < 2)
          {
            v566 = 0;
            v567 = 0;
LABEL_490:
            v573 = v565 - v566;
            v574 = 8 * v566;
            v575 = &v1339[v574];
            v576 = &v1337[v574];
            do
            {
              v577 = *(_QWORD *)v576;
              v576 += 8;
              v578 = v577 - 1;
              v579 = *(_QWORD *)v575;
              v575 += 8;
              v567 += v579 * v578;
              --v573;
            }
            while (v573);
            goto LABEL_492;
          }
          v568 = 0;
          v569 = 0;
          v566 = v565 & 0xFFFFFFFFFFFFFFFELL;
          v570 = v1337 + 8;
          v571 = v1339 + 8;
          v572 = v565 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v568 += *(v571 - 1) * (*(v570 - 1) - 1);
            v569 += *v571 * (*v570 - 1);
            v570 += 2;
            v571 += 2;
            v572 -= 2;
          }
          while (v572);
          v567 = v569 + v568;
          if (v565 != v566)
            goto LABEL_490;
LABEL_492:
          if (v141 != v567 + 1)
LABEL_890:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v580 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v581 = v580 >> 3;
            if ((unint64_t)(v580 >> 3) <= 1)
              v581 = 1;
            if (v581 >= 2)
            {
              v584 = 0;
              v585 = 0;
              v582 = v581 & 0xFFFFFFFFFFFFFFFELL;
              v586 = v1337 + 8;
              v587 = v1339 + 8;
              v588 = v581 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v584 += *(v587 - 1) * (*(v586 - 1) - 1);
                v585 += *v587 * (*v586 - 1);
                v586 += 2;
                v587 += 2;
                v588 -= 2;
              }
              while (v588);
              v583 = v585 + v584;
              if (v581 == v582)
                goto LABEL_503;
            }
            else
            {
              v582 = 0;
              v583 = 0;
            }
            v589 = v581 - v582;
            v590 = 8 * v582;
            v591 = &v1339[v590];
            v592 = &v1337[v590];
            do
            {
              v593 = *(_QWORD *)v592;
              v592 += 8;
              v594 = v593 - 1;
              v595 = *(_QWORD *)v591;
              v591 += 8;
              v583 += v595 * v594;
              --v589;
            }
            while (v589);
LABEL_503:
            v596 = v583 + 1;
            goto LABEL_892;
          }
LABEL_891:
          v596 = 0;
LABEL_892:
          v1138 = v1341 + v596;
          if (v1138)
          {
            v1139 = 0;
            v1140 = v1335;
            do
            {
              _S0 = *(float *)(v30 + 4 * v1139);
              __asm { FCVT            H0, S0 }
              LOWORD(_S1) = *(_WORD *)v1140;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S3 <= _S2)
                _S0 = _S1;
              *(_WORD *)v1140 = LOWORD(_S0);
              v1140 = (int *)((char *)v1140 + 2);
              v1139 = (v1139 + 1) % v29;
              --v1138;
            }
            while (v1138);
          }
          if (v137)
          {
            v1148 = (unint64_t *)&v137->__shared_owners_;
            do
              v1149 = __ldaxr(v1148);
            while (__stlxr(v1149 - 1, v1148));
            if (!v1149)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1135 = v1336;
          if (v1336)
          {
            v1150 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1137 = __ldaxr(v1150);
            while (__stlxr(v1137 - 1, v1150));
LABEL_989:
            if (!v1137)
            {
              ((void (*)(std::__shared_weak_count *))v1135->__on_zero_shared)(v1135);
              std::__shared_weak_count::__release_weak(v1135);
            }
          }
LABEL_991:
          if (__p)
          {
            v1290 = __p;
            operator delete(__p);
          }
          if (v1287)
          {
            v1288 = (char *)v1287;
            operator delete(v1287);
          }
          v1182 = v1286;
          if (v1286)
          {
            v1183 = (unint64_t *)&v1286->__shared_owners_;
            do
              v1184 = __ldaxr(v1183);
            while (__stlxr(v1184 - 1, v1183));
            if (!v1184)
            {
              ((void (*)(std::__shared_weak_count *))v1182->__on_zero_shared)(v1182);
              std::__shared_weak_count::__release_weak(v1182);
            }
          }
          if (v1282)
          {
            v1283 = v1282;
            operator delete(v1282);
          }
          if (v1280)
          {
            v1281 = v1280;
            operator delete(v1280);
          }
          v1185 = v1279;
          if (!v1279)
            return;
          v1186 = (unint64_t *)&v1279->__shared_owners_;
          do
            v1187 = __ldaxr(v1186);
          while (__stlxr(v1187 - 1, v1186));
          break;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()();
      }
      goto LABEL_1261;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v1292, (uint64_t)a2);
      v1298 = &v1334;
      nitro::ndarray<half>::ndarray(&v1299, &v1292);
      switch(*a1)
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v13 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_864;
          v14 = v1299;
          v15 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_336;
          if (!v1299)
          {
            v16 = 0;
            goto LABEL_326;
          }
          if ((unint64_t)(v15 - 8) < 8)
          {
            v16 = 1;
            v17 = (char *)v1301;
            do
            {
LABEL_325:
              v364 = *(_QWORD *)v17;
              v17 += 8;
              v16 *= v364;
            }
            while (v17 != v1302);
            goto LABEL_326;
          }
          v359 = ((unint64_t)(v15 - 8) >> 3) + 1;
          v17 = (char *)v1301 + 8 * (v359 & 0x3FFFFFFFFFFFFFFELL);
          v360 = (char *)v1301 + 8;
          v361 = 1;
          v362 = v359 & 0x3FFFFFFFFFFFFFFELL;
          v363 = 1;
          do
          {
            v361 *= *(v360 - 1);
            v363 *= *v360;
            v360 += 2;
            v362 -= 2;
          }
          while (v362);
          v16 = v363 * v361;
          if (v359 != (v359 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_325;
LABEL_326:
          v365 = v15 >> 3;
          if ((unint64_t)(v15 >> 3) <= 1)
            v365 = 1;
          if (v365 < 2)
          {
            v366 = 0;
            v367 = 0;
LABEL_333:
            v373 = v365 - v366;
            v374 = 8 * v366;
            v375 = (uint64_t *)((char *)v1303 + v374);
            v376 = (uint64_t *)((char *)v1301 + v374);
            do
            {
              v377 = *v376++;
              v378 = v377 - 1;
              v379 = *v375++;
              v367 += v379 * v378;
              --v373;
            }
            while (v373);
            goto LABEL_335;
          }
          v368 = 0;
          v369 = 0;
          v366 = v365 & 0xFFFFFFFFFFFFFFFELL;
          v370 = (char *)v1301 + 8;
          v371 = (char *)v1303 + 8;
          v372 = v365 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v368 += *(v371 - 1) * (*(v370 - 1) - 1);
            v369 += *v371 * (*v370 - 1);
            v370 += 2;
            v371 += 2;
            v372 -= 2;
          }
          while (v372);
          v367 = v369 + v368;
          if (v365 != v366)
            goto LABEL_333;
LABEL_335:
          if (v16 != v367 + 1)
LABEL_864:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_336:
          v380 = v1300;
          if (v1300)
          {
            v381 = (unint64_t *)&v1300->__shared_owners_;
            do
              v382 = __ldxr(v381);
            while (__stxr(v382 + 1, v381));
          }
          if (v1341)
            goto LABEL_1088;
          v383 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1089;
          v384 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_708;
          if ((unint64_t)(v383 - 8) < 8)
          {
            v384 = 1;
            v385 = v1337;
            do
            {
LABEL_707:
              v906 = *(_QWORD *)v385;
              v385 += 8;
              v384 *= v906;
            }
            while (v385 != v1338);
            goto LABEL_708;
          }
          v901 = ((unint64_t)(v383 - 8) >> 3) + 1;
          v385 = &v1337[8 * (v901 & 0x3FFFFFFFFFFFFFFELL)];
          v902 = v1337 + 8;
          v903 = 1;
          v904 = v901 & 0x3FFFFFFFFFFFFFFELL;
          v905 = 1;
          do
          {
            v903 *= *(v902 - 1);
            v905 *= *v902;
            v902 += 2;
            v904 -= 2;
          }
          while (v904);
          v384 = v905 * v903;
          if (v901 != (v901 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_707;
LABEL_708:
          v907 = v383 >> 3;
          if ((unint64_t)(v383 >> 3) <= 1)
            v907 = 1;
          if (v907 < 2)
          {
            v908 = 0;
            v909 = 0;
LABEL_715:
            v915 = v907 - v908;
            v916 = 8 * v908;
            v917 = &v1339[v916];
            v918 = &v1337[v916];
            do
            {
              v919 = *(_QWORD *)v918;
              v918 += 8;
              v920 = v919 - 1;
              v921 = *(_QWORD *)v917;
              v917 += 8;
              v909 += v921 * v920;
              --v915;
            }
            while (v915);
            goto LABEL_717;
          }
          v910 = 0;
          v911 = 0;
          v908 = v907 & 0xFFFFFFFFFFFFFFFELL;
          v912 = v1337 + 8;
          v913 = v1339 + 8;
          v914 = v907 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v910 += *(v913 - 1) * (*(v912 - 1) - 1);
            v911 += *v913 * (*v912 - 1);
            v912 += 2;
            v913 += 2;
            v914 -= 2;
          }
          while (v914);
          v909 = v911 + v910;
          if (v907 != v908)
            goto LABEL_715;
LABEL_717:
          if (v384 != v909 + 1)
LABEL_1088:
            nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()();
          v922 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v923 = v922 >> 3;
            if ((unint64_t)(v922 >> 3) <= 1)
              v923 = 1;
            if (v923 >= 2)
            {
              v926 = 0;
              v927 = 0;
              v924 = v923 & 0xFFFFFFFFFFFFFFFELL;
              v928 = v1337 + 8;
              v929 = v1339 + 8;
              v930 = v923 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v926 += *(v929 - 1) * (*(v928 - 1) - 1);
                v927 += *v929 * (*v928 - 1);
                v928 += 2;
                v929 += 2;
                v930 -= 2;
              }
              while (v930);
              v925 = v927 + v926;
              if (v923 == v924)
                goto LABEL_728;
            }
            else
            {
              v924 = 0;
              v925 = 0;
            }
            v931 = v923 - v924;
            v932 = 8 * v924;
            v933 = &v1339[v932];
            v934 = &v1337[v932];
            do
            {
              v935 = *(_QWORD *)v934;
              v934 += 8;
              v936 = v935 - 1;
              v937 = *(_QWORD *)v933;
              v933 += 8;
              v925 += v937 * v936;
              --v931;
            }
            while (v931);
LABEL_728:
            v938 = v925 + 1;
            goto LABEL_1090;
          }
LABEL_1089:
          v938 = 0;
LABEL_1090:
          v1222 = v1341 + v938;
          if (v1222)
          {
            v1223 = 0;
            v1224 = v1335;
            do
            {
              _H0 = *(_WORD *)(v14 + 2 * v1223);
              __asm { FCVT            S0, H0 }
              v1227 = (int)_S0;
              if (*v1224 < (int)_S0)
                v1227 = *v1224;
              *v1224++ = v1227;
              v1223 = (v1223 + 1) % v13;
              --v1222;
            }
            while (v1222);
          }
          if (v380)
          {
            v1228 = (unint64_t *)&v380->__shared_owners_;
            do
              v1229 = __ldaxr(v1228);
            while (__stlxr(v1229 - 1, v1228));
            if (!v1229)
            {
              ((void (*)(std::__shared_weak_count *))v380->__on_zero_shared)(v380);
              std::__shared_weak_count::__release_weak(v380);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (!v1336)
            goto LABEL_1109;
          v1230 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1160 = __ldaxr(v1230);
          while (__stlxr(v1160 - 1, v1230));
          goto LABEL_1107;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v61 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_862;
          v62 = v1299;
          v63 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_292;
          if (!v1299)
          {
            v64 = 0;
            goto LABEL_282;
          }
          if ((unint64_t)(v63 - 8) < 8)
          {
            v64 = 1;
            v65 = (char *)v1301;
            do
            {
LABEL_281:
              v310 = *(_QWORD *)v65;
              v65 += 8;
              v64 *= v310;
            }
            while (v65 != v1302);
            goto LABEL_282;
          }
          v305 = ((unint64_t)(v63 - 8) >> 3) + 1;
          v65 = (char *)v1301 + 8 * (v305 & 0x3FFFFFFFFFFFFFFELL);
          v306 = (char *)v1301 + 8;
          v307 = 1;
          v308 = v305 & 0x3FFFFFFFFFFFFFFELL;
          v309 = 1;
          do
          {
            v307 *= *(v306 - 1);
            v309 *= *v306;
            v306 += 2;
            v308 -= 2;
          }
          while (v308);
          v64 = v309 * v307;
          if (v305 != (v305 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_281;
LABEL_282:
          v311 = v63 >> 3;
          if ((unint64_t)(v63 >> 3) <= 1)
            v311 = 1;
          if (v311 < 2)
          {
            v312 = 0;
            v313 = 0;
LABEL_289:
            v319 = v311 - v312;
            v320 = 8 * v312;
            v321 = (uint64_t *)((char *)v1303 + v320);
            v322 = (uint64_t *)((char *)v1301 + v320);
            do
            {
              v323 = *v322++;
              v324 = v323 - 1;
              v325 = *v321++;
              v313 += v325 * v324;
              --v319;
            }
            while (v319);
            goto LABEL_291;
          }
          v314 = 0;
          v315 = 0;
          v312 = v311 & 0xFFFFFFFFFFFFFFFELL;
          v316 = (char *)v1301 + 8;
          v317 = (char *)v1303 + 8;
          v318 = v311 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v314 += *(v317 - 1) * (*(v316 - 1) - 1);
            v315 += *v317 * (*v316 - 1);
            v316 += 2;
            v317 += 2;
            v318 -= 2;
          }
          while (v318);
          v313 = v315 + v314;
          if (v311 != v312)
            goto LABEL_289;
LABEL_291:
          if (v64 != v313 + 1)
LABEL_862:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_292:
          v326 = v1300;
          if (v1300)
          {
            v327 = (unint64_t *)&v1300->__shared_owners_;
            do
              v328 = __ldxr(v327);
            while (__stxr(v328 + 1, v327));
          }
          if (v1341)
            goto LABEL_1048;
          v329 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1049;
          v330 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_658;
          if ((unint64_t)(v329 - 8) < 8)
          {
            v330 = 1;
            v331 = v1337;
            do
            {
LABEL_657:
              v830 = *(_QWORD *)v331;
              v331 += 8;
              v330 *= v830;
            }
            while (v331 != v1338);
            goto LABEL_658;
          }
          v825 = ((unint64_t)(v329 - 8) >> 3) + 1;
          v331 = &v1337[8 * (v825 & 0x3FFFFFFFFFFFFFFELL)];
          v826 = v1337 + 8;
          v827 = 1;
          v828 = v825 & 0x3FFFFFFFFFFFFFFELL;
          v829 = 1;
          do
          {
            v827 *= *(v826 - 1);
            v829 *= *v826;
            v826 += 2;
            v828 -= 2;
          }
          while (v828);
          v330 = v829 * v827;
          if (v825 != (v825 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_657;
LABEL_658:
          v831 = v329 >> 3;
          if ((unint64_t)(v329 >> 3) <= 1)
            v831 = 1;
          if (v831 < 2)
          {
            v832 = 0;
            v833 = 0;
LABEL_665:
            v839 = v831 - v832;
            v840 = 8 * v832;
            v841 = &v1339[v840];
            v842 = &v1337[v840];
            do
            {
              v843 = *(_QWORD *)v842;
              v842 += 8;
              v844 = v843 - 1;
              v845 = *(_QWORD *)v841;
              v841 += 8;
              v833 += v845 * v844;
              --v839;
            }
            while (v839);
            goto LABEL_667;
          }
          v834 = 0;
          v835 = 0;
          v832 = v831 & 0xFFFFFFFFFFFFFFFELL;
          v836 = v1337 + 8;
          v837 = v1339 + 8;
          v838 = v831 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v834 += *(v837 - 1) * (*(v836 - 1) - 1);
            v835 += *v837 * (*v836 - 1);
            v836 += 2;
            v837 += 2;
            v838 -= 2;
          }
          while (v838);
          v833 = v835 + v834;
          if (v831 != v832)
            goto LABEL_665;
LABEL_667:
          if (v330 != v833 + 1)
LABEL_1048:
            nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()();
          v846 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v847 = v846 >> 3;
            if ((unint64_t)(v846 >> 3) <= 1)
              v847 = 1;
            if (v847 >= 2)
            {
              v850 = 0;
              v851 = 0;
              v848 = v847 & 0xFFFFFFFFFFFFFFFELL;
              v852 = v1337 + 8;
              v853 = v1339 + 8;
              v854 = v847 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v850 += *(v853 - 1) * (*(v852 - 1) - 1);
                v851 += *v853 * (*v852 - 1);
                v852 += 2;
                v853 += 2;
                v854 -= 2;
              }
              while (v854);
              v849 = v851 + v850;
              if (v847 == v848)
                goto LABEL_678;
            }
            else
            {
              v848 = 0;
              v849 = 0;
            }
            v855 = v847 - v848;
            v856 = 8 * v848;
            v857 = &v1339[v856];
            v858 = &v1337[v856];
            do
            {
              v859 = *(_QWORD *)v858;
              v858 += 8;
              v860 = v859 - 1;
              v861 = *(_QWORD *)v857;
              v857 += 8;
              v849 += v861 * v860;
              --v855;
            }
            while (v855);
LABEL_678:
            v862 = v849 + 1;
            goto LABEL_1050;
          }
LABEL_1049:
          v862 = 0;
LABEL_1050:
          if (v1341 + v862)
          {
            v1206 = 0;
            v1207 = 0;
            do
            {
              _H0 = *(_WORD *)(v62 + 2 * v1207);
              __asm { FCVT            S0, H0 }
              v1210 = (int)_S0;
              if (*((unsigned __int8 *)v1335 + v1206) < (int)_S0)
                LOBYTE(v1210) = *((_BYTE *)v1335 + v1206);
              *((_BYTE *)v1335 + v1206) = v1210;
              v1207 = (v1207 + 1) % v61;
              ++v1206;
            }
            while (v1206 < v1341 + v862);
          }
          if (v326)
          {
            v1211 = (unint64_t *)&v326->__shared_owners_;
            do
              v1212 = __ldaxr(v1211);
            while (__stlxr(v1212 - 1, v1211));
            if (!v1212)
            {
              ((void (*)(std::__shared_weak_count *))v326->__on_zero_shared)(v326);
              std::__shared_weak_count::__release_weak(v326);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (!v1336)
            goto LABEL_1109;
          v1213 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1160 = __ldaxr(v1213);
          while (__stlxr(v1160 - 1, v1213));
          goto LABEL_1107;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v34 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_856;
          v35 = v1299;
          v36 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_160;
          if (!v1299)
          {
            v37 = 0;
            goto LABEL_150;
          }
          if ((unint64_t)(v36 - 8) < 8)
          {
            v37 = 1;
            v38 = (char *)v1301;
            do
            {
LABEL_149:
              v148 = *(_QWORD *)v38;
              v38 += 8;
              v37 *= v148;
            }
            while (v38 != v1302);
            goto LABEL_150;
          }
          v143 = ((unint64_t)(v36 - 8) >> 3) + 1;
          v38 = (char *)v1301 + 8 * (v143 & 0x3FFFFFFFFFFFFFFELL);
          v144 = (char *)v1301 + 8;
          v145 = 1;
          v146 = v143 & 0x3FFFFFFFFFFFFFFELL;
          v147 = 1;
          do
          {
            v145 *= *(v144 - 1);
            v147 *= *v144;
            v144 += 2;
            v146 -= 2;
          }
          while (v146);
          v37 = v147 * v145;
          if (v143 != (v143 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_149;
LABEL_150:
          v149 = v36 >> 3;
          if ((unint64_t)(v36 >> 3) <= 1)
            v149 = 1;
          if (v149 < 2)
          {
            v150 = 0;
            v151 = 0;
LABEL_157:
            v157 = v149 - v150;
            v158 = 8 * v150;
            v159 = (uint64_t *)((char *)v1303 + v158);
            v160 = (uint64_t *)((char *)v1301 + v158);
            do
            {
              v161 = *v160++;
              v162 = v161 - 1;
              v163 = *v159++;
              v151 += v163 * v162;
              --v157;
            }
            while (v157);
            goto LABEL_159;
          }
          v152 = 0;
          v153 = 0;
          v150 = v149 & 0xFFFFFFFFFFFFFFFELL;
          v154 = (char *)v1301 + 8;
          v155 = (char *)v1303 + 8;
          v156 = v149 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v152 += *(v155 - 1) * (*(v154 - 1) - 1);
            v153 += *v155 * (*v154 - 1);
            v154 += 2;
            v155 += 2;
            v156 -= 2;
          }
          while (v156);
          v151 = v153 + v152;
          if (v149 != v150)
            goto LABEL_157;
LABEL_159:
          if (v37 != v151 + 1)
LABEL_856:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_160:
          v164 = v1300;
          if (v1300)
          {
            v165 = (unint64_t *)&v1300->__shared_owners_;
            do
              v166 = __ldxr(v165);
            while (__stxr(v166 + 1, v165));
          }
          if (v1341)
            goto LABEL_910;
          v167 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_911;
          v168 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_508;
          if ((unint64_t)(v167 - 8) < 8)
          {
            v168 = 1;
            v169 = v1337;
            do
            {
LABEL_507:
              v602 = *(_QWORD *)v169;
              v169 += 8;
              v168 *= v602;
            }
            while (v169 != v1338);
            goto LABEL_508;
          }
          v597 = ((unint64_t)(v167 - 8) >> 3) + 1;
          v169 = &v1337[8 * (v597 & 0x3FFFFFFFFFFFFFFELL)];
          v598 = v1337 + 8;
          v599 = 1;
          v600 = v597 & 0x3FFFFFFFFFFFFFFELL;
          v601 = 1;
          do
          {
            v599 *= *(v598 - 1);
            v601 *= *v598;
            v598 += 2;
            v600 -= 2;
          }
          while (v600);
          v168 = v601 * v599;
          if (v597 != (v597 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_507;
LABEL_508:
          v603 = v167 >> 3;
          if ((unint64_t)(v167 >> 3) <= 1)
            v603 = 1;
          if (v603 < 2)
          {
            v604 = 0;
            v605 = 0;
LABEL_515:
            v611 = v603 - v604;
            v612 = 8 * v604;
            v613 = &v1339[v612];
            v614 = &v1337[v612];
            do
            {
              v615 = *(_QWORD *)v614;
              v614 += 8;
              v616 = v615 - 1;
              v617 = *(_QWORD *)v613;
              v613 += 8;
              v605 += v617 * v616;
              --v611;
            }
            while (v611);
            goto LABEL_517;
          }
          v606 = 0;
          v607 = 0;
          v604 = v603 & 0xFFFFFFFFFFFFFFFELL;
          v608 = v1337 + 8;
          v609 = v1339 + 8;
          v610 = v603 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v606 += *(v609 - 1) * (*(v608 - 1) - 1);
            v607 += *v609 * (*v608 - 1);
            v608 += 2;
            v609 += 2;
            v610 -= 2;
          }
          while (v610);
          v605 = v607 + v606;
          if (v603 != v604)
            goto LABEL_515;
LABEL_517:
          if (v168 != v605 + 1)
LABEL_910:
            nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()();
          v618 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v619 = v618 >> 3;
            if ((unint64_t)(v618 >> 3) <= 1)
              v619 = 1;
            if (v619 >= 2)
            {
              v622 = 0;
              v623 = 0;
              v620 = v619 & 0xFFFFFFFFFFFFFFFELL;
              v624 = v1337 + 8;
              v625 = v1339 + 8;
              v626 = v619 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v622 += *(v625 - 1) * (*(v624 - 1) - 1);
                v623 += *v625 * (*v624 - 1);
                v624 += 2;
                v625 += 2;
                v626 -= 2;
              }
              while (v626);
              v621 = v623 + v622;
              if (v619 == v620)
                goto LABEL_528;
            }
            else
            {
              v620 = 0;
              v621 = 0;
            }
            v627 = v619 - v620;
            v628 = 8 * v620;
            v629 = &v1339[v628];
            v630 = &v1337[v628];
            do
            {
              v631 = *(_QWORD *)v630;
              v630 += 8;
              v632 = v631 - 1;
              v633 = *(_QWORD *)v629;
              v629 += 8;
              v621 += v633 * v632;
              --v627;
            }
            while (v627);
LABEL_528:
            v634 = v621 + 1;
            goto LABEL_912;
          }
LABEL_911:
          v634 = 0;
LABEL_912:
          v1151 = v1341 + v634;
          if (v1151)
          {
            v1152 = 0;
            v1153 = (float *)v1335;
            do
            {
              _H0 = *(_WORD *)(v35 + 2 * v1152);
              __asm { FCVT            S0, H0 }
              if (*v1153 <= _S0)
                _S0 = *v1153;
              *v1153++ = _S0;
              v1152 = (v1152 + 1) % v34;
              --v1151;
            }
            while (v1151);
          }
          if (v164)
          {
            v1156 = (unint64_t *)&v164->__shared_owners_;
            do
              v1157 = __ldaxr(v1156);
            while (__stlxr(v1157 - 1, v1156));
            if (!v1157)
            {
              ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
              std::__shared_weak_count::__release_weak(v164);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (!v1336)
            goto LABEL_1109;
          v1159 = (unint64_t *)&v1336->__shared_owners_;
          do
            v1160 = __ldaxr(v1159);
          while (__stlxr(v1160 - 1, v1159));
          goto LABEL_1107;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)&v1335, (uint64_t)a1);
          v56 = *(_QWORD *)v1301;
          if (v1305)
            goto LABEL_861;
          v57 = v1299;
          v58 = v1302 - (_BYTE *)v1301;
          if (v1302 == v1301)
            goto LABEL_270;
          if (!v1299)
          {
            v59 = 0;
            goto LABEL_260;
          }
          if ((unint64_t)(v58 - 8) < 8)
          {
            v59 = 1;
            v60 = (char *)v1301;
            do
            {
LABEL_259:
              v283 = *(_QWORD *)v60;
              v60 += 8;
              v59 *= v283;
            }
            while (v60 != v1302);
            goto LABEL_260;
          }
          v278 = ((unint64_t)(v58 - 8) >> 3) + 1;
          v60 = (char *)v1301 + 8 * (v278 & 0x3FFFFFFFFFFFFFFELL);
          v279 = (char *)v1301 + 8;
          v280 = 1;
          v281 = v278 & 0x3FFFFFFFFFFFFFFELL;
          v282 = 1;
          do
          {
            v280 *= *(v279 - 1);
            v282 *= *v279;
            v279 += 2;
            v281 -= 2;
          }
          while (v281);
          v59 = v282 * v280;
          if (v278 != (v278 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_259;
LABEL_260:
          v284 = v58 >> 3;
          if ((unint64_t)(v58 >> 3) <= 1)
            v284 = 1;
          if (v284 < 2)
          {
            v285 = 0;
            v286 = 0;
LABEL_267:
            v292 = v284 - v285;
            v293 = 8 * v285;
            v294 = (uint64_t *)((char *)v1303 + v293);
            v295 = (uint64_t *)((char *)v1301 + v293);
            do
            {
              v296 = *v295++;
              v297 = v296 - 1;
              v298 = *v294++;
              v286 += v298 * v297;
              --v292;
            }
            while (v292);
            goto LABEL_269;
          }
          v287 = 0;
          v288 = 0;
          v285 = v284 & 0xFFFFFFFFFFFFFFFELL;
          v289 = (char *)v1301 + 8;
          v290 = (char *)v1303 + 8;
          v291 = v284 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v287 += *(v290 - 1) * (*(v289 - 1) - 1);
            v288 += *v290 * (*v289 - 1);
            v289 += 2;
            v290 += 2;
            v291 -= 2;
          }
          while (v291);
          v286 = v288 + v287;
          if (v284 != v285)
            goto LABEL_267;
LABEL_269:
          if (v59 != v286 + 1)
LABEL_861:
            nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()();
LABEL_270:
          v299 = v1300;
          if (v1300)
          {
            v300 = (unint64_t *)&v1300->__shared_owners_;
            do
              v301 = __ldxr(v300);
            while (__stxr(v301 + 1, v300));
          }
          if (v1341)
            goto LABEL_1028;
          v302 = v1338 - v1337;
          if (v1338 == v1337)
            goto LABEL_1029;
          v303 = (uint64_t)v1335;
          if (!v1335)
            goto LABEL_633;
          if ((unint64_t)(v302 - 8) < 8)
          {
            v303 = 1;
            v304 = v1337;
            do
            {
LABEL_632:
              v792 = *(_QWORD *)v304;
              v304 += 8;
              v303 *= v792;
            }
            while (v304 != v1338);
            goto LABEL_633;
          }
          v787 = ((unint64_t)(v302 - 8) >> 3) + 1;
          v304 = &v1337[8 * (v787 & 0x3FFFFFFFFFFFFFFELL)];
          v788 = v1337 + 8;
          v789 = 1;
          v790 = v787 & 0x3FFFFFFFFFFFFFFELL;
          v791 = 1;
          do
          {
            v789 *= *(v788 - 1);
            v791 *= *v788;
            v788 += 2;
            v790 -= 2;
          }
          while (v790);
          v303 = v791 * v789;
          if (v787 != (v787 & 0x3FFFFFFFFFFFFFFELL))
            goto LABEL_632;
LABEL_633:
          v793 = v302 >> 3;
          if ((unint64_t)(v302 >> 3) <= 1)
            v793 = 1;
          if (v793 < 2)
          {
            v794 = 0;
            v795 = 0;
LABEL_640:
            v801 = v793 - v794;
            v802 = 8 * v794;
            v803 = &v1339[v802];
            v804 = &v1337[v802];
            do
            {
              v805 = *(_QWORD *)v804;
              v804 += 8;
              v806 = v805 - 1;
              v807 = *(_QWORD *)v803;
              v803 += 8;
              v795 += v807 * v806;
              --v801;
            }
            while (v801);
            goto LABEL_642;
          }
          v796 = 0;
          v797 = 0;
          v794 = v793 & 0xFFFFFFFFFFFFFFFELL;
          v798 = v1337 + 8;
          v799 = v1339 + 8;
          v800 = v793 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            v796 += *(v799 - 1) * (*(v798 - 1) - 1);
            v797 += *v799 * (*v798 - 1);
            v798 += 2;
            v799 += 2;
            v800 -= 2;
          }
          while (v800);
          v795 = v797 + v796;
          if (v793 != v794)
            goto LABEL_640;
LABEL_642:
          if (v303 != v795 + 1)
LABEL_1028:
            nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()();
          v808 = v1338 - v1337;
          if (v1338 != v1337)
          {
            v809 = v808 >> 3;
            if ((unint64_t)(v808 >> 3) <= 1)
              v809 = 1;
            if (v809 >= 2)
            {
              v812 = 0;
              v813 = 0;
              v810 = v809 & 0xFFFFFFFFFFFFFFFELL;
              v814 = v1337 + 8;
              v815 = v1339 + 8;
              v816 = v809 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                v812 += *(v815 - 1) * (*(v814 - 1) - 1);
                v813 += *v815 * (*v814 - 1);
                v814 += 2;
                v815 += 2;
                v816 -= 2;
              }
              while (v816);
              v811 = v813 + v812;
              if (v809 == v810)
                goto LABEL_653;
            }
            else
            {
              v810 = 0;
              v811 = 0;
            }
            v817 = v809 - v810;
            v818 = 8 * v810;
            v819 = &v1339[v818];
            v820 = &v1337[v818];
            do
            {
              v821 = *(_QWORD *)v820;
              v820 += 8;
              v822 = v821 - 1;
              v823 = *(_QWORD *)v819;
              v819 += 8;
              v811 += v823 * v822;
              --v817;
            }
            while (v817);
LABEL_653:
            v824 = v811 + 1;
            goto LABEL_1030;
          }
LABEL_1029:
          v824 = 0;
LABEL_1030:
          v1197 = v1341 + v824;
          if (v1197)
          {
            v1198 = 0;
            v1199 = v1335;
            do
            {
              LOWORD(_S0) = *(_WORD *)(v57 + 2 * v1198);
              LOWORD(_S1) = *(_WORD *)v1199;
              __asm
              {
                FCVT            S2, H0
                FCVT            S3, H1
              }
              if (_S2 >= _S3)
                _S0 = _S1;
              *(_WORD *)v1199 = _S0;
              v1199 = (int *)((char *)v1199 + 2);
              v1198 = (v1198 + 1) % v56;
              --v1197;
            }
            while (v1197);
          }
          if (v299)
          {
            v1203 = (unint64_t *)&v299->__shared_owners_;
            do
              v1204 = __ldaxr(v1203);
            while (__stlxr(v1204 - 1, v1203));
            if (!v1204)
            {
              ((void (*)(std::__shared_weak_count *))v299->__on_zero_shared)(v299);
              std::__shared_weak_count::__release_weak(v299);
            }
          }
          if (v1339)
          {
            v1340 = v1339;
            operator delete(v1339);
          }
          if (v1337)
          {
            v1338 = v1337;
            operator delete(v1337);
          }
          v1158 = v1336;
          if (v1336)
          {
            v1205 = (unint64_t *)&v1336->__shared_owners_;
            do
              v1160 = __ldaxr(v1205);
            while (__stlxr(v1160 - 1, v1205));
LABEL_1107:
            if (!v1160)
            {
              ((void (*)(std::__shared_weak_count *))v1158->__on_zero_shared)(v1158);
              std::__shared_weak_count::__release_weak(v1158);
            }
          }
LABEL_1109:
          if (v1303)
          {
            v1304 = v1303;
            operator delete(v1303);
          }
          if (v1301)
          {
            v1302 = (char *)v1301;
            operator delete(v1301);
          }
          v1231 = v1300;
          if (v1300)
          {
            v1232 = (unint64_t *)&v1300->__shared_owners_;
            do
              v1233 = __ldaxr(v1232);
            while (__stlxr(v1233 - 1, v1232));
            if (!v1233)
            {
              ((void (*)(std::__shared_weak_count *))v1231->__on_zero_shared)(v1231);
              std::__shared_weak_count::__release_weak(v1231);
            }
          }
          if (v1296)
          {
            v1297 = v1296;
            operator delete(v1296);
          }
          if (v1294)
          {
            v1295 = v1294;
            operator delete(v1294);
          }
          v1185 = v1293;
          if (v1293)
          {
            v1234 = (unint64_t *)&v1293->__shared_owners_;
            do
              v1187 = __ldaxr(v1234);
            while (__stlxr(v1187 - 1, v1234));
LABEL_1261:
            if (!v1187)
            {
              ((void (*)(std::__shared_weak_count *))v1185->__on_zero_shared)(v1185);
              std::__shared_weak_count::__release_weak(v1185);
            }
          }
          return;
        default:
          printf("%d\n", *a1);
          nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()();
      }
    default:
      nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()();
  }
}

void sub_1912BFA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v61;

  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v61 = __ldaxr(p_shared_owners);
    while (__stlxr(v61 - 1, p_shared_owners));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  nitro::ndarray<float>::~ndarray((_QWORD *)(v58 - 112));
  nitro::ndarray_container::~ndarray_container((nitro::ndarray_container *)&a57);
  nitro::ndarray<float>::~ndarray(&a48);
  _Unwind_Resume(a1);
}

uint64_t nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0::~$_0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void nitro::nitro_builtins::ExpandDims(nitro::flexible_type const&,nitro::flexible_type const&)::$_0::operator()()
{
  file_logger *v0;
  file_logger *started;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *exception;
  _QWORD *v5;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 1340, 1);
    v2 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && *((_BYTE *)v2 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2 + 2, (uint64_t)"Unsupported type for ExpandDims operation", 41);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
    }
  }
  v5 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "Unsupported type for ExpandDims operation");
}

void sub_1912C00E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF0E8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2DAF0E8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E2DAF0E8;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_1912C0230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E2DAF0E8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v4 = a2[1];
  v6 = (char *)v4 - (char *)*a2;
  v46 = v6 >> 5;
  if (v6 != 32)
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  v7 = *v5;
  if (v4 == v5)
  {
    if (v7)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  else if (v7)
  {
    nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(&v46, v8, v5 + 2);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v46)
  {
    v10 = (unint64_t *)v46;
    *(_QWORD *)(a3 + 16) = v46;
    v11 = v47;
    *(_BYTE *)(a3 + 24) = v47;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
    }
  }
  switch(v47)
  {
    case 2u:
      v13 = (unint64_t *)v46;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v46;
        if (v46)
        {
          if (*(char *)(v46 + 31) < 0)
            operator delete(*(void **)(v46 + 8));
          v17 = (_QWORD *)v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_60;
        }
      }
      break;
    case 3u:
      v26 = (unint64_t *)v46;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v46;
        if (v46)
        {
          v30 = *(void **)(v46 + 8);
          if (v30)
          {
            *(_QWORD *)(v46 + 16) = v30;
            operator delete(v30);
          }
          v17 = (_QWORD *)v29;
          v18 = 0x1080C409938AC02;
          goto LABEL_60;
        }
      }
      break;
    case 4u:
      v19 = (unint64_t *)v46;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v46;
        if (v46)
        {
          v23 = *(_QWORD *)(v46 + 8);
          if (!v23)
            goto LABEL_45;
          v24 = *(_QWORD *)(v46 + 16);
          v25 = *(void **)(v46 + 8);
          if (v24 != v23)
          {
            do
            {
              v24 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v22 + 24, v24);
            }
            while (v24 != v23);
            v25 = *(void **)(v22 + 8);
          }
          *(_QWORD *)(v22 + 16) = v23;
          goto LABEL_44;
        }
      }
      break;
    case 5u:
      v31 = (unint64_t *)v46;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v22 = v46;
        if (v46)
        {
          v34 = *(_QWORD *)(v46 + 8);
          if (v34)
          {
            v35 = *(_QWORD *)(v46 + 16);
            v36 = *(void **)(v46 + 8);
            if (v35 != v34)
            {
              do
                v35 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v35 - 32);
              while (v35 != v34);
              v36 = *(void **)(v22 + 8);
            }
            *(_QWORD *)(v22 + 16) = v34;
            v25 = v36;
LABEL_44:
            operator delete(v25);
          }
LABEL_45:
          v17 = (_QWORD *)v22;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_60;
        }
      }
      break;
    case 9u:
      v37 = (unint64_t *)v46;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = (_QWORD *)v46;
        if (v46)
        {
          v41 = *(void **)(v46 + 56);
          if (v41)
          {
            *(_QWORD *)(v46 + 64) = v41;
            operator delete(v41);
          }
          v42 = (void *)v40[4];
          if (v42)
          {
            v40[5] = v42;
            operator delete(v42);
          }
          v43 = (std::__shared_weak_count *)v40[3];
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v17 = v40;
          v18 = 0x10B0C4002311774;
LABEL_60:
          result = (_QWORD *)MEMORY[0x19401CD90](v17, v18);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"nv.size()", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 18, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 18, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C0A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C0AE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF140;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2DAF140;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E2DAF140;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_1912C0C48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E2DAF140;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (uint64_t)v5 - *(_QWORD *)a2;
  v46 = v6 >> 5;
  if (v6 != 64)
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  v7 = *v4;
  if (v5 == v4)
  {
    if (v7)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    if (v5[4])
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  else
  {
    if (v7 || v4[4])
      nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
    v5 = v4;
  }
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(&v46, v8, v4 + 2, v5 + 6);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v46)
  {
    v10 = (unint64_t *)v46;
    *(_QWORD *)(a3 + 16) = v46;
    v11 = v47;
    *(_BYTE *)(a3 + 24) = v47;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
    }
  }
  switch(v47)
  {
    case 2u:
      v13 = (unint64_t *)v46;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v46;
        if (v46)
        {
          if (*(char *)(v46 + 31) < 0)
            operator delete(*(void **)(v46 + 8));
          v17 = (_QWORD *)v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_62;
        }
      }
      break;
    case 3u:
      v26 = (unint64_t *)v46;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v46;
        if (v46)
        {
          v30 = *(void **)(v46 + 8);
          if (v30)
          {
            *(_QWORD *)(v46 + 16) = v30;
            operator delete(v30);
          }
          v17 = (_QWORD *)v29;
          v18 = 0x1080C409938AC02;
          goto LABEL_62;
        }
      }
      break;
    case 4u:
      v19 = (unint64_t *)v46;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v46;
        if (v46)
        {
          v23 = *(_QWORD *)(v46 + 8);
          if (!v23)
            goto LABEL_47;
          v24 = *(_QWORD *)(v46 + 16);
          v25 = *(void **)(v46 + 8);
          if (v24 != v23)
          {
            do
            {
              v24 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v22 + 24, v24);
            }
            while (v24 != v23);
            v25 = *(void **)(v22 + 8);
          }
          *(_QWORD *)(v22 + 16) = v23;
          goto LABEL_46;
        }
      }
      break;
    case 5u:
      v31 = (unint64_t *)v46;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v22 = v46;
        if (v46)
        {
          v34 = *(_QWORD *)(v46 + 8);
          if (v34)
          {
            v35 = *(_QWORD *)(v46 + 16);
            v36 = *(void **)(v46 + 8);
            if (v35 != v34)
            {
              do
                v35 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v35 - 32);
              while (v35 != v34);
              v36 = *(void **)(v22 + 8);
            }
            *(_QWORD *)(v22 + 16) = v34;
            v25 = v36;
LABEL_46:
            operator delete(v25);
          }
LABEL_47:
          v17 = (_QWORD *)v22;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_62;
        }
      }
      break;
    case 9u:
      v37 = (unint64_t *)v46;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = (_QWORD *)v46;
        if (v46)
        {
          v41 = *(void **)(v46 + 56);
          if (v41)
          {
            *(_QWORD *)(v46 + 64) = v41;
            operator delete(v41);
          }
          v42 = (void *)v40[4];
          if (v42)
          {
            v40[5] = v42;
            operator delete(v42);
          }
          v43 = (std::__shared_weak_count *)v40[3];
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v17 = v40;
          v18 = 0x10B0C4002311774;
LABEL_62:
          result = (_QWORD *)MEMORY[0x19401CD90](v17, v18);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"nv.size()", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 27, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 27, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C14D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C1540(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF198;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2DAF198;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E2DAF198;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_1912C16A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E2DAF198;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (uint64_t)v5 - *(_QWORD *)a2;
  v46 = v6 >> 5;
  if (v6 != 96)
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  v7 = *v4;
  if (v5 == v4)
  {
    if (v7)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  else
  {
    if (v7 || v4[4] || v4[8])
      nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
    v5 = v4;
  }
  if (v5[4])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if (v5[8])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(&v46, v8, v4 + 2, v5 + 6, v5 + 10);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v46)
  {
    v10 = (unint64_t *)v46;
    *(_QWORD *)(a3 + 16) = v46;
    v11 = v47;
    *(_BYTE *)(a3 + 24) = v47;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
    }
  }
  switch(v47)
  {
    case 2u:
      v13 = (unint64_t *)v46;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v46;
        if (v46)
        {
          if (*(char *)(v46 + 31) < 0)
            operator delete(*(void **)(v46 + 8));
          v17 = (_QWORD *)v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_64;
        }
      }
      break;
    case 3u:
      v26 = (unint64_t *)v46;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v46;
        if (v46)
        {
          v30 = *(void **)(v46 + 8);
          if (v30)
          {
            *(_QWORD *)(v46 + 16) = v30;
            operator delete(v30);
          }
          v17 = (_QWORD *)v29;
          v18 = 0x1080C409938AC02;
          goto LABEL_64;
        }
      }
      break;
    case 4u:
      v19 = (unint64_t *)v46;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v46;
        if (v46)
        {
          v23 = *(_QWORD *)(v46 + 8);
          if (!v23)
            goto LABEL_49;
          v24 = *(_QWORD *)(v46 + 16);
          v25 = *(void **)(v46 + 8);
          if (v24 != v23)
          {
            do
            {
              v24 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v22 + 24, v24);
            }
            while (v24 != v23);
            v25 = *(void **)(v22 + 8);
          }
          *(_QWORD *)(v22 + 16) = v23;
          goto LABEL_48;
        }
      }
      break;
    case 5u:
      v31 = (unint64_t *)v46;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v22 = v46;
        if (v46)
        {
          v34 = *(_QWORD *)(v46 + 8);
          if (v34)
          {
            v35 = *(_QWORD *)(v46 + 16);
            v36 = *(void **)(v46 + 8);
            if (v35 != v34)
            {
              do
                v35 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v35 - 32);
              while (v35 != v34);
              v36 = *(void **)(v22 + 8);
            }
            *(_QWORD *)(v22 + 16) = v34;
            v25 = v36;
LABEL_48:
            operator delete(v25);
          }
LABEL_49:
          v17 = (_QWORD *)v22;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_64;
        }
      }
      break;
    case 9u:
      v37 = (unint64_t *)v46;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = (_QWORD *)v46;
        if (v46)
        {
          v41 = *(void **)(v46 + 56);
          if (v41)
          {
            *(_QWORD *)(v46 + 64) = v41;
            operator delete(v41);
          }
          v42 = (void *)v40[4];
          if (v42)
          {
            v40[5] = v42;
            operator delete(v42);
          }
          v43 = (std::__shared_weak_count *)v40[3];
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v17 = v40;
          v18 = 0x10B0C4002311774;
LABEL_64:
          result = (_QWORD *)MEMORY[0x19401CD90](v17, v18);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"nv.size()", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"3", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 36, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 36, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C1F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C1FBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF248;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2DAF248;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E2DAF248;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_1912C2120(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E2DAF248;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (uint64_t)v5 - *(_QWORD *)a2;
  v46 = v6 >> 5;
  if (v6 != 160)
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  v7 = *v4;
  if (v5 == v4)
  {
    if (v7)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  else
  {
    if (v7 || v4[4] || v4[8] || v4[12] || v4[16])
      nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
    v5 = v4;
  }
  if (v5[4])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if (v5[8])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if (v5[12])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if (v5[16])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(&v46, v8, v4 + 2, v5 + 6, v5 + 10, v5 + 14, v5 + 18);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v46)
  {
    v10 = (unint64_t *)v46;
    *(_QWORD *)(a3 + 16) = v46;
    v11 = v47;
    *(_BYTE *)(a3 + 24) = v47;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
    }
  }
  switch(v47)
  {
    case 2u:
      v13 = (unint64_t *)v46;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v46;
        if (v46)
        {
          if (*(char *)(v46 + 31) < 0)
            operator delete(*(void **)(v46 + 8));
          v17 = (_QWORD *)v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_68;
        }
      }
      break;
    case 3u:
      v26 = (unint64_t *)v46;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v46;
        if (v46)
        {
          v30 = *(void **)(v46 + 8);
          if (v30)
          {
            *(_QWORD *)(v46 + 16) = v30;
            operator delete(v30);
          }
          v17 = (_QWORD *)v29;
          v18 = 0x1080C409938AC02;
          goto LABEL_68;
        }
      }
      break;
    case 4u:
      v19 = (unint64_t *)v46;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v46;
        if (v46)
        {
          v23 = *(_QWORD *)(v46 + 8);
          if (!v23)
            goto LABEL_53;
          v24 = *(_QWORD *)(v46 + 16);
          v25 = *(void **)(v46 + 8);
          if (v24 != v23)
          {
            do
            {
              v24 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v22 + 24, v24);
            }
            while (v24 != v23);
            v25 = *(void **)(v22 + 8);
          }
          *(_QWORD *)(v22 + 16) = v23;
          goto LABEL_52;
        }
      }
      break;
    case 5u:
      v31 = (unint64_t *)v46;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v22 = v46;
        if (v46)
        {
          v34 = *(_QWORD *)(v46 + 8);
          if (v34)
          {
            v35 = *(_QWORD *)(v46 + 16);
            v36 = *(void **)(v46 + 8);
            if (v35 != v34)
            {
              do
                v35 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v35 - 32);
              while (v35 != v34);
              v36 = *(void **)(v22 + 8);
            }
            *(_QWORD *)(v22 + 16) = v34;
            v25 = v36;
LABEL_52:
            operator delete(v25);
          }
LABEL_53:
          v17 = (_QWORD *)v22;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_68;
        }
      }
      break;
    case 9u:
      v37 = (unint64_t *)v46;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = (_QWORD *)v46;
        if (v46)
        {
          v41 = *(void **)(v46 + 56);
          if (v41)
          {
            *(_QWORD *)(v46 + 64) = v41;
            operator delete(v41);
          }
          v42 = (void *)v40[4];
          if (v42)
          {
            v40[5] = v42;
            operator delete(v42);
          }
          v43 = (std::__shared_weak_count *)v40[3];
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v17 = v40;
          v18 = 0x10B0C4002311774;
LABEL_68:
          result = (_QWORD *)MEMORY[0x19401CD90](v17, v18);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_"
                                "S4_S4_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"nv.size()", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"5", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 55, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 55, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C2A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C2A90(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E2DAF1F0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E2DAF1F0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_1E2DAF1F0;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      return v2;
    }
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  v2[4] = v4;
  return v2;
}

void sub_1912C2BF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_1E2DAF1F0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  unint64_t *v10;
  int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = (uint64_t)v5 - *(_QWORD *)a2;
  v46 = v6 >> 5;
  if (v6 != 128)
    nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()();
  v7 = *v4;
  if (v5 == v4)
  {
    if (v7)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  }
  else
  {
    if (v7 || v4[4] || v4[8] || v4[12])
      nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
    v5 = v4;
  }
  if (v5[4])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if (v5[8])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  if (v5[12])
    nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
  v8 = *(_QWORD *)(a1 + 32);
  if (!v8)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _QWORD *, _QWORD *, _QWORD *, _QWORD *))(*(_QWORD *)v8 + 48))(&v46, v8, v4 + 2, v5 + 6, v5 + 10, v5 + 14);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if ((uint64_t *)(a3 + 16) != &v46)
  {
    v10 = (unint64_t *)v46;
    *(_QWORD *)(a3 + 16) = v46;
    v11 = v47;
    *(_BYTE *)(a3 + 24) = v47;
    if ((v11 - 2) < 4 || v11 == 9)
    {
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 + 1, v10));
    }
  }
  switch(v47)
  {
    case 2u:
      v13 = (unint64_t *)v46;
      do
      {
        v14 = __ldaxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
      {
        v16 = v46;
        if (v46)
        {
          if (*(char *)(v46 + 31) < 0)
            operator delete(*(void **)(v46 + 8));
          v17 = (_QWORD *)v16;
          v18 = 0x1012C404EF22A49;
          goto LABEL_66;
        }
      }
      break;
    case 3u:
      v26 = (unint64_t *)v46;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v29 = v46;
        if (v46)
        {
          v30 = *(void **)(v46 + 8);
          if (v30)
          {
            *(_QWORD *)(v46 + 16) = v30;
            operator delete(v30);
          }
          v17 = (_QWORD *)v29;
          v18 = 0x1080C409938AC02;
          goto LABEL_66;
        }
      }
      break;
    case 4u:
      v19 = (unint64_t *)v46;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = v46;
        if (v46)
        {
          v23 = *(_QWORD *)(v46 + 8);
          if (!v23)
            goto LABEL_51;
          v24 = *(_QWORD *)(v46 + 16);
          v25 = *(void **)(v46 + 8);
          if (v24 != v23)
          {
            do
            {
              v24 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100](v22 + 24, v24);
            }
            while (v24 != v23);
            v25 = *(void **)(v22 + 8);
          }
          *(_QWORD *)(v22 + 16) = v23;
          goto LABEL_50;
        }
      }
      break;
    case 5u:
      v31 = (unint64_t *)v46;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v22 = v46;
        if (v46)
        {
          v34 = *(_QWORD *)(v46 + 8);
          if (v34)
          {
            v35 = *(_QWORD *)(v46 + 16);
            v36 = *(void **)(v46 + 8);
            if (v35 != v34)
            {
              do
                v35 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v35 - 32);
              while (v35 != v34);
              v36 = *(void **)(v22 + 8);
            }
            *(_QWORD *)(v22 + 16) = v34;
            v25 = v36;
LABEL_50:
            operator delete(v25);
          }
LABEL_51:
          v17 = (_QWORD *)v22;
          v18 = 0x1020C405E66F15BLL;
          goto LABEL_66;
        }
      }
      break;
    case 9u:
      v37 = (unint64_t *)v46;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = (_QWORD *)v46;
        if (v46)
        {
          v41 = *(void **)(v46 + 56);
          if (v41)
          {
            *(_QWORD *)(v46 + 64) = v41;
            operator delete(v41);
          }
          v42 = (void *)v40[4];
          if (v42)
          {
            v40[5] = v42;
            operator delete(v42);
          }
          v43 = (std::__shared_weak_count *)v40[3];
          if (v43)
          {
            p_shared_owners = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(p_shared_owners);
            while (__stlxr(v45 - 1, p_shared_owners));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v17 = v40;
          v18 = 0x10B0C4002311774;
LABEL_66:
          result = (_QWORD *)MEMORY[0x19401CD90](v17, v18);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtinsL16wrap_ft_functionENSt3__18functionIFNS_13flexible_typeERS3_S4_S4_S4_EEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0,std::allocator<nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void nitro::nitro_builtins::wrap_ft_function(std::function<nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>)::$_0::operator() const(std::vector<nitro::nitro_variable> &)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"nv.size()", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"4", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 45, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 45, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C34D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C353C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, _QWORD *a2)
{
  int v2;
  int v3;
  size_t v4;
  size_t v5;
  size_t v6;
  int v7;

  v2 = *((char *)a2 + 23);
  v3 = *((char *)a1 + 23);
  if (v3 >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  if (v3 < 0)
    a1 = (_QWORD *)*a1;
  if (v2 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = a2[1];
  if (v2 < 0)
    a2 = (_QWORD *)*a2;
  if (v5 >= v4)
    v6 = v4;
  else
    v6 = v5;
  v7 = memcmp(a1, a2, v6);
  if (v7)
    return v7 < 0;
  else
    return v4 < v5;
}

uint64_t std::string::compare[abi:ne180100](const void **a1, _BYTE *a2)
{
  char v2;
  size_t v3;
  const void **v4;
  size_t v5;
  size_t v6;
  uint64_t result;
  unsigned int v8;

  v2 = a2[23];
  if (*((char *)a1 + 23) < 0)
  {
    v4 = a1;
    a1 = (const void **)*a1;
    v3 = (size_t)v4[1];
  }
  else
  {
    v3 = *((unsigned __int8 *)a1 + 23);
  }
  if (v2 >= 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v2 < 0)
    a2 = *(_BYTE **)a2;
  if (v5 >= v3)
    v6 = v3;
  else
    v6 = v5;
  LODWORD(result) = memcmp(a1, a2, v6);
  if (v3 < v5)
    v8 = -1;
  else
    v8 = v5 < v3;
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

uint64_t nitro::ndarray_container::ndarray_container<double,(void *)0>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;

  *(_DWORD *)a1 = 10;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = (_BYTE *)a2[2];
  v7 = (_BYTE *)a2[3];
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = (char *)operator new(v7 - v8);
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v10;
    v11 = &v10[8 * (v9 >> 3)];
    *(_QWORD *)(a1 + 40) = v11;
    memcpy(v10, v8, v9);
    *(_QWORD *)(a1 + 32) = v11;
  }
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v13 = (_BYTE *)a2[5];
  v12 = (_BYTE *)a2[6];
  v14 = v12 - v13;
  if (v12 != v13)
  {
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = (char *)operator new(v12 - v13);
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v15;
    v16 = &v15[8 * (v14 >> 3)];
    *(_QWORD *)(a1 + 64) = v16;
    memcpy(v15, v13, v14);
    *(_QWORD *)(a1 + 56) = v16;
  }
  *(_QWORD *)(a1 + 72) = a2[8];
  return a1;
}

void sub_1912C374C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void *v6;
  void *v7;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 56) = v6;
    operator delete(v6);
  }
  v7 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 32) = v7;
    operator delete(v7);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"var[i].is_value()", 17);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 13, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 13, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C3A9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C3B04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::nitro_variable::value(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"m_instance == nullptr", 21);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/interpreter/nitro_variable.hpp", "operator()", 57, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::nitro_variable::value(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912C3D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C3F34(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912C3F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912C3F40);
}

void nitro::nitro_builtins::convert_slice_array_to_list(nitro::flexible_type const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"shape.size()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 670, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 670, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C4308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C4370(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACA68;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACA68;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACCD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACCD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return std::__invoke[abi:ne180100]<nitro::flexible_type (*&)(nitro::flexible_type,nitro::flexible_type const&),nitro::flexible_type&,nitro::flexible_type&>((uint64_t (**)(uint64_t *, uint64_t))(a1 + 8), a2, a3);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeES0_RKS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeES0_RKS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeES0_RKS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeES0_RKS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

uint64_t std::__invoke[abi:ne180100]<nitro::flexible_type (*&)(nitro::flexible_type,nitro::flexible_type const&),nitro::flexible_type&,nitro::flexible_type&>(uint64_t (**a1)(uint64_t *, uint64_t), uint64_t *a2, uint64_t a3)
{
  uint64_t (*v3)(uint64_t *, uint64_t);
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v41 = 0;
  v42 = 0;
  if (&v41 != a2)
  {
    v41 = *a2;
    v42 = *((_BYTE *)a2 + 8);
    if (v42 - 2 < 4 || v42 == 9)
    {
      v5 = (unint64_t *)v41;
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
  result = v3(&v41, a3);
  switch(v42)
  {
    case 2u:
      v8 = (unint64_t *)v41;
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        v11 = (_QWORD *)v41;
        if (v41)
        {
          if (*(char *)(v41 + 31) < 0)
            operator delete(*(void **)(v41 + 8));
          v12 = v11;
          v13 = 0x1012C404EF22A49;
          goto LABEL_58;
        }
      }
      break;
    case 3u:
      v14 = (unint64_t *)v41;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = (_QWORD *)v41;
        if (v41)
        {
          v18 = *(void **)(v41 + 8);
          if (v18)
          {
            *(_QWORD *)(v41 + 16) = v18;
            operator delete(v18);
          }
          v12 = v17;
          v13 = 0x1080C409938AC02;
          goto LABEL_58;
        }
      }
      break;
    case 4u:
      v19 = (unint64_t *)v41;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        v22 = (_QWORD *)v41;
        if (v41)
        {
          v23 = *(_QWORD *)(v41 + 8);
          if (!v23)
            goto LABEL_43;
          v24 = *(_QWORD *)(v41 + 16);
          v25 = *(void **)(v41 + 8);
          if (v24 != v23)
          {
            do
            {
              v24 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v22 + 3), v24);
            }
            while (v24 != v23);
            v25 = (void *)v22[1];
          }
          v22[2] = v23;
          goto LABEL_42;
        }
      }
      break;
    case 5u:
      v26 = (unint64_t *)v41;
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        v22 = (_QWORD *)v41;
        if (v41)
        {
          v29 = *(_QWORD *)(v41 + 8);
          if (v29)
          {
            v30 = *(_QWORD *)(v41 + 16);
            v31 = *(void **)(v41 + 8);
            if (v30 != v29)
            {
              do
                v30 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v30 - 32);
              while (v30 != v29);
              v31 = (void *)v22[1];
            }
            v22[2] = v29;
            v25 = v31;
LABEL_42:
            operator delete(v25);
          }
LABEL_43:
          v12 = v22;
          v13 = 0x1020C405E66F15BLL;
          goto LABEL_58;
        }
      }
      break;
    case 9u:
      v32 = (unint64_t *)v41;
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        v35 = (_QWORD *)v41;
        if (v41)
        {
          v36 = *(void **)(v41 + 56);
          if (v36)
          {
            *(_QWORD *)(v41 + 64) = v36;
            operator delete(v36);
          }
          v37 = (void *)v35[4];
          if (v37)
          {
            v35[5] = v37;
            operator delete(v37);
          }
          v38 = (std::__shared_weak_count *)v35[3];
          if (v38)
          {
            p_shared_owners = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(p_shared_owners);
            while (__stlxr(v40 - 1, p_shared_owners));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
          v12 = v35;
          v13 = 0x10B0C4002311774;
LABEL_58:
          result = MEMORY[0x19401CD90](v12, v13);
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_1912C4800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, __int16 a11, char a12, char a13)
{
  switch((char)a11)
  {
    case 2:
      nitro::nitro_builtins::TensorArrayGather(&a10);
      break;
    case 3:
      nitro::nitro_builtins::TensorArrayGather(&a10);
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 9:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACAC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACAC0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACB18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACB18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_RS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_RS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_RS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_RS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACC78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACC78;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERS0_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERS0_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERS0_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERS0_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type&)>,nitro::flexible_type ()(nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACB70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACB70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E2DAF090;
  return result;
}

void std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E2DAF090;
}

void std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::operator()(_QWORD *a1@<X1>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t *v44;
  void *v45;
  void *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t *v66;
  void *v67;
  void *v68;
  std::__shared_weak_count *v69;
  unint64_t *p_shared_owners;
  unint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  void *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  void *v92;
  void *v93;
  unint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  file_logger *v98;
  pthread_key_t *started;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *exception;
  char v104;
  unint64_t *v105;
  char v106;
  unint64_t *v107;
  unsigned __int8 v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)*a1;
  v4 = (_QWORD *)*a1;
  v5 = (uint64_t)(a1[1] - *a1) >> 5;
  if (a1[1] != *a1)
  {
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = (uint64_t)(a1[1] - *a1) >> 5;
    v7 = (_QWORD *)*a1;
    do
    {
      if (*v7)
        nitro::nitro_builtins::check_all_flexible_type(std::vector<nitro::nitro_variable> const&)::$_0::operator()();
      v7 += 4;
      --v6;
    }
    while (v6);
  }
  if (v5 == 4)
  {
    if (*v4)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    if (v4[4])
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    if (v4[8])
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    if (v4[12])
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    nitro::nitro_builtins::MatMul((uint64_t)(v3 + 2), (uint64_t)(v4 + 6), (uint64_t)(v4 + 10));
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17 = v107;
    *(_QWORD *)(a2 + 16) = v107;
    v18 = v108;
    *(_BYTE *)(a2 + 24) = v108;
    if ((v18 - 2) < 4 || v18 == 9)
    {
      do
        v19 = __ldaxr(v17);
      while (__stlxr(v19 + 1, v17));
      v18 = v108;
    }
    switch(v18)
    {
      case 2:
        do
        {
          v20 = __ldaxr(v107);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v107));
        if (!v21)
        {
          v22 = v107;
          if (v107)
          {
LABEL_114:
            if (*((char *)v22 + 31) < 0)
              operator delete((void *)v22[1]);
            v75 = v22;
            v76 = 0x1012C404EF22A49;
            goto LABEL_158;
          }
        }
        break;
      case 3:
        do
        {
          v50 = __ldaxr(v107);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v107));
        if (!v51)
        {
          v52 = v107;
          if (v107)
          {
LABEL_121:
            v80 = (void *)v52[1];
            if (v80)
            {
              v52[2] = (unint64_t)v80;
              operator delete(v80);
            }
            v75 = v52;
            v76 = 0x1080C409938AC02;
            goto LABEL_158;
          }
        }
        break;
      case 4:
        do
        {
          v53 = __ldaxr(v107);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v107));
        if (!v54)
        {
          v55 = v107;
          if (v107)
          {
            v56 = v107[1];
            if (!v56)
              goto LABEL_143;
            v57 = v107[2];
            v58 = (void *)v107[1];
            if (v57 != v56)
            {
              do
              {
                v57 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v107 + 3), v57);
              }
              while (v57 != v56);
LABEL_131:
              v58 = (void *)v55[1];
            }
LABEL_132:
            v55[2] = v56;
            goto LABEL_142;
          }
        }
        break;
      case 5:
        do
        {
          v59 = __ldaxr(v107);
          v60 = v59 - 1;
        }
        while (__stlxr(v60, v107));
        if (!v60)
        {
          v55 = v107;
          if (v107)
          {
            v61 = v107[1];
            if (v61)
            {
              v62 = v107[2];
              v63 = v107[1];
              if (v62 != v61)
              {
                do
                  v62 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v62 - 32);
                while (v62 != v61);
LABEL_140:
                v63 = v55[1];
              }
LABEL_141:
              v55[2] = v61;
              v58 = (void *)v63;
LABEL_142:
              operator delete(v58);
            }
LABEL_143:
            v75 = v55;
            v76 = 0x1020C405E66F15BLL;
            goto LABEL_158;
          }
        }
        break;
      case 9:
        do
        {
          v64 = __ldaxr(v107);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v107));
        if (!v65)
        {
          v66 = v107;
          if (v107)
          {
            v67 = (void *)v107[7];
            if (v67)
            {
              v107[8] = (unint64_t)v67;
              operator delete(v67);
            }
            v68 = (void *)v66[4];
            if (v68)
            {
              v66[5] = (unint64_t)v68;
              operator delete(v68);
            }
            v69 = (std::__shared_weak_count *)v66[3];
            if (v69)
            {
              p_shared_owners = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(p_shared_owners);
              while (__stlxr(v71 - 1, p_shared_owners));
LABEL_155:
              if (!v71)
              {
                ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                std::__shared_weak_count::__release_weak(v69);
              }
            }
LABEL_157:
            v75 = v66;
            v76 = 0x10B0C4002311774;
LABEL_158:
            MEMORY[0x19401CD90](v75, v76);
          }
        }
        break;
      default:
        return;
    }
  }
  else
  {
    if (v5 != 2)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        v98 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v98, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 91, 1);
        v100 = pthread_getspecific(started[74]);
        if (v100 && *((_BYTE *)v100 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100 + 2, (uint64_t)"Check failed: ", 14);
        v101 = pthread_getspecific(started[74]);
        if (v101 && *((_BYTE *)v101 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101 + 2, (uint64_t)"false", 5);
        v102 = pthread_getspecific(started[74]);
        if (v102 && *((_BYTE *)v102 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102 + 2, (uint64_t)":\n", 2);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 91, "Unexpected number of arguments for Matmul", v95, v96, v97, v104);
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      *exception = "assertion failure";
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    if (*v4)
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    if (v4[4])
      nitro::nitro_variable::value(void)::{lambda(void)#1}::operator()();
    v106 = 0;
    v105 = 0;
    nitro::nitro_builtins::MatMul((uint64_t)(v3 + 2), (uint64_t)(v4 + 6), (uint64_t)&v105);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v8 = v107;
    *(_QWORD *)(a2 + 16) = v107;
    v9 = v108;
    *(_BYTE *)(a2 + 24) = v108;
    if ((v9 - 2) < 4 || v9 == 9)
    {
      do
        v10 = __ldaxr(v8);
      while (__stlxr(v10 + 1, v8));
      v9 = v108;
    }
    switch(v9)
    {
      case 2:
        v11 = v107;
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          v14 = v107;
          if (v107)
          {
            if (*((char *)v107 + 31) < 0)
              operator delete((void *)v107[1]);
            v15 = v14;
            v16 = 0x1012C404EF22A49;
            goto LABEL_78;
          }
        }
        break;
      case 3:
        v23 = v107;
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          v26 = v107;
          if (v107)
          {
            v27 = (void *)v107[1];
            if (v27)
            {
              v107[2] = (unint64_t)v27;
              operator delete(v27);
            }
            v15 = v26;
            v16 = 0x1080C409938AC02;
            goto LABEL_78;
          }
        }
        break;
      case 4:
        v28 = v107;
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = v107;
          if (v107)
          {
            v32 = v107[1];
            if (!v32)
              goto LABEL_63;
            v33 = v107[2];
            v34 = (void *)v107[1];
            if (v33 != v32)
            {
              do
              {
                v33 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v31 + 3), v33);
              }
              while (v33 != v32);
              v34 = (void *)v31[1];
            }
            v31[2] = v32;
            goto LABEL_62;
          }
        }
        break;
      case 5:
        v35 = v107;
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          v31 = v107;
          if (v107)
          {
            v38 = v107[1];
            if (v38)
            {
              v39 = v107[2];
              v40 = v107[1];
              if (v39 != v38)
              {
                do
                  v39 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v39 - 32);
                while (v39 != v38);
                v40 = v31[1];
              }
              v31[2] = v38;
              v34 = (void *)v40;
LABEL_62:
              operator delete(v34);
            }
LABEL_63:
            v15 = v31;
            v16 = 0x1020C405E66F15BLL;
            goto LABEL_78;
          }
        }
        break;
      case 9:
        v41 = v107;
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          v44 = v107;
          if (v107)
          {
            v45 = (void *)v107[7];
            if (v45)
            {
              v107[8] = (unint64_t)v45;
              operator delete(v45);
            }
            v46 = (void *)v44[4];
            if (v46)
            {
              v44[5] = (unint64_t)v46;
              operator delete(v46);
            }
            v47 = (std::__shared_weak_count *)v44[3];
            if (v47)
            {
              v48 = (unint64_t *)&v47->__shared_owners_;
              do
                v49 = __ldaxr(v48);
              while (__stlxr(v49 - 1, v48));
              if (!v49)
              {
                ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
                std::__shared_weak_count::__release_weak(v47);
              }
            }
            v15 = v44;
            v16 = 0x10B0C4002311774;
LABEL_78:
            MEMORY[0x19401CD90](v15, v16);
          }
        }
        break;
      default:
        break;
    }
    v107 = 0;
    v108 = 0;
    switch(v106)
    {
      case 2:
        v72 = v105;
        do
        {
          v73 = __ldaxr(v72);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v72));
        if (!v74)
        {
          v22 = v105;
          if (v105)
            goto LABEL_114;
        }
        break;
      case 3:
        v77 = v105;
        do
        {
          v78 = __ldaxr(v77);
          v79 = v78 - 1;
        }
        while (__stlxr(v79, v77));
        if (!v79)
        {
          v52 = v105;
          if (v105)
            goto LABEL_121;
        }
        break;
      case 4:
        v81 = v105;
        do
        {
          v82 = __ldaxr(v81);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v81));
        if (!v83)
        {
          v55 = v105;
          if (v105)
          {
            v56 = v105[1];
            if (!v56)
              goto LABEL_143;
            v84 = v105[2];
            v58 = (void *)v105[1];
            if (v84 != v56)
            {
              do
              {
                v84 -= 16;
                std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v55 + 3), v84);
              }
              while (v84 != v56);
              goto LABEL_131;
            }
            goto LABEL_132;
          }
        }
        break;
      case 5:
        v85 = v105;
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          v55 = v105;
          if (v105)
          {
            v61 = v105[1];
            if (!v61)
              goto LABEL_143;
            v88 = v105[2];
            v63 = v105[1];
            if (v88 != v61)
            {
              do
                v88 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v88 - 32);
              while (v88 != v61);
              goto LABEL_140;
            }
            goto LABEL_141;
          }
        }
        break;
      case 9:
        v89 = v105;
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          v66 = v105;
          if (v105)
          {
            v92 = (void *)v105[7];
            if (v92)
            {
              v105[8] = (unint64_t)v92;
              operator delete(v92);
            }
            v93 = (void *)v66[4];
            if (v93)
            {
              v66[5] = (unint64_t)v93;
              operator delete(v93);
            }
            v69 = (std::__shared_weak_count *)v66[3];
            if (v69)
            {
              v94 = (unint64_t *)&v69->__shared_owners_;
              do
                v71 = __ldaxr(v94);
              while (__stlxr(v71 - 1, v94));
              goto LABEL_155;
            }
            goto LABEL_157;
          }
        }
        break;
      default:
        return;
    }
  }
}

uint64_t std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0"
    || ((v3 & (unint64_t)"ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN5nitro14nitro_builtins17register_builtinsERNS_23nitro_execution_contextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0,std::allocator<nitro::nitro_builtins::register_builtins(nitro::nitro_execution_context &)::$_0>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable> &)>::target_type()
{
}

void std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACD28;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACD28;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE"
    || ((v3 & (unint64_t)"PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro14nitro_variableERKNSt3__16vectorIS0_NS1_9allocatorIS0_EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&),std::allocator<nitro::nitro_variable (*)(std::vector<nitro::nitro_variable> const&)>,nitro::nitro_variable ()(std::vector<nitro::nitro_variable>&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACC20;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACC20;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5, a6);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

void std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::~__func()
{
  JUMPOUT(0x19401CD90);
}

_QWORD *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E2DACBC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E2DACBC8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5);
}

uint64_t std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "PFN5nitro13flexible_typeERKS0_S2_S2_S2_E"
    || ((v3 & (unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_E" & 0x8000000000000000) != 0) != __OFSUB__(v3, "PFN5nitro13flexible_typeERKS0_S2_S2_S2_E")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"PFN5nitro13flexible_typeERKS0_S2_S2_S2_E" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&),std::allocator<nitro::flexible_type (*)(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)>,nitro::flexible_type ()(nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&,nitro::flexible_type&)>::target_type()
{
}

_QWORD *std::pair<nitro::atomic<unsigned long>,std::string>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = *(_QWORD *)a2;
  v3 = (std::string *)(a1 + 1);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    v3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>::get_elements_copy(void)::{lambda(int const&)#1}>(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  char *v3;
  char *v4;
  size_t v5;
  uint64_t v7;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  unint64_t v72;

  v4 = (char *)a1[2];
  v3 = (char *)a1[3];
  v5 = v3 - v4;
  if (v3 == v4)
    return;
  v7 = *a1;
  if (!*a1)
    return;
  if (v5 - 8 < 8)
  {
    v10 = 1;
    v11 = (char *)a1[2];
    do
    {
LABEL_8:
      v17 = *(_QWORD *)v11;
      v11 += 8;
      v10 *= v17;
    }
    while (v11 != v3);
    goto LABEL_9;
  }
  v12 = ((v5 - 8) >> 3) + 1;
  v11 = &v4[8 * (v12 & 0x3FFFFFFFFFFFFFFELL)];
  v13 = v4 + 8;
  v14 = 1;
  v15 = v12 & 0x3FFFFFFFFFFFFFFELL;
  v16 = 1;
  do
  {
    v14 *= *(v13 - 1);
    v16 *= *v13;
    v13 += 2;
    v15 -= 2;
  }
  while (v15);
  v10 = v16 * v14;
  if (v12 != (v12 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v10)
    return;
  v18 = (uint64_t)v5 >> 3;
  if ((uint64_t)v5 >> 3 == 3)
  {
    v35 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v36 = 0;
      v37 = a1[8];
      v38 = (_QWORD *)a1[5];
      v39 = *((_QWORD *)v4 + 1);
      v40 = v39;
      do
      {
        if (v40)
        {
          v41 = 0;
          v42 = *((_QWORD *)v4 + 2);
          v43 = v37;
          do
          {
            if (v42)
            {
              v44 = 0;
              v45 = *a3 + 1;
              v46 = *a2 + 4 * *a3;
              v47 = v43;
              do
              {
                v48 = *(_DWORD *)(v7 + 4 * v47);
                *a3 = v45 + v44;
                *(_DWORD *)(v46 + 4 * v44) = v48;
                v47 += v38[2];
                ++v44;
                v42 = *((_QWORD *)v4 + 2);
              }
              while (v44 < v42);
              v39 = *((_QWORD *)v4 + 1);
            }
            v43 += v38[1];
            ++v41;
          }
          while (v41 < v39);
          v35 = *(_QWORD *)v4;
          v40 = v39;
        }
        v37 += *v38;
        ++v36;
      }
      while (v36 < v35);
    }
  }
  else
  {
    if (v18 != 2)
    {
      if (v18 == 1)
      {
        if (*(_QWORD *)v4)
        {
          v19 = 0;
          v20 = a1[8];
          v21 = (_QWORD *)a1[5];
          v22 = *a3 + 1;
          v23 = *a2 + 4 * *a3;
          do
          {
            v24 = *(_DWORD *)(v7 + 4 * v20);
            *a3 = v22 + v19;
            *(_DWORD *)(v23 + 4 * v19) = v24;
            v20 += *v21;
            ++v19;
          }
          while (v19 < *(_QWORD *)v4);
        }
        return;
      }
      if ((v5 & 0x8000000000000000) != 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v49 = operator new(v5);
      bzero(v49, v5 & 0xFFFFFFFFFFFFFFF8);
      v50 = *a2;
      if (v5 >> 3 <= 1)
        v51 = 1;
      else
        v51 = v5 >> 3;
      v52 = a1[5];
      while (v51 >= 2)
      {
        v55 = 0;
        v56 = 0;
        v57 = v51 & 0x1FFFFFFFFFFFFFFELL;
        v58 = (_QWORD *)(v52 + 8);
        v59 = v49 + 1;
        do
        {
          v55 += *(v58 - 1) * *(v59 - 1);
          v56 += *v58 * *v59;
          v59 += 2;
          v58 += 2;
          v57 -= 2;
        }
        while (v57);
        v53 = v56 + v55;
        v54 = v51 & 0x1FFFFFFFFFFFFFFELL;
        if (v51 != (v51 & 0x1FFFFFFFFFFFFFFELL))
          goto LABEL_45;
LABEL_47:
        v67 = *(_DWORD *)(v7 + 4 * v53);
        v68 = (*a3)++;
        *(_DWORD *)(v50 + 4 * v68) = v67;
        if ((int)(v5 >> 3) >= 1)
        {
          v69 = (v5 >> 3) + 1;
          v70 = v5 >> 3;
          while (1)
          {
            v71 = (v69 - 2);
            v72 = v49[v71] + 1;
            v49[v71] = v72;
            if (v72 < *(_QWORD *)&v4[v71 * 8])
              break;
            v49[(v69 - 2)] = 0;
            LODWORD(v70) = v70 - 1;
            if ((unint64_t)--v69 <= 1)
              goto LABEL_53;
          }
          if ((int)v70 > 0)
            continue;
        }
LABEL_53:
        operator delete(v49);
        return;
      }
      v53 = 0;
      v54 = 0;
LABEL_45:
      v60 = v51 - v54;
      v61 = v54;
      v62 = (uint64_t *)(v52 + 8 * v54);
      v63 = &v49[v61];
      do
      {
        v65 = *v63++;
        v64 = v65;
        v66 = *v62++;
        v53 += v66 * v64;
        --v60;
      }
      while (v60);
      goto LABEL_47;
    }
    v25 = *(_QWORD *)v4;
    if (*(_QWORD *)v4)
    {
      v26 = 0;
      v27 = a1[8];
      v28 = (_QWORD *)a1[5];
      v29 = *((_QWORD *)v4 + 1);
      do
      {
        if (v29)
        {
          v30 = 0;
          v31 = *a3 + 1;
          v32 = *a2 + 4 * *a3;
          v33 = v27;
          do
          {
            v34 = *(_DWORD *)(v7 + 4 * v33);
            *a3 = v31 + v30;
            *(_DWORD *)(v32 + 4 * v30) = v34;
            v33 += v28[1];
            ++v30;
            v29 = *((_QWORD *)v4 + 1);
          }
          while (v30 < v29);
          v25 = *(_QWORD *)v4;
        }
        v27 += *v28;
        ++v26;
      }
      while (v26 < v25);
    }
  }
}

void sub_1912C5DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t nitro::ndarray_container::ndarray_container<float,(void *)0>(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v38;
  void *__dst;
  std::__shared_weak_count *v40;

  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = (uint64_t *)(a1 + 24);
  v11 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  __dst = 0;
  v40 = 0;
  v13 = operator new[]();
  std::shared_ptr<float>::reset[abi:ne180100]<float,std::default_delete<float []>,void>(&__dst, v13);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v14 - *(_QWORD *)a2);
  *(_DWORD *)a1 = 9;
  if (v10 != (uint64_t *)a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v15 = *(char **)(a1 + 24);
  v16 = *(char **)(a1 + 32);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    v18 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    v19 = v18 - a5;
    if (v18 != a5)
    {
      v20 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v16 >= v20)
      {
        v22 = v17 >> 3;
        v23 = v20 - (_QWORD)v15;
        if (v23 >> 2 <= (unint64_t)((v17 >> 3) + 1))
          v24 = v22 + 1;
        else
          v24 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = v24;
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v22];
        *(_QWORD *)(a1 + 24) = v26;
        *(_QWORD *)v26 = v19;
        v21 = v26 + 8;
        *(_QWORD *)(a1 + 32) = v21;
        *(_QWORD *)(a1 + 40) = &v25[8 * v38];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v16 = v19;
        v21 = v16 + 8;
      }
      *(_QWORD *)(a1 + 32) = v21;
    }
  }
  if (v11 != (uint64_t *)a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *v12 = a5;
  v28 = __dst;
  v27 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  nitro::impl::fill_shape_and_stride(v10, v11, v12);
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_1912C6048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 56) = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 32) = v9;
    operator delete(v9);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

void std::vector<nitro::ndarray_container>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 4);
        if (v6)
        {
          *((_QWORD *)v4 - 3) = v6;
          operator delete(v6);
        }
        v7 = (void *)*((_QWORD *)v4 - 7);
        if (v7)
        {
          *((_QWORD *)v4 - 6) = v7;
          operator delete(v7);
        }
        v8 = (std::__shared_weak_count *)*((_QWORD *)v4 - 8);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v4 -= 80;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container const&>(int64x2_t *a1, const nitro::ndarray_container *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  char *v18;
  int64x2_t v19;
  char *v20;
  int64x2_t *v21;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999)
    v6 = 0x333333333333333;
  else
    v6 = v4;
  v21 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x333333333333333)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(80 * v6);
  }
  else
  {
    v7 = 0;
  }
  v18 = v7;
  v19.i64[0] = (uint64_t)&v7[80 * v3];
  v20 = &v7[80 * v6];
  nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)v19.i64[0], a2);
  v8 = v19.i64[0];
  v9 = v19.i64[0] + 80;
  v19.i64[1] = v19.i64[0] + 80;
  v11 = a1->i64[0];
  v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    v15 = vdupq_n_s64(v10);
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = v10 + v12;
      v14 = v8 + v12;
      *(_DWORD *)(v14 - 80) = *(_DWORD *)(v10 + v12 - 80);
      *(_OWORD *)(v14 - 72) = *(_OWORD *)(v10 + v12 - 72);
      *(_QWORD *)(v13 - 72) = 0;
      *(_QWORD *)(v13 - 64) = 0;
      *(_QWORD *)(v14 - 56) = 0;
      *(_QWORD *)(v14 - 48) = 0;
      *(_QWORD *)(v14 - 40) = 0;
      *(_OWORD *)(v14 - 56) = *(_OWORD *)(v10 + v12 - 56);
      *(_QWORD *)(v14 - 40) = *(_QWORD *)(v10 + v12 - 40);
      *(_QWORD *)(v13 - 56) = 0;
      *(_QWORD *)(v13 - 48) = 0;
      *(_QWORD *)(v13 - 40) = 0;
      *(_QWORD *)(v14 - 32) = 0;
      *(_QWORD *)(v14 - 24) = 0;
      *(_QWORD *)(v14 - 16) = 0;
      *(_OWORD *)(v14 - 32) = *(_OWORD *)(v10 + v12 - 32);
      *(_QWORD *)(v14 - 16) = *(_QWORD *)(v10 + v12 - 16);
      *(_QWORD *)(v13 - 32) = 0;
      *(_QWORD *)(v13 - 24) = 0;
      *(_QWORD *)(v13 - 16) = 0;
      *(_QWORD *)(v14 - 8) = *(_QWORD *)(v10 + v12 - 8);
      v12 -= 80;
    }
    while (v10 + v12 != v11);
    v15 = *a1;
    v9 = v19.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  v19 = v15;
  v16 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v20;
  v20 = v16;
  v18 = (char *)v15.i64[0];
  std::__split_buffer<nitro::ndarray_container>::~__split_buffer((uint64_t)&v18);
  return v9;
}

void sub_1912C6304(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<nitro::ndarray_container>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<nitro::ndarray_container>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 80;
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
    v5 = *(void **)(i - 56);
    if (v5)
    {
      *(_QWORD *)(i - 48) = v5;
      operator delete(v5);
    }
    v6 = *(std::__shared_weak_count **)(i - 64);
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayScatter(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C66D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C6740(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"start", 5);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912C6A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<unsigned long,(void *)0>(unsigned long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912C6C00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912C6C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912C6C0CLL);
}

void nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"start", 5);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912C6F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<int,(void *)0>(int)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 43, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912C70C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912C70DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912C70D4);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0>(nitro::nitro_builtins::TensorArrayWrite(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type&)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912C740C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912C7474(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"start", 5);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 47, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912C7790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"end", 3);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">", 1);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"start", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">", 1);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912C7AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 47, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912C7C94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912C7CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912C7CA0);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 48, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912C7E00(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912C7E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912C7E0CLL);
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(_DWORD *a1, float *a2)
{
  double v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  double v17;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *v54;
  uint64_t *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  void *v60;
  uint64_t *v61;
  void *__p;
  void *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  char *v66;
  char *v67;
  void *v68;
  void *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  char *v72;
  char *v73;
  void *v74;
  void *v75;

  switch(*a1)
  {
    case 3:
      nitro::ndarray<int>::ndarray((uint64_t)&v64, (uint64_t)a1);
      if (v67 == v66 || v64 == 0)
        goto LABEL_32;
      v5 = v67 - v66 - 8;
      if (v5 < 8)
      {
        v6 = 1;
        v7 = v66;
        do
        {
LABEL_29:
          v27 = *(_QWORD *)v7;
          v7 += 8;
          v6 *= v27;
        }
        while (v7 != v67);
        goto LABEL_30;
      }
      v22 = (v5 >> 3) + 1;
      v7 = &v66[8 * (v22 & 0x3FFFFFFFFFFFFFFELL)];
      v23 = v66 + 8;
      v24 = 1;
      v25 = v22 & 0x3FFFFFFFFFFFFFFELL;
      v26 = 1;
      do
      {
        v24 *= *(v23 - 1);
        v26 *= *v23;
        v23 += 2;
        v25 -= 2;
      }
      while (v25);
      v6 = v26 * v24;
      if (v22 != (v22 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_29;
LABEL_30:
      if (v6)
      {
        *(float *)&v3 = *a2;
        nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(float)::{lambda(int &)#1}>(&v64, v3);
      }
LABEL_32:
      if (v68)
      {
        v69 = v68;
        operator delete(v68);
      }
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
      v28 = v65;
      if (!v65)
        return;
      p_shared_owners = (unint64_t *)&v65->__shared_owners_;
      do
        v30 = __ldaxr(p_shared_owners);
      while (__stlxr(v30 - 1, p_shared_owners));
      goto LABEL_81;
    case 5:
      nitro::ndarray<unsigned char>::ndarray((uint64_t)&v70, (uint64_t)a1);
      if (v73 == v72 || v70 == 0)
        goto LABEL_60;
      v14 = v73 - v72 - 8;
      if (v14 < 8)
      {
        v15 = 1;
        v16 = v72;
        do
        {
LABEL_57:
          v43 = *(_QWORD *)v16;
          v16 += 8;
          v15 *= v43;
        }
        while (v16 != v73);
        goto LABEL_58;
      }
      v38 = (v14 >> 3) + 1;
      v16 = &v72[8 * (v38 & 0x3FFFFFFFFFFFFFFELL)];
      v39 = v72 + 8;
      v40 = 1;
      v41 = v38 & 0x3FFFFFFFFFFFFFFELL;
      v42 = 1;
      do
      {
        v40 *= *(v39 - 1);
        v42 *= *v39;
        v39 += 2;
        v41 -= 2;
      }
      while (v41);
      v15 = v42 * v40;
      if (v38 != (v38 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_57;
LABEL_58:
      if (v15)
        nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(float)::{lambda(unsigned char &)#1}>(&v70, *a2);
LABEL_60:
      if (v74)
      {
        v75 = v74;
        operator delete(v74);
      }
      if (v72)
      {
        v73 = v72;
        operator delete(v72);
      }
      v28 = v71;
      if (!v71)
        return;
      v44 = (unint64_t *)&v71->__shared_owners_;
      do
        v30 = __ldaxr(v44);
      while (__stlxr(v30 - 1, v44));
      goto LABEL_81;
    case 9:
      nitro::ndarray<float>::ndarray((uint64_t)&v52, (uint64_t)a1);
      if (v55 == v54 || v52 == 0)
        goto LABEL_74;
      v19 = (char *)v55 - (_BYTE *)v54 - 8;
      if (v19 < 8)
      {
        v20 = 1;
        v21 = (uint64_t *)v54;
        do
        {
LABEL_71:
          v50 = *v21++;
          v20 *= v50;
        }
        while (v21 != v55);
        goto LABEL_72;
      }
      v45 = (v19 >> 3) + 1;
      v21 = (uint64_t *)((char *)v54 + 8 * (v45 & 0x3FFFFFFFFFFFFFFELL));
      v46 = (char *)v54 + 8;
      v47 = 1;
      v48 = v45 & 0x3FFFFFFFFFFFFFFELL;
      v49 = 1;
      do
      {
        v47 *= *(v46 - 1);
        v49 *= *v46;
        v46 += 2;
        v48 -= 2;
      }
      while (v48);
      v20 = v49 * v47;
      if (v45 != (v45 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_71;
LABEL_72:
      if (v20)
      {
        *(float *)&v17 = *a2;
        nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(float)::{lambda(float &)#1}>(&v52, v17);
      }
LABEL_74:
      if (v56)
      {
        v57 = v56;
        operator delete(v56);
      }
      if (v54)
      {
        v55 = (uint64_t *)v54;
        operator delete(v54);
      }
      v28 = v53;
      if (!v53)
        return;
      v51 = (unint64_t *)&v53->__shared_owners_;
      do
        v30 = __ldaxr(v51);
      while (__stlxr(v30 - 1, v51));
      goto LABEL_81;
    case 0xB:
      nitro::ndarray<half>::ndarray((uint64_t)&v58, (uint64_t)a1);
      if (v61 == v60 || v58 == 0)
        goto LABEL_46;
      v10 = (char *)v61 - (_BYTE *)v60 - 8;
      if (v10 < 8)
      {
        v11 = 1;
        v12 = (uint64_t *)v60;
        do
        {
LABEL_43:
          v36 = *v12++;
          v11 *= v36;
        }
        while (v12 != v61);
        goto LABEL_44;
      }
      v31 = (v10 >> 3) + 1;
      v12 = (uint64_t *)((char *)v60 + 8 * (v31 & 0x3FFFFFFFFFFFFFFELL));
      v32 = (char *)v60 + 8;
      v33 = 1;
      v34 = v31 & 0x3FFFFFFFFFFFFFFELL;
      v35 = 1;
      do
      {
        v33 *= *(v32 - 1);
        v35 *= *v32;
        v32 += 2;
        v34 -= 2;
      }
      while (v34);
      v11 = v35 * v33;
      if (v31 != (v31 & 0x3FFFFFFFFFFFFFFELL))
        goto LABEL_43;
LABEL_44:
      if (v11)
      {
        *(float *)&v8 = *a2;
        nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(float)::{lambda(half &)#1}>(&v58, v8);
      }
LABEL_46:
      if (__p)
      {
        v63 = __p;
        operator delete(__p);
      }
      if (v60)
      {
        v61 = (uint64_t *)v60;
        operator delete(v60);
      }
      v28 = v59;
      if (v59)
      {
        v37 = (unint64_t *)&v59->__shared_owners_;
        do
          v30 = __ldaxr(v37);
        while (__stlxr(v30 - 1, v37));
LABEL_81:
        if (!v30)
        {
          ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
          std::__shared_weak_count::__release_weak(v28);
        }
      }
      return;
    default:
      printf("%d\n", *a1);
      nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator()();
  }
}

void sub_1912C8220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912C8234(_Unwind_Exception *a1)
{
  uint64_t v1;

  nitro::ndarray<float>::~ndarray((_QWORD *)(v1 - 104));
  _Unwind_Resume(a1);
}

void sub_1912C8248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912C825C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  nitro::ndarray<float>::~ndarray(&a29);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  std::result_of<float ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912C84D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::element_visitor<nitro::ndarray<unsigned char>& nitro::ndarray<unsigned char>::operator+=<float>(float)::{lambda(unsigned char &)#1}>(_QWORD *a1, float a2)
{
  char *v2;
  char *v3;
  uint64_t v4;
  float v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  float v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;

  v2 = (char *)a1[2];
  v3 = (char *)a1[3];
  v4 = v3 - v2;
  if (v3 == v2 || !*a1)
    return;
  v6 = a2;
  if ((unint64_t)(v4 - 8) < 8)
  {
    v7 = 1;
    v8 = (char *)a1[2];
    do
    {
LABEL_8:
      v14 = *(_QWORD *)v8;
      v8 += 8;
      v7 *= v14;
    }
    while (v8 != v3);
    goto LABEL_9;
  }
  v9 = ((unint64_t)(v4 - 8) >> 3) + 1;
  v8 = &v2[8 * (v9 & 0x3FFFFFFFFFFFFFFELL)];
  v10 = v2 + 8;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = v4 >> 3;
  if (v4 >> 3 == 3)
  {
    v24 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v25 = 0;
      v26 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v27 = 0;
          v28 = v26;
          do
          {
            if (*((_QWORD *)v2 + 2))
            {
              v30 = 0;
              v31 = v28;
              do
              {
                LOBYTE(a2) = *(_BYTE *)(*a1 + v31);
                a2 = v6 + (float)LODWORD(a2);
                *(_BYTE *)(*a1 + v31) = (int)a2;
                v29 = (_QWORD *)a1[5];
                v31 += v29[2];
                ++v30;
                v2 = (char *)a1[2];
              }
              while (v30 < *((_QWORD *)v2 + 2));
            }
            else
            {
              v29 = (_QWORD *)a1[5];
            }
            v28 += v29[1];
            ++v27;
          }
          while (v27 < *((_QWORD *)v2 + 1));
          v24 = *(_QWORD *)v2;
        }
        else
        {
          v29 = (_QWORD *)a1[5];
        }
        v26 += *v29;
        ++v25;
      }
      while (v25 < v24);
    }
  }
  else
  {
    if (v15 != 2)
    {
      if (v15 == 1)
      {
        if (*(_QWORD *)v2)
        {
          v16 = 0;
          v17 = a1[8];
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v17);
            a2 = v6 + (float)LODWORD(a2);
            *(_BYTE *)(*a1 + v17) = (int)a2;
            v17 += *(_QWORD *)a1[5];
            ++v16;
          }
          while (v16 < *(_QWORD *)a1[2]);
        }
        return;
      }
      if (v4 < 0)
        std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
      v32 = operator new(v3 - v2);
      bzero(v32, v4 & 0xFFFFFFFFFFFFFFF8);
      if (v15 <= 1)
        v34 = 1;
      else
        v34 = v4 >> 3;
      while (1)
      {
        v35 = a1[5];
        if (v34 < 2)
          break;
        v38 = 0;
        v39 = 0;
        v40 = (_QWORD *)(v35 + 8);
        v41 = v34 & 0xFFFFFFFFFFFFFFFELL;
        v42 = v32 + 1;
        do
        {
          v38 += *(v40 - 1) * *(v42 - 1);
          v39 += *v40 * *v42;
          v42 += 2;
          v40 += 2;
          v41 -= 2;
        }
        while (v41);
        v36 = v39 + v38;
        v37 = v34 & 0xFFFFFFFFFFFFFFFELL;
        if (v34 != (v34 & 0xFFFFFFFFFFFFFFFELL))
          goto LABEL_47;
LABEL_49:
        LOBYTE(v33) = *(_BYTE *)(*a1 + v36);
        v33 = v6 + (float)LODWORD(v33);
        *(_BYTE *)(*a1 + v36) = (int)v33;
        if ((int)((unint64_t)v4 >> 3) >= 1)
        {
          v50 = a1[2];
          v51 = ((unint64_t)v4 >> 3) + 1;
          v52 = (unint64_t)v4 >> 3;
          while (1)
          {
            v53 = (v51 - 2);
            v54 = v32[v53] + 1;
            v32[v53] = v54;
            if (v54 < *(_QWORD *)(v50 + v53 * 8))
              break;
            v32[(v51 - 2)] = 0;
            LODWORD(v52) = v52 - 1;
            if ((unint64_t)--v51 <= 1)
              goto LABEL_55;
          }
          if ((int)v52 > 0)
            continue;
        }
LABEL_55:
        operator delete(v32);
        return;
      }
      v36 = 0;
      v37 = 0;
LABEL_47:
      v43 = v34 - v37;
      v44 = v37;
      v45 = (uint64_t *)(v35 + v44 * 8);
      v46 = &v32[v44];
      do
      {
        v48 = *v46++;
        v47 = v48;
        v49 = *v45++;
        v36 += v49 * v47;
        --v43;
      }
      while (v43);
      goto LABEL_49;
    }
    v18 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v19 = 0;
      v20 = a1[8];
      do
      {
        if (*((_QWORD *)v2 + 1))
        {
          v22 = 0;
          v23 = v20;
          do
          {
            LOBYTE(a2) = *(_BYTE *)(*a1 + v23);
            a2 = v6 + (float)LODWORD(a2);
            *(_BYTE *)(*a1 + v23) = (int)a2;
            v21 = (_QWORD *)a1[5];
            v23 += v21[1];
            ++v22;
            v2 = (char *)a1[2];
          }
          while (v22 < *((_QWORD *)v2 + 1));
          v18 = *(_QWORD *)v2;
        }
        else
        {
          v21 = (_QWORD *)a1[5];
        }
        v20 += *v21;
        ++v19;
      }
      while (v19 < v18);
    }
  }
}

void sub_1912C88C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<int>::element_visitor<nitro::ndarray<int>& nitro::ndarray<int>::operator+=<float>(float)::{lambda(int &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  int32x4_t *v22;
  unint64_t v23;
  int32x4_t v24;
  unint64_t v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  int32x4_t *v42;
  unint64_t v43;
  int32x4_t v44;
  unint64_t v45;
  uint64_t v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int32x4_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  int32x4_t *v67;
  unint64_t v68;
  int32x4_t v69;
  unint64_t v70;
  uint64_t v71;
  int *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  unint64_t v93;
  float v94;

  v94 = *(float *)&a2;
  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v48 = *v3;
    if (!*v3)
      return;
    v49 = 0;
    v50 = a1[8];
    v51 = v3[1];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v55 = v6 + 4 * v50 + 16;
    v56 = 4 * *v52;
    while (!v51)
    {
LABEL_38:
      v50 += v53;
      ++v49;
      v55 += v56;
      if (v49 == v48)
        return;
    }
    v57 = 0;
    v58 = v3[2];
    v59 = v52[1];
    v60 = v58 & 0xFFFFFFFFFFFFFFF8;
    v61 = (int32x4_t *)v55;
    v62 = v50;
    while (1)
    {
      if (v58)
      {
        v63 = 0;
        v64 = v52[2];
        v65 = v62;
        if (v58 < 8)
        {
          v66 = v94;
        }
        else
        {
          v66 = v94;
          if (v64 == 1)
          {
            v65 = v62 + v60;
            v67 = v61;
            v68 = v58 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v69 = vcvtq_s32_f32(vaddq_f32(v54, vcvtq_f32_s32(*v67)));
              v67[-1] = vcvtq_s32_f32(vaddq_f32(v54, vcvtq_f32_s32(v67[-1])));
              *v67 = v69;
              v67 += 2;
              v68 -= 8;
            }
            while (v68);
            v63 = v58 & 0xFFFFFFFFFFFFFFF8;
            v66 = v94;
            if (v58 == v60)
              goto LABEL_41;
          }
        }
        v70 = v58 - v63;
        v71 = 4 * v64;
        v72 = (int *)(v6 + 4 * v65);
        do
        {
          *v72 = (int)(float)(v66 + (float)*v72);
          v72 = (int *)((char *)v72 + v71);
          --v70;
        }
        while (v70);
      }
LABEL_41:
      v62 += v59;
      ++v57;
      v61 = (int32x4_t *)((char *)v61 + 4 * v59);
      if (v57 == v51)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v28 = *v3;
    if (!*v3)
      return;
    v29 = 0;
    v30 = a1[8];
    v31 = v3[1];
    v32 = (uint64_t *)a1[5];
    v33 = *v32;
    v34 = v31 & 0xFFFFFFFFFFFFFFF8;
    v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v36 = v6 + 4 * v30 + 16;
    v37 = 4 * *v32;
    while (1)
    {
      if (v31)
      {
        v38 = 0;
        v39 = v32[1];
        v40 = v30;
        if (v31 < 8)
        {
          v41 = v94;
        }
        else
        {
          v41 = v94;
          if (v39 == 1)
          {
            v40 = v30 + v34;
            v42 = (int32x4_t *)v36;
            v43 = v31 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v44 = vcvtq_s32_f32(vaddq_f32(v35, vcvtq_f32_s32(*v42)));
              v42[-1] = vcvtq_s32_f32(vaddq_f32(v35, vcvtq_f32_s32(v42[-1])));
              *v42 = v44;
              v42 += 2;
              v43 -= 8;
            }
            while (v43);
            v38 = v31 & 0xFFFFFFFFFFFFFFF8;
            v41 = v94;
            if (v31 == v34)
              goto LABEL_24;
          }
        }
        v45 = v31 - v38;
        v46 = 4 * v39;
        v47 = (int *)(v6 + 4 * v40);
        do
        {
          *v47 = (int)(float)(v41 + (float)*v47);
          v47 = (int *)((char *)v47 + v46);
          --v45;
        }
        while (v45);
      }
LABEL_24:
      v30 += v33;
      ++v29;
      v36 += v37;
      if (v29 == v28)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v73 = operator new(v4);
    bzero(v73, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v74 = 1;
    else
      v74 = v4 >> 3;
    v75 = a1[5];
    while (v74 >= 2)
    {
      v78 = 0;
      v79 = 0;
      v80 = v74 & 0x1FFFFFFFFFFFFFFELL;
      v81 = (_QWORD *)(v75 + 8);
      v82 = v73 + 1;
      do
      {
        v78 += *(v81 - 1) * *(v82 - 1);
        v79 += *v81 * *v82;
        v82 += 2;
        v81 += 2;
        v80 -= 2;
      }
      while (v80);
      v76 = v79 + v78;
      v77 = v74 & 0x1FFFFFFFFFFFFFFELL;
      if (v74 != (v74 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      *(_DWORD *)(v6 + 4 * v76) = (int)(float)(v94 + (float)*(int *)(v6 + 4 * v76));
      if ((int)(v4 >> 3) >= 1)
      {
        v90 = (v4 >> 3) + 1;
        v91 = v4 >> 3;
        while (1)
        {
          v92 = (v90 - 2);
          v93 = v73[v92] + 1;
          v73[v92] = v93;
          if (v93 < v3[v92])
            break;
          v73[(v90 - 2)] = 0;
          LODWORD(v91) = v91 - 1;
          if ((unint64_t)--v90 <= 1)
            goto LABEL_71;
        }
        if ((int)v91 > 0)
          continue;
      }
LABEL_71:
      operator delete(v73);
      return;
    }
    v76 = 0;
    v77 = 0;
LABEL_63:
    v83 = v74 - v77;
    v84 = v77;
    v85 = (uint64_t *)(v75 + 8 * v77);
    v86 = &v73[v84];
    do
    {
      v88 = *v86++;
      v87 = v88;
      v89 = *v85++;
      v76 += v89 * v87;
      --v83;
    }
    while (v83);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v22 = (int32x4_t *)(v6 + 4 * v18 + 16);
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v24 = vcvtq_s32_f32(vaddq_f32(v21, vcvtq_f32_s32(*v22)));
      v22[-1] = vcvtq_s32_f32(vaddq_f32(v21, vcvtq_f32_s32(v22[-1])));
      *v22 = v24;
      v22 += 2;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v25 = v16 - v17;
      v26 = 4 * v19;
      v27 = (int *)(v6 + 4 * v18);
      do
      {
        *v27 = (int)(float)(v94 + (float)*v27);
        v27 = (int *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_1912C8DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<half>::element_visitor<nitro::ndarray<half>& nitro::ndarray<half>::operator+=<float>(float)::{lambda(half &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float16x4_t *v22;
  unint64_t v23;
  float16x8_t v24;
  unint64_t v25;
  uint64_t v26;
  __int16 *v27;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  float16x4_t *v49;
  unint64_t v50;
  float16x8_t v51;
  unint64_t v52;
  uint64_t v53;
  __int16 *v54;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  float16x4_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  float16x4_t *v77;
  unint64_t v78;
  float16x8_t v79;
  unint64_t v80;
  uint64_t v81;
  __int16 *v82;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v107;
  size_t v108;
  uint64_t v109;
  unint64_t v110;
  float v111;

  v111 = *(float *)&a2;
  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v58 = *v3;
    if (!*v3)
      return;
    v59 = 0;
    v60 = a1[8];
    v61 = v3[1];
    v62 = (uint64_t *)a1[5];
    v63 = *v62;
    v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v65 = v6 + 2 * v60 + 16;
    v66 = 2 * *v62;
    while (!v61)
    {
LABEL_38:
      v60 += v63;
      ++v59;
      v65 += v66;
      if (v59 == v58)
        return;
    }
    v67 = 0;
    v68 = v3[2];
    v69 = v62[1];
    v70 = v68 & 0xFFFFFFFFFFFFFFF0;
    v71 = (float16x4_t *)v65;
    v72 = v60;
    while (1)
    {
      if (v68)
      {
        v73 = 0;
        v74 = v62[2];
        v75 = v72;
        if (v68 < 0x10)
        {
          v76 = v111;
        }
        else
        {
          v76 = v111;
          if (v74 == 1)
          {
            v75 = v72 + v70;
            v77 = v71;
            v78 = v68 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v79 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v64, vcvtq_f32_f16(*v77))), vaddq_f32(v64, vcvt_hight_f32_f16(*(float16x8_t *)v77->i8)));
              *(float16x8_t *)v77[-2].i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v64, vcvtq_f32_f16(v77[-2]))), vaddq_f32(v64, vcvt_hight_f32_f16(*(float16x8_t *)v77[-2].i8)));
              *(float16x8_t *)v77->i8 = v79;
              v77 += 4;
              v78 -= 16;
            }
            while (v78);
            v73 = v68 & 0xFFFFFFFFFFFFFFF0;
            v76 = v111;
            if (v68 == v70)
              goto LABEL_41;
          }
        }
        v80 = v68 - v73;
        v81 = 2 * v74;
        v82 = (__int16 *)(v6 + 2 * v75);
        do
        {
          _H1 = *v82;
          __asm { FCVT            S1, H1 }
          _S1 = v76 + _S1;
          __asm { FCVT            H1, S1 }
          *v82 = LOWORD(_S1);
          v82 = (__int16 *)((char *)v82 + v81);
          --v80;
        }
        while (v80);
      }
LABEL_41:
      v72 += v69;
      ++v67;
      v71 = (float16x4_t *)((char *)v71 + 2 * v69);
      if (v67 == v61)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v35 = *v3;
    if (!*v3)
      return;
    v36 = 0;
    v37 = a1[8];
    v38 = v3[1];
    v39 = (uint64_t *)a1[5];
    v40 = *v39;
    v41 = v38 & 0xFFFFFFFFFFFFFFF0;
    v42 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v43 = v6 + 2 * v37 + 16;
    v44 = 2 * *v39;
    while (1)
    {
      if (v38)
      {
        v45 = 0;
        v46 = v39[1];
        v47 = v37;
        if (v38 < 0x10)
        {
          v48 = v111;
        }
        else
        {
          v48 = v111;
          if (v46 == 1)
          {
            v47 = v37 + v41;
            v49 = (float16x4_t *)v43;
            v50 = v38 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v51 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v42, vcvtq_f32_f16(*v49))), vaddq_f32(v42, vcvt_hight_f32_f16(*(float16x8_t *)v49->i8)));
              *(float16x8_t *)v49[-2].i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v42, vcvtq_f32_f16(v49[-2]))), vaddq_f32(v42, vcvt_hight_f32_f16(*(float16x8_t *)v49[-2].i8)));
              *(float16x8_t *)v49->i8 = v51;
              v49 += 4;
              v50 -= 16;
            }
            while (v50);
            v45 = v38 & 0xFFFFFFFFFFFFFFF0;
            v48 = v111;
            if (v38 == v41)
              goto LABEL_24;
          }
        }
        v52 = v38 - v45;
        v53 = 2 * v46;
        v54 = (__int16 *)(v6 + 2 * v47);
        do
        {
          _H1 = *v54;
          __asm { FCVT            S1, H1 }
          _S1 = v48 + _S1;
          __asm { FCVT            H1, S1 }
          *v54 = LOWORD(_S1);
          v54 = (__int16 *)((char *)v54 + v53);
          --v52;
        }
        while (v52);
      }
LABEL_24:
      v37 += v40;
      ++v36;
      v43 += v44;
      if (v36 == v35)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v86 = operator new(v4);
    bzero(v86, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v87 = 1;
    else
      v87 = v4 >> 3;
    v88 = a1[5];
    while (v87 >= 2)
    {
      v91 = 0;
      v92 = 0;
      v93 = v87 & 0x1FFFFFFFFFFFFFFELL;
      v94 = (_QWORD *)(v88 + 8);
      v95 = v86 + 1;
      do
      {
        v91 += *(v94 - 1) * *(v95 - 1);
        v92 += *v94 * *v95;
        v95 += 2;
        v94 += 2;
        v93 -= 2;
      }
      while (v93);
      v89 = v92 + v91;
      v90 = v87 & 0x1FFFFFFFFFFFFFFELL;
      if (v87 != (v87 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      v103 = 2 * v89;
      _H0 = *(_WORD *)(v6 + v103);
      __asm { FCVT            S0, H0 }
      _S0 = v111 + _S0;
      __asm { FCVT            H0, S0 }
      *(_WORD *)(v6 + v103) = LOWORD(_S0);
      if ((int)(v4 >> 3) >= 1)
      {
        v107 = (v4 >> 3) + 1;
        v108 = v4 >> 3;
        while (1)
        {
          v109 = (v107 - 2);
          v110 = v86[v109] + 1;
          v86[v109] = v110;
          if (v110 < v3[v109])
            break;
          v86[(v107 - 2)] = 0;
          LODWORD(v108) = v108 - 1;
          if ((unint64_t)--v107 <= 1)
            goto LABEL_71;
        }
        if ((int)v108 > 0)
          continue;
      }
LABEL_71:
      operator delete(v86);
      return;
    }
    v89 = 0;
    v90 = 0;
LABEL_63:
    v96 = v87 - v90;
    v97 = v90;
    v98 = (uint64_t *)(v88 + 8 * v90);
    v99 = &v86[v97];
    do
    {
      v101 = *v99++;
      v100 = v101;
      v102 = *v98++;
      v89 += v102 * v100;
      --v96;
    }
    while (v96);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 0x10)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF0;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF0);
    v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v22 = (float16x4_t *)(v6 + 2 * v18 + 16);
    v23 = v16 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v24 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v21, vcvtq_f32_f16(*v22))), vaddq_f32(v21, vcvt_hight_f32_f16(*(float16x8_t *)v22->i8)));
      *(float16x8_t *)v22[-2].i8 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vaddq_f32(v21, vcvtq_f32_f16(v22[-2]))), vaddq_f32(v21, vcvt_hight_f32_f16(*(float16x8_t *)v22[-2].i8)));
      *(float16x8_t *)v22->i8 = v24;
      v22 += 4;
      v23 -= 16;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v25 = v16 - v17;
      v26 = 2 * v19;
      v27 = (__int16 *)(v6 + 2 * v18);
      do
      {
        _H0 = *v27;
        __asm { FCVT            S0, H0 }
        _S0 = v111 + _S0;
        __asm { FCVT            H0, S0 }
        *v27 = LOWORD(_S0);
        v27 = (__int16 *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_1912C9300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void nitro::ndarray<float>::element_visitor<nitro::ndarray<float>& nitro::ndarray<float>::operator+=<float>(float)::{lambda(float &)#1}>(uint64_t *a1, double a2)
{
  unint64_t *v2;
  unint64_t *v3;
  size_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t v24;
  unint64_t v25;
  uint64_t v26;
  float *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  float32x4_t *v42;
  unint64_t v43;
  float32x4_t v44;
  unint64_t v45;
  uint64_t v46;
  float *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  float32x4_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  float32x4_t *v67;
  unint64_t v68;
  float32x4_t v69;
  unint64_t v70;
  uint64_t v71;
  float *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  unint64_t v93;
  float v94;

  v94 = *(float *)&a2;
  v3 = (unint64_t *)a1[2];
  v2 = (unint64_t *)a1[3];
  v4 = (char *)v2 - (char *)v3;
  if (v2 == v3)
    return;
  v6 = *a1;
  if (!*a1)
    return;
  if (v4 - 8 < 8)
  {
    v7 = 1;
    v8 = (unint64_t *)a1[2];
    do
    {
LABEL_8:
      v14 = *v8++;
      v7 *= v14;
    }
    while (v8 != v2);
    goto LABEL_9;
  }
  v9 = ((v4 - 8) >> 3) + 1;
  v8 = &v3[v9 & 0x3FFFFFFFFFFFFFFELL];
  v10 = v3 + 1;
  v11 = 1;
  v12 = v9 & 0x3FFFFFFFFFFFFFFELL;
  v13 = 1;
  do
  {
    v11 *= *(v10 - 1);
    v13 *= *v10;
    v10 += 2;
    v12 -= 2;
  }
  while (v12);
  v7 = v13 * v11;
  if (v9 != (v9 & 0x3FFFFFFFFFFFFFFELL))
    goto LABEL_8;
LABEL_9:
  if (!v7)
    return;
  v15 = (uint64_t)v4 >> 3;
  if ((uint64_t)v4 >> 3 == 3)
  {
    v48 = *v3;
    if (!*v3)
      return;
    v49 = 0;
    v50 = a1[8];
    v51 = v3[1];
    v52 = (uint64_t *)a1[5];
    v53 = *v52;
    v54 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v55 = v6 + 4 * v50 + 16;
    v56 = 4 * *v52;
    while (!v51)
    {
LABEL_38:
      v50 += v53;
      ++v49;
      v55 += v56;
      if (v49 == v48)
        return;
    }
    v57 = 0;
    v58 = v3[2];
    v59 = v52[1];
    v60 = v58 & 0xFFFFFFFFFFFFFFF8;
    v61 = (float32x4_t *)v55;
    v62 = v50;
    while (1)
    {
      if (v58)
      {
        v63 = 0;
        v64 = v52[2];
        v65 = v62;
        if (v58 < 8)
        {
          v66 = v94;
        }
        else
        {
          v66 = v94;
          if (v64 == 1)
          {
            v65 = v62 + v60;
            v67 = v61;
            v68 = v58 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v69 = vaddq_f32(v54, *v67);
              v67[-1] = vaddq_f32(v54, v67[-1]);
              *v67 = v69;
              v67 += 2;
              v68 -= 8;
            }
            while (v68);
            v63 = v58 & 0xFFFFFFFFFFFFFFF8;
            v66 = v94;
            if (v58 == v60)
              goto LABEL_41;
          }
        }
        v70 = v58 - v63;
        v71 = 4 * v64;
        v72 = (float *)(v6 + 4 * v65);
        do
        {
          *v72 = v66 + *v72;
          v72 = (float *)((char *)v72 + v71);
          --v70;
        }
        while (v70);
      }
LABEL_41:
      v62 += v59;
      ++v57;
      v61 = (float32x4_t *)((char *)v61 + 4 * v59);
      if (v57 == v51)
        goto LABEL_38;
    }
  }
  if (v15 == 2)
  {
    v28 = *v3;
    if (!*v3)
      return;
    v29 = 0;
    v30 = a1[8];
    v31 = v3[1];
    v32 = (uint64_t *)a1[5];
    v33 = *v32;
    v34 = v31 & 0xFFFFFFFFFFFFFFF8;
    v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v36 = v6 + 4 * v30 + 16;
    v37 = 4 * *v32;
    while (1)
    {
      if (v31)
      {
        v38 = 0;
        v39 = v32[1];
        v40 = v30;
        if (v31 < 8)
        {
          v41 = v94;
        }
        else
        {
          v41 = v94;
          if (v39 == 1)
          {
            v40 = v30 + v34;
            v42 = (float32x4_t *)v36;
            v43 = v31 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v44 = vaddq_f32(v35, *v42);
              v42[-1] = vaddq_f32(v35, v42[-1]);
              *v42 = v44;
              v42 += 2;
              v43 -= 8;
            }
            while (v43);
            v38 = v31 & 0xFFFFFFFFFFFFFFF8;
            v41 = v94;
            if (v31 == v34)
              goto LABEL_24;
          }
        }
        v45 = v31 - v38;
        v46 = 4 * v39;
        v47 = (float *)(v6 + 4 * v40);
        do
        {
          *v47 = v41 + *v47;
          v47 = (float *)((char *)v47 + v46);
          --v45;
        }
        while (v45);
      }
LABEL_24:
      v30 += v33;
      ++v29;
      v36 += v37;
      if (v29 == v28)
        return;
    }
  }
  if (v15 != 1)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v73 = operator new(v4);
    bzero(v73, v4 & 0xFFFFFFFFFFFFFFF8);
    if (v4 >> 3 <= 1)
      v74 = 1;
    else
      v74 = v4 >> 3;
    v75 = a1[5];
    while (v74 >= 2)
    {
      v78 = 0;
      v79 = 0;
      v80 = v74 & 0x1FFFFFFFFFFFFFFELL;
      v81 = (_QWORD *)(v75 + 8);
      v82 = v73 + 1;
      do
      {
        v78 += *(v81 - 1) * *(v82 - 1);
        v79 += *v81 * *v82;
        v82 += 2;
        v81 += 2;
        v80 -= 2;
      }
      while (v80);
      v76 = v79 + v78;
      v77 = v74 & 0x1FFFFFFFFFFFFFFELL;
      if (v74 != (v74 & 0x1FFFFFFFFFFFFFFELL))
        goto LABEL_63;
LABEL_65:
      *(float *)(v6 + 4 * v76) = v94 + *(float *)(v6 + 4 * v76);
      if ((int)(v4 >> 3) >= 1)
      {
        v90 = (v4 >> 3) + 1;
        v91 = v4 >> 3;
        while (1)
        {
          v92 = (v90 - 2);
          v93 = v73[v92] + 1;
          v73[v92] = v93;
          if (v93 < v3[v92])
            break;
          v73[(v90 - 2)] = 0;
          LODWORD(v91) = v91 - 1;
          if ((unint64_t)--v90 <= 1)
            goto LABEL_71;
        }
        if ((int)v91 > 0)
          continue;
      }
LABEL_71:
      operator delete(v73);
      return;
    }
    v76 = 0;
    v77 = 0;
LABEL_63:
    v83 = v74 - v77;
    v84 = v77;
    v85 = (uint64_t *)(v75 + 8 * v77);
    v86 = &v73[v84];
    do
    {
      v88 = *v86++;
      v87 = v88;
      v89 = *v85++;
      v76 += v89 * v87;
      --v83;
    }
    while (v83);
    goto LABEL_65;
  }
  v16 = *v3;
  if (*v3)
  {
    v17 = 0;
    v18 = a1[8];
    v19 = *(_QWORD *)a1[5];
    if (v16 < 8)
      goto LABEL_19;
    if (v19 != 1)
      goto LABEL_19;
    v17 = v16 & 0xFFFFFFFFFFFFFFF8;
    v20 = v18 + (v16 & 0xFFFFFFFFFFFFFFF8);
    v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    v22 = (float32x4_t *)(v6 + 4 * v18 + 16);
    v23 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v24 = vaddq_f32(v21, *v22);
      v22[-1] = vaddq_f32(v21, v22[-1]);
      *v22 = v24;
      v22 += 2;
      v23 -= 8;
    }
    while (v23);
    v18 = v20;
    if (v16 != v17)
    {
LABEL_19:
      v25 = v16 - v17;
      v26 = 4 * v19;
      v27 = (float *)(v6 + 4 * v18);
      do
      {
        *v27 = v94 + *v27;
        v27 = (float *)((char *)v27 + v26);
        --v25;
      }
      while (v25);
    }
  }
}

void sub_1912C97A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::result_of<float ()(nitro::ndarray<float> &)>::type nitro::ndarray_container::visit<nitro::ndarray_container& nitro::ndarray_container::operator+=<float>(float)::{lambda(float)#1}>(float)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912C9900(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912C9914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912C990CLL);
}

void nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912C9B94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912C9D38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912C9D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912C9D44);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CA07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CA0E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CA420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CA488(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::elements(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CA714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912CA8B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CA8CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CA8C4);
}

void nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<unsigned char>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CAB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CACF0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CAD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CACFCLL);
}

void nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CAF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912CB128(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CB13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CB134);
}

void nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CB3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 414, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912CB560(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CB574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CB56CLL);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CB8A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CB90C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<int>::elements(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<int>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CBB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CBD3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CBD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CBD48);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CC080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CC0E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<half>::elements(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<half>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CC374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CC518(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CC52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CC524);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::BiasAdd(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CC85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CC8C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray<float>::elements(void)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20[8];
  void *v21[2];
  __int128 v22;
  int v23;
  uint64_t v24;
  std::locale v25;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24 = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v2;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v4, v20);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v19 = v0 + 24;
  v24 = v1;
  std::streambuf::basic_streambuf();
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v23 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray.hpp", 44);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"is_full()", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v25, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v25);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray.hpp", "operator()", 422, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v18 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v16 = v18;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v18 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v25.__locale_ = (std::locale::__imp *)&v19;
  nitro::ndarray<float>::elements(void)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CCB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CCCF4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CCD08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CCD00);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Sum(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CD038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CD0A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

char *std::vector<nitro::ndarray_container>::__push_back_slow_path<nitro::ndarray_container>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int64x2_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v22;
  int64x2_t v23;
  uint64_t v24;
  int64x2_t *v25;

  v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v4)
    v4 = 0x999999999999999ALL * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  else
    v5 = v4;
  v24 = 0;
  v25 = a1 + 1;
  if (v5 > 0x333333333333333)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v7 = (char *)operator new(80 * v5);
  v8 = &v7[80 * v3];
  *(_DWORD *)v8 = *(_DWORD *)a2;
  *(_OWORD *)(v8 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v9 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v23.i64[0] = (uint64_t)v8;
  v23.i64[1] = (uint64_t)v8;
  v22 = v7;
  *((_QWORD *)v8 + 7) = 0;
  *((_QWORD *)v8 + 8) = 0;
  *((_OWORD *)v8 + 3) = v9;
  *((_QWORD *)v8 + 8) = v10;
  *((_QWORD *)v8 + 9) = v11;
  v13 = a1->i64[0];
  v12 = a1->u64[1];
  if (v12 == a1->i64[0])
  {
    v17 = vdupq_n_s64(v12);
    v18 = &v7[80 * v3];
  }
  else
  {
    v14 = 0;
    do
    {
      v15 = v12 + v14;
      v16 = &v8[v14];
      *((_DWORD *)v16 - 20) = *(_DWORD *)(v12 + v14 - 80);
      *(_OWORD *)(v16 - 72) = *(_OWORD *)(v12 + v14 - 72);
      *(_QWORD *)(v15 - 72) = 0;
      *(_QWORD *)(v15 - 64) = 0;
      *((_QWORD *)v16 - 7) = 0;
      *((_QWORD *)v16 - 6) = 0;
      *((_QWORD *)v16 - 5) = 0;
      *(_OWORD *)(v16 - 56) = *(_OWORD *)(v12 + v14 - 56);
      *((_QWORD *)v16 - 5) = *(_QWORD *)(v12 + v14 - 40);
      *(_QWORD *)(v15 - 56) = 0;
      *(_QWORD *)(v15 - 48) = 0;
      *(_QWORD *)(v15 - 40) = 0;
      *((_QWORD *)v16 - 4) = 0;
      *((_QWORD *)v16 - 3) = 0;
      *((_QWORD *)v16 - 2) = 0;
      *((_OWORD *)v16 - 2) = *(_OWORD *)(v12 + v14 - 32);
      *((_QWORD *)v16 - 2) = *(_QWORD *)(v12 + v14 - 16);
      *(_QWORD *)(v15 - 32) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      *(_QWORD *)(v15 - 16) = 0;
      *((_QWORD *)v16 - 1) = *(_QWORD *)(v12 + v14 - 8);
      v14 -= 80;
    }
    while (v12 + v14 != v13);
    v17 = *a1;
    v18 = &v8[v14];
  }
  v19 = v8 + 80;
  a1->i64[0] = (uint64_t)v18;
  a1->i64[1] = (uint64_t)(v8 + 80);
  v23 = v17;
  v20 = a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)&v7[80 * v5];
  v24 = v20;
  v22 = (char *)v17.i64[0];
  std::__split_buffer<nitro::ndarray_container>::~__split_buffer((uint64_t)&v22);
  return v19;
}

uint64_t nitro::ndarray_container::ndarray_container<int,(void *)0>(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v38;
  void *__dst;
  std::__shared_weak_count *v40;

  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = (uint64_t *)(a1 + 24);
  v11 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  __dst = 0;
  v40 = 0;
  v13 = operator new[]();
  std::shared_ptr<int>::reset[abi:ne180100]<int,std::default_delete<int []>,void>(&__dst, v13);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v14 - *(_QWORD *)a2);
  *(_DWORD *)a1 = 3;
  if (v10 != (uint64_t *)a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v15 = *(char **)(a1 + 24);
  v16 = *(char **)(a1 + 32);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    v18 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
    v19 = v18 - a5;
    if (v18 != a5)
    {
      v20 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v16 >= v20)
      {
        v22 = v17 >> 3;
        v23 = v20 - (_QWORD)v15;
        if (v23 >> 2 <= (unint64_t)((v17 >> 3) + 1))
          v24 = v22 + 1;
        else
          v24 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = v24;
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v22];
        *(_QWORD *)(a1 + 24) = v26;
        *(_QWORD *)v26 = v19;
        v21 = v26 + 8;
        *(_QWORD *)(a1 + 32) = v21;
        *(_QWORD *)(a1 + 40) = &v25[8 * v38];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v16 = v19;
        v21 = v16 + 8;
      }
      *(_QWORD *)(a1 + 32) = v21;
    }
  }
  if (v11 != (uint64_t *)a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *v12 = a5;
  v28 = __dst;
  v27 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  nitro::impl::fill_shape_and_stride(v10, v11, v12);
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_1912CD4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<E5RT::MemoryObject>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 56) = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 32) = v9;
    operator delete(v9);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type::operator=<double>(uint64_t a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  void *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  void *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;

  switch(*(_BYTE *)(a1 + 8))
  {
    case 2:
      v4 = *(unint64_t **)a1;
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        v7 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          if (*((char *)v7 + 31) < 0)
            operator delete((void *)v7[1]);
          v8 = v7;
          v9 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v10 = *(unint64_t **)a1;
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        v13 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v14 = (void *)v13[1];
          if (v14)
          {
            v13[2] = (unint64_t)v14;
            operator delete(v14);
          }
          v8 = v13;
          v9 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v15 = *(unint64_t **)a1;
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        v18 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v19 = v18[1];
          if (!v19)
            goto LABEL_35;
          v20 = v18[2];
          v21 = (void *)v18[1];
          if (v20 != v19)
          {
            do
            {
              v20 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v18 + 3), v20);
            }
            while (v20 != v19);
            v21 = (void *)v18[1];
          }
          v18[2] = v19;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v22 = *(unint64_t **)a1;
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        v18 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v25 = v18[1];
          if (v25)
          {
            v26 = v18[2];
            v27 = (void *)v18[1];
            if (v26 != v25)
            {
              do
                v26 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v26 - 32);
              while (v26 != v25);
              v27 = (void *)v18[1];
            }
            v18[2] = v25;
            v21 = v27;
LABEL_34:
            operator delete(v21);
          }
LABEL_35:
          v8 = v18;
          v9 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v28 = *(unint64_t **)a1;
      do
      {
        v29 = __ldaxr(v28);
        v30 = v29 - 1;
      }
      while (__stlxr(v30, v28));
      if (!v30)
      {
        v31 = *(unint64_t **)a1;
        if (*(_QWORD *)a1)
        {
          v32 = (void *)v31[7];
          if (v32)
          {
            v31[8] = (unint64_t)v32;
            operator delete(v32);
          }
          v33 = (void *)v31[4];
          if (v33)
          {
            v31[5] = (unint64_t)v33;
            operator delete(v33);
          }
          v34 = (std::__shared_weak_count *)v31[3];
          if (v34)
          {
            p_shared_owners = (unint64_t *)&v34->__shared_owners_;
            do
              v36 = __ldaxr(p_shared_owners);
            while (__stlxr(v36 - 1, p_shared_owners));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          v8 = v31;
          v9 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v8, v9);
        }
      }
      break;
    default:
      break;
  }
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = *a2;
  return a1;
}

char *std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long const*>,std::__wrap_iter<unsigned long const*>>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  _OWORD *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char *v46;
  char *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 *v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  size_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char *v65;
  unint64_t v68;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFF8));
  v9 = a5 - 1;
  if (a5 < 1)
    return v8;
  v11 = __src;
  v13 = v7 >> 3;
  v15 = a1[1];
  v14 = a1[2];
  if (a5 > (uint64_t)(v14 - v15) >> 3)
  {
    v16 = a5 + ((uint64_t)(v15 - v6) >> 3);
    if (v16 >> 61)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v17 = v14 - v6;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v19 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      v20 = v18;
      v21 = operator new(8 * v18);
      v18 = v20;
      v8 = (char *)v19;
      v13 = v7 >> 3;
      v11 = __src;
    }
    else
    {
      v21 = 0;
    }
    v35 = &v21[8 * v13];
    v36 = &v35[8 * a5];
    v37 = v35;
    v38 = v11;
    if ((v9 & 0x1FFFFFFFFFFFFFFFuLL) < 7)
      goto LABEL_56;
    v37 = &v21[8 * v13];
    v38 = v11;
    if ((unint64_t)(&v21[v7 & 0xFFFFFFFFFFFFFFF8] - v11) < 0x20)
      goto LABEL_56;
    v39 = (v9 & 0x1FFFFFFFFFFFFFFFLL) + 1;
    v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
    v37 = &v35[v40];
    v38 = &v11[v40];
    v41 = (__int128 *)(v11 + 16);
    v42 = &v21[8 * v13 + 16];
    v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v44 = *v41;
      *(v42 - 1) = *(v41 - 1);
      *v42 = v44;
      v41 += 2;
      v42 += 2;
      v43 -= 4;
    }
    while (v43);
    if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      do
      {
        v45 = *(_QWORD *)v38;
        v38 += 8;
        *(_QWORD *)v37 = v45;
        v37 += 8;
      }
      while (v37 != v36);
    }
    v46 = &v21[8 * v13];
    if ((void *)v6 != a2)
    {
      v47 = v8;
      v46 = &v21[8 * v13];
      if ((unint64_t)(v7 - 8) < 0x68)
        goto LABEL_57;
      v47 = v8;
      v46 = &v21[8 * v13];
      if ((v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (unint64_t)&v21[v7 & 0xFFFFFFFFFFFFFFF8] < 0x20)
        goto LABEL_57;
      v48 = ((unint64_t)(v7 - 8) >> 3) + 1;
      v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFFCLL);
      v47 = &v8[-v49];
      v46 = &v35[-v49];
      v50 = 8 * v13 - 16;
      v51 = &v21[v50];
      v52 = (__int128 *)(v6 + v50);
      v53 = v48 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v54 = *v52;
        *(v51 - 1) = *(v52 - 1);
        *v51 = v54;
        v51 -= 2;
        v52 -= 2;
        v53 -= 4;
      }
      while (v53);
      if (v48 != (v48 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        do
        {
          v55 = *((_QWORD *)v47 - 1);
          v47 -= 8;
          *((_QWORD *)v46 - 1) = v55;
          v46 -= 8;
        }
        while (v47 != (char *)v6);
      }
    }
    v56 = &v21[8 * v18];
    v57 = v15 - (_QWORD)v8;
    if (v57)
      memmove(&v35[8 * a5], v8, v57);
    *a1 = (unint64_t)v46;
    a1[1] = (unint64_t)&v36[v57];
    a1[2] = (unint64_t)v56;
    if (v6)
      operator delete((void *)v6);
    return v35;
  }
  v22 = v15 - (_QWORD)v8;
  v23 = (uint64_t)(v15 - (_QWORD)v8) >> 3;
  if (v23 >= a5)
  {
    v24 = &__src[8 * a5];
    v26 = a1[1];
  }
  else
  {
    v24 = &__src[8 * v23];
    v25 = a4 - v24;
    if (a4 != v24)
    {
      v68 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
      memmove((void *)a1[1], &__src[8 * v23], a4 - v24);
      v13 = v7 >> 3;
      v8 = (char *)v68;
    }
    v26 = v15 + v25;
    a1[1] = v15 + v25;
    if (v22 < 1)
      return v8;
  }
  v27 = &v8[8 * a5];
  v28 = v26 - (_QWORD)v27;
  v29 = (uint64_t)(v26 - (_QWORD)v27) >> 3;
  v30 = (uint64_t *)(v26 - 8 * a5);
  v31 = (_QWORD *)v26;
  if ((unint64_t)v30 < v15)
  {
    v32 = (v7 & 0xFFFFFFFFFFFFFFF8) + v28;
    v33 = v32 + v6 + 8;
    if (v15 > v33)
      v33 = v15;
    v34 = v33 + ~v6 - v32;
    if (v34 < 0x58)
    {
      v31 = (_QWORD *)v26;
      do
      {
LABEL_45:
        v64 = *v30++;
        *v31++ = v64;
      }
      while ((unint64_t)v30 < v15);
      goto LABEL_46;
    }
    v31 = (_QWORD *)v26;
    if ((unint64_t)&v27[-(v7 & 0xFFFFFFFFFFFFFFF8) - v6] < 0x20)
      goto LABEL_45;
    v58 = (v34 >> 3) + 1;
    v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    v30 = (uint64_t *)((char *)v30 + v59);
    v31 = (_QWORD *)(v26 + v59);
    v60 = (_OWORD *)(v26 + 16);
    v61 = (__int128 *)(8 * v29 + 8 * v13 + v6 + 16);
    v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v63 = *v61;
      *(v60 - 1) = *(v61 - 1);
      *v60 = v63;
      v60 += 2;
      v61 += 2;
      v62 -= 4;
    }
    while (v62);
    if (v58 != (v58 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_45;
  }
LABEL_46:
  a1[1] = (unint64_t)v31;
  if ((char *)v26 != v27)
  {
    v65 = v8;
    memmove((void *)(v26 - 8 * v29), v8, v28);
    v8 = v65;
  }
  if (v24 != v11)
  {
    v35 = v8;
    memmove(v8, v11, v24 - v11);
    return v35;
  }
  return v8;
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"start", 5);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"0", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 53, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CDE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27[8];
  void *v28[2];
  __int128 v29;
  int v30;
  uint64_t v31;
  std::locale v32;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v31 = MEMORY[0x1E0DE4FE0] + 64;
  v26 = v2;
  *(uint64_t *)((char *)&v27[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v27[-1] + *(_QWORD *)(v26 - 24));
  std::ios_base::init(v4, v27);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v26 = v0 + 24;
  v31 = v1;
  std::streambuf::basic_streambuf();
  v27[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  v30 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", 54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"end", 3);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)">=", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"start", 5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v32.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v32, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)">=", 2);
  LOBYTE(v32.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v32, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 54, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v25 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v25 & 0x80u) == 0)
        v23 = v25;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  v32.__locale_ = (std::locale::__imp *)&v26;
  nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()();
}

void sub_1912CE190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#1}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 53, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912CE334(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CE348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CE340);
}

void nitro::slice_range::slice_range<long long,(void *)0>(long long,long long,long long)::{lambda(void)#2}::operator() const(void)::{lambda(void)#1}::operator()()
{
  file_logger *v0;
  file_logger *started;
  char *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v10;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "Nitro/EspressoNitro/src/numerics/ndarray_container.hpp", "operator()", 54, 1);
    std::stringbuf::str();
    v2 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && v2[280])
    {
      v3 = v2 + 16;
      if ((v10 & 0x80u) == 0)
        v4 = __p;
      else
        v4 = (void **)__p[0];
      if ((v10 & 0x80u) == 0)
        v5 = v10;
      else
        v5 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    }
    v6 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v6)
    {
      if (*((_BYTE *)v6 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(started);
        if (*((_DWORD *)started + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v10 < 0)
      operator delete(__p[0]);
  }
  v7 = __cxa_allocate_exception(0x18uLL);
  std::ostringstream::str[abi:ne180100]();
}

void sub_1912CE4A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1912CE4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1912CE4ACLL);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Slice(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CE7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CE84C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK_1d(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CEB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CEBF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>,std::__wrap_iter<std::pair<float,int> *>>(float *a1, float *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  float v17;
  unint64_t v18;

  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      while (1)
      {
        v16 = *a1;
        v17 = *(float *)v13;
        if (*a1 < *(float *)v13)
        {
          v14 = *(_DWORD *)(v13 + 4);
          v15 = *((_DWORD *)a1 + 1);
        }
        else
        {
          if (v17 < v16)
            goto LABEL_9;
          v15 = *((_DWORD *)a1 + 1);
          v14 = *(_DWORD *)(v13 + 4);
          if (v15 >= v14)
            goto LABEL_9;
        }
        *(float *)v13 = v16;
        *a1 = v17;
        *(_DWORD *)(v13 + 4) = v15;
        *((_DWORD *)a1 + 1) = v14;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>>((uint64_t)a1, a4, v9, (uint64_t)a1);
LABEL_9:
        v13 += 8;
        if (v13 == a3)
          goto LABEL_15;
      }
    }
    a3 = v6;
LABEL_15:
    if (v8 >= 9)
    {
      v18 = (unint64_t)v8 >> 3;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<std::pair<float,int> *>>(a1, v6, a4, v18);
        v6 -= 8;
      }
      while (v18-- > 2);
    }
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void> &,std::__wrap_iter<std::pair<float,int> *>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  int v20;

  if (a3 >= 2)
  {
    v4 = a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= (a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) | 1;
      v8 = result + 8 * v7;
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *(float *)(v8 + 8);
        if (v10 < *(float *)v8 || *(float *)v8 >= v10 && *(_DWORD *)(v8 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
        {
          v8 += 8;
          v7 = v9;
        }
      }
      v11 = *(float *)a4;
      v12 = *(float *)v8;
      if (*(float *)a4 >= *(float *)v8)
      {
        v13 = *(_DWORD *)(v8 + 4);
        if (v12 >= v11)
        {
          v14 = *(_DWORD *)(a4 + 4);
          if (v14 < v13)
            return result;
        }
        else
        {
          v14 = *(_DWORD *)(a4 + 4);
        }
        *(float *)a4 = v12;
        *(_DWORD *)(a4 + 4) = v13;
        if (v5 >= v7)
        {
          while (1)
          {
            v16 = 2 * v7;
            v7 = (2 * v7) | 1;
            v15 = result + 8 * v7;
            v17 = v16 + 2;
            if (v17 < a3)
            {
              v18 = *(float *)(v15 + 8);
              if (v18 < *(float *)v15
                || *(float *)v15 >= v18 && *(_DWORD *)(v15 + 12) < *(_DWORD *)(result + 8 * v7 + 4))
              {
                v15 += 8;
                v7 = v17;
              }
            }
            v19 = *(float *)v15;
            if (v11 < *(float *)v15)
              break;
            v20 = *(_DWORD *)(v15 + 4);
            if (v19 >= v11 && v14 < v20)
              break;
            *(float *)v8 = v19;
            *(_DWORD *)(v8 + 4) = v20;
            v8 = v15;
            if (v5 < v7)
              goto LABEL_14;
          }
        }
        v15 = v8;
LABEL_14:
        *(float *)v15 = v11;
        *(_DWORD *)(v15 + 4) = v14;
      }
    }
  }
  return result;
}

_DWORD *std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<void>,std::__wrap_iter<std::pair<float,int> *>>(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v5;
  int v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  float *v16;
  float v17;
  float v18;
  int v19;
  int v20;
  float *v21;
  int v22;
  unint64_t v23;
  float v24;

  if (a4 >= 2)
  {
    v4 = 0;
    v5 = *result;
    v6 = result[1];
    v7 = result;
    do
    {
      v8 = v7;
      v9 = v4 + 1;
      v7 += 2 * v4 + 2;
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v11 < a4)
      {
        v12 = *((float *)v7 + 2);
        if (v12 < *(float *)v7 || *(float *)v7 >= v12 && v7[3] < v8[2 * v9 + 1])
        {
          v7 += 2;
          v4 = v11;
        }
      }
      *v8 = *v7;
      v8[1] = v7[1];
    }
    while (v4 <= (uint64_t)((unint64_t)(a4 - 2) >> 1));
    if (v7 == (_DWORD *)(a2 - 8))
    {
      *v7 = v5;
      v7[1] = v6;
      return result;
    }
    *v7 = *(_DWORD *)(a2 - 8);
    v7[1] = *(_DWORD *)(a2 - 4);
    *(_DWORD *)(a2 - 8) = v5;
    *(_DWORD *)(a2 - 4) = v6;
    v13 = (char *)v7 - (char *)result + 8;
    if (v13 >= 9)
    {
      v14 = ((unint64_t)v13 >> 3) - 2;
      v15 = v14 >> 1;
      v16 = (float *)&result[2 * (v14 >> 1)];
      v17 = *(float *)v7;
      v18 = *v16;
      if (*(float *)v7 >= *v16)
      {
        if (v18 < v17)
          return result;
        v19 = v7[1];
        v20 = result[2 * v15 + 1];
        if (v19 >= v20)
          return result;
      }
      else
      {
        v19 = v7[1];
        v20 = *((_DWORD *)v16 + 1);
      }
      *(float *)v7 = v18;
      v7[1] = v20;
      if (v14 >= 2)
      {
        while (1)
        {
          v23 = v15 - 1;
          v15 = (v15 - 1) >> 1;
          v21 = (float *)&result[2 * v15];
          v24 = *v21;
          if (v17 < *v21)
          {
            v22 = *((_DWORD *)v21 + 1);
          }
          else
          {
            if (v24 < v17)
              break;
            v22 = result[2 * v15 + 1];
            if (v19 >= v22)
              break;
          }
          *v16 = v24;
          *((_DWORD *)v16 + 1) = v22;
          v16 = (float *)&result[2 * v15];
          if (v23 <= 1)
            goto LABEL_19;
        }
      }
      v21 = v16;
LABEL_19:
      *v21 = v17;
      *((_DWORD *)v21 + 1) = v19;
    }
  }
  return result;
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912CF33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912CF3A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::ndarray_container::ndarray_container<unsigned char,(void *)0>(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v38;
  void *__dst;
  std::__shared_weak_count *v40;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = (uint64_t *)(a1 + 24);
  *(_DWORD *)a1 = 9;
  v11 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  __dst = 0;
  v40 = 0;
  v13 = operator new[]();
  std::shared_ptr<unsigned char>::reset[abi:ne180100]<unsigned char,std::default_delete<unsigned char []>,void>(&__dst, v13);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v14 - *(_QWORD *)a2);
  *(_DWORD *)a1 = 5;
  if (v10 != (uint64_t *)a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v15 = *(char **)(a1 + 24);
  v16 = *(char **)(a1 + 32);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    v18 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    v19 = v18 - a5;
    if (v18 != a5)
    {
      v20 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v16 >= v20)
      {
        v22 = v17 >> 3;
        v23 = v20 - (_QWORD)v15;
        if (v23 >> 2 <= (unint64_t)((v17 >> 3) + 1))
          v24 = v22 + 1;
        else
          v24 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = v24;
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v22];
        *(_QWORD *)(a1 + 24) = v26;
        *(_QWORD *)v26 = v19;
        v21 = v26 + 8;
        *(_QWORD *)(a1 + 32) = v21;
        *(_QWORD *)(a1 + 40) = &v25[8 * v38];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v16 = v19;
        v21 = v16 + 8;
      }
      *(_QWORD *)(a1 + 32) = v21;
    }
  }
  if (v11 != (uint64_t *)a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *v12 = a5;
  v28 = __dst;
  v27 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  nitro::impl::fill_shape_and_stride(v10, v11, v12);
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_1912CF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 56) = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 32) = v9;
    operator delete(v9);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

char *std::vector<int>::__insert_with_size[abi:ne180100]<int *,int *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  int *v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  unint64_t v56;
  uint64_t v57;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1)
    return v8;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = v12 - v6;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = (char *)operator new(4 * v16);
    }
    else
    {
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = 0;
    }
    v32 = 4 * a5;
    v57 = 4 * a5;
    v33 = &v18[4 * (v7 >> 2)];
    v34 = v18;
    memcpy(v33, __src, v32);
    v35 = v33;
    if ((void *)v6 != a2)
    {
      v36 = v17;
      v35 = v33;
      if ((unint64_t)(v7 - 4) < 0x3C)
        goto LABEL_50;
      v36 = v17;
      v35 = v33;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v34[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_50;
      v37 = ((unint64_t)(v7 - 4) >> 2) + 1;
      v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v36 = &v17[-v38];
      v35 = &v33[-v38];
      v39 = 4 * (v7 >> 2) - 16;
      v40 = &v34[v39];
      v41 = (__int128 *)(v6 + v39);
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *v41;
        *((_OWORD *)v40 - 1) = *(v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 32;
        v41 -= 2;
        v42 -= 8;
      }
      while (v42);
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v44 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v35 - 1) = v44;
          v35 -= 4;
        }
        while (v36 != (char *)v6);
      }
    }
    v45 = &v34[4 * v16];
    v46 = v13 - (_QWORD)v17;
    if (v46)
      memmove(&v33[v57], v17, v46);
    *a1 = (unint64_t)v35;
    a1[1] = (unint64_t)&v33[v57 + v46];
    a1[2] = (unint64_t)v45;
    if (v6)
      operator delete((void *)v6);
    return v33;
  }
  v19 = v13 - (_QWORD)v8;
  v20 = (uint64_t)(v13 - (_QWORD)v8) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = a1[1];
  }
  else
  {
    v21 = &__src[4 * v20];
    v22 = a4 - v21;
    if (a4 != v21)
    {
      v56 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      v8 = (char *)v56;
    }
    v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1)
      return v8;
  }
  v24 = &v8[4 * a5];
  v25 = v23 - (_QWORD)v24;
  v26 = (uint64_t)(v23 - (_QWORD)v24) >> 2;
  v27 = (int *)(v23 - 4 * a5);
  v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    v30 = v29 + v6 + 4;
    if (v13 > v30)
      v30 = v13;
    v31 = v30 + ~v6 - v29;
    if (v31 < 0x2C)
    {
      v28 = (_DWORD *)v23;
      do
      {
LABEL_39:
        v53 = *v27++;
        *v28++ = v53;
      }
      while ((unint64_t)v27 < v13);
      goto LABEL_40;
    }
    v28 = (_DWORD *)v23;
    if ((unint64_t)&v24[-(v7 & 0xFFFFFFFFFFFFFFFCLL) - v6] < 0x20)
      goto LABEL_39;
    v47 = (v31 >> 2) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v27 = (int *)((char *)v27 + v48);
    v28 = (_DWORD *)(v23 + v48);
    v49 = (_OWORD *)(v23 + 16);
    v50 = (__int128 *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
    v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_39;
  }
LABEL_40:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    v54 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    v8 = v54;
  }
  if (v21 != __src)
  {
    v33 = v8;
    memmove(v8, __src, v21 - __src);
    return v33;
  }
  return v8;
}

uint64_t nitro::ndarray_container::ndarray_container<half,(void *)0>(uint64_t a1, uint64_t a2, char **a3, char **a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  void *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v38;
  void *__dst;
  std::__shared_weak_count *v40;

  *(_DWORD *)a1 = 9;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v10 = (uint64_t *)(a1 + 24);
  v11 = (uint64_t *)(a1 + 48);
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  __dst = 0;
  v40 = 0;
  v13 = operator new[]();
  std::shared_ptr<half>::reset[abi:ne180100]<half,std::default_delete<half []>,void>(&__dst, v13);
  v14 = *(_QWORD *)(a2 + 8);
  if (v14 != *(_QWORD *)a2)
    memmove(__dst, *(const void **)a2, v14 - *(_QWORD *)a2);
  *(_DWORD *)a1 = 11;
  if (v10 != (uint64_t *)a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v10, *a3, a3[1], (a3[1] - *a3) >> 3);
  v15 = *(char **)(a1 + 24);
  v16 = *(char **)(a1 + 32);
  v17 = v16 - v15;
  if (v16 == v15)
  {
    v18 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 1;
    v19 = v18 - a5;
    if (v18 != a5)
    {
      v20 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v16 >= v20)
      {
        v22 = v17 >> 3;
        v23 = v20 - (_QWORD)v15;
        if (v23 >> 2 <= (unint64_t)((v17 >> 3) + 1))
          v24 = v22 + 1;
        else
          v24 = v23 >> 2;
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
          v24 = 0x1FFFFFFFFFFFFFFFLL;
        if (v24 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v38 = v24;
        v25 = (char *)operator new(8 * v24);
        v26 = &v25[8 * v22];
        *(_QWORD *)(a1 + 24) = v26;
        *(_QWORD *)v26 = v19;
        v21 = v26 + 8;
        *(_QWORD *)(a1 + 32) = v21;
        *(_QWORD *)(a1 + 40) = &v25[8 * v38];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *(_QWORD *)v16 = v19;
        v21 = v16 + 8;
      }
      *(_QWORD *)(a1 + 32) = v21;
    }
  }
  if (v11 != (uint64_t *)a4)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long const*,unsigned long const*>(v11, *a4, a4[1], (a4[1] - *a4) >> 3);
  *v12 = a5;
  v28 = __dst;
  v27 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v30 = __ldxr(p_shared_owners);
    while (__stxr(v30 + 1, p_shared_owners));
  }
  v31 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v28;
  *(_QWORD *)(a1 + 16) = v27;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  nitro::impl::fill_shape_and_stride(v10, v11, v12);
  v34 = v40;
  if (v40)
  {
    v35 = (unint64_t *)&v40->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return a1;
}

void sub_1912CFBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v6;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 56) = v8;
    operator delete(v8);
  }
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 32) = v9;
    operator delete(v9);
  }
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

char *std::vector<half>::__insert_with_size[abi:ne180100]<half *,half *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  __int16 *v27;
  _WORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 *v41;
  unint64_t v42;
  __int128 v43;
  __int16 v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  unint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  unint64_t v51;
  __int128 v52;
  __int16 v53;
  char *v54;
  unint64_t v56;
  uint64_t v57;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
  if (a5 < 1)
    return v8;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 1)
  {
    v14 = a5 + ((uint64_t)(v13 - v6) >> 1);
    if (v14 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = v12 - v6;
    if (v15 > v14)
      v14 = v15;
    if (v15 >= 0x7FFFFFFFFFFFFFFELL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 < 0)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      v18 = (char *)operator new(2 * v16);
    }
    else
    {
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFELL));
      v18 = 0;
    }
    v32 = 2 * a5;
    v57 = 2 * a5;
    v33 = &v18[2 * (v7 >> 1)];
    v34 = v18;
    memcpy(v33, __src, v32);
    v35 = v33;
    if ((void *)v6 != a2)
    {
      v36 = v17;
      v35 = v33;
      if ((unint64_t)(v7 - 2) < 0x1E)
        goto LABEL_50;
      v36 = v17;
      v35 = v33;
      if ((v7 & 0xFFFFFFFFFFFFFFFELL) + v6 - (unint64_t)&v34[v7 & 0xFFFFFFFFFFFFFFFELL] < 0x20)
        goto LABEL_50;
      v37 = ((unint64_t)(v7 - 2) >> 1) + 1;
      v38 = 2 * (v37 & 0xFFFFFFFFFFFFFFF0);
      v36 = &v17[-v38];
      v35 = &v33[-v38];
      v39 = 2 * (v7 >> 1) - 16;
      v40 = &v34[v39];
      v41 = (__int128 *)(v6 + v39);
      v42 = v37 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v43 = *v41;
        *((_OWORD *)v40 - 1) = *(v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 32;
        v41 -= 2;
        v42 -= 16;
      }
      while (v42);
      if (v37 != (v37 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_50:
        do
        {
          v44 = *((_WORD *)v36 - 1);
          v36 -= 2;
          *((_WORD *)v35 - 1) = v44;
          v35 -= 2;
        }
        while (v36 != (char *)v6);
      }
    }
    v45 = &v34[2 * v16];
    v46 = v13 - (_QWORD)v17;
    if (v46)
      memmove(&v33[v57], v17, v46);
    *a1 = (unint64_t)v35;
    a1[1] = (unint64_t)&v33[v57 + v46];
    a1[2] = (unint64_t)v45;
    if (v6)
      operator delete((void *)v6);
    return v33;
  }
  v19 = v13 - (_QWORD)v8;
  v20 = (uint64_t)(v13 - (_QWORD)v8) >> 1;
  if (v20 >= a5)
  {
    v21 = &__src[2 * a5];
    v23 = a1[1];
  }
  else
  {
    v21 = &__src[2 * v20];
    v22 = a4 - v21;
    if (a4 != v21)
    {
      v56 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFELL);
      memmove((void *)a1[1], &__src[2 * v20], a4 - v21);
      v8 = (char *)v56;
    }
    v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1)
      return v8;
  }
  v24 = &v8[2 * a5];
  v25 = v23 - (_QWORD)v24;
  v26 = (uint64_t)(v23 - (_QWORD)v24) >> 1;
  v27 = (__int16 *)(v23 - 2 * a5);
  v28 = (_WORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    v29 = (v7 & 0xFFFFFFFFFFFFFFFELL) + v25;
    v30 = v29 + v6 + 2;
    if (v13 > v30)
      v30 = v13;
    v31 = v30 + ~v6 - v29;
    if (v31 < 0x1E)
    {
      v28 = (_WORD *)v23;
      do
      {
LABEL_39:
        v53 = *v27++;
        *v28++ = v53;
      }
      while ((unint64_t)v27 < v13);
      goto LABEL_40;
    }
    v28 = (_WORD *)v23;
    if ((unint64_t)&v24[-(v7 & 0xFFFFFFFFFFFFFFFELL) - v6] < 0x20)
      goto LABEL_39;
    v47 = (v31 >> 1) + 1;
    v48 = 2 * (v47 & 0xFFFFFFFFFFFFFFF0);
    v27 = (__int16 *)((char *)v27 + v48);
    v28 = (_WORD *)(v23 + v48);
    v49 = (_OWORD *)(v23 + 16);
    v50 = (__int128 *)(2 * v26 + 2 * (v7 >> 1) + v6 + 16);
    v51 = v47 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 16;
    }
    while (v51);
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_39;
  }
LABEL_40:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    v54 = v8;
    memmove((void *)(v23 - 2 * v26), v8, v25);
    v8 = v54;
  }
  if (v21 != __src)
  {
    v33 = v8;
    memmove(v8, __src, v21 - __src);
    return v33;
  }
  return v8;
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<float *,float *>(unint64_t *a1, void *a2, char *__src, char *a4, uint64_t a5)
{
  unint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  uint64_t v26;
  int *v27;
  _DWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  char *v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 *v50;
  uint64_t v51;
  __int128 v52;
  int v53;
  char *v54;
  unint64_t v56;
  uint64_t v57;

  v6 = *a1;
  v7 = (uint64_t)a2 - *a1;
  v8 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
  if (a5 < 1)
    return v8;
  v13 = a1[1];
  v12 = a1[2];
  if (a5 > (uint64_t)(v12 - v13) >> 2)
  {
    v14 = a5 + ((uint64_t)(v13 - v6) >> 2);
    if (v14 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v15 = v12 - v6;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = (char *)operator new(4 * v16);
    }
    else
    {
      v17 = (char *)(*a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL));
      v18 = 0;
    }
    v32 = 4 * a5;
    v57 = 4 * a5;
    v33 = &v18[4 * (v7 >> 2)];
    v34 = v18;
    memcpy(v33, __src, v32);
    v35 = v33;
    if ((void *)v6 != a2)
    {
      v36 = v17;
      v35 = v33;
      if ((unint64_t)(v7 - 4) < 0x3C)
        goto LABEL_50;
      v36 = v17;
      v35 = v33;
      if ((v7 & 0xFFFFFFFFFFFFFFFCLL) + v6 - (unint64_t)&v34[v7 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
        goto LABEL_50;
      v37 = ((unint64_t)(v7 - 4) >> 2) + 1;
      v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
      v36 = &v17[-v38];
      v35 = &v33[-v38];
      v39 = 4 * (v7 >> 2) - 16;
      v40 = &v34[v39];
      v41 = (__int128 *)(v6 + v39);
      v42 = v37 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v43 = *v41;
        *((_OWORD *)v40 - 1) = *(v41 - 1);
        *(_OWORD *)v40 = v43;
        v40 -= 32;
        v41 -= 2;
        v42 -= 8;
      }
      while (v42);
      if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_50:
        do
        {
          v44 = *((_DWORD *)v36 - 1);
          v36 -= 4;
          *((_DWORD *)v35 - 1) = v44;
          v35 -= 4;
        }
        while (v36 != (char *)v6);
      }
    }
    v45 = &v34[4 * v16];
    v46 = v13 - (_QWORD)v17;
    if (v46)
      memmove(&v33[v57], v17, v46);
    *a1 = (unint64_t)v35;
    a1[1] = (unint64_t)&v33[v57 + v46];
    a1[2] = (unint64_t)v45;
    if (v6)
      operator delete((void *)v6);
    return v33;
  }
  v19 = v13 - (_QWORD)v8;
  v20 = (uint64_t)(v13 - (_QWORD)v8) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = a1[1];
  }
  else
  {
    v21 = &__src[4 * v20];
    v22 = a4 - v21;
    if (a4 != v21)
    {
      v56 = *a1 + (v7 & 0xFFFFFFFFFFFFFFFCLL);
      memmove((void *)a1[1], &__src[4 * v20], a4 - v21);
      v8 = (char *)v56;
    }
    v23 = v13 + v22;
    a1[1] = v13 + v22;
    if (v19 < 1)
      return v8;
  }
  v24 = &v8[4 * a5];
  v25 = v23 - (_QWORD)v24;
  v26 = (uint64_t)(v23 - (_QWORD)v24) >> 2;
  v27 = (int *)(v23 - 4 * a5);
  v28 = (_DWORD *)v23;
  if ((unint64_t)v27 < v13)
  {
    v29 = (v7 & 0xFFFFFFFFFFFFFFFCLL) + v25;
    v30 = v29 + v6 + 4;
    if (v13 > v30)
      v30 = v13;
    v31 = v30 + ~v6 - v29;
    if (v31 < 0x2C)
    {
      v28 = (_DWORD *)v23;
      do
      {
LABEL_39:
        v53 = *v27++;
        *v28++ = v53;
      }
      while ((unint64_t)v27 < v13);
      goto LABEL_40;
    }
    v28 = (_DWORD *)v23;
    if ((unint64_t)&v24[-(v7 & 0xFFFFFFFFFFFFFFFCLL) - v6] < 0x20)
      goto LABEL_39;
    v47 = (v31 >> 2) + 1;
    v48 = 4 * (v47 & 0x7FFFFFFFFFFFFFF8);
    v27 = (int *)((char *)v27 + v48);
    v28 = (_DWORD *)(v23 + v48);
    v49 = (_OWORD *)(v23 + 16);
    v50 = (__int128 *)(4 * v26 + 4 * (v7 >> 2) + v6 + 16);
    v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = *v50;
      *(v49 - 1) = *(v50 - 1);
      *v49 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_39;
  }
LABEL_40:
  a1[1] = (unint64_t)v28;
  if ((char *)v23 != v24)
  {
    v54 = v8;
    memmove((void *)(v23 - 4 * v26), v8, v25);
    v8 = v54;
  }
  if (v21 != __src)
  {
    v33 = v8;
    memmove(v8, __src, v21 - __src);
    return v33;
  }
  return v8;
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Softmax(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Softmax(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D0594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D05FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::ReverseSequence(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D0938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D09A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIhEEEEDaT_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"shape[batchdim]", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D0D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D0DD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIiEEEEDaT_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"shape[batchdim]", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D11A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D1210(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIDhEEEEDaT_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"shape[batchdim]", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D15E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D1648(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void _ZZZN5nitro14nitro_builtins15ReverseSequenceERKNS_13flexible_typeES3_S3_S3_ENK3__0clINS_7ndarrayIfEEEEDaT_ENKUlvE_clEv()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", 110);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"shape[batchdim]", 15);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"seqlen.size()", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/interpreter/builtin_operations.cpp", "operator()", 940, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D1A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D1A80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Max(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D1DBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D1E24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Min(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D2160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D21C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D2504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D256C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D28A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D2910(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D2C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D2CB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D2FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D3058(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D3394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D33FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::Maximum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D3738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D37A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::ndarray_container,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,(void *)0>(nitro::ndarray_container &,nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 230, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D3ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D3B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<unsigned char>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D3E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D3EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<int>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D4224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D428C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<half>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D45C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D4630(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>>(nitro::impl::binary_visitor_wrapper<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_0,nitro::ndarray<float>>)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D496C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D49D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::Minimum(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D4D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D4D78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Pad(nitro::flexible_type const&,nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D50B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D511C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D5458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D54C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1>(nitro::nitro_builtins::All(nitro::flexible_type const&,nitro::flexible_type const&)::$_1)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D57FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D5864(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Tanh(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Tanh(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D5BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D5C08(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Cos(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Cos(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D5F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D5FAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::Sin(nitro::flexible_type const&)::$_0>(nitro::nitro_builtins::Sin(nitro::flexible_type const&)::$_0)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 101, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D62E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D6350(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_19_0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void OUTLINED_FUNCTION_20_0()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 8));
}

void OUTLINED_FUNCTION_22(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_26_0()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 16) = 0;
  *(_BYTE *)(v0 - 8) = 0;
}

void OUTLINED_FUNCTION_28_0(void *__p)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = __p;
  operator delete(__p);
}

void OUTLINED_FUNCTION_29_0()
{
  uint64_t v0;

  operator delete(*(void **)(v0 + 8));
}

void nitro::nitro_builtins::MakeTensorArray()
{
  unint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  OUTLINED_FUNCTION_0_7();
  do
    OUTLINED_FUNCTION_8(v0);
  while (v3);
  if (v2 == 1)
  {
    if (*(_QWORD *)v1)
    {
      if (*(char *)(*(_QWORD *)v1 + 31) < 0)
        OUTLINED_FUNCTION_10_1();
      OUTLINED_FUNCTION_6_0();
    }
    OUTLINED_FUNCTION_5_1();
  }
  OUTLINED_FUNCTION_10();
}

{
  unint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  void *v4;

  OUTLINED_FUNCTION_0_7();
  do
    OUTLINED_FUNCTION_8(v0);
  while (v3);
  if (v2 == 1)
  {
    if (*(_QWORD *)v1)
    {
      v4 = *(void **)(*(_QWORD *)v1 + 8);
      if (v4)
        OUTLINED_FUNCTION_9_0(v4);
      OUTLINED_FUNCTION_7_1();
    }
    OUTLINED_FUNCTION_5_1();
  }
  OUTLINED_FUNCTION_10();
}

void nitro::nitro_builtins::TensorArrayGather(unint64_t **a1)
{
  unint64_t *v1;
  char v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2 && *(_QWORD *)v3)
  {
    if (*(char *)(*(_QWORD *)v3 + 31) < 0)
      OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_6_0();
  }
  OUTLINED_FUNCTION_2();
}

{
  unint64_t *v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2 && *(_QWORD *)v3)
  {
    v5 = *(void **)(*(_QWORD *)v3 + 8);
    if (v5)
      OUTLINED_FUNCTION_22(v5);
    OUTLINED_FUNCTION_7_1();
  }
  OUTLINED_FUNCTION_2();
}

void nitro::nitro_builtins::Range(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v2 = (_QWORD *)OUTLINED_FUNCTION_19_0(a1);
  if (v2)
  {
    std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v2);
    OUTLINED_FUNCTION_4_2();
  }
  *v1 = 0;
  OUTLINED_FUNCTION_2();
}

void nitro::nitro_builtins::TopK(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = OUTLINED_FUNCTION_19_0(a1);
  if (v2)
  {
    std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(v2);
    OUTLINED_FUNCTION_1_0();
  }
  *v1 = 0;
  OUTLINED_FUNCTION_2();
}

void nitro::nitro_builtins::convert_slice_array_to_list()
{
  _QWORD **v0;
  unint64_t *v1;
  char v2;
  unint64_t v3;

  OUTLINED_FUNCTION_23();
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v3, v1));
  if (v2)
  {
    if (*v0)
    {
      std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(*v0);
      OUTLINED_FUNCTION_4_2();
    }
    *v0 = 0;
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  uint64_t *v0;
  unint64_t *v1;
  char v2;
  unint64_t v3;

  OUTLINED_FUNCTION_23();
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v3, v1));
  if (v2)
  {
    if (*v0)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*v0);
      OUTLINED_FUNCTION_1_0();
    }
    *v0 = 0;
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  uint64_t *v0;
  unint64_t *v1;
  char v2;
  unint64_t v3;

  OUTLINED_FUNCTION_23();
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v3, v1));
  if (v2)
  {
    if (*v0)
    {
      std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*v0);
      OUTLINED_FUNCTION_1_0();
    }
    *v0 = 0;
  }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

void nitro::ndarray_container::visit<nitro::nitro_builtins::TopK(nitro::flexible_type const&,nitro::flexible_type const&)::$_0>()
{
  char v1;
  char v2;

  OUTLINED_FUNCTION_4_1();
  do
  {
    OUTLINED_FUNCTION_18_0();
    if (!(!v2 & v1))
      __asm { BR              X9 }
    OUTLINED_FUNCTION_26_0();
  }
  while (!v2);
  OUTLINED_FUNCTION_21();
}

{
  char v1;
  char v2;

  OUTLINED_FUNCTION_17_0();
  if (!(!v2 & v1))
    __asm { BR              X10 }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  char v1;
  char v2;

  OUTLINED_FUNCTION_4_1();
  do
  {
    OUTLINED_FUNCTION_18_0();
    if (!(!v2 & v1))
      __asm { BR              X9 }
    OUTLINED_FUNCTION_26_0();
  }
  while (!v2);
  OUTLINED_FUNCTION_21();
}

{
  char v1;
  char v2;

  OUTLINED_FUNCTION_17_0();
  if (!(!v2 & v1))
    __asm { BR              X10 }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  char v1;
  char v2;

  OUTLINED_FUNCTION_4_1();
  do
  {
    OUTLINED_FUNCTION_18_0();
    if (!(!v2 & v1))
      __asm { BR              X9 }
    OUTLINED_FUNCTION_26_0();
  }
  while (!v2);
  OUTLINED_FUNCTION_21();
}

{
  char v1;
  char v2;

  OUTLINED_FUNCTION_17_0();
  if (!(!v2 & v1))
    __asm { BR              X10 }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

{
  char v1;
  char v2;

  OUTLINED_FUNCTION_4_1();
  do
  {
    OUTLINED_FUNCTION_18_0();
    if (!(!v2 & v1))
      __asm { BR              X9 }
    OUTLINED_FUNCTION_26_0();
  }
  while (!v2);
  OUTLINED_FUNCTION_21();
}

{
  char v1;
  char v2;

  OUTLINED_FUNCTION_17_0();
  if (!(!v2 & v1))
    __asm { BR              X10 }
  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_10();
}

double nitro::model_metadata::model_metadata(nitro::model_metadata *this)
{
  double result;

  *((_BYTE *)this + 96) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void nitro::model_metadata::~model_metadata(nitro::model_metadata *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = *((_QWORD *)this + 10);
    v4 = (void *)*((_QWORD *)this + 9);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 9);
    }
    *((_QWORD *)this + 10) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    v6 = *((_QWORD *)this + 7);
    v7 = (void *)*((_QWORD *)this + 6);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 6);
    }
    *((_QWORD *)this + 7) = v5;
    operator delete(v7);
  }
  v8 = *((_QWORD *)this + 3);
  if (v8)
  {
    v9 = *((_QWORD *)this + 4);
    v10 = (void *)*((_QWORD *)this + 3);
    if (v9 != v8)
    {
      v11 = *((_QWORD *)this + 4);
      do
      {
        v13 = *(void **)(v11 - 24);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *(_QWORD *)(v9 - 16) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
  }
  v14 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v15 = *((_QWORD *)this + 1);
    v16 = *(void **)this;
    if (v15 != v14)
    {
      v17 = *((_QWORD *)this + 1);
      do
      {
        v19 = *(void **)(v17 - 24);
        v17 -= 24;
        v18 = v19;
        if (v19)
        {
          *(_QWORD *)(v15 - 16) = v18;
          operator delete(v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
      v16 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v14;
    operator delete(v16);
  }
}

uint64_t nitro::model_metadata::load_model_metadata(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  void **v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  void **v15;
  char *v16;
  char *v17;
  char *v18;
  void **v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t **v23;
  char *v24;
  char v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  void *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  void *v59;
  void *v60;
  std::__shared_weak_count *v61;
  unint64_t *p_shared_owners;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  void *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  _QWORD *v91;
  void *v92;
  void *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  unint64_t *v110;
  unint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  void *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  void *v125;
  void *v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  __int128 v131;
  char *v132;
  _QWORD v133[4];
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  char v139;
  _QWORD v140[2];
  _BYTE v141[408];
  _QWORD v142[20];

  v142[19] = *MEMORY[0x1E0C80C00];
  std::ifstream::basic_ifstream(v140);
  if (*(_DWORD *)&v141[*(_QWORD *)(v140[0] - 24) + 16])
    nitro::model_metadata::load_model_metadata(std::string const&)::$_0::operator()();
  v133[0] = v140;
  memset(&v133[1], 0, 24);
  v138 = 0;
  v139 = 0;
  v136 = 0;
  v137 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v133, (uint64_t)&v138);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v133, (uint64_t)&v136);
  nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get((char *)&v138, &v131);
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  *(_OWORD *)a1 = v131;
  a1[2] = v132;
  nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get((char *)&v136, &v131);
  v8 = (void **)(a1 + 3);
  v9 = a1[3];
  if (v9)
  {
    v10 = a1[4];
    v11 = a1[3];
    if (v10 != v9)
    {
      v12 = a1[4];
      do
      {
        v14 = (void *)*((_QWORD *)v12 - 3);
        v12 -= 24;
        v13 = v14;
        if (v14)
        {
          *((_QWORD *)v10 - 2) = v13;
          operator delete(v13);
        }
        v10 = v12;
      }
      while (v12 != v9);
      v11 = (char *)*v8;
    }
    a1[4] = v9;
    operator delete(v11);
    *v8 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
  *(_OWORD *)(a1 + 3) = v131;
  a1[5] = v132;
  v134 = 0;
  v135 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v133, (uint64_t)&v134);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v133, (uint64_t)&v138);
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec((uint64_t)v133, (uint64_t)&v136);
  nitro::flexible_type_converter<std::vector<std::string>>::get(&v138, (uint64_t)&v131);
  v15 = (void **)(a1 + 6);
  v16 = a1[6];
  if (v16)
  {
    v17 = a1[7];
    v18 = a1[6];
    if (v17 != v16)
    {
      do
      {
        if (*(v17 - 1) < 0)
          operator delete(*((void **)v17 - 3));
        v17 -= 24;
      }
      while (v17 != v16);
      v18 = (char *)*v15;
    }
    a1[7] = v16;
    operator delete(v18);
    *v15 = 0;
    a1[7] = 0;
    a1[8] = 0;
  }
  *((_OWORD *)a1 + 3) = v131;
  a1[8] = v132;
  nitro::flexible_type_converter<std::vector<std::string>>::get(&v136, (uint64_t)&v131);
  v19 = (void **)(a1 + 9);
  v20 = a1[9];
  if (v20)
  {
    v21 = a1[10];
    v22 = a1[9];
    if (v21 != v20)
    {
      do
      {
        if (*(v21 - 1) < 0)
          operator delete(*((void **)v21 - 3));
        v21 -= 24;
      }
      while (v21 != v20);
      v22 = (char *)*v19;
    }
    a1[10] = v20;
    operator delete(v22);
    *v19 = 0;
    a1[10] = 0;
    a1[11] = 0;
  }
  *(_OWORD *)(a1 + 9) = v131;
  a1[11] = v132;
  *((_BYTE *)a1 + 96) = 1;
  v23 = (uint64_t **)a1[3];
  v24 = a1[4];
  if (v23 != (uint64_t **)v24)
  {
    v25 = 1;
    do
    {
      v26 = *v23;
      v27 = v23[1];
      if (*v23 != v27)
      {
        do
        {
          v29 = *v26++;
          v28 = v29;
          if (v25)
            v30 = v28 <= 0;
          else
            v30 = 1;
          v25 = !v30;
        }
        while (v26 != v27);
        *((_BYTE *)a1 + 96) = v25;
      }
      v23 += 3;
    }
    while (v23 != (uint64_t **)v24);
  }
  switch(v135)
  {
    case 2:
      v31 = (unint64_t *)v134;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        v34 = (_QWORD *)v134;
        if (v134)
        {
          if (*(char *)(v134 + 31) < 0)
            operator delete(*(void **)(v134 + 8));
          v35 = v34;
          v36 = 0x1012C404EF22A49;
          goto LABEL_95;
        }
      }
      break;
    case 3:
      v44 = (unint64_t *)v134;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        v47 = (_QWORD *)v134;
        if (v134)
        {
          v48 = *(void **)(v134 + 8);
          if (v48)
          {
            *(_QWORD *)(v134 + 16) = v48;
            operator delete(v48);
          }
          v35 = v47;
          v36 = 0x1080C409938AC02;
          goto LABEL_95;
        }
      }
      break;
    case 4:
      v37 = (unint64_t *)v134;
      do
      {
        v38 = __ldaxr(v37);
        v39 = v38 - 1;
      }
      while (__stlxr(v39, v37));
      if (!v39)
      {
        v40 = (_QWORD *)v134;
        if (v134)
        {
          v41 = *(_QWORD *)(v134 + 8);
          if (!v41)
            goto LABEL_80;
          v42 = *(_QWORD *)(v134 + 16);
          v43 = *(void **)(v134 + 8);
          if (v42 != v41)
          {
            do
            {
              v42 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v40 + 3), v42);
            }
            while (v42 != v41);
            v43 = (void *)v40[1];
          }
          v40[2] = v41;
          goto LABEL_79;
        }
      }
      break;
    case 5:
      v49 = (unint64_t *)v134;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        v40 = (_QWORD *)v134;
        if (v134)
        {
          v52 = *(_QWORD *)(v134 + 8);
          if (v52)
          {
            v53 = *(_QWORD *)(v134 + 16);
            v54 = *(void **)(v134 + 8);
            if (v53 != v52)
            {
              do
                v53 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v53 - 32);
              while (v53 != v52);
              v54 = (void *)v40[1];
            }
            v40[2] = v52;
            v43 = v54;
LABEL_79:
            operator delete(v43);
          }
LABEL_80:
          v35 = v40;
          v36 = 0x1020C405E66F15BLL;
          goto LABEL_95;
        }
      }
      break;
    case 9:
      v55 = (unint64_t *)v134;
      do
      {
        v56 = __ldaxr(v55);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v55));
      if (!v57)
      {
        v58 = (_QWORD *)v134;
        if (v134)
        {
          v59 = *(void **)(v134 + 56);
          if (v59)
          {
            *(_QWORD *)(v134 + 64) = v59;
            operator delete(v59);
          }
          v60 = (void *)v58[4];
          if (v60)
          {
            v58[5] = v60;
            operator delete(v60);
          }
          v61 = (std::__shared_weak_count *)v58[3];
          if (v61)
          {
            p_shared_owners = (unint64_t *)&v61->__shared_owners_;
            do
              v63 = __ldaxr(p_shared_owners);
            while (__stlxr(v63 - 1, p_shared_owners));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          v35 = v58;
          v36 = 0x10B0C4002311774;
LABEL_95:
          MEMORY[0x19401CD90](v35, v36);
        }
      }
      break;
    default:
      break;
  }
  switch(v137)
  {
    case 2:
      v64 = (unint64_t *)v136;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        v67 = (_QWORD *)v136;
        if (v136)
        {
          if (*(char *)(v136 + 31) < 0)
            operator delete(*(void **)(v136 + 8));
          v68 = v67;
          v69 = 0x1012C404EF22A49;
          goto LABEL_145;
        }
      }
      break;
    case 3:
      v77 = (unint64_t *)v136;
      do
      {
        v78 = __ldaxr(v77);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v77));
      if (!v79)
      {
        v80 = (_QWORD *)v136;
        if (v136)
        {
          v81 = *(void **)(v136 + 8);
          if (v81)
          {
            *(_QWORD *)(v136 + 16) = v81;
            operator delete(v81);
          }
          v68 = v80;
          v69 = 0x1080C409938AC02;
          goto LABEL_145;
        }
      }
      break;
    case 4:
      v70 = (unint64_t *)v136;
      do
      {
        v71 = __ldaxr(v70);
        v72 = v71 - 1;
      }
      while (__stlxr(v72, v70));
      if (!v72)
      {
        v73 = (_QWORD *)v136;
        if (v136)
        {
          v74 = *(_QWORD *)(v136 + 8);
          if (!v74)
            goto LABEL_130;
          v75 = *(_QWORD *)(v136 + 16);
          v76 = *(void **)(v136 + 8);
          if (v75 != v74)
          {
            do
            {
              v75 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v73 + 3), v75);
            }
            while (v75 != v74);
            v76 = (void *)v73[1];
          }
          v73[2] = v74;
          goto LABEL_129;
        }
      }
      break;
    case 5:
      v82 = (unint64_t *)v136;
      do
      {
        v83 = __ldaxr(v82);
        v84 = v83 - 1;
      }
      while (__stlxr(v84, v82));
      if (!v84)
      {
        v73 = (_QWORD *)v136;
        if (v136)
        {
          v85 = *(_QWORD *)(v136 + 8);
          if (v85)
          {
            v86 = *(_QWORD *)(v136 + 16);
            v87 = *(void **)(v136 + 8);
            if (v86 != v85)
            {
              do
                v86 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v86 - 32);
              while (v86 != v85);
              v87 = (void *)v73[1];
            }
            v73[2] = v85;
            v76 = v87;
LABEL_129:
            operator delete(v76);
          }
LABEL_130:
          v68 = v73;
          v69 = 0x1020C405E66F15BLL;
          goto LABEL_145;
        }
      }
      break;
    case 9:
      v88 = (unint64_t *)v136;
      do
      {
        v89 = __ldaxr(v88);
        v90 = v89 - 1;
      }
      while (__stlxr(v90, v88));
      if (!v90)
      {
        v91 = (_QWORD *)v136;
        if (v136)
        {
          v92 = *(void **)(v136 + 56);
          if (v92)
          {
            *(_QWORD *)(v136 + 64) = v92;
            operator delete(v92);
          }
          v93 = (void *)v91[4];
          if (v93)
          {
            v91[5] = v93;
            operator delete(v93);
          }
          v94 = (std::__shared_weak_count *)v91[3];
          if (v94)
          {
            v95 = (unint64_t *)&v94->__shared_owners_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
              std::__shared_weak_count::__release_weak(v94);
            }
          }
          v68 = v91;
          v69 = 0x10B0C4002311774;
LABEL_145:
          MEMORY[0x19401CD90](v68, v69);
        }
      }
      break;
    default:
      break;
  }
  switch(v139)
  {
    case 2:
      v97 = (unint64_t *)v138;
      do
      {
        v98 = __ldaxr(v97);
        v99 = v98 - 1;
      }
      while (__stlxr(v99, v97));
      if (!v99)
      {
        v100 = (_QWORD *)v138;
        if (v138)
        {
          if (*(char *)(v138 + 31) < 0)
            operator delete(*(void **)(v138 + 8));
          v101 = v100;
          v102 = 0x1012C404EF22A49;
          goto LABEL_195;
        }
      }
      break;
    case 3:
      v110 = (unint64_t *)v138;
      do
      {
        v111 = __ldaxr(v110);
        v112 = v111 - 1;
      }
      while (__stlxr(v112, v110));
      if (!v112)
      {
        v113 = (_QWORD *)v138;
        if (v138)
        {
          v114 = *(void **)(v138 + 8);
          if (v114)
          {
            *(_QWORD *)(v138 + 16) = v114;
            operator delete(v114);
          }
          v101 = v113;
          v102 = 0x1080C409938AC02;
          goto LABEL_195;
        }
      }
      break;
    case 4:
      v103 = (unint64_t *)v138;
      do
      {
        v104 = __ldaxr(v103);
        v105 = v104 - 1;
      }
      while (__stlxr(v105, v103));
      if (!v105)
      {
        v106 = (_QWORD *)v138;
        if (v138)
        {
          v107 = *(_QWORD *)(v138 + 8);
          if (!v107)
            goto LABEL_180;
          v108 = *(_QWORD *)(v138 + 16);
          v109 = *(void **)(v138 + 8);
          if (v108 != v107)
          {
            do
            {
              v108 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v106 + 3), v108);
            }
            while (v108 != v107);
            v109 = (void *)v106[1];
          }
          v106[2] = v107;
          goto LABEL_179;
        }
      }
      break;
    case 5:
      v115 = (unint64_t *)v138;
      do
      {
        v116 = __ldaxr(v115);
        v117 = v116 - 1;
      }
      while (__stlxr(v117, v115));
      if (!v117)
      {
        v106 = (_QWORD *)v138;
        if (v138)
        {
          v118 = *(_QWORD *)(v138 + 8);
          if (v118)
          {
            v119 = *(_QWORD *)(v138 + 16);
            v120 = *(void **)(v138 + 8);
            if (v119 != v118)
            {
              do
                v119 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v119 - 32);
              while (v119 != v118);
              v120 = (void *)v106[1];
            }
            v106[2] = v118;
            v109 = v120;
LABEL_179:
            operator delete(v109);
          }
LABEL_180:
          v101 = v106;
          v102 = 0x1020C405E66F15BLL;
          goto LABEL_195;
        }
      }
      break;
    case 9:
      v121 = (unint64_t *)v138;
      do
      {
        v122 = __ldaxr(v121);
        v123 = v122 - 1;
      }
      while (__stlxr(v123, v121));
      if (!v123)
      {
        v124 = (_QWORD *)v138;
        if (v138)
        {
          v125 = *(void **)(v138 + 56);
          if (v125)
          {
            *(_QWORD *)(v138 + 64) = v125;
            operator delete(v125);
          }
          v126 = (void *)v124[4];
          if (v126)
          {
            v124[5] = v126;
            operator delete(v126);
          }
          v127 = (std::__shared_weak_count *)v124[3];
          if (v127)
          {
            v128 = (unint64_t *)&v127->__shared_owners_;
            do
              v129 = __ldaxr(v128);
            while (__stlxr(v129 - 1, v128));
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
          v101 = v124;
          v102 = 0x10B0C4002311774;
LABEL_195:
          MEMORY[0x19401CD90](v101, v102);
        }
      }
      break;
    default:
      break;
  }
  v140[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v140 + *(_QWORD *)(v140[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x19401C8BC](v141);
  std::istream::~istream();
  return MEMORY[0x19401CCD0](v142);
}

void sub_1912D7AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, ...)
{
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  va_list va;

  va_start(va, a16);
  switch(a12)
  {
    case 2:
      do
      {
        v17 = __ldaxr((unint64_t *)a11);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, (unint64_t *)a11));
      if (v18 || !a11)
        goto LABEL_28;
      if (*(char *)(a11 + 31) < 0)
        operator delete(*(void **)(a11 + 8));
      v19 = a11;
      v20 = 0x1012C404EF22A49;
      break;
    case 3:
      do
      {
        v21 = __ldaxr((unint64_t *)a11);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unint64_t *)a11));
      if (v22 || !a11)
        goto LABEL_28;
      v23 = *(void **)(a11 + 8);
      if (v23)
      {
        *(_QWORD *)(a11 + 16) = v23;
        operator delete(v23);
      }
      v19 = a11;
      v20 = 0x1080C409938AC02;
      break;
    case 4:
      do
      {
        v24 = __ldaxr((unint64_t *)a11);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, (unint64_t *)a11));
      if (v25 || !a11)
        goto LABEL_28;
      v19 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a11);
      goto LABEL_22;
    case 5:
      do
      {
        v26 = __ldaxr((unint64_t *)a11);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, (unint64_t *)a11));
      if (v27 || !a11)
        goto LABEL_28;
      v19 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a11);
LABEL_22:
      v20 = 0x1020C405E66F15BLL;
      break;
    case 9:
      do
      {
        v28 = __ldaxr((unint64_t *)a11);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, (unint64_t *)a11));
      if (v29 || !a11)
        goto LABEL_28;
      v19 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)a11);
      v20 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_28;
  }
  MEMORY[0x19401CD90](v19, v20);
LABEL_28:
  switch(a14)
  {
    case 2:
      do
      {
        v30 = __ldaxr((unint64_t *)a13);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unint64_t *)a13));
      if (v31 || !a13)
        goto LABEL_55;
      if (*(char *)(a13 + 31) < 0)
        operator delete(*(void **)(a13 + 8));
      v32 = a13;
      v33 = 0x1012C404EF22A49;
      break;
    case 3:
      do
      {
        v34 = __ldaxr((unint64_t *)a13);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, (unint64_t *)a13));
      if (v35 || !a13)
        goto LABEL_55;
      v36 = *(void **)(a13 + 8);
      if (v36)
      {
        *(_QWORD *)(a13 + 16) = v36;
        operator delete(v36);
      }
      v32 = a13;
      v33 = 0x1080C409938AC02;
      break;
    case 4:
      do
      {
        v37 = __ldaxr((unint64_t *)a13);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, (unint64_t *)a13));
      if (v38 || !a13)
        goto LABEL_55;
      v32 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a13);
      goto LABEL_49;
    case 5:
      do
      {
        v39 = __ldaxr((unint64_t *)a13);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unint64_t *)a13));
      if (v40 || !a13)
        goto LABEL_55;
      v32 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a13);
LABEL_49:
      v33 = 0x1020C405E66F15BLL;
      break;
    case 9:
      do
      {
        v41 = __ldaxr((unint64_t *)a13);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, (unint64_t *)a13));
      if (v42 || !a13)
        goto LABEL_55;
      v32 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)a13);
      v33 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_55;
  }
  MEMORY[0x19401CD90](v32, v33);
LABEL_55:
  switch(a16)
  {
    case 2:
      do
      {
        v43 = __ldaxr((unint64_t *)a15);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, (unint64_t *)a15));
      if (v44 || !a15)
        goto LABEL_82;
      if (*(char *)(a15 + 31) < 0)
        operator delete(*(void **)(a15 + 8));
      v45 = a15;
      v46 = 0x1012C404EF22A49;
      break;
    case 3:
      do
      {
        v47 = __ldaxr((unint64_t *)a15);
        v48 = v47 - 1;
      }
      while (__stlxr(v48, (unint64_t *)a15));
      if (v48 || !a15)
        goto LABEL_82;
      v49 = *(void **)(a15 + 8);
      if (v49)
      {
        *(_QWORD *)(a15 + 16) = v49;
        operator delete(v49);
      }
      v45 = a15;
      v46 = 0x1080C409938AC02;
      break;
    case 4:
      do
      {
        v50 = __ldaxr((unint64_t *)a15);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, (unint64_t *)a15));
      if (v51 || !a15)
        goto LABEL_82;
      v45 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(a15);
      goto LABEL_76;
    case 5:
      do
      {
        v52 = __ldaxr((unint64_t *)a15);
        v53 = v52 - 1;
      }
      while (__stlxr(v53, (unint64_t *)a15));
      if (v53 || !a15)
        goto LABEL_82;
      v45 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(a15);
LABEL_76:
      v46 = 0x1020C405E66F15BLL;
      break;
    case 9:
      do
      {
        v54 = __ldaxr((unint64_t *)a15);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, (unint64_t *)a15));
      if (v55 || !a15)
        goto LABEL_82;
      v45 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)a15);
      v46 = 0x10B0C4002311774;
      break;
    default:
      goto LABEL_82;
  }
  MEMORY[0x19401CD90](v45, v46);
LABEL_82:
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

void nitro::model_metadata::load_model_metadata(std::string const&)::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/model_metadata/model_metadata.mm", 108);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fin.good()", 10);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/model_metadata/model_metadata.mm", "operator()", 18, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/model_metadata/model_metadata.mm", "operator()", 18, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912D81EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912D8254(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::model_metadata::get_input_names(nitro::model_metadata *this)
{
  return (uint64_t)this + 48;
}

uint64_t nitro::model_metadata::get_output_names(nitro::model_metadata *this)
{
  return (uint64_t)this + 72;
}

uint64_t nitro::model_metadata::get_output_shape(_QWORD *a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;

  v3 = a1[9];
  v4 = a1[10];
  if (v3 == v4)
  {
    v8 = a1[9];
  }
  else
  {
    v5 = *((_BYTE *)a2 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    else
      v6 = a2[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a2;
    else
      v7 = *a2;
    v8 = a1[9];
    do
    {
      v9 = *(unsigned __int8 *)(v8 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = (unsigned __int8 *)*(unsigned __int8 *)(v8 + 23);
      else
        v10 = *(unsigned __int8 **)(v8 + 8);
      if (v10 == v6)
      {
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v8, v7, *(_QWORD *)(v8 + 8)))
            return a1[3] + v8 - v3;
        }
        else
        {
          if (!*(_BYTE *)(v8 + 23))
            return a1[3] + v8 - v3;
          v11 = 0;
          while (*(unsigned __int8 *)(v8 + v11) == v7[v11])
          {
            if (v9 == ++v11)
              return a1[3] + v8 - v3;
          }
        }
      }
      v8 += 24;
    }
    while (v8 != v4);
    v8 = v4;
  }
  return a1[3] + v8 - v3;
}

void nitro::SExp::load(nitro::SExp *a1, uint64_t a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  void *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v37 = 0;
  nitro::archive_detail::deserialize_hard_or_soft_fail<nitro::iarchive,nitro::flexible_type>::exec(a2, (uint64_t)&v36);
  nitro::SExp::load_impl(a1, (const nitro::flexible_type *)&v36);
  switch(v37)
  {
    case 2:
      v3 = (unint64_t *)v36;
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        v6 = (_QWORD *)v36;
        if (v36)
        {
          if (*(char *)(v36 + 31) < 0)
            operator delete(*(void **)(v36 + 8));
          v7 = v6;
          v8 = 0x1012C404EF22A49;
          goto LABEL_50;
        }
      }
      break;
    case 3:
      v9 = (unint64_t *)v36;
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        v12 = (_QWORD *)v36;
        if (v36)
        {
          v13 = *(void **)(v36 + 8);
          if (v13)
          {
            *(_QWORD *)(v36 + 16) = v13;
            operator delete(v13);
          }
          v7 = v12;
          v8 = 0x1080C409938AC02;
          goto LABEL_50;
        }
      }
      break;
    case 4:
      v14 = (unint64_t *)v36;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        v17 = (_QWORD *)v36;
        if (v36)
        {
          v18 = *(_QWORD *)(v36 + 8);
          if (!v18)
            goto LABEL_35;
          v19 = *(_QWORD *)(v36 + 16);
          v20 = *(void **)(v36 + 8);
          if (v19 != v18)
          {
            do
            {
              v19 -= 16;
              std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v17 + 3), v19);
            }
            while (v19 != v18);
            v20 = (void *)v17[1];
          }
          v17[2] = v18;
          goto LABEL_34;
        }
      }
      break;
    case 5:
      v21 = (unint64_t *)v36;
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        v17 = (_QWORD *)v36;
        if (v36)
        {
          v24 = *(_QWORD *)(v36 + 8);
          if (v24)
          {
            v25 = *(_QWORD *)(v36 + 16);
            v26 = *(void **)(v36 + 8);
            if (v25 != v24)
            {
              do
                v25 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v25 - 32);
              while (v25 != v24);
              v26 = (void *)v17[1];
            }
            v17[2] = v24;
            v20 = v26;
LABEL_34:
            operator delete(v20);
          }
LABEL_35:
          v7 = v17;
          v8 = 0x1020C405E66F15BLL;
          goto LABEL_50;
        }
      }
      break;
    case 9:
      v27 = (unint64_t *)v36;
      do
      {
        v28 = __ldaxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
      {
        v30 = (_QWORD *)v36;
        if (v36)
        {
          v31 = *(void **)(v36 + 56);
          if (v31)
          {
            *(_QWORD *)(v36 + 64) = v31;
            operator delete(v31);
          }
          v32 = (void *)v30[4];
          if (v32)
          {
            v30[5] = v32;
            operator delete(v32);
          }
          v33 = (std::__shared_weak_count *)v30[3];
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldaxr(p_shared_owners);
            while (__stlxr(v35 - 1, p_shared_owners));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v7 = v30;
          v8 = 0x10B0C4002311774;
LABEL_50:
          MEMORY[0x19401CD90](v7, v8);
        }
      }
      break;
    default:
      return;
  }
}

void sub_1912D85F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unint64_t *a10, __int16 a11, char a12, char a13)
{
  switch((char)a11)
  {
    case 2:
      nitro::SExp::load(&a10);
      break;
    case 3:
      nitro::SExp::load(&a10);
      break;
    case 4:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 5:
      nitro::nitro_program::load(std::string const&,nitro::PrimitiveType)::$_2::operator()(&a10);
      break;
    case 9:
      nitro::SExp::load(&a10);
      break;
    default:
      break;
  }
  _Unwind_Resume(exception_object);
}

void nitro::SExp::load_impl(nitro::SExp *this, const nitro::flexible_type *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  unint64_t *v39;
  unint64_t v40;

  if (*((_BYTE *)a2 + 8) == 4)
  {
    v4 = *(_QWORD *)a2;
    *(_BYTE *)this = 0;
    v6 = *(_QWORD *)(v4 + 8);
    v5 = *(_QWORD *)(v4 + 16);
    v7 = (v5 - v6) >> 4;
    v9 = (_QWORD *)((char *)this + 48);
    v8 = *((_QWORD *)this + 6);
    v10 = *((_QWORD *)this + 7);
    v11 = 0x8E38E38E38E38E39 * ((v10 - v8) >> 3);
    if (v7 <= v11)
    {
      if (v7 < v11)
      {
        v19 = v8 + 72 * v7;
        while (v10 != v19)
          nitro::SExp::~SExp((nitro::SExp *)(v10 - 72));
        *((_QWORD *)this + 7) = v19;
      }
    }
    else
    {
      std::vector<nitro::SExp>::__append((uint64_t)this + 48, v7 - v11);
    }
    if (v5 != v6)
    {
      v20 = 0;
      v21 = 0;
      if (v7 <= 1)
        v7 = 1;
      do
      {
        nitro::SExp::load_impl((nitro::SExp *)(*v9 + v21), (const nitro::flexible_type *)(*(_QWORD *)(v4 + 8) + v20));
        v21 += 72;
        v20 += 16;
        --v7;
      }
      while (v7);
    }
  }
  else
  {
    *(_BYTE *)this = 1;
    v12 = (uint64_t *)((char *)this + 32);
    if ((nitro::SExp *)((char *)this + 32) != a2)
    {
      switch(*((_BYTE *)this + 40))
      {
        case 2:
          v13 = (unint64_t *)*v12;
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            v16 = *v12;
            if (!*v12)
              goto LABEL_46;
            if (*(char *)(v16 + 31) < 0)
              operator delete(*(void **)(v16 + 8));
            v17 = v16;
            v18 = 0x1012C404EF22A49;
            goto LABEL_45;
          }
          break;
        case 3:
          v22 = (unint64_t *)*v12;
          do
          {
            v23 = __ldaxr(v22);
            v24 = v23 - 1;
          }
          while (__stlxr(v24, v22));
          if (!v24)
          {
            v25 = *v12;
            if (!*v12)
              goto LABEL_46;
            v26 = *(void **)(v25 + 8);
            if (v26)
            {
              *(_QWORD *)(v25 + 16) = v26;
              operator delete(v26);
            }
            v17 = v25;
            v18 = 0x1080C409938AC02;
            goto LABEL_45;
          }
          break;
        case 4:
          v27 = (unint64_t *)*v12;
          do
          {
            v28 = __ldaxr(v27);
            v29 = v28 - 1;
          }
          while (__stlxr(v29, v27));
          if (!v29)
          {
            if (!*v12)
              goto LABEL_46;
            v17 = std::pair<nitro::atomic<unsigned long>,std::vector<nitro::flexible_type>>::~pair(*v12);
            goto LABEL_39;
          }
          break;
        case 5:
          v30 = (unint64_t *)*v12;
          do
          {
            v31 = __ldaxr(v30);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, v30));
          if (!v32)
          {
            if (!*v12)
              goto LABEL_46;
            v17 = std::pair<nitro::atomic<unsigned long>,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::~pair(*v12);
LABEL_39:
            v18 = 0x1020C405E66F15BLL;
            goto LABEL_45;
          }
          break;
        case 9:
          v33 = (unint64_t *)*v12;
          do
          {
            v34 = __ldaxr(v33);
            v35 = v34 - 1;
          }
          while (__stlxr(v35, v33));
          if (!v35)
          {
            if (*v12)
            {
              v17 = (uint64_t)std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair((_QWORD *)*v12);
              v18 = 0x10B0C4002311774;
LABEL_45:
              MEMORY[0x19401CD90](v17, v18);
            }
LABEL_46:
            *v12 = 0;
          }
          break;
        default:
          break;
      }
      v36 = *(_QWORD *)a2;
      *((_BYTE *)this + 40) = *((_BYTE *)a2 + 8);
      *v12 = v36;
      v37 = *((unsigned __int8 *)a2 + 8);
      *((_BYTE *)this + 40) = v37;
      if ((v37 - 2) < 4 || v37 == 9)
      {
        v39 = (unint64_t *)*v12;
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 + 1, v39));
      }
    }
    if (*((_BYTE *)a2 + 8) == 2)
    {
      *((_BYTE *)this + 1) = 1;
      std::string::operator=((std::string *)((char *)this + 8), (const std::string *)(*(_QWORD *)a2 + 8));
    }
  }
}

uint64_t nitro::indent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const std::locale::facet *v3;
  unsigned __int8 v4;
  _QWORD *v5;
  uint64_t v6;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  std::locale::id *v10;
  const std::locale::facet *v11;
  unsigned __int8 v12;
  _QWORD *v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  void *__p;
  std::string::size_type v17;
  uint64_t v18;
  _QWORD v19[13];
  char v20;
  uint64_t v21;
  std::locale v22;

  *(_BYTE *)(a2 + 23) = 2;
  strcpy((char *)a2, "  ");
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v19, a1, 24);
  __p = 0;
  v17 = 0;
  v18 = 0;
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(v19[0] - 24)));
  v3 = std::locale::use_facet(&v22, MEMORY[0x1E0DE4A90]);
  v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale(&v22);
  v5 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (uint64_t)&__p, v4);
  if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) == 0)
  {
    if (v18 >= 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if (v18 >= 0)
      v9 = HIBYTE(v18);
    else
      v9 = v17;
    std::string::append((std::string *)a2, p_p, v9);
    v10 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(v19[0] - 24)));
      v11 = std::locale::use_facet(&v22, v10);
      v12 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
      std::locale::~locale(&v22);
      v13 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v19, (uint64_t)&__p, v12);
      if ((*((_BYTE *)v13 + *(_QWORD *)(*v13 - 24) + 32) & 5) != 0)
        break;
      std::string::append((std::string *)a2, "\n  ");
      if (v18 >= 0)
        v14 = (const std::string::value_type *)&__p;
      else
        v14 = (const std::string::value_type *)__p;
      if (v18 >= 0)
        v15 = HIBYTE(v18);
      else
        v15 = v17;
      std::string::append((std::string *)a2, v14, v15);
    }
  }
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v19[0] = *MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[2] = v6;
  v19[3] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[11]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v21);
}

void sub_1912D8B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  std::locale::~locale((std::locale *)(v17 - 72));
  if (a15 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(a1);
}

void nitro::sexp_print(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  const std::string::value_type **v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v9;
  std::string::value_type *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  const std::string::value_type *p_p;
  size_t v18;
  unint64_t v19;
  std::string::size_type v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const std::string::value_type *v24;
  size_t v25;
  uint64_t v26;
  const std::string::value_type *v27;
  char v28;
  nitro *v29;
  uint64_t v30;
  uint64_t *v31;
  std::string::size_type size;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  size_t v38;
  std::string::size_type v39;
  std::string *v40;
  void **v41;
  std::string::value_type *v42;
  std::string::size_type v43;
  std::string::const_iterator v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *p_dst;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::value_type *v51;
  uint64_t v52;
  uint64_t v53;
  std::string v54;
  std::string __dst;
  std::string v56;
  std::string v57;
  void *__p;
  size_t __n;
  uint64_t v60;

  if (!*(_BYTE *)a1)
  {
    v6 = *(unsigned __int8 **)(a1 + 48);
    v7 = *(_QWORD *)(a1 + 56) - (_QWORD)v6;
    if (!v7)
    {
LABEL_10:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      MEMORY[0x19401C808](a3, "(");
      v14 = *(_QWORD *)(a1 + 48);
      if (*(_QWORD *)(a1 + 56) != v14)
      {
        v15 = 0;
        v16 = 0;
        do
        {
          nitro::sexp_print((nitro *)(v14 + v15), (const nitro::SExp *)0x3C, v13);
          if (v60 >= 0)
            p_p = (const std::string::value_type *)&__p;
          else
            p_p = (const std::string::value_type *)__p;
          if (v60 >= 0)
            v18 = HIBYTE(v60);
          else
            v18 = __n;
          std::string::append((std::string *)a3, p_p, v18);
          if (SHIBYTE(v60) < 0)
            operator delete(__p);
          ++v16;
          v14 = *(_QWORD *)(a1 + 48);
          v19 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 56) - v14) >> 3);
          if (v16 < v19)
          {
            std::string::append((std::string *)a3, " ");
            v14 = *(_QWORD *)(a1 + 48);
            v19 = 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 56) - v14) >> 3);
          }
          v15 += 72;
        }
        while (v16 < v19);
      }
      std::string::append((std::string *)a3, ")");
      return;
    }
    v9 = 0;
    v10 = &v54.__r_.__value_.__s.__data_[1];
    v11 = v7 / 72;
    if (v11 <= 1)
      v11 = 1;
    while (1)
    {
      v12 = *v6;
      v6 += 72;
      if (!v12)
        break;
      if (v11 == ++v9)
        goto LABEL_10;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    MEMORY[0x19401C808](a3, "(");
    if (v9)
    {
      v22 = 0;
      v23 = 0;
      do
      {
        nitro::sexp_print((nitro *)(*(_QWORD *)(a1 + 48) + v22), (const nitro::SExp *)0x3C, v21);
        if (v60 >= 0)
          v24 = (const std::string::value_type *)&__p;
        else
          v24 = (const std::string::value_type *)__p;
        if (v60 >= 0)
          v25 = HIBYTE(v60);
        else
          v25 = __n;
        std::string::append((std::string *)a3, v24, v25);
        if (SHIBYTE(v60) < 0)
          operator delete(__p);
        if (++v23 < v9)
          std::string::append((std::string *)a3, " ");
        v22 += 72;
      }
      while (v9 != v23);
    }
    __p = 0;
    __n = 0;
    v60 = 0;
    memset(&v56, 0, sizeof(v56));
    v26 = *(_QWORD *)(a1 + 48);
    v27 = ")";
    if (v9 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 56) - v26) >> 3))
    {
LABEL_119:
      std::string::append((std::string *)a3, v27);
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v60) < 0)
        operator delete(__p);
      return;
    }
    v28 = 0;
    while (1)
    {
      v29 = (nitro *)(v26 + 72 * v9);
      if (!*(_BYTE *)v29)
      {
        v31 = (uint64_t *)(v26 + 72 * v9 + 48);
        v30 = *v31;
        if (v31[1] != *v31)
          std::string::operator=(&v56, (const std::string *)(v30 + 8));
      }
      nitro::sexp_print(v29, (const nitro::SExp *)(a2 - 2), v21);
      size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v57.__r_.__value_.__l.__size_;
      v33 = *(unsigned __int8 *)(a3 + 23);
      v34 = (char)v33;
      v35 = *(_QWORD *)(a3 + 8);
      if ((v33 & 0x80u) != 0)
        v33 = *(_QWORD *)(a3 + 8);
      if (v33 + size <= a2)
      {
        v37 = HIBYTE(v60);
        if (v60 >= 0)
          v38 = HIBYTE(v60);
        else
          v38 = __n;
        if (!v38)
          goto LABEL_86;
        v39 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v39 = v56.__r_.__value_.__l.__size_;
        if (v38 != v39)
          goto LABEL_86;
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v40 = &v56;
        else
          v40 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if (v60 < 0)
        {
          if (memcmp(__p, v40, __n))
            goto LABEL_86;
        }
        else if (HIBYTE(v60))
        {
          v41 = &__p;
          while (*(unsigned __int8 *)v41 == v40->__r_.__value_.__s.__data_[0])
          {
            v41 = (void **)((char *)v41 + 1);
            v40 = (std::string *)((char *)v40 + 1);
            if (!--v37)
              goto LABEL_51;
          }
LABEL_86:
          std::operator+<char>();
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_dst = &__dst;
          else
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v48 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          else
            v48 = __dst.__r_.__value_.__l.__size_;
          std::string::append((std::string *)a3, (const std::string::value_type *)p_dst, v48);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          goto LABEL_113;
        }
      }
LABEL_51:
      if (v34 < 0)
      {
        if (v35 != 1)
          goto LABEL_76;
        v36 = *(_BYTE **)a3;
      }
      else
      {
        v36 = (_BYTE *)a3;
        if (v34 != 1)
          goto LABEL_76;
      }
      if (*v36 != 40)
      {
LABEL_76:
        nitro::indent((uint64_t)&v57, (uint64_t)&v54);
        if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v44.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v54;
        else
          v44.__i_ = (std::__wrap_iter<const char *>::iterator_type)v54.__r_.__value_.__r.__words[0];
        std::string::insert(&v54, v44, 10);
        __dst = v54;
        memset(&v54, 0, sizeof(v54));
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v45 = &__dst;
        else
          v45 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v46 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        else
          v46 = __dst.__r_.__value_.__l.__size_;
        goto LABEL_110;
      }
      nitro::indent((uint64_t)&v57, (uint64_t)&v54);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        v43 = v54.__r_.__value_.__l.__size_;
        if (!v54.__r_.__value_.__l.__size_)
LABEL_124:
          std::string::__throw_out_of_range[abi:ne180100]();
        v42 = (std::string::value_type *)(v54.__r_.__value_.__r.__words[0] + 1);
      }
      else
      {
        v42 = v10;
        v43 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
        if (!*((_BYTE *)&v54.__r_.__value_.__s + 23))
          goto LABEL_124;
      }
      v49 = v43 - 1;
      if (v43 - 1 >= 0x7FFFFFFFFFFFFFF8)
        std::string::__throw_length_error[abi:ne180100]();
      if (v49 >= 0x17)
      {
        v51 = v10;
        v52 = (v49 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v49 | 7) != 0x17)
          v52 = v49 | 7;
        v53 = v52 + 1;
        v50 = (std::string *)operator new(v52 + 1);
        __dst.__r_.__value_.__l.__size_ = v49;
        __dst.__r_.__value_.__r.__words[2] = v53 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
        v10 = v51;
      }
      else
      {
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v43 - 1;
        v50 = &__dst;
        if (v43 == 1)
          goto LABEL_104;
      }
      memmove(v50, v42, v49);
LABEL_104:
      v50->__r_.__value_.__s.__data_[v49] = 0;
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = &__dst;
      else
        v45 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v46 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      else
        v46 = __dst.__r_.__value_.__l.__size_;
LABEL_110:
      std::string::append((std::string *)a3, (const std::string::value_type *)v45, v46);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
LABEL_116:
          operator delete(v54.__r_.__value_.__l.__data_);
      }
      else if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      {
        goto LABEL_116;
      }
      v28 = 1;
LABEL_113:
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      ++v9;
      v26 = *(_QWORD *)(a1 + 48);
      if (v9 >= 0x8E38E38E38E38E39 * ((*(_QWORD *)(a1 + 56) - v26) >> 3))
      {
        v27 = ")";
        if ((v28 & 1) != 0)
          v27 = "\n)";
        goto LABEL_119;
      }
    }
  }
  v5 = (const std::string::value_type **)(a1 + 8);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 31))
    {
      *(_OWORD *)a3 = *(_OWORD *)v5;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 24);
      return;
    }
LABEL_26:
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v56);
    __asm { BR              X10 }
  }
  v20 = *(_QWORD *)(a1 + 16);
  if (!v20)
    goto LABEL_26;
  std::string::__init_copy_ctor_external((std::string *)a3, *v5, v20);
}

void sub_1912D9578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *__p)
{
  std::iostream::~basic_iostream();
  MEMORY[0x19401CCD0](a11);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1912D9610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x1912D965CLL);
  JUMPOUT(0x1912D9660);
}

void sub_1912D9624()
{
  JUMPOUT(0x1912D9660);
}

void sub_1912D962C()
{
  JUMPOUT(0x1912D9660);
}

void sub_1912D964C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  uint64_t v70;

  if (a17 < 0)
    operator delete(__p);
  if (a64 < 0)
  {
    operator delete(a59);
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
  }
  else if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a70 < 0)
      goto LABEL_6;
    goto LABEL_14;
  }
  operator delete(a21);
  if (a70 < 0)
  {
LABEL_6:
    operator delete(a65);
    if (*(char *)(v70 + 23) < 0)
      JUMPOUT(0x1912D96E4);
    JUMPOUT(0x1912D9700);
  }
LABEL_14:
  JUMPOUT(0x1912D96DCLL);
}

void sub_1912D96B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a23 < 0)
  {
    operator delete(a18);
    if (a64 < 0)
    {
LABEL_3:
      operator delete(__p);
      if (*(char *)(v64 + 23) < 0)
      {
LABEL_7:
        operator delete(*(void **)v64);
        _Unwind_Resume(a1);
      }
LABEL_8:
      _Unwind_Resume(a1);
    }
  }
  else if (a64 < 0)
  {
    goto LABEL_3;
  }
  if (*(char *)(v64 + 23) < 0)
    goto LABEL_7;
  goto LABEL_8;
}

void sub_1912D96C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if ((a61 & 0x80000000) == 0)
    JUMPOUT(0x1912D96DCLL);
  JUMPOUT(0x1912D9680);
}

void sub_1912D96F4()
{
  uint64_t v0;

  if ((*(char *)(v0 + 23) & 0x80000000) == 0)
    JUMPOUT(0x1912D9700);
  JUMPOUT(0x1912D96E4);
}

_QWORD *nitro::operator<<(_QWORD *a1, uint64_t a2)
{
  void **v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;

  nitro::sexp_print(a2, 60, (uint64_t)__p);
  if ((v7 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1912D9774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<nitro::SExp>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char *v22;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0x8E38E38E38E38E39 * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 72 * ((72 * a2 - 72) / 0x48) + 72;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(char **)a1;
    v7 = 0x8E38E38E38E38E39 * ((uint64_t)&v5[-*(_QWORD *)a1] >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0x38E38E38E38E38ELL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = 0x8E38E38E38E38E39 * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x38E38E38E38E38ELL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(72 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[72 * v7];
    v14 = &v11[72 * v10];
    v15 = 72 * ((72 * a2 - 72) / 0x48) + 72;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_22:
        operator delete(v5);
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v13[v17];
        v19 = &v5[v17];
        *((_WORD *)v18 - 36) = *(_WORD *)&v5[v17 - 72];
        v20 = *(_OWORD *)&v5[v17 - 64];
        *((_QWORD *)v18 - 6) = *(_QWORD *)&v5[v17 - 48];
        *((_OWORD *)v18 - 4) = v20;
        *((_QWORD *)v19 - 7) = 0;
        *((_QWORD *)v19 - 6) = 0;
        *((_QWORD *)v19 - 8) = 0;
        *((_QWORD *)v18 - 5) = 0;
        *(v18 - 32) = 0;
        v21 = *(_QWORD *)&v5[v17 - 40];
        *(v18 - 32) = v5[v17 - 32];
        *((_QWORD *)v18 - 5) = v21;
        *(v18 - 32) = v5[v17 - 32];
        *(v19 - 32) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        *(_OWORD *)(v18 - 24) = *(_OWORD *)&v5[v17 - 24];
        *((_QWORD *)v18 - 1) = *(_QWORD *)&v5[v17 - 8];
        *((_QWORD *)v19 - 3) = 0;
        *((_QWORD *)v19 - 2) = 0;
        *((_QWORD *)v19 - 1) = 0;
        v17 -= 72;
      }
      while (&v5[v17] != v6);
      v22 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = &v13[v17];
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v22)
      {
        do
        {
          v5 -= 72;
          nitro::SExp::~SExp((nitro::SExp *)v5);
        }
        while (v5 != v22);
        v5 = v22;
      }
      if (v5)
        goto LABEL_22;
    }
  }
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x19401C8EC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1912D9B14(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1912D9AE0);
  }
  __cxa_rethrow();
}

void sub_1912D9B58(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void nitro::SExp::load(unint64_t **a1)
{
  unint64_t *v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (*v3)
    {
      if (*(char *)(v5 + 31) < 0)
        operator delete(*(void **)(v5 + 8));
      MEMORY[0x19401CD90](v5, 0x1012C404EF22A49);
    }
  }
  OUTLINED_FUNCTION_2();
}

{
  unint64_t *v1;
  char v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (*v3)
    {
      v6 = *(void **)(v5 + 8);
      if (v6)
      {
        *(_QWORD *)(v5 + 16) = v6;
        operator delete(v6);
      }
      MEMORY[0x19401CD90](v5, 0x1080C409938AC02);
    }
  }
  OUTLINED_FUNCTION_2();
}

{
  unint64_t *v1;
  char v2;
  _QWORD **v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = *a1;
  do
    OUTLINED_FUNCTION_3_3(v1);
  while (__stlxr(v4, v1));
  if (v2)
  {
    v5 = *v3;
    if (v5)
    {
      v6 = std::pair<nitro::atomic<unsigned long>,nitro::ndarray_container>::~pair(v5);
      MEMORY[0x19401CD90](v6, 0x10B0C4002311774);
    }
  }
}

void demangle(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int status;
  size_t outlen;
  char mangled[1024];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  outlen = 0;
  status = 0;
  if (sscanf(a1, "%*[^(]%*[^_]%127[^)+]", mangled) != 1
    || (v4 = __cxa_demangle(mangled, 0, &outlen, &status), (v5 = v4) == 0))
  {
    if (sscanf(a1, "%127s", mangled) == 1)
    {
      v8 = strlen(mangled);
      if (v8 > 0x7FFFFFFFFFFFFFF7)
        std::string::__throw_length_error[abi:ne180100]();
      v9 = v8;
      if (v8 >= 0x17)
      {
        v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v8 | 7) != 0x17)
          v12 = v8 | 7;
        v13 = v12 + 1;
        v14 = operator new(v12 + 1);
        a2[1] = v9;
        a2[2] = v13 | 0x8000000000000000;
        *a2 = v14;
        a2 = v14;
      }
      else
      {
        *((_BYTE *)a2 + 23) = v8;
        if (!v8)
          goto LABEL_20;
      }
      memcpy(a2, mangled, v9);
LABEL_20:
      *((_BYTE *)a2 + v9) = 0;
      return;
    }
    v10 = strlen(a1);
    if (v10 > 0x7FFFFFFFFFFFFFF7)
      std::string::__throw_length_error[abi:ne180100]();
    v11 = v10;
    if (v10 >= 0x17)
    {
      v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17)
        v15 = v10 | 7;
      v16 = v15 + 1;
      v17 = operator new(v15 + 1);
      a2[1] = v11;
      a2[2] = v16 | 0x8000000000000000;
      *a2 = v17;
      a2 = v17;
    }
    else
    {
      *((_BYTE *)a2 + 23) = v10;
      if (!v10)
        goto LABEL_25;
    }
    memcpy(a2, a1, v11);
LABEL_25:
    *((_BYTE *)a2 + v11) = 0;
    return;
  }
  v6 = strlen(v4);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v18 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v18 = v6 | 7;
    v19 = v18 + 1;
    v20 = operator new(v18 + 1);
    a2[1] = v7;
    a2[2] = v19 | 0x8000000000000000;
    *a2 = v20;
    a2 = v20;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v6;
    if (!v6)
      goto LABEL_30;
  }
  memmove(a2, v5, v7);
LABEL_30:
  *((_BYTE *)a2 + v7) = 0;
  free(v5);
}

size_t __print_back_trace(void)
{
  size_t result;
  const char *v1;
  FILE *v2;
  int v3;
  char **v4;
  uint64_t v5;
  const void **v6;
  uint64_t v7;
  const void *v8;
  const char **v9;
  uint64_t v10;
  const char *v11;
  const char **v12;
  void **v13;
  void *__p[2];
  char v15;
  char __str[1024];
  _OWORD v17[512];
  uint64_t v18;

  result = MEMORY[0x1E0C80A78]();
  v18 = *MEMORY[0x1E0C80C00];
  if ((write_error & 1) == 0)
  {
    memset(v17, 0, 512);
    snprintf(__str, 0x400uLL, "backtrace.%d", backtrace_file_number);
    if (write_count)
      v1 = "a";
    else
      v1 = "w";
    v2 = fopen(__str, v1);
    if (v2)
    {
      ++write_count;
      v3 = backtrace((void **)v17, 1024);
      v4 = backtrace_symbols((void *const *)v17, v3);
      v5 = v3;
      fwrite("Pointers\n", 9uLL, 1uLL, v2);
      fwrite("------------\n", 0xDuLL, 1uLL, v2);
      if (v3)
      {
        v6 = (const void **)v17;
        v7 = v3;
        do
        {
          v8 = *v6++;
          fprintf(v2, "%p\n", v8);
          --v7;
        }
        while (v7);
        fwrite("Raw\n", 4uLL, 1uLL, v2);
        fwrite("------------\n", 0xDuLL, 1uLL, v2);
        v9 = (const char **)v4;
        v10 = v3;
        do
        {
          v11 = *v9++;
          fprintf(v2, "%s\n", v11);
          --v10;
        }
        while (v10);
      }
      else
      {
        fwrite("Raw\n", 4uLL, 1uLL, v2);
        fwrite("------------\n", 0xDuLL, 1uLL, v2);
      }
      fwrite("\nDemangled\n", 0xBuLL, 1uLL, v2);
      fwrite("------------\n", 0xDuLL, 1uLL, v2);
      if (v3)
      {
        v12 = (const char **)v4;
        do
        {
          demangle(*v12, __p);
          if (v15 >= 0)
            v13 = __p;
          else
            v13 = (void **)__p[0];
          fprintf(v2, "%s\n", (const char *)v13);
          if (v15 < 0)
            operator delete(__p[0]);
          ++v12;
          --v5;
        }
        while (v5);
      }
      free(v4);
      fwrite("-------------------------------------------------------\n", 0x38uLL, 1uLL, v2);
      fwrite("\n\n", 2uLL, 1uLL, v2);
      return fclose(v2);
    }
    else
    {
      result = fwrite("Unable to open output backtrace file.\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      write_error = 1;
    }
  }
  return result;
}

void sub_1912DA228(_Unwind_Exception *exception_object, int a2)
{
  _QWORD *v2;

  if (a2)
  {
    __cxa_begin_catch(exception_object);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Unable to print back trace on termination", 41);
    std::endl[abi:ne180100]<char,std::char_traits<char>>(v2);
    __cxa_end_catch();
    JUMPOUT(0x1912DA1ECLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nitro::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"[", 1);
  if (a2[1] != *a2)
  {
    v3 = 0;
    do
    {
      std::ostream::operator<<();
      ++v3;
      v4 = (uint64_t)(a2[1] - *a2) >> 3;
      if (v3 < v4)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
        v4 = (uint64_t)(a2[1] - *a2) >> 3;
      }
    }
    while (v3 < v4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"]", 1);
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v8[0] = v5;
  v8[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v9 < 0)
    operator delete((void *)v8[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v10);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *p_p;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  uint64_t v23;
  unsigned __int8 v24;
  _QWORD v25[2];
  _QWORD v26[11];
  char v27;
  uint64_t v28;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"{", 1);
  v3 = a2[1];
  if (v3 != *a2)
  {
    v4 = (v3 - *a2) >> 5;
    v5 = *a2 + 16;
    v6 = 1;
    do
    {
      if (*(_BYTE *)(v5 - 8) == 2)
      {
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\"", 1);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5 - 16);
        if ((v24 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v24 & 0x80u) == 0)
          v10 = v24;
        else
          v10 = v23;
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)p_p, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\"", 1);
      }
      else
      {
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5 - 16);
        if ((v24 & 0x80u) == 0)
          v12 = &__p;
        else
          v12 = __p;
        if ((v24 & 0x80u) == 0)
          v13 = v24;
        else
          v13 = v23;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v12, v13);
      }
      if ((char)v24 < 0)
        operator delete(__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)":", 1);
      if (*(_BYTE *)(v5 + 8) == 2)
      {
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"\"", 1);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5);
        if ((v24 & 0x80u) == 0)
          v15 = &__p;
        else
          v15 = __p;
        if ((v24 & 0x80u) == 0)
          v16 = v24;
        else
          v16 = v23;
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\"", 1);
      }
      else
      {
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v5);
        if ((v24 & 0x80u) == 0)
          v18 = &__p;
        else
          v18 = __p;
        if ((v24 & 0x80u) == 0)
          v19 = v24;
        else
          v19 = v23;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v18, v19);
      }
      if ((char)v24 < 0)
      {
        operator delete(__p);
        if (v6 < v4)
LABEL_40:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)", ", 2);
      }
      else if (v6 < v4)
      {
        goto LABEL_40;
      }
      ++v6;
      v7 = v5 + 16;
      v5 += 32;
    }
    while (v7 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"}", 1);
  std::stringbuf::str();
  v25[0] = *MEMORY[0x1E0DE4F50];
  v20 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v26[0] = v20;
  v26[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v27 < 0)
    operator delete((void *)v26[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v28);
}

void sub_1912DA3D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  nitro::operator<<(v6, a2);
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v8);
}

void sub_1912DA4A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_impl::get_string_visitor::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD v18[2];
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"[", 1);
  v3 = *a2;
  if (a2[1] != *a2)
  {
    v4 = 0;
    v5 = 0;
    do
    {
      if (*(_BYTE *)(v3 + v4 + 8) == 2)
      {
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\"", 1);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(*a2 + v4);
        if ((v17 & 0x80u) == 0)
          p_p = &__p;
        else
          p_p = __p;
        if ((v17 & 0x80u) == 0)
          v8 = v17;
        else
          v8 = v16;
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)p_p, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"", 1);
      }
      else
      {
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v3 + v4);
        if ((v17 & 0x80u) == 0)
          v10 = &__p;
        else
          v10 = __p;
        if ((v17 & 0x80u) == 0)
          v11 = v17;
        else
          v11 = v16;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v10, v11);
      }
      if ((char)v17 < 0)
        operator delete(__p);
      ++v5;
      v3 = *a2;
      v12 = (a2[1] - *a2) >> 4;
      if (v5 < v12)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)",", 1);
        v3 = *a2;
        v12 = (a2[1] - *a2) >> 4;
      }
      v4 += 16;
    }
    while (v5 < v12);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"]", 1);
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F50];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v19[0] = v13;
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v21);
}

void sub_1912DA6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1912DA994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;

  v4 = *a2;
  v3 = a2[1];
  v6 = *a3;
  v5 = a3[1];
  if (v3 - *a2 != v5 - *a3)
    return 0;
  v18 = 0;
  v19 = 0;
  v17 = &v18;
  if (v5 != v6)
  {
    v9 = 0;
    v10 = 0;
    while (1)
    {
      v11 = &v18;
      v12 = &v18;
      if (v9)
      {
        while (1)
        {
          while (1)
          {
            v12 = (uint64_t **)v9;
            v13 = v9[4];
            if (v10 >= v13)
              break;
            v9 = *v12;
            v11 = v12;
            if (!*v12)
              goto LABEL_11;
          }
          if (v13 >= v10)
            break;
          v9 = v12[1];
          if (!v9)
          {
            v11 = v12 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v14 = (uint64_t *)operator new(0x28uLL);
        v14[4] = v10;
        *v14 = 0;
        v14[1] = 0;
        v14[2] = (uint64_t)v12;
        *v11 = v14;
        if (*v17)
        {
          v17 = (uint64_t **)*v17;
          v14 = *v11;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v18, v14);
        ++v19;
        v6 = *a3;
        v5 = a3[1];
      }
      if (++v10 >= (v5 - v6) >> 5)
        break;
      v9 = v18;
    }
    v4 = *a2;
    v3 = a2[1];
  }
  if (v3 == v4)
  {
    v15 = 1;
  }
  else
  {
    if (v17 != &v18)
      __asm { BR              X13 }
    v15 = 0;
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v17, v18);
  return v15;
}

void sub_1912DB714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_impl::approx_equality_operator::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = a2[1];
  if (v3 - *a2 != a3[1] - *a3)
    return 0;
  if (v3 != *a2)
    __asm { BR              X13 }
  return 1;
}

uint64_t nitro::flexible_type_fail(uint64_t this)
{
  if ((this & 1) == 0)
    nitro::flexible_type_fail(BOOL)::$_0::operator()();
  return this;
}

uint64_t nitro::flexible_type::is_zero(nitro::flexible_type *this)
{
  uint64_t is_zero;
  double v3;
  double v4;
  char *v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v34[9];
  _QWORD v35[9];
  _QWORD v36[9];
  _QWORD v37[9];
  double v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  is_zero = 1;
  switch(*((_BYTE *)this + 8))
  {
    case 0:
      v3 = *(double *)this;
      return *(_QWORD *)&v3 == 0;
    case 1:
      return *(double *)this == 0.0;
    case 2:
      if (*(char *)(*(_QWORD *)this + 31) < 0)
        v3 = *(double *)(*(_QWORD *)this + 16);
      else
        *(_QWORD *)&v3 = *(unsigned __int8 *)(*(_QWORD *)this + 31);
      return *(_QWORD *)&v3 == 0;
    case 3:
    case 4:
    case 5:
      return *(_QWORD *)(*(_QWORD *)this + 8) == *(_QWORD *)(*(_QWORD *)this + 16);
    case 7:
      return is_zero;
    case 9:
      v4 = *(double *)this;
      v6 = *(char **)(*(_QWORD *)this + 32);
      v5 = *(char **)(*(_QWORD *)this + 40);
      v7 = v5 - v6;
      if (v5 == v6 || !*(_QWORD *)(*(_QWORD *)&v4 + 16))
        return is_zero;
      v8 = v7 - 8;
      v9 = (unint64_t)(v7 - 8) >> 3;
      if (v8 < 8)
      {
        v10 = 1;
        v11 = *(char **)(*(_QWORD *)this + 32);
        do
        {
LABEL_20:
          v18 = *(_QWORD *)v11;
          v11 += 8;
          v10 *= v18;
        }
        while (v11 != v5);
        goto LABEL_21;
      }
      v13 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v11 = &v6[8 * v13];
      v14 = v6 + 8;
      v15 = 1;
      v16 = v13;
      v17 = 1;
      do
      {
        v15 *= *(v14 - 1);
        v17 *= *v14;
        v14 += 2;
        v16 -= 2;
      }
      while (v16);
      v10 = v17 * v15;
      if (v9 + 1 != v13)
        goto LABEL_20;
LABEL_21:
      if (!v10)
        return 1;
      if (v8 < 8)
      {
        v19 = 1;
        v20 = v6;
        do
        {
LABEL_28:
          v27 = *(_QWORD *)v20;
          v20 += 8;
          v19 *= v27;
        }
        while (v20 != v5);
        goto LABEL_29;
      }
      v21 = v9 + 1;
      v22 = (v9 + 1) & 0x3FFFFFFFFFFFFFFELL;
      v20 = &v6[8 * v22];
      v23 = v6 + 8;
      v24 = 1;
      v25 = v22;
      v26 = 1;
      do
      {
        v24 *= *(v23 - 1);
        v26 *= *v23;
        v23 += 2;
        v25 -= 2;
      }
      while (v25);
      v19 = v26 * v24;
      if (v21 != v22)
        goto LABEL_28;
LABEL_29:
      if (v19 != 1)
        return 0;
      v28 = *(_QWORD *)&v4 + 8;
      switch(*(_DWORD *)(*(_QWORD *)&v4 + 8))
      {
        case 3:
          nitro::ndarray<int>::ndarray((uint64_t)v36, v28);
          v39 = 0;
          *(_QWORD *)&v38 = *(int *)(v36[0] + 4 * v36[8]);
          is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v36);
          break;
        case 5:
          nitro::ndarray<unsigned char>::ndarray((uint64_t)v37, v28);
          v39 = 0;
          *(_QWORD *)&v38 = *(unsigned __int8 *)(v37[0] + v37[8]);
          is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v37);
          break;
        case 9:
          nitro::ndarray<float>::ndarray((uint64_t)v34, v28);
          v39 = 1;
          v38 = *(float *)(v34[0] + 4 * v34[8]);
          is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v34);
          break;
        case 0xB:
          nitro::ndarray<half>::ndarray((uint64_t)v35, v28);
          v39 = 1;
          _H0 = *(_WORD *)(v35[0] + 2 * v35[8]);
          __asm { FCVT            D0, H0 }
          v38 = _D0;
          is_zero = nitro::flexible_type::is_zero((nitro::flexible_type *)&v38);
          nitro::ndarray<float>::~ndarray(v35);
          break;
        default:
          nitro::ndarray_container::visit<nitro::flexible_type::is_zero(void)::$_0>(nitro::flexible_type::is_zero(void)::$_0)const::{lambda(void)#1}::operator()();
      }
      return is_zero;
    default:
      nitro::flexible_type::is_zero(void)const::$_1::operator()();
  }
}

void sub_1912DC04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912DC060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nitro::ndarray<float>::~ndarray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1912DC074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  nitro::ndarray<float>::~ndarray(&a28);
  _Unwind_Resume(a1);
}

void nitro::flexible_type::is_zero(void)const::$_1::operator()()
{
  file_logger *v0;
  file_logger *started;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *exception;
  _QWORD *v5;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 177, 1);
    v2 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && *((_BYTE *)v2 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2 + 2, (uint64_t)"Unexpected type!", 16);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
    }
  }
  v5 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "Unexpected type!");
}

void sub_1912DC18C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_fail(BOOL)::$_0::operator()()
{
  file_logger *v0;
  file_logger *started;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *exception;
  _QWORD *v5;

  if (*((int *)global_logger() + 169) <= 6)
  {
    v0 = (file_logger *)global_logger();
    started = file_logger::start_stream(v0, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 192, 1);
    v2 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v2 && *((_BYTE *)v2 + 280))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2 + 2, (uint64_t)"Invalid type conversion", 23);
    v3 = pthread_getspecific(*((_QWORD *)started + 74));
    if (v3 && *((_BYTE *)v3 + 280))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3 + 2, (uint64_t)"\n", 1);
      file_logger::stream_flush(started);
      if (*((_DWORD *)started + 150) == 7)
      {
        __print_back_trace();
        exception = __cxa_allocate_exception(8uLL);
        *exception = "LOG_FATAL encountered";
        __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
      }
    }
  }
  v5 = __cxa_allocate_exception(0x18uLL);
  std::string::basic_string[abi:ne180100]<0>(v5, "Invalid type conversion");
}

void sub_1912DC2A0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::vector<std::string>>::get(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;

  if (a1[8] != 4)
    nitro::flexible_type_converter<std::vector<std::string>>::get(nitro::flexible_type const&)const::$_0::operator()();
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) != v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v9 = *(_QWORD *)(v4 + v5);
      v10 = (__int128 *)(v9 + 8);
      if ((unint64_t)v6 < *(_QWORD *)(a2 + 16))
      {
        if (*(char *)(v9 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
        }
        else
        {
          v8 = *v10;
          v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
          *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
        }
        *(_QWORD *)(a2 + 8) = ++v6;
      }
      else
      {
        v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>((char **)a2, (uint64_t)v10);
      }
      *(_QWORD *)(a2 + 8) = v6;
      ++v7;
      v4 = *(_QWORD *)(v3 + 8);
      v5 += 16;
    }
    while (v7 < (*(_QWORD *)(v3 + 16) - v4) >> 4);
  }
}

void nitro::flexible_type_converter<std::vector<std::string>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"int(f.get_type())", 17);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"int(flex_type_enum::LIST)", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 200, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 200, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912DC764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912DC7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::vector<int>>::get(unsigned __int8 *a1@<X1>, std::vector<int> *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const nitro::ndarray_container *v8;
  int v9;
  int *begin;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::string v17;
  std::string::size_type v18;
  void *__p;
  void *v20;
  size_t __idx[2];
  int *v22;
  __int128 __dst;
  std::__shared_weak_count *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v3 = a1[8];
  if ((_DWORD)v3 == 9)
  {
    v7 = *(_QWORD *)a1;
    v9 = *(_DWORD *)(v7 + 8);
    v8 = (const nitro::ndarray_container *)(v7 + 8);
    if (v9 == 3)
      nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v8);
    else
      _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v8, (uint64_t)&__dst);
    nitro::ndarray<int>::ndarray((uint64_t)&v17, (uint64_t)&__dst);
    nitro::ndarray<int>::get_elements_copy((uint64_t *)&v17, (uint64_t *)__idx);
    begin = a2->__begin_;
    if (a2->__begin_)
    {
      a2->__end_ = begin;
      operator delete(begin);
      a2->__begin_ = 0;
      a2->__end_ = 0;
      a2->__end_cap_.__value_ = 0;
    }
    *(_OWORD *)&a2->__begin_ = *(_OWORD *)__idx;
    a2->__end_cap_.__value_ = v22;
    __idx[1] = 0;
    v22 = 0;
    __idx[0] = 0;
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
    if (v17.__r_.__value_.__r.__words[2])
    {
      v18 = v17.__r_.__value_.__r.__words[2];
      operator delete((void *)v17.__r_.__value_.__r.__words[2]);
    }
    size = (std::__shared_weak_count *)v17.__r_.__value_.__l.__size_;
    if (v17.__r_.__value_.__l.__size_)
    {
      v12 = (unint64_t *)(v17.__r_.__value_.__l.__size_ + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    v14 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else
  {
    if ((_DWORD)v3 != 4)
      __asm { BR              X10 }
    v4 = *(_QWORD *)a1;
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v5 != v6)
    {
      std::vector<Device>::__append(a2, (v5 - v6) >> 4);
      v6 = *(_QWORD *)(v4 + 8);
      v5 = *(_QWORD *)(v4 + 16);
    }
    if (v5 != v6)
      __asm { BR              X12 }
  }
}

void sub_1912DCBE8(uint64_t a1, _QWORD *a2, std::string *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 __dst, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 __dsta,unint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char **v33;
  const char *v34;
  size_t v35;
  size_t v36;
  __int128 *p_dsta;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  std::runtime_error *exception;
  std::string *v44;
  __int128 v45;

  v32 = *a2;
  v33 = (const char **)(*a2 + 8);
  *(_QWORD *)(v31 - 96) = 0;
  v34 = (const char *)v33;
  if (*(char *)(v32 + 31) < 0)
    v34 = *v33;
  v35 = strlen(v34);
  if (v35 > 0x7FFFFFFFFFFFFFF7)
    std::string::__throw_length_error[abi:ne180100]();
  v36 = v35;
  if (v35 >= 0x17)
  {
    v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v35 | 7) != 0x17)
      v38 = v35 | 7;
    v39 = v38 + 1;
    p_dsta = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&__dsta + 1) = v36;
    a30 = v39 | 0x8000000000000000;
    *(_QWORD *)&__dsta = p_dsta;
    v30 = a10;
  }
  else
  {
    HIBYTE(a30) = v35;
    p_dsta = &__dsta;
    if (!v35)
    {
LABEL_11:
      *((_BYTE *)p_dsta + v36) = 0;
      v40 = std::stoll((const std::string *)&__dsta, (size_t *)(v31 - 96), 10);
      if (SHIBYTE(a30) < 0)
        operator delete((void *)__dsta);
      v41 = *(_QWORD *)(v31 - 96);
      if (*(char *)(v32 + 31) < 0)
      {
        if (v41 == *(_QWORD *)(v32 + 16))
        {
LABEL_15:
          v42 = *(_DWORD **)(v30 + 8);
          if ((unint64_t)v42 < *(_QWORD *)(v30 + 16))
          {
            *v42 = v40;
            JUMPOUT(0x1912DCBC4);
          }
          JUMPOUT(0x1912DCB08);
        }
      }
      else if (v41 == *(unsigned __int8 *)(v32 + 31))
      {
        goto LABEL_15;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      v44 = std::string::append((std::string *)&a11, " cannot be interpreted as an integer");
      v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      a30 = v44->__r_.__value_.__r.__words[2];
      __dsta = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, (const std::string *)&__dsta);
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  memmove(p_dsta, v34, v36);
  goto LABEL_11;
}

void sub_1912DCE34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  size_t v5;
  void *v6;

  v2 = *(_QWORD *)(v0 + v1);
  v4 = *(_BYTE **)(v2 + 8);
  v3 = *(_BYTE **)(v2 + 16);
  v5 = v3 - v4;
  if (v3 != v4)
  {
    if ((v5 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v6 = operator new(v3 - v4);
    memcpy(v6, v4, v5);
  }
  nitro::flexible_type_fail(BOOL)::$_0::operator()();
}

void sub_1912DCF10(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  size_t v4;
  void *v5;

  v3 = *(_BYTE **)(*(_QWORD *)a2 + 8);
  v2 = *(_BYTE **)(*(_QWORD *)a2 + 16);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    if ((v4 & 0x8000000000000000) != 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v5 = operator new(v2 - v3);
    memcpy(v5, v3, v4);
  }
  nitro::flexible_type_fail(BOOL)::$_0::operator()();
}

void sub_1912DCF3C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  v22 = *a2;
  a21 = 0;
  a22 = 0;
  a20 = 0;
  std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)&a20, *(char **)(v22 + 8), *(char **)(v22 + 16), (uint64_t)(*(_QWORD *)(v22 + 16) - *(_QWORD *)(v22 + 8)) >> 5);
  nitro::flexible_type_fail(BOOL)::$_0::operator()();
}

void sub_1912DCFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  int v35;
  void *v36;
  void *v38;

  if (a35 < 0)
    operator delete(__p);
  if (a16 < 0)
  {
    operator delete(a11);
    if ((v35 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v35)
  {
LABEL_8:
    v38 = *(void **)a10;
    if (*(_QWORD *)a10)
    {
      *(_QWORD *)(a10 + 8) = v38;
      operator delete(v38);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void nitro::flexible_type_converter<std::vector<long long>>::get(unsigned __int8 *a1@<X1>, void **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const nitro::ndarray_container *v8;
  int v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  int *v23;
  char *v24;
  BOOL v25;
  void **v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  void *v37;
  void **v38;
  std::string v39;
  std::string::size_type v40;
  void *__p;
  void *v42;
  __int128 __dst;
  std::__shared_weak_count *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  size_t __idx;
  int *v50;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = a1[8];
  v38 = a2;
  if ((_DWORD)v3 != 9)
  {
    if ((_DWORD)v3 != 4)
      __asm { BR              X10 }
    v4 = *(_QWORD *)a1;
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
    if (v5 != v6)
    {
      std::vector<unsigned long long>::__append((uint64_t)a2, (v5 - v6) >> 4);
      v6 = *(_QWORD *)(v4 + 8);
      v5 = *(_QWORD *)(v4 + 16);
    }
    if (v5 != v6)
      __asm { BR              X12 }
    return;
  }
  v7 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(v7 + 8);
  v8 = (const nitro::ndarray_container *)(v7 + 8);
  if (v9 == 3)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v8);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v8, (uint64_t)&__dst);
  nitro::ndarray<int>::ndarray((uint64_t)&v39, (uint64_t)&__dst);
  nitro::ndarray<int>::get_elements_copy((uint64_t *)&v39, (uint64_t *)&__idx);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v39.__r_.__value_.__r.__words[2])
  {
    v40 = v39.__r_.__value_.__r.__words[2];
    operator delete((void *)v39.__r_.__value_.__r.__words[2]);
  }
  size = (std::__shared_weak_count *)v39.__r_.__value_.__l.__size_;
  if (v39.__r_.__value_.__l.__size_)
  {
    v11 = (unint64_t *)(v39.__r_.__value_.__l.__size_ + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v45)
  {
    v46 = v45;
    operator delete(v45);
  }
  v13 = v44;
  if (v44)
  {
    p_shared_owners = (unint64_t *)&v44->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = (int *)__idx;
  v17 = v50;
  v44 = 0;
  __dst = 0uLL;
  v18 = (uint64_t)v50 - __idx;
  if (v50 != (int *)__idx)
  {
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFDLL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v19 = (char *)operator new(2 * v18);
    v20 = v19;
    v21 = &v19[8 * (v18 >> 2)];
    v22 = v18 - 4;
    v23 = v16;
    v24 = v19;
    v25 = (unint64_t)(v18 - 4) >= 0x1C;
    v26 = v38;
    if (!v25)
      goto LABEL_47;
    v27 = (v22 >> 2) + 1;
    v23 = &v16[v27 & 0x7FFFFFFFFFFFFFF8];
    v24 = &v19[8 * (v27 & 0x7FFFFFFFFFFFFFF8)];
    v28 = v19 + 32;
    v29 = (char *)(v16 + 4);
    v30 = v27 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *((_OWORD *)v29 - 1);
      *(_QWORD *)&v32 = (int)v31;
      *((_QWORD *)&v32 + 1) = SDWORD1(v31);
      v33 = v32;
      *(_QWORD *)&v32 = SDWORD2(v31);
      *((_QWORD *)&v32 + 1) = SHIDWORD(v31);
      v34 = v32;
      *(_QWORD *)&v32 = (int)*(_OWORD *)v29;
      *((_QWORD *)&v32 + 1) = (int)HIDWORD(*(_QWORD *)v29);
      v35 = v32;
      *(_QWORD *)&v32 = (int)*((_QWORD *)v29 + 1);
      *((_QWORD *)&v32 + 1) = (int)HIDWORD(*(_OWORD *)v29);
      *(v28 - 2) = v33;
      *(v28 - 1) = v34;
      *v28 = v35;
      v28[1] = v32;
      v28 += 4;
      v29 += 32;
      v30 -= 8;
    }
    while (v30);
    if (v27 != (v27 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_47:
      do
      {
        v36 = *v23++;
        *(_QWORD *)v24 = v36;
        v24 += 8;
      }
      while (v23 != v17);
    }
    v37 = *v38;
    if (!*v38)
      goto LABEL_39;
    goto LABEL_38;
  }
  v21 = 0;
  v24 = 0;
  v20 = 0;
  v26 = v38;
  v37 = *v38;
  if (*v38)
  {
LABEL_38:
    v26[1] = v37;
    operator delete(v37);
    *v26 = 0;
    v26[1] = 0;
    v26[2] = 0;
    v16 = (int *)__idx;
  }
LABEL_39:
  *v26 = v20;
  v26[1] = v24;
  v26[2] = v21;
  if (v16)
  {
    v50 = v16;
    operator delete(v16);
  }
}

void sub_1912DD92C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  int64_t v6;
  char *v7;
  char *v8;

  v3 = *a2;
  *(_QWORD *)(v2 - 112) = 0;
  *(_QWORD *)(v2 - 104) = 0;
  *(_QWORD *)(v2 - 120) = 0;
  v5 = *(_BYTE **)(v3 + 8);
  v4 = *(_BYTE **)(v3 + 16);
  v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v7 = (char *)operator new(v4 - v5);
    v8 = &v7[8 * (v6 >> 3)];
    *(_QWORD *)(v2 - 120) = v7;
    *(_QWORD *)(v2 - 104) = v8;
    memcpy(v7, v5, v6);
    *(_QWORD *)(v2 - 112) = v8;
  }
  nitro::flexible_type_fail(BOOL)::$_0::operator()();
}

void sub_1912DD958(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 - 136) = 0;
  *(_QWORD *)(v2 - 128) = 0;
  *(_QWORD *)(v2 - 144) = 0;
  std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>::__init_with_size[abi:ne180100]<std::pair<nitro::flexible_type,nitro::flexible_type>*,std::pair<nitro::flexible_type,nitro::flexible_type>*>((char *)(v2 - 144), *(char **)(v3 + 8), *(char **)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 5);
  nitro::flexible_type_fail(BOOL)::$_0::operator()();
}

void sub_1912DD9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  int v27;
  void *v28;
  void *v30;

  if (a27 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v27 & 1) == 0)
      goto LABEL_8;
  }
  else if (!v27)
  {
LABEL_8:
    v30 = *(void **)a9;
    if (*(_QWORD *)a9)
    {
      *(_QWORD *)(a9 + 8) = v30;
      operator delete(v30);
    }
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

double nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get@<D0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v14 = a1[8];
  if (v14 != 4)
  {
    *(_QWORD *)&v12 = &v14;
    nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get(nitro::flexible_type const&)const::$_0::operator()();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)a1;
  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v5 != v4)
  {
    std::vector<std::vector<long long>>::__append((uint64_t)a2, (v5 - v4) >> 4);
    v4 = *(_QWORD *)(v3 + 8);
    v5 = *(_QWORD *)(v3 + 16);
  }
  if (v5 != v4)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    do
    {
      nitro::flexible_type_converter<std::vector<long long>>::get((unsigned __int8 *)(v4 + v8), (void **)&v12);
      v10 = *a2 + v7;
      v11 = *(void **)v10;
      if (*(_QWORD *)v10)
      {
        *(_QWORD *)(v10 + 8) = v11;
        operator delete(v11);
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
      }
      result = *(double *)&v12;
      *(_OWORD *)v10 = v12;
      *(_QWORD *)(v10 + 16) = v13;
      ++v9;
      v4 = *(_QWORD *)(v3 + 8);
      v8 += 16;
      v7 += 24;
    }
    while (v9 < (*(_QWORD *)(v3 + 16) - v4) >> 4);
  }
  return result;
}

void nitro::flexible_type_converter<std::vector<std::vector<long long>>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"int(f.get_type())", 17);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"int(flex_type_enum::LIST)", 25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 255, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 255, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912DE00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912DE074(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_converter<int>::get(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const nitro::ndarray_container *v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *p_dst;
  std::__shared_weak_count *v17;
  void *v18;
  void *v19;
  void *__p;
  void *v21;
  size_t __idx;
  uint64_t v23;
  __int128 __dst;
  std::__shared_weak_count *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  v2 = a2[8];
  if ((_DWORD)v2 != 9)
  {
    if ((_DWORD)v2 == 4)
    {
      v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
      v4 = *(_QWORD *)(*(_QWORD *)a2 + 16) - v3;
      *(_QWORD *)&__dst = v4 >> 4;
      if (v4 == 16)
        __asm { BR              X11 }
      p_dst = &__dst;
      nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_0::operator()();
    }
    __asm { BR              X10 }
  }
  v5 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(v5 + 8);
  v6 = (const nitro::ndarray_container *)(v5 + 8);
  if (v7 == 3)
    nitro::ndarray_container::ndarray_container((nitro::ndarray_container *)&__dst, v6);
  else
    _ZNK5nitro17ndarray_container5visitIZNKS0_4castIiEES0_vEUlT_E_EENSt3__19result_ofIFS3_RKNS_7ndarrayIfEEEE4typeES3_(v6, (uint64_t)&__dst);
  nitro::ndarray<int>::ndarray((uint64_t)&p_dst, (uint64_t)&__dst);
  nitro::ndarray<int>::get_elements_copy((uint64_t *)&p_dst, (uint64_t *)&__idx);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  v8 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  v11 = v25;
  if (v25)
  {
    v12 = (unint64_t *)&v25->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)&__dst = (uint64_t)(v23 - __idx) >> 2;
  if (v23 - __idx != 4)
  {
    p_dst = &__dst;
    nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_1::operator()();
  }
  v14 = *(unsigned int *)__idx;
  v23 = __idx;
  operator delete((void *)__idx);
  return v14;
}

void sub_1912DE688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a29 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v30 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v29);
  goto LABEL_8;
}

void nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fl.size()", 9);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 269, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 269, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912DEB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912DEBE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<int>::get(nitro::flexible_type const&)const::$_1::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"v.size()", 8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"1", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 276, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 276, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912DEFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912DF014(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get(unsigned __int8 *a1@<X1>, uint64_t **a2@<X8>)
{
  uint64_t **v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  void *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  void *v39;
  uint64_t **v40;
  void *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t *v45;
  int v46;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t **v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t *v72;
  void *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t *v83;
  void *v84;
  void *v85;
  std::__shared_weak_count *v86;
  unint64_t *p_shared_owners;
  unint64_t v88;
  uint64_t *v89;
  int v90;
  unint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  file_logger *v97;
  pthread_key_t *started;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *exception;
  char v103;
  uint64_t **v104;
  void *__p[2];
  char v106;
  void **v107;

  v2 = a2;
  a2[2] = 0;
  a2[1] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v3 = a1[8];
  if (v3 == 5)
  {
    v50 = *(_QWORD *)a1;
    v51 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (*(_QWORD *)(*(_QWORD *)a1 + 16) != v51)
    {
      v52 = 0;
      do
      {
        v53 = v51 + 32 * v52;
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v53);
        v107 = __p;
        v54 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v107);
        v55 = v54;
        v56 = v53 + 16;
        v57 = v54 + 7;
        if ((uint64_t **)(v53 + 16) != v54 + 7)
        {
          switch(*((_BYTE *)v54 + 64))
          {
            case 2:
              v58 = (unint64_t *)*v57;
              do
              {
                v59 = __ldaxr(v58);
                v60 = v59 - 1;
              }
              while (__stlxr(v60, v58));
              if (!v60)
              {
                v61 = (unint64_t *)*v57;
                if (*v57)
                {
                  if (*((char *)v61 + 31) < 0)
                    operator delete((void *)v61[1]);
                  MEMORY[0x19401CD90](v61, 0x1012C404EF22A49);
                }
                goto LABEL_118;
              }
              break;
            case 3:
              v69 = (unint64_t *)*v57;
              do
              {
                v70 = __ldaxr(v69);
                v71 = v70 - 1;
              }
              while (__stlxr(v71, v69));
              if (!v71)
              {
                v72 = (unint64_t *)*v57;
                if (*v57)
                {
                  v73 = (void *)v72[1];
                  if (v73)
                  {
                    v72[2] = (unint64_t)v73;
                    operator delete(v73);
                  }
                  MEMORY[0x19401CD90](v72, 0x1080C409938AC02);
                }
                goto LABEL_118;
              }
              break;
            case 4:
              v62 = (unint64_t *)*v57;
              do
              {
                v63 = __ldaxr(v62);
                v64 = v63 - 1;
              }
              while (__stlxr(v64, v62));
              if (!v64)
              {
                v65 = (unint64_t *)*v57;
                if (!*v57)
                  goto LABEL_118;
                v66 = v65[1];
                if (v66)
                {
                  v67 = v65[2];
                  v68 = (void *)v65[1];
                  if (v67 != v66)
                  {
                    do
                    {
                      v67 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v65 + 3), v67);
                    }
                    while (v67 != v66);
                    v68 = (void *)v65[1];
                  }
                  v65[2] = v66;
                  operator delete(v68);
                }
                goto LABEL_103;
              }
              break;
            case 5:
              v74 = (unint64_t *)*v57;
              do
              {
                v75 = __ldaxr(v74);
                v76 = v75 - 1;
              }
              while (__stlxr(v76, v74));
              if (!v76)
              {
                v65 = (unint64_t *)*v57;
                if (*v57)
                {
                  v77 = v65[1];
                  if (v77)
                  {
                    v78 = v65[2];
                    v79 = (void *)v65[1];
                    if (v78 != v77)
                    {
                      do
                        v78 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v78 - 32);
                      while (v78 != v77);
                      v79 = (void *)v65[1];
                    }
                    v65[2] = v77;
                    operator delete(v79);
                  }
LABEL_103:
                  MEMORY[0x19401CD90](v65, 0x1020C405E66F15BLL);
                }
                goto LABEL_118;
              }
              break;
            case 9:
              v80 = (unint64_t *)*v57;
              do
              {
                v81 = __ldaxr(v80);
                v82 = v81 - 1;
              }
              while (__stlxr(v82, v80));
              if (!v82)
              {
                v83 = (unint64_t *)*v57;
                if (*v57)
                {
                  v84 = (void *)v83[7];
                  if (v84)
                  {
                    v83[8] = (unint64_t)v84;
                    operator delete(v84);
                  }
                  v85 = (void *)v83[4];
                  if (v85)
                  {
                    v83[5] = (unint64_t)v85;
                    operator delete(v85);
                  }
                  v86 = (std::__shared_weak_count *)v83[3];
                  if (v86)
                  {
                    p_shared_owners = (unint64_t *)&v86->__shared_owners_;
                    do
                      v88 = __ldaxr(p_shared_owners);
                    while (__stlxr(v88 - 1, p_shared_owners));
                    if (!v88)
                    {
                      ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                      std::__shared_weak_count::__release_weak(v86);
                    }
                  }
                  MEMORY[0x19401CD90](v83, 0x10B0C4002311774);
                }
LABEL_118:
                *v57 = 0;
              }
              break;
            default:
              break;
          }
          v89 = *(uint64_t **)v56;
          *((_BYTE *)v57 + 8) = *(_BYTE *)(v56 + 8);
          *v57 = v89;
          v90 = *(unsigned __int8 *)(v56 + 8);
          *((_BYTE *)v55 + 64) = v90;
          if ((v90 - 2) < 4 || v90 == 9)
          {
            v92 = (unint64_t *)*v57;
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 + 1, v92));
          }
        }
        if (v106 < 0)
          operator delete(__p[0]);
        ++v52;
        v51 = *(_QWORD *)(v50 + 8);
      }
      while (v52 < (*(_QWORD *)(v50 + 16) - v51) >> 5);
    }
  }
  else
  {
    if (v3 != 4)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        v97 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v97, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 302, 1);
        v99 = pthread_getspecific(started[74]);
        if (v99 && *((_BYTE *)v99 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99 + 2, (uint64_t)"Check failed: ", 14);
        v100 = pthread_getspecific(started[74]);
        if (v100 && *((_BYTE *)v100 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100 + 2, (uint64_t)"false", 5);
        v101 = pthread_getspecific(started[74]);
        if (v101 && *((_BYTE *)v101 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101 + 2, (uint64_t)":\n", 2);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 302, "Not deserializable", v94, v95, v96, v103);
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      *exception = "assertion failure";
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (*(_QWORD *)(*(_QWORD *)a1 + 16) != v5)
    {
      v6 = 0;
      do
      {
        v7 = *(_QWORD *)(v5 + 16 * v6);
        v8 = *(_QWORD *)(v7 + 8);
        v9 = *(_QWORD *)(v7 + 16) - v8;
        __p[0] = (void *)(v9 >> 4);
        if (v9 != 32)
        {
          v107 = __p;
          nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get(nitro::flexible_type const&)const::$_0::operator()();
        }
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(v8);
        v107 = __p;
        v10 = std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v2, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v107);
        v11 = v10;
        v12 = v10 + 7;
        if ((uint64_t **)(v8 + 16) != v10 + 7)
        {
          switch(*((_BYTE *)v10 + 64))
          {
            case 2:
              v13 = (unint64_t *)*v12;
              do
              {
                v14 = __ldaxr(v13);
                v15 = v14 - 1;
              }
              while (__stlxr(v15, v13));
              if (!v15)
              {
                v16 = (unint64_t *)*v12;
                if (*v12)
                {
                  if (*((char *)v16 + 31) < 0)
                    operator delete((void *)v16[1]);
                  MEMORY[0x19401CD90](v16, 0x1012C404EF22A49);
                }
                goto LABEL_56;
              }
              break;
            case 3:
              v24 = (unint64_t *)*v12;
              do
              {
                v25 = __ldaxr(v24);
                v26 = v25 - 1;
              }
              while (__stlxr(v26, v24));
              if (!v26)
              {
                v27 = (unint64_t *)*v12;
                if (*v12)
                {
                  v28 = (void *)v27[1];
                  if (v28)
                  {
                    v27[2] = (unint64_t)v28;
                    operator delete(v28);
                  }
                  MEMORY[0x19401CD90](v27, 0x1080C409938AC02);
                }
                goto LABEL_56;
              }
              break;
            case 4:
              v17 = (unint64_t *)*v12;
              do
              {
                v18 = __ldaxr(v17);
                v19 = v18 - 1;
              }
              while (__stlxr(v19, v17));
              if (!v19)
              {
                v20 = (unint64_t *)*v12;
                if (!*v12)
                  goto LABEL_56;
                v21 = v20[1];
                if (v21)
                {
                  v104 = v2;
                  v22 = v20[2];
                  v23 = (void *)v20[1];
                  if (v22 != v21)
                  {
                    do
                    {
                      v22 -= 16;
                      std::allocator<nitro::flexible_type>::destroy[abi:ne180100]((uint64_t)(v20 + 3), v22);
                    }
                    while (v22 != v21);
                    v23 = (void *)v20[1];
                  }
                  v20[2] = v21;
                  operator delete(v23);
                  v2 = v104;
                }
                goto LABEL_41;
              }
              break;
            case 5:
              v29 = (unint64_t *)*v12;
              do
              {
                v30 = __ldaxr(v29);
                v31 = v30 - 1;
              }
              while (__stlxr(v31, v29));
              if (!v31)
              {
                v20 = (unint64_t *)*v12;
                if (*v12)
                {
                  v32 = v20[1];
                  if (v32)
                  {
                    v33 = v20[2];
                    v34 = (void *)v20[1];
                    if (v33 != v32)
                    {
                      do
                        v33 = std::pair<nitro::flexible_type,nitro::flexible_type>::~pair(v33 - 32);
                      while (v33 != v32);
                      v34 = (void *)v20[1];
                    }
                    v20[2] = v32;
                    operator delete(v34);
                  }
LABEL_41:
                  MEMORY[0x19401CD90](v20, 0x1020C405E66F15BLL);
                }
                goto LABEL_56;
              }
              break;
            case 9:
              v35 = (unint64_t *)*v12;
              do
              {
                v36 = __ldaxr(v35);
                v37 = v36 - 1;
              }
              while (__stlxr(v37, v35));
              if (!v37)
              {
                v38 = (unint64_t *)*v12;
                if (*v12)
                {
                  v39 = (void *)v38[7];
                  if (v39)
                  {
                    v38[8] = (unint64_t)v39;
                    operator delete(v39);
                  }
                  v40 = v2;
                  v41 = (void *)v38[4];
                  if (v41)
                  {
                    v38[5] = (unint64_t)v41;
                    operator delete(v41);
                  }
                  v42 = (std::__shared_weak_count *)v38[3];
                  if (v42)
                  {
                    v43 = (unint64_t *)&v42->__shared_owners_;
                    do
                      v44 = __ldaxr(v43);
                    while (__stlxr(v44 - 1, v43));
                    if (!v44)
                    {
                      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
                      std::__shared_weak_count::__release_weak(v42);
                    }
                  }
                  MEMORY[0x19401CD90](v38, 0x10B0C4002311774);
                  v2 = v40;
                }
LABEL_56:
                *v12 = 0;
              }
              break;
            default:
              break;
          }
          v45 = *(uint64_t **)(v8 + 16);
          *((_BYTE *)v12 + 8) = *(_BYTE *)(v8 + 24);
          *v12 = v45;
          v46 = *(unsigned __int8 *)(v8 + 24);
          *((_BYTE *)v11 + 64) = v46;
          if ((v46 - 2) < 4 || v46 == 9)
          {
            v48 = (unint64_t *)*v12;
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 + 1, v48));
          }
        }
        if (v106 < 0)
          operator delete(__p[0]);
        ++v6;
        v5 = *(_QWORD *)(v4 + 8);
      }
      while (v6 < (*(_QWORD *)(v4 + 16) - v5) >> 4);
    }
  }
}

void sub_1912DF7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::destroy(v15, *(_QWORD **)(v15 + 8));
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,nitro::flexible_type>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"inner.size()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 291, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 291, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912DFBE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912DFC48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get(unsigned __int8 *a1@<X1>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  void **v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  void **v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  file_logger *v34;
  pthread_key_t *started;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *exception;
  char v40;
  void *v41[2];
  char v42;
  void *__p[2];
  uint64_t *v44;
  void **v45;

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = a1[8];
  if (v3 == 5)
  {
    v19 = *(_QWORD *)a1;
    v20 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (*(_QWORD *)(*(_QWORD *)a1 + 16) != v20)
    {
      v21 = 0;
      do
      {
        nitro::flexible_type_converter<std::vector<std::string>>::get((_BYTE *)(v20 + 32 * v21 + 16), (uint64_t)__p);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(*(_QWORD *)(v19 + 8) + 32 * v21);
        v45 = v41;
        v23 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)v41, (uint64_t)&std::piecewise_construct, (_OWORD **)&v45);
        v24 = v23;
        v25 = v23 + 7;
        v26 = v23[7];
        if (v26)
        {
          v27 = v23[8];
          v28 = v23[7];
          if (v27 != v26)
          {
            do
            {
              if (*((char *)v27 - 1) < 0)
                operator delete((void *)*(v27 - 3));
              v27 -= 3;
            }
            while (v27 != v26);
            v28 = *v25;
          }
          v24[8] = v26;
          operator delete(v28);
          *v25 = 0;
          v25[1] = 0;
          v25[2] = 0;
        }
        *(_OWORD *)(v24 + 7) = *(_OWORD *)__p;
        v24[9] = v44;
        __p[1] = 0;
        v44 = 0;
        __p[0] = 0;
        if (v42 < 0)
        {
          operator delete(v41[0]);
          v29 = (void **)__p[0];
          if (__p[0])
          {
            v30 = (void **)__p[1];
            v22 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                if (*((char *)v30 - 1) < 0)
                  operator delete(*(v30 - 3));
                v30 -= 3;
              }
              while (v30 != v29);
              v22 = __p[0];
            }
            __p[1] = v29;
            operator delete(v22);
          }
        }
        ++v21;
        v20 = *(_QWORD *)(v19 + 8);
      }
      while (v21 < (*(_QWORD *)(v19 + 16) - v20) >> 5);
    }
  }
  else
  {
    if (v3 != 4)
    {
      if (*((int *)global_logger() + 169) <= 6)
      {
        v34 = (file_logger *)global_logger();
        started = (pthread_key_t *)file_logger::start_stream(v34, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 328, 1);
        v36 = pthread_getspecific(started[74]);
        if (v36 && *((_BYTE *)v36 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36 + 2, (uint64_t)"Check failed: ", 14);
        v37 = pthread_getspecific(started[74]);
        if (v37 && *((_BYTE *)v37 + 280))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37 + 2, (uint64_t)"false", 5);
        v38 = pthread_getspecific(started[74]);
        if (v38 && *((_BYTE *)v38 + 280))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38 + 2, (uint64_t)":\n", 2);
          file_logger::stream_flush((file_logger *)started);
        }
      }
      log_dispatch<true>::exec(6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 328, "Not deserializable", v31, v32, v33, v40);
      __print_back_trace();
      exception = __cxa_allocate_exception(8uLL);
      *exception = "assertion failure";
      __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
    }
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
    if (*(_QWORD *)(*(_QWORD *)a1 + 16) != v5)
    {
      v6 = 0;
      do
      {
        v8 = *(_QWORD *)(v5 + 16 * v6);
        v9 = *(_QWORD *)(v8 + 8);
        v10 = *(_QWORD *)(v8 + 16) - v9;
        __p[0] = (void *)(v10 >> 4);
        if (v10 != 32)
        {
          v41[0] = __p;
          nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get(nitro::flexible_type const&)const::$_0::operator()();
        }
        nitro::flexible_type_converter<std::vector<std::string>>::get((_BYTE *)(v9 + 16), (uint64_t)__p);
        nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(*(_QWORD *)(v8 + 8));
        v45 = v41;
        v11 = std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)a2, (const void **)v41, (uint64_t)&std::piecewise_construct, (_OWORD **)&v45);
        v12 = v11;
        v13 = v11 + 7;
        v14 = v11[7];
        if (v14)
        {
          v15 = v11[8];
          v16 = v11[7];
          if (v15 != v14)
          {
            do
            {
              if (*((char *)v15 - 1) < 0)
                operator delete((void *)*(v15 - 3));
              v15 -= 3;
            }
            while (v15 != v14);
            v16 = *v13;
          }
          v12[8] = v14;
          operator delete(v16);
          *v13 = 0;
          v13[1] = 0;
          v13[2] = 0;
        }
        *(_OWORD *)(v12 + 7) = *(_OWORD *)__p;
        v12[9] = v44;
        __p[1] = 0;
        v44 = 0;
        __p[0] = 0;
        if (v42 < 0)
        {
          operator delete(v41[0]);
          v17 = (void **)__p[0];
          if (__p[0])
          {
            v18 = (void **)__p[1];
            v7 = __p[0];
            if (__p[1] != __p[0])
            {
              do
              {
                if (*((char *)v18 - 1) < 0)
                  operator delete(*(v18 - 3));
                v18 -= 3;
              }
              while (v18 != v17);
              v7 = __p[0];
            }
            __p[1] = v17;
            operator delete(v7);
          }
        }
        ++v6;
        v5 = *(_QWORD *)(v4 + 8);
      }
      while (v6 < (*(_QWORD *)(v4 + 16) - v5) >> 4);
    }
  }
}

void sub_1912E0080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

void nitro::flexible_type_converter<std::map<std::string,std::vector<std::string>>>::get(nitro::flexible_type const&)const::$_0::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  file_logger *v18;
  file_logger *started;
  char *v20;
  _QWORD *v21;
  void **v22;
  uint64_t v23;
  file_logger *v24;
  file_logger *v25;
  char *v26;
  _QWORD *v27;
  void *locale;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36[8];
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  std::locale v41;
  uint64_t v42;
  unsigned __int8 v43;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v40 = MEMORY[0x1E0DE4FE0] + 64;
  v35 = v2;
  *(uint64_t *)((char *)&v36[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v36[-1] + *(_QWORD *)(v35 - 24));
  std::ios_base::init(v4, v36);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v35 = v0 + 24;
  v40 = v1;
  std::streambuf::basic_streambuf();
  v36[0] = MEMORY[0x1E0DE4FB8] + 16;
  v37 = 0u;
  v38 = 0u;
  v39 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Assertion failed: (", 19);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", 107);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"inner.size()", 12);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"==", 2);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"2", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"  [", 3);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v41.__locale_) = 32;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v41, 1);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"==", 2);
  LOBYTE(v41.__locale_) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v41, 1);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"]", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v41, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v41);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v18 = (file_logger *)global_logger();
    started = file_logger::start_stream(v18, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 314, 1);
    std::stringbuf::str();
    v20 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v20 && v20[280])
    {
      v21 = v20 + 16;
      if ((v34 & 0x80u) == 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      if ((v34 & 0x80u) == 0)
        v23 = v34;
      else
        v23 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
    }
    if ((char)v34 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v24 = (file_logger *)global_logger();
    v25 = file_logger::start_stream(v24, 6, "/Library/Caches/com.apple.xbs/Sources/CVML_Espresso/Nitro/EspressoNitro/src/flexible_type/flexible_type.cpp", "operator()", 314, 1);
    std::stringbuf::str();
    v26 = (char *)pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v26 && v26[280])
    {
      v27 = v26 + 16;
      if ((v43 & 0x80u) == 0)
        locale = &v41;
      else
        locale = v41.__locale_;
      if ((v43 & 0x80u) == 0)
        v29 = v43;
      else
        v29 = v42;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)locale, v29);
    }
    v30 = pthread_getspecific(*((_QWORD *)v25 + 74));
    if (v30)
    {
      if (*((_BYTE *)v30 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v25);
        if (*((_DWORD *)v25 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v43 < 0)
      operator delete(v41.__locale_);
  }
  v31 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912E0478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912E04E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

uint64_t nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<nitro::flexible_type>>::operator()<std::vector<nitro::flexible_type> const>(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = a2[1];
  if (v3 - *a2 != v2[1] - *v2)
    return 0;
  if (v3 != *a2)
    __asm { BR              X13 }
  return 1;
}

uint64_t nitro::flexible_type_impl::const_visitor_wrapper<nitro::flexible_type_impl::approx_equality_operator,std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>>>::operator()<std::vector<std::pair<nitro::flexible_type,nitro::flexible_type>> const>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t v18;

  v2 = *(uint64_t **)(a1 + 8);
  v4 = *a2;
  v3 = a2[1];
  v6 = *v2;
  v5 = v2[1];
  if (v3 - *a2 != v5 - *v2)
    return 0;
  v17 = 0;
  v18 = 0;
  v16 = &v17;
  if (v5 != v6)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v10 = &v17;
      v11 = &v17;
      if (v8)
      {
        while (1)
        {
          while (1)
          {
            v11 = (uint64_t **)v8;
            v12 = v8[4];
            if (v9 >= v12)
              break;
            v8 = *v11;
            v10 = v11;
            if (!*v11)
              goto LABEL_11;
          }
          if (v12 >= v9)
            break;
          v8 = v11[1];
          if (!v8)
          {
            v10 = v11 + 1;
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        v13 = (uint64_t *)operator new(0x28uLL);
        v13[4] = v9;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = (uint64_t)v11;
        *v10 = v13;
        if (*v16)
        {
          v16 = (uint64_t **)*v16;
          v13 = *v10;
        }
        std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v17, v13);
        ++v18;
        v6 = *v2;
        v5 = v2[1];
      }
      if (++v9 >= (v5 - v6) >> 5)
        break;
      v8 = v17;
    }
    v4 = *a2;
    v3 = a2[1];
  }
  if (v3 == v4)
  {
    v14 = 1;
  }
  else
  {
    if (v16 != &v17)
      __asm { BR              X13 }
    v14 = 0;
  }
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&v16, v17);
  return v14;
}

void sub_1912E1854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void nitro::flexible_type::apply_visitor<nitro::flexible_type_impl::get_string_visitor>(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1912E18BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  char v16;
  int v17;
  uint64_t v18;

  v1 = MEMORY[0x1E0DE4FD0];
  v2 = MEMORY[0x1E0DE4FD0] + 104;
  v18 = MEMORY[0x1E0DE4FD0] + 104;
  v3 = MEMORY[0x1E0DE4FD0] + 64;
  v4 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  v13 = MEMORY[0x1E0DE4FD0] + 64;
  v12[0] = v5;
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v5 - 24)) = v6;
  v12[1] = 0;
  v7 = (std::ios_base *)((char *)v12 + *(_QWORD *)(v12[0] - 24));
  std::ios_base::init(v7, &v14);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v8 = v4[5];
  v13 = v4[4];
  *(uint64_t *)((char *)&v13 + *(_QWORD *)(v13 - 24)) = v8;
  v12[0] = v4[1];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = v4[6];
  v18 = v2;
  v12[0] = v1 + 24;
  v13 = v3;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v14 = MEMORY[0x1E0DE4FB8] + 16;
  v15 = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  v17 = 24;
  std::ostream::operator<<();
  std::stringbuf::str();
  v12[0] = *v4;
  v10 = v4[9];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = v4[8];
  v13 = v10;
  v14 = v9 + 16;
  if (v16 < 0)
    operator delete((void *)v15);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x19401CCD0](&v18);
}

void sub_1912E20B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void nitro::ndarray_container::visit<nitro::flexible_type::is_zero(void)::$_0>(nitro::flexible_type::is_zero(void)::$_0)const::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::ios_base *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  file_logger *v11;
  file_logger *started;
  char *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  file_logger *v17;
  file_logger *v18;
  char *v19;
  _QWORD *v20;
  void *locale;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *exception;
  void *__p[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t v33;
  std::locale v34;
  uint64_t v35;
  unsigned __int8 v36;

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33 = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v2;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v2 - 24)) = v3;
  v4 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v4, v29);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  v28 = v0 + 24;
  v33 = v1;
  std::streambuf::basic_streambuf();
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  v30 = 0u;
  v31 = 0u;
  v32 = 16;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v28, (uint64_t)"Check failed (", 14);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", 51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"): ", 3);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"false", 5);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v11 = (file_logger *)global_logger();
    started = file_logger::start_stream(v11, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v13 = (char *)pthread_getspecific(*((_QWORD *)started + 74));
    if (v13 && v13[280])
    {
      v14 = v13 + 16;
      if ((v27 & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v16 = v27;
      else
        v16 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    }
    if ((char)v27 < 0)
      operator delete(__p[0]);
  }
  __print_back_trace();
  if (*((int *)global_logger() + 169) <= 6)
  {
    v17 = (file_logger *)global_logger();
    v18 = file_logger::start_stream(v17, 6, "Nitro/EspressoNitro/src/numerics/ndarray_detail.hpp", "operator()", 135, 1);
    std::stringbuf::str();
    v19 = (char *)pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v19 && v19[280])
    {
      v20 = v19 + 16;
      if ((v36 & 0x80u) == 0)
        locale = &v34;
      else
        locale = v34.__locale_;
      if ((v36 & 0x80u) == 0)
        v22 = v36;
      else
        v22 = v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)locale, v22);
    }
    v23 = pthread_getspecific(*((_QWORD *)v18 + 74));
    if (v23)
    {
      if (*((_BYTE *)v23 + 280))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23 + 2, (uint64_t)"\n", 1);
        file_logger::stream_flush(v18);
        if (*((_DWORD *)v18 + 150) == 7)
        {
          __print_back_trace();
          exception = __cxa_allocate_exception(8uLL);
          *exception = "LOG_FATAL encountered";
          __cxa_throw(exception, MEMORY[0x1E0DE4E50], 0);
        }
      }
    }
    if ((char)v36 < 0)
      operator delete(v34.__locale_);
  }
  v24 = __cxa_allocate_exception(0x18uLL);
  std::stringbuf::str();
}

void sub_1912E24B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (*(char *)(v16 - 65) < 0)
    operator delete(*(void **)(v16 - 88));
  std::ostringstream::~ostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1912E2520(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x19401CCD0](v1 + 112);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<long long>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5)
LABEL_24:
        operator delete(v5);
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v19 = *(_QWORD **)a1;
      v5 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v5 != v19)
      {
        v20 = v5;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v5 - 2) = v21;
            operator delete(v21);
          }
          v5 = v20;
        }
        while (v20 != v19);
        v5 = v19;
      }
      if (v5)
        goto LABEL_24;
    }
  }
}

uint64_t **std::__tree<std::__value_type<std::string,nitro::flexible_type>,std::__map_value_compare<std::string,std::__value_type<std::string,nitro::flexible_type>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,nitro::flexible_type>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x48uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[7] = 0;
    *((_BYTE *)v11 + 64) = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t **std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x50uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    v11[8] = 0;
    v11[9] = 0;
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

void Espresso::optimizer_builder::update_states(Espresso::optimizer_builder *this)
{
  update_scalar_global_by_constant((uint64_t *)this + 1, (uint64_t)this + 208, 2u, 1.0);
}

void Espresso::optimizer_builder::build_single_layer_optimizer(Espresso::optimizer_builder *this)
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x58uLL);
  Espresso::not_implemented_error::not_implemented_error(exception);
}

void sub_1912E2A70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void update_scalar_global_by_constant(uint64_t *a1, uint64_t a2, unsigned int a3, float a4)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  __int128 v14;
  void *v15[2];
  char v16;
  void *v17;
  char v18;
  std::string v19;
  std::string v20;
  void *__p[2];
  std::string::size_type v22;
  void *v23[2];
  char v24;

  if (*(char *)(a2 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = &v20;
  std::string::basic_string[abi:ne180100]((uint64_t)&v20, v8 + 16);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const void *)a2;
    else
      v10 = *(const void **)a2;
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/updated_opcode_");
  std::to_string(&v19, a3);
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v19;
  else
    v11 = (std::string *)v19.__r_.__value_.__r.__words[0];
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    size = v19.__r_.__value_.__l.__size_;
  v13 = std::string::append(&v20, (const std::string::value_type *)v11, size);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  Espresso::sequential_builder::by_constant_op(a3, a1, a2, (uint64_t)__p, (uint64_t)v23, a4);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  Espresso::sequential_builder::store_global_op((std::string *)a2, a1, (uint64_t)v23, (uint64_t)v15, (uint64_t)&v17);
  if (v18 < 0)
    operator delete(v17);
  if (v16 < 0)
    operator delete(v15[0]);
  if (v24 < 0)
    operator delete(v23[0]);
}

void sub_1912E2C24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 65) < 0)
    operator delete(*(void **)(v35 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void Espresso::sgd_optimizer_builder::~sgd_optimizer_builder(void **this)
{
  *this = off_1E2D8C368;
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  Espresso::optimizer_builder::~optimizer_builder(this);
}

{
  *this = off_1E2D8C368;
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  Espresso::optimizer_builder::~optimizer_builder(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::sgd_optimizer_builder::init_optimizer_states(Espresso::sgd_optimizer_builder *this)
{
  uint64_t *v2;
  char *v3;
  size_t v4;
  void **v5;
  const void *v6;
  void **v7;
  void *__p[2];
  char v9;
  __int128 v10;
  uint64_t v11;

  if (!*((_BYTE *)this + 312))
  {
    v2 = (uint64_t *)((char *)this + 8);
    v3 = (char *)this + 240;
    if (*((char *)this + 263) >= 0)
      v4 = *((unsigned __int8 *)this + 263);
    else
      v4 = *((_QWORD *)this + 31);
    v5 = __p;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 4);
    if (v9 < 0)
      v5 = (void **)__p[0];
    if (v4)
    {
      if (*((char *)this + 263) >= 0)
        v6 = v3;
      else
        v6 = (const void *)*((_QWORD *)this + 30);
      memmove(v5, v6, v4);
    }
    strcpy((char *)v5 + v4, "/neg");
    Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)v3, (uint64_t)__p, (uint64_t)&v10, -1.0);
    v7 = (void **)((char *)this + 288);
    if (*((char *)this + 311) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = v10;
    *((_QWORD *)this + 38) = v11;
    if (v9 < 0)
      operator delete(__p[0]);
  }
}

void sub_1912E2EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void Espresso::sgd_optimizer_builder::update_func(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *size;
  unint64_t *v11;
  unint64_t v12;
  size_t v13;
  std::string *p_str;
  const void *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  float v21;
  int v22;
  size_t v23;
  void **v24;
  std::string *v25;
  size_t v26;
  void **v27;
  const void *v28;
  void **v29;
  std::string *v30;
  int v31;
  size_t v32;
  void **v33;
  void **v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  std::string v42;
  std::string v43;
  void *v44[2];
  char v45;
  std::string v46;
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51[2];
  char v52;
  void *v53[2];
  unsigned __int8 v54;
  void *v55[2];
  char v56;
  void *v57[2];
  char v58;
  void *v59[2];
  char v60;
  void *v61[2];
  char v62;
  std::string __p;
  uint64_t v64[2];
  std::string v65;
  std::string __str;
  char v67[40];
  void *v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  std::string v72;
  std::string v73;

  std::operator+<char>();
  v6 = Espresso::net::loaded_global_name(*(_QWORD **)(a1 + 88), a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v7;
  }
  v8 = (uint64_t *)(a1 + 8);
  if (*(_BYTE *)(a1 + 312))
  {
    v9 = *(unsigned int *)(a1 + 136);
    Espresso::net::get_global(&__str, *(_QWORD *)(a1 + 88), (unsigned __int8 *)&v72);
    Espresso::abstract_blob_container::shape(v67, (uint64_t)__str.__r_.__value_.__l.__data_);
    Espresso::make_filled_bc(&v70, a1 + 120, 0.0, v9, (uint64_t)v67);
    if (v68)
    {
      v69 = v68;
      operator delete(v68);
    }
    size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
    if (__str.__r_.__value_.__l.__size_)
    {
      v11 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (*(char *)(a2 + 23) >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    p_str = &__str;
    std::string::basic_string[abi:ne180100]((uint64_t)&__str, v13 + 9);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (v13)
    {
      if (*(char *)(a2 + 23) >= 0)
        v15 = (const void *)a2;
      else
        v15 = *(const void **)a2;
      memmove(p_str, v15, v13);
    }
    strcpy((char *)p_str + v13, "/momentum");
    v16 = (std::__shared_weak_count *)v71;
    v64[0] = v70;
    v64[1] = v71;
    if (v71)
    {
      v17 = (unint64_t *)(v71 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    Espresso::sequential_builder::load_global_op(&__str, &__p, (uint64_t *)(a1 + 8), v64, (uint64_t)&v65);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v21 = *(float *)(a1 + 280);
    v22 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v23 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    else
      v23 = v65.__r_.__value_.__l.__size_;
    v24 = v59;
    std::string::basic_string[abi:ne180100]((uint64_t)v59, v23 + 8);
    if (v60 < 0)
      v24 = (void **)v59[0];
    if (v23)
    {
      if (v22 >= 0)
        v25 = &v65;
      else
        v25 = (std::string *)v65.__r_.__value_.__r.__words[0];
      memmove(v24, v25, v23);
    }
    strcpy((char *)v24 + v23, "/decayed");
    Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)&v65, (uint64_t)v59, (uint64_t)v61, v21);
    if (v60 < 0)
      operator delete(v59[0]);
    if (*(char *)(a3 + 23) >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    v27 = v55;
    std::string::basic_string[abi:ne180100]((uint64_t)v55, v26 + 5);
    if (v56 < 0)
      v27 = (void **)v55[0];
    if (v26)
    {
      if (*(char *)(a3 + 23) >= 0)
        v28 = (const void *)a3;
      else
        v28 = *(const void **)a3;
      memmove(v27, v28, v26);
    }
    strcpy((char *)v27 + v26, "/step");
    Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), a3, a1 + 240, (uint64_t)v55, (uint64_t)v57);
    if (v56 < 0)
      operator delete(v55[0]);
    v29 = v51;
    std::string::basic_string[abi:ne180100]((uint64_t)v51, v23 + 8);
    if (v52 < 0)
      v29 = (void **)v51[0];
    if (v23)
    {
      if (v22 >= 0)
        v30 = &v65;
      else
        v30 = (std::string *)v65.__r_.__value_.__r.__words[0];
      memmove(v29, v30, v23);
    }
    strcpy((char *)v29 + v23, "/updated");
    Espresso::sequential_builder::elementwise_op(0, (uint64_t *)(a1 + 8), (uint64_t)v61, (uint64_t)v57, (uint64_t)v51, (uint64_t)v53);
    if (v52 < 0)
      operator delete(v51[0]);
    std::operator+<char>();
    Espresso::sequential_builder::store_global_op(&__str, (uint64_t *)(a1 + 8), (uint64_t)v53, (uint64_t)&v47, (uint64_t)&v49);
    if (v50 < 0)
      operator delete(v49);
    if (v48 < 0)
      operator delete(v47);
    v31 = (char)v54;
    if ((v54 & 0x80u) == 0)
      v32 = v54;
    else
      v32 = (size_t)v53[1];
    v33 = v44;
    std::string::basic_string[abi:ne180100]((uint64_t)v44, v32 + 4);
    if (v45 < 0)
      v33 = (void **)v44[0];
    if (v32)
    {
      if (v31 >= 0)
        v34 = v53;
      else
        v34 = (void **)v53[0];
      memmove(v33, v34, v32);
    }
    strcpy((char *)v33 + v32, "/neg");
    Espresso::sequential_builder::by_constant_op(3u, v8, (uint64_t)v53, (uint64_t)v44, (uint64_t)&v46, -1.0);
    if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v73.__r_.__value_.__l.__data_);
    v73 = v46;
    if (v45 < 0)
    {
      operator delete(v44[0]);
      if ((v31 & 0x80000000) == 0)
        goto LABEL_83;
    }
    else if ((v31 & 0x80000000) == 0)
    {
      goto LABEL_83;
    }
    operator delete(v53[0]);
LABEL_83:
    if (v58 < 0)
      operator delete(v57[0]);
    if (v62 < 0)
    {
      operator delete(v61[0]);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_87;
    }
    else if ((v22 & 0x80000000) == 0)
    {
LABEL_87:
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v35 = (std::__shared_weak_count *)v71;
      if (v71)
      {
        v36 = (unint64_t *)(v71 + 8);
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      goto LABEL_105;
    }
    operator delete(v65.__r_.__value_.__l.__data_);
    goto LABEL_87;
  }
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v43, v73.__r_.__value_.__l.__data_, v73.__r_.__value_.__l.__size_);
  else
    v43 = v73;
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), a3, a1 + 288, (uint64_t)&v43, (uint64_t)&__str);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
  v73 = __str;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
LABEL_105:
  std::operator+<char>();
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v42, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
  else
    v42 = __str;
  Espresso::sequential_builder::elementwise_op(0, v8, a2, (uint64_t)&v73, (uint64_t)&v42, (uint64_t)&v65);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v65;
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v72, v8, (uint64_t)&__str, (uint64_t)&v38, (uint64_t)&v40);
  if (v41 < 0)
    operator delete(v40);
  if (v39 < 0)
    operator delete(v38);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
}

void sub_1912E35B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_1912E377C()
{
  JUMPOUT(0x1912E36E8);
}

void Espresso::sgd_optimizer_builder::build_single_layer_optimizer(Espresso::sgd_optimizer_builder *this)
{
  std::string **v2;
  std::string *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<std::string>::pointer end;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  uint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  size_t v30;
  std::string *p_str;
  const void *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 *v41;
  std::string *v42;
  __int128 v43;
  __int128 *v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  size_t v52;
  __int128 *v53;
  const void *v54;
  std::vector<std::string>::pointer v55;
  __int128 v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  std::string *v61;
  __int128 v62;
  std::string *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  __int128 v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  std::__shared_weak_count *v84;
  uint64_t v85[3];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  std::__shared_weak_count *v90;
  uint64_t v91[3];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  std::__shared_weak_count *v96;
  std::string v97;
  std::string __str;
  uint64_t v99[2];
  char v100[40];
  void *__p;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  int64_t v106;
  std::vector<std::string> v107;
  _BYTE *v108;
  std::string *v109;
  unint64_t v110;
  _BYTE v111[4];
  int v112;
  int v113;
  std::__split_buffer<std::string> __v;

  v2 = (std::string **)*((_QWORD *)this + 33);
  v3 = *v2;
  v4 = v2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (char *)*v2) >> 3);
  v112 = 0;
  v113 = v5;
  v111[0] = *((_BYTE *)this + 312);
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v82 = v5;
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v108, 0, v3, v4, v5);
  std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((void **)&v108, (uint64_t)v109, **((std::string ***)this + 34), *(std::string **)(*((_QWORD *)this + 34) + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 34) + 8) - **((_QWORD **)this + 34)) >> 3));
  memset(&v107, 0, sizeof(v107));
  v6 = *(_QWORD *)(*((_QWORD *)this + 33) + 8);
  if (v6 == **((_QWORD **)this + 33))
  {
    v18 = *(_QWORD *)(*((_QWORD *)this + 33) + 8);
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      std::operator+<char>();
      end = v107.__end_;
      if (v107.__end_ >= v107.__end_cap_.__value_)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v107.__end_ - (char *)v107.__begin_) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 3) > v12)
          v12 = 0x5555555555555556 * (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 3) >= 0x555555555555555)
          v13 = 0xAAAAAAAAAAAAAAALL;
        else
          v13 = v12;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v107.__end_cap_;
        if (v13)
          v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v13);
        else
          v14 = 0;
        v15 = (std::string *)(v13 + 24 * v11);
        __v.__first_ = (std::__split_buffer<std::string>::pointer)v13;
        __v.__begin_ = v15;
        __v.__end_cap_.__value_ = (std::string *)(v13 + 24 * v14);
        v16 = v105;
        v15->__r_.__value_.__r.__words[2] = v106;
        *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
        v106 = 0;
        v105 = 0uLL;
        __v.__end_ = v15 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v107, &__v);
        v17 = v107.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        v107.__end_ = v17;
      }
      else
      {
        v10 = v105;
        v107.__end_->__r_.__value_.__r.__words[2] = v106;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v10;
        v107.__end_ = end + 1;
      }
      ++v8;
      v6 = **((_QWORD **)this + 33);
      v18 = *(_QWORD *)(*((_QWORD *)this + 33) + 8);
      v7 += 24;
    }
    while (v8 < 0xAAAAAAAAAAAAAAABLL * ((v18 - v6) >> 3));
  }
  if (*((_BYTE *)this + 312))
  {
    if (v18 != v6)
    {
      for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 33) + 8) - v6) >> 3); ++i)
      {
        v20 = v6 + 24 * i;
        v21 = Espresso::net::loaded_global_name(*((_QWORD **)this + 11), v20);
        if (*(char *)(v21 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
        }
        else
        {
          v22 = *(_OWORD *)v21;
          __v.__end_ = *(std::__split_buffer<std::string>::pointer *)(v21 + 16);
          *(_OWORD *)&__v.__first_ = v22;
        }
        v23 = *((unsigned int *)this + 34);
        Espresso::net::get_global(&v105, *((_QWORD *)this + 11), (unsigned __int8 *)&__v);
        Espresso::abstract_blob_container::shape(v100, v105);
        Espresso::make_filled_bc(&v103, (uint64_t)this + 120, 0.0, v23, (uint64_t)v100);
        if (__p)
        {
          v102 = __p;
          operator delete(__p);
        }
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v25 = (unint64_t *)(*((_QWORD *)&v105 + 1) + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v27 = (std::__shared_weak_count *)v104;
        v99[0] = v103;
        v99[1] = v104;
        if (v104)
        {
          v28 = (unint64_t *)(v104 + 8);
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        if (*(char *)(v20 + 23) >= 0)
          v30 = *(unsigned __int8 *)(v20 + 23);
        else
          v30 = *(_QWORD *)(v20 + 8);
        std::string::basic_string[abi:ne180100]((uint64_t)&__str, v30 + 9);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_str = &__str;
        else
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v30)
        {
          if (*(char *)(v20 + 23) >= 0)
            v32 = (const void *)v20;
          else
            v32 = *(const void **)v20;
          memmove(p_str, v32, v30);
        }
        strcpy((char *)p_str + v30, "/momentum");
        std::string::basic_string[abi:ne180100]<0>(&v97, "");
        Espresso::sequential_builder::load_global_op(&__str, &v97, (uint64_t *)this + 1, v99, (uint64_t)&v105);
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (v27)
          {
LABEL_51:
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v34 = __ldaxr(p_shared_owners);
            while (__stlxr(v34 - 1, p_shared_owners));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
              std::__shared_weak_count::__release_weak(v27);
            }
          }
        }
        else if (v27)
        {
          goto LABEL_51;
        }
        v35 = v109;
        if ((unint64_t)v109 >= v110)
        {
          v37 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v108, (uint64_t)&v105);
        }
        else
        {
          if (SHIBYTE(v106) < 0)
          {
            std::string::__init_copy_ctor_external(v109, (const std::string::value_type *)v105, *((std::string::size_type *)&v105 + 1));
          }
          else
          {
            v36 = v105;
            v109->__r_.__value_.__r.__words[2] = v106;
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          }
          v37 = v35 + 1;
        }
        v109 = v37;
        if (SHIBYTE(v106) < 0)
          operator delete((void *)v105);
        v38 = (std::__shared_weak_count *)v104;
        if (v104)
        {
          v39 = (unint64_t *)(v104 + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        v6 = **((_QWORD **)this + 33);
      }
    }
    v41 = (__int128 *)((char *)this + 240);
    v42 = v109;
    if ((unint64_t)v109 >= v110)
    {
      v47 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v108, (uint64_t)v41);
    }
    else
    {
      if (*((char *)this + 263) < 0)
      {
        std::string::__init_copy_ctor_external(v109, *((const std::string::value_type **)this + 30), *((_QWORD *)this + 31));
      }
      else
      {
        v43 = *v41;
        v109->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 32);
        *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
      }
      v47 = v42 + 1;
    }
    v109 = v47;
    if (*(_QWORD *)(*((_QWORD *)this + 33) + 8) != **((_QWORD **)this + 33))
    {
      v49 = 0;
      v50 = 48 * v82;
      do
      {
        v51 = &v108[v50];
        if ((char)v108[v50 + 23] >= 0)
          v52 = v51[23];
        else
          v52 = *((_QWORD *)v51 + 1);
        std::string::basic_string[abi:ne180100]((uint64_t)&v105, v52 + 8);
        if (v106 >= 0)
          v53 = &v105;
        else
          v53 = (__int128 *)v105;
        if (v52)
        {
          if (v51[23] >= 0)
            v54 = v51;
          else
            v54 = *(const void **)v51;
          memmove(v53, v54, v52);
        }
        strcpy((char *)v53 + v52, "/updated");
        v55 = v107.__end_;
        if (v107.__end_ >= v107.__end_cap_.__value_)
        {
          v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v107.__end_ - (char *)v107.__begin_) >> 3);
          v58 = v57 + 1;
          if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 3) > v58)
            v58 = 0x5555555555555556 * (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * (((char *)v107.__end_cap_.__value_ - (char *)v107.__begin_) >> 3) >= 0x555555555555555)
            v59 = 0xAAAAAAAAAAAAAAALL;
          else
            v59 = v58;
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v107.__end_cap_;
          if (v59)
            v59 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v59);
          else
            v60 = 0;
          v61 = (std::string *)(v59 + 24 * v57);
          __v.__first_ = (std::__split_buffer<std::string>::pointer)v59;
          __v.__begin_ = v61;
          __v.__end_cap_.__value_ = (std::string *)(v59 + 24 * v60);
          v62 = v105;
          v61->__r_.__value_.__r.__words[2] = v106;
          *(_OWORD *)&v61->__r_.__value_.__l.__data_ = v62;
          v106 = 0;
          v105 = 0uLL;
          __v.__end_ = v61 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&v107, &__v);
          v63 = v107.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v107.__end_ = v63;
          if (SHIBYTE(v106) < 0)
            operator delete((void *)v105);
        }
        else
        {
          v56 = v105;
          v107.__end_->__r_.__value_.__r.__words[2] = v106;
          *(_OWORD *)&v55->__r_.__value_.__l.__data_ = v56;
          v107.__end_ = v55 + 1;
        }
        ++v49;
        v50 += 24;
      }
      while (v49 < 0xAAAAAAAAAAAAAAABLL
                  * ((uint64_t)(*(_QWORD *)(*((_QWORD *)this + 33) + 8) - **((_QWORD **)this + 33)) >> 3));
    }
    v112 = *((_DWORD *)this + 70);
    std::string::basic_string[abi:ne180100]<0>(&__v, "sgd");
    std::string::basic_string[abi:ne180100]<0>(&v105, "sgd_optimizer");
    v92 = 0;
    v93 = 0;
    v94 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v92, (uint64_t)v108, (uint64_t)v109, 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - v108) >> 3));
    memset(v91, 0, sizeof(v91));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v91, (uint64_t)v107.__begin_, (uint64_t)v107.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v107.__end_ - (char *)v107.__begin_) >> 3));
    Espresso::sequential_builder::add<Espresso::sgd_params_t>(&v95, (uint64_t *)this + 1, (uint64_t)&__v, (uint64_t)&v105, (uint64_t)v111, v92, v93, v91);
    v64 = v96;
    if (v96)
    {
      v65 = (unint64_t *)&v96->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v92;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v106) < 0)
      operator delete((void *)v105);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    Espresso::run_pass_on_network<Espresso::pass_blob_name_indexing>(*((_QWORD *)this + 11));
    v67 = **((_QWORD **)this + 33);
    if (*(_QWORD *)(*((_QWORD *)this + 33) + 8) != v67)
    {
      v68 = 0;
      v69 = 0;
      v70 = 48 * v82;
      do
      {
        store_updated_global((uint64_t)this + 8, v67 + v68 * 24, (uint64_t)&v107.__begin_[v68]);
        v71 = &v108[v70 + v68 * 24];
        if (v71[23] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__v, *(const std::string::value_type **)v71, *(_QWORD *)&v108[v70 + 8 + v68 * 24]);
        }
        else
        {
          v72 = *(_OWORD *)v71;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)*((_QWORD *)v71 + 2);
          *(_OWORD *)&__v.__first_ = v72;
        }
        store_updated_global((uint64_t)this + 8, (uint64_t)&__v, (uint64_t)&v107.__begin_[v82 + v68]);
        if (SHIBYTE(__v.__end_) < 0)
          operator delete(__v.__first_);
        ++v69;
        v67 = **((_QWORD **)this + 33);
        ++v68;
      }
      while (v69 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 33) + 8) - v67) >> 3));
    }
  }
  else
  {
    v44 = (__int128 *)((char *)this + 240);
    v45 = v109;
    if ((unint64_t)v109 >= v110)
    {
      v48 = std::vector<std::string>::__push_back_slow_path<std::string const&>(&v108, (uint64_t)v44);
    }
    else
    {
      if (*((char *)this + 263) < 0)
      {
        std::string::__init_copy_ctor_external(v109, *((const std::string::value_type **)this + 30), *((_QWORD *)this + 31));
      }
      else
      {
        v46 = *v44;
        v109->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 32);
        *(_OWORD *)&v45->__r_.__value_.__l.__data_ = v46;
      }
      v48 = v45 + 1;
    }
    v109 = v48;
    std::string::basic_string[abi:ne180100]<0>(&__v, "sgd");
    std::string::basic_string[abi:ne180100]<0>(&v105, "sgd_optimizer");
    v86 = 0;
    v87 = 0;
    v88 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v86, (uint64_t)v108, (uint64_t)v109, 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - v108) >> 3));
    memset(v85, 0, sizeof(v85));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v85, (uint64_t)v107.__begin_, (uint64_t)v107.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v107.__end_ - (char *)v107.__begin_) >> 3));
    Espresso::sequential_builder::add<Espresso::sgd_params_t>(&v89, (uint64_t *)this + 1, (uint64_t)&__v, (uint64_t)&v105, (uint64_t)v111, v86, v87, v85);
    v73 = v90;
    if (v90)
    {
      v74 = (unint64_t *)&v90->__shared_owners_;
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v85;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v86;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
    if (SHIBYTE(v106) < 0)
      operator delete((void *)v105);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v76 = **((_QWORD **)this + 33);
    if (*(_QWORD *)(*((_QWORD *)this + 33) + 8) != v76)
    {
      v77 = 0;
      v78 = 0;
      do
      {
        store_updated_global((uint64_t)this + 8, v76 + v77 * 24, (uint64_t)&v107.__begin_[v77]);
        ++v78;
        v76 = **((_QWORD **)this + 33);
        ++v77;
      }
      while (v78 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*((_QWORD *)this + 33) + 8) - v76) >> 3));
    }
  }
  update_scalar_global_by_constant((uint64_t *)this + 1, (uint64_t)this + 208, 2u, 1.0);
  Espresso::sequential_builder::build_from_shapes((uint64_t)this + 8, *((_QWORD *)this + 1), 1, &v83);
  v79 = v84;
  if (v84)
  {
    v80 = (unint64_t *)&v84->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v107;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v108;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1912E4280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;

  *(_QWORD *)(v51 - 176) = v50;
  *(_QWORD *)(v51 - 232) = v51 - 208;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 232));
  *(_QWORD *)(v51 - 208) = v51 - 184;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v51 - 208));
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

void Espresso::net::get_global(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unsigned __int8 *v16;

  v6 = *(std::__shared_weak_count **)(a2 + 1096);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 1088);
      if (v8)
      {
        Espresso::net::get_global(a1, v8, a3);
        goto LABEL_13;
      }
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = (_QWORD *)(a2 + 1440);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::find<std::string>(v9, a3))
  {
    *a1 = 0;
    a1[1] = 0;
    if (!v7)
      return;
    goto LABEL_13;
  }
  v16 = a3;
  v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, a3, (__int128 **)&v16);
  v11 = *((_QWORD *)v10 + 6);
  *a1 = *((_QWORD *)v10 + 5);
  a1[1] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  if (v7)
  {
LABEL_13:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1912E4574(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void Espresso::sequential_builder::add<Espresso::sgd_params_t>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v23;
  uint64_t v24;
  uint64_t v25;
  std::string *v26[3];
  std::string *v27[3];
  uint64_t v28[2];
  std::string **v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v23, a6, a7, 0xAAAAAAAAAAAAAAABLL * ((a7 - a6) >> 3));
  v20 = 0;
  v21 = 0;
  v22 = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *a8, a8[1], 0xAAAAAAAAAAAAAAABLL * ((a8[1] - *a8) >> 3));
  v14 = a2[12];
  LODWORD(v27[0]) = (***(uint64_t (****)(_QWORD))(a2[14] + 8))(*(_QWORD *)(a2[14] + 8));
  Espresso::abstract_engine_factory::make_kernel_priv(v14, (uint64_t)(a2 + 14), a3, a5, (int *)v27);
  v15 = (std::__shared_weak_count *)a1[1];
  v28[0] = *a1;
  v28[1] = (uint64_t)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  memset(v27, 0, sizeof(v27));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v27, (uint64_t)v23, v24, 0xAAAAAAAAAAAAAAABLL * ((v24 - (uint64_t)v23) >> 3));
  memset(v26, 0, sizeof(v26));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v26, v20, v21, 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3));
  Espresso::sequential_builder::add_kernel_dbg((uint64_t)a2, v28, a3, a4, (uint64_t)(a2 + 7), v27, v26);
  v29 = v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  v29 = v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (*a2)
    Espresso::sequential_builder::add_shape_from_kernel(a2, *a1, &v23, &v20);
  v27[0] = (std::string *)&v20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
  v27[0] = (std::string *)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v27);
}

void sub_1912E477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  std::shared_ptr<void>::~shared_ptr[abi:ne180100](v13);
  *(_QWORD *)(v14 - 72) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  *(_QWORD *)(v14 - 72) = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v14 - 72));
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void store_updated_global(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  void *v7;
  char v8;
  void *__p;
  char v10;
  std::string __str;

  v5 = Espresso::net::loaded_global_name(*(_QWORD **)(a1 + 80), a2);
  if (*(char *)(v5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
  }
  else
  {
    v6 = *(_OWORD *)v5;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v6;
  }
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&__str, (uint64_t *)a1, a3, (uint64_t)&v7, (uint64_t)&__p);
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1912E48F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::__unordered_map_hasher<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::hash<std::type_index>,std::equal_to<std::type_index>,true>,std::__unordered_map_equal<std::type_index,std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,std::equal_to<std::type_index>,std::hash<std::type_index>,true>,std::allocator<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>>>::__erase_unique<std::type_index>(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  unsigned int v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v23[2];
  char v24;

  v4 = a2;
  if (a2 < 0)
  {
    v5 = (unsigned __int8 *)(a2 & 0x7FFFFFFFFFFFFFFFLL);
    v6 = 5381;
    do
    {
      v4 = v6;
      v7 = *v5++;
      v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  v8 = (int8x8_t)a1[1];
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8(v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v4;
      if (v4 >= *(_QWORD *)&v8)
        v11 = v4 % *(_QWORD *)&v8;
    }
    else
    {
      v11 = (*(_QWORD *)&v8 - 1) & v4;
    }
    v12 = *a1;
    v13 = *(uint64_t ***)(*a1 + 8 * v11);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = *(_QWORD *)&v8 - 1;
        do
        {
          v16 = v14[1];
          if (v16 == v4)
          {
            if (std::type_info::operator==[abi:ne180100](*(_QWORD *)(v14[2] + 8), a2))
            {
              if (v10 > 1)
              {
                if (v4 >= *(_QWORD *)&v8)
                  v4 %= *(_QWORD *)&v8;
              }
              else
              {
                v4 &= v15;
              }
              v17 = *(uint64_t **)(v12 + 8 * v4);
              do
              {
                v18 = v17;
                v17 = (uint64_t *)*v17;
              }
              while (v17 != v14);
              if (v18 == a1 + 2)
                goto LABEL_39;
              v19 = v18[1];
              if (v10 > 1)
              {
                if (v19 >= *(_QWORD *)&v8)
                  v19 %= *(_QWORD *)&v8;
              }
              else
              {
                v19 &= v15;
              }
              if (v19 != v4)
              {
LABEL_39:
                if (!*v14)
                  goto LABEL_40;
                v20 = *(_QWORD *)(*v14 + 8);
                if (v10 > 1)
                {
                  if (v20 >= *(_QWORD *)&v8)
                    v20 %= *(_QWORD *)&v8;
                }
                else
                {
                  v20 &= v15;
                }
                if (v20 != v4)
LABEL_40:
                  *(_QWORD *)(v12 + 8 * v4) = 0;
              }
              v21 = *v14;
              if (*v14)
              {
                v22 = *(_QWORD *)(v21 + 8);
                if (v10 > 1)
                {
                  if (v22 >= *(_QWORD *)&v8)
                    v22 %= *(_QWORD *)&v8;
                }
                else
                {
                  v22 &= v15;
                }
                if (v22 != v4)
                {
                  *(_QWORD *)(*a1 + 8 * v22) = v18;
                  v21 = *v14;
                }
              }
              *v18 = v21;
              *v14 = 0;
              --a1[3];
              v23[0] = v14;
              v23[1] = a1 + 2;
              v24 = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100]((uint64_t)v23);
              return;
            }
          }
          else
          {
            if (v10 > 1)
            {
              if (v16 >= *(_QWORD *)&v8)
                v16 %= *(_QWORD *)&v8;
            }
            else
            {
              v16 &= v15;
            }
            if (v16 != v11)
              return;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::type_index,std::shared_ptr<Espresso::analysis_result>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 1;
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2))
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *std::shared_ptr<Espresso::analysis_result>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCF20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Espresso::pass_blob_name_indexing>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E2DBCF20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19401CD90);
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1912E4DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::shared_ptr<E5RT::PrecompiledComputeOpCreateOptions>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1;
  uint64_t *v2;
  unint64_t v3;
  char v5;

  v1 = *(char *)(a1 + 23);
  if (v1 >= 0)
    v2 = (uint64_t *)a1;
  else
    v2 = *(uint64_t **)a1;
  if (v1 >= 0)
    v3 = *(unsigned __int8 *)(a1 + 23);
  else
    v3 = *(_QWORD *)(a1 + 8);
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, v2, v3);
}

BOOL std::equal_to<std::string>::operator()[abi:ne180100](unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<Espresso::abstract_blob_container>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<Espresso::abstract_blob_container>>,0>(uint64_t a1)
{
  std::shared_ptr<void>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  __int128 v8;

  for (result = a7; a3 != a5; a3 -= 24)
  {
    v8 = *(_OWORD *)(a3 - 24);
    *(_QWORD *)(result - 8) = *(_QWORD *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(_QWORD *)(a3 - 16) = 0;
    *(_QWORD *)(a3 - 8) = 0;
    *(_QWORD *)(a3 - 24) = 0;
  }
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1912E51F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::string *end;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;

  end = this->__end_;
  v6 = (char *)__from_s + (char *)end - (char *)__to;
  v7 = end;
  while (v6 < (char *)__from_e)
  {
    v8 = *(_OWORD *)v6;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
    ++v7;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = 0;
    *(_QWORD *)v6 = 0;
    v6 += 24;
  }
  this->__end_ = v7;
  if (end != __to)
  {
    v9 = end - 1;
    v10 = 8 * (((char *)end - (char *)__to) >> 3);
    do
    {
      if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9->__r_.__value_.__l.__data_);
      v11 = (__int128 *)((char *)&__from_s[-1] + v10);
      v12 = *v11;
      v9->__r_.__value_.__r.__words[2] = __from_s->__r_.__value_.__r.__words[(unint64_t)v10 / 8 - 1];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
      --v9;
      __from_s->__r_.__value_.__s.__data_[v10 - 1] = 0;
      *(_BYTE *)v11 = 0;
      v10 -= 24;
    }
    while (v10);
  }
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::vector<std::string>::pointer v3;
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::vector<std::string>::pointer end;
  std::__split_buffer<std::string>::pointer v9;
  __int128 v10;
  std::string *v11;
  std::string *v12;
  std::string *value;
  _QWORD v15[3];
  char v16;
  std::__split_buffer<std::string>::pointer v17;
  std::__split_buffer<std::string>::pointer v18;

  v3 = __p;
  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  __v->__begin_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  end = this->__end_;
  v9 = __v->__end_;
  v17 = v9;
  v18 = v9;
  v15[0] = p_end_cap;
  v15[1] = &v17;
  v15[2] = &v18;
  if (end != v3)
  {
    do
    {
      v10 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v9->__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      ++v9;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      ++v3;
    }
    while (v3 != end);
    v18 = v9;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  __v->__end_ = v9;
  v11 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v11;
  v12 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v12;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void Espresso::optimizer_builder::~optimizer_builder(void **this)
{
  *this = &unk_1E2D82538;
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  std::deque<std::pair<std::shared_ptr<Espresso::abstract_context>,Espresso::compute_path>>::~deque[abi:ne180100]((uint64_t)(this + 18));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 13));
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 11));
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  std::__tree<std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::__map_value_compare<Espresso::AOT::BackendIdentifier,std::__value_type<Espresso::AOT::BackendIdentifier,double>,std::less<Espresso::AOT::BackendIdentifier>,true>,std::allocator<std::__value_type<Espresso::AOT::BackendIdentifier,double>>>::destroy((uint64_t)(this + 3), this[4]);
  std::shared_ptr<void>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
}

void Espresso::adam_optimizer_builder::~adam_optimizer_builder(void **this)
{
  *this = off_1E2D8C9D0;
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  if (*((char *)this + 391) < 0)
    operator delete(this[46]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  Espresso::optimizer_builder::~optimizer_builder(this);
}

{
  *this = off_1E2D8C9D0;
  if (*((char *)this + 415) < 0)
    operator delete(this[49]);
  if (*((char *)this + 391) < 0)
    operator delete(this[46]);
  if (*((char *)this + 367) < 0)
    operator delete(this[43]);
  if (*((char *)this + 343) < 0)
    operator delete(this[40]);
  if (*((char *)this + 319) < 0)
    operator delete(this[37]);
  Espresso::optimizer_builder::~optimizer_builder(this);
  JUMPOUT(0x19401CD90);
}

void Espresso::adam_optimizer_builder::init_optimizer_states(Espresso::adam_optimizer_builder *this)
{
  uint64_t *v2;
  char *v3;
  size_t v4;
  void **v5;
  const void *v6;
  void **v7;
  size_t v8;
  void **v9;
  char *v10;
  size_t v11;
  void **v12;
  char *v13;
  size_t v14;
  void **v15;
  char *v16;
  void **v17;
  size_t v18;
  void **v19;
  char *v20;
  size_t v21;
  void **v22;
  char *v23;
  size_t v24;
  void **v25;
  char *v26;
  void **v27;
  void *v28[2];
  char v29;
  __int128 v30;
  uint64_t v31;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *v48[2];
  char v49;
  __int128 v50;
  uint64_t v51;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = (char *)this + 240;
  if (*((char *)this + 263) >= 0)
    v4 = *((unsigned __int8 *)this + 263);
  else
    v4 = *((_QWORD *)this + 31);
  v5 = v48;
  std::string::basic_string[abi:ne180100]((uint64_t)v48, v4 + 4);
  if (v49 < 0)
    v5 = (void **)v48[0];
  if (v4)
  {
    if (*((char *)this + 263) >= 0)
      v6 = v3;
    else
      v6 = (const void *)*((_QWORD *)this + 30);
    memmove(v5, v6, v4);
  }
  strcpy((char *)v5 + v4, "/neg");
  Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)v3, (uint64_t)v48, (uint64_t)&v50, -1.0);
  v7 = (void **)((char *)this + 296);
  if (*((char *)this + 319) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = v50;
  *((_QWORD *)this + 39) = v51;
  if (v49 < 0)
    operator delete(v48[0]);
  init_scalar_global((uint64_t)v2, (std::string *)((char *)this + 320), *((float *)this + 70));
  if (*((char *)this + 343) >= 0)
    v8 = *((unsigned __int8 *)this + 343);
  else
    v8 = *((_QWORD *)this + 41);
  v9 = v46;
  std::string::basic_string[abi:ne180100]((uint64_t)v46, v8 + 4);
  if (v47 < 0)
    v9 = (void **)v46[0];
  if (v8)
  {
    if (*((char *)this + 343) >= 0)
      v10 = (char *)this + 320;
    else
      v10 = (char *)*((_QWORD *)this + 40);
    memmove(v9, v10, v8);
  }
  strcpy((char *)v9 + v8, "/neg");
  Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)this + 320, (uint64_t)v46, (uint64_t)&v50, -1.0);
  if (v47 < 0)
    operator delete(v46[0]);
  if (*((char *)this + 343) >= 0)
    v11 = *((unsigned __int8 *)this + 343);
  else
    v11 = *((_QWORD *)this + 41);
  v12 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 4);
  if (v43 < 0)
    v12 = (void **)__p[0];
  if (v11)
  {
    if (*((char *)this + 343) >= 0)
      v13 = (char *)this + 320;
    else
      v13 = (char *)*((_QWORD *)this + 40);
    memmove(v12, v13, v11);
  }
  strcpy((char *)v12 + v11, "/res");
  Espresso::sequential_builder::by_constant_op(2u, v2, (uint64_t)&v50, (uint64_t)__p, (uint64_t)v44, 1.0);
  if (v43 < 0)
    operator delete(__p[0]);
  if (*((char *)this + 343) >= 0)
    v14 = *((unsigned __int8 *)this + 343);
  else
    v14 = *((_QWORD *)this + 41);
  v15 = v38;
  std::string::basic_string[abi:ne180100]((uint64_t)v38, v14 + 6);
  if (v39 < 0)
    v15 = (void **)v38[0];
  if (v14)
  {
    if (*((char *)this + 343) >= 0)
      v16 = (char *)this + 320;
    else
      v16 = (char *)*((_QWORD *)this + 40);
    memmove(v15, v16, v14);
  }
  strcpy((char *)v15 + v14, "/scale");
  Espresso::sequential_builder::by_constant_op(0xAu, v2, (uint64_t)v44, (uint64_t)v38, (uint64_t)v40, 1.0);
  v17 = (void **)((char *)this + 368);
  if (*((char *)this + 391) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = *(_OWORD *)v40;
  *((_QWORD *)this + 48) = v41;
  if (v39 < 0)
    operator delete(v38[0]);
  init_scalar_global((uint64_t)v2, (std::string *)((char *)this + 344), *((float *)this + 71));
  if (*((char *)this + 367) >= 0)
    v18 = *((unsigned __int8 *)this + 367);
  else
    v18 = *((_QWORD *)this + 44);
  v19 = v36;
  std::string::basic_string[abi:ne180100]((uint64_t)v36, v18 + 4);
  if (v37 < 0)
    v19 = (void **)v36[0];
  if (v18)
  {
    if (*((char *)this + 367) >= 0)
      v20 = (char *)this + 344;
    else
      v20 = (char *)*((_QWORD *)this + 43);
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, "/neg");
  Espresso::sequential_builder::by_constant_op(3u, v2, (uint64_t)this + 344, (uint64_t)v36, (uint64_t)v40, -1.0);
  if (v37 < 0)
    operator delete(v36[0]);
  if (*((char *)this + 367) >= 0)
    v21 = *((unsigned __int8 *)this + 367);
  else
    v21 = *((_QWORD *)this + 44);
  v22 = v32;
  std::string::basic_string[abi:ne180100]((uint64_t)v32, v21 + 4);
  if (v33 < 0)
    v22 = (void **)v32[0];
  if (v21)
  {
    if (*((char *)this + 367) >= 0)
      v23 = (char *)this + 344;
    else
      v23 = (char *)*((_QWORD *)this + 43);
    memmove(v22, v23, v21);
  }
  strcpy((char *)v22 + v21, "/res");
  Espresso::sequential_builder::by_constant_op(2u, v2, (uint64_t)v40, (uint64_t)v32, (uint64_t)v34, 1.0);
  if (v33 < 0)
    operator delete(v32[0]);
  if (*((char *)this + 367) >= 0)
    v24 = *((unsigned __int8 *)this + 367);
  else
    v24 = *((_QWORD *)this + 44);
  v25 = v28;
  std::string::basic_string[abi:ne180100]((uint64_t)v28, v24 + 6);
  if (v29 < 0)
    v25 = (void **)v28[0];
  if (v24)
  {
    if (*((char *)this + 367) >= 0)
      v26 = (char *)this + 344;
    else
      v26 = (char *)*((_QWORD *)this + 43);
    memmove(v25, v26, v24);
  }
  strcpy((char *)v25 + v24, "/scale");
  Espresso::sequential_builder::by_constant_op(0xAu, v2, (uint64_t)v34, (uint64_t)v28, (uint64_t)&v30, 1.0);
  v27 = (void **)((char *)this + 392);
  if (*((char *)this + 415) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v30;
  *((_QWORD *)this + 51) = v31;
  if (v29 < 0)
    operator delete(v28[0]);
  if (v35 < 0)
    operator delete(v34[0]);
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  if (v45 < 0)
    operator delete(v44[0]);
  if (SHIBYTE(v51) < 0)
    operator delete((void *)v50);
}

void sub_1912E5A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  uint64_t v47;

  if (a14 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  if (a47 < 0)
    operator delete(a42);
  if (*(char *)(v47 - 137) < 0)
    operator delete(*(void **)(v47 - 160));
  if (*(char *)(v47 - 65) < 0)
    operator delete(*(void **)(v47 - 88));
  _Unwind_Resume(exception_object);
}

void sub_1912E5B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    JUMPOUT(0x1912E5B18);
  JUMPOUT(0x1912E5B1CLL);
}

void sub_1912E5B4C()
{
  JUMPOUT(0x1912E5B1CLL);
}

void sub_1912E5B54()
{
  uint64_t v0;

  if (*(char *)(v0 - 113) < 0)
    JUMPOUT(0x1912E5B28);
  JUMPOUT(0x1912E5B30);
}

void sub_1912E5B68()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    JUMPOUT(0x1912E5B2CLL);
  JUMPOUT(0x1912E5B30);
}

void Espresso::adam_optimizer_builder::update_states(Espresso::adam_optimizer_builder *this)
{
  uint64_t *v2;

  v2 = (uint64_t *)((char *)this + 8);
  update_scalar_global_by_constant((uint64_t *)this + 1, (uint64_t)this + 208, 2u, 1.0);
  update_scalar_global_by_constant(v2, (uint64_t)this + 320, 3u, *((float *)this + 70));
  update_scalar_global_by_constant(v2, (uint64_t)this + 344, 3u, *((float *)this + 71));
}

void Espresso::adam_optimizer_builder::update_func(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *size;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  size_t v15;
  std::string *p_str;
  const void *v17;
  uint64_t *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  float v21;
  size_t v22;
  void **v23;
  std::string *v24;
  float v25;
  size_t v26;
  void **v27;
  const void *v28;
  size_t v29;
  void **v30;
  std::string *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  size_t v36;
  std::string *v37;
  const void *v38;
  unint64_t *v39;
  unint64_t v40;
  float v41;
  size_t v42;
  void **v43;
  std::string *v44;
  size_t v45;
  void **v46;
  const void *v47;
  float v48;
  int v49;
  size_t v50;
  void **v51;
  void **v52;
  size_t v53;
  void **v54;
  std::string *v55;
  size_t v56;
  void **v57;
  std::string *v58;
  size_t v59;
  void **v60;
  std::string *v61;
  size_t v62;
  void **v63;
  std::string *v64;
  unsigned int v65;
  size_t v66;
  void **v67;
  std::string *v68;
  size_t v69;
  void **v70;
  const void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  void *v78;
  char v79;
  void *v80;
  char v81;
  std::string v82;
  std::string v83;
  std::string v84;
  void *v85[2];
  char v86;
  void *v87[2];
  char v88;
  void *v89[2];
  char v90;
  void *v91[2];
  char v92;
  void *v93[2];
  char v94;
  void *v95[2];
  char v96;
  void *v97[2];
  char v98;
  void *v99[2];
  char v100;
  void *v101[2];
  char v102;
  void *v103[2];
  char v104;
  void *v105;
  char v106;
  void *v107;
  char v108;
  void *v109[2];
  char v110;
  void *v111[2];
  char v112;
  void *v113[2];
  char v114;
  void *v115[2];
  char v116;
  void *v117[2];
  char v118;
  void *v119[2];
  unsigned __int8 v120;
  void *v121[2];
  char v122;
  std::string v123;
  std::string v124;
  uint64_t v125[2];
  std::string v126;
  _OWORD v127[2];
  uint64_t v128;
  void *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  char v135;
  void *v136;
  char v137;
  void *v138[2];
  char v139;
  void *v140[2];
  char v141;
  void *v142[2];
  char v143;
  void *v144[2];
  char v145;
  void *v146[2];
  char v147;
  std::string v148;
  std::string __str;
  uint64_t v150[2];
  std::string v151;
  _OWORD v152[2];
  uint64_t v153;
  void *__p;
  void *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  void *v162;
  _BYTE *v163;
  std::string v164;

  v6 = Espresso::net::loaded_global_name(*(_QWORD **)(a1 + 88), a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v164, *(const std::string::value_type **)v6, *(_QWORD *)(v6 + 8));
  }
  else
  {
    v7 = *(_OWORD *)v6;
    v164.__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 16);
    *(_OWORD *)&v164.__r_.__value_.__l.__data_ = v7;
  }
  Espresso::net::get_global(&v151, *(_QWORD *)(a1 + 88), (unsigned __int8 *)&v164);
  Espresso::abstract_blob_container::shape((char *)&v159, (uint64_t)v151.__r_.__value_.__l.__data_);
  size = (std::__shared_weak_count *)v151.__r_.__value_.__l.__size_;
  if (v151.__r_.__value_.__l.__size_)
  {
    v9 = (unint64_t *)(v151.__r_.__value_.__l.__size_ + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v11 = *(unsigned int *)(a1 + 136);
  v152[0] = v159;
  v152[1] = v160;
  v153 = v161;
  __p = 0;
  v156 = 0;
  v155 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v162, (uint64_t)v163, (v163 - (_BYTE *)v162) >> 2);
  Espresso::make_filled_bc(&v157, a1 + 120, 0.0, v11, (uint64_t)v152);
  if (__p)
  {
    v155 = __p;
    operator delete(__p);
  }
  v12 = (std::__shared_weak_count *)v158;
  v150[0] = v157;
  v150[1] = v158;
  if (v158)
  {
    v13 = (unint64_t *)(v158 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (*(char *)(a2 + 23) >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  p_str = &__str;
  std::string::basic_string[abi:ne180100]((uint64_t)&__str, v15 + 9);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v15)
  {
    if (*(char *)(a2 + 23) >= 0)
      v17 = (const void *)a2;
    else
      v17 = *(const void **)a2;
    memmove(p_str, v17, v15);
  }
  strcpy((char *)p_str + v15, "/momentum");
  std::string::basic_string[abi:ne180100]<0>(&v148, "");
  v18 = (uint64_t *)(a1 + 8);
  Espresso::sequential_builder::load_global_op(&__str, &v148, (uint64_t *)(a1 + 8), v150, (uint64_t)&v151);
  if (SHIBYTE(v148.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v148.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v21 = *(float *)(a1 + 280);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  else
    v22 = v151.__r_.__value_.__l.__size_;
  v23 = v146;
  std::string::basic_string[abi:ne180100]((uint64_t)v146, v22 + 8);
  if (v147 < 0)
    v23 = (void **)v146[0];
  if (v22)
  {
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v151;
    else
      v24 = (std::string *)v151.__r_.__value_.__r.__words[0];
    memmove(v23, v24, v22);
  }
  strcpy((char *)v23 + v22, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)&v151, (uint64_t)v146, (uint64_t)&__str, v21);
  if (v147 < 0)
    operator delete(v146[0]);
  v25 = *(float *)(a1 + 280);
  if (*(char *)(a3 + 23) >= 0)
    v26 = *(unsigned __int8 *)(a3 + 23);
  else
    v26 = *(_QWORD *)(a3 + 8);
  v27 = v142;
  std::string::basic_string[abi:ne180100]((uint64_t)v142, v26 + 8);
  if (v143 < 0)
    v27 = (void **)v142[0];
  if (v26)
  {
    if (*(char *)(a3 + 23) >= 0)
      v28 = (const void *)a3;
    else
      v28 = *(const void **)a3;
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), a3, (uint64_t)v142, (uint64_t)v144, 1.0 - v25);
  if (v143 < 0)
    operator delete(v142[0]);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  else
    v29 = v151.__r_.__value_.__l.__size_;
  v30 = v138;
  std::string::basic_string[abi:ne180100]((uint64_t)v138, v29 + 8);
  if (v139 < 0)
    v30 = (void **)v138[0];
  if (v29)
  {
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = &v151;
    else
      v31 = (std::string *)v151.__r_.__value_.__r.__words[0];
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, "/updated");
  Espresso::sequential_builder::elementwise_op(0, (uint64_t *)(a1 + 8), (uint64_t)&__str, (uint64_t)v144, (uint64_t)v138, (uint64_t)v140);
  if (v139 < 0)
    operator delete(v138[0]);
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v151, (uint64_t *)(a1 + 8), (uint64_t)v140, (uint64_t)&v134, (uint64_t)&v136);
  if (v137 < 0)
    operator delete(v136);
  if (v135 < 0)
    operator delete(v134);
  v32 = *(unsigned int *)(a1 + 136);
  v127[0] = v159;
  v127[1] = v160;
  v128 = v161;
  v129 = 0;
  v131 = 0;
  v130 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v129, v162, (uint64_t)v163, (v163 - (_BYTE *)v162) >> 2);
  Espresso::make_filled_bc(&v132, a1 + 120, 0.0, v32, (uint64_t)v127);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  v33 = (std::__shared_weak_count *)v133;
  v125[0] = v132;
  v125[1] = v133;
  if (v133)
  {
    v34 = (unint64_t *)(v133 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  if (*(char *)(a2 + 23) >= 0)
    v36 = *(unsigned __int8 *)(a2 + 23);
  else
    v36 = *(_QWORD *)(a2 + 8);
  v37 = &v124;
  std::string::basic_string[abi:ne180100]((uint64_t)&v124, v36 + 9);
  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v37 = (std::string *)v124.__r_.__value_.__r.__words[0];
  if (v36)
  {
    if (*(char *)(a2 + 23) >= 0)
      v38 = (const void *)a2;
    else
      v38 = *(const void **)a2;
    memmove(v37, v38, v36);
  }
  strcpy((char *)v37 + v36, "/variance");
  std::string::basic_string[abi:ne180100]<0>(&v123, "");
  Espresso::sequential_builder::load_global_op(&v124, &v123, (uint64_t *)(a1 + 8), v125, (uint64_t)&v126);
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (v33)
  {
    v39 = (unint64_t *)&v33->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v41 = *(float *)(a1 + 284);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  else
    v42 = v126.__r_.__value_.__l.__size_;
  v43 = v121;
  std::string::basic_string[abi:ne180100]((uint64_t)v121, v42 + 8);
  if (v122 < 0)
    v43 = (void **)v121[0];
  if (v42)
  {
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v126;
    else
      v44 = (std::string *)v126.__r_.__value_.__r.__words[0];
    memmove(v43, v44, v42);
  }
  strcpy((char *)v43 + v42, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)&v126, (uint64_t)v121, (uint64_t)&v124, v41);
  if (v122 < 0)
    operator delete(v121[0]);
  if (*(char *)(a3 + 23) >= 0)
    v45 = *(unsigned __int8 *)(a3 + 23);
  else
    v45 = *(_QWORD *)(a3 + 8);
  v46 = v117;
  std::string::basic_string[abi:ne180100]((uint64_t)v117, v45 + 8);
  if (v118 < 0)
    v46 = (void **)v117[0];
  if (v45)
  {
    if (*(char *)(a3 + 23) >= 0)
      v47 = (const void *)a3;
    else
      v47 = *(const void **)a3;
    memmove(v46, v47, v45);
  }
  strcpy((char *)v46 + v45, "/squered");
  Espresso::sequential_builder::by_constant_op(0xDu, (uint64_t *)(a1 + 8), a3, (uint64_t)v117, (uint64_t)v119, 2.0);
  if (v118 < 0)
    operator delete(v117[0]);
  v48 = *(float *)(a1 + 284);
  v49 = (char)v120;
  if ((v120 & 0x80u) == 0)
    v50 = v120;
  else
    v50 = (size_t)v119[1];
  v51 = v113;
  std::string::basic_string[abi:ne180100]((uint64_t)v113, v50 + 8);
  if (v114 < 0)
    v51 = (void **)v113[0];
  if (v50)
  {
    if (v49 >= 0)
      v52 = v119;
    else
      v52 = (void **)v119[0];
    memmove(v51, v52, v50);
  }
  strcpy((char *)v51 + v50, "/decayed");
  Espresso::sequential_builder::by_constant_op(3u, (uint64_t *)(a1 + 8), (uint64_t)v119, (uint64_t)v113, (uint64_t)v115, 1.0 - v48);
  if (v114 < 0)
    operator delete(v113[0]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v53 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  else
    v53 = v126.__r_.__value_.__l.__size_;
  v54 = v109;
  std::string::basic_string[abi:ne180100]((uint64_t)v109, v53 + 8);
  if (v110 < 0)
    v54 = (void **)v109[0];
  if (v53)
  {
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v55 = &v126;
    else
      v55 = (std::string *)v126.__r_.__value_.__r.__words[0];
    memmove(v54, v55, v53);
  }
  strcpy((char *)v54 + v53, "/updated");
  Espresso::sequential_builder::elementwise_op(0, (uint64_t *)(a1 + 8), (uint64_t)&v126, (uint64_t)v115, (uint64_t)v109, (uint64_t)v111);
  if (v110 < 0)
    operator delete(v109[0]);
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v126, (uint64_t *)(a1 + 8), (uint64_t)v111, (uint64_t)&v105, (uint64_t)&v107);
  if (v108 < 0)
    operator delete(v107);
  if (v106 < 0)
    operator delete(v105);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  else
    v56 = v151.__r_.__value_.__l.__size_;
  v57 = v101;
  std::string::basic_string[abi:ne180100]((uint64_t)v101, v56 + 16);
  if (v102 < 0)
    v57 = (void **)v101[0];
  if (v56)
  {
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v58 = &v151;
    else
      v58 = (std::string *)v151.__r_.__value_.__r.__words[0];
    memmove(v57, v58, v56);
  }
  strcpy((char *)v57 + v56, "/bias_correction");
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), (uint64_t)v140, a1 + 368, (uint64_t)v101, (uint64_t)v103);
  if (v102 < 0)
    operator delete(v101[0]);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  else
    v59 = v126.__r_.__value_.__l.__size_;
  v60 = v97;
  std::string::basic_string[abi:ne180100]((uint64_t)v97, v59 + 16);
  if (v98 < 0)
    v60 = (void **)v97[0];
  if (v59)
  {
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = &v126;
    else
      v61 = (std::string *)v126.__r_.__value_.__r.__words[0];
    memmove(v60, v61, v59);
  }
  strcpy((char *)v60 + v59, "/bias_correction");
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), (uint64_t)v111, a1 + 392, (uint64_t)v97, (uint64_t)v99);
  if (v98 < 0)
    operator delete(v97[0]);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  else
    v62 = v151.__r_.__value_.__l.__size_;
  v63 = v93;
  std::string::basic_string[abi:ne180100]((uint64_t)v93, v62 + 5);
  if (v94 < 0)
    v63 = (void **)v93[0];
  if (v62)
  {
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &v151;
    else
      v64 = (std::string *)v151.__r_.__value_.__r.__words[0];
    memmove(v63, v64, v62);
  }
  strcpy((char *)v63 + v62, "/step");
  Espresso::sequential_builder::elementwise_op(1u, (uint64_t *)(a1 + 8), (uint64_t)v103, a1 + 296, (uint64_t)v93, (uint64_t)v95);
  if (v94 < 0)
    operator delete(v93[0]);
  v65 = *(_DWORD *)(a1 + 288);
  if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = HIBYTE(v126.__r_.__value_.__r.__words[2]);
  else
    v66 = v126.__r_.__value_.__l.__size_;
  v67 = v89;
  std::string::basic_string[abi:ne180100]((uint64_t)v89, v66 + 6);
  if (v90 < 0)
    v67 = (void **)v89[0];
  if (v66)
  {
    if ((v126.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v68 = &v126;
    else
      v68 = (std::string *)v126.__r_.__value_.__r.__words[0];
    memmove(v67, v68, v66);
  }
  strcpy((char *)v67 + v66, "/rsqrt");
  Espresso::sequential_builder::rsqrt(v18, (uint64_t)v99, (uint64_t)v89, (uint64_t)v91, v65);
  if (v90 < 0)
    operator delete(v89[0]);
  if (*(char *)(a2 + 23) >= 0)
    v69 = *(unsigned __int8 *)(a2 + 23);
  else
    v69 = *(_QWORD *)(a2 + 8);
  v70 = v85;
  std::string::basic_string[abi:ne180100]((uint64_t)v85, v69 + 10);
  if (v86 < 0)
    v70 = (void **)v85[0];
  if (v69)
  {
    if (*(char *)(a2 + 23) >= 0)
      v71 = (const void *)a2;
    else
      v71 = *(const void **)a2;
    memmove(v70, v71, v69);
  }
  strcpy((char *)v70 + v69, "/adam_step");
  Espresso::sequential_builder::elementwise_op(1u, v18, (uint64_t)v95, (uint64_t)v91, (uint64_t)v85, (uint64_t)v87);
  if (v86 < 0)
    operator delete(v85[0]);
  std::operator+<char>();
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v82, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
  else
    v82 = v84;
  Espresso::sequential_builder::elementwise_op(0, v18, a2, (uint64_t)v87, (uint64_t)&v82, (uint64_t)&v83);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  v84 = v83;
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  std::operator+<char>();
  Espresso::sequential_builder::store_global_op(&v164, v18, (uint64_t)&v84, (uint64_t)&v78, (uint64_t)&v80);
  if (v81 < 0)
    operator delete(v80);
  if (v79 < 0)
    operator delete(v78);
  if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v84.__r_.__value_.__l.__data_);
  if (v88 < 0)
    operator delete(v87[0]);
  if (v92 < 0)
    operator delete(v91[0]);
  if (v96 < 0)
    operator delete(v95[0]);
  if (v100 < 0)
    operator delete(v99[0]);
  if (v104 < 0)
    operator delete(v103[0]);
  if (v112 < 0)
    operator delete(v111[0]);
  if (v116 < 0)
  {
    operator delete(v115[0]);
    if ((v49 & 0x80000000) == 0)
      goto LABEL_236;
  }
  else if ((v49 & 0x80000000) == 0)
  {
    goto LABEL_236;
  }
  operator delete(v119[0]);
LABEL_236:
  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v124.__r_.__value_.__l.__data_);
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  v72 = (std::__shared_weak_count *)v133;
  if (v133)
  {
    v73 = (unint64_t *)(v133 + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  if (v141 < 0)
    operator delete(v140[0]);
  if (v145 < 0)
    operator delete(v144[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v151.__r_.__value_.__l.__data_);
  v75 = (std::__shared_weak_count *)v158;
  if (v158)
  {
    v76 = (unint64_t *)(v158 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v164.__r_.__value_.__l.__data_);
}

